
----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/abc.py----------------------------------------
A:sympy.abc.(a, b, c, d, e, f, g, h, i, j)->symbols('a, b, c, d, e, f, g, h, i, j')
A:sympy.abc.(k, l, m, n, o, p, q, r, s, t)->symbols('k, l, m, n, o, p, q, r, s, t')
A:sympy.abc.(u, v, w, x, y, z)->symbols('u, v, w, x, y, z')
A:sympy.abc.(A, B, C, D, E, F, G, H, I, J)->symbols('A, B, C, D, E, F, G, H, I, J')
A:sympy.abc.(K, L, M, N, O, P, Q, R, S, T)->symbols('K, L, M, N, O, P, Q, R, S, T')
A:sympy.abc.(U, V, W, X, Y, Z)->symbols('U, V, W, X, Y, Z')
A:sympy.abc.(alpha, beta, gamma, delta)->symbols('alpha, beta, gamma, delta')
A:sympy.abc.(epsilon, zeta, eta, theta)->symbols('epsilon, zeta, eta, theta')
A:sympy.abc.(iota, kappa, lamda, mu)->symbols('iota, kappa, lamda, mu')
A:sympy.abc.(nu, xi, omicron, pi)->symbols('nu, xi, omicron, pi')
A:sympy.abc.(rho, sigma, tau, upsilon)->symbols('rho, sigma, tau, upsilon')
A:sympy.abc.(phi, chi, psi, omega)->symbols('phi, chi, psi, omega')
A:sympy.abc._latin->list(string.ascii_letters)
A:sympy.abc._greek->list(greeks)
A:sympy.abc.(_k, _)->ns.popitem()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/galgebra.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/release.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/this.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/__init__.py----------------------------------------
A:sympy.__init__.debug_str->os.getenv('SYMPY_DEBUG', 'False')
A:sympy.__init__.SYMPY_DEBUG->__sympy_debug()
A:sympy.__init__.test->lazy_function('sympy.testing.runtests', 'test')
A:sympy.__init__.doctest->lazy_function('sympy.testing.runtests', 'doctest')
sympy.__init__.__sympy_debug()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/conftest.py----------------------------------------
A:sympy.conftest.sp->re.compile('([0-9]+)/([1-9][0-9]*)')
A:sympy.conftest.split->config.getoption('--split')
A:sympy.conftest.m->re.compile('([0-9]+)/([1-9][0-9]*)').match(split)
A:sympy.conftest.(i, t)->map(int, m.groups())
A:sympy.conftest.version->gmpy2.version()
sympy.conftest.check_disabled(request)
sympy.conftest.file_clear_cache()
sympy.conftest.process_split(config,items)
sympy.conftest.pytest_addoption(parser)
sympy.conftest.pytest_collection_modifyitems(config,items)
sympy.conftest.pytest_report_header(config)
sympy.conftest.pytest_terminal_summary(terminalreporter)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/utils.py----------------------------------------
A:sympy.multipledispatch.utils.rest->expand_tuples(L[1:])
A:sympy.multipledispatch.utils.incoming_edges->reverse_dict(edges)
A:sympy.multipledispatch.utils.S->collections.OrderedDict.fromkeys((v for v in edges if v not in incoming_edges))
A:sympy.multipledispatch.utils.(n, _)->collections.OrderedDict.fromkeys((v for v in edges if v not in incoming_edges)).popitem()
A:sympy.multipledispatch.utils.key->func(item)
sympy.multipledispatch.utils._toposort(edges)
sympy.multipledispatch.utils.expand_tuples(L)
sympy.multipledispatch.utils.groupby(func,seq)
sympy.multipledispatch.utils.reverse_dict(d)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/conflict.py----------------------------------------
A:sympy.multipledispatch.conflict.signatures->list(map(tuple, signatures))
A:sympy.multipledispatch.conflict.n->len(signatures[0])
A:sympy.multipledispatch.conflict.edges->groupby(lambda x: x[0], edges)
sympy.multipledispatch.conflict.AmbiguityWarning(Warning)
sympy.multipledispatch.conflict.ambiguities(signatures)
sympy.multipledispatch.conflict.ambiguous(a,b)
sympy.multipledispatch.conflict.consistent(a,b)
sympy.multipledispatch.conflict.edge(a,b,tie_breaker=hash)
sympy.multipledispatch.conflict.ordering(signatures)
sympy.multipledispatch.conflict.super_signature(signatures)
sympy.multipledispatch.conflict.supercedes(a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/core.py----------------------------------------
A:sympy.multipledispatch.core.types->tuple(types)
A:sympy.multipledispatch.core.dispatcher->inspect.currentframe().f_back.f_locals.get(name, MethodDispatcher(name))
A:sympy.multipledispatch.core.namespace[name]->Dispatcher(name)
A:sympy.multipledispatch.core.signature->inspect.signature(func)
sympy.multipledispatch.core.dispatch(*types,namespace=global_namespace,on_ambiguity=ambiguity_warn)
sympy.multipledispatch.core.ismethod(func)
sympy.multipledispatch.dispatch(*types,namespace=global_namespace,on_ambiguity=ambiguity_warn)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/dispatcher.py----------------------------------------
A:sympy.multipledispatch.dispatcher.types->tuple([type(arg) for arg in args])
A:sympy.multipledispatch.dispatcher.signature->tuple(super_signature(amb))
A:sympy.multipledispatch.dispatcher.dispatcher->_unresolved_dispatchers.pop()
A:sympy.multipledispatch.dispatcher.sig->inspect.signature(func)
A:sympy.multipledispatch.dispatcher.params->cls.get_func_params(func)
A:sympy.multipledispatch.dispatcher.annotations->self.get_func_annotations(func)
A:sympy.multipledispatch.dispatcher.str_sig->', '.join((c.__name__ if isinstance(c, type) else str(c) for c in signature))
A:sympy.multipledispatch.dispatcher.self.ordering->ordering(self.funcs)
A:sympy.multipledispatch.dispatcher.amb->ambiguities(self.funcs)
A:sympy.multipledispatch.dispatcher.func->self.dispatch(*types)
A:sympy.multipledispatch.dispatcher.funcs->self.dispatch_iter(*types)
A:sympy.multipledispatch.dispatcher.n->len(types)
sympy.multipledispatch.Dispatcher(self,name,doc=None)
sympy.multipledispatch.MDNotImplementedError(NotImplementedError)
sympy.multipledispatch.dispatcher.Dispatcher(self,name,doc=None)
sympy.multipledispatch.dispatcher.Dispatcher.__doc__(self)
sympy.multipledispatch.dispatcher.Dispatcher.__getstate__(self)
sympy.multipledispatch.dispatcher.Dispatcher.__setstate__(self,d)
sympy.multipledispatch.dispatcher.Dispatcher.__str__(self)
sympy.multipledispatch.dispatcher.Dispatcher._help(self,*args)
sympy.multipledispatch.dispatcher.Dispatcher._source(self,*args)
sympy.multipledispatch.dispatcher.Dispatcher.add(self,signature,func,on_ambiguity=ambiguity_warn)
sympy.multipledispatch.dispatcher.Dispatcher.dispatch(self,*types)
sympy.multipledispatch.dispatcher.Dispatcher.dispatch_iter(self,*types)
sympy.multipledispatch.dispatcher.Dispatcher.get_func_annotations(cls,func)
sympy.multipledispatch.dispatcher.Dispatcher.get_func_params(cls,func)
sympy.multipledispatch.dispatcher.Dispatcher.help(self,*args,**kwargs)
sympy.multipledispatch.dispatcher.Dispatcher.register(self,*types,**kwargs)
sympy.multipledispatch.dispatcher.Dispatcher.reorder(self,on_ambiguity=ambiguity_warn)
sympy.multipledispatch.dispatcher.Dispatcher.resolve(self,types)
sympy.multipledispatch.dispatcher.Dispatcher.source(self,*args,**kwargs)
sympy.multipledispatch.dispatcher.MDNotImplementedError(NotImplementedError)
sympy.multipledispatch.dispatcher.MethodDispatcher(self,*args,**kwargs)
sympy.multipledispatch.dispatcher.MethodDispatcher.__get__(self,instance,owner)
sympy.multipledispatch.dispatcher.MethodDispatcher.get_func_params(cls,func)
sympy.multipledispatch.dispatcher.RaiseNotImplementedError(self,dispatcher)
sympy.multipledispatch.dispatcher.ambiguity_register_error_ignore_dup(dispatcher,ambiguities)
sympy.multipledispatch.dispatcher.ambiguity_warn(dispatcher,ambiguities)
sympy.multipledispatch.dispatcher.halt_ordering()
sympy.multipledispatch.dispatcher.restart_ordering(on_ambiguity=ambiguity_warn)
sympy.multipledispatch.dispatcher.source(func)
sympy.multipledispatch.dispatcher.str_signature(sig)
sympy.multipledispatch.dispatcher.warning_text(name,amb)
sympy.multipledispatch.halt_ordering()
sympy.multipledispatch.restart_ordering(on_ambiguity=ambiguity_warn)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/tests/test_conflict.py----------------------------------------
A:sympy.multipledispatch.tests.test_conflict.result->ambiguities(signatures)
A:sympy.multipledispatch.tests.test_conflict.expected->set()
A:sympy.multipledispatch.tests.test_conflict.ord->ordering(signatures)
sympy.multipledispatch.tests.test_conflict.A
sympy.multipledispatch.tests.test_conflict.B(A)
sympy.multipledispatch.tests.test_conflict.C
sympy.multipledispatch.tests.test_conflict.test_ambiguities()
sympy.multipledispatch.tests.test_conflict.test_ambiguous()
sympy.multipledispatch.tests.test_conflict.test_consistent()
sympy.multipledispatch.tests.test_conflict.test_ordering()
sympy.multipledispatch.tests.test_conflict.test_super_signature()
sympy.multipledispatch.tests.test_conflict.test_supercedes()
sympy.multipledispatch.tests.test_conflict.test_type_mro()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/tests/test_core.py----------------------------------------
A:sympy.multipledispatch.tests.test_core.dispatch->partial(orig_dispatch, namespace=test_namespace)
A:sympy.multipledispatch.tests.test_core.foo1->orig_dispatch(int, namespace=ns1)(foo)
A:sympy.multipledispatch.tests.test_core.foo2->orig_dispatch(int, namespace=ns2)(foo)
A:sympy.multipledispatch.tests.test_core.foo->Foo()
sympy.multipledispatch.tests.test_E(C)
sympy.multipledispatch.tests.test_core.A
sympy.multipledispatch.tests.test_core.B
sympy.multipledispatch.tests.test_core.C(A)
sympy.multipledispatch.tests.test_core.D(C)
sympy.multipledispatch.tests.test_core.E(C)
sympy.multipledispatch.tests.test_core.test_caching_correct_behavior()
sympy.multipledispatch.tests.test_core.test_competing_ambiguous()
sympy.multipledispatch.tests.test_core.test_competing_multiple()
sympy.multipledispatch.tests.test_core.test_competing_solutions()
sympy.multipledispatch.tests.test_core.test_inheritance()
sympy.multipledispatch.tests.test_core.test_inheritance_and_multiple_dispatch()
sympy.multipledispatch.tests.test_core.test_methods()
sympy.multipledispatch.tests.test_core.test_methods_multiple_dispatch()
sympy.multipledispatch.tests.test_core.test_multipledispatch()
sympy.multipledispatch.tests.test_core.test_namespaces()
sympy.multipledispatch.tests.test_core.test_singledispatch()
sympy.multipledispatch.tests.test_core.test_union_types()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/tests/test_dispatcher.py----------------------------------------
A:sympy.multipledispatch.tests.test_dispatcher.f->Dispatcher('f')
A:sympy.multipledispatch.tests.test_dispatcher.__init__->MethodDispatcher('f')
A:sympy.multipledispatch.tests.test_dispatcher.a->Test(3)
A:sympy.multipledispatch.tests.test_dispatcher.b->Test([3])
sympy.multipledispatch.tests.test_dispatcher.dec(x)
sympy.multipledispatch.tests.test_dispatcher.identity(x)
sympy.multipledispatch.tests.test_dispatcher.inc(x)
sympy.multipledispatch.tests.test_dispatcher.test_ambiguity_register_error_ignore_dup()
sympy.multipledispatch.tests.test_dispatcher.test_dispatch_method()
sympy.multipledispatch.tests.test_dispatcher.test_dispatcher()
sympy.multipledispatch.tests.test_dispatcher.test_dispatcher_as_decorator()
sympy.multipledispatch.tests.test_dispatcher.test_docstring()
sympy.multipledispatch.tests.test_dispatcher.test_halt_method_resolution()
sympy.multipledispatch.tests.test_dispatcher.test_help()
sympy.multipledispatch.tests.test_dispatcher.test_no_implementations()
sympy.multipledispatch.tests.test_dispatcher.test_not_implemented()
sympy.multipledispatch.tests.test_dispatcher.test_not_implemented_error()
sympy.multipledispatch.tests.test_dispatcher.test_on_ambiguity()
sympy.multipledispatch.tests.test_dispatcher.test_raise_error_on_non_class()
sympy.multipledispatch.tests.test_dispatcher.test_register_instance_method()
sympy.multipledispatch.tests.test_dispatcher.test_register_stacking()
sympy.multipledispatch.tests.test_dispatcher.test_source()
sympy.multipledispatch.tests.test_dispatcher.test_source_raises_on_missing_function()
sympy.multipledispatch.tests.test_dispatcher.test_union_types()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/multipledispatch/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/accumulationbounds.py----------------------------------------
A:sympy.calculus.accumulationbounds.min->_sympify(min)
A:sympy.calculus.accumulationbounds.max->_sympify(max)
A:sympy.calculus.accumulationbounds.v->set()
A:sympy.calculus.accumulationbounds.(num, den)->_sympify(other).as_numer_denom()
A:sympy.calculus.accumulationbounds.other->_sympify(other)
A:sympy.calculus.accumulationbounds.rv->And(self.min <= other, self.max >= other)
sympy.calculus.accumulationbounds.AccumulationBounds(cls,min,max)
sympy.calculus.accumulationbounds.AccumulationBounds.__abs__(self)
sympy.calculus.accumulationbounds.AccumulationBounds.__add__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.__contains__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.__mul__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.__neg__(self)
sympy.calculus.accumulationbounds.AccumulationBounds.__pow__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.__rpow__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.__rsub__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.__rtruediv__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.__sub__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.__truediv__(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds._eval_is_real(self)
sympy.calculus.accumulationbounds.AccumulationBounds._eval_power(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.delta(self)
sympy.calculus.accumulationbounds.AccumulationBounds.intersection(self,other)
sympy.calculus.accumulationbounds.AccumulationBounds.max(self)
sympy.calculus.accumulationbounds.AccumulationBounds.mid(self)
sympy.calculus.accumulationbounds.AccumulationBounds.min(self)
sympy.calculus.accumulationbounds.AccumulationBounds.union(self,other)
sympy.calculus.accumulationbounds._eval_is_ge(lhs,rhs)
sympy.calculus.accumulationbounds._eval_is_ge(lhs,rhs)
sympy.calculus.accumulationbounds._eval_is_ge(lhs,rhs)
sympy.calculus.accumulationbounds._eval_is_ge(lhs,rhs)
sympy.calculus.accumulationbounds._eval_is_le(lhs,rhs)
sympy.calculus.accumulationbounds._eval_is_le(lhs,rhs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/util.py----------------------------------------
A:sympy.calculus.util.constraint->solve_univariate_inequality(atom.args[0] > 0, symbol).as_set()
A:sympy.calculus.util.constrained_interval->Intersection(constraint, constrained_interval)
A:sympy.calculus.util.period->periodicity(f, symbol)
A:sympy.calculus.util.domain->continuous_domain(f, symbol, domain)
A:sympy.calculus.util.intervals->continuous_domain(f, symbol, domain)
A:sympy.calculus.util.solution->solveset(f.diff(symbol), symbol, interval)
A:sympy.calculus.util._singularities->solveset(expr.as_numer_denom()[1], symb, domain=S.Reals)
A:sympy.calculus.util._domain1->solveset(expr <= _end, symb, domain=S.Reals)
A:sympy.calculus.util._domain2->solveset(expr >= _start, symb, domain=S.Reals)
A:sympy.calculus.util.expr_with_sing->Intersection(_domain1, _domain2)
A:sympy.calculus.util.expr_domain->Complement(expr_with_sing, _singularities)
A:sympy.calculus.util._domain_element->Union(*[elm_domain(element, intrvl) for element in finite_set])
A:sympy.calculus.util._domain->Union(_domain, _domain_element)
A:sympy.calculus.util.temp->Dummy('x', real=True)
A:sympy.calculus.util.f->_sympify(f)
A:sympy.calculus.util.new_f->Abs(arg).subs(symbol, symbol + period)
A:sympy.calculus.util.arg->sin(arg.args[0])
A:sympy.calculus.util.orig_f->Abs(arg)
A:sympy.calculus.util.period_real->periodicity(re(f), symbol)
A:sympy.calculus.util.period_imag->periodicity(im(f), symbol)
A:sympy.calculus.util.base_has_sym->base.has(symbol)
A:sympy.calculus.util.expo_has_sym->expo.has(symbol)
A:sympy.calculus.util.(coeff, g)->_sympify(f).as_independent(symbol, as_Add=False)
A:sympy.calculus.util.(k, g)->_sympify(f).as_independent(symbol)
A:sympy.calculus.util.g_s->decompogen(f, symbol)
A:sympy.calculus.util.num_of_gs->len(g_s)
A:sympy.calculus.util.g->compogen(g_s[start_index:], symbol)
A:sympy.calculus.util.result->lcm_list(numbers)
A:sympy.calculus.util.set->solveset(diff(f, symbol), symbol, domain)
sympy.calculus.util._periodicity(args,symbol)
sympy.calculus.util.continuous_domain(f,symbol,domain)
sympy.calculus.util.function_range(f,symbol,domain)
sympy.calculus.util.is_convex(f,*syms,domain=S.Reals)
sympy.calculus.util.lcim(numbers)
sympy.calculus.util.maximum(f,symbol,domain=S.Reals)
sympy.calculus.util.minimum(f,symbol,domain=S.Reals)
sympy.calculus.util.not_empty_in(finset_intersection,*syms)
sympy.calculus.util.periodicity(f,symbol,check=False)
sympy.calculus.util.stationary_points(f,symbol,domain=S.Reals)
sympy.is_convex(f,*syms,domain=S.Reals)
sympy.maximum(f,symbol,domain=S.Reals)
sympy.minimum(f,symbol,domain=S.Reals)
sympy.not_empty_in(finset_intersection,*syms)
sympy.periodicity(f,symbol,check=False)
sympy.stationary_points(f,symbol,domain=S.Reals)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/finite_diff.py----------------------------------------
A:sympy.calculus.finite_diff.order->_as_finite_diff(derivative, points, x0, v).variables.count(wrt)
A:sympy.calculus.finite_diff.delta->finite_diff_weights(order, x_list, x0)
A:sympy.calculus.finite_diff.derivative->_as_finite_diff(derivative, points, x0, v)
A:sympy.calculus.finite_diff.points->points.subs(wrt, x0).subs(wrt, x0)
A:sympy.calculus.finite_diff.Dexpr->expr.diff(*symbols, evaluate=evaluate)
A:sympy.calculus.finite_diff.DFexpr->expr.diff(*symbols, evaluate=evaluate).as_finite_difference(points=points, x0=x0, wrt=wrt)
sympy.apply_finite_diff(order,x_list,y_list,x0=S.Zero)
sympy.calculus.finite_diff._as_finite_diff(derivative,points=1,x0=None,wrt=None)
sympy.calculus.finite_diff.apply_finite_diff(order,x_list,y_list,x0=S.Zero)
sympy.calculus.finite_diff.differentiate_finite(expr,*symbols,points=1,x0=None,wrt=None,evaluate=False)
sympy.calculus.finite_diff.finite_diff_weights(order,x_list,x0=S.One)
sympy.differentiate_finite(expr,*symbols,points=1,x0=None,wrt=None,evaluate=False)
sympy.finite_diff_weights(order,x_list,x0=S.One)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/singularities.py----------------------------------------
A:sympy.calculus.singularities.expression->sympify(expression)
A:sympy.calculus.singularities.derivative->sympify(expression).diff(variable)
A:sympy.calculus.singularities.predicate_interval->solveset(predicate(derivative), variable, S.Reals)
A:sympy.calculus.singularities.turning_points->solveset(expression.diff(variable), variable, interval)
sympy.calculus.singularities.is_decreasing(expression,interval=S.Reals,symbol=None)
sympy.calculus.singularities.is_increasing(expression,interval=S.Reals,symbol=None)
sympy.calculus.singularities.is_monotonic(expression,interval=S.Reals,symbol=None)
sympy.calculus.singularities.is_strictly_decreasing(expression,interval=S.Reals,symbol=None)
sympy.calculus.singularities.is_strictly_increasing(expression,interval=S.Reals,symbol=None)
sympy.calculus.singularities.monotonicity_helper(expression,predicate,interval=S.Reals,symbol=None)
sympy.calculus.singularities.singularities(expression,symbol,domain=None)
sympy.is_decreasing(expression,interval=S.Reals,symbol=None)
sympy.is_increasing(expression,interval=S.Reals,symbol=None)
sympy.is_monotonic(expression,interval=S.Reals,symbol=None)
sympy.is_strictly_decreasing(expression,interval=S.Reals,symbol=None)
sympy.is_strictly_increasing(expression,interval=S.Reals,symbol=None)
sympy.singularities(expression,symbol,domain=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/euler.py----------------------------------------
A:sympy.calculus.euler.funcs->tuple(L.atoms(Function))
A:sympy.calculus.euler.vars->tuple((sympify(var) for var in vars))
A:sympy.calculus.euler.order->max([len(d.variables) for d in L.atoms(Derivative) if d.expr in funcs] + [0])
A:sympy.calculus.euler.eq->diff(L, f)
A:sympy.calculus.euler.new_eq->Eq(eq, 0)
sympy.calculus.euler.euler_equations(L,funcs=(),vars=())
sympy.euler_equations(L,funcs=(),vars=())


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/tests/test_euler.py----------------------------------------
A:sympy.calculus.tests.test_euler.x->Function('x')
A:sympy.calculus.tests.test_euler.y->Function('y')
A:sympy.calculus.tests.test_euler.t->Symbol('t')
A:sympy.calculus.tests.test_euler.L->sum((D(z(t), t) ** 2 / 2 - z(t) ** 2 / 2 for z in [x, y]))
A:sympy.calculus.tests.test_euler.psi->Function('psi')
A:sympy.calculus.tests.test_euler.m->Symbol('m')
A:sympy.calculus.tests.test_euler.k->Symbol('k')
A:sympy.calculus.tests.test_euler.w->Symbol('w')
A:sympy.calculus.tests.test_euler.(x, y, z)->symbols('x y z')
A:sympy.calculus.tests.test_euler.(f, g, h)->symbols('f g h', cls=Function, args=(x, y))
sympy.calculus.tests.test_euler.test_euler_henonheiles()
sympy.calculus.tests.test_euler.test_euler_high_order()
sympy.calculus.tests.test_euler.test_euler_interface()
sympy.calculus.tests.test_euler.test_euler_pendulum()
sympy.calculus.tests.test_euler.test_euler_sineg()
sympy.calculus.tests.test_euler.test_issue_18653()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/tests/test_accumulationbounds.py----------------------------------------
A:sympy.calculus.tests.test_accumulationbounds.a->B(-1, 1)
A:sympy.calculus.tests.test_accumulationbounds.c->Symbol('c')
A:sympy.calculus.tests.test_accumulationbounds.r->Symbol('r', real=True)
A:sympy.calculus.tests.test_accumulationbounds.b->B(-oo, oo)
A:sympy.calculus.tests.test_accumulationbounds.nn->Symbol('nn', nonnegative=True)
A:sympy.calculus.tests.test_accumulationbounds.i->Symbol('i', integer=True, nonnegative=True)
A:sympy.calculus.tests.test_accumulationbounds.neg->Symbol('neg', negative=True)
A:sympy.calculus.tests.test_accumulationbounds.p->z.subs(a, -1)
sympy.calculus.tests.test_accumulationbounds.test_AccumBounds()
sympy.calculus.tests.test_accumulationbounds.test_AccumBounds_div()
sympy.calculus.tests.test_accumulationbounds.test_AccumBounds_exponent()
sympy.calculus.tests.test_accumulationbounds.test_AccumBounds_func()
sympy.calculus.tests.test_accumulationbounds.test_AccumBounds_mul()
sympy.calculus.tests.test_accumulationbounds.test_AccumBounds_pow()
sympy.calculus.tests.test_accumulationbounds.test_AccumBounds_powf()
sympy.calculus.tests.test_accumulationbounds.test_comparison_AccumBounds()
sympy.calculus.tests.test_accumulationbounds.test_contains_AccumBounds()
sympy.calculus.tests.test_accumulationbounds.test_intersection_AccumBounds()
sympy.calculus.tests.test_accumulationbounds.test_issue_18795()
sympy.calculus.tests.test_accumulationbounds.test_union_AccumBounds()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/tests/test_singularities.py----------------------------------------
A:sympy.calculus.tests.test_singularities.x->Symbol('x')
A:sympy.calculus.tests.test_singularities.a->Symbol('a', negative=True)
A:sympy.calculus.tests.test_singularities.b->Symbol('b', positive=True)
sympy.calculus.tests.test_singularities.test_is_decreasing()
sympy.calculus.tests.test_singularities.test_is_increasing()
sympy.calculus.tests.test_singularities.test_is_monotonic()
sympy.calculus.tests.test_singularities.test_is_strictly_decreasing()
sympy.calculus.tests.test_singularities.test_is_strictly_increasing()
sympy.calculus.tests.test_singularities.test_issue_23401()
sympy.calculus.tests.test_singularities.test_singularities()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/tests/test_util.py----------------------------------------
A:sympy.calculus.tests.test_util.a->Symbol('a', real=True)
A:sympy.calculus.tests.test_util.(x, y, a, b)->symbols('x y a b')
A:sympy.calculus.tests.test_util.x->Symbol('x', real=True)
A:sympy.calculus.tests.test_util.domain->continuous_domain(log(tan(x) ** 2 + 1), x, S.Reals)
A:sympy.calculus.tests.test_util.d->Symbol('d', even=True, zero=False)
A:sympy.calculus.tests.test_util.y->Symbol('y')
A:sympy.calculus.tests.test_util.z->Symbol('z', real=True)
A:sympy.calculus.tests.test_util.p->Piecewise((0, x < -1), (x ** 2, x <= 1), (log(x), True))
A:sympy.calculus.tests.test_util.m->MatrixSymbol('m', 3, 3)
A:sympy.calculus.tests.test_util.(x, y)->symbols('x y')
A:sympy.calculus.tests.test_util.t->symbols('t')
A:sympy.calculus.tests.test_util.f->abs(x)
sympy.calculus.tests.test_util.test_continuous_domain()
sympy.calculus.tests.test_util.test_function_range()
sympy.calculus.tests.test_util.test_is_convex()
sympy.calculus.tests.test_util.test_issue_16469()
sympy.calculus.tests.test_util.test_issue_18747()
sympy.calculus.tests.test_util.test_issue_19869()
sympy.calculus.tests.test_util.test_lcim()
sympy.calculus.tests.test_util.test_maximum()
sympy.calculus.tests.test_util.test_minimum()
sympy.calculus.tests.test_util.test_not_empty_in()
sympy.calculus.tests.test_util.test_periodicity()
sympy.calculus.tests.test_util.test_periodicity_check()
sympy.calculus.tests.test_util.test_stationary_points()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/tests/test_finite_diff.py----------------------------------------
A:sympy.calculus.tests.test_finite_diff.(x, h)->symbols('x h')
A:sympy.calculus.tests.test_finite_diff.f->Function('f')
A:sympy.calculus.tests.test_finite_diff.d->finite_diff_weights(4, xl, S.Zero)
A:sympy.calculus.tests.test_finite_diff.x->symbols('x')
A:sympy.calculus.tests.test_finite_diff.dx->Function('dx')
A:sympy.calculus.tests.test_finite_diff.df_test->diff(f(x), x).as_finite_difference(points=dx(x), x0=x + dx(x) / 2)
A:sympy.calculus.tests.test_finite_diff.(x, y, h)->symbols('x y h')
A:sympy.calculus.tests.test_finite_diff.res0->differentiate_finite(f(x, y) + exp(42), x, y, evaluate=True)
A:sympy.calculus.tests.test_finite_diff.g->Function('g')
A:sympy.calculus.tests.test_finite_diff.res1->differentiate_finite(f(x) * g(x) + 42, x, evaluate=True)
A:sympy.calculus.tests.test_finite_diff.res2->differentiate_finite(f(x) + x ** 3 + 42, x, points=[x - 1, x + 1])
A:sympy.calculus.tests.test_finite_diff.res3->differentiate_finite(f(x) * g(x).diff(x), x)
A:sympy.calculus.tests.test_finite_diff.res4->differentiate_finite(f(x) * g(x).diff(x).diff(x), x)
A:sympy.calculus.tests.test_finite_diff.res5->differentiate_finite(res5_expr, points=[x - h, x, x + h])
A:sympy.calculus.tests.test_finite_diff.res6->differentiate_finite(res5_expr, points=[x - h, x, x + h]).limit(h, 0).doit()
A:sympy.calculus.tests.test_finite_diff.ref6->diff(res5_expr, x)
sympy.calculus.tests.test_finite_diff.test_apply_finite_diff()
sympy.calculus.tests.test_finite_diff.test_as_finite_diff()
sympy.calculus.tests.test_finite_diff.test_differentiate_finite()
sympy.calculus.tests.test_finite_diff.test_finite_diff_weights()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/calculus/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/cnf.py----------------------------------------
A:sympy.assumptions.cnf.obj->super().__new__(cls)
A:sympy.assumptions.cnf.lit->self.lit.rcall(expr)
A:sympy.assumptions.cnf.h->hash((type(self).__name__, self.arg, self.is_Not))
A:sympy.assumptions.cnf.expr->distribute_AND_over_OR(expr)
A:sympy.assumptions.cnf.tmp->set(a)
A:sympy.assumptions.cnf.a->to_NNF(a, composite_map)
A:sympy.assumptions.cnf.b->b._and(rest)._and(rest)
A:sympy.assumptions.cnf.L->to_NNF(expr.args[0], composite_map)
A:sympy.assumptions.cnf.M->to_NNF(expr.args[1], composite_map)
A:sympy.assumptions.cnf.R->to_NNF(expr.args[2], composite_map)
A:sympy.assumptions.cnf.newpred->composite_map.get(expr, None)
A:sympy.assumptions.cnf.clauses->self.clauses.union(cnf.clauses)
A:sympy.assumptions.cnf.s->' & '.join(['(' + ' | '.join([str(lit) for lit in clause]) + ')' for clause in self.clauses])
A:sympy.assumptions.cnf.res->cls()
A:sympy.assumptions.cnf.predicates->set()
A:sympy.assumptions.cnf.clss->list(self.clauses)
A:sympy.assumptions.cnf.ll->ll._or(CNF(p))._or(CNF(p))
A:sympy.assumptions.cnf.p->set()
A:sympy.assumptions.cnf.self._symbols->list(cnf.all_predicates())
A:sympy.assumptions.cnf.n->len(self._symbols)
A:sympy.assumptions.cnf.self.encoding->dict(zip(self._symbols, range(1, n + 1)))
A:sympy.assumptions.cnf.cnf->CNF.from_prop(prop)
A:sympy.assumptions.cnf.value->self.encoding.get(literal, None)
sympy.assumptions.cnf.AND(self,*args)
sympy.assumptions.cnf.AND.__eq__(self,other)
sympy.assumptions.cnf.AND.__hash__(self)
sympy.assumptions.cnf.AND.__invert__(self)
sympy.assumptions.cnf.AND.__str__(self)
sympy.assumptions.cnf.AND.args(self)
sympy.assumptions.cnf.AND.rcall(self,expr)
sympy.assumptions.cnf.CNF(self,clauses=None)
sympy.assumptions.cnf.CNF.CNF_to_cnf(cls,cnf)
sympy.assumptions.cnf.CNF.__iand__(self,other)
sympy.assumptions.cnf.CNF.__str__(self)
sympy.assumptions.cnf.CNF._and(self,cnf)
sympy.assumptions.cnf.CNF._not(self)
sympy.assumptions.cnf.CNF._or(self,cnf)
sympy.assumptions.cnf.CNF.add(self,prop)
sympy.assumptions.cnf.CNF.add_clauses(self,clauses)
sympy.assumptions.cnf.CNF.all_and(cls,*cnfs)
sympy.assumptions.cnf.CNF.all_or(cls,*cnfs)
sympy.assumptions.cnf.CNF.all_predicates(self)
sympy.assumptions.cnf.CNF.copy(self)
sympy.assumptions.cnf.CNF.extend(self,props)
sympy.assumptions.cnf.CNF.from_prop(cls,prop)
sympy.assumptions.cnf.CNF.rcall(self,expr)
sympy.assumptions.cnf.CNF.to_CNF(cls,expr)
sympy.assumptions.cnf.EncodedCNF(self,data=None,encoding=None)
sympy.assumptions.cnf.EncodedCNF.add_from_cnf(self,cnf)
sympy.assumptions.cnf.EncodedCNF.add_prop(self,prop)
sympy.assumptions.cnf.EncodedCNF.copy(self)
sympy.assumptions.cnf.EncodedCNF.encode(self,clause)
sympy.assumptions.cnf.EncodedCNF.encode_arg(self,arg)
sympy.assumptions.cnf.EncodedCNF.from_cnf(self,cnf)
sympy.assumptions.cnf.EncodedCNF.symbols(self)
sympy.assumptions.cnf.EncodedCNF.variables(self)
sympy.assumptions.cnf.Literal(cls,lit,is_Not=False)
sympy.assumptions.cnf.Literal.__eq__(self,other)
sympy.assumptions.cnf.Literal.__hash__(self)
sympy.assumptions.cnf.Literal.__invert__(self)
sympy.assumptions.cnf.Literal.__str__(self)
sympy.assumptions.cnf.Literal.arg(self)
sympy.assumptions.cnf.Literal.rcall(self,expr)
sympy.assumptions.cnf.OR(self,*args)
sympy.assumptions.cnf.OR.__eq__(self,other)
sympy.assumptions.cnf.OR.__hash__(self)
sympy.assumptions.cnf.OR.__invert__(self)
sympy.assumptions.cnf.OR.__str__(self)
sympy.assumptions.cnf.OR.args(self)
sympy.assumptions.cnf.OR.rcall(self,expr)
sympy.assumptions.cnf.distribute_AND_over_OR(expr)
sympy.assumptions.cnf.to_NNF(expr,composite_map=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/ask_generated.py----------------------------------------
sympy.assumptions.ask_generated.get_all_known_facts()
sympy.assumptions.ask_generated.get_known_facts_dict()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/facts.py----------------------------------------
A:sympy.assumptions.facts.x->Symbol('x')
A:sympy.assumptions.facts.fact->And(Exclusive(Q.negative_infinite(x), Q.negative(x), Q.zero(x), Q.positive(x), Q.positive_infinite(x)), Exclusive(Q.real(x), Q.imaginary(x)), Implies(Q.real(x) | Q.imaginary(x), Q.complex(x)), Exclusive(Q.transcendental(x), Q.algebraic(x)), Equivalent(Q.real(x), Q.rational(x) | Q.irrational(x)), Exclusive(Q.irrational(x), Q.rational(x)), Implies(Q.rational(x), Q.algebraic(x)), Exclusive(Q.even(x), Q.odd(x)), Implies(Q.integer(x), Q.rational(x)), Implies(Q.zero(x), Q.even(x)), Exclusive(Q.composite(x), Q.prime(x)), Implies(Q.composite(x) | Q.prime(x), Q.integer(x) & Q.positive(x)), Implies(Q.even(x) & Q.positive(x) & ~Q.prime(x), Q.composite(x)), Implies(Q.real(x), Q.hermitian(x)), Implies(Q.imaginary(x), Q.antihermitian(x)), Implies(Q.zero(x), Q.hermitian(x) | Q.antihermitian(x)), Exclusive(Q.infinite(x), Q.finite(x)), Implies(Q.complex(x), Q.finite(x)), Implies(Q.negative_infinite(x) | Q.positive_infinite(x), Q.infinite(x)), Implies(Q.finite(x) | Q.infinite(x), Q.commutative(x)), Implies(Q.orthogonal(x), Q.positive_definite(x)), Implies(Q.orthogonal(x), Q.unitary(x)), Implies(Q.unitary(x) & Q.real_elements(x), Q.orthogonal(x)), Implies(Q.unitary(x), Q.normal(x)), Implies(Q.unitary(x), Q.invertible(x)), Implies(Q.normal(x), Q.square(x)), Implies(Q.diagonal(x), Q.normal(x)), Implies(Q.positive_definite(x), Q.invertible(x)), Implies(Q.diagonal(x), Q.upper_triangular(x)), Implies(Q.diagonal(x), Q.lower_triangular(x)), Implies(Q.lower_triangular(x), Q.triangular(x)), Implies(Q.upper_triangular(x), Q.triangular(x)), Implies(Q.triangular(x), Q.upper_triangular(x) | Q.lower_triangular(x)), Implies(Q.upper_triangular(x) & Q.lower_triangular(x), Q.diagonal(x)), Implies(Q.diagonal(x), Q.symmetric(x)), Implies(Q.unit_triangular(x), Q.triangular(x)), Implies(Q.invertible(x), Q.fullrank(x)), Implies(Q.invertible(x), Q.square(x)), Implies(Q.symmetric(x), Q.square(x)), Implies(Q.fullrank(x) & Q.square(x), Q.invertible(x)), Equivalent(Q.invertible(x), ~Q.singular(x)), Implies(Q.integer_elements(x), Q.real_elements(x)), Implies(Q.real_elements(x), Q.complex_elements(x)))
A:sympy.assumptions.facts.fact_cnf->to_cnf(fact)
A:sympy.assumptions.facts.mapping->single_fact_lookup(keys, fact_cnf)
A:sympy.assumptions.facts.implied->set()
A:sympy.assumptions.facts.rejected->set()
A:sympy.assumptions.facts.exclude->set()
A:sympy.assumptions.facts.pred->getattr(Q, attr)
sympy.assumptions.facts.ask_full_inference(proposition,assumptions,known_facts_cnf)
sympy.assumptions.facts.generate_known_facts_dict(keys,fact)
sympy.assumptions.facts.get_composite_predicates()
sympy.assumptions.facts.get_known_facts(x=None)
sympy.assumptions.facts.get_known_facts_keys()
sympy.assumptions.facts.single_fact_lookup(known_facts_keys,known_facts_cnf)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/assume.py----------------------------------------
A:sympy.assumptions.assume.global_assumptions->AssumptionsContext()
A:sympy.assumptions.assume.args->map(_sympify, args)
A:sympy.assumptions.assume.handler->Dispatcher(name, doc='Handler for key %s' % name)
A:sympy.assumptions.assume.dct['_orig_doc']->dct.get('__doc__', '')
A:sympy.assumptions.assume.obj->super(Boolean, cls).__new__(cls, name)
A:sympy.assumptions.assume.result->self.handler(*args, assumptions=assumptions)
A:sympy.assumptions.assume.name->Str(name)
A:sympy.assumptions.assume.mro->inspect.getmro(type(expr))
A:sympy.assumptions.assume.cls->get_class(handler)
A:sympy.assumptions.assume.eval_->getattr(cls, subclass.__name__, None)
A:sympy.assumptions.assume.res->eval_(expr, assumptions)
A:sympy.assumptions.assume.old_global_assumptions->AssumptionsContext().copy()
sympy.AppliedPredicate(cls,predicate,*args)
sympy.AssumptionsContext(set)
sympy.Predicate(cls,*args,**kwargs)
sympy.assuming(*assumptions)
sympy.assumptions.assume.AppliedPredicate(cls,predicate,*args)
sympy.assumptions.assume.AppliedPredicate._eval_ask(self,assumptions)
sympy.assumptions.assume.AppliedPredicate.arg(self)
sympy.assumptions.assume.AppliedPredicate.arguments(self)
sympy.assumptions.assume.AppliedPredicate.binary_symbols(self)
sympy.assumptions.assume.AppliedPredicate.function(self)
sympy.assumptions.assume.AssumptionsContext(set)
sympy.assumptions.assume.AssumptionsContext._sympystr(self,printer)
sympy.assumptions.assume.AssumptionsContext.add(self,*assumptions)
sympy.assumptions.assume.Predicate(cls,*args,**kwargs)
sympy.assumptions.assume.Predicate._eval_refine(self,assumptions)
sympy.assumptions.assume.Predicate.eval(self,args,assumptions=True)
sympy.assumptions.assume.Predicate.name(self)
sympy.assumptions.assume.Predicate.register(cls,*types,**kwargs)
sympy.assumptions.assume.Predicate.register_many(cls,*types,**kwargs)
sympy.assumptions.assume.PredicateMeta(cls,clsname,bases,dct)
sympy.assumptions.assume.PredicateMeta.__doc__(cls)
sympy.assumptions.assume.UndefinedPredicate(cls,name,handlers=None)
sympy.assumptions.assume.UndefinedPredicate.__getnewargs__(self)
sympy.assumptions.assume.UndefinedPredicate._hashable_content(self)
sympy.assumptions.assume.UndefinedPredicate.add_handler(self,handler)
sympy.assumptions.assume.UndefinedPredicate.eval(self,args,assumptions=True)
sympy.assumptions.assume.UndefinedPredicate.name(self)
sympy.assumptions.assume.UndefinedPredicate.remove_handler(self,handler)
sympy.assumptions.assume.assuming(*assumptions)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/sathandlers.py----------------------------------------
A:sympy.assumptions.sathandlers.res->Or(*[And(pred_args[i], *[~lit for lit in pred_args[:i] + pred_args[i + 1:]]) for i in range(len(pred_args))])
A:sympy.assumptions.sathandlers.self.singlefacts->defaultdict(frozenset)
A:sympy.assumptions.sathandlers.self.multifacts->defaultdict(frozenset)
A:sympy.assumptions.sathandlers.ret->set()
A:sympy.assumptions.sathandlers.class_fact_registry->ClassFactRegistry()
A:sympy.assumptions.sathandlers.x->Symbol('x')
A:sympy.assumptions.sathandlers.allargs_real->allargs(x, Q.real(x), expr)
A:sympy.assumptions.sathandlers.onearg_irrational->exactlyonearg(x, Q.irrational(x), expr)
A:sympy.assumptions.sathandlers.allargs_prime->allargs(x, Q.prime(x), expr)
A:sympy.assumptions.sathandlers.allargs_imag_or_real->allargs(x, Q.imaginary(x) | Q.real(x), expr)
A:sympy.assumptions.sathandlers.onearg_imaginary->exactlyonearg(x, Q.imaginary(x), expr)
A:sympy.assumptions.sathandlers.allargs_integer->allargs(x, Q.integer(x), expr)
A:sympy.assumptions.sathandlers.anyarg_even->anyarg(x, Q.even(x), expr)
A:sympy.assumptions.sathandlers.allargs_square->allargs(x, Q.square(x), expr)
A:sympy.assumptions.sathandlers.allargs_invertible->allargs(x, Q.invertible(x), expr)
A:sympy.assumptions.sathandlers.pred->p(expr)
A:sympy.assumptions.sathandlers.prop->getter(expr)
sympy.assumptions.sathandlers.ClassFactRegistry(self)
sympy.assumptions.sathandlers.ClassFactRegistry.__getitem__(self,key)
sympy.assumptions.sathandlers.ClassFactRegistry.multiregister(self,*classes)
sympy.assumptions.sathandlers.ClassFactRegistry.register(self,cls)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers._(expr)
sympy.assumptions.sathandlers.allargs(symbol,fact,expr)
sympy.assumptions.sathandlers.anyarg(symbol,fact,expr)
sympy.assumptions.sathandlers.exactlyonearg(symbol,fact,expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/satask.py----------------------------------------
A:sympy.assumptions.satask.props->sympy.assumptions.cnf.CNF.from_prop(proposition)
A:sympy.assumptions.satask._props->sympy.assumptions.cnf.CNF.from_prop(~proposition)
A:sympy.assumptions.satask.assumptions->sympy.assumptions.cnf.CNF.from_prop(assumptions)
A:sympy.assumptions.satask.context_cnf->context_cnf.extend(context).extend(context)
A:sympy.assumptions.satask.sat->get_all_relevant_facts(props, assumptions, context_cnf, use_known_facts=use_known_facts, iterations=iterations)
A:sympy.assumptions.satask.sat_true->factbase.copy()
A:sympy.assumptions.satask.sat_false->factbase.copy()
A:sympy.assumptions.satask.can_be_true->satisfiable(sat_true)
A:sympy.assumptions.satask.can_be_false->satisfiable(sat_false)
A:sympy.assumptions.satask.req_keys->find_symbols(proposition)
A:sympy.assumptions.satask.keys->proposition.all_predicates()
A:sympy.assumptions.satask.lkeys->set()
A:sympy.assumptions.satask.tmp->set()
A:sympy.assumptions.satask.syms->find_symbols(l)
A:sympy.assumptions.satask.exprs->extract_predargs(proposition, assumptions, context)
A:sympy.assumptions.satask.symbols->set()
A:sympy.assumptions.satask.relevant_facts->CNF()
A:sympy.assumptions.satask.newexprs->set()
A:sympy.assumptions.satask.newfact->sympy.assumptions.cnf.CNF.to_CNF(fact)
A:sympy.assumptions.satask.all_exprs->set()
A:sympy.assumptions.satask.(exprs, relevant_facts)->get_relevant_clsfacts(exprs, relevant_facts)
A:sympy.assumptions.satask.known_facts_CNF->CNF()
A:sympy.assumptions.satask.kf_encoded->EncodedCNF()
A:sympy.assumptions.satask.n_lit->len(kf_encoded.symbols)
A:sympy.assumptions.satask.encoding->dict(list(zip(symbols, range(1, len(symbols) + 1))))
A:sympy.assumptions.satask.ctx->EncodedCNF()
sympy.assumptions.satask.check_satisfiability(prop,_prop,factbase)
sympy.assumptions.satask.extract_predargs(proposition,assumptions=None,context=None)
sympy.assumptions.satask.find_symbols(pred)
sympy.assumptions.satask.get_all_relevant_facts(proposition,assumptions,context,use_known_facts=True,iterations=oo)
sympy.assumptions.satask.get_relevant_clsfacts(exprs,relevant_facts=None)
sympy.assumptions.satask.satask(proposition,assumptions=True,context=global_assumptions,use_known_facts=True,iterations=oo)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/refine.py----------------------------------------
A:sympy.assumptions.refine.expr->expr.func(*args).func(*args)
A:sympy.assumptions.refine.ref_expr->expr.func(*args).func(*args)._eval_refine(assumptions)
A:sympy.assumptions.refine.handler->handlers_dict.get(name, None)
A:sympy.assumptions.refine.new_expr->handler(expr, assumptions)
A:sympy.assumptions.refine.(coeff, terms)->expr.func(*args).func(*args).exp.as_coeff_add()
A:sympy.assumptions.refine.terms->set(terms)
A:sympy.assumptions.refine.even_terms->set()
A:sympy.assumptions.refine.odd_terms->set()
A:sympy.assumptions.refine.initial_number_of_terms->len(terms)
A:sympy.assumptions.refine.(i, p)->e2.as_two_terms()
A:sympy.assumptions.refine.expanded->expr.func(*args).func(*args).expand(complex=True)
A:sympy.assumptions.refine.refined->refine(expanded, assumptions)
A:sympy.assumptions.refine.(arg_re, arg_im)->arg.as_real_imag()
sympy.assumptions.refine._refine_reim(expr,assumptions)
sympy.assumptions.refine.refine(expr,assumptions=True)
sympy.assumptions.refine.refine_Pow(expr,assumptions)
sympy.assumptions.refine.refine_abs(expr,assumptions)
sympy.assumptions.refine.refine_arg(expr,assumptions)
sympy.assumptions.refine.refine_atan2(expr,assumptions)
sympy.assumptions.refine.refine_im(expr,assumptions)
sympy.assumptions.refine.refine_matrixelement(expr,assumptions)
sympy.assumptions.refine.refine_re(expr,assumptions)
sympy.assumptions.refine.refine_sign(expr,assumptions)
sympy.refine(expr,assumptions=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/ask.py----------------------------------------
A:sympy.assumptions.ask.Q->AssumptionKeys()
A:sympy.assumptions.ask.facts->set()
A:sympy.assumptions.ask.proposition->sympify(proposition)
A:sympy.assumptions.ask.assumptions->sympify(assumptions)
A:sympy.assumptions.ask.assump_cnf->sympy.assumptions.cnf.CNF.from_prop(assumptions)
A:sympy.assumptions.ask.local_facts->_extract_all_facts(assump_cnf, args)
A:sympy.assumptions.ask.known_facts_cnf->get_all_known_facts()
A:sympy.assumptions.ask.enc_cnf->EncodedCNF()
A:sympy.assumptions.ask.res->satask(proposition, assumptions=assumptions, context=context)
A:sympy.assumptions.ask.known_facts_dict->get_known_facts_dict()
A:sympy.assumptions.ask.prop_facts->get_known_facts_dict().get(key, None)
A:sympy.assumptions.ask.Qkey->getattr(Q, key, None)
sympy.ask(proposition,assumptions=True,context=global_assumptions)
sympy.assumptions.ask.AssumptionKeys
sympy.assumptions.ask.AssumptionKeys.algebraic(self)
sympy.assumptions.ask.AssumptionKeys.antihermitian(self)
sympy.assumptions.ask.AssumptionKeys.commutative(self)
sympy.assumptions.ask.AssumptionKeys.complex(self)
sympy.assumptions.ask.AssumptionKeys.complex_elements(self)
sympy.assumptions.ask.AssumptionKeys.composite(self)
sympy.assumptions.ask.AssumptionKeys.diagonal(self)
sympy.assumptions.ask.AssumptionKeys.eq(self)
sympy.assumptions.ask.AssumptionKeys.even(self)
sympy.assumptions.ask.AssumptionKeys.extended_negative(self)
sympy.assumptions.ask.AssumptionKeys.extended_nonnegative(self)
sympy.assumptions.ask.AssumptionKeys.extended_nonpositive(self)
sympy.assumptions.ask.AssumptionKeys.extended_nonzero(self)
sympy.assumptions.ask.AssumptionKeys.extended_positive(self)
sympy.assumptions.ask.AssumptionKeys.extended_real(self)
sympy.assumptions.ask.AssumptionKeys.finite(self)
sympy.assumptions.ask.AssumptionKeys.fullrank(self)
sympy.assumptions.ask.AssumptionKeys.ge(self)
sympy.assumptions.ask.AssumptionKeys.gt(self)
sympy.assumptions.ask.AssumptionKeys.hermitian(self)
sympy.assumptions.ask.AssumptionKeys.imaginary(self)
sympy.assumptions.ask.AssumptionKeys.infinite(self)
sympy.assumptions.ask.AssumptionKeys.integer(self)
sympy.assumptions.ask.AssumptionKeys.integer_elements(self)
sympy.assumptions.ask.AssumptionKeys.invertible(self)
sympy.assumptions.ask.AssumptionKeys.irrational(self)
sympy.assumptions.ask.AssumptionKeys.is_true(self)
sympy.assumptions.ask.AssumptionKeys.le(self)
sympy.assumptions.ask.AssumptionKeys.lower_triangular(self)
sympy.assumptions.ask.AssumptionKeys.lt(self)
sympy.assumptions.ask.AssumptionKeys.ne(self)
sympy.assumptions.ask.AssumptionKeys.negative(self)
sympy.assumptions.ask.AssumptionKeys.negative_infinite(self)
sympy.assumptions.ask.AssumptionKeys.nonnegative(self)
sympy.assumptions.ask.AssumptionKeys.nonpositive(self)
sympy.assumptions.ask.AssumptionKeys.nonzero(self)
sympy.assumptions.ask.AssumptionKeys.normal(self)
sympy.assumptions.ask.AssumptionKeys.odd(self)
sympy.assumptions.ask.AssumptionKeys.orthogonal(self)
sympy.assumptions.ask.AssumptionKeys.positive(self)
sympy.assumptions.ask.AssumptionKeys.positive_definite(self)
sympy.assumptions.ask.AssumptionKeys.positive_infinite(self)
sympy.assumptions.ask.AssumptionKeys.prime(self)
sympy.assumptions.ask.AssumptionKeys.rational(self)
sympy.assumptions.ask.AssumptionKeys.real(self)
sympy.assumptions.ask.AssumptionKeys.real_elements(self)
sympy.assumptions.ask.AssumptionKeys.singular(self)
sympy.assumptions.ask.AssumptionKeys.square(self)
sympy.assumptions.ask.AssumptionKeys.symmetric(self)
sympy.assumptions.ask.AssumptionKeys.transcendental(self)
sympy.assumptions.ask.AssumptionKeys.triangular(self)
sympy.assumptions.ask.AssumptionKeys.unit_triangular(self)
sympy.assumptions.ask.AssumptionKeys.unitary(self)
sympy.assumptions.ask.AssumptionKeys.upper_triangular(self)
sympy.assumptions.ask.AssumptionKeys.zero(self)
sympy.assumptions.ask._ask_single_fact(key,local_facts)
sympy.assumptions.ask._extract_all_facts(assump,exprs)
sympy.assumptions.ask.ask(proposition,assumptions=True,context=global_assumptions)
sympy.assumptions.ask.register_handler(key,handler)
sympy.assumptions.ask.remove_handler(key,handler)
sympy.register_handler(key,handler)
sympy.remove_handler(key,handler)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/wrapper.py----------------------------------------
A:sympy.assumptions.wrapper.pred->getattr(Q, fact)
A:sympy.assumptions.wrapper.ret->ask(pred(self.expr), self.assumptions)
A:sympy.assumptions.wrapper.obj->super().__new__(cls, expr, _sympify(assumptions))
A:sympy.assumptions.wrapper._eval_is_algebraic->make_eval_method('algebraic')
A:sympy.assumptions.wrapper._eval_is_antihermitian->make_eval_method('antihermitian')
A:sympy.assumptions.wrapper._eval_is_commutative->make_eval_method('commutative')
A:sympy.assumptions.wrapper._eval_is_complex->make_eval_method('complex')
A:sympy.assumptions.wrapper._eval_is_composite->make_eval_method('composite')
A:sympy.assumptions.wrapper._eval_is_even->make_eval_method('even')
A:sympy.assumptions.wrapper._eval_is_extended_negative->make_eval_method('extended_negative')
A:sympy.assumptions.wrapper._eval_is_extended_nonnegative->make_eval_method('extended_nonnegative')
A:sympy.assumptions.wrapper._eval_is_extended_nonpositive->make_eval_method('extended_nonpositive')
A:sympy.assumptions.wrapper._eval_is_extended_nonzero->make_eval_method('extended_nonzero')
A:sympy.assumptions.wrapper._eval_is_extended_positive->make_eval_method('extended_positive')
A:sympy.assumptions.wrapper._eval_is_extended_real->make_eval_method('extended_real')
A:sympy.assumptions.wrapper._eval_is_finite->make_eval_method('finite')
A:sympy.assumptions.wrapper._eval_is_hermitian->make_eval_method('hermitian')
A:sympy.assumptions.wrapper._eval_is_imaginary->make_eval_method('imaginary')
A:sympy.assumptions.wrapper._eval_is_infinite->make_eval_method('infinite')
A:sympy.assumptions.wrapper._eval_is_integer->make_eval_method('integer')
A:sympy.assumptions.wrapper._eval_is_irrational->make_eval_method('irrational')
A:sympy.assumptions.wrapper._eval_is_negative->make_eval_method('negative')
A:sympy.assumptions.wrapper._eval_is_noninteger->make_eval_method('noninteger')
A:sympy.assumptions.wrapper._eval_is_nonnegative->make_eval_method('nonnegative')
A:sympy.assumptions.wrapper._eval_is_nonpositive->make_eval_method('nonpositive')
A:sympy.assumptions.wrapper._eval_is_nonzero->make_eval_method('nonzero')
A:sympy.assumptions.wrapper._eval_is_odd->make_eval_method('odd')
A:sympy.assumptions.wrapper._eval_is_polar->make_eval_method('polar')
A:sympy.assumptions.wrapper._eval_is_positive->make_eval_method('positive')
A:sympy.assumptions.wrapper._eval_is_prime->make_eval_method('prime')
A:sympy.assumptions.wrapper._eval_is_rational->make_eval_method('rational')
A:sympy.assumptions.wrapper._eval_is_real->make_eval_method('real')
A:sympy.assumptions.wrapper._eval_is_transcendental->make_eval_method('transcendental')
A:sympy.assumptions.wrapper._eval_is_zero->make_eval_method('zero')
sympy.assumptions.wrapper.AssumptionsWrapper(cls,expr,assumptions=None)
sympy.assumptions.wrapper.is_extended_nonnegative(obj,assumptions=None)
sympy.assumptions.wrapper.is_extended_real(obj,assumptions=None)
sympy.assumptions.wrapper.is_infinite(obj,assumptions=None)
sympy.assumptions.wrapper.make_eval_method(fact)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/test_satask.py----------------------------------------
A:sympy.assumptions.tests.test_satask.(x, y, z)->symbols('x y z')
A:sympy.assumptions.tests.test_satask.A->MatrixSymbol('A', 5, 5)
A:sympy.assumptions.tests.test_satask.B->MatrixSymbol('B', 5, 5)
A:sympy.assumptions.tests.test_satask.props->sympy.assumptions.cnf.CNF.from_prop(Eq(x, y))
A:sympy.assumptions.tests.test_satask.assump->sympy.assumptions.cnf.CNF.from_prop(Gt(y, z))
A:sympy.assumptions.tests.test_satask.context->sympy.assumptions.cnf.CNF.from_prop(Q.zero(y))
A:sympy.assumptions.tests.test_satask.(exprs, facts)->get_relevant_clsfacts(exprs)
sympy.assumptions.tests.test_satask.test_abs()
sympy.assumptions.tests.test_satask.test_even_satask()
sympy.assumptions.tests.test_satask.test_extract_predargs()
sympy.assumptions.tests.test_satask.test_get_relevant_clsfacts()
sympy.assumptions.tests.test_satask.test_imaginary()
sympy.assumptions.tests.test_satask.test_integer()
sympy.assumptions.tests.test_satask.test_invertible()
sympy.assumptions.tests.test_satask.test_odd_satask()
sympy.assumptions.tests.test_satask.test_old_assump()
sympy.assumptions.tests.test_satask.test_pos_neg()
sympy.assumptions.tests.test_satask.test_pow_pos_neg()
sympy.assumptions.tests.test_satask.test_prime()
sympy.assumptions.tests.test_satask.test_prime_composite()
sympy.assumptions.tests.test_satask.test_rational_irrational()
sympy.assumptions.tests.test_satask.test_real()
sympy.assumptions.tests.test_satask.test_satask()
sympy.assumptions.tests.test_satask.test_zero()
sympy.assumptions.tests.test_satask.test_zero_positive()
sympy.assumptions.tests.test_satask.test_zero_pow()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/test_refine.py----------------------------------------
A:sympy.assumptions.tests.test_refine.x->MatrixSymbol('x', 3, 3)
A:sympy.assumptions.tests.test_refine.obj->MyClass(*args)
A:sympy.assumptions.tests.test_refine.mock_obj->MockExpr()
A:sympy.assumptions.tests.test_refine.expr1->refine(Abs(x * y), Q.positive(x))
A:sympy.assumptions.tests.test_refine.expr2->refine(Abs(x * y * z), Q.positive(x))
A:sympy.assumptions.tests.test_refine.y1->Symbol('y1', real=True)
A:sympy.assumptions.tests.test_refine.expr3->refine(Abs(x * y1 ** 2 * z), Q.positive(x))
A:sympy.assumptions.tests.test_refine.i->Symbol('i', positive=True)
A:sympy.assumptions.tests.test_refine.j->Symbol('j', positive=True)
sympy.assumptions.tests.test_refine.test_Abs()
sympy.assumptions.tests.test_refine.test_Piecewise()
sympy.assumptions.tests.test_refine.test_arg()
sympy.assumptions.tests.test_refine.test_atan2()
sympy.assumptions.tests.test_refine.test_complex()
sympy.assumptions.tests.test_refine.test_eval_refine()
sympy.assumptions.tests.test_refine.test_exp()
sympy.assumptions.tests.test_refine.test_func_args()
sympy.assumptions.tests.test_refine.test_im()
sympy.assumptions.tests.test_refine.test_issue_refine_9384()
sympy.assumptions.tests.test_refine.test_matrixelement()
sympy.assumptions.tests.test_refine.test_pow1()
sympy.assumptions.tests.test_refine.test_pow2()
sympy.assumptions.tests.test_refine.test_re()
sympy.assumptions.tests.test_refine.test_refine_issue_12724()
sympy.assumptions.tests.test_refine.test_sign()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/test_matrices.py----------------------------------------
A:sympy.assumptions.tests.test_matrices.X->MatrixSymbol('X', 4, 4)
A:sympy.assumptions.tests.test_matrices.Y->MatrixSymbol('Y', 4, 4)
A:sympy.assumptions.tests.test_matrices.Z->MatrixSymbol('Z', 2, 2)
A:sympy.assumptions.tests.test_matrices.A1x1->MatrixSymbol('A1x1', 1, 1)
A:sympy.assumptions.tests.test_matrices.B1x1->MatrixSymbol('B1x1', 1, 1)
A:sympy.assumptions.tests.test_matrices.C0x0->MatrixSymbol('C0x0', 0, 0)
A:sympy.assumptions.tests.test_matrices.V1->MatrixSymbol('V1', 2, 1)
A:sympy.assumptions.tests.test_matrices.V2->MatrixSymbol('V2', 2, 1)
A:sympy.assumptions.tests.test_matrices.B->MatrixSlice(X, (1, 3), (1, 3))
A:sympy.assumptions.tests.test_matrices.C->MatrixSlice(X, (0, 3), (1, 3))
A:sympy.assumptions.tests.test_matrices.alpha->Symbol('alpha')
A:sympy.assumptions.tests.test_matrices.e->Symbol('e', integer=True, negative=True)
sympy.assumptions.tests.test_matrices._test_orthogonal_unitary(predicate)
sympy.assumptions.tests.test_matrices.test_MatrixSlice()
sympy.assumptions.tests.test_matrices.test_det_trace_positive()
sympy.assumptions.tests.test_matrices.test_diagonal()
sympy.assumptions.tests.test_matrices.test_field_assumptions()
sympy.assumptions.tests.test_matrices.test_fullrank()
sympy.assumptions.tests.test_matrices.test_invertible()
sympy.assumptions.tests.test_matrices.test_invertible_BlockDiagMatrix()
sympy.assumptions.tests.test_matrices.test_invertible_BlockMatrix()
sympy.assumptions.tests.test_matrices.test_invertible_fullrank()
sympy.assumptions.tests.test_matrices.test_matrix_element_sets()
sympy.assumptions.tests.test_matrices.test_matrix_element_sets_determinant_trace()
sympy.assumptions.tests.test_matrices.test_matrix_element_sets_slices_blocks()
sympy.assumptions.tests.test_matrices.test_non_atoms()
sympy.assumptions.tests.test_matrices.test_non_trivial_implies()
sympy.assumptions.tests.test_matrices.test_orthogonal()
sympy.assumptions.tests.test_matrices.test_positive_definite()
sympy.assumptions.tests.test_matrices.test_singular()
sympy.assumptions.tests.test_matrices.test_square()
sympy.assumptions.tests.test_matrices.test_symmetric()
sympy.assumptions.tests.test_matrices.test_triangular()
sympy.assumptions.tests.test_matrices.test_unitary()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/test_query.py----------------------------------------
A:sympy.assumptions.tests.test_query.z->symbols('z', complex=True)
A:sympy.assumptions.tests.test_query.r->Rational(-5, 3)
A:sympy.assumptions.tests.test_query.(x, y, z)->symbols('x,y,z')
A:sympy.assumptions.tests.test_query.eq->Pow(exp(2 * pi * I * x, evaluate=False), x, evaluate=False)
A:sympy.assumptions.tests.test_query.A->Matrix([[0, -2 - I, 0], [2 - I, 0, -I], [0, -I, 0]])
A:sympy.assumptions.tests.test_query.B->Matrix([[-I, 2 + I, 0], [-2 + I, 0, 2 + I], [0, -2 + I, -I]])
A:sympy.assumptions.tests.test_query._A->Matrix([[0, -2 - I, 0], [z, 0, -I], [0, -I, 0]])
A:sympy.assumptions.tests.test_query.local_context->AssumptionsContext()
A:sympy.assumptions.tests.test_query.Q.my_key->MyPredicate()
A:sympy.assumptions.tests.test_query.known_facts->And(Implies(Q.integer(x), Q.rational(x)), Implies(Q.rational(x), Q.real(x)), Implies(Q.real(x), Q.complex(x)))
A:sympy.assumptions.tests.test_query.known_facts_cnf->to_cnf(known_facts)
A:sympy.assumptions.tests.test_query.mapping->generate_known_facts_dict(keys, fact)
A:sympy.assumptions.tests.test_query.x->symbols('x', irrational=True)
A:sympy.assumptions.tests.test_query.fact->get_known_facts(x)
A:sympy.assumptions.tests.test_query.cnf->sympy.assumptions.cnf.CNF.to_CNF(fact)
A:sympy.assumptions.tests.test_query.clauses->set()
A:sympy.assumptions.tests.test_query.n->Symbol('n', integer=True)
A:sympy.assumptions.tests.test_query.Q.mersenne->MersennePredicate()
A:sympy.assumptions.tests.test_query.Q.sexyprime->SexyPredicate()
A:sympy.assumptions.tests.test_query.args->sorted([int1, int2, int3])
A:sympy.assumptions.tests.test_query.mp1->MyPredicate(Str('mp1'))
A:sympy.assumptions.tests.test_query.mp2->MyPredicate(Str('mp2'))
sympy.assumptions.tests.test_query.test_Add_queries()
sympy.assumptions.tests.test_query.test_E()
sympy.assumptions.tests.test_query.test_GoldenRatio()
sympy.assumptions.tests.test_query.test_I()
sympy.assumptions.tests.test_query.test_Predicate_handler_is_unique()
sympy.assumptions.tests.test_query.test_Rational_number()
sympy.assumptions.tests.test_query.test_TribonacciConstant()
sympy.assumptions.tests.test_query.test_algebraic()
sympy.assumptions.tests.test_query.test_autosimp_used_to_fail()
sympy.assumptions.tests.test_query.test_bounded()
sympy.assumptions.tests.test_query.test_bounded_xfail()
sympy.assumptions.tests.test_query.test_check_old_assumption()
sympy.assumptions.tests.test_query.test_commutative()
sympy.assumptions.tests.test_query.test_complex()
sympy.assumptions.tests.test_query.test_complex_infinity()
sympy.assumptions.tests.test_query.test_composite_ask()
sympy.assumptions.tests.test_query.test_composite_assumptions()
sympy.assumptions.tests.test_query.test_composite_proposition()
sympy.assumptions.tests.test_query.test_custom_AskHandler()
sympy.assumptions.tests.test_query.test_custom_context()
sympy.assumptions.tests.test_query.test_even_query()
sympy.assumptions.tests.test_query.test_evenness_in_ternary_integer_product_with_even()
sympy.assumptions.tests.test_query.test_evenness_in_ternary_integer_product_with_odd()
sympy.assumptions.tests.test_query.test_extended_real()
sympy.assumptions.tests.test_query.test_float_1()
sympy.assumptions.tests.test_query.test_functions_in_assumptions()
sympy.assumptions.tests.test_query.test_generate_known_facts_dict()
sympy.assumptions.tests.test_query.test_global()
sympy.assumptions.tests.test_query.test_hermitian()
sympy.assumptions.tests.test_query.test_imaginary()
sympy.assumptions.tests.test_query.test_infinity()
sympy.assumptions.tests.test_query.test_int_1()
sympy.assumptions.tests.test_query.test_int_11()
sympy.assumptions.tests.test_query.test_int_12()
sympy.assumptions.tests.test_query.test_integer()
sympy.assumptions.tests.test_query.test_issue_3906()
sympy.assumptions.tests.test_query.test_issue_5421()
sympy.assumptions.tests.test_query.test_issue_5833()
sympy.assumptions.tests.test_query.test_issue_6732()
sympy.assumptions.tests.test_query.test_issue_7246()
sympy.assumptions.tests.test_query.test_issue_7246_failing()
sympy.assumptions.tests.test_query.test_issue_9636()
sympy.assumptions.tests.test_query.test_key_extensibility()
sympy.assumptions.tests.test_query.test_known_facts_consistent()
sympy.assumptions.tests.test_query.test_matrix()
sympy.assumptions.tests.test_query.test_nan()
sympy.assumptions.tests.test_query.test_neg_infinity()
sympy.assumptions.tests.test_query.test_negative()
sympy.assumptions.tests.test_query.test_negativeone()
sympy.assumptions.tests.test_query.test_nonnegative()
sympy.assumptions.tests.test_query.test_nonpositive()
sympy.assumptions.tests.test_query.test_nonzero()
sympy.assumptions.tests.test_query.test_odd_query()
sympy.assumptions.tests.test_query.test_oddness_in_ternary_integer_product_with_even()
sympy.assumptions.tests.test_query.test_oddness_in_ternary_integer_product_with_odd()
sympy.assumptions.tests.test_query.test_pi()
sympy.assumptions.tests.test_query.test_polyadic_predicate()
sympy.assumptions.tests.test_query.test_positive()
sympy.assumptions.tests.test_query.test_positive_assuming()
sympy.assumptions.tests.test_query.test_prime()
sympy.assumptions.tests.test_query.test_rational()
sympy.assumptions.tests.test_query.test_real_basic()
sympy.assumptions.tests.test_query.test_real_functions()
sympy.assumptions.tests.test_query.test_real_pow()
sympy.assumptions.tests.test_query.test_relational()
sympy.assumptions.tests.test_query.test_single_fact_lookup()
sympy.assumptions.tests.test_query.test_sqrt_2()
sympy.assumptions.tests.test_query.test_tautology()
sympy.assumptions.tests.test_query.test_type_extensibility()
sympy.assumptions.tests.test_query.test_zero()
sympy.assumptions.tests.test_query.test_zero_0()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/test_assumptions_2.py----------------------------------------
sympy.assumptions.tests.test_assumptions_2.test_equal()
sympy.assumptions.tests.test_assumptions_2.test_global()
sympy.assumptions.tests.test_assumptions_2.test_pretty()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/test_sathandlers.py----------------------------------------
A:sympy.assumptions.tests.test_sathandlers.(x, y, z)->symbols('x y z')
A:sympy.assumptions.tests.test_sathandlers.my_handler_registry->ClassFactRegistry()
sympy.assumptions.tests.test_sathandlers.test_allargs()
sympy.assumptions.tests.test_sathandlers.test_anyarg()
sympy.assumptions.tests.test_sathandlers.test_class_handler_registry()
sympy.assumptions.tests.test_sathandlers.test_exactlyonearg()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/test_wrapper.py----------------------------------------
A:sympy.assumptions.tests.test_wrapper.x->Symbol('x', extended_real=True)
A:sympy.assumptions.tests.test_wrapper.y->Symbol('y', extended_real=False)
A:sympy.assumptions.tests.test_wrapper.z->Symbol('z')
sympy.assumptions.tests.test_wrapper.test_AssumptionsWrapper()
sympy.assumptions.tests.test_wrapper.test_all_predicates()
sympy.assumptions.tests.test_wrapper.test_is_extended_real()
sympy.assumptions.tests.test_wrapper.test_is_infinite()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/tests/test_context.py----------------------------------------
sympy.assumptions.tests.test_context.test_assuming()
sympy.assumptions.tests.test_context.test_assuming_nested()
sympy.assumptions.tests.test_context.test_finally()
sympy.assumptions.tests.test_context.test_remove_safe()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/relation/equality.py----------------------------------------
sympy.assumptions.relation.equality.EqualityPredicate(BinaryRelation)
sympy.assumptions.relation.equality.EqualityPredicate.eval(self,args,assumptions=True)
sympy.assumptions.relation.equality.EqualityPredicate.negated(self)
sympy.assumptions.relation.equality.GreaterThanPredicate(BinaryRelation)
sympy.assumptions.relation.equality.GreaterThanPredicate.eval(self,args,assumptions=True)
sympy.assumptions.relation.equality.GreaterThanPredicate.negated(self)
sympy.assumptions.relation.equality.GreaterThanPredicate.reversed(self)
sympy.assumptions.relation.equality.LessThanPredicate(BinaryRelation)
sympy.assumptions.relation.equality.LessThanPredicate.eval(self,args,assumptions=True)
sympy.assumptions.relation.equality.LessThanPredicate.negated(self)
sympy.assumptions.relation.equality.LessThanPredicate.reversed(self)
sympy.assumptions.relation.equality.StrictGreaterThanPredicate(BinaryRelation)
sympy.assumptions.relation.equality.StrictGreaterThanPredicate.eval(self,args,assumptions=True)
sympy.assumptions.relation.equality.StrictGreaterThanPredicate.negated(self)
sympy.assumptions.relation.equality.StrictGreaterThanPredicate.reversed(self)
sympy.assumptions.relation.equality.StrictLessThanPredicate(BinaryRelation)
sympy.assumptions.relation.equality.StrictLessThanPredicate.eval(self,args,assumptions=True)
sympy.assumptions.relation.equality.StrictLessThanPredicate.negated(self)
sympy.assumptions.relation.equality.StrictLessThanPredicate.reversed(self)
sympy.assumptions.relation.equality.UnequalityPredicate(BinaryRelation)
sympy.assumptions.relation.equality.UnequalityPredicate.eval(self,args,assumptions=True)
sympy.assumptions.relation.equality.UnequalityPredicate.negated(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/relation/binrel.py----------------------------------------
A:sympy.assumptions.relation.binrel.ret->ask(self)
A:sympy.assumptions.relation.binrel.conj_assumps->set()
A:sympy.assumptions.relation.binrel.args->tuple((a.simplify() for a in self.arguments))
sympy.assumptions.AppliedBinaryRelation(AppliedPredicate)
sympy.assumptions.BinaryRelation(self,*args)
sympy.assumptions.relation.binrel.AppliedBinaryRelation(AppliedPredicate)
sympy.assumptions.relation.binrel.AppliedBinaryRelation.__bool__(self)
sympy.assumptions.relation.binrel.AppliedBinaryRelation._eval_ask(self,assumptions)
sympy.assumptions.relation.binrel.AppliedBinaryRelation.lhs(self)
sympy.assumptions.relation.binrel.AppliedBinaryRelation.negated(self)
sympy.assumptions.relation.binrel.AppliedBinaryRelation.reversed(self)
sympy.assumptions.relation.binrel.AppliedBinaryRelation.reversedsign(self)
sympy.assumptions.relation.binrel.AppliedBinaryRelation.rhs(self)
sympy.assumptions.relation.binrel.BinaryRelation(self,*args)
sympy.assumptions.relation.binrel.BinaryRelation._compare_reflexive(self,lhs,rhs)
sympy.assumptions.relation.binrel.BinaryRelation.eval(self,args,assumptions=True)
sympy.assumptions.relation.binrel.BinaryRelation.negated(self)
sympy.assumptions.relation.binrel.BinaryRelation.reversed(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/relation/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/handlers/order.py----------------------------------------
A:sympy.assumptions.handlers.order.(r, i)->expr.as_real_imag()
A:sympy.assumptions.handlers.order.r->ask(Q.real(expr.args[0]), assumptions)
A:sympy.assumptions.handlers.order.i->i.evalf(2).evalf(2)
A:sympy.assumptions.handlers.order.notnegative->fuzzy_not(_NegativePredicate_number(expr, assumptions))
A:sympy.assumptions.handlers.order.result->ask(Q.nonzero(arg), assumptions)
A:sympy.assumptions.handlers.order.notpositive->fuzzy_not(_PositivePredicate_number(expr, assumptions))
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._(expr,assumptions)
sympy.assumptions.handlers.order._NegativePredicate_number(expr,assumptions)
sympy.assumptions.handlers.order._PositivePredicate_number(expr,assumptions)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/handlers/ntheory.py----------------------------------------
A:sympy.assumptions.handlers.ntheory.i->int(expr.round())
A:sympy.assumptions.handlers.ntheory._positive->ask(Q.positive(expr), assumptions)
A:sympy.assumptions.handlers.ntheory._integer->ask(Q.integer(expr), assumptions)
A:sympy.assumptions.handlers.ntheory._prime->ask(Q.prime(expr), assumptions)
A:sympy.assumptions.handlers.ntheory._even->ask(Q.even(expr), assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._(expr,assumptions)
sympy.assumptions.handlers.ntheory._EvenPredicate_number(expr,assumptions)
sympy.assumptions.handlers.ntheory._PrimePredicate_number(expr,assumptions)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/handlers/common.py----------------------------------------
A:sympy.assumptions.handlers.common.assumps->conjuncts(assumptions)
A:sympy.assumptions.handlers.common.value->ask(arg, assumptions=assumptions)
A:sympy.assumptions.handlers.common.p->ask(arg, assumptions=assumptions)
A:sympy.assumptions.handlers.common.pt->ask(p, assumptions=assumptions)
A:sympy.assumptions.handlers.common.qt->ask(q, assumptions=assumptions)
sympy.assumptions.handlers.AskHandler(cls,*args,**kwargs)
sympy.assumptions.handlers.CommonHandler(AskHandler)
sympy.assumptions.handlers.common.AskHandler(cls,*args,**kwargs)
sympy.assumptions.handlers.common.CommonHandler(AskHandler)
sympy.assumptions.handlers.common.CommonHandler.AlwaysFalse(expr,assumptions)
sympy.assumptions.handlers.common.CommonHandler.AlwaysNone(expr,assumptions)
sympy.assumptions.handlers.common.CommonHandler.AlwaysTrue(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common._(expr,assumptions)
sympy.assumptions.handlers.common.test_closed_group(expr,assumptions,key)
sympy.assumptions.handlers.test_closed_group(expr,assumptions,key)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/handlers/calculus.py----------------------------------------
A:sympy.assumptions.handlers.calculus._bounded->ask(Q.finite(arg), assumptions)
A:sympy.assumptions.handlers.calculus.s->ask(Q.extended_positive(arg), assumptions)
A:sympy.assumptions.handlers.calculus.base_bounded->ask(Q.finite(expr.base), assumptions)
A:sympy.assumptions.handlers.calculus.exp_bounded->ask(Q.finite(expr.exp), assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)
sympy.assumptions.handlers.calculus._(expr,assumptions)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/handlers/matrices.py----------------------------------------
A:sympy.assumptions.handlers.matrices.(factor, mmul)->reblock_2x2(expr).as_coeff_mmul()
A:sympy.assumptions.handlers.matrices.int_exp->ask(Q.integer(exp), assumptions)
A:sympy.assumptions.handlers.matrices.non_negative->ask(~Q.negative(exp), assumptions)
A:sympy.assumptions.handlers.matrices.expr->reblock_2x2(expr)
A:sympy.assumptions.handlers.matrices.[[A, B], [C, D]]->reblock_2x2(expr).blocks.tolist()
A:sympy.assumptions.handlers.matrices.invertible->ask(Q.invertible(A - B * D.I * C), assumptions)
A:sympy.assumptions.handlers.matrices.(factor, matrices)->reblock_2x2(expr).as_coeff_matrices()
A:sympy.assumptions.handlers.matrices.d->sift(expr.args, lambda x: isinstance(x, MatrixExpr))
sympy.assumptions.handlers.matrices.BM_elements(predicate,expr,assumptions)
sympy.assumptions.handlers.matrices.MS_elements(predicate,expr,assumptions)
sympy.assumptions.handlers.matrices.MatMul_elements(matrix_predicate,scalar_predicate,expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._(expr,assumptions)
sympy.assumptions.handlers.matrices._Factorization(predicate,expr,assumptions)
sympy.assumptions.handlers.matrices._is_empty_or_1x1(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/handlers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/handlers/sets.py----------------------------------------
A:sympy.assumptions.handlers.sets.i->expr.as_real_imag()[1].evalf(2)
A:sympy.assumptions.handlers.sets._real->ask(Q.real(expr), assumptions)
A:sympy.assumptions.handlers.sets._rational->ask(Q.rational(expr), assumptions)
A:sympy.assumptions.handlers.sets.odd->ask(Q.odd(expr.exp), assumptions)
A:sympy.assumptions.handlers.sets.imlog->ask(Q.imaginary(log(expr.base)), assumptions)
A:sympy.assumptions.handlers.sets.cond->fuzzy_bool(Eq(mat[i, j], -conjugate(mat[j, i])))
A:sympy.assumptions.handlers.sets.r->expr.as_real_imag()[0].evalf(2)
A:sympy.assumptions.handlers.sets.rat->ask(Q.rational(expr.exp), assumptions)
A:sympy.assumptions.handlers.sets.half->ask(Q.integer(2 * expr.exp), assumptions)
A:sympy.assumptions.handlers.sets.im->ask(Q.imaginary(expr.args[0]), assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(expr,assumptions)
sympy.assumptions.handlers.sets._(mat,assumptions)
sympy.assumptions.handlers.sets._(mat,assumptions)
sympy.assumptions.handlers.sets._Imaginary_number(expr,assumptions)
sympy.assumptions.handlers.sets._IntegerPredicate_number(expr,assumptions)
sympy.assumptions.handlers.sets._RealPredicate_number(expr,assumptions)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/predicates/order.py----------------------------------------
A:sympy.assumptions.predicates.order.handler->Dispatcher('ExtendedNonNegativeHandler')
sympy.assumptions.predicates.order.ExtendedNegativePredicate(Predicate)
sympy.assumptions.predicates.order.ExtendedNonNegativePredicate(Predicate)
sympy.assumptions.predicates.order.ExtendedNonPositivePredicate(Predicate)
sympy.assumptions.predicates.order.ExtendedNonZeroPredicate(Predicate)
sympy.assumptions.predicates.order.ExtendedPositivePredicate(Predicate)
sympy.assumptions.predicates.order.NegativePredicate(Predicate)
sympy.assumptions.predicates.order.NonNegativePredicate(Predicate)
sympy.assumptions.predicates.order.NonPositivePredicate(Predicate)
sympy.assumptions.predicates.order.NonZeroPredicate(Predicate)
sympy.assumptions.predicates.order.PositivePredicate(Predicate)
sympy.assumptions.predicates.order.ZeroPredicate(Predicate)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/predicates/ntheory.py----------------------------------------
A:sympy.assumptions.predicates.ntheory.handler->Dispatcher('OddHandler', doc="Handler for key 'odd'. Test that an expression represents an odd number.")
sympy.assumptions.predicates.ntheory.CompositePredicate(Predicate)
sympy.assumptions.predicates.ntheory.EvenPredicate(Predicate)
sympy.assumptions.predicates.ntheory.OddPredicate(Predicate)
sympy.assumptions.predicates.ntheory.PrimePredicate(Predicate)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/predicates/common.py----------------------------------------
A:sympy.assumptions.predicates.common.handler->Dispatcher('IsTrueHandler', doc='Wrapper allowing to query the truth value of a boolean expression.')
sympy.assumptions.predicates.common.CommutativePredicate(Predicate)
sympy.assumptions.predicates.common.IsTruePredicate(self,arg)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/predicates/calculus.py----------------------------------------
A:sympy.assumptions.predicates.calculus.handler->Dispatcher('NegativeInfiniteHandler')
sympy.assumptions.predicates.calculus.FinitePredicate(Predicate)
sympy.assumptions.predicates.calculus.InfinitePredicate(Predicate)
sympy.assumptions.predicates.calculus.NegativeInfinitePredicate(Predicate)
sympy.assumptions.predicates.calculus.PositiveInfinitePredicate(Predicate)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/predicates/matrices.py----------------------------------------
A:sympy.assumptions.predicates.matrices.handler->Dispatcher('UnitTriangularHandler', doc="Predicate fore key 'unit_triangular'.")
sympy.assumptions.predicates.matrices.ComplexElementsPredicate(Predicate)
sympy.assumptions.predicates.matrices.DiagonalPredicate(Predicate)
sympy.assumptions.predicates.matrices.FullRankPredicate(Predicate)
sympy.assumptions.predicates.matrices.IntegerElementsPredicate(Predicate)
sympy.assumptions.predicates.matrices.InvertiblePredicate(Predicate)
sympy.assumptions.predicates.matrices.LowerTriangularPredicate(Predicate)
sympy.assumptions.predicates.matrices.NormalPredicate(Predicate)
sympy.assumptions.predicates.matrices.OrthogonalPredicate(Predicate)
sympy.assumptions.predicates.matrices.PositiveDefinitePredicate(Predicate)
sympy.assumptions.predicates.matrices.RealElementsPredicate(Predicate)
sympy.assumptions.predicates.matrices.SingularPredicate(Predicate)
sympy.assumptions.predicates.matrices.SquarePredicate(Predicate)
sympy.assumptions.predicates.matrices.SymmetricPredicate(Predicate)
sympy.assumptions.predicates.matrices.TriangularPredicate(Predicate)
sympy.assumptions.predicates.matrices.UnitTriangularPredicate(Predicate)
sympy.assumptions.predicates.matrices.UnitaryPredicate(Predicate)
sympy.assumptions.predicates.matrices.UpperTriangularPredicate(Predicate)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/predicates/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/assumptions/predicates/sets.py----------------------------------------
A:sympy.assumptions.predicates.sets.handler->Dispatcher('Transcendental', doc='Handler for Q.transcendental key.')
A:sympy.assumptions.predicates.sets.AlgebraicHandler->Dispatcher('AlgebraicHandler', doc='Handler for Q.algebraic key.')
sympy.assumptions.predicates.sets.AlgebraicPredicate(Predicate)
sympy.assumptions.predicates.sets.AntihermitianPredicate(Predicate)
sympy.assumptions.predicates.sets.ComplexPredicate(Predicate)
sympy.assumptions.predicates.sets.ExtendedRealPredicate(Predicate)
sympy.assumptions.predicates.sets.HermitianPredicate(Predicate)
sympy.assumptions.predicates.sets.ImaginaryPredicate(Predicate)
sympy.assumptions.predicates.sets.IntegerPredicate(Predicate)
sympy.assumptions.predicates.sets.IrrationalPredicate(Predicate)
sympy.assumptions.predicates.sets.RationalPredicate(Predicate)
sympy.assumptions.predicates.sets.RealPredicate(Predicate)
sympy.assumptions.predicates.sets.TranscendentalPredicate(Predicate)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/crypto/crypto.py----------------------------------------
A:sympy.crypto.crypto.t->isinstance(s, str)
A:sympy.crypto.crypto.bifid5->AZ().replace('J', '')
A:sympy.crypto.crypto.syms->list(uniq(symbols))
A:sympy.crypto.crypto.extra->''.join(sorted({i for i in symbols if symbols.count(i) > 1}))
A:sympy.crypto.crypto.key0->''.join(list(uniq(key)))
A:sympy.crypto.crypto.rv->' '.join(characterstring)
A:sympy.crypto.crypto.symbols->check_and_join(symbols)
A:sympy.crypto.crypto.missing->''.join(sorted(set(rv) - set(symbols)))
A:sympy.crypto.crypto.alp->''.join(alp)
A:sympy.crypto.crypto.msg->translate(msg, None, ''.join(chars - ok))
A:sympy.crypto.crypto.key->padded_key(key, bifid6)
A:sympy.crypto.crypto.(msg, _, A)->_prep(msg, '', symbols, bifid10)
A:sympy.crypto.crypto.N->int(n)
A:sympy.crypto.crypto.c->mod_inverse(a, N)
A:sympy.crypto.crypto.B->''.join([A[(a * i + b) % N] for i in range(N)])
A:sympy.crypto.crypto.(msg, key, A)->_prep(msg, key, symbols, bifid10)
A:sympy.crypto.crypto.k->int(k)
A:sympy.crypto.crypto.n->reduce(lambda i, j: i * j, primes)
A:sympy.crypto.crypto.(msg, pad, A)->_prep(msg, pad, symbols)
A:sympy.crypto.crypto.(m, r)->divmod(n, k)
A:sympy.crypto.crypto.key_inv->padded_key(key, bifid6).inv_mod(N)
A:sympy.crypto.crypto.(r, c)->zip(*[row_col[x] for x in msg])
A:sympy.crypto.crypto.rc->zip(*(rc[:n], rc[n:]))
A:sympy.crypto.crypto.A->''.join(uniq(''.join(key)))
A:sympy.crypto.crypto.(msg, key, _)->_prep(msg.upper(), key.upper(), None, bifid6)
A:sympy.crypto.crypto.(_, key, _)->_prep('', key.upper(), None, bifid6)
A:sympy.crypto.crypto.result->crt(factors, moduluses)
A:sympy.crypto.crypto.index->as_int(index)
A:sympy.crypto.crypto.tally->multiset(primes)
A:sympy.crypto.crypto.multiple->list(tally.keys())
A:sympy.crypto.crypto.phi->_totient._from_factors(tally)
A:sympy.crypto.crypto.d->mod_inverse(e, phi)
A:sympy.crypto.crypto.prod->reduce(lambda i, j: i * j, factors)
A:sympy.crypto.crypto.chars->set(''.join(msg.split()))
A:sympy.crypto.crypto.ok->set(mapping.keys())
A:sympy.crypto.crypto.words->translate(msg, None, ''.join(chars - ok)).strip(word_sep).split(word_sep)
A:sympy.crypto.crypto.word->''.join(chars)
A:sympy.crypto.crypto.letters->''.join(chars).split(sep)
A:sympy.crypto.crypto.F->FF(p)
A:sympy.crypto.crypto.x->Symbol('x')
A:sympy.crypto.crypto.P->int(P)
A:sympy.crypto.crypto.tot->sum(L2)
A:sympy.crypto.crypto.dC->Poly(C).degree()
A:sympy.crypto.crypto.r->_randint(seed)(2, key - 1)
A:sympy.crypto.crypto.C->(C - d * (b ** (p - 2) % p) * x ** m * B).expand()
A:sympy.crypto.crypto.randrange->_randrange(seed)
A:sympy.crypto.crypto.p->cycle(r + r[-2:0:-1])
A:sympy.crypto.crypto.a->randrange(N)
A:sympy.crypto.crypto.g->primitive_root(p)
A:sympy.crypto.crypto.sig->pow(a, (p - 1) // 2, p)
A:sympy.crypto.crypto.y->randrange(n)
A:sympy.crypto.crypto.(p, q)->bg_private_key(p, q)
A:sympy.crypto.crypto.gen->_random_coprime_stream(N, seed)
A:sympy.crypto.crypto.rev->reversed(bits)
A:sympy.crypto.crypto.idx->sorted(range(len(ciphertext)), key=lambda i: next(p))
A:sympy.crypto.crypto.L->len(encrypt_msg)
A:sympy.crypto.crypto.x_L->pow(int(x), int(2 ** L), int(key))
A:sympy.crypto.crypto.r_p->pow(int(y), int(p_t), int(p))
A:sympy.crypto.crypto.r_q->pow(int(y), int(q_t), int(q))
sympy.crypto.bg_private_key(p,q)
sympy.crypto.bg_public_key(p,q)
sympy.crypto.bifid5_square(key=None)
sympy.crypto.bifid6_square(key=None)
sympy.crypto.bifid_square(key)
sympy.crypto.check_and_join(phrase,symbols=None,filter=None)
sympy.crypto.crypto.AZ(s=None)
sympy.crypto.crypto.NonInvertibleCipherWarning(self,msg)
sympy.crypto.crypto.NonInvertibleCipherWarning.__str__(self)
sympy.crypto.crypto.NonInvertibleCipherWarning.warn(self,stacklevel=3)
sympy.crypto.crypto._decipher_rsa_crt(i,d,factors)
sympy.crypto.crypto._encipher_decipher_rsa(i,key,factors=None)
sympy.crypto.crypto._legendre(a,p)
sympy.crypto.crypto._prep(msg,key,alp,default=None)
sympy.crypto.crypto._random_coprime_stream(n,seed=None)
sympy.crypto.crypto._rsa_key(*args,public=True,private=True,totient='Euler',index=None,multipower=None)
sympy.crypto.crypto.bg_private_key(p,q)
sympy.crypto.crypto.bg_public_key(p,q)
sympy.crypto.crypto.bifid5_square(key=None)
sympy.crypto.crypto.bifid6_square(key=None)
sympy.crypto.crypto.bifid_square(key)
sympy.crypto.crypto.check_and_join(phrase,symbols=None,filter=None)
sympy.crypto.crypto.cycle_list(k,n)
sympy.crypto.crypto.decipher_affine(msg,key,symbols=None)
sympy.crypto.crypto.decipher_atbash(msg,symbols=None)
sympy.crypto.crypto.decipher_bg(message,key)
sympy.crypto.crypto.decipher_bifid(msg,key,symbols=None)
sympy.crypto.crypto.decipher_bifid5(msg,key)
sympy.crypto.crypto.decipher_bifid6(msg,key)
sympy.crypto.crypto.decipher_elgamal(msg,key)
sympy.crypto.crypto.decipher_gm(message,key)
sympy.crypto.crypto.decipher_hill(msg,key,symbols=None)
sympy.crypto.crypto.decipher_kid_rsa(msg,key)
sympy.crypto.crypto.decipher_railfence(ciphertext,rails)
sympy.crypto.crypto.decipher_rot13(msg,symbols=None)
sympy.crypto.crypto.decipher_rsa(i,key,factors=None)
sympy.crypto.crypto.decipher_shift(msg,key,symbols=None)
sympy.crypto.crypto.decipher_vigenere(msg,key,symbols=None)
sympy.crypto.crypto.decode_morse(msg,sep='|',mapping=None)
sympy.crypto.crypto.dh_private_key(digit=10,seed=None)
sympy.crypto.crypto.dh_public_key(key)
sympy.crypto.crypto.dh_shared_key(key,b)
sympy.crypto.crypto.elgamal_private_key(digit=10,seed=None)
sympy.crypto.crypto.elgamal_public_key(key)
sympy.crypto.crypto.encipher_affine(msg,key,symbols=None,_inverse=False)
sympy.crypto.crypto.encipher_atbash(msg,symbols=None)
sympy.crypto.crypto.encipher_bg(i,key,seed=None)
sympy.crypto.crypto.encipher_bifid(msg,key,symbols=None)
sympy.crypto.crypto.encipher_bifid5(msg,key)
sympy.crypto.crypto.encipher_bifid6(msg,key)
sympy.crypto.crypto.encipher_elgamal(i,key,seed=None)
sympy.crypto.crypto.encipher_gm(i,key,seed=None)
sympy.crypto.crypto.encipher_hill(msg,key,symbols=None,pad='Q')
sympy.crypto.crypto.encipher_kid_rsa(msg,key)
sympy.crypto.crypto.encipher_railfence(message,rails)
sympy.crypto.crypto.encipher_rot13(msg,symbols=None)
sympy.crypto.crypto.encipher_rsa(i,key,factors=None)
sympy.crypto.crypto.encipher_shift(msg,key,symbols=None)
sympy.crypto.crypto.encipher_substitution(msg,old,new=None)
sympy.crypto.crypto.encipher_vigenere(msg,key,symbols=None)
sympy.crypto.crypto.encode_morse(msg,sep='|',mapping=None)
sympy.crypto.crypto.gm_private_key(p,q,a=None)
sympy.crypto.crypto.gm_public_key(p,q,a=None,seed=None)
sympy.crypto.crypto.kid_rsa_private_key(a,b,A,B)
sympy.crypto.crypto.kid_rsa_public_key(a,b,A,B)
sympy.crypto.crypto.lfsr_autocorrelation(L,P,k)
sympy.crypto.crypto.lfsr_connection_polynomial(s)
sympy.crypto.crypto.lfsr_sequence(key,fill,n)
sympy.crypto.crypto.padded_key(key,symbols)
sympy.crypto.crypto.rsa_private_key(*args,**kwargs)
sympy.crypto.crypto.rsa_public_key(*args,**kwargs)
sympy.crypto.cycle_list(k,n)
sympy.crypto.decipher_atbash(msg,symbols=None)
sympy.crypto.decipher_bg(message,key)
sympy.crypto.decipher_bifid(msg,key,symbols=None)
sympy.crypto.decipher_bifid5(msg,key)
sympy.crypto.decipher_bifid6(msg,key)
sympy.crypto.decipher_elgamal(msg,key)
sympy.crypto.decipher_gm(message,key)
sympy.crypto.decipher_hill(msg,key,symbols=None)
sympy.crypto.decipher_kid_rsa(msg,key)
sympy.crypto.decipher_railfence(ciphertext,rails)
sympy.crypto.decipher_rot13(msg,symbols=None)
sympy.crypto.decipher_rsa(i,key,factors=None)
sympy.crypto.decipher_vigenere(msg,key,symbols=None)
sympy.crypto.decode_morse(msg,sep='|',mapping=None)
sympy.crypto.dh_private_key(digit=10,seed=None)
sympy.crypto.dh_public_key(key)
sympy.crypto.dh_shared_key(key,b)
sympy.crypto.elgamal_private_key(digit=10,seed=None)
sympy.crypto.elgamal_public_key(key)
sympy.crypto.encipher_affine(msg,key,symbols=None,_inverse=False)
sympy.crypto.encipher_atbash(msg,symbols=None)
sympy.crypto.encipher_bg(i,key,seed=None)
sympy.crypto.encipher_bifid(msg,key,symbols=None)
sympy.crypto.encipher_bifid5(msg,key)
sympy.crypto.encipher_bifid6(msg,key)
sympy.crypto.encipher_elgamal(i,key,seed=None)
sympy.crypto.encipher_gm(i,key,seed=None)
sympy.crypto.encipher_hill(msg,key,symbols=None,pad='Q')
sympy.crypto.encipher_kid_rsa(msg,key)
sympy.crypto.encipher_railfence(message,rails)
sympy.crypto.encipher_rot13(msg,symbols=None)
sympy.crypto.encipher_rsa(i,key,factors=None)
sympy.crypto.encipher_shift(msg,key,symbols=None)
sympy.crypto.encipher_substitution(msg,old,new=None)
sympy.crypto.encipher_vigenere(msg,key,symbols=None)
sympy.crypto.encode_morse(msg,sep='|',mapping=None)
sympy.crypto.gm_private_key(p,q,a=None)
sympy.crypto.gm_public_key(p,q,a=None,seed=None)
sympy.crypto.kid_rsa_private_key(a,b,A,B)
sympy.crypto.kid_rsa_public_key(a,b,A,B)
sympy.crypto.lfsr_autocorrelation(L,P,k)
sympy.crypto.lfsr_connection_polynomial(s)
sympy.crypto.lfsr_sequence(key,fill,n)
sympy.crypto.padded_key(key,symbols)
sympy.crypto.rsa_private_key(*args,**kwargs)
sympy.crypto.rsa_public_key(*args,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/crypto/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/crypto/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/crypto/tests/test_crypto.py----------------------------------------
A:sympy.crypto.tests.test_crypto.A->Matrix(2, 2, [1, 2, 3, 5])
A:sympy.crypto.tests.test_crypto.M->Matrix(6, 6, f)
A:sympy.crypto.tests.test_crypto.p->int('101771576071542450680238615036930821209064871437250622834065015408225822620404699983829716714082136463818069719487950024555765445186962893346463841419427008800341257468600224049986260471922572481630144688417254769186394157267097360778136329612909110256421232977833028677441206049309220354796014376698325101693')
A:sympy.crypto.tests.test_crypto.q->int('28752342353095132872290181526607275886182793241660805077850801756895127977542869729522735531281818618305768362897386687452503402819969112887067641411845844290003577887448262476551386164327966696316822188398336199002306588703902894100476186823849595103239410527279605442148285816149368667083114802852804976893')
A:sympy.crypto.tests.test_crypto.e->int('65537')
A:sympy.crypto.tests.test_crypto.d->int('8936505818327042395303988587447591295947962354408444794561435666999402846577625762582824202269399672579058991442587406384754958587400493169361356902030209')
A:sympy.crypto.tests.test_crypto.puk->rsa_public_key(*args, multipower=True)
A:sympy.crypto.tests.test_crypto.prk->dh_private_key(digit=100)
A:sympy.crypto.tests.test_crypto.encrypted->encipher_rsa(msg, puk)
A:sympy.crypto.tests.test_crypto.puk1->rsa_public_key(53, 41, 43, 47, 41)
A:sympy.crypto.tests.test_crypto.prk1->rsa_private_key(53, 41, 43, 47, 41)
A:sympy.crypto.tests.test_crypto.puk2->rsa_public_key(53, 41, 43, 47, 97)
A:sympy.crypto.tests.test_crypto.prk2->rsa_private_key(53, 41, 43, 47, 97)
A:sympy.crypto.tests.test_crypto.decrypted->decipher_rsa(encrypted, prk)
A:sympy.crypto.tests.test_crypto.r->int('176982292598688257768795007363501868388509619359563101343782618977186218671746306754136969481624522529192113803880017112559607315449521981157084370187887650624061033066022458512942411841187478937899723152771600850861641198795360418753353848448205660287479617671726408053319619892052000850883994343378882717849')
A:sympy.crypto.tests.test_crypto.s->lfsr_sequence([F(1), F(1)], [F(0), F(1)], 5)
A:sympy.crypto.tests.test_crypto.t->int('69035483433453632820551311892368908779778144568711455301541094314870476423226953576968609257479231896350331830698238209105217117290910679774888326149322416241405010692044244589681980660015448444826108008217972129130625571421904893252804729877353352739420480574842850202181462656251626522910618936534699566291')
A:sympy.crypto.tests.test_crypto.ciphertext_1->encipher_rsa(plaintext, puk)
A:sympy.crypto.tests.test_crypto.ciphertext_2->encipher_rsa(plaintext, puk, [p, q, r, s, t])
A:sympy.crypto.tests.test_crypto.F->FF(2)
A:sympy.crypto.tests.test_crypto.x->symbols('x')
A:sympy.crypto.tests.test_crypto.(a, b, _)->elgamal_private_key(digit=100)
A:sympy.crypto.tests.test_crypto.dk->elgamal_private_key(5)
A:sympy.crypto.tests.test_crypto.ek->elgamal_public_key(dk)
A:sympy.crypto.tests.test_crypto.(p, g, _)->dh_private_key(digit=100)
A:sympy.crypto.tests.test_crypto.(p1, g1, a)->dh_private_key(digit=100)
A:sympy.crypto.tests.test_crypto.(p2, g2, ga)->dh_public_key((p1, g1, a))
A:sympy.crypto.tests.test_crypto.(p, _, ga)->dh_public_key(prk)
A:sympy.crypto.tests.test_crypto.b->randrange(2, p)
A:sympy.crypto.tests.test_crypto.sk->dh_shared_key((p, _, ga), b)
A:sympy.crypto.tests.test_crypto.pri->bg_private_key(p, q)
A:sympy.crypto.tests.test_crypto.pub->bg_public_key(p, q)
A:sympy.crypto.tests.test_crypto.enc->encipher_bg(msg, pub)
A:sympy.crypto.tests.test_crypto.dec->decipher_bg(enc, pri)
sympy.crypto.tests.test_crypto.test_bg_private_key()
sympy.crypto.tests.test_crypto.test_bg_public_key()
sympy.crypto.tests.test_crypto.test_bifid()
sympy.crypto.tests.test_crypto.test_bifid5_square()
sympy.crypto.tests.test_crypto.test_bifid6_square()
sympy.crypto.tests.test_crypto.test_check_and_join()
sympy.crypto.tests.test_crypto.test_cycle_list()
sympy.crypto.tests.test_crypto.test_decipher_bifid5()
sympy.crypto.tests.test_crypto.test_decipher_bifid6()
sympy.crypto.tests.test_crypto.test_decipher_hill()
sympy.crypto.tests.test_crypto.test_decipher_kid_rsa()
sympy.crypto.tests.test_crypto.test_decipher_railfence()
sympy.crypto.tests.test_crypto.test_decipher_rsa()
sympy.crypto.tests.test_crypto.test_decipher_vigenere()
sympy.crypto.tests.test_crypto.test_decode_morse()
sympy.crypto.tests.test_crypto.test_dh_private_key()
sympy.crypto.tests.test_crypto.test_dh_public_key()
sympy.crypto.tests.test_crypto.test_dh_shared_key()
sympy.crypto.tests.test_crypto.test_elgamal()
sympy.crypto.tests.test_crypto.test_elgamal_private_key()
sympy.crypto.tests.test_crypto.test_encipher_affine()
sympy.crypto.tests.test_crypto.test_encipher_atbash()
sympy.crypto.tests.test_crypto.test_encipher_bifid5()
sympy.crypto.tests.test_crypto.test_encipher_bifid6()
sympy.crypto.tests.test_crypto.test_encipher_decipher_bg()
sympy.crypto.tests.test_crypto.test_encipher_decipher_gm()
sympy.crypto.tests.test_crypto.test_encipher_hill()
sympy.crypto.tests.test_crypto.test_encipher_kid_rsa()
sympy.crypto.tests.test_crypto.test_encipher_railfence()
sympy.crypto.tests.test_crypto.test_encipher_rot13()
sympy.crypto.tests.test_crypto.test_encipher_rsa()
sympy.crypto.tests.test_crypto.test_encipher_shift()
sympy.crypto.tests.test_crypto.test_encipher_substitution()
sympy.crypto.tests.test_crypto.test_encipher_vigenere()
sympy.crypto.tests.test_crypto.test_encode_morse()
sympy.crypto.tests.test_crypto.test_gm_private_key()
sympy.crypto.tests.test_crypto.test_gm_public_key()
sympy.crypto.tests.test_crypto.test_kid_rsa_private_key()
sympy.crypto.tests.test_crypto.test_kid_rsa_public_key()
sympy.crypto.tests.test_crypto.test_lfsr_autocorrelation()
sympy.crypto.tests.test_crypto.test_lfsr_connection_polynomial()
sympy.crypto.tests.test_crypto.test_lfsr_sequence()
sympy.crypto.tests.test_crypto.test_mutltiprime_rsa_full_example()
sympy.crypto.tests.test_crypto.test_padded_key()
sympy.crypto.tests.test_crypto.test_rsa_crt_extreme()
sympy.crypto.tests.test_crypto.test_rsa_exhaustive()
sympy.crypto.tests.test_crypto.test_rsa_large_key()
sympy.crypto.tests.test_crypto.test_rsa_multipower_exhanstive()
sympy.crypto.tests.test_crypto.test_rsa_multiprime_exhanstive()
sympy.crypto.tests.test_crypto.test_rsa_private_key()
sympy.crypto.tests.test_crypto.test_rsa_public_key()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/fancysets.py----------------------------------------
A:sympy.sets.fancysets.is_empty->fuzzy_or((s.is_empty for s in sets))
A:sympy.sets.fancysets.lamda->property(lambda self: self.args[0])
A:sympy.sets.fancysets.base_sets->property(lambda self: self.args[1:])
A:sympy.sets.fancysets.already_seen->set()
A:sympy.sets.fancysets.val->self.lamda(*i)
A:sympy.sets.fancysets.queue->list(zip(signature, base_sets))
A:sympy.sets.fancysets.other->sympify(other)
A:sympy.sets.fancysets.sig->sig.subs(rep).subs(rep)
A:sympy.sets.fancysets.expr->expr.subs(rep).subs(rep)
A:sympy.sets.fancysets.symsetmap->get_symsetmap(sig, base_sets)
A:sympy.sets.fancysets.variables->symbols('r, theta', cls=Dummy)
A:sympy.sets.fancysets.solnset->_solveset_multi(equations, variables, base_sets)
A:sympy.sets.fancysets.slc->slice(*args)
A:sympy.sets.fancysets.w->sympify(w)
A:sympy.sets.fancysets.n->ceiling((stop - start) / step)
A:sympy.sets.fancysets.start->property(lambda self: self.args[0])
A:sympy.sets.fancysets.stop->property(lambda self: self.args[1])
A:sympy.sets.fancysets.step->property(lambda self: self.args[2])
A:sympy.sets.fancysets.d->Dummy('i')
A:sympy.sets.fancysets.b->is_eq(self.start, self.stop)
A:sympy.sets.fancysets.(start, stop, step)->i.indices(self.size)
A:sympy.sets.fancysets.rel->fuzzy_or([val.is_infinite, fuzzy_and([val.is_nonnegative, (n - val).is_nonnegative])])
A:sympy.sets.fancysets.in_seq->Eq(Mod(x - a, step), 0)
A:sympy.sets.fancysets.ints->And(Eq(Mod(a, 1), 0), Eq(Mod(step, 1), 0))
A:sympy.sets.fancysets.range_cond->Or(And(self.step >= 1, x > a if a.is_infinite else x >= a, x < b if b.is_infinite else x <= b), And(self.step <= -1, x < a if a.is_infinite else x <= a, x > b if b.is_infinite else x >= b))
A:sympy.sets.fancysets.k->_pi_coeff(element)
A:sympy.sets.fancysets.a_interval->Union(*a_interval)
A:sympy.sets.fancysets.b_interval->Union(*b_interval)
A:sympy.sets.fancysets.isTuple->isinstance(other, Tuple)
A:sympy.sets.fancysets.new_sets[k]->ProductSet(v.args[0], normalize_theta_set(v.args[1]))
A:sympy.sets.fancysets.sets->Union(*new_sets)
sympy.ComplexRegion(cls,sets,polar=False)
sympy.ImageSet(cls,flambda,*sets)
sympy.Range(cls,*args)
sympy.sets.fancyComplexes(cls)
sympy.sets.fancyIntegers(Set,metaclass=Singleton)
sympy.sets.fancyNaturals(Set,metaclass=Singleton)
sympy.sets.fancyNaturals0(Naturals)
sympy.sets.fancyRationals(Set,metaclass=Singleton)
sympy.sets.fancyReals(Interval,metaclass=Singleton)
sympy.sets.fancysets.CartesianComplexRegion(cls,sets)
sympy.sets.fancysets.CartesianComplexRegion.expr(self)
sympy.sets.fancysets.ComplexRegion(cls,sets,polar=False)
sympy.sets.fancysets.ComplexRegion._contains(self,other)
sympy.sets.fancysets.ComplexRegion._kind(self)
sympy.sets.fancysets.ComplexRegion._measure(self)
sympy.sets.fancysets.ComplexRegion.a_interval(self)
sympy.sets.fancysets.ComplexRegion.b_interval(self)
sympy.sets.fancysets.ComplexRegion.from_real(cls,sets)
sympy.sets.fancysets.ComplexRegion.psets(self)
sympy.sets.fancysets.ComplexRegion.sets(self)
sympy.sets.fancysets.Complexes(cls)
sympy.sets.fancysets.Complexes.sets(self)
sympy.sets.fancysets.ImageSet(cls,flambda,*sets)
sympy.sets.fancysets.ImageSet.__iter__(self)
sympy.sets.fancysets.ImageSet._check_sig(cls,sig_i,set_i)
sympy.sets.fancysets.ImageSet._contains(self,other)
sympy.sets.fancysets.ImageSet._is_multivariate(self)
sympy.sets.fancysets.ImageSet._kind(self)
sympy.sets.fancysets.ImageSet.base_pset(self)
sympy.sets.fancysets.ImageSet.base_set(self)
sympy.sets.fancysets.ImageSet.doit(self,**hints)
sympy.sets.fancysets.ImageSet.is_iterable(self)
sympy.sets.fancysets.Integers(Set,metaclass=Singleton)
sympy.sets.fancysets.Integers.__iter__(self)
sympy.sets.fancysets.Integers._boundary(self)
sympy.sets.fancysets.Integers._contains(self,other)
sympy.sets.fancysets.Integers._eval_is_subset(self,other)
sympy.sets.fancysets.Integers._eval_is_superset(self,other)
sympy.sets.fancysets.Integers._inf(self)
sympy.sets.fancysets.Integers._kind(self)
sympy.sets.fancysets.Integers._sup(self)
sympy.sets.fancysets.Integers.as_relational(self,x)
sympy.sets.fancysets.Naturals(Set,metaclass=Singleton)
sympy.sets.fancysets.Naturals.__iter__(self)
sympy.sets.fancysets.Naturals._boundary(self)
sympy.sets.fancysets.Naturals._contains(self,other)
sympy.sets.fancysets.Naturals._eval_is_subset(self,other)
sympy.sets.fancysets.Naturals._eval_is_superset(self,other)
sympy.sets.fancysets.Naturals._kind(self)
sympy.sets.fancysets.Naturals.as_relational(self,x)
sympy.sets.fancysets.Naturals0(Naturals)
sympy.sets.fancysets.Naturals0._contains(self,other)
sympy.sets.fancysets.Naturals0._eval_is_subset(self,other)
sympy.sets.fancysets.Naturals0._eval_is_superset(self,other)
sympy.sets.fancysets.PolarComplexRegion(cls,sets)
sympy.sets.fancysets.PolarComplexRegion.expr(self)
sympy.sets.fancysets.Range(cls,*args)
sympy.sets.fancysets.Range.__bool__(self)
sympy.sets.fancysets.Range.__getitem__(self,i)
sympy.sets.fancysets.Range.__iter__(self)
sympy.sets.fancysets.Range.__len__(self)
sympy.sets.fancysets.Range._boundary(self)
sympy.sets.fancysets.Range._contains(self,other)
sympy.sets.fancysets.Range._inf(self)
sympy.sets.fancysets.Range._kind(self)
sympy.sets.fancysets.Range._sup(self)
sympy.sets.fancysets.Range.as_relational(self,x)
sympy.sets.fancysets.Range.is_empty(self)
sympy.sets.fancysets.Range.is_finite_set(self)
sympy.sets.fancysets.Range.is_iterable(self)
sympy.sets.fancysets.Range.reversed(self)
sympy.sets.fancysets.Range.size(self)
sympy.sets.fancysets.Rationals(Set,metaclass=Singleton)
sympy.sets.fancysets.Rationals.__iter__(self)
sympy.sets.fancysets.Rationals._boundary(self)
sympy.sets.fancysets.Rationals._contains(self,other)
sympy.sets.fancysets.Rationals._kind(self)
sympy.sets.fancysets.Reals(Interval,metaclass=Singleton)
sympy.sets.fancysets.Reals.__eq__(self,other)
sympy.sets.fancysets.Reals.__hash__(self)
sympy.sets.fancysets.Reals.end(self)
sympy.sets.fancysets.Reals.left_open(self)
sympy.sets.fancysets.Reals.right_open(self)
sympy.sets.fancysets.Reals.start(self)
sympy.sets.fancysets.normalize_theta_set(theta)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/powerset.py----------------------------------------
A:sympy.sets.powerset.arg->_sympify(arg)
A:sympy.sets.powerset.x->FiniteSet(x)
sympy.PowerSet(cls,arg,evaluate=None)
sympy.sets.powerset.PowerSet(cls,arg,evaluate=None)
sympy.sets.powerset.PowerSet.__iter__(self)
sympy.sets.powerset.PowerSet.__len__(self)
sympy.sets.powerset.PowerSet._contains(self,other)
sympy.sets.powerset.PowerSet._eval_is_subset(self,other)
sympy.sets.powerset.PowerSet._eval_rewrite_as_FiniteSet(self,*args,**kwargs)
sympy.sets.powerset.PowerSet.arg(self)
sympy.sets.powerset.PowerSet.kind(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/conditionset.py----------------------------------------
A:sympy.sets.conditionset.adummy->Dummy('conditionset')
A:sympy.sets.conditionset.sym->property(lambda self: self.args[0])
A:sympy.sets.conditionset.flat->flatten([sym])
A:sympy.sets.conditionset.base_set->property(lambda self: self.args[2])
A:sympy.sets.conditionset.condition->property(lambda self: self.args[1])
A:sympy.sets.conditionset.sifted->sift(base_set, lambda _: fuzzy_bool(condition.subs(sym, _)))
A:sympy.sets.conditionset.know->FiniteSet(*sifted[True])
A:sympy.sets.conditionset.(sa, sb)->map(sig, (sym, s))
A:sympy.sets.conditionset.reps->dict(zip(flatten([sym]), flatten([s])))
A:sympy.sets.conditionset.rv->sympy.core.basic.Basic.__new__(cls, sym, condition, base_set)
A:sympy.sets.conditionset.c->tuples.count(True)
A:sympy.sets.conditionset.base_cond->Contains(other, self.base_set)
A:sympy.sets.conditionset.lamda->Lambda((self.sym,), self.condition)
A:sympy.sets.conditionset.lambda_cond->lamda(other)
A:sympy.sets.conditionset.f->f(other)
A:sympy.sets.conditionset.dsym->property(lambda self: self.args[0]).subs(old, adummy)
A:sympy.sets.conditionset.insym->property(lambda self: self.args[0]).subs(old, adummy).has(adummy)
A:sympy.sets.conditionset.newbase->base.subs(old, new)
A:sympy.sets.conditionset.cond->cond.subs(old, new).subs(old, new)
sympy.ConditionSet(cls,sym,condition,base_set=S.UniversalSet)
sympy.sets.conditionset.ConditionSet(cls,sym,condition,base_set=S.UniversalSet)
sympy.sets.conditionset.ConditionSet._contains(self,other)
sympy.sets.conditionset.ConditionSet._eval_subs(self,old,new)
sympy.sets.conditionset.ConditionSet._kind(self)
sympy.sets.conditionset.ConditionSet.as_relational(self,other)
sympy.sets.conditionset.ConditionSet.bound_symbols(self)
sympy.sets.conditionset.ConditionSet.free_symbols(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/setexpr.py----------------------------------------
A:sympy.sets.setexpr.set->property(lambda self: self.args[0])
A:sympy.sets.setexpr.res->set_function(func, self.set)
A:sympy.sets.setexpr.out->op(x, y)
sympy.sets.setexpr.SetExpr(cls,setarg)
sympy.sets.setexpr.SetExpr.__add__(self,other)
sympy.sets.setexpr.SetExpr.__mul__(self,other)
sympy.sets.setexpr.SetExpr.__pow__(self,other)
sympy.sets.setexpr.SetExpr.__radd__(self,other)
sympy.sets.setexpr.SetExpr.__rmul__(self,other)
sympy.sets.setexpr.SetExpr.__rpow__(self,other)
sympy.sets.setexpr.SetExpr.__rsub__(self,other)
sympy.sets.setexpr.SetExpr.__rtruediv__(self,other)
sympy.sets.setexpr.SetExpr.__sub__(self,other)
sympy.sets.setexpr.SetExpr.__truediv__(self,other)
sympy.sets.setexpr.SetExpr._eval_func(self,func)
sympy.sets.setexpr.SetExpr._latex(self,printer)
sympy.sets.setexpr._setexpr_apply_operation(op,x,y)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/ordinals.py----------------------------------------
A:sympy.sets.ordinals.b->Integer(b)
A:sympy.sets.ordinals.a->Ordinal.convert(a)
A:sympy.sets.ordinals.other->Ordinal.convert(other)
A:sympy.sets.ordinals.obj->super().__new__(cls, *terms)
A:sympy.sets.ordinals.a_terms->list(self.terms)
A:sympy.sets.ordinals.b_terms->list(other.terms)
A:sympy.sets.ordinals.sum_term->OmegaPower(b_exp, a_terms[r].mult + other.leading_term.mult)
A:sympy.sets.ordinals.ord0->OrdinalZero()
A:sympy.sets.ordinals.omega->OrdinalOmega()
sympy.OmegaPower(cls,a,b)
sympy.Ordinal(cls,*terms)
sympy.sets.ordinals.OmegaPower(cls,a,b)
sympy.sets.ordinals.OmegaPower.__eq__(self,other)
sympy.sets.ordinals.OmegaPower.__hash__(self)
sympy.sets.ordinals.OmegaPower.__lt__(self,other)
sympy.sets.ordinals.OmegaPower._compare_term(self,other,op)
sympy.sets.ordinals.OmegaPower.exp(self)
sympy.sets.ordinals.OmegaPower.mult(self)
sympy.sets.ordinals.Ordinal(cls,*terms)
sympy.sets.ordinals.Ordinal.__add__(self,other)
sympy.sets.ordinals.Ordinal.__eq__(self,other)
sympy.sets.ordinals.Ordinal.__ge__(self,other)
sympy.sets.ordinals.Ordinal.__gt__(self,other)
sympy.sets.ordinals.Ordinal.__hash__(self)
sympy.sets.ordinals.Ordinal.__le__(self,other)
sympy.sets.ordinals.Ordinal.__lt__(self,other)
sympy.sets.ordinals.Ordinal.__mul__(self,other)
sympy.sets.ordinals.Ordinal.__pow__(self,other)
sympy.sets.ordinals.Ordinal.__radd__(self,other)
sympy.sets.ordinals.Ordinal.__rmul__(self,other)
sympy.sets.ordinals.Ordinal.__str__(self)
sympy.sets.ordinals.Ordinal.convert(cls,integer_value)
sympy.sets.ordinals.Ordinal.degree(self)
sympy.sets.ordinals.Ordinal.is_limit_ordinal(self)
sympy.sets.ordinals.Ordinal.is_successor_ordinal(self)
sympy.sets.ordinals.Ordinal.leading_term(self)
sympy.sets.ordinals.Ordinal.terms(self)
sympy.sets.ordinals.Ordinal.trailing_term(self)
sympy.sets.ordinals.OrdinalOmega(cls)
sympy.sets.ordinals.OrdinalOmega.terms(self)
sympy.sets.ordinals.OrdinalZero(Ordinal)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/sets.py----------------------------------------
A:sympy.sets.sets.tfn->defaultdict(lambda : None, {True: S.true, S.true: S.true, False: S.false, S.false: S.false})
A:sympy.sets.sets.infimum->infimum.evalf().evalf()
A:sympy.sets.sets.pairs->list(zip(self.sets, other.sets))
A:sympy.sets.sets.sifted->sift(other, lambda x: fuzzy_bool(self.contains(x)))
A:sympy.sets.sets.other->Intersection(*other_sets)
A:sympy.sets.sets.c->sympify(self.contains(i))
A:sympy.sets.sets.ret->is_subset_sets(self, other)
A:sympy.sets.sets.dps->prec_to_dps(prec)
A:sympy.sets.sets.sets->tuple(sets[0])
A:sympy.sets.sets.all_finite->fuzzy_and((s.is_finite_set for s in self.sets))
A:sympy.sets.sets.start->_sympify(start)
A:sympy.sets.sets.end->_sympify(end)
A:sympy.sets.sets.left_open->_sympify(left_open)
A:sympy.sets.sets.right_open->_sympify(right_open)
A:sympy.sets.sets.a->Interval(S.NegativeInfinity, self.start, True, not self.left_open)
A:sympy.sets.sets.b->Interval(self.end, S.Infinity, not self.right_open, True)
A:sympy.sets.sets.d->Dummy('d')
A:sympy.sets.sets.x->sympify(x)
A:sympy.sets.sets.evaluate->kwargs.get('evaluate', global_parameters.evaluate)
A:sympy.sets.sets.args->set(args)
A:sympy.sets.sets.obj->super().__new__(cls, element_kind)
A:sympy.sets.sets.obj._argset->frozenset(args)
A:sympy.sets.sets.kinds->tuple((arg.kind for arg in self.args if arg is not S.UniversalSet))
A:sympy.sets.sets.necond->Ne(symbol, a.sup)
A:sympy.sets.sets.sets_sift->sift(self.args, lambda x: x.is_iterable)
A:sympy.sets.sets.length->len(candidate)
A:sympy.sets.sets.(fs_args, others)->sift(args, lambda x: x.is_FiniteSet, binary=True)
A:sympy.sets.sets.all_elements->reduce(lambda a, b: a | b, fs_sets, set())
A:sympy.sets.sets.definite->set()
A:sympy.sets.sets.inall->fuzzy_and((s.contains(e) for s in args))
A:sympy.sets.sets.fs_elements->reduce(lambda a, b: a | b, fs_sets, set())
A:sympy.sets.sets.infs->fuzzy_and((s.contains(e) for s in fs_symsets))
A:sympy.sets.sets.fs_symsets[n]->FiniteSet(*s)
A:sympy.sets.sets.rest->Intersection(*others)
A:sympy.sets.sets.(a, b)->map(_sympify, (a, b))
A:sympy.sets.sets.result->B._symmetric_difference(A)
A:sympy.sets.sets.A_rel->A.as_relational(symbol)
A:sympy.sets.sets.B_rel->B.as_relational(symbol)
A:sympy.sets.sets._args_set->set(dargs.values())
A:sympy.sets.sets.unk->FiniteSet(*unk)
A:sympy.sets.sets.biggest->max(args, key=len)
A:sympy.sets.sets.arg_set->FiniteSet(*arg)
A:sympy.sets.sets.union->roundrobin(*(iter(arg) for arg in args))
A:sympy.sets.sets.cross->ProductSet(set_i, FiniteSet(index))
A:sympy.sets.sets.dj_union->Union(dj_union, cross)
A:sympy.sets.sets.f->Lambda(var, f(*var))
A:sympy.sets.sets.nargs->getattr(f, 'nargs', {})
A:sympy.sets.sets.dexpr->_sympify(f(*[Dummy() for i in s]))
A:sympy.sets.sets.var->tuple((uniquely_named_symbol(Symbol(i), dexpr) for i in s))
A:sympy.sets.sets.r->ImageSet(f, set)
A:sympy.sets.sets.u->Dummy('u')
A:sympy.sets.sets.fdiff->func(u).diff(u)
A:sympy.sets.sets.finite_set->FiniteSet(*a)
A:sympy.sets.sets.new_set->intersection_sets(s, t)
A:sympy.sets.sets.new_args->(args - {s, t}).union({new_set})
A:sympy.sets.sets.rv->Intersection._handle_finite_sets(args)
A:sympy.sets.sets.(fs_args, other)->sift([x, y], lambda x: isinstance(x, FiniteSet), binary=True)
A:sympy.sets.sets.out->ImageSet(Lambda((_x, _y), op(_x, _y)), x, y)
A:sympy.sets.sets.(_x, _y)->symbols('x y')
sympy.Complement(cls,a,b,evaluate=True)
sympy.DisjointUnion(cls,*sets)
sympy.FiniteSet(cls,*args,**kwargs)
sympy.Intersection(cls,*args,**kwargs)
sympy.Interval(cls,start,end,left_open=False,right_open=False)
sympy.ProductSet(cls,*sets,**assumptions)
sympy.Set(Basic,EvalfMixin)
sympy.SymmetricDifference(cls,a,b,evaluate=True)
sympy.Union(cls,*args,**kwargs)
sympy.imageset(*args)
sympy.sets.EmptySet(Set,metaclass=Singleton)
sympy.sets.UniversalSet(Set,metaclass=Singleton)
sympy.sets.sets.Complement(cls,a,b,evaluate=True)
sympy.sets.sets.Complement.__iter__(self)
sympy.sets.sets.Complement._contains(self,other)
sympy.sets.sets.Complement._kind(self)
sympy.sets.sets.Complement.as_relational(self,symbol)
sympy.sets.sets.Complement.is_finite_set(self)
sympy.sets.sets.Complement.is_iterable(self)
sympy.sets.sets.Complement.reduce(A,B)
sympy.sets.sets.DisjointUnion(cls,*sets)
sympy.sets.sets.DisjointUnion.__iter__(self)
sympy.sets.sets.DisjointUnion.__len__(self)
sympy.sets.sets.DisjointUnion._contains(self,element)
sympy.sets.sets.DisjointUnion._eval_rewrite_as_Union(self,*sets)
sympy.sets.sets.DisjointUnion._kind(self)
sympy.sets.sets.DisjointUnion.is_empty(self)
sympy.sets.sets.DisjointUnion.is_finite_set(self)
sympy.sets.sets.DisjointUnion.is_iterable(self)
sympy.sets.sets.DisjointUnion.sets(self)
sympy.sets.sets.EmptySet(Set,metaclass=Singleton)
sympy.sets.sets.EmptySet.__iter__(self)
sympy.sets.sets.EmptySet.__len__(self)
sympy.sets.sets.EmptySet._boundary(self)
sympy.sets.sets.EmptySet._complement(self,other)
sympy.sets.sets.EmptySet._contains(self,other)
sympy.sets.sets.EmptySet._eval_powerset(self)
sympy.sets.sets.EmptySet._kind(self)
sympy.sets.sets.EmptySet._measure(self)
sympy.sets.sets.EmptySet._symmetric_difference(self,other)
sympy.sets.sets.EmptySet.as_relational(self,symbol)
sympy.sets.sets.EmptySet.is_EmptySet(self)
sympy.sets.sets.FiniteSet(cls,*args,**kwargs)
sympy.sets.sets.FiniteSet.__eq__(self,other)
sympy.sets.sets.FiniteSet.__ge__(self,other)
sympy.sets.sets.FiniteSet.__gt__(self,other)
sympy.sets.sets.FiniteSet.__iter__(self)
sympy.sets.sets.FiniteSet.__le__(self,other)
sympy.sets.sets.FiniteSet.__len__(self)
sympy.sets.sets.FiniteSet.__lt__(self,other)
sympy.sets.sets.FiniteSet._boundary(self)
sympy.sets.sets.FiniteSet._complement(self,other)
sympy.sets.sets.FiniteSet._contains(self,other)
sympy.sets.sets.FiniteSet._eval_evalf(self,prec)
sympy.sets.sets.FiniteSet._eval_is_subset(self,other)
sympy.sets.sets.FiniteSet._eval_powerset(self)
sympy.sets.sets.FiniteSet._eval_rewrite_as_PowerSet(self,*args,**kwargs)
sympy.sets.sets.FiniteSet._eval_simplify(self,**kwargs)
sympy.sets.sets.FiniteSet._inf(self)
sympy.sets.sets.FiniteSet._kind(self)
sympy.sets.sets.FiniteSet._sorted_args(self)
sympy.sets.sets.FiniteSet._sup(self)
sympy.sets.sets.FiniteSet.as_relational(self,symbol)
sympy.sets.sets.FiniteSet.compare(self,other)
sympy.sets.sets.FiniteSet.measure(self)
sympy.sets.sets.Intersection(cls,*args,**kwargs)
sympy.sets.sets.Intersection.__iter__(self)
sympy.sets.sets.Intersection._contains(self,other)
sympy.sets.sets.Intersection._handle_finite_sets(args)
sympy.sets.sets.Intersection._inf(self)
sympy.sets.sets.Intersection._kind(self)
sympy.sets.sets.Intersection._sup(self)
sympy.sets.sets.Intersection.args(self)
sympy.sets.sets.Intersection.as_relational(self,symbol)
sympy.sets.sets.Intersection.identity(self)
sympy.sets.sets.Intersection.is_finite_set(self)
sympy.sets.sets.Intersection.is_iterable(self)
sympy.sets.sets.Intersection.zero(self)
sympy.sets.sets.Interval(cls,start,end,left_open=False,right_open=False)
sympy.sets.sets.Interval.Lopen(cls,a,b)
sympy.sets.sets.Interval.Ropen(cls,a,b)
sympy.sets.sets.Interval._boundary(self)
sympy.sets.sets.Interval._complement(self,other)
sympy.sets.sets.Interval._contains(self,other)
sympy.sets.sets.Interval._eval_Eq(self,other)
sympy.sets.sets.Interval._eval_evalf(self,prec)
sympy.sets.sets.Interval._inf(self)
sympy.sets.sets.Interval._is_comparable(self,other)
sympy.sets.sets.Interval._kind(self)
sympy.sets.sets.Interval._measure(self)
sympy.sets.sets.Interval._sup(self)
sympy.sets.sets.Interval.as_relational(self,x)
sympy.sets.sets.Interval.end(self)
sympy.sets.sets.Interval.is_empty(self)
sympy.sets.sets.Interval.is_finite_set(self)
sympy.sets.sets.Interval.is_left_unbounded(self)
sympy.sets.sets.Interval.is_right_unbounded(self)
sympy.sets.sets.Interval.left(self)
sympy.sets.sets.Interval.left_open(self)
sympy.sets.sets.Interval.open(cls,a,b)
sympy.sets.sets.Interval.right(self)
sympy.sets.sets.Interval.right_open(self)
sympy.sets.sets.Interval.start(self)
sympy.sets.sets.Interval.to_mpi(self,prec=53)
sympy.sets.sets.ProductSet(cls,*sets,**assumptions)
sympy.sets.sets.ProductSet.__bool__(self)
sympy.sets.sets.ProductSet.__iter__(self)
sympy.sets.sets.ProductSet.__len__(self)
sympy.sets.sets.ProductSet._boundary(self)
sympy.sets.sets.ProductSet._contains(self,element)
sympy.sets.sets.ProductSet._kind(self)
sympy.sets.sets.ProductSet._measure(self)
sympy.sets.sets.ProductSet.as_relational(self,*symbols)
sympy.sets.sets.ProductSet.flatten(self)
sympy.sets.sets.ProductSet.is_empty(self)
sympy.sets.sets.ProductSet.is_finite_set(self)
sympy.sets.sets.ProductSet.is_iterable(self)
sympy.sets.sets.ProductSet.sets(self)
sympy.sets.sets.Set(Basic,EvalfMixin)
sympy.sets.sets.Set.__add__(self,other)
sympy.sets.sets.Set.__and__(self,other)
sympy.sets.sets.Set.__contains__(self,other)
sympy.sets.sets.Set.__mul__(self,other)
sympy.sets.sets.Set.__or__(self,other)
sympy.sets.sets.Set.__pow__(self,exp)
sympy.sets.sets.Set.__sub__(self,other)
sympy.sets.sets.Set.__xor__(self,other)
sympy.sets.sets.Set._boundary(self)
sympy.sets.sets.Set._complement(self,other)
sympy.sets.sets.Set._contains(self,other)
sympy.sets.sets.Set._eval_evalf(self,prec)
sympy.sets.sets.Set._eval_is_subset(self,other)
sympy.sets.sets.Set._eval_is_superset(self,other)
sympy.sets.sets.Set._eval_powerset(self)
sympy.sets.sets.Set._inf(self)
sympy.sets.sets.Set._infimum_key(expr)
sympy.sets.sets.Set._kind(self)
sympy.sets.sets.Set._measure(self)
sympy.sets.sets.Set._sup(self)
sympy.sets.sets.Set._symmetric_difference(self,other)
sympy.sets.sets.Set.boundary(self)
sympy.sets.sets.Set.closure(self)
sympy.sets.sets.Set.complement(self,universe)
sympy.sets.sets.Set.contains(self,other)
sympy.sets.sets.Set.inf(self)
sympy.sets.sets.Set.interior(self)
sympy.sets.sets.Set.intersect(self,other)
sympy.sets.sets.Set.intersection(self,other)
sympy.sets.sets.Set.is_EmptySet(self)
sympy.sets.sets.Set.is_closed(self)
sympy.sets.sets.Set.is_disjoint(self,other)
sympy.sets.sets.Set.is_open(self)
sympy.sets.sets.Set.is_proper_subset(self,other)
sympy.sets.sets.Set.is_proper_superset(self,other)
sympy.sets.sets.Set.is_subset(self,other)
sympy.sets.sets.Set.is_superset(self,other)
sympy.sets.sets.Set.isdisjoint(self,other)
sympy.sets.sets.Set.issubset(self,other)
sympy.sets.sets.Set.issuperset(self,other)
sympy.sets.sets.Set.kind(self)
sympy.sets.sets.Set.measure(self)
sympy.sets.sets.Set.powerset(self)
sympy.sets.sets.Set.sup(self)
sympy.sets.sets.Set.symmetric_difference(self,other)
sympy.sets.sets.Set.union(self,other)
sympy.sets.sets.SetKind(cls,element_kind=None)
sympy.sets.sets.SetKind.__repr__(self)
sympy.sets.sets.SymmetricDifference(cls,a,b,evaluate=True)
sympy.sets.sets.SymmetricDifference.__iter__(self)
sympy.sets.sets.SymmetricDifference.as_relational(self,symbol)
sympy.sets.sets.SymmetricDifference.is_iterable(self)
sympy.sets.sets.SymmetricDifference.reduce(A,B)
sympy.sets.sets.Union(cls,*args,**kwargs)
sympy.sets.sets.Union.__iter__(self)
sympy.sets.sets.Union._boundary(self)
sympy.sets.sets.Union._complement(self,universe)
sympy.sets.sets.Union._contains(self,other)
sympy.sets.sets.Union._inf(self)
sympy.sets.sets.Union._kind(self)
sympy.sets.sets.Union._measure(self)
sympy.sets.sets.Union._sup(self)
sympy.sets.sets.Union.args(self)
sympy.sets.sets.Union.as_relational(self,symbol)
sympy.sets.sets.Union.identity(self)
sympy.sets.sets.Union.is_empty(self)
sympy.sets.sets.Union.is_finite_set(self)
sympy.sets.sets.Union.is_iterable(self)
sympy.sets.sets.Union.is_subset(self,other)
sympy.sets.sets.Union.zero(self)
sympy.sets.sets.UniversalSet(Set,metaclass=Singleton)
sympy.sets.sets.UniversalSet._boundary(self)
sympy.sets.sets.UniversalSet._complement(self,other)
sympy.sets.sets.UniversalSet._contains(self,other)
sympy.sets.sets.UniversalSet._kind(self)
sympy.sets.sets.UniversalSet._measure(self)
sympy.sets.sets.UniversalSet._symmetric_difference(self,other)
sympy.sets.sets.UniversalSet.as_relational(self,symbol)
sympy.sets.sets._apply_operation(op,x,y,commutative)
sympy.sets.sets._handle_finite_sets(op,x,y,commutative)
sympy.sets.sets.imageset(*args)
sympy.sets.sets.is_function_invertible_in_set(func,setv)
sympy.sets.sets.set_add(x,y)
sympy.sets.sets.set_div(x,y)
sympy.sets.sets.set_function(f,x)
sympy.sets.sets.set_mul(x,y)
sympy.sets.sets.set_pow(x,y)
sympy.sets.sets.set_sub(x,y)
sympy.sets.sets.simplify_intersection(args)
sympy.sets.sets.simplify_union(args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/contains.py----------------------------------------
A:sympy.sets.contains.ret->s.contains(x)
sympy.Contains(BooleanFunction)
sympy.sets.contains.Contains(BooleanFunction)
sympy.sets.contains.Contains.as_set(self)
sympy.sets.contains.Contains.binary_symbols(self)
sympy.sets.contains.Contains.eval(cls,x,s)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/tests/test_powerset.py----------------------------------------
A:sympy.sets.tests.test_powerset.l->len(subset_series)
A:sympy.sets.tests.test_powerset.A->Interval(0, 1)
A:sympy.sets.tests.test_powerset.a->PowerSet(S.Naturals).__iter__()
A:sympy.sets.tests.test_powerset.x->Symbol('x')
A:sympy.sets.tests.test_powerset.pset->PowerSet(FiniteSet(1, 2))
A:sympy.sets.tests.test_powerset.subset->PowerSet(FiniteSet(1))
A:sympy.sets.tests.test_powerset.bad_set->PowerSet(FiniteSet(2, 3))
sympy.sets.tests.test_powerset.test_failing_powerset__contains__()
sympy.sets.tests.test_powerset.test_finiteset_rewrite_powerset()
sympy.sets.tests.test_powerset.test_is_subset()
sympy.sets.tests.test_powerset.test_powerset__contains__()
sympy.sets.tests.test_powerset.test_powerset__iter__()
sympy.sets.tests.test_powerset.test_powerset__len__()
sympy.sets.tests.test_powerset.test_powerset_contains()
sympy.sets.tests.test_powerset.test_powerset_creation()
sympy.sets.tests.test_powerset.test_powerset_method()
sympy.sets.tests.test_powerset.test_powerset_rewrite_FiniteSet()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/tests/test_sets.py----------------------------------------
A:sympy.sets.tests.test_sets.r->Symbol('r', real=True)
A:sympy.sets.tests.test_sets.clash->Symbol('x', integer=true)
A:sympy.sets.tests.test_sets.(x1, x2)->symbols('x1, x2')
A:sympy.sets.tests.test_sets.e->Union(i1, i2).contains(x)
A:sympy.sets.tests.test_sets.a->FiniteSet(1, 2)
A:sympy.sets.tests.test_sets.(x, y)->symbols('x, y')
A:sympy.sets.tests.test_sets.p->ProductSet(FiniteSet(Matrix([1, 2])), FiniteSet(Matrix([1, 2])))
A:sympy.sets.tests.test_sets.n->Symbol('n', integer=True, positive=True)
A:sympy.sets.tests.test_sets.nn->Symbol('nn', nonnegative=True)
A:sympy.sets.tests.test_sets.x->Symbol('x')
A:sympy.sets.tests.test_sets.y->Symbol('y')
A:sympy.sets.tests.test_sets.z->Symbol('z')
A:sympy.sets.tests.test_sets.XandY->X.intersect(Y)
A:sympy.sets.tests.test_sets.u->Union(Range(3), Range(5), Range(4), evaluate=False)
A:sympy.sets.tests.test_sets.A->FiniteSet(1, 2)
A:sympy.sets.tests.test_sets.B->FiniteSet(FiniteSet(1, 2), FiniteSet(1))
A:sympy.sets.tests.test_sets.C->FiniteSet(FiniteSet(1, 2), FiniteSet(1), 1, 2)
A:sympy.sets.tests.test_sets.D->DisjointUnion(FiniteSet(3, 5, 7, 9), FiniteSet(x, y, z))
A:sympy.sets.tests.test_sets.A2->ProductSet(A, A)
A:sympy.sets.tests.test_sets.B3->ProductSet(B, B, B)
A:sympy.sets.tests.test_sets.Sx->FiniteSet(x)
A:sympy.sets.tests.test_sets.Sy->FiniteSet(y)
A:sympy.sets.tests.test_sets.notsquare->square.complement(S.Reals * S.Reals)
A:sympy.sets.tests.test_sets.(m, n)->symbols('m, n', real=True)
A:sympy.sets.tests.test_sets.i->Interval(0, oo)
A:sympy.sets.tests.test_sets.line->Interval(0, 2)
A:sympy.sets.tests.test_sets.b->ProductSet(a, a)
A:sympy.sets.tests.test_sets.c->FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
A:sympy.sets.tests.test_sets.Rn->ProductSet(*(S.Reals,) * ni)
A:sympy.sets.tests.test_sets.S1->FiniteSet(1, 2)
A:sympy.sets.tests.test_sets.S2->FiniteSet(3, 4)
A:sympy.sets.tests.test_sets.S3->ProductSet(S1, S2)
A:sympy.sets.tests.test_sets.Z2->ProductSet(S.Integers, S.Integers)
A:sympy.sets.tests.test_sets.rad1->Pow(Pow(2, Rational(1, 3)) - 1, Rational(1, 3))
A:sympy.sets.tests.test_sets.s1->FiniteSet(0, 1)
A:sympy.sets.tests.test_sets.s2->FiniteSet(1, 2)
A:sympy.sets.tests.test_sets.fset->FiniteSet(*items)
A:sympy.sets.tests.test_sets.i1->Interval(0, 1)
A:sympy.sets.tests.test_sets.i2->Interval(x, y)
A:sympy.sets.tests.test_sets.i3->Union(i1, i2)
A:sympy.sets.tests.test_sets.expr->SymmetricDifference(Interval(0, 1), FiniteSet(2), evaluate=False)
A:sympy.sets.tests.test_sets.AorB->Union(A, B)
A:sympy.sets.tests.test_sets.AandB->FiniteSet(1, 2).intersect(B)
A:sympy.sets.tests.test_sets.unit_line->Interval(0, 1)
A:sympy.sets.tests.test_sets.d6->FiniteSet(1, 2, 3, 4, 5, 6)
A:sympy.sets.tests.test_sets.d4->FiniteSet(1, 2, 3, 4)
A:sympy.sets.tests.test_sets.coin->FiniteSet(H, T)
A:sympy.sets.tests.test_sets.I->Interval(0, 5)
A:sympy.sets.tests.test_sets.J->Interval(10, 20)
A:sympy.sets.tests.test_sets.points->FiniteSet(0, 1, 2)
A:sympy.sets.tests.test_sets.f->ImageSet(Lambda(n, n ** 2), Interval(1, 4))
A:sympy.sets.tests.test_sets.f1->Piecewise((0, x <= 1), (1, x <= 2), (2, True))
A:sympy.sets.tests.test_sets.mat->Matrix([0, 0, 0])
A:sympy.sets.tests.test_sets.interval->Interval(0, 5)
A:sympy.sets.tests.test_sets.nr->Symbol('nr', extended_real=False)
A:sympy.sets.tests.test_sets.inf_interval->Interval(a, oo)
A:sympy.sets.tests.test_sets.reals_plus_infinity->Union(Interval(-oo, oo), FiniteSet(oo))
A:sympy.sets.tests.test_sets.reals_plus_negativeinfinity->Union(Interval(-oo, oo), FiniteSet(-oo))
A:sympy.sets.tests.test_sets.soln->Intersection(S.Reals, FiniteSet(x), evaluate=False)
A:sympy.sets.tests.test_sets.it->iter(D)
A:sympy.sets.tests.test_sets.nxt->next(it)
A:sympy.sets.tests.test_sets.mk->MatrixKind(NumberKind)
A:sympy.sets.tests.test_sets.k->SetKind(TupleKind(mk, mk))
A:sympy.sets.tests.test_sets.d->FiniteSet(1)
A:sympy.sets.tests.test_sets.S->FiniteSet(1, cos(1) ** 2 + sin(1) ** 2)
sympy.sets.tests.test_sets.test_Complement()
sympy.sets.tests.test_sets.test_Complement_as_relational()
sympy.sets.tests.test_sets.test_Complement_as_relational_fail()
sympy.sets.tests.test_sets.test_DisjointUnion()
sympy.sets.tests.test_sets.test_DisjointUnion_contains()
sympy.sets.tests.test_sets.test_DisjointUnion_is_empty()
sympy.sets.tests.test_sets.test_DisjointUnion_is_iterable()
sympy.sets.tests.test_sets.test_DisjointUnion_iter()
sympy.sets.tests.test_sets.test_DisjointUnion_len()
sympy.sets.tests.test_sets.test_EmptySet()
sympy.sets.tests.test_sets.test_Eq()
sympy.sets.tests.test_sets.test_Finite_as_relational()
sympy.sets.tests.test_sets.test_Intersection_as_relational()
sympy.sets.tests.test_sets.test_Interval_as_relational()
sympy.sets.tests.test_sets.test_Interval_free_symbols()
sympy.sets.tests.test_sets.test_Interval_is_left_unbounded()
sympy.sets.tests.test_sets.test_Interval_is_right_unbounded()
sympy.sets.tests.test_sets.test_ProductSet()
sympy.sets.tests.test_sets.test_ProductSet__len__()
sympy.sets.tests.test_sets.test_ProductSet_is_empty()
sympy.sets.tests.test_sets.test_ProductSet_of_single_arg_is_not_arg()
sympy.sets.tests.test_sets.test_SetKind_DisjointUnion()
sympy.sets.tests.test_sets.test_SetKind_EmptySet_UniversalSet()
sympy.sets.tests.test_sets.test_SetKind_FiniteSet()
sympy.sets.tests.test_sets.test_SetKind_ImageSet_Special()
sympy.sets.tests.test_sets.test_SetKind_Interval()
sympy.sets.tests.test_sets.test_SetKind_ProductSet()
sympy.sets.tests.test_sets.test_SetKind_Unions()
sympy.sets.tests.test_sets.test_SetKind_evaluate_False()
sympy.sets.tests.test_sets.test_SymmetricDifference()
sympy.sets.tests.test_sets.test_SymmetricDifference_as_relational()
sympy.sets.tests.test_sets.test_Union_as_relational()
sympy.sets.tests.test_sets.test_Union_contains()
sympy.sets.tests.test_sets.test_Union_of_ProductSets_shares()
sympy.sets.tests.test_sets.test_boundary()
sympy.sets.tests.test_sets.test_boundary_ProductSet()
sympy.sets.tests.test_sets.test_boundary_ProductSet_line()
sympy.sets.tests.test_sets.test_boundary_Union()
sympy.sets.tests.test_sets.test_closure()
sympy.sets.tests.test_sets.test_complement()
sympy.sets.tests.test_sets.test_contains()
sympy.sets.tests.test_sets.test_deprecated_is_EmptySet()
sympy.sets.tests.test_sets.test_difference()
sympy.sets.tests.test_sets.test_finite_basic()
sympy.sets.tests.test_sets.test_finite_set_intersection()
sympy.sets.tests.test_sets.test_finiteset_simplify()
sympy.sets.tests.test_sets.test_image_EmptySet()
sympy.sets.tests.test_sets.test_image_FiniteSet()
sympy.sets.tests.test_sets.test_image_Intersection()
sympy.sets.tests.test_sets.test_image_Union()
sympy.sets.tests.test_sets.test_image_interval()
sympy.sets.tests.test_sets.test_image_piecewise()
sympy.sets.tests.test_sets.test_imageset()
sympy.sets.tests.test_sets.test_interior()
sympy.sets.tests.test_sets.test_intersect1()
sympy.sets.tests.test_sets.test_intersection()
sympy.sets.tests.test_sets.test_intersection_symbolic()
sympy.sets.tests.test_sets.test_intersection_symbolic_failing()
sympy.sets.tests.test_sets.test_interval_arguments()
sympy.sets.tests.test_sets.test_interval_is_empty()
sympy.sets.tests.test_sets.test_interval_subs()
sympy.sets.tests.test_sets.test_interval_symbolic()
sympy.sets.tests.test_sets.test_interval_symbolic_end_points()
sympy.sets.tests.test_sets.test_interval_to_mpi()
sympy.sets.tests.test_sets.test_is_closed()
sympy.sets.tests.test_sets.test_is_disjoint()
sympy.sets.tests.test_sets.test_is_empty()
sympy.sets.tests.test_sets.test_is_finiteset()
sympy.sets.tests.test_sets.test_is_number()
sympy.sets.tests.test_sets.test_is_open()
sympy.sets.tests.test_sets.test_is_proper_subset()
sympy.sets.tests.test_sets.test_is_proper_superset()
sympy.sets.tests.test_sets.test_is_subset()
sympy.sets.tests.test_sets.test_is_superset()
sympy.sets.tests.test_sets.test_issue_10113()
sympy.sets.tests.test_sets.test_issue_10248()
sympy.sets.tests.test_sets.test_issue_10326()
sympy.sets.tests.test_sets.test_issue_10337()
sympy.sets.tests.test_sets.test_issue_10931()
sympy.sets.tests.test_sets.test_issue_11174()
sympy.sets.tests.test_sets.test_issue_11827()
sympy.sets.tests.test_sets.test_issue_16878b()
sympy.sets.tests.test_sets.test_issue_18505()
sympy.sets.tests.test_sets.test_issue_19378()
sympy.sets.tests.test_sets.test_issue_20089()
sympy.sets.tests.test_sets.test_issue_20379()
sympy.sets.tests.test_sets.test_issue_2799()
sympy.sets.tests.test_sets.test_issue_5724_7680()
sympy.sets.tests.test_sets.test_issue_7841()
sympy.sets.tests.test_sets.test_issue_8257()
sympy.sets.tests.test_sets.test_issue_9447()
sympy.sets.tests.test_sets.test_issue_9536()
sympy.sets.tests.test_sets.test_issue_9623()
sympy.sets.tests.test_sets.test_issue_9637()
sympy.sets.tests.test_sets.test_issue_9706()
sympy.sets.tests.test_sets.test_issue_9808()
sympy.sets.tests.test_sets.test_issue_9956()
sympy.sets.tests.test_sets.test_issue_Symbol_inter()
sympy.sets.tests.test_sets.test_measure()
sympy.sets.tests.test_sets.test_product_basic()
sympy.sets.tests.test_sets.test_real()
sympy.sets.tests.test_sets.test_set_evalf()
sympy.sets.tests.test_sets.test_set_operations_nonsets()
sympy.sets.tests.test_sets.test_supinf()
sympy.sets.tests.test_sets.test_union()
sympy.sets.tests.test_sets.test_union_boundary_of_joining_sets()
sympy.sets.tests.test_sets.test_union_contains()
sympy.sets.tests.test_sets.test_union_intersection_constructor()
sympy.sets.tests.test_sets.test_union_is_empty()
sympy.sets.tests.test_sets.test_union_iter()
sympy.sets.tests.test_sets.test_universalset()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/tests/test_ordinals.py----------------------------------------
A:sympy.sets.tests.test_ordinals.w->Ordinal(OmegaPower(5, 1))
sympy.sets.tests.test_ordinals.test_addition_with_integers()
sympy.sets.tests.test_ordinals.test_addition_with_ordinals()
sympy.sets.tests.test_ordinals.test_comapre_not_instance()
sympy.sets.tests.test_ordinals.test_comparison()
sympy.sets.tests.test_ordinals.test_exponentiation()
sympy.sets.tests.test_ordinals.test_is_successort()
sympy.sets.tests.test_ordinals.test_multiplication()
sympy.sets.tests.test_ordinals.test_multiplication_with_integers()
sympy.sets.tests.test_ordinals.test_string_ordinals()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/tests/test_setexpr.py----------------------------------------
A:sympy.sets.tests.test_setexpr.(a, x)->symbols('a, x')
A:sympy.sets.tests.test_setexpr._d->Dummy('d')
A:sympy.sets.tests.test_setexpr.se->SetExpr(inter)
A:sympy.sets.tests.test_setexpr.input_se->f(SetExpr(Interval(a, b)))
A:sympy.sets.tests.test_setexpr.expected->Interval(Min(f(a), f(b)), Max(f(a), f(b)))
A:sympy.sets.tests.test_setexpr.a->SetExpr(FiniteSet(0, 1))
A:sympy.sets.tests.test_setexpr.b->SetExpr(FiniteSet(0, 1))
A:sympy.sets.tests.test_setexpr.i12cc->SetExpr(Interval(1, 2))
A:sympy.sets.tests.test_setexpr.i12lo->SetExpr(Interval.Lopen(1, 2))
A:sympy.sets.tests.test_setexpr.i12ro->SetExpr(Interval.Ropen(1, 2))
A:sympy.sets.tests.test_setexpr.i12o->SetExpr(Interval.open(1, 2))
A:sympy.sets.tests.test_setexpr.n23cc->SetExpr(Interval(-2, 3))
A:sympy.sets.tests.test_setexpr.n23lo->SetExpr(Interval.Lopen(-2, 3))
A:sympy.sets.tests.test_setexpr.n23ro->SetExpr(Interval.Ropen(-2, 3))
A:sympy.sets.tests.test_setexpr.n23o->SetExpr(Interval.open(-2, 3))
A:sympy.sets.tests.test_setexpr.n3n2cc->SetExpr(Interval(-3, -2))
A:sympy.sets.tests.test_setexpr.n32cc->SetExpr(Interval(-3, 2))
A:sympy.sets.tests.test_setexpr.n32lo->SetExpr(Interval.Lopen(-3, 2))
A:sympy.sets.tests.test_setexpr.n32ro->SetExpr(Interval.Ropen(-3, 2))
A:sympy.sets.tests.test_setexpr.(x, y, z, w)->symbols('x y z w')
A:sympy.sets.tests.test_setexpr.set1->Interval(x, y)
A:sympy.sets.tests.test_setexpr.set2->Interval(w, z)
A:sympy.sets.tests.test_setexpr.inter->Intersection(set1, set2)
sympy.sets.tests.test_setexpr.test_Add_Mul()
sympy.sets.tests.test_setexpr.test_FiniteSet_FiniteSet()
sympy.sets.tests.test_setexpr.test_Interval_FiniteSet()
sympy.sets.tests.test_setexpr.test_Interval_Interval()
sympy.sets.tests.test_setexpr.test_Interval_arithmetic()
sympy.sets.tests.test_setexpr.test_Many_Sets()
sympy.sets.tests.test_setexpr.test_Pow()
sympy.sets.tests.test_setexpr.test_SetExpr_Integers()
sympy.sets.tests.test_setexpr.test_SetExpr_Intersection()
sympy.sets.tests.test_setexpr.test_SetExpr_Interval_div()
sympy.sets.tests.test_setexpr.test_SetExpr_Interval_pow()
sympy.sets.tests.test_setexpr.test_compound()
sympy.sets.tests.test_setexpr.test_same_setexprs_are_not_identical()
sympy.sets.tests.test_setexpr.test_scalar_funcs()
sympy.sets.tests.test_setexpr.test_setexpr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/tests/test_contains.py----------------------------------------
A:sympy.sets.tests.test_contains.i->Symbol('i', integer=True)
A:sympy.sets.tests.test_contains.x->Symbol('x')
A:sympy.sets.tests.test_contains.y->Symbol('y')
A:sympy.sets.tests.test_contains.z->Symbol('z')
sympy.sets.tests.test_contains.test_as_set()
sympy.sets.tests.test_contains.test_binary_symbols()
sympy.sets.tests.test_contains.test_contains_basic()
sympy.sets.tests.test_contains.test_issue_10326()
sympy.sets.tests.test_contains.test_issue_6194()
sympy.sets.tests.test_contains.test_type_error()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/tests/test_fancysets.py----------------------------------------
A:sympy.sets.tests.test_fancysets.ni->symbols('ni', integer=False)
A:sympy.sets.tests.test_fancysets.zi->iter(Z)
A:sympy.sets.tests.test_fancysets.empty->Range(0)
A:sympy.sets.tests.test_fancysets.squares->ImageSet(Lambda(x, x ** 2), S.Naturals)
A:sympy.sets.tests.test_fancysets.si->iter(squares)
A:sympy.sets.tests.test_fancysets.harmonics->ImageSet(Lambda(x, 1 / x), S.Naturals)
A:sympy.sets.tests.test_fancysets.c3->ComplexRegion(Interval(0, oo) * Interval(0, S.Pi), polar=True)
A:sympy.sets.tests.test_fancysets.S1->imageset(lambda x, y: x + y, S.Integers, S.Naturals)
A:sympy.sets.tests.test_fancysets.S2->ImageSet(Lambda(((x, y),), x + y), {(1, 2), (3, 4)})
A:sympy.sets.tests.test_fancysets.(r, th)->symbols('r, theta', real=True)
A:sympy.sets.tests.test_fancysets.L->imageset(x, 2 * x + y, S.Integers)
A:sympy.sets.tests.test_fancysets.halfcircle->ImageSet(L, Interval(0, 1) * Interval(0, pi))
A:sympy.sets.tests.test_fancysets.evens->ImageSet(L, S.Naturals)
A:sympy.sets.tests.test_fancysets.i->Dummy(integer=True)
A:sympy.sets.tests.test_fancysets.r->Range(oo, -oo, -1)
A:sympy.sets.tests.test_fancysets.ip->Symbol('i', integer=True, positive=True)
A:sympy.sets.tests.test_fancysets.u->symbols('u', integer=None)
A:sympy.sets.tests.test_fancysets.inf->symbols('inf', infinite=True)
A:sympy.sets.tests.test_fancysets.it->iter(S.Rationals)
A:sympy.sets.tests.test_fancysets.result->list(R[a:b:c])
A:sympy.sets.tests.test_fancysets.xr->Range(x, x + 4, 5)
A:sympy.sets.tests.test_fancysets.sr->Range(x, y, t)
A:sympy.sets.tests.test_fancysets.ipr->Range(ip)
A:sympy.sets.tests.test_fancysets.inr->Range(0, -ip, -1)
A:sympy.sets.tests.test_fancysets.ir->Range(i, i + 19, 2)
A:sympy.sets.tests.test_fancysets.ir2->Range(i, i * 8, 3 * i)
A:sympy.sets.tests.test_fancysets.e->Symbol('e', integer=True, even=True)
A:sympy.sets.tests.test_fancysets.o->Symbol('o', integer=True, odd=True)
A:sympy.sets.tests.test_fancysets.p->Symbol('p', positive=True, integer=True)
A:sympy.sets.tests.test_fancysets.n->Dummy()
A:sympy.sets.tests.test_fancysets.m->Symbol('m', integer=True, positive=True, even=True)
A:sympy.sets.tests.test_fancysets.x->Symbol('x')
A:sympy.sets.tests.test_fancysets.ans->ImageSet(Lambda(x, 2 * x + Rational(3, 7)), S.Integers)
A:sympy.sets.tests.test_fancysets.im->imageset(Lambda(x, -2 * x - Rational(11, 7)), S.Integers)
A:sympy.sets.tests.test_fancysets.y->Symbol('y')
A:sympy.sets.tests.test_fancysets._x->symbols('x', negative=True)
A:sympy.sets.tests.test_fancysets.(a, b, c)->symbols('a b c')
A:sympy.sets.tests.test_fancysets.imset->imageset(x, eq, r)
A:sympy.sets.tests.test_fancysets.S53->ImageSet(Lambda(n, 5 * n + 3), S.Integers)
A:sympy.sets.tests.test_fancysets.a->Interval(2, 3)
A:sympy.sets.tests.test_fancysets.s->ImageSet(Lambda(n, -I * (I * (2 * pi * n - pi / 4) + log(Abs(sqrt(-I))))), S.Integers)
A:sympy.sets.tests.test_fancysets.f1->ImageSet(Lambda(n, n * pi), S.Integers)
A:sympy.sets.tests.test_fancysets.f2->ImageSet(Lambda(n, 2 * n), Interval(0, pi))
A:sympy.sets.tests.test_fancysets.f3->ImageSet(Lambda(n, 2 * n * pi + pi / 2), S.Integers)
A:sympy.sets.tests.test_fancysets.f4->ImageSet(Lambda(n, n * I * pi), S.Integers)
A:sympy.sets.tests.test_fancysets.f5->ImageSet(Lambda(n, 2 * I * n * pi + pi / 2), S.Integers)
A:sympy.sets.tests.test_fancysets.f6->ImageSet(Lambda(n, log(n)), S.Integers)
A:sympy.sets.tests.test_fancysets.f7->ImageSet(Lambda(n, n ** 2), S.Integers)
A:sympy.sets.tests.test_fancysets.f8->ImageSet(Lambda(n, Abs(n)), S.Integers)
A:sympy.sets.tests.test_fancysets.f9->ImageSet(Lambda(n, exp(n)), S.Naturals0)
A:sympy.sets.tests.test_fancysets.img1->ImageSet(Lambda(n, 2 * n + 1), S.Integers)
A:sympy.sets.tests.test_fancysets.img2->ImageSet(Lambda(n, 4 * n + 1), S.Integers)
A:sympy.sets.tests.test_fancysets.q->imageset(x, x + I * z, S.Integers).intersection(S.Reals)
A:sympy.sets.tests.test_fancysets.b->Interval(4, 6)
A:sympy.sets.tests.test_fancysets.c->Interval(7, 9)
A:sympy.sets.tests.test_fancysets.c1->ComplexRegion(Interval(1, 2) * Interval(2, 3))
A:sympy.sets.tests.test_fancysets.c2->ComplexRegion(Interval(1, 5) * Interval(1, 3))
A:sympy.sets.tests.test_fancysets.r1->Interval(0, 1)
A:sympy.sets.tests.test_fancysets.theta1->Interval(0, 2 * S.Pi)
A:sympy.sets.tests.test_fancysets.r2->Interval(0, 3)
A:sympy.sets.tests.test_fancysets.theta2->Interval(pi, 2 * pi, left_open=True)
A:sympy.sets.tests.test_fancysets.c4->ComplexRegion(Interval(0, oo) * Interval(S.Pi, 2 * S.Pi), polar=True)
A:sympy.sets.tests.test_fancysets.X_axis->ComplexRegion(Interval(-oo, oo) * FiniteSet(0))
A:sympy.sets.tests.test_fancysets.unit_disk->ComplexRegion(Interval(0, 1) * Interval(0, 2 * S.Pi), polar=True)
A:sympy.sets.tests.test_fancysets.upper_half_unit_disk->ComplexRegion(Interval(0, 1) * Interval(0, S.Pi), polar=True)
A:sympy.sets.tests.test_fancysets.upper_half_disk->ComplexRegion(Interval(0, oo) * Interval(0, S.Pi), polar=True)
A:sympy.sets.tests.test_fancysets.lower_half_disk->ComplexRegion(Interval(0, oo) * Interval(S.Pi, 2 * S.Pi), polar=True)
A:sympy.sets.tests.test_fancysets.right_half_disk->ComplexRegion(Interval(0, oo) * Interval(-S.Pi / 2, S.Pi / 2), polar=True)
A:sympy.sets.tests.test_fancysets.first_quad_disk->ComplexRegion(Interval(0, oo) * Interval(0, S.Pi / 2), polar=True)
A:sympy.sets.tests.test_fancysets.unit_square->ComplexRegion(Interval(-1, 1) * Interval(-1, 1))
A:sympy.sets.tests.test_fancysets.upper_half_unit_square->ComplexRegion(Interval(-1, 1) * Interval(0, 1))
A:sympy.sets.tests.test_fancysets.upper_half_plane->ComplexRegion(Interval(-oo, oo) * Interval(0, oo))
A:sympy.sets.tests.test_fancysets.lower_half_plane->ComplexRegion(Interval(-oo, oo) * Interval(-oo, 0))
A:sympy.sets.tests.test_fancysets.right_half_plane->ComplexRegion(Interval(0, oo) * Interval(-oo, oo))
A:sympy.sets.tests.test_fancysets.first_quad_plane->ComplexRegion(Interval(0, oo) * Interval(0, oo))
A:sympy.sets.tests.test_fancysets.C1->ComplexRegion(Interval(0, 1) * Interval(0, 2 * S.Pi), polar=True)
A:sympy.sets.tests.test_fancysets.C2->ComplexRegion(Interval(-1, 1) * Interval(-1, 1))
A:sympy.sets.tests.test_fancysets.p1->Union(Interval(0, 1) * Interval(0, 2 * S.Pi), Interval(0, 1) * Interval(0, S.Pi))
A:sympy.sets.tests.test_fancysets.p2->Union(Interval(0, oo) * Interval(0, S.Pi), Interval(0, oo) * Interval(S.Pi, 2 * S.Pi))
A:sympy.sets.tests.test_fancysets.c5->ComplexRegion(Interval(2, 5) * Interval(6, 9))
A:sympy.sets.tests.test_fancysets.c6->ComplexRegion(Interval(4, 6) * Interval(10, 12))
A:sympy.sets.tests.test_fancysets.c7->ComplexRegion(Interval(0, 10) * Interval(-10, 0))
A:sympy.sets.tests.test_fancysets.c8->ComplexRegion(Interval(12, 16) * Interval(14, 20))
A:sympy.sets.tests.test_fancysets.p3->Union(Interval(2, 5) * Interval(6, 9), Interval(4, 6) * Interval(10, 12))
A:sympy.sets.tests.test_fancysets.p4->Union(Interval(0, 10) * Interval(-10, 0), Interval(12, 16) * Interval(14, 20))
A:sympy.sets.tests.test_fancysets.(x, y, z, a, b, c)->symbols('x y z a b c')
A:sympy.sets.tests.test_fancysets.R->Union(c1, c2)
A:sympy.sets.tests.test_fancysets.interval12->Interval(1, 2)
A:sympy.sets.tests.test_fancysets.finiteset1234->FiniteSet(1, 2, 3, 4)
A:sympy.sets.tests.test_fancysets.pointComplex->Tuple(1, 5)
A:sympy.sets.tests.test_fancysets.unit->Interval(0, 1)
A:sympy.sets.tests.test_fancysets.square->ComplexRegion(unit ** 2)
A:sympy.sets.tests.test_fancysets.ival->Interval(1, 2)
A:sympy.sets.tests.test_fancysets.cr1->ComplexRegion(ival * unit)
A:sympy.sets.tests.test_fancysets.arg1->Interval(0, S.Pi)
A:sympy.sets.tests.test_fancysets.arg2->FiniteSet(S.Pi)
A:sympy.sets.tests.test_fancysets.arg3->Interval(S.Pi / 4, 3 * S.Pi / 4)
A:sympy.sets.tests.test_fancysets.cp1->ComplexRegion(a * b, polar=True)
A:sympy.sets.tests.test_fancysets.cp2->ComplexRegion(c * d, polar=True)
A:sympy.sets.tests.test_fancysets.cp3->ComplexRegion(unit * arg3, polar=True)
sympy.sets.tests.test_fancysets.take(n,iterable)
sympy.sets.tests.test_fancysets.test_Complex()
sympy.sets.tests.test_fancysets.test_ComplexRegion_FiniteSet()
sympy.sets.tests.test_fancysets.test_ComplexRegion_contains()
sympy.sets.tests.test_fancysets.test_ComplexRegion_from_real()
sympy.sets.tests.test_fancysets.test_ComplexRegion_intersect()
sympy.sets.tests.test_fancysets.test_ComplexRegion_measure()
sympy.sets.tests.test_fancysets.test_ComplexRegion_union()
sympy.sets.tests.test_fancysets.test_ImageSet()
sympy.sets.tests.test_fancysets.test_ImageSet_contains()
sympy.sets.tests.test_fancysets.test_ImageSet_iterator_not_injective()
sympy.sets.tests.test_fancysets.test_ImageSet_simplification()
sympy.sets.tests.test_fancysets.test_Integers_eval_imageset()
sympy.sets.tests.test_fancysets.test_NZQRC_unions()
sympy.sets.tests.test_fancysets.test_Range_eval_imageset()
sympy.sets.tests.test_fancysets.test_Range_is_empty()
sympy.sets.tests.test_fancysets.test_Range_is_iterable()
sympy.sets.tests.test_fancysets.test_Range_set()
sympy.sets.tests.test_fancysets.test_Range_symbolic()
sympy.sets.tests.test_fancysets.test_Rationals()
sympy.sets.tests.test_fancysets.test_Reals()
sympy.sets.tests.test_fancysets.test_SetKind_fancySet()
sympy.sets.tests.test_fancysets.test_fun()
sympy.sets.tests.test_fancysets.test_halfcircle()
sympy.sets.tests.test_fancysets.test_image_is_ImageSet()
sympy.sets.tests.test_fancysets.test_imageset_intersect_diophantine()
sympy.sets.tests.test_fancysets.test_imageset_intersect_interval()
sympy.sets.tests.test_fancysets.test_imageset_intersect_real()
sympy.sets.tests.test_fancysets.test_imageset_intersection()
sympy.sets.tests.test_fancysets.test_inf_Range_len()
sympy.sets.tests.test_fancysets.test_infinitely_indexed_set_1()
sympy.sets.tests.test_fancysets.test_infinitely_indexed_set_2()
sympy.sets.tests.test_fancysets.test_infinitely_indexed_set_3()
sympy.sets.tests.test_fancysets.test_integers()
sympy.sets.tests.test_fancysets.test_intersections()
sympy.sets.tests.test_fancysets.test_issue_11730()
sympy.sets.tests.test_fancysets.test_issue_11732()
sympy.sets.tests.test_fancysets.test_issue_11914()
sympy.sets.tests.test_fancysets.test_issue_11938()
sympy.sets.tests.test_fancysets.test_issue_16871()
sympy.sets.tests.test_fancysets.test_issue_16871b()
sympy.sets.tests.test_fancysets.test_issue_17858()
sympy.sets.tests.test_fancysets.test_issue_17859()
sympy.sets.tests.test_fancysets.test_issue_18050()
sympy.sets.tests.test_fancysets.test_issue_18400()
sympy.sets.tests.test_fancysets.test_issue_9543()
sympy.sets.tests.test_fancysets.test_issue_9980()
sympy.sets.tests.test_fancysets.test_naturals()
sympy.sets.tests.test_fancysets.test_naturals0()
sympy.sets.tests.test_fancysets.test_normalize_theta_set()
sympy.sets.tests.test_fancysets.test_range_interval_intersection()
sympy.sets.tests.test_fancysets.test_range_is_finite_set()
sympy.sets.tests.test_fancysets.test_range_range_intersection()
sympy.sets.tests.test_fancysets.test_symbolic_Range()
sympy.sets.tests.test_fancysets.test_union_RealSubSet()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/tests/test_conditionset.py----------------------------------------
A:sympy.sets.tests.test_conditionset.w->Symbol('w')
A:sympy.sets.tests.test_conditionset.x->Symbol('x')
A:sympy.sets.tests.test_conditionset.y->Symbol('y')
A:sympy.sets.tests.test_conditionset.z->Symbol('z')
A:sympy.sets.tests.test_conditionset.f->Function('f')
A:sympy.sets.tests.test_conditionset.sin_sols_principal->ConditionSet(x, Eq(sin(x), 0), Interval(0, 2 * pi, False, True))
A:sympy.sets.tests.test_conditionset.X->MatrixSymbol('X', 2, 2)
A:sympy.sets.tests.test_conditionset.matrix_set->ConditionSet(X, Eq(X * Matrix([[1, 1], [1, 1]]), X))
A:sympy.sets.tests.test_conditionset.Y->Matrix([[0, 0], [0, 0]])
A:sympy.sets.tests.test_conditionset.Z->Matrix([[1, 2], [3, 4]])
A:sympy.sets.tests.test_conditionset.c->ConditionSet((w, (x, y)), w + x + y > 1, S.Integers * S.Integers ** 2)
A:sympy.sets.tests.test_conditionset.input_conditionset->ConditionSet(x, x ** 2 > 4, Interval(1, 4, False, False))
A:sympy.sets.tests.test_conditionset.other_domain->Interval(0, 3, False, False)
A:sympy.sets.tests.test_conditionset.output_conditionset->ConditionSet(x, x ** 2 > 4, Interval(1, 3, False, False))
A:sympy.sets.tests.test_conditionset.(_0, _1)->symbols('_0 _1')
A:sympy.sets.tests.test_conditionset.e->ConditionSet((x, y), x <= y, S.Reals ** 2)
A:sympy.sets.tests.test_conditionset.s->FiniteSet(z, y)
A:sympy.sets.tests.test_conditionset.n->Symbol('n')
A:sympy.sets.tests.test_conditionset.p->Symbol('p', positive=True)
A:sympy.sets.tests.test_conditionset.k->Symbol('k')
A:sympy.sets.tests.test_conditionset.img1->ImageSet(Lambda(k, 2 * k * pi + asin(y)), S.Integers)
A:sympy.sets.tests.test_conditionset.img2->ImageSet(Lambda(k, 2 * k * pi + asin(S.One / 3)), S.Integers)
A:sympy.sets.tests.test_conditionset.c1->ConditionSet(x, Ne(a, 0), d1)
A:sympy.sets.tests.test_conditionset.c2->ConditionSet(x, Ne(a, 0), d2)
A:sympy.sets.tests.test_conditionset.c3->ConditionSet((x, y), Eq(x + 1, 0) & Eq(x + y, 0), S.Complexes ** 2)
A:sympy.sets.tests.test_conditionset.m->Symbol('m')
A:sympy.sets.tests.test_conditionset.a->Symbol('a')
A:sympy.sets.tests.test_conditionset.d1->ImageSet(Lambda(m, m * pi), S.Integers)
A:sympy.sets.tests.test_conditionset.d2->ImageSet(Lambda(n, n * pi), S.Integers)
A:sympy.sets.tests.test_conditionset.inner->ConditionSet(x, sin(x) + x > 0).intersect(Interval(-1, 1))
A:sympy.sets.tests.test_conditionset.outer->ConditionSet(x, Contains(x, inner), S.Reals)
A:sympy.sets.tests.test_conditionset.dup->symbols('a,a')
sympy.sets.tests.test_conditionset.test_CondSet()
sympy.sets.tests.test_conditionset.test_CondSet_intersect()
sympy.sets.tests.test_conditionset.test_SetKind_ConditionSet()
sympy.sets.tests.test_conditionset.test_as_dummy()
sympy.sets.tests.test_conditionset.test_as_relational()
sympy.sets.tests.test_conditionset.test_bound_symbols()
sympy.sets.tests.test_conditionset.test_contains()
sympy.sets.tests.test_conditionset.test_dummy_eq()
sympy.sets.tests.test_conditionset.test_duplicate()
sympy.sets.tests.test_conditionset.test_flatten()
sympy.sets.tests.test_conditionset.test_free_symbols()
sympy.sets.tests.test_conditionset.test_issue_9849()
sympy.sets.tests.test_conditionset.test_simplified_FiniteSet_in_CondSet()
sympy.sets.tests.test_conditionset.test_subs_CondSet()
sympy.sets.tests.test_conditionset.test_subs_CondSet_tebr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/power.py----------------------------------------
A:sympy.sets.handlers.power.(_x, _y)->symbols('x y')
A:sympy.sets.handlers.power._set_pow->Dispatcher('_set_pow')
sympy.sets.handlers.power._(b,e)
sympy.sets.handlers.power._(b,e)
sympy.sets.handlers.power._(x,exponent)
sympy.sets.handlers.power._(x,y)
sympy.sets.handlers.power._(x,y)
sympy.sets.handlers.power._(x,y)
sympy.sets.handlers.power._(x,z)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/functions.py----------------------------------------
A:sympy.sets.handlers.functions.(_x, _y)->symbols('x y')
A:sympy.sets.handlers.functions._set_function->Dispatcher('_set_function')
A:sympy.sets.handlers.functions.intrvl->Intersection(domain_set, intrvl)
A:sympy.sets.handlers.functions.image->imageset(Lambda(var, p_expr), intrvl)
A:sympy.sets.handlers.functions.result->Union(result, image)
A:sympy.sets.handlers.functions.domain_set->Complement(domain_set, intrvl)
A:sympy.sets.handlers.functions.sing->_nsort(sing)
A:sympy.sets.handlers.functions._start->f(x.start)
A:sympy.sets.handlers.functions._end->f(x.end)
A:sympy.sets.handlers.functions.soln_expr->solveset(diff(expr, var), var)
A:sympy.sets.handlers.functions.solns->list(soln_expr)
A:sympy.sets.handlers.functions.F->expand_mul(F)
A:sympy.sets.handlers.functions.c->expr.subs(x, 0)
A:sympy.sets.handlers.functions.a->Wild('a', exclude=[n])
A:sympy.sets.handlers.functions.b->Add(*nonint)
A:sympy.sets.handlers.functions.match->expr.match(a * n + b)
A:sympy.sets.handlers.functions.(br, bi)->match_real_imag(b)
A:sympy.sets.handlers.functions.step->expr.coeff(x)
sympy.sets.handlers.functions._(f,self)
sympy.sets.handlers.functions._(f,self)
sympy.sets.handlers.functions._(f,self)
sympy.sets.handlers.functions._(f,self)
sympy.sets.handlers.functions._(f,x)
sympy.sets.handlers.functions._(f,x)
sympy.sets.handlers.functions._(f,x)
sympy.sets.handlers.functions._(f,x)
sympy.sets.handlers.functions._(f,x)
sympy.sets.handlers.functions._(f,x)
sympy.sets.handlers.functions._(f,x)
sympy.sets.handlers.functions._(f,x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/issubset.py----------------------------------------
A:sympy.sets.handlers.issubset.is_subset_sets->Dispatcher('is_subset_sets')
A:sympy.sets.handlers.issubset.a_set->set(a_range)
A:sympy.sets.handlers.issubset.b_remaining->len(b_finiteset)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a,b)
sympy.sets.handlers.issubset._(a_interval,b_fs)
sympy.sets.handlers.issubset._(a_interval,b_range)
sympy.sets.handlers.issubset._(a_interval,b_rationals)
sympy.sets.handlers.issubset._(a_interval,b_u)
sympy.sets.handlers.issubset._(a_ps,b_fs)
sympy.sets.handlers.issubset._(a_range,b_finiteset)
sympy.sets.handlers.issubset._(a_range,b_interval)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/add.py----------------------------------------
A:sympy.sets.handlers.add._set_add->Dispatcher('_set_add')
A:sympy.sets.handlers.add._set_sub->Dispatcher('_set_sub')
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)
sympy.sets.handlers.add._(x,y)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/comparison.py----------------------------------------
A:sympy.sets.handlers.comparison.s_set->set(lhs.args)
A:sympy.sets.handlers.comparison.o_set->set(rhs.args)
sympy.sets._eval_is_eq(lhs,rhs)
sympy.sets._eval_is_eq(lhs,rhs)
sympy.sets._eval_is_eq(lhs,rhs)
sympy.sets._eval_is_eq(lhs,rhs)
sympy.sets._eval_is_eq(lhs,rhs)
sympy.sets._eval_is_eq(lhs,rhs)
sympy.sets._eval_is_eq(lhs,rhs)
sympy.sets.handlers.comparison._eval_is_eq(lhs,rhs)
sympy.sets.handlers.comparison._eval_is_eq(lhs,rhs)
sympy.sets.handlers.comparison._eval_is_eq(lhs,rhs)
sympy.sets.handlers.comparison._eval_is_eq(lhs,rhs)
sympy.sets.handlers.comparison._eval_is_eq(lhs,rhs)
sympy.sets.handlers.comparison._eval_is_eq(lhs,rhs)
sympy.sets.handlers.comparison._eval_is_eq(lhs,rhs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/intersection.py----------------------------------------
A:sympy.sets.handlers.intersection.intersection_sets->Dispatcher('intersection_sets')
A:sympy.sets.handlers.intersection.new_r_interval->Intersection(r1, r2)
A:sympy.sets.handlers.intersection.new_theta_interval->Union(new_theta_interval, FiniteSet(0))
A:sympy.sets.handlers.intersection.x->symbols('x', cls=Dummy, real=True)
A:sympy.sets.handlers.intersection.new_interval->Interval(new_inf, new_sup, new_lopen, new_ropen)
A:sympy.sets.handlers.intersection.start->max(r1.start, r2.start)
A:sympy.sets.handlers.intersection.end->floor(min(b.sup, a.sup))
A:sympy.sets.handlers.intersection.(va, vb)->diop_linear(eq(r1, Dummy('a')) - eq(r2, Dummy('b')))
A:sympy.sets.handlers.intersection.c->eq(r1, a0)
A:sympy.sets.handlers.intersection.step->abs(ilcm(r1.step, r2.step))
A:sympy.sets.handlers.intersection.s1->_first_finite_point(r1, c)
A:sympy.sets.handlers.intersection.s2->_first_finite_point(r2, c)
A:sympy.sets.handlers.intersection.rv->Range(r.start, first + st, st)
A:sympy.sets.handlers.intersection.r1->_updated_range(a, s1)
A:sympy.sets.handlers.intersection.r2->_updated_range(b, s2)
A:sympy.sets.handlers.intersection.stop->min(r1.stop, r2.stop)
A:sympy.sets.handlers.intersection.m->Dummy('m')
A:sympy.sets.handlers.intersection.gm->gm.subs(var, m).subs(var, m)
A:sympy.sets.handlers.intersection.mgm->Dummy('m')
A:sympy.sets.handlers.intersection.solns->list(diophantine(fn - gm, syms=(n, m), permute=True))
A:sympy.sets.handlers.intersection.expr->fn.subs(n, soln.subs(t, n)).expand()
A:sympy.sets.handlers.intersection.(x, xis)->solve_linear(i, 0, [sym])
A:sympy.sets.handlers.intersection.n_->Dummy(n.name, real=True)
A:sympy.sets.handlers.intersection.f_->f.subs(n, n_)
A:sympy.sets.handlers.intersection.(re, im)->f.subs(n, n_).as_real_imag()
A:sympy.sets.handlers.intersection.im->im.subs(n_, n).subs(n_, n)
A:sympy.sets.handlers.intersection.re->re.subs(n_, n).subs(n_, n)
A:sympy.sets.handlers.intersection.lam->Lambda(n, re)
A:sympy.sets.handlers.intersection.(g1, h1)->inverter(f, other.inf, n)
A:sympy.sets.handlers.intersection.(g2, h2)->inverter(f, other.sup, n)
A:sympy.sets.handlers.intersection.range_set->FiniteSet(*list(range_set))
A:sympy.sets.handlers.intersection.solutions->solveset(f, n, S.Reals)
A:sympy.sets.handlers.intersection.s->Range(max(a.inf, ceiling(b.left)), floor(b.right) + 1)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(a,b)
sympy.sets.handlers.intersection._(self,other)
sympy.sets.handlers.intersection._(self,other)
sympy.sets.handlers.intersection._intlike_interval(a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/mul.py----------------------------------------
A:sympy.sets.handlers.mul.(_x, _y)->symbols('x y')
A:sympy.sets.handlers.mul._set_mul->Dispatcher('_set_mul')
A:sympy.sets.handlers.mul._set_div->Dispatcher('_set_div')
A:sympy.sets.handlers.mul.(minval, minopen)->min(comvals)
A:sympy.sets.handlers.mul.(maxval, maxopen)->max(comvals)
sympy.sets.handlers.mul._(x,y)
sympy.sets.handlers.mul._(x,y)
sympy.sets.handlers.mul._(x,y)
sympy.sets.handlers.mul._(x,y)
sympy.sets.handlers.mul._(x,y)
sympy.sets.handlers.mul._(x,y)
sympy.sets.handlers.mul._(x,y)
sympy.sets.handlers.mul._(x,y)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sets/handlers/union.py----------------------------------------
A:sympy.sets.handlers.union.union_sets->Dispatcher('union_sets')
A:sympy.sets.handlers.union.intersect->Intersection(a, b)
A:sympy.sets.handlers.union.b->sympy.sets.fancysets.ComplexRegion.from_real(b)
A:sympy.sets.handlers.union.end->Max(a.end, b.end)
A:sympy.sets.handlers.union.start->Min(a.start, b.start)
A:sympy.sets.handlers.union.new_a->Interval(a.start, a.end, open_left, open_right)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)
sympy.sets.handlers.union._(a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/root_system.py----------------------------------------
A:sympy.liealgebras.root_system.obj->sympy.core.basic.Atom.__new__(cls)
A:sympy.liealgebras.root_system.obj.cartan_type->CartanType(cartantype)
A:sympy.liealgebras.root_system.n->self.cartan_type.rank()
A:sympy.liealgebras.root_system.root->self.cartan_type.simple_root(i)
A:sympy.liealgebras.root_system.alpha->self.all_roots()
A:sympy.liealgebras.root_system.keys->list(alpha.keys())
A:sympy.liealgebras.root_system.k->max(keys)
A:sympy.liealgebras.root_system.rs->' + '.join(('alpha[' + str(i) + ']' for i in range(1, n + 1)))
sympy.liealgebras.root_system.RootSystem(cls,cartantype)
sympy.liealgebras.root_system.RootSystem.add_as_roots(self,root1,root2)
sympy.liealgebras.root_system.RootSystem.add_simple_roots(self,root1,root2)
sympy.liealgebras.root_system.RootSystem.all_roots(self)
sympy.liealgebras.root_system.RootSystem.cartan_matrix(self)
sympy.liealgebras.root_system.RootSystem.dynkin_diagram(self)
sympy.liealgebras.root_system.RootSystem.root_space(self)
sympy.liealgebras.root_system.RootSystem.simple_roots(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/cartan_type.py----------------------------------------
A:sympy.liealgebras.cartan_type.CartanType->CartanType_generator()
A:sympy.liealgebras.cartan_type.obj->sympy.core.Basic.__new__(cls)
sympy.liealgebras.cartan_type.CartanType_generator(self,*args)
sympy.liealgebras.cartan_type.Standard_Cartan(cls,series,n)
sympy.liealgebras.cartan_type.Standard_Cartan.rank(self)
sympy.liealgebras.cartan_type.Standard_Cartan.series(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/type_a.py----------------------------------------
A:sympy.liealgebras.type_a.posroots[k]->self.basic_root(i, j)
sympy.liealgebras.type_a.TypeA(cls,n)
sympy.liealgebras.type_a.TypeA.basic_root(self,i,j)
sympy.liealgebras.type_a.TypeA.basis(self)
sympy.liealgebras.type_a.TypeA.cartan_matrix(self)
sympy.liealgebras.type_a.TypeA.dimension(self)
sympy.liealgebras.type_a.TypeA.dynkin_diagram(self)
sympy.liealgebras.type_a.TypeA.highest_root(self)
sympy.liealgebras.type_a.TypeA.lie_algebra(self)
sympy.liealgebras.type_a.TypeA.positive_roots(self)
sympy.liealgebras.type_a.TypeA.roots(self)
sympy.liealgebras.type_a.TypeA.simple_root(self,i)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/type_f.py----------------------------------------
A:sympy.liealgebras.type_f.posroots[k]->self.basic_root(i, j)
A:sympy.liealgebras.type_f.root->self.basic_root(i, j)
A:sympy.liealgebras.type_f.root[i]->Rational(-1, 2)
A:sympy.liealgebras.type_f.m->Matrix(4, 4, [2, -1, 0, 0, -1, 2, -2, 0, 0, -1, 2, -1, 0, 0, -1, 2])
sympy.liealgebras.type_f.TypeF(cls,n)
sympy.liealgebras.type_f.TypeF.basic_root(self,i,j)
sympy.liealgebras.type_f.TypeF.basis(self)
sympy.liealgebras.type_f.TypeF.cartan_matrix(self)
sympy.liealgebras.type_f.TypeF.dimension(self)
sympy.liealgebras.type_f.TypeF.dynkin_diagram(self)
sympy.liealgebras.type_f.TypeF.positive_roots(self)
sympy.liealgebras.type_f.TypeF.roots(self)
sympy.liealgebras.type_f.TypeF.simple_root(self,i)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/dynkin_diagram.py----------------------------------------
sympy.liealgebras.dynkin_diagram.DynkinDiagram(t)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/weyl_group.py----------------------------------------
A:sympy.liealgebras.weyl_group.obj->sympy.core.basic.Atom.__new__(cls)
A:sympy.liealgebras.weyl_group.obj.cartan_type->CartanType(cartantype)
A:sympy.liealgebras.weyl_group.n->self.cartan_type.rank()
A:sympy.liealgebras.weyl_group.a->int(elt)
A:sympy.liealgebras.weyl_group.elts->list(weylelt)
A:sympy.liealgebras.weyl_group.m->self.delete_doubles(m)
A:sympy.liealgebras.weyl_group.copy->list(reflections)
A:sympy.liealgebras.weyl_group.matrixform->eye(n)
A:sympy.liealgebras.weyl_group.mat->eye(n)
A:sympy.liealgebras.weyl_group.gen1->Matrix([[1, 0, 0], [0, 0, 1], [0, 1, 0]])
A:sympy.liealgebras.weyl_group.gen2->Matrix([[Rational(2, 3), Rational(2, 3), Rational(-1, 3)], [Rational(2, 3), Rational(-1, 3), Rational(2, 3)], [Rational(-1, 3), Rational(2, 3), Rational(2, 3)]])
sympy.liealgebras.weyl_group.WeylGroup(cls,cartantype)
sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram(self)
sympy.liealgebras.weyl_group.WeylGroup.delete_doubles(self,reflections)
sympy.liealgebras.weyl_group.WeylGroup.element_order(self,weylelt)
sympy.liealgebras.weyl_group.WeylGroup.generators(self)
sympy.liealgebras.weyl_group.WeylGroup.group_name(self)
sympy.liealgebras.weyl_group.WeylGroup.group_order(self)
sympy.liealgebras.weyl_group.WeylGroup.matrix_form(self,weylelt)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/type_b.py----------------------------------------
A:sympy.liealgebras.type_b.posroots[k]->self.basic_root(i, j)
A:sympy.liealgebras.type_b.root->self.basic_root(i, j)
sympy.liealgebras.type_b.TypeB(cls,n)
sympy.liealgebras.type_b.TypeB.basic_root(self,i,j)
sympy.liealgebras.type_b.TypeB.basis(self)
sympy.liealgebras.type_b.TypeB.cartan_matrix(self)
sympy.liealgebras.type_b.TypeB.dimension(self)
sympy.liealgebras.type_b.TypeB.dynkin_diagram(self)
sympy.liealgebras.type_b.TypeB.lie_algebra(self)
sympy.liealgebras.type_b.TypeB.positive_roots(self)
sympy.liealgebras.type_b.TypeB.roots(self)
sympy.liealgebras.type_b.TypeB.simple_root(self,i)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/type_g.py----------------------------------------
A:sympy.liealgebras.type_g.m->Matrix(2, 2, [2, -1, -3, 2])
sympy.liealgebras.type_g.TypeG(cls,n)
sympy.liealgebras.type_g.TypeG.basis(self)
sympy.liealgebras.type_g.TypeG.cartan_matrix(self)
sympy.liealgebras.type_g.TypeG.dimension(self)
sympy.liealgebras.type_g.TypeG.dynkin_diagram(self)
sympy.liealgebras.type_g.TypeG.positive_roots(self)
sympy.liealgebras.type_g.TypeG.roots(self)
sympy.liealgebras.type_g.TypeG.simple_root(self,i)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/type_c.py----------------------------------------
A:sympy.liealgebras.type_c.posroots[k]->self.basic_root(i, j)
A:sympy.liealgebras.type_c.root->self.basic_root(i, j)
sympy.liealgebras.type_c.TypeC(cls,n)
sympy.liealgebras.type_c.TypeC.basic_root(self,i,j)
sympy.liealgebras.type_c.TypeC.basis(self)
sympy.liealgebras.type_c.TypeC.cartan_matrix(self)
sympy.liealgebras.type_c.TypeC.dimension(self)
sympy.liealgebras.type_c.TypeC.dynkin_diagram(self)
sympy.liealgebras.type_c.TypeC.lie_algebra(self)
sympy.liealgebras.type_c.TypeC.positive_roots(self)
sympy.liealgebras.type_c.TypeC.roots(self)
sympy.liealgebras.type_c.TypeC.simple_root(self,i)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/type_d.py----------------------------------------
A:sympy.liealgebras.type_d.posroots[k]->self.basic_root(i, j)
A:sympy.liealgebras.type_d.root->self.basic_root(i, j)
sympy.liealgebras.type_d.TypeD(cls,n)
sympy.liealgebras.type_d.TypeD.basic_root(self,i,j)
sympy.liealgebras.type_d.TypeD.basis(self)
sympy.liealgebras.type_d.TypeD.cartan_matrix(self)
sympy.liealgebras.type_d.TypeD.dimension(self)
sympy.liealgebras.type_d.TypeD.dynkin_diagram(self)
sympy.liealgebras.type_d.TypeD.lie_algebra(self)
sympy.liealgebras.type_d.TypeD.positive_roots(self)
sympy.liealgebras.type_d.TypeD.roots(self)
sympy.liealgebras.type_d.TypeD.simple_root(self,i)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/type_e.py----------------------------------------
A:sympy.liealgebras.type_e.root->self.basic_root(i, j)
A:sympy.liealgebras.type_e.root[0]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[1]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[2]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[3]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[4]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[5]->Rational(1, 2)
A:sympy.liealgebras.type_e.root[6]->Rational(1, 2)
sympy.liealgebras.type_e.TypeE(cls,n)
sympy.liealgebras.type_e.TypeE.basic_root(self,i,j)
sympy.liealgebras.type_e.TypeE.basis(self)
sympy.liealgebras.type_e.TypeE.cartan_matrix(self)
sympy.liealgebras.type_e.TypeE.dimension(self)
sympy.liealgebras.type_e.TypeE.dynkin_diagram(self)
sympy.liealgebras.type_e.TypeE.positive_roots(self)
sympy.liealgebras.type_e.TypeE.roots(self)
sympy.liealgebras.type_e.TypeE.simple_root(self,i)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/cartan_matrix.py----------------------------------------
sympy.liealgebras.cartan_matrix.CartanMatrix(ct)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_type_B.py----------------------------------------
A:sympy.liealgebras.tests.test_type_B.c->CartanType('B3')
A:sympy.liealgebras.tests.test_type_B.m->Matrix(3, 3, [2, -1, 0, -1, 2, -2, 0, -1, 2])
sympy.liealgebras.tests.test_type_B.test_type_B()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_weyl_group.py----------------------------------------
A:sympy.liealgebras.tests.test_weyl_group.c->WeylGroup('A3')
A:sympy.liealgebras.tests.test_weyl_group.d->WeylGroup('B5')
A:sympy.liealgebras.tests.test_weyl_group.e->WeylGroup('D5')
A:sympy.liealgebras.tests.test_weyl_group.f->WeylGroup('G2')
A:sympy.liealgebras.tests.test_weyl_group.g->WeylGroup('F4')
A:sympy.liealgebras.tests.test_weyl_group.h->WeylGroup('E6')
sympy.liealgebras.tests.test_weyl_group.test_weyl_group()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_type_E.py----------------------------------------
A:sympy.liealgebras.tests.test_type_E.c->CartanType('E6')
A:sympy.liealgebras.tests.test_type_E.m->Matrix(6, 6, [2, 0, -1, 0, 0, 0, 0, 2, 0, -1, 0, 0, -1, 0, 2, -1, 0, 0, 0, -1, -1, 2, -1, 0, 0, 0, 0, -1, 2, -1, 0, 0, 0, 0, -1, 2])
A:sympy.liealgebras.tests.test_type_E.posroots->CartanType('E6').positive_roots()
sympy.liealgebras.tests.test_type_E.test_type_E()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_type_F.py----------------------------------------
A:sympy.liealgebras.tests.test_type_F.c->CartanType('F4')
A:sympy.liealgebras.tests.test_type_F.m->Matrix(4, 4, [2, -1, 0, 0, -1, 2, -2, 0, 0, -1, 2, -1, 0, 0, -1, 2])
sympy.liealgebras.tests.test_type_F.test_type_F()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_type_D.py----------------------------------------
A:sympy.liealgebras.tests.test_type_D.c->CartanType('D4')
A:sympy.liealgebras.tests.test_type_D.m->Matrix(4, 4, [2, -1, 0, 0, -1, 2, -1, -1, 0, -1, 2, 0, 0, -1, 0, 2])
sympy.liealgebras.tests.test_type_D.test_type_D()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_type_G.py----------------------------------------
A:sympy.liealgebras.tests.test_type_G.c->CartanType('G2')
A:sympy.liealgebras.tests.test_type_G.m->Matrix(2, 2, [2, -1, -3, 2])
sympy.liealgebras.tests.test_type_G.test_type_G()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_dynkin_diagram.py----------------------------------------
A:sympy.liealgebras.tests.test_dynkin_diagram.c->DynkinDiagram('A3')
A:sympy.liealgebras.tests.test_dynkin_diagram.ct->DynkinDiagram(['B', 3])
sympy.liealgebras.tests.test_dynkin_diagram.test_DynkinDiagram()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_type_C.py----------------------------------------
A:sympy.liealgebras.tests.test_type_C.c->CartanType('C4')
A:sympy.liealgebras.tests.test_type_C.m->Matrix(4, 4, [2, -1, 0, 0, -1, 2, -1, 0, 0, -1, 2, -1, 0, 0, -2, 2])
A:sympy.liealgebras.tests.test_type_C.t->CartanType(['C', 3])
sympy.liealgebras.tests.test_type_C.test_type_C()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_root_system.py----------------------------------------
A:sympy.liealgebras.tests.test_root_system.c->RootSystem('A3')
sympy.liealgebras.tests.test_root_system.test_root_system()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_type_A.py----------------------------------------
A:sympy.liealgebras.tests.test_type_A.c->CartanType('A3')
A:sympy.liealgebras.tests.test_type_A.m->Matrix(3, 3, [2, -1, 0, -1, 2, -1, 0, -1, 2])
sympy.liealgebras.tests.test_type_A.test_type_A()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_cartan_matrix.py----------------------------------------
A:sympy.liealgebras.tests.test_cartan_matrix.c->CartanMatrix('A3')
A:sympy.liealgebras.tests.test_cartan_matrix.m->Matrix(3, 3, [2, -1, 0, -1, 2, -1, 0, -1, 2])
A:sympy.liealgebras.tests.test_cartan_matrix.a->CartanMatrix(['G', 2])
A:sympy.liealgebras.tests.test_cartan_matrix.mt->Matrix(2, 2, [2, -1, -3, 2])
sympy.liealgebras.tests.test_cartan_matrix.test_CartanMatrix()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/liealgebras/tests/test_cartan_type.py----------------------------------------
A:sympy.liealgebras.tests.test_cartan_type.c->CartanType('A4')
A:sympy.liealgebras.tests.test_cartan_type.m->Standard_Cartan('A', 2)
A:sympy.liealgebras.tests.test_cartan_type.b->CartanType('B12')
sympy.liealgebras.tests.test_cartan_type.test_Standard_Cartan()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/kauers.py----------------------------------------
A:sympy.series.kauers.expression->expression.expand().expand()
A:sympy.series.kauers.expression2->expression2.expand().expand()
A:sympy.series.kauers.function->function.subs(l[0], l[-1] + 1).subs(l[0], l[-1] + 1)
sympy.series.kauers.finite_diff(expression,variable,increment=1)
sympy.series.kauers.finite_diff_kauers(sum)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/order.py----------------------------------------
A:sympy.series.order.expr->self.expr._eval_transpose()
A:sympy.series.order.variables->list(new_vp.keys())
A:sympy.series.order.args->tuple(variables)
A:sympy.series.order.(v, p)->list(map(sympify, a))
A:sympy.series.order.expr_vp->dict(expr.args[1:])
A:sympy.series.order.new_vp->dict(expr_vp)
A:sympy.series.order.vp->dict(zip(variables, point))
A:sympy.series.order.ps->list(point)
A:sympy.series.order.lst->self.expr._eval_transpose().extract_leading_order(args)
A:sympy.series.order.pts->tuple(zip(args, ps))
A:sympy.series.order.lt->arg.as_leading_term(*args)
A:sympy.series.order.order->Order(lt, *pts)
A:sympy.series.order.new_expr->Order(Add(*[a.expr for a in new_expr.args]), *pts)
A:sympy.series.order.margs->list(Mul.make_args(expr.as_independent(x, as_Add=False)[1]))
A:sympy.series.order.obj->self.func(expr, *self.args[1:])
A:sympy.series.order.order_symbols->sorted(order_symbols.items(), key=lambda x: default_sort_key(x[0]))
A:sympy.series.order.common_symbols->tuple([s for s in self.variables if s in expr.variables])
A:sympy.series.order.ratio->powsimp(ratio, deep=True, combine='exp')
A:sympy.series.order.l->Limit(ratio, s, point).doit(heuristics=False)
A:sympy.series.order.result->self.contains(other)
A:sympy.series.order.newexpr->self.expr.subs(old, new)
A:sympy.series.order.i->self.variables.index(old)
A:sympy.series.order.newvars->list(self.variables)
A:sympy.series.order.newpt->list(self.point)
A:sympy.series.order.var->syms.pop()
A:sympy.series.order.point->Dummy().subs(res[0]).limit(old, self.point[i])
A:sympy.series.order.d->Dummy()
A:sympy.series.order.sol->solveset(old - new.subs(var, d), d)
sympy.Order(cls,expr,*args,**kwargs)
sympy.series.order.Order(cls,expr,*args,**kwargs)
sympy.series.order.Order.__contains__(self,other)
sympy.series.order.Order.__neg__(self)
sympy.series.order.Order._eval_conjugate(self)
sympy.series.order.Order._eval_derivative(self,x)
sympy.series.order.Order._eval_nseries(self,x,n,logx,cdir=0)
sympy.series.order.Order._eval_power(b,e)
sympy.series.order.Order._eval_subs(self,old,new)
sympy.series.order.Order._eval_transpose(self)
sympy.series.order.Order.as_expr_variables(self,order_symbols)
sympy.series.order.Order.contains(self,expr)
sympy.series.order.Order.expr(self)
sympy.series.order.Order.free_symbols(self)
sympy.series.order.Order.getO(self)
sympy.series.order.Order.point(self)
sympy.series.order.Order.removeO(self)
sympy.series.order.Order.variables(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/sequences.py----------------------------------------
A:sympy.series.sequences.interval->Intersection(self.interval, other.interval)
A:sympy.series.sequences.pt->self._ith_point(i)
A:sympy.series.sequences.index->self._ith_point(index)
A:sympy.series.sequences.lx->len(x)
A:sympy.series.sequences.r->min(d, lx // 2)
A:sympy.series.sequences.m->Matrix(mlist)
A:sympy.series.sequences.y->simplify(m.LUsolve(Matrix(x[l:l2])))
A:sympy.series.sequences.coeffs->flatten(y[::-1])
A:sympy.series.sequences.l->len(coeffs)
A:sympy.series.sequences.periodical->sympify(tuple(flatten(periodical)))
A:sympy.series.sequences.x->_find_x(formula)
A:sympy.series.sequences.limits->sympify((x, start, stop))
A:sympy.series.sequences.per_length->lcm(lper1, lper2)
A:sympy.series.sequences.(start, stop)->self._intersect_interval(other)
A:sympy.series.sequences.coeff->sympify(coeff)
A:sympy.series.sequences.formula->sympify(formula)
A:sympy.series.sequences.k->Wild('k', exclude=(n,))
A:sympy.series.sequences.prev_ys->recurrence.find(y)
A:sympy.series.sequences.degree->Integer(degree)
A:sympy.series.sequences.start->sympify(start)
A:sympy.series.sequences.initial->Tuple(*(sympify(x) for x in initial))
A:sympy.series.sequences.seq->sympify(seq)
A:sympy.series.sequences.current_recurrence->self._recurrence.xreplace({self.n: seq_index})
A:sympy.series.sequences.new_term->self._recurrence.xreplace({self.n: seq_index}).xreplace(self.cache)
A:sympy.series.sequences.evaluate->kwargs.get('evaluate', global_parameters.evaluate)
A:sympy.series.sequences.args->list(ordered(args, SeqBase._start_key))
A:sympy.series.sequences.new_seq->s._mul(t)
sympy.SeqAdd(cls,*args,**kwargs)
sympy.SeqFormula(cls,formula,limits=None)
sympy.SeqMul(cls,*args,**kwargs)
sympy.SeqPer(cls,periodical,limits=None)
sympy.sequence(seq,limits=None)
sympy.series.sequences.EmptySequence(SeqBase,metaclass=Singleton)
sympy.series.sequences.EmptySequence.__iter__(self)
sympy.series.sequences.EmptySequence.coeff_mul(self,coeff)
sympy.series.sequences.EmptySequence.interval(self)
sympy.series.sequences.EmptySequence.length(self)
sympy.series.sequences.RecursiveSeq(cls,recurrence,yn,n,initial=None,start=0)
sympy.series.sequences.RecursiveSeq.__iter__(self)
sympy.series.sequences.RecursiveSeq._eval_coeff(self,index)
sympy.series.sequences.RecursiveSeq._recurrence(self)
sympy.series.sequences.RecursiveSeq.initial(self)
sympy.series.sequences.RecursiveSeq.interval(self)
sympy.series.sequences.RecursiveSeq.n(self)
sympy.series.sequences.RecursiveSeq.recurrence(self)
sympy.series.sequences.RecursiveSeq.start(self)
sympy.series.sequences.RecursiveSeq.stop(self)
sympy.series.sequences.RecursiveSeq.y(self)
sympy.series.sequences.RecursiveSeq.yn(self)
sympy.series.sequences.SeqAdd(cls,*args,**kwargs)
sympy.series.sequences.SeqAdd._eval_coeff(self,pt)
sympy.series.sequences.SeqAdd.reduce(args)
sympy.series.sequences.SeqBase(Basic)
sympy.series.sequences.SeqBase.__add__(self,other)
sympy.series.sequences.SeqBase.__getitem__(self,index)
sympy.series.sequences.SeqBase.__iter__(self)
sympy.series.sequences.SeqBase.__mul__(self,other)
sympy.series.sequences.SeqBase.__neg__(self)
sympy.series.sequences.SeqBase.__radd__(self,other)
sympy.series.sequences.SeqBase.__rmul__(self,other)
sympy.series.sequences.SeqBase.__rsub__(self,other)
sympy.series.sequences.SeqBase.__sub__(self,other)
sympy.series.sequences.SeqBase._add(self,other)
sympy.series.sequences.SeqBase._eval_coeff(self,pt)
sympy.series.sequences.SeqBase._intersect_interval(self,other)
sympy.series.sequences.SeqBase._ith_point(self,i)
sympy.series.sequences.SeqBase._mul(self,other)
sympy.series.sequences.SeqBase._start_key(expr)
sympy.series.sequences.SeqBase.coeff(self,pt)
sympy.series.sequences.SeqBase.coeff_mul(self,other)
sympy.series.sequences.SeqBase.find_linear_recurrence(self,n,d=None,gfvar=None)
sympy.series.sequences.SeqBase.free_symbols(self)
sympy.series.sequences.SeqBase.gen(self)
sympy.series.sequences.SeqBase.interval(self)
sympy.series.sequences.SeqBase.length(self)
sympy.series.sequences.SeqBase.start(self)
sympy.series.sequences.SeqBase.stop(self)
sympy.series.sequences.SeqBase.variables(self)
sympy.series.sequences.SeqExpr(SeqBase)
sympy.series.sequences.SeqExpr.gen(self)
sympy.series.sequences.SeqExpr.interval(self)
sympy.series.sequences.SeqExpr.length(self)
sympy.series.sequences.SeqExpr.start(self)
sympy.series.sequences.SeqExpr.stop(self)
sympy.series.sequences.SeqExpr.variables(self)
sympy.series.sequences.SeqExprOp(SeqBase)
sympy.series.sequences.SeqExprOp.gen(self)
sympy.series.sequences.SeqExprOp.interval(self)
sympy.series.sequences.SeqExprOp.length(self)
sympy.series.sequences.SeqExprOp.start(self)
sympy.series.sequences.SeqExprOp.stop(self)
sympy.series.sequences.SeqExprOp.variables(self)
sympy.series.sequences.SeqFormula(cls,formula,limits=None)
sympy.series.sequences.SeqFormula._add(self,other)
sympy.series.sequences.SeqFormula._eval_coeff(self,pt)
sympy.series.sequences.SeqFormula._mul(self,other)
sympy.series.sequences.SeqFormula.coeff_mul(self,coeff)
sympy.series.sequences.SeqFormula.expand(self,*args,**kwargs)
sympy.series.sequences.SeqFormula.formula(self)
sympy.series.sequences.SeqMul(cls,*args,**kwargs)
sympy.series.sequences.SeqMul._eval_coeff(self,pt)
sympy.series.sequences.SeqMul.reduce(args)
sympy.series.sequences.SeqPer(cls,periodical,limits=None)
sympy.series.sequences.SeqPer._add(self,other)
sympy.series.sequences.SeqPer._eval_coeff(self,pt)
sympy.series.sequences.SeqPer._mul(self,other)
sympy.series.sequences.SeqPer.coeff_mul(self,coeff)
sympy.series.sequences.SeqPer.period(self)
sympy.series.sequences.SeqPer.periodical(self)
sympy.series.sequences.sequence(seq,limits=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/series.py----------------------------------------
A:sympy.series.series.expr->sympify(expr)
sympy.series(expr,x=None,x0=0,n=6,dir='+')
sympy.series.series.series(expr,x=None,x0=0,n=6,dir='+')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/approximants.py----------------------------------------
A:sympy.series.approximants.c->lcm(c, denom(x))
sympy.approximants(l,X=Symbol('x'),simplify=False)
sympy.series.approximants.approximants(l,X=Symbol('x'),simplify=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/series_class.py----------------------------------------
A:sympy.series.series_class.pt->self._ith_point(i)
A:sympy.series.series_class.index->self._ith_point(index)
sympy.series.series_class.SeriesBase(Expr)
sympy.series.series_class.SeriesBase.__getitem__(self,index)
sympy.series.series_class.SeriesBase.__iter__(self)
sympy.series.series_class.SeriesBase._eval_term(self,pt)
sympy.series.series_class.SeriesBase._ith_point(self,i)
sympy.series.series_class.SeriesBase.free_symbols(self)
sympy.series.series_class.SeriesBase.interval(self)
sympy.series.series_class.SeriesBase.length(self)
sympy.series.series_class.SeriesBase.start(self)
sympy.series.series_class.SeriesBase.stop(self)
sympy.series.series_class.SeriesBase.term(self,pt)
sympy.series.series_class.SeriesBase.variables(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/acceleration.py----------------------------------------
sympy.series.acceleration.richardson(A,k,n,N)
sympy.series.acceleration.shanks(A,k,n,m=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/gruntz.py----------------------------------------
A:sympy.series.gruntz.timeit->timethis('gruntz')
A:sympy.series.gruntz.c->limitinf(f.exp / g.exp, x)
A:sympy.series.gruntz.self[key]->Dummy()
A:sympy.series.gruntz.e->powdenest(e)
A:sympy.series.gruntz.res->self.copy()
A:sympy.series.gruntz.exps->exps.xreplace({var: res[expr]}).xreplace({var: res[expr]})
A:sympy.series.gruntz.res.rewrites[var]->rewr.xreplace(tr)
A:sympy.series.gruntz.r->limitinf(e0, z)
A:sympy.series.gruntz.r.rewrites->self.rewrites.copy()
A:sympy.series.gruntz.s->sign(c0, x)
A:sympy.series.gruntz.(i, d)->powdenest(e).as_independent(x)
A:sympy.series.gruntz.(s, expr)->mrv(e.exp, x)
A:sympy.series.gruntz.(a, b)->powdenest(e).as_two_terms()
A:sympy.series.gruntz.(s1, e1)->mrv(a, x)
A:sympy.series.gruntz.(s2, e2)->mrv(e.exp, x)
A:sympy.series.gruntz.base_lim->limitinf(b1, x)
A:sympy.series.gruntz.li->limitinf(e.exp, x)
A:sympy.series.gruntz.s1->SubsSet()
A:sympy.series.gruntz.su.rewrites[e1]->exp(e2)
A:sympy.series.gruntz.(u, b)->expand_mul(f).union(g, exps)
A:sympy.series.gruntz.sa->sign(a, x)
A:sympy.series.gruntz.(c0, e0)->mrv_leadterm(e, x)
A:sympy.series.gruntz.p->Dummy('p', positive=True)
A:sympy.series.gruntz.sig->sign(g.exp, x)
A:sympy.series.gruntz.c0->c0.cancel().cancel()
A:sympy.series.gruntz.r.rewrites[var]->sign(c0, x).rewrites[var].xreplace({x: exp(x)})
A:sympy.series.gruntz.t->powdenest(t)
A:sympy.series.gruntz.Omega->list(Omega.items())
A:sympy.series.gruntz.(Omega, exps)->mrv(e, x)
A:sympy.series.gruntz.Omega_up->moveup2(Omega, x)
A:sympy.series.gruntz.w->Dummy('w', positive=True)
A:sympy.series.gruntz.(f, logw)->rewrite(exps, Omega, x, w)
A:sympy.series.gruntz.lt->expand_mul(f).as_coeff_exponent(w)
A:sympy.series.gruntz._series->expand_mul(f)._eval_nseries(w, n=n0 + incr, logx=logw)
A:sympy.series.gruntz.series->expand_mul(f)._eval_nseries(w, n=n0 + incr, logx=logw).expand().removeO()
A:sympy.series.gruntz.base->expand_mul(f).as_base_exp()[0].as_coeff_exponent(w)
A:sympy.series.gruntz.n->Node()
A:sympy.series.gruntz.nodes->build_expression_tree(Omega, rewrites)
A:sympy.series.gruntz.f->expand_mul(f)
A:sympy.series.gruntz.exponent->reduce(ilcm, denominators, 1)
A:sympy.series.gruntz.e0->powdenest(e).subs(z, z0 + 1 / z)
sympy.gruntz(e,z,z0,dir='+')
sympy.series.gruntz.SubsSet(self)
sympy.series.gruntz.SubsSet.__getitem__(self,key)
sympy.series.gruntz.SubsSet.__repr__(self)
sympy.series.gruntz.SubsSet.copy(self)
sympy.series.gruntz.SubsSet.do_subs(self,e)
sympy.series.gruntz.SubsSet.meets(self,s2)
sympy.series.gruntz.SubsSet.union(self,s2,exps=None)
sympy.series.gruntz.build_expression_tree(Omega,rewrites)
sympy.series.gruntz.calculate_series(e,x,logx=None)
sympy.series.gruntz.compare(a,b,x)
sympy.series.gruntz.gruntz(e,z,z0,dir='+')
sympy.series.gruntz.limitinf(e,x)
sympy.series.gruntz.moveup(l,x)
sympy.series.gruntz.moveup2(s,x)
sympy.series.gruntz.mrv(e,x)
sympy.series.gruntz.mrv_leadterm(e,x)
sympy.series.gruntz.mrv_max1(f,g,exps,x)
sympy.series.gruntz.mrv_max3(f,expsf,g,expsg,union,expsboth,x)
sympy.series.gruntz.rewrite(e,Omega,x,wsym)
sympy.series.gruntz.sign(e,x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/limits.py----------------------------------------
A:sympy.series.limits.rv->e.rewrite(factorial, gamma).func(*r)
A:sympy.series.limits.l->limit(e, z, z0, dir='-')
A:sympy.series.limits.m->factor(e)
A:sympy.series.limits.e3->Mul(*e2).simplify()
A:sympy.series.limits.rat_e->ratsimp(e)
A:sympy.series.limits.e->e.rewrite(factorial, gamma).rewrite(factorial, gamma)
A:sympy.series.limits.z->z.doit(**hints).doit(**hints)
A:sympy.series.limits.z0->z0.doit(**hints).doit(**hints)
A:sympy.series.limits.dir->Symbol(dir)
A:sympy.series.limits.obj->sympy.core.Expr.__new__(cls)
A:sympy.series.limits.res->limit(e1 * (b1 - 1), z, z0)
A:sympy.series.limits.ex_lim->limit(e1, z, z0)
A:sympy.series.limits.base_lim->limit(b1, z, z0)
A:sympy.series.limits.r->heuristics(e, z, z0, dir)
A:sympy.series.limits.cdir->sign(z0)
A:sympy.series.limits.newargs->tuple((set_signs(arg) for arg in expr.args))
A:sympy.series.limits.expr->expr.func(*newargs).func(*newargs)
A:sympy.series.limits.abs_flag->isinstance(expr, Abs)
A:sympy.series.limits.arg_flag->isinstance(expr, arg)
A:sympy.series.limits.sign_flag->isinstance(expr, sign)
A:sympy.series.limits.sig->limit(1 / expr.args[0], z, z0, dir)
A:sympy.series.limits.newe->e.rewrite(factorial, gamma).rewrite(factorial, gamma).subs(z, z + z0)
A:sympy.series.limits.(coeff, ex)->e.rewrite(factorial, gamma).rewrite(factorial, gamma).subs(z, z + z0).leadterm(z, cdir=cdir)
A:sympy.series.limits.coeff->e.rewrite(factorial, gamma).rewrite(factorial, gamma).subs(z, z + z0).as_leading_term(z, cdir=cdir)
sympy.Limit(cls,e,z,z0,dir='+')
sympy.limit(e,z,z0,dir='+')
sympy.series.limits.Limit(cls,e,z,z0,dir='+')
sympy.series.limits.Limit.doit(self,**hints)
sympy.series.limits.Limit.free_symbols(self)
sympy.series.limits.Limit.pow_heuristics(self,e)
sympy.series.limits.heuristics(e,z,z0,dir)
sympy.series.limits.limit(e,z,z0,dir='+')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/limitseq.py----------------------------------------
A:sympy.series.limitseq.expr->expr.rewrite(factorial, subfactorial, gamma).rewrite(factorial, subfactorial, gamma)
A:sympy.series.limitseq.n->free.pop()
A:sympy.series.limitseq.step->sympify(step)
A:sympy.series.limitseq.result->_limit_inf(expr, n)
A:sympy.series.limitseq.terms->sympy.core.add.Add.make_args(expr.expand(func=True))
A:sympy.series.limitseq.e->r.factor()
A:sympy.series.limitseq.l->limit_seq(e, n)
A:sympy.series.limitseq.(num, den)->expr.rewrite(factorial, subfactorial, gamma).rewrite(factorial, subfactorial, gamma).as_numer_denom()
A:sympy.series.limitseq.num->dominant(num, n)
A:sympy.series.limitseq.den->dominant(den, n)
A:sympy.series.limitseq.n_->Dummy('n', integer=True, positive=True)
A:sympy.series.limitseq.n1->Dummy('n', odd=True, positive=True)
A:sympy.series.limitseq.n2->Dummy('n', even=True, positive=True)
A:sympy.series.limitseq.L1->_limit_seq(expr.xreplace({n: n_}), n_, trials)
A:sympy.series.limitseq.L2->_limit_seq(expr.xreplace({n: n2}), n2, trials)
A:sympy.series.limitseq.lim->_limit_seq(Abs(expr.xreplace({n: n_})), n_, trials)
sympy.difference_delta(expr,n=None,step=1)
sympy.limit_seq(expr,n=None,trials=5)
sympy.series.limitseq._limit_inf(expr,n)
sympy.series.limitseq._limit_seq(expr,n,trials)
sympy.series.limitseq.difference_delta(expr,n=None,step=1)
sympy.series.limitseq.dominant(expr,n)
sympy.series.limitseq.limit_seq(expr,n=None,trials=5)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/aseries.py----------------------------------------
A:sympy.series.aseries.expr->sympify(expr)
sympy.series.aseries.aseries(expr,x=None,n=6,bound=0,hir=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/fourier.py----------------------------------------
A:sympy.series.fourier.cos_term->cos(2 * n * pi * x / L)
A:sympy.series.fourier.sin_term->sin(2 * n * pi * x / L)
A:sympy.series.fourier.x->_find_x(func)
A:sympy.series.fourier._expr->self.truncate().subs(x, x * s)
A:sympy.series.fourier.add_coeff->self.truncate().subs(x, x * s).as_coeff_add()
A:sympy.series.fourier.a->Wild('a', properties=[lambda k: k.is_Integer, lambda k: k is not S.Zero])
A:sympy.series.fourier.b->Wild('b', properties=[lambda k: x not in k.free_symbols])
A:sympy.series.fourier.args->map(sympify, args)
A:sympy.series.fourier.an->SeqFormula(0, (1, oo))
A:sympy.series.fourier.bn->fourier_sin_seq(f, limits, n)
A:sympy.series.fourier.sfunc->self.function.subs(x, x * s)
A:sympy.series.fourier.f->sympify(f)
A:sympy.series.fourier.limits->_process_limits(f, limits)
A:sympy.series.fourier.exprs->Tuple(a0, an, bn)
A:sympy.series.fourier.(c, e)->Tuple(a0, an, bn).as_coeff_add()
A:sympy.series.fourier.(a0, exp_ls)->rexpr.expand(trig=False, power_base=False, power_exp=False, log=False).as_coeff_add()
A:sympy.series.fourier.t->p.match(b * cos(a * (pi / L) * x))
A:sympy.series.fourier.q->p.match(b * sin(a * (pi / L) * x))
A:sympy.series.fourier.(is_finite, res_f)->finite_check(f, x, L)
A:sympy.series.fourier.n->Dummy('n')
A:sympy.series.fourier.neg_f->sympify(f).subs(x, -x)
A:sympy.series.fourier.(a0, an)->fourier_cos_seq(f, limits, n)
sympy.fourier_series(f,limits=None,finite=True)
sympy.series.fourier.FiniteFourierSeries(cls,f,limits,exprs)
sympy.series.fourier.FiniteFourierSeries.__add__(self,other)
sympy.series.fourier.FiniteFourierSeries._eval_term(self,pt)
sympy.series.fourier.FiniteFourierSeries.interval(self)
sympy.series.fourier.FiniteFourierSeries.length(self)
sympy.series.fourier.FiniteFourierSeries.scale(self,s)
sympy.series.fourier.FiniteFourierSeries.scalex(self,s)
sympy.series.fourier.FiniteFourierSeries.shiftx(self,s)
sympy.series.fourier.FourierSeries(cls,*args)
sympy.series.fourier.FourierSeries.L(self)
sympy.series.fourier.FourierSeries.__add__(self,other)
sympy.series.fourier.FourierSeries.__neg__(self)
sympy.series.fourier.FourierSeries.__sub__(self,other)
sympy.series.fourier.FourierSeries._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.series.fourier.FourierSeries._eval_subs(self,old,new)
sympy.series.fourier.FourierSeries._eval_term(self,pt)
sympy.series.fourier.FourierSeries.a0(self)
sympy.series.fourier.FourierSeries.an(self)
sympy.series.fourier.FourierSeries.bn(self)
sympy.series.fourier.FourierSeries.function(self)
sympy.series.fourier.FourierSeries.interval(self)
sympy.series.fourier.FourierSeries.length(self)
sympy.series.fourier.FourierSeries.period(self)
sympy.series.fourier.FourierSeries.scale(self,s)
sympy.series.fourier.FourierSeries.scalex(self,s)
sympy.series.fourier.FourierSeries.shift(self,s)
sympy.series.fourier.FourierSeries.shiftx(self,s)
sympy.series.fourier.FourierSeries.sigma_approximation(self,n=3)
sympy.series.fourier.FourierSeries.start(self)
sympy.series.fourier.FourierSeries.stop(self)
sympy.series.fourier.FourierSeries.truncate(self,n=3)
sympy.series.fourier.FourierSeries.x(self)
sympy.series.fourier._process_limits(func,limits)
sympy.series.fourier.finite_check(f,x,L)
sympy.series.fourier.fourier_cos_seq(func,limits,n)
sympy.series.fourier.fourier_series(f,limits=None,finite=True)
sympy.series.fourier.fourier_sin_seq(func,limits,n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/formal.py----------------------------------------
A:sympy.series.formal.diff->diff.diff(x).diff(x)
A:sympy.series.formal.terms->sympy.core.add.Add.make_args(RE)
A:sympy.series.formal.(num, den)->t.as_numer_denom()
A:sympy.series.formal.ind->integrate(self.ind, x)
A:sympy.series.formal.(den, j)->den.as_base_exp()
A:sympy.series.formal.(a, xterm)->den.as_coeff_add(x)
A:sympy.series.formal.xc->xterm[0].coeff(x)
A:sympy.series.formal.sep->integrate(sep, x)
A:sympy.series.formal.q->Q.subs(k, k / scale).subs(k, kterm)
A:sympy.series.formal.a->symbols('a:%d' % order)
A:sympy.series.formal.(eq, DE)->_makeDE(k)
A:sympy.series.formal.eq->eq.expand().expand()
A:sympy.series.formal.sol->_solve_simple(f, x, DE, g, k)
A:sympy.series.formal.DE->_transform_explike_DE(DE, g, x, order, syms)
A:sympy.series.formal.g->Function('g')
A:sympy.series.formal.(coeff, d)->t.as_independent(g)
A:sympy.series.formal.RE->hyper_re(DE, g, k)
A:sympy.series.formal.x->free.pop()
A:sympy.series.formal.(c, v)->RE.coeff(g(k + i)).as_independent(x)
A:sympy.series.formal.m->Wild('m')
A:sympy.series.formal.P->P.subs(k, k / scale).subs(k, k / scale)
A:sympy.series.formal.Q->Q.subs(k, k / scale).subs(k, k / scale)
A:sympy.series.formal.f->sympify(f)
A:sympy.series.formal.p->P.subs(k, k / scale).subs(k, k / scale).subs(k, kterm)
A:sympy.series.formal.all_roots->dict(proots)
A:sympy.series.formal.scale->lcm([r.as_numer_denom()[1] for (r, t) in all_roots.items() if r.is_rational])
A:sympy.series.formal.(f, P, Q, m)->_transformation_e(f, x, P, Q, k, m)
A:sympy.series.formal.qroots->roots(Q, k)
A:sympy.series.formal.k_min->Min(*qroots.keys())
A:sympy.series.formal.l->(x * f).limit(x, 0)
A:sympy.series.formal.k_max->Max(*qroots.keys())
A:sympy.series.formal.(sol, ind, mp)->_rsolve_hypergeometric(f, x, P, Q, k, m)
A:sympy.series.formal.pow_x->self._get_pow_x(t)
A:sympy.series.formal.result->compute_fps(f, x, x0, dir, hyper, order, rational, full)
A:sympy.series.formal.sol_dict->defaultdict(lambda : S.Zero)
A:sympy.series.formal.(j, mk)->Eq(k % c, j % c).as_coeff_Add()
A:sympy.series.formal.c->mk.coeff(k)
A:sympy.series.formal.j->floor(j)
A:sympy.series.formal.res->_compute_fps(t, x, 0, S.One, hyper, order, rational, full)
A:sympy.series.formal.cond->Eq(k % c, j % c)
A:sympy.series.formal.s->ceiling(mp)
A:sympy.series.formal.gs->list(RE.atoms(Function))
A:sympy.series.formal.(P, Q)->map(RE.coeff, gs)
A:sympy.series.formal.init[g(k).subs(k, i)]->sympify(f).limit(x, 0)
A:sympy.series.formal.highest_coeff->_transform_explike_DE(DE, g, x, order, syms).coeff(Derivative(g(x), x, order))
A:sympy.series.formal.coeff->hyper_re(DE, g, k).coeff(g(k + i))
A:sympy.series.formal.syms->sympify(f).free_symbols.difference({x})
A:sympy.series.formal.temp->sympify(f).subs(x, rep)
A:sympy.series.formal.k->Dummy('k')
A:sympy.series.formal.ak->self.ak.coeff_mul(other)
A:sympy.series.formal.xk->sequence(xk_formula, (k, 0, oo))
A:sympy.series.formal.save->Add(*[z[0] * z[1] for z in zip(seq[0:e - s], self.xk[s:e])])
A:sympy.series.formal.(f, symb)->expand(f).as_independent(*syms)
A:sympy.series.formal.symb->powsimp(symb)
A:sympy.series.formal.xk_formula->powsimp(x ** k * symb)
A:sympy.series.formal.x0->sympify(x0)
A:sympy.series.formal.dir->sympify(dir)
A:sympy.series.formal.args->map(sympify, args)
A:sympy.series.formal.self.ak_seq->sequence(ak.formula, (k, 1, oo))
A:sympy.series.formal.self.fact_seq->sequence(factorial(k), (k, 1, oo))
A:sympy.series.formal.self.sign_seq->sequence((-1, 1), (k, 1, oo))
A:sympy.series.formal.inf_sum->Sum(ak.formula * xk.formula, (k, ak.start, ak.stop))
A:sympy.series.formal.(xterm, pow_x)->term.as_independent(self.x)[1].as_base_exp()
A:sympy.series.formal.xp->self._get_pow_x(t)
A:sympy.series.formal.pt_xk->ffps.xk.coeff(n)
A:sympy.series.formal.pt_ak->self.ak.coeff(pt).simplify()
A:sympy.series.formal.pow_xk->self._get_pow_x(self.xk.formula)
A:sympy.series.formal.form->Piecewise(*form)
A:sympy.series.formal.other->sympify(other)
A:sympy.series.formal.self.coeff1->sequence(ffps.ak.formula, (k, 0, oo))
A:sympy.series.formal.self.coeff2->sequence(gfps.ak.formula, (k, 0, oo))
A:sympy.series.formal.aks->convolution(coeff1[:n], coeff2[:n])
A:sympy.series.formal.bell_seq->ffps.coeff_bell(i)
A:sympy.series.formal.inv->ffps.zero_coeff()
A:sympy.series.formal.inv_seq->sequence(inv ** (-(k + 1)), (k, 1, oo))
sympy.fps(f,x=None,x0=0,dir=1,hyper=True,order=4,rational=True,full=False)
sympy.series.formal.Coeff(Function)
sympy.series.formal.Coeff.eval(cls,p,x,n)
sympy.series.formal.FiniteFormalPowerSeries(self,*args)
sympy.series.formal.FiniteFormalPowerSeries._eval_derivative(self,x)
sympy.series.formal.FiniteFormalPowerSeries._eval_term(self,pt)
sympy.series.formal.FiniteFormalPowerSeries._eval_terms(self,n)
sympy.series.formal.FiniteFormalPowerSeries.f(self)
sympy.series.formal.FiniteFormalPowerSeries.ffps(self)
sympy.series.formal.FiniteFormalPowerSeries.g(self)
sympy.series.formal.FiniteFormalPowerSeries.gfps(self)
sympy.series.formal.FiniteFormalPowerSeries.infinite(self)
sympy.series.formal.FiniteFormalPowerSeries.integrate(self,x)
sympy.series.formal.FiniteFormalPowerSeries.polynomial(self,n)
sympy.series.formal.FiniteFormalPowerSeries.truncate(self,n=6)
sympy.series.formal.FormalPowerSeries(self,*args)
sympy.series.formal.FormalPowerSeries.__add__(self,other)
sympy.series.formal.FormalPowerSeries.__mul__(self,other)
sympy.series.formal.FormalPowerSeries.__neg__(self)
sympy.series.formal.FormalPowerSeries.__radd__(self,other)
sympy.series.formal.FormalPowerSeries.__rmul__(self,other)
sympy.series.formal.FormalPowerSeries.__rsub__(self,other)
sympy.series.formal.FormalPowerSeries.__sub__(self,other)
sympy.series.formal.FormalPowerSeries._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.series.formal.FormalPowerSeries._eval_derivative(self,x)
sympy.series.formal.FormalPowerSeries._eval_subs(self,old,new)
sympy.series.formal.FormalPowerSeries._eval_term(self,pt)
sympy.series.formal.FormalPowerSeries._get_pow_x(self,term)
sympy.series.formal.FormalPowerSeries.ak(self)
sympy.series.formal.FormalPowerSeries.coeff_bell(self,n)
sympy.series.formal.FormalPowerSeries.compose(self,other,x=None,n=6)
sympy.series.formal.FormalPowerSeries.dir(self)
sympy.series.formal.FormalPowerSeries.function(self)
sympy.series.formal.FormalPowerSeries.ind(self)
sympy.series.formal.FormalPowerSeries.infinite(self)
sympy.series.formal.FormalPowerSeries.integrate(self,x=None,**kwargs)
sympy.series.formal.FormalPowerSeries.interval(self)
sympy.series.formal.FormalPowerSeries.inverse(self,x=None,n=6)
sympy.series.formal.FormalPowerSeries.length(self)
sympy.series.formal.FormalPowerSeries.polynomial(self,n=6)
sympy.series.formal.FormalPowerSeries.product(self,other,x=None,n=6)
sympy.series.formal.FormalPowerSeries.start(self)
sympy.series.formal.FormalPowerSeries.stop(self)
sympy.series.formal.FormalPowerSeries.truncate(self,n=6)
sympy.series.formal.FormalPowerSeries.x(self)
sympy.series.formal.FormalPowerSeries.x0(self)
sympy.series.formal.FormalPowerSeries.xk(self)
sympy.series.formal.FormalPowerSeries.zero_coeff(self)
sympy.series.formal.FormalPowerSeriesCompose(FiniteFormalPowerSeries)
sympy.series.formal.FormalPowerSeriesCompose._eval_terms(self,n)
sympy.series.formal.FormalPowerSeriesCompose.function(self)
sympy.series.formal.FormalPowerSeriesInverse(self,*args)
sympy.series.formal.FormalPowerSeriesInverse._eval_terms(self,n)
sympy.series.formal.FormalPowerSeriesInverse.function(self)
sympy.series.formal.FormalPowerSeriesInverse.g(self)
sympy.series.formal.FormalPowerSeriesInverse.gfps(self)
sympy.series.formal.FormalPowerSeriesProduct(self,*args)
sympy.series.formal.FormalPowerSeriesProduct._eval_terms(self,n)
sympy.series.formal.FormalPowerSeriesProduct.function(self)
sympy.series.formal._apply_integrate(sol,x,k)
sympy.series.formal._apply_scale(sol,scale)
sympy.series.formal._apply_shift(sol,shift)
sympy.series.formal._compute_formula(f,x,P,Q,k,m,k_max)
sympy.series.formal._compute_fps(f,x,x0,dir,hyper,order,rational,full)
sympy.series.formal._rsolve_hypergeometric(f,x,P,Q,k,m)
sympy.series.formal._solve_explike_DE(f,x,DE,g,k)
sympy.series.formal._solve_hyper_RE(f,x,RE,g,k)
sympy.series.formal._solve_simple(f,x,DE,g,k)
sympy.series.formal._transform_DE_RE(DE,g,k,order,syms)
sympy.series.formal._transform_explike_DE(DE,g,x,order,syms)
sympy.series.formal._transformation_a(f,x,P,Q,k,m,shift)
sympy.series.formal._transformation_c(f,x,P,Q,k,m,scale)
sympy.series.formal._transformation_e(f,x,P,Q,k,m)
sympy.series.formal.compute_fps(f,x,x0=0,dir=1,hyper=True,order=4,rational=True,full=False)
sympy.series.formal.exp_re(DE,r,k)
sympy.series.formal.fps(f,x=None,x0=0,dir=1,hyper=True,order=4,rational=True,full=False)
sympy.series.formal.hyper_algorithm(f,x,k,order=4)
sympy.series.formal.hyper_re(DE,r,k)
sympy.series.formal.rational_algorithm(f,x,k,order=4,full=False)
sympy.series.formal.rational_independent(terms,x)
sympy.series.formal.rsolve_hypergeometric(f,x,P,Q,k,m)
sympy.series.formal.simpleDE(f,x,g,order=4)
sympy.series.formal.solve_de(f,x,DE,order,g,k)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/residues.py----------------------------------------
A:sympy.series.residues.expr->expr.subs(x, x + x0).subs(x, x + x0)
A:sympy.series.residues.s->collect(s.removeO(), x)
A:sympy.series.residues.(c, m)->arg.as_coeff_mul(x)
A:sympy.series.residues.m->Mul(*m)
sympy.residue(expr,x,x0)
sympy.series.residues.residue(expr,x,x0)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_sequences.py----------------------------------------
A:sympy.series.tests.test_sequences.(x, y, z)->symbols('x y z')
A:sympy.series.tests.test_sequences.(n, m)->symbols('n m')
A:sympy.series.tests.test_sequences.s->SeqMul(per_bou, form_bou2, evaluate=False)
A:sympy.series.tests.test_sequences.seq->SeqFormula(exp(x * (y ** 2 + z)), (z, 1, 100))
A:sympy.series.tests.test_sequences.form->SeqFormula(n ** 2)
A:sympy.series.tests.test_sequences.per->SeqPer((1, 2), (n, 0, oo))
A:sympy.series.tests.test_sequences.inter->SeqFormula(n ** 2)
A:sympy.series.tests.test_sequences.per_bou->SeqPer((1, 2), (n, 1, 5))
A:sympy.series.tests.test_sequences.form_bou->SeqFormula(n ** 2, (n, 6, 10))
A:sympy.series.tests.test_sequences.form_bou2->SeqFormula(n ** 2, (1, 5))
A:sympy.series.tests.test_sequences.s1->SeqMul(per, per_bou)
A:sympy.series.tests.test_sequences.s2->SeqMul(form, form_bou)
A:sympy.series.tests.test_sequences.per2->SeqPer((2, 4), (n, 0, oo))
A:sympy.series.tests.test_sequences.form2->SeqFormula(n ** 3)
A:sympy.series.tests.test_sequences.i->symbols('i', cls=Idx)
A:sympy.series.tests.test_sequences.r->Indexed('r', i)
A:sympy.series.tests.test_sequences.y->Function('y')
A:sympy.series.tests.test_sequences.n->Symbol('n')
A:sympy.series.tests.test_sequences.fib->RecursiveSeq(y(n - 1) + y(n - 2), y(n), n, [0, 1])
sympy.series.tests.test_sequences.test_EmptySequence()
sympy.series.tests.test_sequences.test_Idx_limits()
sympy.series.tests.test_sequences.test_RecursiveSeq()
sympy.series.tests.test_sequences.test_SeqAdd()
sympy.series.tests.test_sequences.test_SeqExpr()
sympy.series.tests.test_sequences.test_SeqExprOp()
sympy.series.tests.test_sequences.test_SeqFormula()
sympy.series.tests.test_sequences.test_SeqMul()
sympy.series.tests.test_sequences.test_SeqPer()
sympy.series.tests.test_sequences.test_add()
sympy.series.tests.test_sequences.test_find_linear_recurrence()
sympy.series.tests.test_sequences.test_mul__coeff_mul()
sympy.series.tests.test_sequences.test_neg()
sympy.series.tests.test_sequences.test_operations()
sympy.series.tests.test_sequences.test_sequence()
sympy.series.tests.test_sequences.test_sub()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_limitseq.py----------------------------------------
A:sympy.series.tests.test_limitseq.(n, m, k)->symbols('n m k', integer=True)
A:sympy.series.tests.test_limitseq.e->Sum(1 / k, (k, 1, n), (m, 1, n))
A:sympy.series.tests.test_limitseq.n->Symbol('n', integer=True)
A:sympy.series.tests.test_limitseq.(k, n)->symbols('k, n', positive=True)
A:sympy.series.tests.test_limitseq.m->Symbol('m')
sympy.series.tests.test_limitseq.test_accum_bounds()
sympy.series.tests.test_limitseq.test_alternating_sign()
sympy.series.tests.test_limitseq.test_difference_delta()
sympy.series.tests.test_limitseq.test_difference_delta__Add()
sympy.series.tests.test_limitseq.test_difference_delta__Pow()
sympy.series.tests.test_limitseq.test_difference_delta__Sum()
sympy.series.tests.test_limitseq.test_issue_10382()
sympy.series.tests.test_limitseq.test_issue_11672()
sympy.series.tests.test_limitseq.test_issue_14196()
sympy.series.tests.test_limitseq.test_issue_16735()
sympy.series.tests.test_limitseq.test_issue_19868()
sympy.series.tests.test_limitseq.test_issue_9308()
sympy.series.tests.test_limitseq.test_limit_seq()
sympy.series.tests.test_limitseq.test_limit_seq_fail()
sympy.series.tests.test_limitseq.test_limitseq_sum()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_fourier.py----------------------------------------
A:sympy.series.tests.test_fourier.(x, y, z)->symbols('x y z')
A:sympy.series.tests.test_fourier.fo->fourier_series(x, (x, -pi, pi))
A:sympy.series.tests.test_fourier.fe->fourier_series(x ** 2, (-pi, pi))
A:sympy.series.tests.test_fourier.fp->fourier_series(Piecewise((0, x < 0), (pi, True)), (x, -pi, pi))
A:sympy.series.tests.test_fourier.(fo, fe, fp)->_get_examples()
A:sympy.series.tests.test_fourier.fot->fourier_series(x, (x, -pi, pi)).truncate(n=None)
A:sympy.series.tests.test_fourier.p->Piecewise((0, x < 0), (x, True))
A:sympy.series.tests.test_fourier.f->fourier_series(p, (x, -2, 2))
A:sympy.series.tests.test_fourier.square_wave->Piecewise((1, x < pi), (-1, True))
A:sympy.series.tests.test_fourier.s->fourier_series(x, (x, 0, 1))
A:sympy.series.tests.test_fourier.fes->fourier_series(x ** 2, (-pi, pi)).scale(-1).shift(pi ** 2)
A:sympy.series.tests.test_fourier.fos->fourier_series(x, (x, -pi, pi)).scale(3)
A:sympy.series.tests.test_fourier.fx->fourier_series(x ** 2, (-pi, pi)).scalex(2).shiftx(1)
A:sympy.series.tests.test_fourier.fl->fourier_series(x ** 2, (-pi, pi)).scalex(3).shift(-pi).scalex(2).shiftx(1).scale(4)
sympy.series.tests.test_fourier._get_examples()
sympy.series.tests.test_fourier.test_FourierSeries()
sympy.series.tests.test_fourier.test_FourierSeries_2()
sympy.series.tests.test_fourier.test_FourierSeries__add__sub()
sympy.series.tests.test_fourier.test_FourierSeries__neg()
sympy.series.tests.test_fourier.test_FourierSeries__operations()
sympy.series.tests.test_fourier.test_FourierSeries_finite()
sympy.series.tests.test_fourier.test_sawtooth_wave()
sympy.series.tests.test_fourier.test_square_wave()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_lseries.py----------------------------------------
A:sympy.series.tests.test_lseries.e->exp(cos(x)).lseries(x)
A:sympy.series.tests.test_lseries.s->tanh(x).lseries(x, 1)
sympy.series.tests.test_lseries.test_cos()
sympy.series.tests.test_lseries.test_exp()
sympy.series.tests.test_lseries.test_exp2()
sympy.series.tests.test_lseries.test_issue_5183()
sympy.series.tests.test_lseries.test_issue_6999()
sympy.series.tests.test_lseries.test_simple()
sympy.series.tests.test_lseries.test_sin()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_gruntz.py----------------------------------------
A:sympy.series.tests.test_gruntz.x->Symbol('x', real=True)
A:sympy.series.tests.test_gruntz.m->Symbol('m', negative=True)
A:sympy.series.tests.test_gruntz.y->Symbol('y')
A:sympy.series.tests.test_gruntz.e->exp(x + 1 / x)
A:sympy.series.tests.test_gruntz.a->Symbol('a')
A:sympy.series.tests.test_gruntz.h->exp(-x / (1 + exp(-x)))
A:sympy.series.tests.test_gruntz.n->Symbol('n')
A:sympy.series.tests.test_gruntz.r->Symbol('r', positive=True)
A:sympy.series.tests.test_gruntz.c->Symbol('c')
A:sympy.series.tests.test_gruntz.p->Symbol('p', positive=True)
A:sympy.series.tests.test_gruntz.expr->expr.subs(c, c + 1).subs(c, c + 1)
sympy.series.tests.test_gruntz._sskip()
sympy.series.tests.test_gruntz.mmrv(a,b)
sympy.series.tests.test_gruntz.mrewrite(a,b,c)
sympy.series.tests.test_gruntz.test_MrvTestCase_page47_ex3_21()
sympy.series.tests.test_gruntz.test_aseries_trig()
sympy.series.tests.test_gruntz.test_compare1()
sympy.series.tests.test_gruntz.test_compare2()
sympy.series.tests.test_gruntz.test_compare3()
sympy.series.tests.test_gruntz.test_exp_log_series()
sympy.series.tests.test_gruntz.test_grunts_eval_special_slow_sometimes_fail()
sympy.series.tests.test_gruntz.test_gruntz_Ei()
sympy.series.tests.test_gruntz.test_gruntz_I()
sympy.series.tests.test_gruntz.test_gruntz_eval_special()
sympy.series.tests.test_gruntz.test_gruntz_eval_special_fail()
sympy.series.tests.test_gruntz.test_gruntz_eval_special_slow()
sympy.series.tests.test_gruntz.test_gruntz_evaluation()
sympy.series.tests.test_gruntz.test_gruntz_evaluation_slow()
sympy.series.tests.test_gruntz.test_gruntz_hyperbolic()
sympy.series.tests.test_gruntz.test_intractable()
sympy.series.tests.test_gruntz.test_issue_3644()
sympy.series.tests.test_gruntz.test_issue_4109()
sympy.series.tests.test_gruntz.test_issue_4190()
sympy.series.tests.test_gruntz.test_issue_4814()
sympy.series.tests.test_gruntz.test_issue_5172()
sympy.series.tests.test_gruntz.test_issue_6682()
sympy.series.tests.test_gruntz.test_issue_6843()
sympy.series.tests.test_gruntz.test_issue_7096()
sympy.series.tests.test_gruntz.test_limit1()
sympy.series.tests.test_gruntz.test_limit2()
sympy.series.tests.test_gruntz.test_limit3()
sympy.series.tests.test_gruntz.test_limit4()
sympy.series.tests.test_gruntz.test_mrv1()
sympy.series.tests.test_gruntz.test_mrv2a()
sympy.series.tests.test_gruntz.test_mrv2b()
sympy.series.tests.test_gruntz.test_mrv2c()
sympy.series.tests.test_gruntz.test_mrv3()
sympy.series.tests.test_gruntz.test_mrv4()
sympy.series.tests.test_gruntz.test_mrv_leadterm1()
sympy.series.tests.test_gruntz.test_mrv_leadterm2()
sympy.series.tests.test_gruntz.test_mrv_leadterm3()
sympy.series.tests.test_gruntz.test_rewrite1()
sympy.series.tests.test_gruntz.test_rewrite2()
sympy.series.tests.test_gruntz.test_rewrite3()
sympy.series.tests.test_gruntz.test_sign1()
sympy.series.tests.test_gruntz.test_sign2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_residues.py----------------------------------------
A:sympy.series.tests.test_residues.f->Function('f')
A:sympy.series.tests.test_residues.n->Symbol('n', integer=True, positive=True)
A:sympy.series.tests.test_residues.a->residue(cot(pi * x) / ((x - 1) * (x - 2) + 1), x, S(3) / 2 - sqrt(3) * I / 2)
A:sympy.series.tests.test_residues.b->residue(cot(pi * x) / (x ** 2 - 3 * x + 3), x, S(3) / 2 - sqrt(3) * I / 2)
sympy.series.tests.test_residues.test_NotImplemented()
sympy.series.tests.test_residues.test_basic1()
sympy.series.tests.test_residues.test_basic2()
sympy.series.tests.test_residues.test_bug()
sympy.series.tests.test_residues.test_expressions()
sympy.series.tests.test_residues.test_expressions_failing()
sympy.series.tests.test_residues.test_f()
sympy.series.tests.test_residues.test_functions()
sympy.series.tests.test_residues.test_issue_14037()
sympy.series.tests.test_residues.test_issue_21176()
sympy.series.tests.test_residues.test_issue_21177()
sympy.series.tests.test_residues.test_issue_5654()
sympy.series.tests.test_residues.test_issue_6499()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_formal.py----------------------------------------
A:sympy.series.tests.test_formal.(x, y, z)->symbols('x y z')
A:sympy.series.tests.test_formal.(n, m, k)->symbols('n m k', integer=True)
A:sympy.series.tests.test_formal.f->asech(x)
A:sympy.series.tests.test_formal.fp->fps(f, x)
A:sympy.series.tests.test_formal.fd->fps(exp(sqrt(x))).diff()
A:sympy.series.tests.test_formal.f3->fps(exp(sqrt(x)))
A:sympy.series.tests.test_formal.fi->f2.integrate(x)
A:sympy.series.tests.test_formal.fprod->f1.product(f2, x)
A:sympy.series.tests.test_formal.fcomp->f1.compose(f2, x)
A:sympy.series.tests.test_formal.finv->f2.inverse(x)
sympy.series.tests.test_formal.test_exp_re()
sympy.series.tests.test_formal.test_fps()
sympy.series.tests.test_formal.test_fps__Add_expr()
sympy.series.tests.test_formal.test_fps__asymptotic()
sympy.series.tests.test_formal.test_fps__compose()
sympy.series.tests.test_formal.test_fps__fractional()
sympy.series.tests.test_formal.test_fps__hyper()
sympy.series.tests.test_formal.test_fps__inverse()
sympy.series.tests.test_formal.test_fps__logarithmic_singularity()
sympy.series.tests.test_formal.test_fps__logarithmic_singularity_fail()
sympy.series.tests.test_formal.test_fps__operations()
sympy.series.tests.test_formal.test_fps__product()
sympy.series.tests.test_formal.test_fps__rational()
sympy.series.tests.test_formal.test_fps__slow()
sympy.series.tests.test_formal.test_fps_shift()
sympy.series.tests.test_formal.test_fps_symbolic()
sympy.series.tests.test_formal.test_hyper_re()
sympy.series.tests.test_formal.test_rational_algorithm()
sympy.series.tests.test_formal.test_rational_independent()
sympy.series.tests.test_formal.test_simpleDE()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_limits.py----------------------------------------
A:sympy.series.tests.test_limits.n->Symbol('n')
A:sympy.series.tests.test_limits.(a, b, c)->symbols('a b c', positive=True)
A:sympy.series.tests.test_limits.(tau, x)->symbols('tau x', positive=True)
A:sympy.series.tests.test_limits.func2->Piecewise((x ** 2 / 2, x <= 0.5), (x / 2 - 0.125, True))
A:sympy.series.tests.test_limits.func3->Piecewise(((x - 9) / 5, x < -1), ((x - 9) / 5, x > 4), (sqrt(Abs(x - 3)), True))
A:sympy.series.tests.test_limits.x->Symbol('x')
A:sympy.series.tests.test_limits.z->symbols('z', positive=True, integer=True)
A:sympy.series.tests.test_limits.f->log(log(log(1 / x)))
A:sympy.series.tests.test_limits.l->Limit(f, x, oo)
A:sympy.series.tests.test_limits.t1->Mul(AccumBounds(lo, hi), 1 / (-1 + cos(1)), evaluate=False)
A:sympy.series.tests.test_limits.t2->Mul(AccumBounds(-1 + sin(1) / 2, sin(1) / 2 + 1), 1 / (1 - cos(1)))
A:sympy.series.tests.test_limits.tests->list(product([cot, tan], [-pi / 2, 0, pi / 2, pi, pi * Rational(3, 2)], ['-', '+']))
A:sympy.series.tests.test_limits.r->Symbol('r', positive=True)
A:sympy.series.tests.test_limits.eq->f(x)
A:sympy.series.tests.test_limits.c->Symbol('c', positive=True)
A:sympy.series.tests.test_limits.p->Symbol('p', zero=True)
A:sympy.series.tests.test_limits.m->Symbol('m', nonzero=True)
A:sympy.series.tests.test_limits.expr->expr.subs(c, c + 1).subs(c, c + 1)
A:sympy.series.tests.test_limits.a->Symbol('a')
A:sympy.series.tests.test_limits.dx->Symbol('dx')
A:sympy.series.tests.test_limits.G->meijerg((), (), (1,), (0,), -x)
A:sympy.series.tests.test_limits.g->Symbol('g', positive=True)
A:sympy.series.tests.test_limits.(d, t)->symbols('d t', positive=True)
A:sympy.series.tests.test_limits.k->symbols('k')
A:sympy.series.tests.test_limits.lamda->Symbol('lamda', positive=True)
A:sympy.series.tests.test_limits.(s, x)->symbols('s x', real=True)
A:sympy.series.tests.test_limits.(x, y, a)->symbols('x, y, a')
A:sympy.series.tests.test_limits.(r, z, x)->symbols('r z x', real=True)
A:sympy.series.tests.test_limits.(a, b, s0, K, F0, s, T)->symbols('a b s0 K F0 s T', positive=True, real=True)
A:sympy.series.tests.test_limits.d->((1 - 1 / x) ** x).diff(x)
A:sympy.series.tests.test_limits.(a, b)->symbols('a b', positive=True)
A:sympy.series.tests.test_limits.(a, b, c, x)->symbols('a b c x', positive=True)
A:sympy.series.tests.test_limits.(m, vi)->symbols('m vi', positive=True)
A:sympy.series.tests.test_limits.(B, ti, d)->symbols('B ti d')
A:sympy.series.tests.test_limits.beta->Symbol('beta', positive=True)
A:sympy.series.tests.test_limits.h->Symbol('h', positive=True)
A:sympy.series.tests.test_limits.w->Symbol('omega', positive=True)
A:sympy.series.tests.test_limits.e->exp(1)
A:sympy.series.tests.test_limits.out->limit((x ** (x + 1) * (log(x) + 1) + 1) / x, x, 11)
A:sympy.series.tests.test_limits.I->integrate(1 / (pi * (1 + (x - a) ** 2)), x)
A:sympy.series.tests.test_limits.expr2->sqrt(-I * x ** 2 + I * x - 3)
A:sympy.series.tests.test_limits.(k, n)->symbols('k, n', positive=True)
A:sympy.series.tests.test_limits.expr1->sqrt(-I * x ** 2 + x - 3)
A:sympy.series.tests.test_limits.fx->log(tan(pi / 2 * tanh(x))).diff(x)
sympy.series.tests.test_limits.test_Limit()
sympy.series.tests.test_limits.test_Limit_dir()
sympy.series.tests.test_limits.test_atan()
sympy.series.tests.test_limits.test_basic1()
sympy.series.tests.test_limits.test_basic2()
sympy.series.tests.test_limits.test_basic3()
sympy.series.tests.test_limits.test_basic4()
sympy.series.tests.test_limits.test_basic5()
sympy.series.tests.test_limits.test_bessel_functions_at_infinity()
sympy.series.tests.test_limits.test_branch_cuts()
sympy.series.tests.test_limits.test_calculate_series()
sympy.series.tests.test_limits.test_ceiling()
sympy.series.tests.test_limits.test_ceiling_requires_robust_assumptions()
sympy.series.tests.test_limits.test_doit()
sympy.series.tests.test_limits.test_doit2()
sympy.series.tests.test_limits.test_exponential()
sympy.series.tests.test_limits.test_exponential2()
sympy.series.tests.test_limits.test_extended_real_line()
sympy.series.tests.test_limits.test_factorial()
sympy.series.tests.test_limits.test_floor()
sympy.series.tests.test_limits.test_floor_requires_robust_assumptions()
sympy.series.tests.test_limits.test_frac()
sympy.series.tests.test_limits.test_heuristic()
sympy.series.tests.test_limits.test_issue_10102()
sympy.series.tests.test_limits.test_issue_10610()
sympy.series.tests.test_limits.test_issue_10801()
sympy.series.tests.test_limits.test_issue_10868()
sympy.series.tests.test_limits.test_issue_10976()
sympy.series.tests.test_limits.test_issue_10978()
sympy.series.tests.test_limits.test_issue_11496()
sympy.series.tests.test_limits.test_issue_11879()
sympy.series.tests.test_limits.test_issue_12555()
sympy.series.tests.test_limits.test_issue_12564()
sympy.series.tests.test_limits.test_issue_12571()
sympy.series.tests.test_limits.test_issue_12769()
sympy.series.tests.test_limits.test_issue_13332()
sympy.series.tests.test_limits.test_issue_13382()
sympy.series.tests.test_limits.test_issue_13403()
sympy.series.tests.test_limits.test_issue_13416()
sympy.series.tests.test_limits.test_issue_13462()
sympy.series.tests.test_limits.test_issue_13571()
sympy.series.tests.test_limits.test_issue_13575()
sympy.series.tests.test_limits.test_issue_13715()
sympy.series.tests.test_limits.test_issue_13750()
sympy.series.tests.test_limits.test_issue_14276()
sympy.series.tests.test_limits.test_issue_14313_comment()
sympy.series.tests.test_limits.test_issue_14355()
sympy.series.tests.test_limits.test_issue_14377()
sympy.series.tests.test_limits.test_issue_14393()
sympy.series.tests.test_limits.test_issue_14411()
sympy.series.tests.test_limits.test_issue_14456()
sympy.series.tests.test_limits.test_issue_14514()
sympy.series.tests.test_limits.test_issue_14556()
sympy.series.tests.test_limits.test_issue_14574()
sympy.series.tests.test_limits.test_issue_14590()
sympy.series.tests.test_limits.test_issue_14793()
sympy.series.tests.test_limits.test_issue_14811()
sympy.series.tests.test_limits.test_issue_15055()
sympy.series.tests.test_limits.test_issue_15146()
sympy.series.tests.test_limits.test_issue_15202()
sympy.series.tests.test_limits.test_issue_15282()
sympy.series.tests.test_limits.test_issue_15323()
sympy.series.tests.test_limits.test_issue_15984()
sympy.series.tests.test_limits.test_issue_16222()
sympy.series.tests.test_limits.test_issue_16708()
sympy.series.tests.test_limits.test_issue_16714()
sympy.series.tests.test_limits.test_issue_16722()
sympy.series.tests.test_limits.test_issue_17325()
sympy.series.tests.test_limits.test_issue_17431()
sympy.series.tests.test_limits.test_issue_17671()
sympy.series.tests.test_limits.test_issue_17751()
sympy.series.tests.test_limits.test_issue_17792()
sympy.series.tests.test_limits.test_issue_18118()
sympy.series.tests.test_limits.test_issue_18306()
sympy.series.tests.test_limits.test_issue_18378()
sympy.series.tests.test_limits.test_issue_18399()
sympy.series.tests.test_limits.test_issue_18442()
sympy.series.tests.test_limits.test_issue_18452()
sympy.series.tests.test_limits.test_issue_18473()
sympy.series.tests.test_limits.test_issue_18482()
sympy.series.tests.test_limits.test_issue_18508()
sympy.series.tests.test_limits.test_issue_18521()
sympy.series.tests.test_limits.test_issue_18969()
sympy.series.tests.test_limits.test_issue_18992()
sympy.series.tests.test_limits.test_issue_19067()
sympy.series.tests.test_limits.test_issue_19154()
sympy.series.tests.test_limits.test_issue_19453()
sympy.series.tests.test_limits.test_issue_19586()
sympy.series.tests.test_limits.test_issue_19739()
sympy.series.tests.test_limits.test_issue_19766()
sympy.series.tests.test_limits.test_issue_19770()
sympy.series.tests.test_limits.test_issue_20365()
sympy.series.tests.test_limits.test_issue_20578()
sympy.series.tests.test_limits.test_issue_21031()
sympy.series.tests.test_limits.test_issue_21038()
sympy.series.tests.test_limits.test_issue_21227()
sympy.series.tests.test_limits.test_issue_21415()
sympy.series.tests.test_limits.test_issue_21530()
sympy.series.tests.test_limits.test_issue_21550()
sympy.series.tests.test_limits.test_issue_21661()
sympy.series.tests.test_limits.test_issue_21701()
sympy.series.tests.test_limits.test_issue_21721()
sympy.series.tests.test_limits.test_issue_21756()
sympy.series.tests.test_limits.test_issue_21785()
sympy.series.tests.test_limits.test_issue_22181()
sympy.series.tests.test_limits.test_issue_22220()
sympy.series.tests.test_limits.test_issue_22334()
sympy.series.tests.test_limits.test_issue_23231()
sympy.series.tests.test_limits.test_issue_23596()
sympy.series.tests.test_limits.test_issue_23752()
sympy.series.tests.test_limits.test_issue_24276()
sympy.series.tests.test_limits.test_issue_2929()
sympy.series.tests.test_limits.test_issue_3792()
sympy.series.tests.test_limits.test_issue_3871()
sympy.series.tests.test_limits.test_issue_3885()
sympy.series.tests.test_limits.test_issue_3934()
sympy.series.tests.test_limits.test_issue_4090()
sympy.series.tests.test_limits.test_issue_4099()
sympy.series.tests.test_limits.test_issue_4503()
sympy.series.tests.test_limits.test_issue_4546()
sympy.series.tests.test_limits.test_issue_4547()
sympy.series.tests.test_limits.test_issue_5164()
sympy.series.tests.test_limits.test_issue_5172()
sympy.series.tests.test_limits.test_issue_5183()
sympy.series.tests.test_limits.test_issue_5184()
sympy.series.tests.test_limits.test_issue_5229()
sympy.series.tests.test_limits.test_issue_5383()
sympy.series.tests.test_limits.test_issue_5436()
sympy.series.tests.test_limits.test_issue_5740()
sympy.series.tests.test_limits.test_issue_5955()
sympy.series.tests.test_limits.test_issue_6052()
sympy.series.tests.test_limits.test_issue_6364()
sympy.series.tests.test_limits.test_issue_6366()
sympy.series.tests.test_limits.test_issue_6560()
sympy.series.tests.test_limits.test_issue_6599()
sympy.series.tests.test_limits.test_issue_6682()
sympy.series.tests.test_limits.test_issue_7088()
sympy.series.tests.test_limits.test_issue_7224()
sympy.series.tests.test_limits.test_issue_7535()
sympy.series.tests.test_limits.test_issue_8208()
sympy.series.tests.test_limits.test_issue_8229()
sympy.series.tests.test_limits.test_issue_8433()
sympy.series.tests.test_limits.test_issue_8462()
sympy.series.tests.test_limits.test_issue_8481()
sympy.series.tests.test_limits.test_issue_8634()
sympy.series.tests.test_limits.test_issue_8635_18176()
sympy.series.tests.test_limits.test_issue_8730()
sympy.series.tests.test_limits.test_issue_9041()
sympy.series.tests.test_limits.test_issue_9205()
sympy.series.tests.test_limits.test_issue_9252()
sympy.series.tests.test_limits.test_issue_9471()
sympy.series.tests.test_limits.test_issue_9558()
sympy.series.tests.test_limits.test_issues_14525()
sympy.series.tests.test_limits.test_limit_with_Float()
sympy.series.tests.test_limits.test_log()
sympy.series.tests.test_limits.test_newissue()
sympy.series.tests.test_limits.test_order_oo()
sympy.series.tests.test_limits.test_piecewise()
sympy.series.tests.test_limits.test_piecewise2()
sympy.series.tests.test_limits.test_polynomial()
sympy.series.tests.test_limits.test_rational()
sympy.series.tests.test_limits.test_series_AccumBounds()
sympy.series.tests.test_limits.test_set_signs()
sympy.series.tests.test_limits.test_sympyissue_22986()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_nseries.py----------------------------------------
A:sympy.series.tests.test_nseries.l->Symbol('l')
A:sympy.series.tests.test_nseries.e->log(sin(2 * w) / w)
A:sympy.series.tests.test_nseries.w->Symbol('w')
A:sympy.series.tests.test_nseries.logw->Symbol('logw')
A:sympy.series.tests.test_nseries.p->Rational(3, 2)
A:sympy.series.tests.test_nseries.x->Symbol('x', negative=True)
A:sympy.series.tests.test_nseries.f->sqrt(1 - sqrt(y))
A:sympy.series.tests.test_nseries.(w, i)->symbols('w,i')
A:sympy.series.tests.test_nseries.a->Symbol('a')
A:sympy.series.tests.test_nseries.(a, b)->symbols('a,b')
A:sympy.series.tests.test_nseries.sx->sqrt(x + z).series(z, 0, 1)
A:sympy.series.tests.test_nseries.sxy->sqrt(x + y + z).series(z, 0, 1)
sympy.series.tests.test_nseries.test_abs()
sympy.series.tests.test_nseries.test_bug2()
sympy.series.tests.test_nseries.test_bug3()
sympy.series.tests.test_nseries.test_bug4()
sympy.series.tests.test_nseries.test_bug5()
sympy.series.tests.test_nseries.test_cdir()
sympy.series.tests.test_nseries.test_ceiling()
sympy.series.tests.test_nseries.test_dir()
sympy.series.tests.test_nseries.test_exp()
sympy.series.tests.test_nseries.test_exp2()
sympy.series.tests.test_nseries.test_exp_1()
sympy.series.tests.test_nseries.test_exp_2()
sympy.series.tests.test_nseries.test_exp_sqrt_1()
sympy.series.tests.test_nseries.test_expbug4()
sympy.series.tests.test_nseries.test_expbug5()
sympy.series.tests.test_nseries.test_expsinbug()
sympy.series.tests.test_nseries.test_floor()
sympy.series.tests.test_nseries.test_frac()
sympy.series.tests.test_nseries.test_generalexponent()
sympy.series.tests.test_nseries.test_genexp_x()
sympy.series.tests.test_nseries.test_genexp_x2()
sympy.series.tests.test_nseries.test_geometric_1()
sympy.series.tests.test_nseries.test_hyperbolic()
sympy.series.tests.test_nseries.test_issue_3204()
sympy.series.tests.test_nseries.test_issue_3224()
sympy.series.tests.test_nseries.test_issue_3258()
sympy.series.tests.test_nseries.test_issue_3463()
sympy.series.tests.test_nseries.test_issue_3501()
sympy.series.tests.test_nseries.test_issue_3502()
sympy.series.tests.test_nseries.test_issue_3503()
sympy.series.tests.test_nseries.test_issue_3504()
sympy.series.tests.test_nseries.test_issue_3505()
sympy.series.tests.test_nseries.test_issue_3506()
sympy.series.tests.test_nseries.test_issue_3507()
sympy.series.tests.test_nseries.test_issue_3508()
sympy.series.tests.test_nseries.test_issue_3515()
sympy.series.tests.test_nseries.test_issue_3639()
sympy.series.tests.test_nseries.test_issue_4115()
sympy.series.tests.test_nseries.test_issue_4329()
sympy.series.tests.test_nseries.test_issue_4441()
sympy.series.tests.test_nseries.test_issue_5183()
sympy.series.tests.test_nseries.test_issue_5654()
sympy.series.tests.test_nseries.test_issue_5925()
sympy.series.tests.test_nseries.test_log2()
sympy.series.tests.test_nseries.test_log3()
sympy.series.tests.test_nseries.test_log_power1()
sympy.series.tests.test_nseries.test_log_series()
sympy.series.tests.test_nseries.test_log_singular1()
sympy.series.tests.test_nseries.test_logbug4()
sympy.series.tests.test_nseries.test_mul_0()
sympy.series.tests.test_nseries.test_mul_1()
sympy.series.tests.test_nseries.test_pole()
sympy.series.tests.test_nseries.test_pow_0()
sympy.series.tests.test_nseries.test_pow_1()
sympy.series.tests.test_nseries.test_power_x_x1()
sympy.series.tests.test_nseries.test_power_x_x2()
sympy.series.tests.test_nseries.test_series1()
sympy.series.tests.test_nseries.test_series1_failing()
sympy.series.tests.test_nseries.test_series2()
sympy.series.tests.test_nseries.test_series2x()
sympy.series.tests.test_nseries.test_series3()
sympy.series.tests.test_nseries.test_seriesbug1()
sympy.series.tests.test_nseries.test_seriesbug2()
sympy.series.tests.test_nseries.test_seriesbug2b()
sympy.series.tests.test_nseries.test_seriesbug2c()
sympy.series.tests.test_nseries.test_seriesbug2d()
sympy.series.tests.test_nseries.test_simple_1()
sympy.series.tests.test_nseries.test_sin()
sympy.series.tests.test_nseries.test_sinsinbug()
sympy.series.tests.test_nseries.test_sqrt_1()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_aseries.py----------------------------------------
A:sympy.series.tests.test_aseries.e->sin(1 / x + exp(-x))
A:sympy.series.tests.test_aseries.n->Symbol('n', integer=True)
sympy.series.tests.test_aseries.test_hierarchical()
sympy.series.tests.test_aseries.test_simple()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_order.py----------------------------------------
A:sympy.series.tests.test_order.o->Rational(0)
A:sympy.series.tests.test_order.y->Symbol('y', imaginary=True)
A:sympy.series.tests.test_order.z->Symbol('z', complex=True)
A:sympy.series.tests.test_order.(a, b)->symbols('a b')
A:sympy.series.tests.test_order.f->Function('f')
A:sympy.series.tests.test_order.x->Symbol('x', real=True)
A:sympy.series.tests.test_order.A->Symbol('A', commutative=False)
sympy.series.tests.test_order.test_O1()
sympy.series.tests.test_order.test_add_1()
sympy.series.tests.test_order.test_as_expr_variables()
sympy.series.tests.test_order.test_caching_bug()
sympy.series.tests.test_order.test_contains()
sympy.series.tests.test_order.test_contains_0()
sympy.series.tests.test_order.test_contains_1()
sympy.series.tests.test_order.test_contains_2()
sympy.series.tests.test_order.test_contains_3()
sympy.series.tests.test_order.test_contains_4()
sympy.series.tests.test_order.test_diff()
sympy.series.tests.test_order.test_eval()
sympy.series.tests.test_order.test_free_symbols()
sympy.series.tests.test_order.test_getO()
sympy.series.tests.test_order.test_getn()
sympy.series.tests.test_order.test_issue_14622()
sympy.series.tests.test_order.test_issue_15539()
sympy.series.tests.test_order.test_issue_18606()
sympy.series.tests.test_order.test_issue_22165()
sympy.series.tests.test_order.test_issue_23231()
sympy.series.tests.test_order.test_issue_3468()
sympy.series.tests.test_order.test_issue_4279()
sympy.series.tests.test_order.test_issue_4855()
sympy.series.tests.test_order.test_issue_6753()
sympy.series.tests.test_order.test_issue_9192()
sympy.series.tests.test_order.test_issue_9351()
sympy.series.tests.test_order.test_issue_9910()
sympy.series.tests.test_order.test_issue_9917()
sympy.series.tests.test_order.test_leading_order()
sympy.series.tests.test_order.test_leading_order2()
sympy.series.tests.test_order.test_leading_term()
sympy.series.tests.test_order.test_ln_args()
sympy.series.tests.test_order.test_mixing_order_at_zero_and_infinity()
sympy.series.tests.test_order.test_multivar_0()
sympy.series.tests.test_order.test_multivar_0a()
sympy.series.tests.test_order.test_multivar_1()
sympy.series.tests.test_order.test_multivar_2()
sympy.series.tests.test_order.test_multivar_3()
sympy.series.tests.test_order.test_multivar_mul_1()
sympy.series.tests.test_order.test_nan()
sympy.series.tests.test_order.test_order_at_infinity()
sympy.series.tests.test_order.test_order_at_some_point()
sympy.series.tests.test_order.test_order_conjugate_transpose()
sympy.series.tests.test_order.test_order_leadterm()
sympy.series.tests.test_order.test_order_noncommutative()
sympy.series.tests.test_order.test_order_subs_limits()
sympy.series.tests.test_order.test_order_symbols()
sympy.series.tests.test_order.test_performance_of_adding_order()
sympy.series.tests.test_order.test_simple_1()
sympy.series.tests.test_order.test_simple_2()
sympy.series.tests.test_order.test_simple_3()
sympy.series.tests.test_order.test_simple_4()
sympy.series.tests.test_order.test_simple_5()
sympy.series.tests.test_order.test_simple_6()
sympy.series.tests.test_order.test_simple_7()
sympy.series.tests.test_order.test_simple_8()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_demidovich.py----------------------------------------
A:sympy.series.tests.test_demidovich.x->Symbol('x')
A:sympy.series.tests.test_demidovich.a->Symbol('a')
A:sympy.series.tests.test_demidovich.h->Symbol('h')
A:sympy.series.tests.test_demidovich.m->Symbol('m')
A:sympy.series.tests.test_demidovich.n->Symbol('n')
sympy.series.tests.test_demidovich.root3(x)
sympy.series.tests.test_demidovich.root4(x)
sympy.series.tests.test_demidovich.test_Limits_simple_0()
sympy.series.tests.test_demidovich.test_Limits_simple_1()
sympy.series.tests.test_demidovich.test_Limits_simple_2()
sympy.series.tests.test_demidovich.test_Limits_simple_3a()
sympy.series.tests.test_demidovich.test_Limits_simple_3b()
sympy.series.tests.test_demidovich.test_Limits_simple_4a()
sympy.series.tests.test_demidovich.test_Limits_simple_4b()
sympy.series.tests.test_demidovich.test_Limits_simple_4c()
sympy.series.tests.test_demidovich.test_bounded()
sympy.series.tests.test_demidovich.test_f1a()
sympy.series.tests.test_demidovich.test_f1a2()
sympy.series.tests.test_demidovich.test_f1b()
sympy.series.tests.test_demidovich.test_f2()
sympy.series.tests.test_demidovich.test_f2a()
sympy.series.tests.test_demidovich.test_f3()
sympy.series.tests.test_demidovich.test_leadterm()
sympy.series.tests.test_demidovich.test_limits_simple_4aa()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_series.py----------------------------------------
A:sympy.series.tests.test_series.e1->exp(cos(x)).series(x, 0)
A:sympy.series.tests.test_series.e2->series(exp(cos(x)), x, 0)
A:sympy.series.tests.test_series.e->cos(x).series(x, 1, n=None, dir='-')
A:sympy.series.tests.test_series.logx->Symbol('logx')
A:sympy.series.tests.test_series.p->Symbol('p', positive=True)
A:sympy.series.tests.test_series.expr->(exp(x) / x).series(x, n=None)
A:sympy.series.tests.test_series.subs1->Subs(sin(x), x, y)
A:sympy.series.tests.test_series.subs2->Subs(sin(x) * cos(z), x, y)
A:sympy.series.tests.test_series.subs3->Subs(sin(x * z), (x, z), (y, x))
A:sympy.series.tests.test_series.f->log(x / (1 - x))
A:sympy.series.tests.test_series.A->Sum(Integer(-1) ** (k + 1) / k, (k, 1, n))
A:sympy.series.tests.test_series.(a, b)->symbols('a, b', positive=True)
A:sympy.series.tests.test_series.beta->symbols('beta', positive=True)
A:sympy.series.tests.test_series.(theta, varphi)->symbols('theta varphi', real=True)
A:sympy.series.tests.test_series.(x, a)->symbols('x a')
A:sympy.series.tests.test_series.dt->symbols('dt', real=True)
A:sympy.series.tests.test_series.(a, b, c, x)->symbols('a b c x')
A:sympy.series.tests.test_series.(p_0, p_1, p_2, p_3, b_0, b_1, b_2)->symbols('p_0 p_1 p_2 p_3 b_0 b_1 b_2')
A:sympy.series.tests.test_series.result->(exp(x) / x).series(x, n=None).series(x, 0.5)
A:sympy.series.tests.test_series.res->series(sqrt(1 - x ** 2), x, 0.1)
sympy.series.tests.test_series.test_acceleration()
sympy.series.tests.test_series.test_cos()
sympy.series.tests.test_series.test_exp()
sympy.series.tests.test_series.test_exp2()
sympy.series.tests.test_series.test_exp_product_positive_factors()
sympy.series.tests.test_series.test_issue_10761()
sympy.series.tests.test_series.test_issue_11313()
sympy.series.tests.test_series.test_issue_11407()
sympy.series.tests.test_series.test_issue_11884()
sympy.series.tests.test_series.test_issue_12578()
sympy.series.tests.test_series.test_issue_12791()
sympy.series.tests.test_series.test_issue_14037()
sympy.series.tests.test_series.test_issue_14384()
sympy.series.tests.test_series.test_issue_14885()
sympy.series.tests.test_series.test_issue_15539()
sympy.series.tests.test_series.test_issue_18008()
sympy.series.tests.test_series.test_issue_18842()
sympy.series.tests.test_series.test_issue_19534()
sympy.series.tests.test_series.test_issue_20551()
sympy.series.tests.test_series.test_issue_20697()
sympy.series.tests.test_series.test_issue_21245()
sympy.series.tests.test_series.test_issue_21938()
sympy.series.tests.test_series.test_issue_23432()
sympy.series.tests.test_series.test_issue_23727()
sympy.series.tests.test_series.test_issue_3978()
sympy.series.tests.test_series.test_issue_4583()
sympy.series.tests.test_series.test_issue_5223()
sympy.series.tests.test_series.test_issue_5852()
sympy.series.tests.test_series.test_issue_6318()
sympy.series.tests.test_series.test_issue_6350()
sympy.series.tests.test_series.test_issue_7203()
sympy.series.tests.test_series.test_issue_7259()
sympy.series.tests.test_series.test_issue_8805()
sympy.series.tests.test_series.test_issue_9549()
sympy.series.tests.test_series.test_series_of_Subs()
sympy.series.tests.test_series.test_sin()
sympy.series.tests.test_series.test_x_is_base_detection()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_approximants.py----------------------------------------
A:sympy.series.tests.test_approximants.(x, t)->symbols('x,t')
A:sympy.series.tests.test_approximants.y->approximants(p, t, simplify=True)
sympy.series.tests.test_approximants.test_approximants()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/tests/test_kauers.py----------------------------------------
sympy.series.tests.test_kauers.test_finite_diff()
sympy.series.tests.test_kauers.test_finite_diff_kauers()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/benchmarks/bench_limit.py----------------------------------------
A:sympy.series.benchmarks.bench_limit.x->Symbol('x')
sympy.series.benchmarks.bench_limit.timeit_limit_1x()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/benchmarks/bench_order.py----------------------------------------
A:sympy.series.benchmarks.bench_order.x->Symbol('x')
sympy.series.benchmarks.bench_order.timeit_order_1x()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/series/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/index_methods.py----------------------------------------
A:sympy.tensor.index_methods.uniq->OrderedDict()
A:sympy.tensor.index_methods.(u, r)->_unique_and_repeated(inds)
A:sympy.tensor.index_methods.inds->list(map(get_indices, expr.args))
A:sympy.tensor.index_methods.(inds, syms)->list(zip(*inds))
A:sympy.tensor.index_methods.(inds, dummies)->_remove_repeated(c)
A:sympy.tensor.index_methods.(base, exp)->expr.as_base_exp()
A:sympy.tensor.index_methods.(binds, bsyms)->get_indices(base)
A:sympy.tensor.index_methods.(einds, esyms)->get_indices(exp)
A:sympy.tensor.index_methods.ind0->set()
A:sympy.tensor.index_methods.(ind, sym)->get_indices(arg)
A:sympy.tensor.index_methods.(junk, key)->_remove_repeated(expr.indices)
A:sympy.tensor.index_methods.(junk, junk, key)->_get_indices_Mul(expr, return_dummies=True)
A:sympy.tensor.index_methods.facd->get_contraction_structure(fac)
A:sympy.tensor.index_methods.(b, e)->expr.as_base_exp()
A:sympy.tensor.index_methods.dbase->get_contraction_structure(b)
A:sympy.tensor.index_methods.dexp->get_contraction_structure(e)
A:sympy.tensor.index_methods.d->get_contraction_structure(term)
A:sympy.tensor.index_methods.deep->get_contraction_structure(arg)
sympy.get_contraction_structure(expr)
sympy.get_indices(expr)
sympy.tensor.index_methods.IndexConformanceException(Exception)
sympy.tensor.index_methods._get_indices_Add(expr)
sympy.tensor.index_methods._get_indices_Mul(expr,return_dummies=False)
sympy.tensor.index_methods._get_indices_Pow(expr)
sympy.tensor.index_methods._remove_repeated(inds)
sympy.tensor.index_methods._unique_and_repeated(inds)
sympy.tensor.index_methods.get_contraction_structure(expr)
sympy.tensor.index_methods.get_indices(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/functions.py----------------------------------------
A:sympy.tensor.functions.evaluate->kwargs.get('evaluate', global_parameters.evaluate)
A:sympy.tensor.functions.obj->sympy.core.expr.Expr.__new__(cls, *newargs, **kwargs)
A:sympy.tensor.functions.shape_list->self._get_args_shapes()
A:sympy.tensor.functions.index->iter(index)
sympy.shape(expr)
sympy.tensor.functions.NoShapeError(Exception)
sympy.tensor.functions.TensorProduct(cls,*args,**kwargs)
sympy.tensor.functions.TensorProduct.__getitem__(self,index)
sympy.tensor.functions.TensorProduct._get_args_shapes(self)
sympy.tensor.functions.TensorProduct.rank(self)
sympy.tensor.functions.TensorProduct.shape(self)
sympy.tensor.functions.shape(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/toperators.py----------------------------------------
A:sympy.tensor.toperators.(args, indices, free, dum)->self._contract_indices_for_derivative(self.expr, self.variables)
A:sympy.tensor.toperators.obj->self.func(*args)
A:sympy.tensor.toperators.i_free_indices->i.get_free_indices()
A:sympy.tensor.toperators.i_indices->args[i].xreplace({k: -k for k in i_indices}).get_free_indices()
A:sympy.tensor.toperators.args[i]->args[i].xreplace({k: -k for k in i_indices}).xreplace({k: -k for k in i_indices})
A:sympy.tensor.toperators.result->result._eval_derivative(v)._eval_derivative(v)
A:sympy.tensor.toperators.mulargs->list(obj.expr.args)
A:sympy.tensor.toperators.d->self.func(mulargs[ind], *obj.variables)._expand_partial_derivative()
A:sympy.tensor.toperators.free->sorted(self._free, key=lambda x: x[1])
A:sympy.tensor.toperators.expr->self.expr.xreplace(repl)
A:sympy.tensor.toperators.(indices, array)->self.expr._extract_data(replacement_dict)
A:sympy.tensor.toperators.(var_indices, var_array)->variable._extract_data(replacement_dict)
A:sympy.tensor.toperators.(coeff_array, var_array)->zip(*[i.as_coeff_Mul() for i in var_array])
A:sympy.tensor.toperators.dim_before->len(array.shape)
A:sympy.tensor.toperators.array->tensorcontraction(array, (0, pos + 1))
A:sympy.tensor.toperators.dim_after->len(array.shape)
A:sympy.tensor.toperators.pos->indices.index(-varindex)
sympy.tensor.toperators.PartialDerivative(cls,expr,*variables)
sympy.tensor.toperators.PartialDerivative._contract_indices_for_derivative(cls,expr,variables)
sympy.tensor.toperators.PartialDerivative._expand_partial_derivative(self)
sympy.tensor.toperators.PartialDerivative._extract_data(self,replacement_dict)
sympy.tensor.toperators.PartialDerivative._perform_derivative(self)
sympy.tensor.toperators.PartialDerivative._replace_indices(self,repl)
sympy.tensor.toperators.PartialDerivative.coeff(self)
sympy.tensor.toperators.PartialDerivative.doit(self,**hints)
sympy.tensor.toperators.PartialDerivative.expr(self)
sympy.tensor.toperators.PartialDerivative.get_free_indices(self)
sympy.tensor.toperators.PartialDerivative.get_indices(self)
sympy.tensor.toperators.PartialDerivative.nocoeff(self)
sympy.tensor.toperators.PartialDerivative.variables(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tensor.py----------------------------------------
A:sympy.tensor.tensor.(free, dum)->_IndexStructure._free_dum_from_indices(*indices)
A:sympy.tensor.tensor.indices->cls._parse_indices(tensor_head, indices)
A:sympy.tensor.tensor.n->line.index(min(line))
A:sympy.tensor.tensor.generate_dummy_name->_IndexStructure._get_generator_for_dummy_indices(free)
A:sympy.tensor.tensor.indname->generate_dummy_name(typ1)
A:sympy.tensor.tensor.indices[pos1]->TensorIndex(indname, typ1, True)
A:sympy.tensor.tensor.indices[pos2]->TensorIndex(indname, typ1, False)
A:sympy.tensor.tensor.cdt->defaultdict(int)
A:sympy.tensor.tensor.cdt[indx.tensor_index_type]->max(cdt[indx.tensor_index_type], int(indx.name.split('_')[1]) + 1)
A:sympy.tensor.tensor.nd->str(cdt[tensor_index_type])
A:sympy.tensor.tensor.new_indices->list(indices)
A:sympy.tensor.tensor.new_indices[ipos1]->TensorIndex(indname, typ1, True)
A:sympy.tensor.tensor.new_indices[ipos2]->TensorIndex(indname, typ1, False)
A:sympy.tensor.tensor.free->self.substitute_indices(*list(zip(free_args, indices))).get_free_indices()
A:sympy.tensor.tensor.lex_index_types->self._get_lexicographically_sorted_index_types()
A:sympy.tensor.tensor.lex_indices->self._get_lexicographically_sorted_indices()
A:sympy.tensor.tensor.nfree->len(sorted_free)
A:sympy.tensor.tensor.(idum, cov)->divmod(j, 2)
A:sympy.tensor.tensor.pos->len(self.free)
A:sympy.tensor.tensor.j->len(self.free)
A:sympy.tensor.tensor.comm->_TensorManager().get_comm(h.comm, h.comm)
A:sympy.tensor.tensor.dat->self._get(key)
A:sympy.tensor.tensor.signature->tuple([i.is_up for i in tensmul_args[0].get_indices()])
A:sympy.tensor.tensor.coeff->reduce(operator.mul, [a for a in self.args if not isinstance(a, TensExpr)], S.One)
A:sympy.tensor.tensor.data_result->self.data_contract_dum(data_list, key.dum, key.ext_rank)
A:sympy.tensor.tensor.arrays->list(map(MutableDenseNDimArray, ndarray_list))
A:sympy.tensor.tensor.prodarr->tensorproduct(*arrays)
A:sympy.tensor.tensor.newdata->self.data_tensorhead_from_tensmul(data, key, tensorhead)
A:sympy.tensor.tensor.permute_axes->list(map(gener, range(rank)))
A:sympy.tensor.tensor.data_swapped->permutedims(data_swapped, permute_axes)
A:sympy.tensor.tensor.data->_TensorDataLazyEvaluator.parse_data(data)
A:sympy.tensor.tensor.(key, data)->self._assign_data_to_tensor_expr(key, data)
A:sympy.tensor.tensor.inverse_transpose->self.inverse_transpose_matrix(data)
A:sympy.tensor.tensor.m->ind.matches(e_ind)
A:sympy.tensor.tensor.invt->self.inverse_transpose_matrix(data).tomatrix()
A:sympy.tensor.tensor.mdim->tensorcontraction(tensorproduct(marray, metric[0].tensor_index_type.data, marray), (0, mdim), (mdim + 1, mdim + 2)).rank()
A:sympy.tensor.tensor.ddim->_TensorDataLazyEvaluator.parse_data(data).rank()
A:sympy.tensor.tensor.new_data->permutedims(new_data, (i, j))
A:sympy.tensor.tensor._TensorDataLazyEvaluator._substitutions_dict[new_tensmul]->sorted_compo()
A:sympy.tensor.tensor._tensor_data_substitution_dict->_TensorDataLazyEvaluator()
A:sympy.tensor.tensor.TensorManager->_TensorManager()
A:sympy.tensor.tensor.name->'_i{}'.format(len(tensor_index_type._autogenerated))
A:sympy.tensor.tensor.dummy_name->dummy_name_gen(index_type)
A:sympy.tensor.tensor.dim->sympify(dim)
A:sympy.tensor.tensor.eps_dim->sympify(eps_dim)
A:sympy.tensor.tensor.metric_symmetry->sympify(metric_symmetry)
A:sympy.tensor.tensor.metric_name->Symbol(metric_name)
A:sympy.tensor.tensor.metric->_TensorDataLazyEvaluator.inverse_matrix(metric)
A:sympy.tensor.tensor.obj->sympy.core.Basic.__new__(cls, tensor_head, Tuple(*indices))
A:sympy.tensor.tensor.symmetry->TensorSymmetry.no_symmetry(len(index_types))
A:sympy.tensor.tensor.newndarray->array.MutableDenseNDimArray.zeros(dim, dim)
A:sympy.tensor.tensor.delta->self.get_kronecker_delta()
A:sympy.tensor.tensor.i1->TensorIndex('i1', self)
A:sympy.tensor.tensor.i2->TensorIndex('i2', self)
A:sympy.tensor.tensor.delta(i1, -i2).data->_TensorDataLazyEvaluator.parse_data(eye(dim1))
A:sympy.tensor.tensor.sym2->TensorSymmetry(get_symmetric_group_sgs(2))
A:sympy.tensor.tensor.sym->tensorsymmetry(*sym)
A:sympy.tensor.tensor.epsilon->TensorHead('Eps', [self] * self._eps_dim, sym)
A:sympy.tensor.tensor.name_symbol->Symbol(name)
A:sympy.tensor.tensor.is_up->sympify(is_up)
A:sympy.tensor.tensor.t1->WildTensorIndex(self.name, self.tensor_index_type, not self.is_up, self.ignore_updown)
A:sympy.tensor.tensor.base->Tuple(*base)
A:sympy.tensor.tensor.generators->Tuple(*generators)
A:sympy.tensor.tensor.bsgs->get_symmetric_group_sgs(n)
A:sympy.tensor.tensor.bsgs2->get_symmetric_group_sgs(-arg, True)
A:sympy.tensor.tensor.(base, sgs)->bsgs_direct_product(base, sgs, basex, sgsx)
A:sympy.tensor.tensor.(basex, sgsx)->tableau2bsgs(a)
A:sympy.tensor.tensor.obj.comm->_TensorManager().comm_symbols2i(comm)
A:sympy.tensor.tensor.r->_TensorManager().get_comm(self.comm, other.comm)
A:sympy.tensor.tensor.idx->idx.strip().replace(' ', '').strip().replace(' ', '')
A:sympy.tensor.tensor.tensor->WildTensor(self, indices, **kwargs)
A:sympy.tensor.tensor.marraydim->tensorcontraction(tensorproduct(marray, metric[0].tensor_index_type.data, marray), (0, mdim), (mdim + 1, mdim + 2)).rank()
A:sympy.tensor.tensor.marray->tensorcontraction(tensorproduct(marray, metric[0].tensor_index_type.data, marray), (0, mdim), (mdim + 1, mdim + 2))
A:sympy.tensor.tensor.other->_sympify(other)
A:sympy.tensor.tensor.indset->set()
A:sympy.tensor.tensor.dummy_set->self._get_dummy_indices_set()
A:sympy.tensor.tensor.free_set->self._get_free_indices_set()
A:sympy.tensor.tensor.array->array.__getitem__(slice_tuple).__getitem__(slice_tuple)
A:sympy.tensor.tensor.permu->list(range(dim))
A:sympy.tensor.tensor.pos2->free2remaining.index(-index1)
A:sympy.tensor.tensor.metric_inverse->_TensorDataLazyEvaluator.inverse_matrix(metric)
A:sympy.tensor.tensor.permutation->TensMul._get_indices_permutation(indices, ref_indices)
A:sympy.tensor.tensor.(ret_indices, array)->self.expr._extract_data(replacement_dict)
A:sympy.tensor.tensor.(last_indices, array)->self._match_indices_with_other_tensor(array, indices, ret_indices, replacement_dict)
A:sympy.tensor.tensor.expr->sympy.core.Mul.fromiter(args)
A:sympy.tensor.tensor.args->list(self.args)
A:sympy.tensor.tensor.deep->hints.get('deep', True)
A:sympy.tensor.tensor.x->get_index_structure(t)
A:sympy.tensor.tensor.indices0->get_indices_set(args[0])
A:sympy.tensor.tensor.terms_dict->defaultdict(list)
A:sympy.tensor.tensor.free_indices->property(lambda self: self._free_indices)
A:sympy.tensor.tensor.index_tuples->list(zip(free_args, indices))
A:sympy.tensor.tensor.res->self.substitute_indices(*list(zip(free_args, indices)))._set_new_index_structure(nim, is_canon_bp=is_canon_bp)
A:sympy.tensor.tensor.t->self.substitute_indices(*list(zip(free_args, indices)))
A:sympy.tensor.tensor.arg->arg.substitute_indices(*index_tuples).substitute_indices(*index_tuples)
A:sympy.tensor.tensor.s->s.replace('+ -', '- ').replace('+ -', '- ')
A:sympy.tensor.tensor.(args_indices, arrays)->zip(*[arg._extract_data(replacement_dict) for arg in self.args if isinstance(arg, TensExpr)])
A:sympy.tensor.tensor.arrays[i]->permutedims(array, permutation)
A:sympy.tensor.tensor.obj._index_structure->_IndexStructure.from_indices(*indices)
A:sympy.tensor.tensor.obj._index_map->sympy.core.Basic.__new__(cls, tensor_head, Tuple(*indices))._build_index_map(indices, obj._index_structure)
A:sympy.tensor.tensor.(args, indices, free, dum)->TensMul._tensMul_contract_indices(args)
A:sympy.tensor.tensor.indices[i]->TensorIndex(e, tensor_head.index_types[i], False)
A:sympy.tensor.tensor.(c, e)->index.as_coeff_Mul()
A:sympy.tensor.tensor.dummy_pos->set(itertools.chain(*self.dum))
A:sympy.tensor.tensor.(g, dummies, msym)->self.substitute_indices(*list(zip(free_args, indices)))._index_structure.indices_canon_args()
A:sympy.tensor.tensor.v->components_canon_args(t.components)
A:sympy.tensor.tensor.can->canonicalize(g, dummies, msym, *v)
A:sympy.tensor.tensor.indices1->self.get_indices()
A:sympy.tensor.tensor.indices2->_sympify(other).get_indices()
A:sympy.tensor.tensor.free_ind1->self.get_free_indices()
A:sympy.tensor.tensor.free_ind2->_sympify(other).get_free_indices()
A:sympy.tensor.tensor.dummy->TensorIndex(dummy_name, index_type, True)
A:sympy.tensor.tensor.kroneckerdelta->TensMul(tensor_metric(iself, dummy), tensor_index_type.delta(-dummy, -iother))
A:sympy.tensor.tensor.is_canon_bp->kw_args.pop('is_canon_bp', False)
A:sympy.tensor.tensor.dum_this->set(get_dummy_indices(arg))
A:sympy.tensor.tensor.dum_other->set(itertools.chain(*dum_other))
A:sympy.tensor.tensor.free_this->set(get_free_indices(arg))
A:sympy.tensor.tensor.exclude->set(self.get_indices())
A:sympy.tensor.tensor.newarg->TensMul._dedupe_indices(arg, exclude)
A:sympy.tensor.tensor.index_structure->_IndexStructure.from_components_free_dum(components, free, dum)
A:sympy.tensor.tensor.obj._rank->len(obj.free)
A:sympy.tensor.tensor.index_types->property(lambda self: self._index_types)
A:sympy.tensor.tensor.dum->TensMul._dummy_data_to_dum(dummy_data)
A:sympy.tensor.tensor.rank->property(lambda self: self._rank)
A:sympy.tensor.tensor.ext_rank->property(lambda self: self._ext_rank)
A:sympy.tensor.tensor.other_pos1->free2pos1.pop(-index)
A:sympy.tensor.tensor.other_pos2->free2pos2.pop(-index)
A:sympy.tensor.tensor.(indices, free, free_names, dummy_data)->TensMul._indices_to_free_dum(args_indices)
A:sympy.tensor.tensor.args[i]->arg.substitute_indices(*index_tuples).substitute_indices(*index_tuples)._set_indices(*indices[pos:pos + ext_rank])
A:sympy.tensor.tensor.rule->self._dedupe_indices_in_rule(rule)
A:sympy.tensor.tensor.tensors[i]->Tensor(component, indices[prev_pos:ind_pos])
A:sympy.tensor.tensor.arg_offset->self._get_position_offset_for_indices()
A:sympy.tensor.tensor.argpos->self._get_indices_to_args_pos()
A:sympy.tensor.tensor.c->cv[j - 1].commutes_with(cv[j])
A:sympy.tensor.tensor.typ1->sorted(set(cv[j - 1].component.index_types), key=lambda x: x.name)
A:sympy.tensor.tensor.typ2->sorted(set(cv[j].component.index_types), key=lambda x: x.name)
A:sympy.tensor.tensor.tmul->self.substitute_indices(*list(zip(free_args, indices))).perm2tensor(can, True)
A:sympy.tensor.tensor.pos_map->self._get_indices_to_args_pos()
A:sympy.tensor.tensor.elim->set()
A:sympy.tensor.tensor.im->_IndexStructure.from_components_free_dum(res.components, free, dum)
A:sympy.tensor.tensor.dums_new->set(get_dummy_indices(new))
A:sympy.tensor.tensor.free_new->set(get_free_indices(new))
A:sympy.tensor.tensor.conflicts->set(get_dummy_indices(new)).intersection(exclude)
A:sympy.tensor.tensor.gen->_IndexStructure._get_generator_for_dummy_indices(exclude_for_gen)
A:sympy.tensor.tensor.newname->gen(d.tensor_index_type)
A:sympy.tensor.tensor.new_d->arg._eval_derivative(s).func(newname, *d.args[1:])
A:sympy.tensor.tensor.new_renamed->TensMul._dedupe_indices(new, exclude)
A:sympy.tensor.tensor.d->arg.substitute_indices(*index_tuples).substitute_indices(*index_tuples)._eval_derivative(s)
A:sympy.tensor.tensor.expr_free_indices->sympy.core.Mul.fromiter(args).get_free_indices()
A:sympy.tensor.tensor.index_map->Dict(index_map)
A:sympy.tensor.tensor.slice_tuple->tuple((index_map.get(i, slice(None)) for i in ret_indices))
A:sympy.tensor.tensor.tensor_head->tensor_head.func(tensor_head.name, index_types, symmetry=None, comm=tensor_head.comm, unordered_indices=tensor_head.unordered_indices).func(tensor_head.name, index_types, symmetry=None, comm=tensor_head.comm, unordered_indices=tensor_head.unordered_indices)
A:sympy.tensor.tensor.repl_dict->repl_dict.copy().copy()
A:sympy.tensor.tensor.expr_indices->sympy.core.Mul.fromiter(args).get_free_indices()
A:sympy.tensor.tensor.repl_dict[self.component]->_WildTensExpr(expr)
A:sympy.tensor.tensor.indices_sifted->sift(self.indices, siftkey)
A:sympy.tensor.tensor.expr_indices_remaining->sympy.core.Mul.fromiter(args).get_indices()
A:sympy.tensor.tensor.ignore_updown->sympify(ignore_updown)
A:sympy.tensor.tensor.t2->t2.expand().expand()
A:sympy.tensor.tensor.t3->TensAdd(*a3).doit()
A:sympy.tensor.tensor.lines->_join_lines(lines)
A:sympy.tensor.tensor.inds->self.substitute_indices(*list(zip(free_args, indices))).get_indices()
A:sympy.tensor.tensor.nim->get_index_structure(t).perm2tensor(g, is_canon_bp=is_canon_bp)
sympy.tensor.get_indices(t)
sympy.tensor.tensor.TensAdd(cls,*args,**kw_args)
sympy.tensor.tensor.TensAdd.__getitem__(self,item)
sympy.tensor.tensor.TensAdd.__iter__(self)
sympy.tensor.tensor.TensAdd._eval_partial_derivative(self,s)
sympy.tensor.tensor.TensAdd._eval_rewrite_as_Indexed(self,*args)
sympy.tensor.tensor.TensAdd._expand(self,**hints)
sympy.tensor.tensor.TensAdd._extract_data(self,replacement_dict)
sympy.tensor.tensor.TensAdd._print(self)
sympy.tensor.tensor.TensAdd._replace_indices(self,repl:dict[TensorIndex,TensorIndex])->TensExpr
sympy.tensor.tensor.TensAdd._tensAdd_check(args)
sympy.tensor.tensor.TensAdd._tensAdd_collect_terms(args)
sympy.tensor.tensor.TensAdd._tensAdd_flatten(args)
sympy.tensor.tensor.TensAdd.canon_bp(self)
sympy.tensor.tensor.TensAdd.coeff(self)
sympy.tensor.tensor.TensAdd.contract_delta(self,delta)
sympy.tensor.tensor.TensAdd.contract_metric(self,g)
sympy.tensor.tensor.TensAdd.data(self)
sympy.tensor.tensor.TensAdd.data(self)
sympy.tensor.tensor.TensAdd.data(self,data)
sympy.tensor.tensor.TensAdd.doit(self,**hints)
sympy.tensor.tensor.TensAdd.equals(self,other)
sympy.tensor.tensor.TensAdd.free_args(self)
sympy.tensor.tensor.TensAdd.free_indices(self)
sympy.tensor.tensor.TensAdd.get_free_indices(self)->list[TensorIndex]
sympy.tensor.tensor.TensAdd.get_indices(self)
sympy.tensor.tensor.TensAdd.nocoeff(self)
sympy.tensor.tensor.TensAdd.rank(self)
sympy.tensor.tensor.TensAdd.substitute_indices(self,*index_tuples)
sympy.tensor.tensor.TensExpr(Expr,ABC)
sympy.tensor.tensor.TensExpr.__abs__(self)
sympy.tensor.tensor.TensExpr.__add__(self,other)
sympy.tensor.tensor.TensExpr.__mul__(self,other)
sympy.tensor.tensor.TensExpr.__neg__(self)
sympy.tensor.tensor.TensExpr.__pow__(self,other)
sympy.tensor.tensor.TensExpr.__radd__(self,other)
sympy.tensor.tensor.TensExpr.__rmul__(self,other)
sympy.tensor.tensor.TensExpr.__rpow__(self,other)
sympy.tensor.tensor.TensExpr.__rsub__(self,other)
sympy.tensor.tensor.TensExpr.__rtruediv__(self,other)
sympy.tensor.tensor.TensExpr.__sub__(self,other)
sympy.tensor.tensor.TensExpr.__truediv__(self,other)
sympy.tensor.tensor.TensExpr._check_add_Sum(self,expr,index_symbols)
sympy.tensor.tensor.TensExpr._contract_and_permute_with_metric(metric,array,pos,dim)
sympy.tensor.tensor.TensExpr._expand(self,**kwargs)
sympy.tensor.tensor.TensExpr._expand_partial_derivative(self)
sympy.tensor.tensor.TensExpr._get_dummy_indices_set(self)
sympy.tensor.tensor.TensExpr._get_free_indices_set(self)
sympy.tensor.tensor.TensExpr._get_indices_permutation(indices1,indices2)
sympy.tensor.tensor.TensExpr._get_indices_set(self)
sympy.tensor.tensor.TensExpr._iterate_dummy_indices(self)
sympy.tensor.tensor.TensExpr._iterate_free_indices(self)
sympy.tensor.tensor.TensExpr._iterate_indices(self)
sympy.tensor.tensor.TensExpr._match_indices_with_other_tensor(array,free_ind1,free_ind2,replacement_dict)
sympy.tensor.tensor.TensExpr._replace_indices(self,repl:dict[TensorIndex,TensorIndex])->TensExpr
sympy.tensor.tensor.TensExpr.coeff(self)
sympy.tensor.tensor.TensExpr.expand(self,**hints)
sympy.tensor.tensor.TensExpr.fun_eval(self,*index_tuples)
sympy.tensor.tensor.TensExpr.get_free_indices(self)->list[TensorIndex]
sympy.tensor.tensor.TensExpr.get_indices(self)
sympy.tensor.tensor.TensExpr.get_matrix(self)
sympy.tensor.tensor.TensExpr.nocoeff(self)
sympy.tensor.tensor.TensExpr.replace_with_arrays(self,replacement_dict,indices=None)
sympy.tensor.tensor.TensMul(cls,*args,**kw_args)
sympy.tensor.tensor.TensMul.__getitem__(self,item)
sympy.tensor.tensor.TensMul.__iter__(self)
sympy.tensor.tensor.TensMul.__neg__(self)
sympy.tensor.tensor.TensMul._dedupe_indices(new,exclude)
sympy.tensor.tensor.TensMul._dedupe_indices_in_rule(self,rule)
sympy.tensor.tensor.TensMul._dummy_data_to_dum(dummy_data)
sympy.tensor.tensor.TensMul._eval_partial_derivative(self,s)
sympy.tensor.tensor.TensMul._eval_rewrite_as_Indexed(self,*args)
sympy.tensor.tensor.TensMul._expand(self,**hints)
sympy.tensor.tensor.TensMul._extract_data(self,replacement_dict)
sympy.tensor.tensor.TensMul._get_args_for_traditional_printer(self)
sympy.tensor.tensor.TensMul._get_components_from_args(args)
sympy.tensor.tensor.TensMul._get_dummy_indices_set(self)
sympy.tensor.tensor.TensMul._get_free_indices_set(self)
sympy.tensor.tensor.TensMul._get_indices_to_args_pos(self)
sympy.tensor.tensor.TensMul._get_position_offset_for_indices(self)
sympy.tensor.tensor.TensMul._get_tensors_from_components_free_dum(components,free,dum)
sympy.tensor.tensor.TensMul._index_replacement_for_contract_metric(args,free,dum)
sympy.tensor.tensor.TensMul._indices_to_free_dum(args_indices)
sympy.tensor.tensor.TensMul._rebuild_tensors_list(args,index_structure)
sympy.tensor.tensor.TensMul._replace_indices(self,repl:dict[TensorIndex,TensorIndex])->TensExpr
sympy.tensor.tensor.TensMul._set_indices(self,*indices,is_canon_bp=False,**kw_args)
sympy.tensor.tensor.TensMul._set_new_index_structure(self,im,is_canon_bp=False)
sympy.tensor.tensor.TensMul._sort_args_for_sorted_components(self)
sympy.tensor.tensor.TensMul._tensMul_contract_indices(args,replace_indices=True)
sympy.tensor.tensor.TensMul.canon_bp(self)
sympy.tensor.tensor.TensMul.coeff(self)
sympy.tensor.tensor.TensMul.components(self)
sympy.tensor.tensor.TensMul.contract_delta(self,delta)
sympy.tensor.tensor.TensMul.contract_metric(self,g)
sympy.tensor.tensor.TensMul.data(self)
sympy.tensor.tensor.TensMul.data(self)
sympy.tensor.tensor.TensMul.data(self,data)
sympy.tensor.tensor.TensMul.doit(self,**hints)
sympy.tensor.tensor.TensMul.dum_in_args(self)
sympy.tensor.tensor.TensMul.equals(self,other)
sympy.tensor.tensor.TensMul.free_args(self)
sympy.tensor.tensor.TensMul.free_in_args(self)
sympy.tensor.tensor.TensMul.from_data(coeff,components,free,dum,**kw_args)
sympy.tensor.tensor.TensMul.get_free_indices(self)->list[TensorIndex]
sympy.tensor.tensor.TensMul.get_indices(self)
sympy.tensor.tensor.TensMul.nocoeff(self)
sympy.tensor.tensor.TensMul.perm2tensor(self,g,is_canon_bp=False)
sympy.tensor.tensor.TensMul.sorted_components(self)
sympy.tensor.tensor.TensMul.split(self)
sympy.tensor.tensor.TensMul.substitute_indices(self,*index_tuples)
sympy.tensor.tensor.Tensor(cls,tensor_head,indices,*,is_canon_bp=False,**kw_args)
sympy.tensor.tensor.Tensor.__getitem__(self,item)
sympy.tensor.tensor.Tensor.__iter__(self)
sympy.tensor.tensor.Tensor._build_index_map(indices,index_structure)
sympy.tensor.tensor.Tensor._eval_partial_derivative(self,s)
sympy.tensor.tensor.Tensor._eval_rewrite_as_Indexed(self,tens,indices)
sympy.tensor.tensor.Tensor._expand(self,**kwargs)
sympy.tensor.tensor.Tensor._extract_data(self,replacement_dict)
sympy.tensor.tensor.Tensor._get_dummy_indices_set(self)
sympy.tensor.tensor.Tensor._get_free_indices_set(self)
sympy.tensor.tensor.Tensor._get_indices_set(self)
sympy.tensor.tensor.Tensor._parse_indices(tensor_head,indices)
sympy.tensor.tensor.Tensor._print(self)
sympy.tensor.tensor.Tensor._replace_indices(self,repl:dict[TensorIndex,TensorIndex])->TensExpr
sympy.tensor.tensor.Tensor._set_indices(self,*indices,is_canon_bp=False,**kw_args)
sympy.tensor.tensor.Tensor._set_new_index_structure(self,im,is_canon_bp=False)
sympy.tensor.tensor.Tensor.as_base_exp(self)
sympy.tensor.tensor.Tensor.canon_bp(self)
sympy.tensor.tensor.Tensor.coeff(self)
sympy.tensor.tensor.Tensor.commutes_with(self,other)
sympy.tensor.tensor.Tensor.component(self)
sympy.tensor.tensor.Tensor.components(self)
sympy.tensor.tensor.Tensor.contract_delta(self,metric)
sympy.tensor.tensor.Tensor.contract_metric(self,g)
sympy.tensor.tensor.Tensor.data(self)
sympy.tensor.tensor.Tensor.data(self)
sympy.tensor.tensor.Tensor.data(self,data)
sympy.tensor.tensor.Tensor.doit(self,**hints)
sympy.tensor.tensor.Tensor.dum(self)
sympy.tensor.tensor.Tensor.dum_in_args(self)
sympy.tensor.tensor.Tensor.equals(self,other)
sympy.tensor.tensor.Tensor.ext_rank(self)
sympy.tensor.tensor.Tensor.free(self)
sympy.tensor.tensor.Tensor.free_args(self)
sympy.tensor.tensor.Tensor.free_in_args(self)
sympy.tensor.tensor.Tensor.free_indices(self)
sympy.tensor.tensor.Tensor.get_free_indices(self)->list[TensorIndex]
sympy.tensor.tensor.Tensor.get_indices(self)->list[TensorIndex]
sympy.tensor.tensor.Tensor.head(self)
sympy.tensor.tensor.Tensor.index_types(self)
sympy.tensor.tensor.Tensor.indices(self)
sympy.tensor.tensor.Tensor.nocoeff(self)
sympy.tensor.tensor.Tensor.perm2tensor(self,g,is_canon_bp=False)
sympy.tensor.tensor.Tensor.rank(self)
sympy.tensor.tensor.Tensor.sorted_components(self)
sympy.tensor.tensor.Tensor.split(self)
sympy.tensor.tensor.Tensor.substitute_indices(self,*index_tuples)
sympy.tensor.tensor.TensorElement(cls,expr,index_map)
sympy.tensor.tensor.TensorElement._extract_data(self,replacement_dict)
sympy.tensor.tensor.TensorElement._replace_indices(self,repl:dict[TensorIndex,TensorIndex])->TensExpr
sympy.tensor.tensor.TensorElement.coeff(self)
sympy.tensor.tensor.TensorElement.dum(self)
sympy.tensor.tensor.TensorElement.expr(self)
sympy.tensor.tensor.TensorElement.free(self)
sympy.tensor.tensor.TensorElement.get_free_indices(self)
sympy.tensor.tensor.TensorElement.get_indices(self)
sympy.tensor.tensor.TensorElement.index_map(self)
sympy.tensor.tensor.TensorElement.nocoeff(self)
sympy.tensor.tensor.TensorHead(cls,name,index_types,symmetry=None,comm=0)
sympy.tensor.tensor.TensorHead.__iter__(self)
sympy.tensor.tensor.TensorHead.__lt__(self,other)
sympy.tensor.tensor.TensorHead.__pow__(self,other)
sympy.tensor.tensor.TensorHead._components_data_full_destroy(self)
sympy.tensor.tensor.TensorHead._print(self)
sympy.tensor.tensor.TensorHead.commutes_with(self,other)
sympy.tensor.tensor.TensorHead.data(self)
sympy.tensor.tensor.TensorHead.data(self)
sympy.tensor.tensor.TensorHead.data(self,data)
sympy.tensor.tensor.TensorHead.index_types(self)
sympy.tensor.tensor.TensorHead.name(self)
sympy.tensor.tensor.TensorHead.rank(self)
sympy.tensor.tensor.TensorHead.symmetry(self)
sympy.tensor.tensor.TensorIndex(cls,name,tensor_index_type,is_up=True)
sympy.tensor.tensor.TensorIndex.__lt__(self,other)
sympy.tensor.tensor.TensorIndex.__neg__(self)
sympy.tensor.tensor.TensorIndex._print(self)
sympy.tensor.tensor.TensorIndex.is_up(self)
sympy.tensor.tensor.TensorIndex.name(self)
sympy.tensor.tensor.TensorIndex.tensor_index_type(self)
sympy.tensor.tensor.TensorIndexType(cls,name,dummy_name=None,dim=None,eps_dim=None,metric_symmetry=1,metric_name='metric',**kwargs)
sympy.tensor.tensor.TensorIndexType.__lt__(self,other)
sympy.tensor.tensor.TensorIndexType.__str__(self)
sympy.tensor.tensor.TensorIndexType._components_data_full_destroy(self)
sympy.tensor.tensor.TensorIndexType.data(self)
sympy.tensor.tensor.TensorIndexType.data(self)
sympy.tensor.tensor.TensorIndexType.data(self,data)
sympy.tensor.tensor.TensorIndexType.delta(self)
sympy.tensor.tensor.TensorIndexType.dim(self)
sympy.tensor.tensor.TensorIndexType.dummy_name(self)
sympy.tensor.tensor.TensorIndexType.eps_dim(self)
sympy.tensor.tensor.TensorIndexType.epsilon(self)
sympy.tensor.tensor.TensorIndexType.get_epsilon(self)
sympy.tensor.tensor.TensorIndexType.get_kronecker_delta(self)
sympy.tensor.tensor.TensorIndexType.metric(self)
sympy.tensor.tensor.TensorIndexType.name(self)
sympy.tensor.tensor.TensorIndexType.set_metric(self,tensor)
sympy.tensor.tensor.TensorSymmetry(cls,*args,**kw_args)
sympy.tensor.tensor.TensorSymmetry.base(self)
sympy.tensor.tensor.TensorSymmetry.direct_product(cls,*args)
sympy.tensor.tensor.TensorSymmetry.fully_symmetric(cls,rank)
sympy.tensor.tensor.TensorSymmetry.generators(self)
sympy.tensor.tensor.TensorSymmetry.no_symmetry(cls,rank)
sympy.tensor.tensor.TensorSymmetry.rank(self)
sympy.tensor.tensor.TensorSymmetry.riemann(cls)
sympy.tensor.tensor.TensorType(cls,index_types,symmetry,**kw_args)
sympy.tensor.tensor.TensorType.__str__(self)
sympy.tensor.tensor.TensorType.index_types(self)
sympy.tensor.tensor.TensorType.symmetry(self)
sympy.tensor.tensor.TensorType.types(self)
sympy.tensor.tensor.WildTensor(cls,tensor_head,indices,**kw_args)
sympy.tensor.tensor.WildTensor._match_indices_ignoring_order(self,expr,repl_dict=None,old=False)
sympy.tensor.tensor.WildTensor.matches(self,expr,repl_dict=None,old=False)
sympy.tensor.tensor.WildTensorHead(cls,name,index_types=None,symmetry=None,comm=0,unordered_indices=False)
sympy.tensor.tensor.WildTensorIndex(cls,name,tensor_index_type,is_up=True,ignore_updown=False)
sympy.tensor.tensor.WildTensorIndex.__neg__(self)
sympy.tensor.tensor.WildTensorIndex.ignore_updown(self)
sympy.tensor.tensor.WildTensorIndex.matches(self,expr,repl_dict=None,old=False)
sympy.tensor.tensor._IndexStructure(self,free,dum,index_types,indices,canon_bp=False)
sympy.tensor.tensor._IndexStructure.__repr__(self)
sympy.tensor.tensor._IndexStructure.__str__(self)
sympy.tensor.tensor._IndexStructure._free_dum_from_indices(*indices)
sympy.tensor.tensor._IndexStructure._get_generator_for_dummy_indices(free)
sympy.tensor.tensor._IndexStructure._get_lexicographically_sorted_index_types(self)
sympy.tensor.tensor._IndexStructure._get_lexicographically_sorted_indices(self)
sympy.tensor.tensor._IndexStructure._get_sorted_dum_indices_for_canon(self)
sympy.tensor.tensor._IndexStructure._get_sorted_free_indices_for_canon(self)
sympy.tensor.tensor._IndexStructure._replace_dummy_names(indices,free,dum)
sympy.tensor.tensor._IndexStructure.from_components_free_dum(components,free,dum)
sympy.tensor.tensor._IndexStructure.from_indices(*indices)
sympy.tensor.tensor._IndexStructure.generate_indices_from_free_dum_index_types(free,dum,index_types)
sympy.tensor.tensor._IndexStructure.get_free_indices(self)->list[TensorIndex]
sympy.tensor.tensor._IndexStructure.get_indices(self)
sympy.tensor.tensor._IndexStructure.indices_canon_args(self)
sympy.tensor.tensor._IndexStructure.perm2tensor(self,g,is_canon_bp=False)
sympy.tensor.tensor._TensorDataLazyEvaluator(CantSympify)
sympy.tensor.tensor._TensorDataLazyEvaluator.__contains__(self,key)
sympy.tensor.tensor._TensorDataLazyEvaluator.__delitem__(self,key)
sympy.tensor.tensor._TensorDataLazyEvaluator.__getitem__(self,key)
sympy.tensor.tensor._TensorDataLazyEvaluator.__setitem__(self,key,value)
sympy.tensor.tensor._TensorDataLazyEvaluator._assign_data_to_tensor_expr(self,key,data)
sympy.tensor.tensor._TensorDataLazyEvaluator._check_permutations_on_data(self,tens,data)
sympy.tensor.tensor._TensorDataLazyEvaluator._correct_signature_from_indices(data,indices,free,dum,inverse=False)
sympy.tensor.tensor._TensorDataLazyEvaluator._flip_index_by_metric(data,metric,pos)
sympy.tensor.tensor._TensorDataLazyEvaluator._get(self,key)
sympy.tensor.tensor._TensorDataLazyEvaluator._sort_data_axes(old,new)
sympy.tensor.tensor._TensorDataLazyEvaluator.add_metric_data(self,metric,data)
sympy.tensor.tensor._TensorDataLazyEvaluator.add_rearrange_tensmul_parts(new_tensmul,old_tensmul)
sympy.tensor.tensor._TensorDataLazyEvaluator.data_contract_dum(ndarray_list,dum,ext_rank)
sympy.tensor.tensor._TensorDataLazyEvaluator.data_from_tensor(self,tensor)
sympy.tensor.tensor._TensorDataLazyEvaluator.data_tensorhead_from_tensmul(self,data,tensmul,tensorhead)
sympy.tensor.tensor._TensorDataLazyEvaluator.inverse_matrix(ndarray)
sympy.tensor.tensor._TensorDataLazyEvaluator.inverse_transpose_matrix(ndarray)
sympy.tensor.tensor._TensorDataLazyEvaluator.parse_data(data)
sympy.tensor.tensor._TensorManager(self)
sympy.tensor.tensor._TensorManager._comm_init(self)
sympy.tensor.tensor._TensorManager.clear(self)
sympy.tensor.tensor._TensorManager.comm(self)
sympy.tensor.tensor._TensorManager.comm_i2symbol(self,i)
sympy.tensor.tensor._TensorManager.comm_symbols2i(self,i)
sympy.tensor.tensor._TensorManager.get_comm(self,i,j)
sympy.tensor.tensor._TensorManager.set_comm(self,i,j,c)
sympy.tensor.tensor._TensorManager.set_comms(self,*args)
sympy.tensor.tensor._WildTensExpr(self,expr)
sympy.tensor.tensor._WildTensExpr.__abs__(self)
sympy.tensor.tensor._WildTensExpr.__add__(self,other)
sympy.tensor.tensor._WildTensExpr.__mul__(self,other)
sympy.tensor.tensor._WildTensExpr.__neg__(self)
sympy.tensor.tensor._WildTensExpr.__pow__(self,other)
sympy.tensor.tensor._WildTensExpr.__radd__(self,other)
sympy.tensor.tensor._WildTensExpr.__rmul__(self,other)
sympy.tensor.tensor._WildTensExpr.__rpow__(self,other)
sympy.tensor.tensor._WildTensExpr.__rsub__(self,other)
sympy.tensor.tensor._WildTensExpr.__rtruediv__(self,other)
sympy.tensor.tensor._WildTensExpr.__sub__(self,other)
sympy.tensor.tensor._WildTensExpr.__truediv__(self,other)
sympy.tensor.tensor._expand(expr,**kwargs)
sympy.tensor.tensor.canon_bp(p)
sympy.tensor.tensor.components_canon_args(components)
sympy.tensor.tensor.contract_metric(t,g)
sympy.tensor.tensor.deprecate_call()
sympy.tensor.tensor.deprecate_data()
sympy.tensor.tensor.deprecate_fun_eval()
sympy.tensor.tensor.get_coeff(t)
sympy.tensor.tensor.get_dummy_indices(t)
sympy.tensor.tensor.get_free_indices(t)
sympy.tensor.tensor.get_index_structure(t)
sympy.tensor.tensor.get_indices(t)
sympy.tensor.tensor.get_lines(ex,index_type)
sympy.tensor.tensor.perm2tensor(t,g,is_canon_bp=False)
sympy.tensor.tensor.riemann_cyclic(t2)
sympy.tensor.tensor.riemann_cyclic_replace(t_r)
sympy.tensor.tensor.substitute_indices(t,*index_tuples)
sympy.tensor.tensor.tensor_heads(s,index_types,symmetry=None,comm=0)
sympy.tensor.tensor.tensor_indices(s,typ)
sympy.tensor.tensor.tensor_mul(*a)
sympy.tensor.tensor.tensorhead(name,typ,sym=None,comm=0)
sympy.tensor.tensor.tensorsymmetry(*args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/indexed.py----------------------------------------
A:sympy.tensor.indexed.base->_sympify(base)
A:sympy.tensor.indexed.args->list(map(sympify, args))
A:sympy.tensor.indexed.obj->sympy.core.Expr.__new__(cls, *args, **kw_args)
A:sympy.tensor.indexed.msg->'Different # of indices: d({!s})/d({!s})'.format(self, wrt)
A:sympy.tensor.indexed.upper->getattr(i, 'upper', sentinel)
A:sympy.tensor.indexed.lower->getattr(i, 'lower', sentinel)
A:sympy.tensor.indexed.sentinel->object()
A:sympy.tensor.indexed.indices->list(map(p.doprint, self.indices))
A:sympy.tensor.indexed.tmp_asm_copy->label._merge(assumptions).copy()
A:sympy.tensor.indexed.is_commutative->fuzzy_bool(assumptions.get('commutative', True))
A:sympy.tensor.indexed.obj._assumptions->StdFactKB(assumptions)
A:sympy.tensor.indexed.(assumptions, kw_args)->_filter_assumptions(kw_args)
A:sympy.tensor.indexed.label->Symbol(label, integer=True)
A:sympy.tensor.indexed.assumptions->Symbol(label, integer=True)._merge(assumptions)
A:sympy.tensor.indexed.shape->Tuple(shape)
A:sympy.tensor.indexed.obj._name->str(label)
A:sympy.tensor.indexed.(label, range)->list(map(sympify, (label, range)))
sympy.Idx(cls,label,range=None,**kw_args)
sympy.Indexed(cls,base,*args,**kw_args)
sympy.IndexedBase(cls,label,shape=None,*,offset=S.Zero,strides=None,**kw_args)
sympy.tensor.indexed.Idx(cls,label,range=None,**kw_args)
sympy.tensor.indexed.Idx._sympystr(self,p)
sympy.tensor.indexed.Idx.free_symbols(self)
sympy.tensor.indexed.Idx.label(self)
sympy.tensor.indexed.Idx.lower(self)
sympy.tensor.indexed.Idx.name(self)
sympy.tensor.indexed.Idx.upper(self)
sympy.tensor.indexed.IndexException(Exception)
sympy.tensor.indexed.Indexed(cls,base,*args,**kw_args)
sympy.tensor.indexed.Indexed._diff_wrt(self)
sympy.tensor.indexed.Indexed._eval_derivative(self,wrt)
sympy.tensor.indexed.Indexed._hashable_content(self)
sympy.tensor.indexed.Indexed._sympystr(self,p)
sympy.tensor.indexed.Indexed.assumptions0(self)
sympy.tensor.indexed.Indexed.base(self)
sympy.tensor.indexed.Indexed.expr_free_symbols(self)
sympy.tensor.indexed.Indexed.free_symbols(self)
sympy.tensor.indexed.Indexed.indices(self)
sympy.tensor.indexed.Indexed.name(self)
sympy.tensor.indexed.Indexed.ranges(self)
sympy.tensor.indexed.Indexed.rank(self)
sympy.tensor.indexed.Indexed.shape(self)
sympy.tensor.indexed.IndexedBase(cls,label,shape=None,*,offset=S.Zero,strides=None,**kw_args)
sympy.tensor.indexed.IndexedBase.__getitem__(self,indices,**kw_args)
sympy.tensor.indexed.IndexedBase._hashable_content(self)
sympy.tensor.indexed.IndexedBase._set_assumptions(obj,assumptions)
sympy.tensor.indexed.IndexedBase._sympystr(self,p)
sympy.tensor.indexed.IndexedBase.assumptions0(self)
sympy.tensor.indexed.IndexedBase.label(self)
sympy.tensor.indexed.IndexedBase.name(self)
sympy.tensor.indexed.IndexedBase.offset(self)
sympy.tensor.indexed.IndexedBase.shape(self)
sympy.tensor.indexed.IndexedBase.strides(self)
sympy.tensor.indexed._eval_is_ge(lhs,rhs)
sympy.tensor.indexed._eval_is_ge(lhs,rhs)
sympy.tensor.indexed._eval_is_ge(lhs,rhs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tests/test_index_methods.py----------------------------------------
A:sympy.tensor.tests.test_index_methods.(x, y)->symbols('x y')
A:sympy.tensor.tests.test_index_methods.x->IndexedBase('x')
A:sympy.tensor.tests.test_index_methods.f->Function('f')
A:sympy.tensor.tests.test_index_methods.y->IndexedBase('y')
A:sympy.tensor.tests.test_index_methods.A->IndexedBase('A')
A:sympy.tensor.tests.test_index_methods.result->get_contraction_structure(s_ii_jj_s)
A:sympy.tensor.tests.test_index_methods.result_2->get_contraction_structure(s_ii_jk_s)
A:sympy.tensor.tests.test_index_methods.z->IndexedBase('z')
A:sympy.tensor.tests.test_index_methods.g->Function('g')
A:sympy.tensor.tests.test_index_methods.a->symbols('a')
sympy.tensor.tests.test_index_methods.test_contraction_structure_Add_in_Pow()
sympy.tensor.tests.test_index_methods.test_contraction_structure_Mul_and_Pow()
sympy.tensor.tests.test_index_methods.test_contraction_structure_Pow_in_Pow()
sympy.tensor.tests.test_index_methods.test_contraction_structure_simple_Pow()
sympy.tensor.tests.test_index_methods.test_get_contraction_structure_basic()
sympy.tensor.tests.test_index_methods.test_get_contraction_structure_complex()
sympy.tensor.tests.test_index_methods.test_get_indices_Idx()
sympy.tensor.tests.test_index_methods.test_get_indices_Indexed()
sympy.tensor.tests.test_index_methods.test_get_indices_Pow()
sympy.tensor.tests.test_index_methods.test_get_indices_add()
sympy.tensor.tests.test_index_methods.test_get_indices_exceptions()
sympy.tensor.tests.test_index_methods.test_get_indices_mul()
sympy.tensor.tests.test_index_methods.test_scalar_broadcast()
sympy.tensor.tests.test_index_methods.test_trivial_indices()
sympy.tensor.tests.test_index_methods.test_ufunc_support()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tests/test_tensor_element.py----------------------------------------
A:sympy.tensor.tests.test_tensor_element.L->TensorIndexType('L')
A:sympy.tensor.tests.test_tensor_element.(i, j, k, l, m, n)->tensor_indices('i j k l m n', L)
A:sympy.tensor.tests.test_tensor_element.A->TensorHead('A', [L, L], TensorSymmetry.no_symmetry(2))
A:sympy.tensor.tests.test_tensor_element.a->A(i, j)
A:sympy.tensor.tests.test_tensor_element.te1->TensorElement(a, {Symbol('i'): 1})
A:sympy.tensor.tests.test_tensor_element.te2->TensorElement(a, {i: 1})
A:sympy.tensor.tests.test_tensor_element.array->Array([[1, 2], [3, 4]])
sympy.tensor.tests.test_tensor_element.test_tensor_element()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tests/test_printing.py----------------------------------------
A:sympy.tensor.tests.test_printing.R3->TensorIndexType('R3', dim=3)
A:sympy.tensor.tests.test_printing.(p, q)->tensor_indices('p q', R3)
A:sympy.tensor.tests.test_printing.K->TensorHead('K', [R3])
sympy.tensor.tests.test_printing.test_printing_TensMul()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tests/test_functions.py----------------------------------------
A:sympy.tensor.tests.test_functions.A->MatrixSymbol('A', 3, 3)
A:sympy.tensor.tests.test_functions.B->MatrixSymbol('B', 3, 3)
A:sympy.tensor.tests.test_functions.C->MatrixSymbol('C', 3, 3)
A:sympy.tensor.tests.test_functions.expr->TensorProduct(A, B)
sympy.tensor.tests.test_functions.test_TensorProduct_construction()
sympy.tensor.tests.test_functions.test_TensorProduct_getitem()
sympy.tensor.tests.test_functions.test_TensorProduct_shape()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tests/test_tensor.py----------------------------------------
A:sympy.tensor.tests.test_tensor.Lorentz->TensorIndexType('Lorentz')
A:sympy.tensor.tests.test_tensor.(a, b, d0, d1)->tensor_indices('a,b,d0,d1', Lorentz)
A:sympy.tensor.tests.test_tensor.(A, B)->tensor_heads('A,B', [Lorentz] * 2, TensorSymmetry.fully_symmetric(2))
A:sympy.tensor.tests.test_tensor.tc->t.contract_metric(g).canon_bp()
A:sympy.tensor.tests.test_tensor.A->TensorHead('A', [R3, R3])
A:sympy.tensor.tests.test_tensor.(B, C)->tensor_heads('B,C', [Lorentz], TensorSymmetry.no_symmetry(1))
A:sympy.tensor.tests.test_tensor.B->TensorHead('B', [L])
A:sympy.tensor.tests.test_tensor.C->TensorHead('C', [LorentzD])
A:sympy.tensor.tests.test_tensor.(a, b, c, d)->tensor_indices('a, b, c, d', Lorentz)
A:sympy.tensor.tests.test_tensor.L->TensorIndexType('L', dim=4)
A:sympy.tensor.tests.test_tensor.A1->TensorHead('A', [L, L])
A:sympy.tensor.tests.test_tensor.A2->TensorHead('A', [L, L], TensorSymmetry.no_symmetry(2))
A:sympy.tensor.tests.test_tensor.A3->TensorHead('A', [L, L], TensorSymmetry.fully_symmetric(2))
A:sympy.tensor.tests.test_tensor.(d0, d1, d2, d3)->tensor_indices('d:4', Lorentz)
A:sympy.tensor.tests.test_tensor.(a, a0, a1, a2, a3, b, d0, d1, d2, d3)->tensor_indices('a,a0,a1,a2,a3,b,d0,d1,d2,d3', Mat)
A:sympy.tensor.tests.test_tensor.Spinor->TensorIndexType('Spinor', dim=D, metric_symmetry=-1, dummy_name='S')
A:sympy.tensor.tests.test_tensor.Mat->TensorIndexType('Mat', metric_symmetry=0, dummy_name='M')
A:sympy.tensor.tests.test_tensor.(alpha, beta, gamma, mu, nu, rho)->tensor_indices('alpha,beta,gamma,mu,nu,rho', Lorentz)
A:sympy.tensor.tests.test_tensor.Gamma->TensorHead('Gamma', [Lorentz], TensorSymmetry.fully_symmetric(1), 2)
A:sympy.tensor.tests.test_tensor.Gamma2->TensorHead('Gamma', [Lorentz] * 2, TensorSymmetry.fully_symmetric(-2), 2)
A:sympy.tensor.tests.test_tensor.Gamma3->TensorHead('Gamma', [Lorentz] * 3, TensorSymmetry.fully_symmetric(-3), 2)
A:sympy.tensor.tests.test_tensor.Flavor->TensorIndexType('Flavor', dummy_name='F')
A:sympy.tensor.tests.test_tensor.(a, b, c, d, e, ff)->tensor_indices('a,b,c,d,e,f', Flavor)
A:sympy.tensor.tests.test_tensor.(mu, nu)->tensor_indices('mu,nu', Lorentz)
A:sympy.tensor.tests.test_tensor.f->TensorHead('f', [Flavor] * 3, TensorSymmetry.direct_product(1, -2))
A:sympy.tensor.tests.test_tensor.i->tensor_indices('i', A)
A:sympy.tensor.tests.test_tensor.(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11)->tensor_indices('d0:12', Lorentz)
A:sympy.tensor.tests.test_tensor.R->TensorHead('R', [Lorentz] * 4, TensorSymmetry.riemann())
A:sympy.tensor.tests.test_tensor.t->t.contract_metric(g).contract_metric(g)
A:sympy.tensor.tests.test_tensor.(d0, d1, d2, d3, d4, d5, d6)->tensor_indices('d0:7', Lorentz)
A:sympy.tensor.tests.test_tensor.(a0, a1, a2, a3, a4, a5)->tensor_indices('a0:6', Lorentz)
A:sympy.tensor.tests.test_tensor.(a, b)->tensor_indices('a,b', Lorentz)
A:sympy.tensor.tests.test_tensor.V->TensorHead('V', [R3])
A:sympy.tensor.tests.test_tensor.D->Symbol('D')
A:sympy.tensor.tests.test_tensor.Eucl->TensorIndexType('Eucl', metric_symmetry=1, dim=D, dummy_name='E')
A:sympy.tensor.tests.test_tensor.(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14)->tensor_indices('i0:15', Eucl)
A:sympy.tensor.tests.test_tensor.t1->t.contract_metric(g).contract_metric(g).substitute_indices((a, b), (b, a))
A:sympy.tensor.tests.test_tensor.(a0, a1, a2, a3, a4)->tensor_indices('a0:5', Spinor)
A:sympy.tensor.tests.test_tensor.(chi, psi)->tensor_heads('chi,psi', [Spinor], TensorSymmetry.no_symmetry(1), 1)
A:sympy.tensor.tests.test_tensor.(m0, m1, m2, m3, m4)->tensor_indices('m0:5', Lorentz)
A:sympy.tensor.tests.test_tensor.sym2->sympy.tensor.tensor.TensorSymmetry.fully_symmetric(2)
A:sympy.tensor.tests.test_tensor.sym2n->TensorSymmetry(*get_symmetric_group_sgs(2))
A:sympy.tensor.tests.test_tensor.TSpace->TensorIndexType('TSpace', dummy_name='TSpace')
A:sympy.tensor.tests.test_tensor.(i0, i1)->tensor_indices('i_0:2', Lorentz)
A:sympy.tensor.tests.test_tensor.indices->t.contract_metric(g).contract_metric(g).get_indices()
A:sympy.tensor.tests.test_tensor.L_0->TensorIndex('L_0', L)
A:sympy.tensor.tests.test_tensor.sym->sympy.tensor.tensor.TensorSymmetry.fully_symmetric(-3)
A:sympy.tensor.tests.test_tensor.(a, b, d0, d1, i, j, k)->tensor_indices('a,b,d0,d1,i,j,k', Lorentz)
A:sympy.tensor.tests.test_tensor.t2->t.contract_metric(g).contract_metric(g).substitute_indices((a, b), (b, a)).substitute_indices((a, -a), (b, -b), (c, -c), (d, -d))
A:sympy.tensor.tests.test_tensor.t2b->t2b.canon_bp().canon_bp()
A:sympy.tensor.tests.test_tensor.(p, q, r)->tensor_indices('p q r', R3)
A:sympy.tensor.tests.test_tensor.t3->riemann_cyclic(t2)
A:sympy.tensor.tests.test_tensor.tz1->tz1.canon_bp().canon_bp()
A:sympy.tensor.tests.test_tensor.(m, n, p, q)->tensor_indices('m,n,p,q', Lorentz)
A:sympy.tensor.tests.test_tensor.(E, px, py, pz)->symbols('E px py pz')
A:sympy.tensor.tests.test_tensor.ts->A(a, b)
A:sympy.tensor.tests.test_tensor.(i, j, k, l, m, n, p, q)->tensor_indices('i,j,k,l,m,n,p,q', Lorentz)
A:sympy.tensor.tests.test_tensor.p->TensorHead('p', [Lorentz])
A:sympy.tensor.tests.test_tensor.(m0, m1, m2, m3)->tensor_indices('m0:4', Lorentz)
A:sympy.tensor.tests.test_tensor.(a, b, c, d, e)->tensor_indices('a,b,c,d,e', Lorentz)
A:sympy.tensor.tests.test_tensor.(a, b, c, d, e, L_0)->tensor_indices('a,b,c,d,e,L_0', Lorentz)
A:sympy.tensor.tests.test_tensor.(p, q)->tensor_heads('p q', [Lorentz])
A:sympy.tensor.tests.test_tensor.M->Symbol('M')
A:sympy.tensor.tests.test_tensor.R3->TensorIndexType('R3', dim=3)
A:sympy.tensor.tests.test_tensor.K->TensorHead('K', [R3])
A:sympy.tensor.tests.test_tensor.(p, q, r, s)->tensor_heads('p,q,r,s', [Lorentz])
A:sympy.tensor.tests.test_tensor.n->sympy.tensor.tensor.TensorManager.comm_symbols2i(Gsymbol)
A:sympy.tensor.tests.test_tensor.Color->TensorIndexType('Color', dim=n, dummy_name='C')
A:sympy.tensor.tests.test_tensor.(a, b, c, d, e, f)->tensor_indices('a,b,c,d,e,f', Color)
A:sympy.tensor.tests.test_tensor.dg->TensorHead('dg', [Lorentz] * 3, TensorSymmetry.direct_product(1, 2))
A:sympy.tensor.tests.test_tensor.LorentzH->TensorIndexType('LorentzH', dummy_name='LH')
A:sympy.tensor.tests.test_tensor.(i, j)->tensor_indices('i,j', Lorentz)
A:sympy.tensor.tests.test_tensor.(ih, jh)->tensor_indices('ih,jh', LorentzH)
A:sympy.tensor.tests.test_tensor.(ph, qh)->tensor_heads('ph qh', [LorentzH])
A:sympy.tensor.tests.test_tensor.Gsymbol->Symbol('Gsymbol')
A:sympy.tensor.tests.test_tensor.GHsymbol->Symbol('GHsymbol')
A:sympy.tensor.tests.test_tensor.G->TensorHead('G', [Lorentz], TensorSymmetry.no_symmetry(1), Gsymbol)
A:sympy.tensor.tests.test_tensor.GH->TensorHead('GH', [LorentzH], TensorSymmetry.no_symmetry(1), GHsymbol)
A:sympy.tensor.tests.test_tensor.nh->sympy.tensor.tensor.TensorManager.comm_symbols2i(GHsymbol)
A:sympy.tensor.tests.test_tensor.tsymmetry->sympy.tensor.tensor.TensorSymmetry.direct_product(-2, 1, 3)
A:sympy.tensor.tests.test_tensor.minkowski->Matrix(((1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0, 0, 0, -1)))
A:sympy.tensor.tests.test_tensor.(i0, i1, i2, i3, i4)->tensor_indices('i0:5', L)
A:sympy.tensor.tests.test_tensor.B.data->range(4)
A:sympy.tensor.tests.test_tensor.AB->TensorHead('AB', [Lorentz] * 2)
A:sympy.tensor.tests.test_tensor.ba_matrix->Matrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 0, -1, -2), (-3, -4, -5, -6)))
A:sympy.tensor.tests.test_tensor.BA->TensorHead('BA', [Lorentz] * 2)
A:sympy.tensor.tests.test_tensor.LorentzD->TensorIndexType('LorentzD')
A:sympy.tensor.tests.test_tensor.(mu0, mu1, mu2)->tensor_indices('mu0:3', LorentzD)
A:sympy.tensor.tests.test_tensor.ndm->TensorIndexType('ndm')
A:sympy.tensor.tests.test_tensor.(n0, n1, n2)->tensor_indices('n0:3', ndm)
A:sympy.tensor.tests.test_tensor.NA->TensorHead('NA', [ndm])
A:sympy.tensor.tests.test_tensor.NA.data->range(10, 13)
A:sympy.tensor.tests.test_tensor.NB->TensorHead('NB', [ndm] * 2)
A:sympy.tensor.tests.test_tensor.NC->TensorHead('NC', [ndm] * 3)
A:sympy.tensor.tests.test_tensor.(A, B, AB, BA, C, Lorentz, E, px, py, pz, LorentzD, mu0, mu1, mu2, ndm, n0, n1, n2, NA, NB, NC, minkowski, ba_matrix, ndm_matrix, i0, i1, i2, i3, i4)->_get_valued_base_test_variables()
A:sympy.tensor.tests.test_tensor.matab->AB(i0, i1).get_matrix()
A:sympy.tensor.tests.test_tensor.(x1, x2, x3)->symbols('x1:4')
A:sympy.tensor.tests.test_tensor.euclid->TensorIndexType('Euclidean')
A:sympy.tensor.tests.test_tensor.(i1, i2, i3)->tensor_indices('i1:4', euclid)
A:sympy.tensor.tests.test_tensor.V1->TensorHead('V1', [euclid] * 2)
A:sympy.tensor.tests.test_tensor.V2->TensorHead('V2', [euclid] * 2)
A:sympy.tensor.tests.test_tensor.mmatrix->Matrix(ndm_matrix)
A:sympy.tensor.tests.test_tensor.A.data->Array(arr)
A:sympy.tensor.tests.test_tensor.(qx, qy, qz)->symbols('qx qy qz')
A:sympy.tensor.tests.test_tensor.A(-i0).data->Array([E, qx, qy, qz])
A:sympy.tensor.tests.test_tensor.m->Matrix(md)
A:sympy.tensor.tests.test_tensor.minv->Matrix(md).inv()
A:sympy.tensor.tests.test_tensor.meye->eye(4)
A:sympy.tensor.tests.test_tensor.KD->TensorIndexType('Lorentz').get_kronecker_delta()
A:sympy.tensor.tests.test_tensor.e2->A(i0, -i0)
A:sympy.tensor.tests.test_tensor.o2->o1.canon_bp()
A:sympy.tensor.tests.test_tensor.IT->TensorIndexType('IT', dim=3)
A:sympy.tensor.tests.test_tensor.(i0, i1, i2, i3)->symbols('i0:4')
A:sympy.tensor.tests.test_tensor.A_nosym->TensorHead('A', [IT] * 2)
A:sympy.tensor.tests.test_tensor.A_sym->TensorHead('A', [IT] * 2, TensorSymmetry.fully_symmetric(2))
A:sympy.tensor.tests.test_tensor.A_antisym->TensorHead('A', [IT] * 2, TensorSymmetry.fully_symmetric(-2))
A:sympy.tensor.tests.test_tensor.mat_nosym->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.tensor.tests.test_tensor.(mu, nu, alpha, beta)->tensor_indices('\\mu, \\nu, \\alpha, \\beta', Lorentz)
A:sympy.tensor.tests.test_tensor.u->TensorHead('u', [Lorentz])
A:sympy.tensor.tests.test_tensor.F->TensorHead('F', [Lorentz] * 2, TensorSymmetry.fully_symmetric(-2))
A:sympy.tensor.tests.test_tensor.(Ex, Ey, Ez, Bx, By, Bz)->symbols('E_x E_y E_z B_x B_y B_z')
A:sympy.tensor.tests.test_tensor.g->WildTensorIndex('g', R3)
A:sympy.tensor.tests.test_tensor.L0->tensor_indices('L_0', L)
A:sympy.tensor.tests.test_tensor.L1->tensor_indices('L_1', L)
A:sympy.tensor.tests.test_tensor.e1->A(i0, i2)
A:sympy.tensor.tests.test_tensor.(i, j, k)->tensor_indices('i j k', L)
A:sympy.tensor.tests.test_tensor.(A, B, C, D)->tensor_heads('A B C D', [L])
A:sympy.tensor.tests.test_tensor.tm->TensMul(3).doit()
A:sympy.tensor.tests.test_tensor.(x, y)->symbols('x y')
A:sympy.tensor.tests.test_tensor.L2->TensorIndexType('L2', dim=2)
A:sympy.tensor.tests.test_tensor.(i, j, k, l)->tensor_indices('i j k l', L)
A:sympy.tensor.tests.test_tensor.H->TensorHead('H', [L, L])
A:sympy.tensor.tests.test_tensor.expr->A(i)
A:sympy.tensor.tests.test_tensor.(u1, u2, u3)->tensor_indices('u1:4', L2)
A:sympy.tensor.tests.test_tensor.U->WildTensorHead('U')
A:sympy.tensor.tests.test_tensor.(L_0, L_1)->symbols('L_0:2')
A:sympy.tensor.tests.test_tensor.a1->A(i0, i1, i2, i3)
A:sympy.tensor.tests.test_tensor.a2->A(i0, -i0, i2, i3)
A:sympy.tensor.tests.test_tensor.(a, b, c)->symbols('a b c', cls=WildTensorIndex, tensor_index_type=R3, ignore_updown=True)
A:sympy.tensor.tests.test_tensor.W->WildTensorHead('W', unordered_indices=True)
A:sympy.tensor.tests.test_tensor.C0->TensorIndex(R3.dummy_name + '_0', R3, True)
A:sympy.tensor.tests.test_tensor.S2->TensorType([Lorentz] * 2, sym2)
sympy.tensor.tests.test_tensor._get_valued_base_test_variables()
sympy.tensor.tests.test_tensor._is_equal(arg1,arg2)
sympy.tensor.tests.test_tensor.test_TensExpr()
sympy.tensor.tests.test_tensor.test_TensMul_data()
sympy.tensor.tests.test_tensor.test_TensMul_subs()
sympy.tensor.tests.test_tensor.test_TensorHead()
sympy.tensor.tests.test_tensor.test_TensorIndexType()
sympy.tensor.tests.test_tensor.test_TensorManager()
sympy.tensor.tests.test_tensor.test_TensorSymmetry()
sympy.tensor.tests.test_tensor.test_TensorType()
sympy.tensor.tests.test_tensor.test_add1()
sympy.tensor.tests.test_tensor.test_add2()
sympy.tensor.tests.test_tensor.test_add3()
sympy.tensor.tests.test_tensor.test_bug_correction_tensor_indices()
sympy.tensor.tests.test_tensor.test_canonicalize1()
sympy.tensor.tests.test_tensor.test_canonicalize2()
sympy.tensor.tests.test_tensor.test_canonicalize3()
sympy.tensor.tests.test_tensor.test_canonicalize_no_dummies()
sympy.tensor.tests.test_tensor.test_canonicalize_no_slot_sym()
sympy.tensor.tests.test_tensor.test_contract_delta1()
sympy.tensor.tests.test_tensor.test_contract_metric1()
sympy.tensor.tests.test_tensor.test_contract_metric2()
sympy.tensor.tests.test_tensor.test_contract_metric4()
sympy.tensor.tests.test_tensor.test_div()
sympy.tensor.tests.test_tensor.test_dummy_fmt()
sympy.tensor.tests.test_tensor.test_epsilon()
sympy.tensor.tests.test_tensor.test_fun()
sympy.tensor.tests.test_tensor.test_hash()
sympy.tensor.tests.test_tensor.test_index_iteration()
sympy.tensor.tests.test_tensor.test_indices()
sympy.tensor.tests.test_tensor.test_issue_10972_TensMul_data()
sympy.tensor.tests.test_tensor.test_issue_11020_TensAdd_data()
sympy.tensor.tests.test_tensor.test_metric_contract3()
sympy.tensor.tests.test_tensor.test_mul()
sympy.tensor.tests.test_tensor.test_no_metric_symmetry()
sympy.tensor.tests.test_tensor.test_noncommuting_components()
sympy.tensor.tests.test_tensor.test_rewrite_tensor_to_Indexed()
sympy.tensor.tests.test_tensor.test_riemann_cyclic()
sympy.tensor.tests.test_tensor.test_riemann_cyclic_replace()
sympy.tensor.tests.test_tensor.test_riemann_invariants()
sympy.tensor.tests.test_tensor.test_riemann_products()
sympy.tensor.tests.test_tensor.test_special_eq_ne()
sympy.tensor.tests.test_tensor.test_substitute_indices()
sympy.tensor.tests.test_tensor.test_tensor_alternative_construction()
sympy.tensor.tests.test_tensor.test_tensor_expand()
sympy.tensor.tests.test_tensor.test_tensor_matching()
sympy.tensor.tests.test_tensor.test_tensor_replacement()
sympy.tensor.tests.test_tensor.test_tensorhead()
sympy.tensor.tests.test_tensor.test_tensorhead_construction_without_symmetry()
sympy.tensor.tests.test_tensor.test_tensorsymmetry()
sympy.tensor.tests.test_tensor.test_valued_assign_numpy_ndarray()
sympy.tensor.tests.test_tensor.test_valued_canon_bp_swapaxes()
sympy.tensor.tests.test_tensor.test_valued_components_with_wrong_symmetry()
sympy.tensor.tests.test_tensor.test_valued_metric_inverse()
sympy.tensor.tests.test_tensor.test_valued_non_diagonal_metric()
sympy.tensor.tests.test_tensor.test_valued_tensor_add_scalar()
sympy.tensor.tests.test_tensor.test_valued_tensor_contraction()
sympy.tensor.tests.test_tensor.test_valued_tensor_covariant_contravariant_elements()
sympy.tensor.tests.test_tensor.test_valued_tensor_expressions()
sympy.tensor.tests.test_tensor.test_valued_tensor_get_matrix()
sympy.tensor.tests.test_tensor.test_valued_tensor_iter()
sympy.tensor.tests.test_tensor.test_valued_tensor_pow()
sympy.tensor.tests.test_tensor.test_valued_tensor_self_contraction()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tests/test_indexed.py----------------------------------------
A:sympy.tensor.tests.test_indexed.(i, a, b)->symbols('i a b', integer=True)
A:sympy.tensor.tests.test_indexed.x->SubClass('X')
A:sympy.tensor.tests.test_indexed.(i, a, b, x)->symbols('i a b x', integer=True)
A:sympy.tensor.tests.test_indexed.i14->Idx('i14', (1, 4))
A:sympy.tensor.tests.test_indexed.i79->Idx('i79', (7, 9))
A:sympy.tensor.tests.test_indexed.i46->Idx('i46', (4, 6))
A:sympy.tensor.tests.test_indexed.i35->Idx('i35', (3, 5))
A:sympy.tensor.tests.test_indexed.iNone1->Idx('iNone1')
A:sympy.tensor.tests.test_indexed.iNone2->Idx('iNone2')
A:sympy.tensor.tests.test_indexed.ii->Idx(i, (a, b))
A:sympy.tensor.tests.test_indexed.(i, j)->symbols('i j', integer=True)
A:sympy.tensor.tests.test_indexed.a->symbols('a')
A:sympy.tensor.tests.test_indexed.A1->Indexed(a, i, j)
A:sympy.tensor.tests.test_indexed.A2->IndexedBase(a)
A:sympy.tensor.tests.test_indexed.i->Idx('i', (0, n))
A:sympy.tensor.tests.test_indexed.(a, b)->symbols('a b')
A:sympy.tensor.tests.test_indexed.A->IndexedBase('A')
A:sympy.tensor.tests.test_indexed.B->IndexedBase(b)
A:sympy.tensor.tests.test_indexed.(i, j, m, n)->symbols('i j m n', integer=True)
A:sympy.tensor.tests.test_indexed.b->(y[i] / y[i + 1]).coeff(y[i])
A:sympy.tensor.tests.test_indexed.F->IndexedBase('F', shape=m)
A:sympy.tensor.tests.test_indexed.I->Symbol('I', integer=True)
A:sympy.tensor.tests.test_indexed.I_inherit->IndexedBase(I)
A:sympy.tensor.tests.test_indexed.I_explicit->IndexedBase('I', integer=True)
A:sympy.tensor.tests.test_indexed.base->IndexedBase(x)
A:sympy.tensor.tests.test_indexed.(i, j, k)->symbols('i,j,k')
A:sympy.tensor.tests.test_indexed.(n, m)->symbols('n m', integer=True)
A:sympy.tensor.tests.test_indexed.(o, p)->symbols('o p', integer=True)
A:sympy.tensor.tests.test_indexed.N->Symbol('N', integer=True)
A:sympy.tensor.tests.test_indexed.y->IndexedBase('y', shape=(len_y,))
A:sympy.tensor.tests.test_indexed.(i, j, k, l)->symbols('i j k l', cls=Idx)
A:sympy.tensor.tests.test_indexed.(m, n)->symbols('m, n', integer=True, finite=True)
A:sympy.tensor.tests.test_indexed.(h, L)->symbols('h L', cls=IndexedBase)
A:sympy.tensor.tests.test_indexed.d->IndexedBase('d')
A:sympy.tensor.tests.test_indexed.n->symbols('n')
A:sympy.tensor.tests.test_indexed.m->symbols('m', real=False)
A:sympy.tensor.tests.test_indexed.(x, y, z)->symbols('x,y,z')
A:sympy.tensor.tests.test_indexed.f->Function('f')
A:sympy.tensor.tests.test_indexed.(x, y)->symbols('x,y', cls=IndexedBase)
A:sympy.tensor.tests.test_indexed.sigma->symbols('sigma')
A:sympy.tensor.tests.test_indexed.(m0, m1, m2, m3, m4, m5)->symbols('m0:6')
A:sympy.tensor.tests.test_indexed.expr->f((x[i] - y[i]) ** 2 / sigma)
A:sympy.tensor.tests.test_indexed._xi_1->symbols('xi_1', cls=Dummy)
sympy.tensor.tests.test_indexed.test_Idx_bounds()
sympy.tensor.tests.test_indexed.test_Idx_construction()
sympy.tensor.tests.test_indexed.test_Idx_fixed_bounds()
sympy.tensor.tests.test_indexed.test_Idx_func_args()
sympy.tensor.tests.test_indexed.test_Idx_inequalities()
sympy.tensor.tests.test_indexed.test_Idx_inequalities_current_fails()
sympy.tensor.tests.test_indexed.test_Idx_properties()
sympy.tensor.tests.test_indexed.test_Idx_subs()
sympy.tensor.tests.test_indexed.test_IndexedBase_assumptions()
sympy.tensor.tests.test_indexed.test_IndexedBase_assumptions_inheritance()
sympy.tensor.tests.test_indexed.test_IndexedBase_shape()
sympy.tensor.tests.test_indexed.test_IndexedBase_subs()
sympy.tensor.tests.test_indexed.test_IndexedBase_sugar()
sympy.tensor.tests.test_indexed.test_Indexed_coeff()
sympy.tensor.tests.test_indexed.test_Indexed_constructor()
sympy.tensor.tests.test_indexed.test_Indexed_func_args()
sympy.tensor.tests.test_indexed.test_Indexed_properties()
sympy.tensor.tests.test_indexed.test_Indexed_shape_precedence()
sympy.tensor.tests.test_indexed.test_Indexed_subs()
sympy.tensor.tests.test_indexed.test_Subs_with_Indexed()
sympy.tensor.tests.test_indexed.test_complex_indices()
sympy.tensor.tests.test_indexed.test_complicated_derivative_with_Indexed()
sympy.tensor.tests.test_indexed.test_differentiation()
sympy.tensor.tests.test_indexed.test_indexed_is_constant()
sympy.tensor.tests.test_indexed.test_indexed_series()
sympy.tensor.tests.test_indexed.test_issue_12533()
sympy.tensor.tests.test_indexed.test_issue_12780()
sympy.tensor.tests.test_indexed.test_issue_17652()
sympy.tensor.tests.test_indexed.test_issue_18604()
sympy.tensor.tests.test_indexed.test_not_interable()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/tests/test_tensor_operators.py----------------------------------------
A:sympy.tensor.tests.test_tensor_operators.L->TensorIndexType('L')
A:sympy.tensor.tests.test_tensor_operators.(i, j, k, m, m1, m2, m3, m4)->tensor_indices('i j k m m1 m2 m3 m4', L)
A:sympy.tensor.tests.test_tensor_operators.i0->tensor_indices('i0', L)
A:sympy.tensor.tests.test_tensor_operators.(L_0, L_1)->tensor_indices('L_0 L_1', L)
A:sympy.tensor.tests.test_tensor_operators.(A, B, C, D)->tensor_heads('A B C D', [L])
A:sympy.tensor.tests.test_tensor_operators.H->TensorHead('H', [L, L])
A:sympy.tensor.tests.test_tensor_operators.expr->PartialDerivative(tau ** mu, tau)
A:sympy.tensor.tests.test_tensor_operators.expr1->PartialDerivative(H(i, j), H(m, m1))
A:sympy.tensor.tests.test_tensor_operators.(x, y, z, t)->symbols('x y z t')
A:sympy.tensor.tests.test_tensor_operators.repl->PartialDerivative(tau ** mu, tau).replace_with_arrays({A(i): [sin(x) * cos(y), x ** 3 * y ** 2], B(i): [x, y]}, [-j, i])
A:sympy.tensor.tests.test_tensor_operators.tau->symbols('tau')
A:sympy.tensor.tests.test_tensor_operators.expr1aa->PartialDerivative(A(i), tau)
A:sympy.tensor.tests.test_tensor_operators.expr1ab->PartialDerivative(A(i) + B(i), tau)
A:sympy.tensor.tests.test_tensor_operators.expr1ac->PartialDerivative(A(i) + B(i) + C(i), tau)
A:sympy.tensor.tests.test_tensor_operators.expr1ba->PartialDerivative(A(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr1bb->PartialDerivative(A(i) + B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr1bc->PartialDerivative(A(i) + B(i) + C(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr1ca->PartialDerivative(A(i), H(j, k))
A:sympy.tensor.tests.test_tensor_operators.expr1cb->PartialDerivative(A(i) + B(i), H(j, k))
A:sympy.tensor.tests.test_tensor_operators.expr1cc->PartialDerivative(A(i) + B(i) + C(i), H(j, k))
A:sympy.tensor.tests.test_tensor_operators.expr1da->PartialDerivative(A(i), (D(j), H(k, m)))
A:sympy.tensor.tests.test_tensor_operators.expr1db->PartialDerivative(A(i) + B(i), (D(j), H(k, m)))
A:sympy.tensor.tests.test_tensor_operators.expr1dc->PartialDerivative(A(i) + B(i) + C(i), (D(j), H(k, m)))
A:sympy.tensor.tests.test_tensor_operators.nneg->randint(0, 1000)
A:sympy.tensor.tests.test_tensor_operators.pos->randint(1, 1000)
A:sympy.tensor.tests.test_tensor_operators.c1->Rational(nneg, pos)
A:sympy.tensor.tests.test_tensor_operators.c2->Rational(neg, pos)
A:sympy.tensor.tests.test_tensor_operators.c3->Rational(nneg, neg)
A:sympy.tensor.tests.test_tensor_operators.expr2a->PartialDerivative(H(i, j), H(i, j))
A:sympy.tensor.tests.test_tensor_operators.expr2b->PartialDerivative(H(i, j), H(k, m))
A:sympy.tensor.tests.test_tensor_operators.expr2ca->PartialDerivative(c1 * A(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr2cb->PartialDerivative(c2 * A(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr2cc->PartialDerivative(c3 * A(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.p->PartialDerivative(42, D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3a->PartialDerivative(nneg * A(i) + pos * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3b->PartialDerivative(nneg * A(i) + neg * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3c->PartialDerivative(neg * A(i) + pos * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3d->PartialDerivative(c1 * A(i) + c2 * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3e->PartialDerivative(c2 * A(i) + c1 * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3f->PartialDerivative(c2 * A(i) + c3 * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3g->PartialDerivative(c3 * A(i) + c2 * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3h->PartialDerivative(c3 * A(i) + c1 * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr3i->PartialDerivative(c1 * A(i) + c3 * B(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr4a->PartialDerivative(A(i) * B(j), D(k))
A:sympy.tensor.tests.test_tensor_operators.expr4b->PartialDerivative(A(i) * B(j) * C(k), D(m))
A:sympy.tensor.tests.test_tensor_operators.expr4c->PartialDerivative(A(i) * B(j), C(k), D(m))
A:sympy.tensor.tests.test_tensor_operators.(tau, alpha)->symbols('tau alpha')
A:sympy.tensor.tests.test_tensor_operators.expr2->PartialDerivative(H(i, j), H(-m, m1))
A:sympy.tensor.tests.test_tensor_operators.expr3->PartialDerivative(H(i, j), H(m, -m1))
A:sympy.tensor.tests.test_tensor_operators.(tau, mu)->symbols('tau mu')
A:sympy.tensor.tests.test_tensor_operators.expr1a->PartialDerivative(A(i), A(i))
A:sympy.tensor.tests.test_tensor_operators.expr1b->PartialDerivative(A(i), A(k))
A:sympy.tensor.tests.test_tensor_operators.expr2c->PartialDerivative(L.delta(-i, k) * L.delta(-j, m) * H(i, j), H(k, m))
A:sympy.tensor.tests.test_tensor_operators.expr2d->PartialDerivative(H(-i, -j), tau)
A:sympy.tensor.tests.test_tensor_operators.expr4->PartialDerivative(H(i, j), H(-m, -m1))
A:sympy.tensor.tests.test_tensor_operators.expr5->PartialDerivative(A(i), B(j))
A:sympy.tensor.tests.test_tensor_operators.expr6->PartialDerivative(A(i), C(j))
A:sympy.tensor.tests.test_tensor_operators.expr7->PartialDerivative(A(i), D(j))
A:sympy.tensor.tests.test_tensor_operators.expr8->PartialDerivative(A(i), H(j, k))
A:sympy.tensor.tests.test_tensor_operators.expr9->PartialDerivative(A(i), A(i))
A:sympy.tensor.tests.test_tensor_operators.expr10->PartialDerivative(A(-i), A(-i))
A:sympy.tensor.tests.test_tensor_operators.expr1c->PartialDerivative(L.delta(-i, k) * A(i), A(k))
A:sympy.tensor.tests.test_tensor_operators.tensor_derivative->PartialDerivative(base_expr1, H(k, m))._perform_derivative()
A:sympy.tensor.tests.test_tensor_operators.vector_derivative->PartialDerivative(base_expr1, A(k))._perform_derivative()
A:sympy.tensor.tests.test_tensor_operators.scalar_derivative->PartialDerivative(base_expr1, tau)._perform_derivative()
A:sympy.tensor.tests.test_tensor_operators.vector_expression->PartialDerivative(base_expr2, A(k))._perform_derivative()
A:sympy.tensor.tests.test_tensor_operators.scalar_expression->PartialDerivative(base_expr2, tau)._perform_derivative()
sympy.tensor.tests.test_tensor_operators.test_eval_partial_derivative_divergence_type()
sympy.tensor.tests.test_tensor_operators.test_eval_partial_derivative_expr1()
sympy.tensor.tests.test_tensor_operators.test_eval_partial_derivative_expr_by_symbol()
sympy.tensor.tests.test_tensor_operators.test_eval_partial_derivative_mixed_scalar_tensor_expr2()
sympy.tensor.tests.test_tensor_operators.test_eval_partial_derivative_single_1st_rank_tensors_by_tensor()
sympy.tensor.tests.test_tensor_operators.test_eval_partial_derivative_single_2nd_rank_tensors_by_tensor()
sympy.tensor.tests.test_tensor_operators.test_eval_partial_derivative_single_tensors_by_scalar()
sympy.tensor.tests.test_tensor_operators.test_expand_partial_derivative_constant_factor_rule()
sympy.tensor.tests.test_tensor_operators.test_expand_partial_derivative_full_linearity()
sympy.tensor.tests.test_tensor_operators.test_expand_partial_derivative_product_rule()
sympy.tensor.tests.test_tensor_operators.test_expand_partial_derivative_sum_rule()
sympy.tensor.tests.test_tensor_operators.test_invalid_partial_derivative_valence()
sympy.tensor.tests.test_tensor_operators.test_replace_arrays_partial_derivative()
sympy.tensor.tests.test_tensor_operators.test_tensor_partial_deriv()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/mutable_ndim_array.py----------------------------------------
sympy.tensor.array.mutable_ndim_array.MutableNDimArray(NDimArray)
sympy.tensor.array.mutable_ndim_array.MutableNDimArray._sympy_(self)
sympy.tensor.array.mutable_ndim_array.MutableNDimArray.as_immutable(self)
sympy.tensor.array.mutable_ndim_array.MutableNDimArray.as_mutable(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/array_comprehension.py----------------------------------------
A:sympy.tensor.array.array_comprehension.obj->sympy.core.Basic.__new__(cls, *arglist, **assumptions)
A:sympy.tensor.array.array_comprehension.obj._shape->cls._calculate_shape_from_limits(obj._limits)
A:sympy.tensor.array.array_comprehension.obj._rank->len(obj._shape)
A:sympy.tensor.array.array_comprehension.obj._loop_size->cls._calculate_loop_size(obj._shape)
A:sympy.tensor.array.array_comprehension.curr_free_syms->_sympify(inf).free_symbols.union(sup.free_symbols)
A:sympy.tensor.array.array_comprehension.expr_free_sym->expr_free_sym.union(curr_free_syms).union(curr_free_syms)
A:sympy.tensor.array.array_comprehension.var->_sympify(var)
A:sympy.tensor.array.array_comprehension.inf->_sympify(inf)
A:sympy.tensor.array.array_comprehension.sup->_sympify(sup)
A:sympy.tensor.array.array_comprehension.temp->temp(functools.reduce(lambda a, b: a * b, values))
A:sympy.tensor.array.array_comprehension.arglist->cls._check_limits_validity(function, symbols)
sympy.tensor.array.ArrayComprehension(cls,function,*symbols,**assumptions)
sympy.tensor.array.ArrayComprehensionMap(cls,function,*symbols,**assumptions)
sympy.tensor.array.array_comprehension.ArrayComprehension(cls,function,*symbols,**assumptions)
sympy.tensor.array.array_comprehension.ArrayComprehension.__len__(self)
sympy.tensor.array.array_comprehension.ArrayComprehension._calculate_loop_size(cls,shape)
sympy.tensor.array.array_comprehension.ArrayComprehension._calculate_shape_from_limits(cls,limits)
sympy.tensor.array.array_comprehension.ArrayComprehension._check_limits_validity(cls,function,limits)
sympy.tensor.array.array_comprehension.ArrayComprehension._expand_array(self)
sympy.tensor.array.array_comprehension.ArrayComprehension._get_element(self,values)
sympy.tensor.array.array_comprehension.ArrayComprehension.bound_symbols(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.doit(self,**hints)
sympy.tensor.array.array_comprehension.ArrayComprehension.free_symbols(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.function(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.is_shape_numeric(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.limits(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.rank(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.shape(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.tolist(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.tomatrix(self)
sympy.tensor.array.array_comprehension.ArrayComprehension.variables(self)
sympy.tensor.array.array_comprehension.ArrayComprehensionMap(cls,function,*symbols,**assumptions)
sympy.tensor.array.array_comprehension.ArrayComprehensionMap._get_element(self,values)
sympy.tensor.array.array_comprehension.ArrayComprehensionMap.func(self)
sympy.tensor.array.array_comprehension.isLambda(v)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/arrayop.py----------------------------------------
A:sympy.tensor.array.arrayop.(a, b)->map(_arrayfy, args)
A:sympy.tensor.array.arrayop.lp->len(expr)
A:sympy.tensor.array.arrayop.array->_arrayfy(array)
A:sympy.tensor.array.arrayop.taken_dims->set()
A:sympy.tensor.array.arrayop.rank->_arrayfy(array).rank()
A:sympy.tensor.array.arrayop.(array, remaining_indices, remaining_shape, summed_deltas)->_util_contraction_diagonal(array, *contraction_axes)
A:sympy.tensor.array.arrayop.index_base_position->sum(icontrib)
A:sympy.tensor.array.arrayop.idx->_arrayfy(array)._get_tuple_index(index_base_position + sum(sum_to_index))
A:sympy.tensor.array.arrayop.(array, remaining_indices, remaining_shape, diagonal_deltas)->_util_contraction_diagonal(array, *diagonal_axes)
A:sympy.tensor.array.arrayop.isum->type(array)(isum).reshape(*diagonal_shape)
A:sympy.tensor.array.arrayop.dx->_sympify(dx)
A:sympy.tensor.array.arrayop.expr->ImmutableDenseNDimArray(expr)
A:sympy.tensor.array.arrayop.perm->Permutation(list(perm))
A:sympy.tensor.array.arrayop.new_shape->perm(expr.shape)
A:sympy.tensor.array.arrayop.indices_span->perm([range(i) for i in expr.shape])
A:sympy.tensor.array.arrayop.t->iperm(idx)
A:sympy.tensor.array.arrayop.iterable->NDimArray(iterable)
A:sympy.tensor.array.arrayop.result->next(self._iter)
sympy.derive_by_array(expr,dx)
sympy.permutedims(expr,perm=None,index_order_old=None,index_order_new=None)
sympy.tensor.array.arrayop.Flatten(self,iterable)
sympy.tensor.array.arrayop.Flatten.__iter__(self)
sympy.tensor.array.arrayop.Flatten.__next__(self)
sympy.tensor.array.arrayop.Flatten._sympystr(self,printer)
sympy.tensor.array.arrayop.Flatten.next(self)
sympy.tensor.array.arrayop._arrayfy(a)
sympy.tensor.array.arrayop._util_contraction_diagonal(array,*contraction_or_diagonal_axes)
sympy.tensor.array.arrayop.derive_by_array(expr,dx)
sympy.tensor.array.arrayop.permutedims(expr,perm=None,index_order_old=None,index_order_new=None)
sympy.tensor.array.arrayop.tensorcontraction(array,*contraction_axes)
sympy.tensor.array.arrayop.tensordiagonal(array,*diagonal_axes)
sympy.tensor.array.arrayop.tensorproduct(*args)
sympy.tensorcontraction(array,*contraction_axes)
sympy.tensordiagonal(array,*diagonal_axes)
sympy.tensorproduct(*args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/ndim_array.py----------------------------------------
A:sympy.tensor.array.ndim_array.obj->super().__new__(cls, element_kind)
A:sympy.tensor.array.ndim_array.(elems, shapes)->zip(*[f(i) for i in pointer])
A:sympy.tensor.array.ndim_array.(iterable, shape)->cls._scan_iterable_shape(iterable)
A:sympy.tensor.array.ndim_array.new_dict->iterable.copy()
A:sympy.tensor.array.ndim_array.other->sympify(other)
A:sympy.tensor.array.ndim_array.(start, stop, step)->s.indices(dim)
A:sympy.tensor.array.ndim_array.eindices->itertools.product(*sl_factors)
A:sympy.tensor.array.ndim_array.value->type(self)(value)
A:sympy.tensor.array.ndim_array.(sl_factors, eindices)->self._get_slice_data_for_array_access(index)
sympy.NDimArray(cls,iterable,shape=None,**kwargs)
sympy.tensor.array.ArrayKind(cls,element_kind=NumberKind)
sympy.tensor.array.ndim_array.ArrayKind(cls,element_kind=NumberKind)
sympy.tensor.array.ndim_array.ArrayKind.__repr__(self)
sympy.tensor.array.ndim_array.ArrayKind._union(cls,kinds)->'ArrayKind'
sympy.tensor.array.ndim_array.ImmutableNDimArray(NDimArray,Basic)
sympy.tensor.array.ndim_array.ImmutableNDimArray.__hash__(self)
sympy.tensor.array.ndim_array.ImmutableNDimArray.as_immutable(self)
sympy.tensor.array.ndim_array.ImmutableNDimArray.as_mutable(self)
sympy.tensor.array.ndim_array.NDimArray(cls,iterable,shape=None,**kwargs)
sympy.tensor.array.ndim_array.NDimArray.__add__(self,other)
sympy.tensor.array.ndim_array.NDimArray.__eq__(self,other)
sympy.tensor.array.ndim_array.NDimArray.__getitem__(self,index)
sympy.tensor.array.ndim_array.NDimArray.__iter__(self)
sympy.tensor.array.ndim_array.NDimArray.__len__(self)
sympy.tensor.array.ndim_array.NDimArray.__mul__(self,other)
sympy.tensor.array.ndim_array.NDimArray.__ne__(self,other)
sympy.tensor.array.ndim_array.NDimArray.__neg__(self)
sympy.tensor.array.ndim_array.NDimArray.__rmul__(self,other)
sympy.tensor.array.ndim_array.NDimArray.__rtruediv__(self,other)
sympy.tensor.array.ndim_array.NDimArray.__sub__(self,other)
sympy.tensor.array.ndim_array.NDimArray.__truediv__(self,other)
sympy.tensor.array.ndim_array.NDimArray._check_index_for_getitem(self,index)
sympy.tensor.array.ndim_array.NDimArray._check_special_bounds(cls,flat_list,shape)
sympy.tensor.array.ndim_array.NDimArray._check_symbolic_index(self,index)
sympy.tensor.array.ndim_array.NDimArray._eval_adjoint(self)
sympy.tensor.array.ndim_array.NDimArray._eval_conjugate(self)
sympy.tensor.array.ndim_array.NDimArray._eval_derivative(self,base)
sympy.tensor.array.ndim_array.NDimArray._eval_derivative_n_times(self,s,n)
sympy.tensor.array.ndim_array.NDimArray._eval_transpose(self)
sympy.tensor.array.ndim_array.NDimArray._get_slice_data_for_array_access(self,index)
sympy.tensor.array.ndim_array.NDimArray._get_slice_data_for_array_assignment(self,index,value)
sympy.tensor.array.ndim_array.NDimArray._get_tuple_index(self,integer_index)
sympy.tensor.array.ndim_array.NDimArray._handle_ndarray_creation_inputs(cls,iterable=None,shape=None,**kwargs)
sympy.tensor.array.ndim_array.NDimArray._parse_index(self,index)
sympy.tensor.array.ndim_array.NDimArray._scan_iterable_shape(cls,iterable)
sympy.tensor.array.ndim_array.NDimArray._setter_iterable_check(self,value)
sympy.tensor.array.ndim_array.NDimArray._slice_expand(self,s,dim)
sympy.tensor.array.ndim_array.NDimArray._sympystr(self,printer)
sympy.tensor.array.ndim_array.NDimArray.adjoint(self)
sympy.tensor.array.ndim_array.NDimArray.applyfunc(self,f)
sympy.tensor.array.ndim_array.NDimArray.conjugate(self)
sympy.tensor.array.ndim_array.NDimArray.diff(self,*args,**kwargs)
sympy.tensor.array.ndim_array.NDimArray.rank(self)
sympy.tensor.array.ndim_array.NDimArray.shape(self)
sympy.tensor.array.ndim_array.NDimArray.tolist(self)
sympy.tensor.array.ndim_array.NDimArray.transpose(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/sparse_ndim_array.py----------------------------------------
A:sympy.tensor.array.sparse_ndim_array.syindex->object.__new__(cls)._check_symbolic_index(index)
A:sympy.tensor.array.sparse_ndim_array.index->object.__new__(cls)._parse_index(index)
A:sympy.tensor.array.sparse_ndim_array.(sl_factors, eindices)->object.__new__(cls)._get_slice_data_for_array_access(index)
A:sympy.tensor.array.sparse_ndim_array.new_total_size->functools.reduce(lambda x, y: x * y, newshape)
A:sympy.tensor.array.sparse_ndim_array.(shape, flat_list)->cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
A:sympy.tensor.array.sparse_ndim_array.shape->Tuple(*map(_sympify, shape))
A:sympy.tensor.array.sparse_ndim_array.sparse_array->Dict(sparse_array)
A:sympy.tensor.array.sparse_ndim_array.sparse_array[i]->_sympify(el)
A:sympy.tensor.array.sparse_ndim_array.self->object.__new__(cls)
A:sympy.tensor.array.sparse_ndim_array.self._rank->len(shape)
A:sympy.tensor.array.sparse_ndim_array.self._sparse_array->dict(flat_list)
A:sympy.tensor.array.sparse_ndim_array.self._sparse_array[i]->_sympify(el)
A:sympy.tensor.array.sparse_ndim_array.(value, eindices, slice_offsets)->object.__new__(cls)._get_slice_data_for_array_assignment(index, value)
A:sympy.tensor.array.sparse_ndim_array.complete_index->object.__new__(cls)._parse_index(i)
A:sympy.tensor.array.sparse_ndim_array.value->_sympify(value)
sympy.ImmutableSparseNDimArray(cls,iterable=None,shape=None,**kwargs)
sympy.MutableSparseNDimArray(cls,iterable=None,shape=None,**kwargs)
sympy.SparseNDimArray(self,*args,**kwargs)
sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray(cls,iterable=None,shape=None,**kwargs)
sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray.__setitem__(self,index,value)
sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray.as_mutable(self)
sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray(cls,iterable=None,shape=None,**kwargs)
sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray.__setitem__(self,index,value)
sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray.as_immutable(self)
sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray.free_symbols(self)
sympy.tensor.array.sparse_ndim_array.SparseNDimArray(self,*args,**kwargs)
sympy.tensor.array.sparse_ndim_array.SparseNDimArray.__getitem__(self,index)
sympy.tensor.array.sparse_ndim_array.SparseNDimArray.reshape(self,*newshape)
sympy.tensor.array.sparse_ndim_array.SparseNDimArray.tomatrix(self)
sympy.tensor.array.sparse_ndim_array.SparseNDimArray.zeros(cls,*shape)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/array_derivatives.py----------------------------------------
A:sympy.tensor.array.array_derivatives.obj->super().__new__(cls, expr, *variables, **kwargs)
A:sympy.tensor.array.array_derivatives.obj._shape->super().__new__(cls, expr, *variables, **kwargs)._get_shape()
A:sympy.tensor.array.array_derivatives.result->derive_by_array(expr, v)
sympy.tensor.array.array_derivatives.ArrayDerivative(cls,expr,*variables,**kwargs)
sympy.tensor.array.array_derivatives.ArrayDerivative._call_derive_array_by_scalar(expr:NDimArray,v:Expr)->Expr
sympy.tensor.array.array_derivatives.ArrayDerivative._call_derive_default(expr:Expr,v:Expr)->Expr | None
sympy.tensor.array.array_derivatives.ArrayDerivative._call_derive_matexpr_by_scalar(expr:MatrixExpr,v:Expr)->Expr
sympy.tensor.array.array_derivatives.ArrayDerivative._call_derive_matrix_by_scalar(expr:MatrixCommon,v:Expr)->Expr
sympy.tensor.array.array_derivatives.ArrayDerivative._call_derive_scalar_by_array(expr:Expr,v:NDimArray)->Expr
sympy.tensor.array.array_derivatives.ArrayDerivative._call_derive_scalar_by_matexpr(expr:Expr,v:MatrixExpr)->Expr
sympy.tensor.array.array_derivatives.ArrayDerivative._call_derive_scalar_by_matrix(expr:Expr,v:MatrixCommon)->Expr
sympy.tensor.array.array_derivatives.ArrayDerivative._dispatch_eval_derivative_n_times(cls,expr,v,count)
sympy.tensor.array.array_derivatives.ArrayDerivative._get_shape(self)
sympy.tensor.array.array_derivatives.ArrayDerivative._get_zero_with_shape_like(cls,expr)
sympy.tensor.array.array_derivatives.ArrayDerivative.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/dense_ndim_array.py----------------------------------------
A:sympy.tensor.array.dense_ndim_array.syindex->object.__new__(cls)._check_symbolic_index(index)
A:sympy.tensor.array.dense_ndim_array.index->object.__new__(cls)._parse_index(index)
A:sympy.tensor.array.dense_ndim_array.(sl_factors, eindices)->object.__new__(cls)._get_slice_data_for_array_access(index)
A:sympy.tensor.array.dense_ndim_array.list_length->functools.reduce(lambda x, y: x * y, shape, S.One)
A:sympy.tensor.array.dense_ndim_array.new_total_size->functools.reduce(lambda x, y: x * y, newshape)
A:sympy.tensor.array.dense_ndim_array.(shape, flat_list)->cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
A:sympy.tensor.array.dense_ndim_array.shape->Tuple(*map(_sympify, shape))
A:sympy.tensor.array.dense_ndim_array.flat_list->flatten(flat_list)
A:sympy.tensor.array.dense_ndim_array.self->object.__new__(cls)
A:sympy.tensor.array.dense_ndim_array.self._array->list(flat_list)
A:sympy.tensor.array.dense_ndim_array.self._rank->len(shape)
A:sympy.tensor.array.dense_ndim_array.self._loop_size->functools.reduce(lambda x, y: x * y, shape, 1)
A:sympy.tensor.array.dense_ndim_array.(value, eindices, slice_offsets)->object.__new__(cls)._get_slice_data_for_array_assignment(index, value)
A:sympy.tensor.array.dense_ndim_array.value->_sympify(value)
sympy.DenseNDimArray(self,*args,**kwargs)
sympy.ImmutableDenseNDimArray(cls,iterable,shape=None,**kwargs)
sympy.MutableDenseNDimArray(cls,iterable=None,shape=None,**kwargs)
sympy.tensor.array.dense_ndim_array.DenseNDimArray(self,*args,**kwargs)
sympy.tensor.array.dense_ndim_array.DenseNDimArray.__getitem__(self,index)
sympy.tensor.array.dense_ndim_array.DenseNDimArray.kind(self)->ArrayKind
sympy.tensor.array.dense_ndim_array.DenseNDimArray.reshape(self,*newshape)
sympy.tensor.array.dense_ndim_array.DenseNDimArray.tomatrix(self)
sympy.tensor.array.dense_ndim_array.DenseNDimArray.zeros(cls,*shape)
sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray(cls,iterable,shape=None,**kwargs)
sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray.__setitem__(self,index,value)
sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray._eval_simplify(self,**kwargs)
sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray._new(cls,iterable,shape,**kwargs)
sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray.as_mutable(self)
sympy.tensor.array.dense_ndim_array.MutableDenseNDimArray(cls,iterable=None,shape=None,**kwargs)
sympy.tensor.array.dense_ndim_array.MutableDenseNDimArray.__setitem__(self,index,value)
sympy.tensor.array.dense_ndim_array.MutableDenseNDimArray._new(cls,iterable,shape,**kwargs)
sympy.tensor.array.dense_ndim_array.MutableDenseNDimArray.as_immutable(self)
sympy.tensor.array.dense_ndim_array.MutableDenseNDimArray.free_symbols(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/from_array_to_indexed.py----------------------------------------
A:sympy.tensor.array.expressions.from_array_to_indexed.cumul->list(accumulate([1] + list(reversed(shape_up)), operator.mul))
A:sympy.tensor.array.expressions.from_array_to_indexed.bottom_shape->get_shape(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_indexed.d->Dummy(f'd{self.count_dummies}')
A:sympy.tensor.array.expressions.from_array_to_indexed.newexpr->self.do_convert(expr.expr, new_indices)
A:sympy.tensor.array.expressions.from_array_to_indexed.ind_pos->expr._push_indices_down(expr.diagonal_indices, list(range(len(indices))), get_rank(expr))
A:sympy.tensor.array.expressions.from_array_to_indexed.permuted_indices->_apply_permutation_to_list(expr.permutation, indices)
A:sympy.tensor.array.expressions.from_array_to_indexed.shape_down->get_shape(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_indexed.one_index->sympy.Add.fromiter((i * s for (i, s) in zip(reversed(indices), cumul)))
sympy.tensor.array.expressions.convert_array_to_indexed(expr,indices)
sympy.tensor.array.expressions.from_array_to_indexed._ConvertArrayToIndexed(self)
sympy.tensor.array.expressions.from_array_to_indexed._ConvertArrayToIndexed.do_convert(self,expr,indices)
sympy.tensor.array.expressions.from_array_to_indexed.convert_array_to_indexed(expr,indices)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/from_indexed_to_array.py----------------------------------------
A:sympy.tensor.array.expressions.from_indexed_to_array.(result, indices)->_convert_indexed_to_array(expr)
A:sympy.tensor.array.expressions.from_indexed_to_array.result->ArrayElement(result, indices)
A:sympy.tensor.array.expressions.from_indexed_to_array.permutation->Permutation([arg_indices.index(j) for j in index0])
A:sympy.tensor.array.expressions.from_indexed_to_array.(subexpr, subindices)->_convert_indexed_to_array(expr.args[0])
A:sympy.tensor.array.expressions.from_indexed_to_array.summation_indices->sorted({subindicessets.get(i, i) for i in summation_indices}, key=default_sort_key)
A:sympy.tensor.array.expressions.from_indexed_to_array.kronecker_indices->sorted(kronecker_indices, key=default_sort_key)
A:sympy.tensor.array.expressions.from_indexed_to_array.arg_indices->sorted(set(arg.indices), key=default_sort_key)
A:sympy.tensor.array.expressions.from_indexed_to_array.shape->get_shape(subexpr)
A:sympy.tensor.array.expressions.from_indexed_to_array.i->_get_argindex(subindices, ind)
A:sympy.tensor.array.expressions.from_indexed_to_array.subindices->list(subindices)
A:sympy.tensor.array.expressions.from_indexed_to_array.diagonal_indices->list(subexpr.diagonal_indices)
A:sympy.tensor.array.expressions.from_indexed_to_array.position->dindices.index(index)
A:sympy.tensor.array.expressions.from_indexed_to_array.subexpr->_array_diagonal(subexpr.expr, *diagonal_indices)
A:sympy.tensor.array.expressions.from_indexed_to_array.axes_contraction->defaultdict(list)
A:sympy.tensor.array.expressions.from_indexed_to_array.indices_ret->list(free_indices)
A:sympy.tensor.array.expressions.from_indexed_to_array.(args, indices)->zip(*[_convert_indexed_to_array(arg) for arg in expr.args])
A:sympy.tensor.array.expressions.from_indexed_to_array.kindices->frozenset(kindices)
A:sympy.tensor.array.expressions.from_indexed_to_array.(diagonal_indices, ret_indices)->_get_diagonal_indices(indices)
A:sympy.tensor.array.expressions.from_indexed_to_array.tp->_array_tensor_product(*newargs)
A:sympy.tensor.array.expressions.from_indexed_to_array.args->list(args)
A:sympy.tensor.array.expressions.from_indexed_to_array.arg_indices_set->set(arg_indices)
A:sympy.tensor.array.expressions.from_indexed_to_array.arg_indices_missing->set(arg_indices).difference(index0)
A:sympy.tensor.array.expressions.from_indexed_to_array.arg_shape->get_shape(arg)
A:sympy.tensor.array.expressions.from_indexed_to_array.args[i]->_permute_dims(args[i], permutation)
A:sympy.tensor.array.expressions.from_indexed_to_array.diags->zip(*[(2 * i, 2 * i + 1) for i in range(expr.exp)])
A:sympy.tensor.array.expressions.from_indexed_to_array.arr->_array_diagonal(_array_tensor_product(*[subexpr for i in range(expr.exp)]), *diags)
sympy.tensor.array.expressions.convert_indexed_to_array(expr,first_indices=None)
sympy.tensor.array.expressions.from_indexed_to_array._convert_indexed_to_array(expr)
sympy.tensor.array.expressions.from_indexed_to_array.convert_indexed_to_array(expr,first_indices=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/array_expressions.py----------------------------------------
A:sympy.tensor.array.expressions.array_expressions.symbol->Symbol(symbol)
A:sympy.tensor.array.expressions.array_expressions.shape->Tuple(*shape)
A:sympy.tensor.array.expressions.array_expressions.obj->sympy.core.expr.Expr.__new__(cls, expr, shape)
A:sympy.tensor.array.expressions.array_expressions.name->_sympify(name)
A:sympy.tensor.array.expressions.array_expressions.indices->tuple(indices)
A:sympy.tensor.array.expressions.array_expressions.index_error->IndexError('number of indices does not match shape of the array')
A:sympy.tensor.array.expressions.array_expressions.deep->hints.get('deep', True)
A:sympy.tensor.array.expressions.array_expressions.canonicalize->kwargs.get('canonicalize', False)
A:sympy.tensor.array.expressions.array_expressions.obj._shape->tuple(shape)
A:sympy.tensor.array.expressions.array_expressions.args->list(expr.args)
A:sympy.tensor.array.expressions.array_expressions.shapes->reduce(operator.add, [get_shape(i) for i in args], ())
A:sympy.tensor.array.expressions.array_expressions.tp->_array_tensor_product(*[arg.expr if isinstance(arg, ArrayDiagonal) else arg for arg in args])
A:sympy.tensor.array.expressions.array_expressions.i2->len(arg.diagonal_indices)
A:sympy.tensor.array.expressions.array_expressions.ranks->list(set(ranks))
A:sympy.tensor.array.expressions.array_expressions.expr->_array_contraction(_array_tensor_product(*args), *contraction_indices)
A:sympy.tensor.array.expressions.array_expressions.expr_rank->get_rank(expr)
A:sympy.tensor.array.expressions.array_expressions.permutation->_af_invert(inverse_permutation)
A:sympy.tensor.array.expressions.array_expressions.(expr, permutation)->self._PermuteDims_denestarg_ArrayTensorProduct(expr, permutation)
A:sympy.tensor.array.expressions.array_expressions.perm_image_form->_af_invert(permutation.array_form)
A:sympy.tensor.array.expressions.array_expressions.cumul->list(accumulate([0] + expr.subranks))
A:sympy.tensor.array.expressions.array_expressions.new_permutation->Permutation(_af_invert([j for i in [permutation_array_blocks_up[k] for k in new_perm_image_form] for j in i]))
A:sympy.tensor.array.expressions.array_expressions.image_form->_af_invert(permutation.array_form)
A:sympy.tensor.array.expressions.array_expressions.index_blocks_up->_array_contraction(_array_tensor_product(*args), *contraction_indices)._push_indices_up(expr.contraction_indices, index_blocks)
A:sympy.tensor.array.expressions.array_expressions.sorting_keys->list(enumerate(index_blocks_up_permuted))
A:sympy.tensor.array.expressions.array_expressions.new_index_perm_array_form->_af_invert([j for i in new_index_blocks for j in i])
A:sympy.tensor.array.expressions.array_expressions.new_expr->_array_contraction(_array_tensor_product(*new_args), *new_contraction_indices)
A:sympy.tensor.array.expressions.array_expressions.new_args->list(expr.args)
A:sympy.tensor.array.expressions.array_expressions.inserted_arg_cand_indices->set()
A:sympy.tensor.array.expressions.array_expressions.new_args[i1]->_permute_dims(new_args[i1], Permutation(local_current_indices))
A:sympy.tensor.array.expressions.array_expressions.args_positions->list(range(len(new_args)))
A:sympy.tensor.array.expressions.array_expressions.elem->next(iter(s))
A:sympy.tensor.array.expressions.array_expressions.(k, v)->maps.popitem()
A:sympy.tensor.array.expressions.array_expressions.v->maps.pop(k)
A:sympy.tensor.array.expressions.array_expressions.args[j]->_permute_dims(args[j], Permutation([[k - cumulative_subranks[j] for k in cyclic_form[i]]]))
A:sympy.tensor.array.expressions.array_expressions.ret->_array_tensor_product(*[_array_contraction(arg, *contr) for (arg, contr) in zip(expr.args, contraction_indices_args)])
A:sympy.tensor.array.expressions.array_expressions.newcycles->ArrayContraction._convert_outer_indices_to_inner_indices(expr, *cycles)
A:sympy.tensor.array.expressions.array_expressions.newpermutation->Permutation(newcycles)
A:sympy.tensor.array.expressions.array_expressions.(positions, shape)->cls._get_positions_shape(range(rank), diagonal_indices)
A:sympy.tensor.array.expressions.array_expressions.obj._subranks->_get_subranks(expr)
A:sympy.tensor.array.expressions.array_expressions.rank1->get_rank(self)
A:sympy.tensor.array.expressions.array_expressions.rank2->len(diagonal_indices)
A:sympy.tensor.array.expressions.array_expressions.indices_down->ArrayDiagonal._push_indices_down(diagonal_indices_short, list(range(rank1)), get_rank(expr))
A:sympy.tensor.array.expressions.array_expressions.total_rank->_get_subrank(expr)
A:sympy.tensor.array.expressions.array_expressions.inner_rank->len(all_inner)
A:sympy.tensor.array.expressions.array_expressions.outer_diagonal_indices->tuple((tuple((shifts[j] + j for j in i)) for i in outer_diagonal_indices))
A:sympy.tensor.array.expressions.array_expressions.shift->len(new_permutation1)
A:sympy.tensor.array.expressions.array_expressions.data1->tuple(((i, shp) for (i, shp) in enumerate(shape) if not any((i in j for j in diagonal_indices))))
A:sympy.tensor.array.expressions.array_expressions.data2->tuple(((i, shape[i[0]]) for i in diagonal_indices))
A:sympy.tensor.array.expressions.array_expressions.d->Dummy('d')
A:sympy.tensor.array.expressions.array_expressions.function->self.function(d)
A:sympy.tensor.array.expressions.array_expressions.fdiff->Lambda(d, fdiff)
A:sympy.tensor.array.expressions.array_expressions.contraction_indices->self.get_contraction_indices()
A:sympy.tensor.array.expressions.array_expressions.obj._mapping->_get_mapping_from_subranks(obj._subranks)
A:sympy.tensor.array.expressions.array_expressions.(expr, contraction_indices)->self._lower_contraction_to_addends(expr, contraction_indices)
A:sympy.tensor.array.expressions.array_expressions.transform->_build_push_indices_up_func_transformation(flattened_contraction_indices)
A:sympy.tensor.array.expressions.array_expressions.cumranks->list(accumulate([0] + subranks))
A:sympy.tensor.array.expressions.array_expressions.backshift->set()
A:sympy.tensor.array.expressions.array_expressions.shifts->ArrayContraction._get_index_shifts(expr)
A:sympy.tensor.array.expressions.array_expressions.editor->_EditArrayContraction(self)
A:sympy.tensor.array.expressions.array_expressions.positions->_EditArrayContraction(self).get_mapping_for_index(indl)
A:sympy.tensor.array.expressions.array_expressions.(abs_arg_start, abs_arg_end)->_EditArrayContraction(self).get_absolute_range(arg)
A:sympy.tensor.array.expressions.array_expressions.v.element->diagonalize_vector(v.element)
A:sympy.tensor.array.expressions.array_expressions.new_index->_EditArrayContraction(self).get_new_contraction_index()
A:sympy.tensor.array.expressions.array_expressions.contraction_down->self.expr._push_indices_down(self.expr.diagonal_indices, self.contraction_indices)
A:sympy.tensor.array.expressions.array_expressions.contraction_group->list(i)
A:sympy.tensor.array.expressions.array_expressions.new_contraction_indices->_sort_contraction_indices(new_contraction_indices)
A:sympy.tensor.array.expressions.array_expressions.outer_contraction_indices->ArrayContraction._convert_outer_indices_to_inner_indices(expr, *outer_contraction_indices)
A:sympy.tensor.array.expressions.array_expressions.new_plist->cls._push_indices_up(new_contraction_indices, new_plist)
A:sympy.tensor.array.expressions.array_expressions.diagonal_indices->list(expr.diagonal_indices)
A:sympy.tensor.array.expressions.array_expressions.down_contraction_indices->_array_contraction(_array_tensor_product(*args), *contraction_indices)._push_indices_down(expr.diagonal_indices, contraction_indices, get_rank(expr.expr))
A:sympy.tensor.array.expressions.array_expressions.new_diagonal_indices->ArrayContraction._push_indices_up(new_contraction_indices, new_diagonal_indices_down)
A:sympy.tensor.array.expressions.array_expressions.new_pos->sorted(range(len(expr.args)), key=lambda x: (0, default_sort_key(expr.args[x])) if fully_contracted[x] else (1,))
A:sympy.tensor.array.expressions.array_expressions.index_permutation_array_form->_af_invert(new_index_blocks_flat)
A:sympy.tensor.array.expressions.array_expressions.sorted_data->sorted(enumerate(args), key=lambda x: default_sort_key(x[1]))
A:sympy.tensor.array.expressions.array_expressions.(pos_sorted, args_sorted)->zip(*sorted_data)
A:sympy.tensor.array.expressions.array_expressions.contraction_tuples->self._get_contraction_tuples()
A:sympy.tensor.array.expressions.array_expressions.c_tp->_array_tensor_product(*args_sorted)
A:sympy.tensor.array.expressions.array_expressions.new_contr_indices->self._contraction_tuples_to_contraction_indices(c_tp, contraction_tuples)
A:sympy.tensor.array.expressions.array_expressions.(args, dlinks)->_get_contraction_links([self], self.subranks, *self.contraction_indices)
A:sympy.tensor.array.expressions.array_expressions.ee->Array(ee)
A:sympy.tensor.array.expressions.array_expressions.mapping->_get_mapping_from_subranks(base_array.subranks)
A:sympy.tensor.array.expressions.array_expressions.diagonalized->ArrayContraction._push_indices_down(base_array.expr.contraction_indices, base_array.diagonal_indices)
A:sympy.tensor.array.expressions.array_expressions.pos->self.args_with_ind.index(arg)
A:sympy.tensor.array.expressions.array_expressions.self.number_of_contraction_indices->len(updates)
A:sympy.tensor.array.expressions.array_expressions.scalar->sympy.core.mul.Mul.fromiter([i.element for i in scalars])
A:sympy.tensor.array.expressions.array_expressions.self.args_with_ind[0].element->_a2m_tensor_product(scalar, self.args_with_ind[0].element)
A:sympy.tensor.array.expressions.array_expressions.diag_indices->defaultdict(list)
A:sympy.tensor.array.expressions.array_expressions.count_index_freq->Counter()
A:sympy.tensor.array.expressions.array_expressions.done->set()
A:sympy.tensor.array.expressions.array_expressions.expr2->_permute_dims(expr2, permutation2)
A:sympy.tensor.array.expressions.array_expressions.permutation2->_af_invert([j for i in self._track_permutation for j in i])
A:sympy.tensor.array.expressions.array_expressions.expr3->_permute_dims(expr2, permutation)
A:sympy.tensor.array.expressions.array_expressions.data->set()
A:sympy.tensor.array.expressions.array_expressions.index_destination->self.args_with_ind.index(destination)
A:sympy.tensor.array.expressions.array_expressions.index_element->self.args_with_ind.index(from_element)
A:sympy.tensor.array.expressions.array_expressions.number_free_indices->len([i for i in arg_with_ind.indices if i is None])
A:sympy.tensor.array.expressions.array_expressions.number_indices->len(arg_with_ind.indices)
sympy.tensor.array.expressions.ArrayAdd(cls,*args,**kwargs)
sympy.tensor.array.expressions.ArrayContraction(cls,expr,*contraction_indices,**kwargs)
sympy.tensor.array.expressions.ArrayDiagonal(cls,expr,*diagonal_indices,**kwargs)
sympy.tensor.array.expressions.ArrayElement(cls,name,indices)
sympy.tensor.array.expressions.ArrayElementwiseApplyFunc(cls,function,element)
sympy.tensor.array.expressions.ArraySymbol(cls,symbol,shape:typing.Iterable)
sympy.tensor.array.expressions.ArrayTensorProduct(cls,*args,**kwargs)
sympy.tensor.array.expressions.OneArray(cls,*shape)
sympy.tensor.array.expressions.PermuteDims(cls,expr,permutation=None,index_order_old=None,index_order_new=None,**kwargs)
sympy.tensor.array.expressions.Reshape(cls,expr,shape)
sympy.tensor.array.expressions.ZeroArray(cls,*shape)
sympy.tensor.array.expressions.array_expressions.ArrayAdd(cls,*args,**kwargs)
sympy.tensor.array.expressions.array_expressions.ArrayAdd._canonicalize(self)
sympy.tensor.array.expressions.array_expressions.ArrayAdd._flatten_args(cls,args)
sympy.tensor.array.expressions.array_expressions.ArrayAdd.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction(cls,expr,*contraction_indices,**kwargs)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._ArrayContraction_denest_ArrayAdd(cls,expr,*contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._ArrayContraction_denest_ArrayContraction(cls,expr,*contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._ArrayContraction_denest_ArrayDiagonal(cls,expr:'ArrayDiagonal',*contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._ArrayContraction_denest_PermuteDims(cls,expr,*contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._ArrayContraction_denest_ZeroArray(cls,expr,*contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.__mul__(self,other)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.__rmul__(self,other)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._canonicalize(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._contraction_indices_to_components(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._contraction_tuples_to_contraction_indices(expr,contraction_tuples)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._convert_outer_indices_to_inner_indices(expr,*outer_contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._flatten(expr,*outer_contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._get_contraction_links(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._get_contraction_tuples(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._get_free_indices_to_position_map(free_indices,contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._get_index_shifts(expr)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._lower_contraction_to_addends(cls,expr,contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._push_indices_down(cls,contraction_indices,indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._push_indices_up(cls,contraction_indices,indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._sort_fully_contracted_args(cls,expr,contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction._validate(expr,*contraction_indices)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.contraction_indices(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.expr(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.flatten_contraction_of_diagonal(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.free_indices(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.free_indices_to_position(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.sort_args_by_name(self)
sympy.tensor.array.expressions.array_expressions.ArrayContraction.split_multiple_contractions(self)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal(cls,expr,*diagonal_indices,**kwargs)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._ArrayDiagonal_denest_ArrayAdd(cls,expr,*diagonal_indices)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._ArrayDiagonal_denest_ArrayDiagonal(cls,expr,*diagonal_indices)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._ArrayDiagonal_denest_PermuteDims(cls,expr:PermuteDims,*diagonal_indices)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._canonicalize(self)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._flatten(expr,*outer_diagonal_indices)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._get_positions_shape(cls,shape,diagonal_indices)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._push_indices_down(cls,diagonal_indices,indices,rank)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._push_indices_down_nonstatic(self,indices)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._push_indices_up(cls,diagonal_indices,indices,rank)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._push_indices_up_nonstatic(self,indices)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._remove_trivial_dimensions(shape,*diagonal_indices)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal._validate(expr,*diagonal_indices,**kwargs)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal.diagonal_indices(self)
sympy.tensor.array.expressions.array_expressions.ArrayDiagonal.expr(self)
sympy.tensor.array.expressions.array_expressions.ArrayElement(cls,name,indices)
sympy.tensor.array.expressions.array_expressions.ArrayElement._check_shape(cls,name,indices)
sympy.tensor.array.expressions.array_expressions.ArrayElement._eval_derivative(self,s)
sympy.tensor.array.expressions.array_expressions.ArrayElement.indices(self)
sympy.tensor.array.expressions.array_expressions.ArrayElement.name(self)
sympy.tensor.array.expressions.array_expressions.ArrayElementwiseApplyFunc(cls,function,element)
sympy.tensor.array.expressions.array_expressions.ArrayElementwiseApplyFunc._get_function_fdiff(self)
sympy.tensor.array.expressions.array_expressions.ArrayElementwiseApplyFunc.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.ArrayElementwiseApplyFunc.expr(self)
sympy.tensor.array.expressions.array_expressions.ArrayElementwiseApplyFunc.function(self)
sympy.tensor.array.expressions.array_expressions.ArrayElementwiseApplyFunc.shape(self)
sympy.tensor.array.expressions.array_expressions.ArraySymbol(cls,symbol,shape:typing.Iterable)
sympy.tensor.array.expressions.array_expressions.ArraySymbol.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.ArraySymbol.name(self)
sympy.tensor.array.expressions.array_expressions.ArraySymbol.shape(self)
sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct(cls,*args,**kwargs)
sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct._canonicalize(self)
sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct._flatten(cls,args)
sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.OneArray(cls,*shape)
sympy.tensor.array.expressions.array_expressions.OneArray._get(self,item)
sympy.tensor.array.expressions.array_expressions.OneArray.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.OneArray.shape(self)
sympy.tensor.array.expressions.array_expressions.PermuteDims(cls,expr,permutation=None,index_order_old=None,index_order_new=None,**kwargs)
sympy.tensor.array.expressions.array_expressions.PermuteDims._PermuteDims_denestarg_ArrayContraction(cls,expr,permutation)
sympy.tensor.array.expressions.array_expressions.PermuteDims._PermuteDims_denestarg_ArrayTensorProduct(cls,expr,permutation)
sympy.tensor.array.expressions.array_expressions.PermuteDims._canonicalize(self)
sympy.tensor.array.expressions.array_expressions.PermuteDims._check_if_there_are_closed_cycles(cls,expr,permutation)
sympy.tensor.array.expressions.array_expressions.PermuteDims._check_permutation_mapping(cls,expr,permutation)
sympy.tensor.array.expressions.array_expressions.PermuteDims._get_permutation_from_arguments(cls,permutation,index_order_old,index_order_new,dim)
sympy.tensor.array.expressions.array_expressions.PermuteDims._get_permutation_from_index_orders(cls,index_order_old,index_order_new,dim)
sympy.tensor.array.expressions.array_expressions.PermuteDims._nest_permutation(cls,expr,permutation)
sympy.tensor.array.expressions.array_expressions.PermuteDims.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.PermuteDims.expr(self)
sympy.tensor.array.expressions.array_expressions.PermuteDims.nest_permutation(self)
sympy.tensor.array.expressions.array_expressions.PermuteDims.permutation(self)
sympy.tensor.array.expressions.array_expressions.Reshape(cls,expr,shape)
sympy.tensor.array.expressions.array_expressions.Reshape.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.Reshape.doit(self,*args,**kwargs)
sympy.tensor.array.expressions.array_expressions.Reshape.expr(self)
sympy.tensor.array.expressions.array_expressions.Reshape.shape(self)
sympy.tensor.array.expressions.array_expressions.ZeroArray(cls,*shape)
sympy.tensor.array.expressions.array_expressions.ZeroArray._get(self,item)
sympy.tensor.array.expressions.array_expressions.ZeroArray.as_explicit(self)
sympy.tensor.array.expressions.array_expressions.ZeroArray.shape(self)
sympy.tensor.array.expressions.array_expressions._ArgE(self,element,indices:Optional[List[Optional[int]]]=None)
sympy.tensor.array.expressions.array_expressions._ArgE.__str__(self)
sympy.tensor.array.expressions.array_expressions._ArrayExpr(Expr)
sympy.tensor.array.expressions.array_expressions._ArrayExpr.__getitem__(self,item)
sympy.tensor.array.expressions.array_expressions._ArrayExpr._get(self,item)
sympy.tensor.array.expressions.array_expressions._CodegenArrayAbstract(Basic)
sympy.tensor.array.expressions.array_expressions._CodegenArrayAbstract.doit(self,**hints)
sympy.tensor.array.expressions.array_expressions._CodegenArrayAbstract.shape(self)
sympy.tensor.array.expressions.array_expressions._CodegenArrayAbstract.subrank(self)
sympy.tensor.array.expressions.array_expressions._CodegenArrayAbstract.subranks(self)
sympy.tensor.array.expressions.array_expressions._EditArrayContraction(self,base_array:typing.Union[ArrayContraction,ArrayDiagonal,ArrayTensorProduct])
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.count_args_with_index(self,index:int)->int
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.get_absolute_free_range(self,arg:_ArgE)->typing.Tuple[int, int]
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.get_absolute_range(self,arg:_ArgE)->typing.Tuple[int, int]
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.get_args_with_index(self,index:int)->List[_ArgE]
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.get_contraction_indices(self)->List[List[int]]
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.get_contraction_indices_to_ind_rel_pos(self)->List[List[_IndPos]]
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.get_mapping_for_index(self,ind)->List[_IndPos]
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.get_new_contraction_index(self)
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.insert_after(self,arg:_ArgE,new_arg:_ArgE)
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.merge_scalars(self)
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.number_of_diagonal_indices(self)
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.refresh_indices(self)
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.to_array_contraction(self)
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.track_permutation_merge(self,destination:_ArgE,from_element:_ArgE)
sympy.tensor.array.expressions.array_expressions._EditArrayContraction.track_permutation_start(self)
sympy.tensor.array.expressions.array_expressions._IndPos(self,arg:int,rel:int)
sympy.tensor.array.expressions.array_expressions._IndPos.__iter__(self)
sympy.tensor.array.expressions.array_expressions._IndPos.__str__(self)
sympy.tensor.array.expressions.array_expressions._array_add(*args,**kwargs)
sympy.tensor.array.expressions.array_expressions._array_contraction(expr,*contraction_indices,**kwargs)
sympy.tensor.array.expressions.array_expressions._array_diagonal(expr,*diagonal_indices,**kwargs)
sympy.tensor.array.expressions.array_expressions._array_tensor_product(*args,**kwargs)
sympy.tensor.array.expressions.array_expressions._get_array_element_or_slice(expr,indices)
sympy.tensor.array.expressions.array_expressions._get_subrank(expr)
sympy.tensor.array.expressions.array_expressions._get_subranks(expr)
sympy.tensor.array.expressions.array_expressions._permute_dims(expr,permutation,**kwargs)
sympy.tensor.array.expressions.array_expressions.get_rank(expr)
sympy.tensor.array.expressions.array_expressions.get_shape(expr)
sympy.tensor.array.expressions.array_expressions.nest_permutation(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/utils.py----------------------------------------
A:sympy.tensor.array.expressions.utils.mapping->_get_mapping_from_subranks(subranks)
A:sympy.tensor.array.expressions.utils.dlinks->defaultdict(dict)
A:sympy.tensor.array.expressions.utils.axes_contraction->defaultdict(list)
A:sympy.tensor.array.expressions.utils.diag_indices->list(axes_contraction)
A:sympy.tensor.array.expressions.utils.ret_indices->tuple(ret_indices)
A:sympy.tensor.array.expressions.utils.shift_keys->sorted(shifts.keys())
sympy.tensor.array.expressions.utils._apply_permutation_to_list(perm:Permutation,target_list:list)
sympy.tensor.array.expressions.utils._apply_recursively_over_nested_lists(func,arr)
sympy.tensor.array.expressions.utils._build_push_indices_down_func_transformation(flattened_contraction_indices)
sympy.tensor.array.expressions.utils._build_push_indices_up_func_transformation(flattened_contraction_indices)
sympy.tensor.array.expressions.utils._get_argindex(subindices,ind)
sympy.tensor.array.expressions.utils._get_contraction_links(args,subranks,*contraction_indices)
sympy.tensor.array.expressions.utils._get_diagonal_indices(flattened_indices)
sympy.tensor.array.expressions.utils._get_mapping_from_subranks(subranks)
sympy.tensor.array.expressions.utils._sort_contraction_indices(pairing_indices)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/from_array_to_matrix.py----------------------------------------
A:sympy.tensor.array.expressions.from_array_to_matrix.other->Transpose(other)
A:sympy.tensor.array.expressions.from_array_to_matrix.new_arge->_ArgE(new_element)
A:sympy.tensor.array.expressions.from_array_to_matrix.ac->_array_contraction(_array_tensor_product(*args), *contraction_indices)
A:sympy.tensor.array.expressions.from_array_to_matrix.editor->_EditArrayContraction(expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.first_frequency->_EditArrayContraction(expr).count_args_with_index(first_index)
A:sympy.tensor.array.expressions.from_array_to_matrix.second_frequency->_EditArrayContraction(expr).count_args_with_index(second_index)
A:sympy.tensor.array.expressions.from_array_to_matrix.arg_with_ind.element->Trace(arg_with_ind.element)._normalize()
A:sympy.tensor.array.expressions.from_array_to_matrix.(candidate, transpose, found_index)->_get_candidate_for_matmul_from_contraction(scan_indices, editor.args_with_ind[i + 1:])
A:sympy.tensor.array.expressions.from_array_to_matrix.(new_arge, other_index)->_insert_candidate_into_editor(editor, arg_with_ind, candidate, transpose1, transpose)
A:sympy.tensor.array.expressions.from_array_to_matrix.set_indices->set(new_arge.indices)
A:sympy.tensor.array.expressions.from_array_to_matrix.new_arge.element->Trace(new_arge.element)._normalize()
A:sympy.tensor.array.expressions.from_array_to_matrix.first->sympy.matrices.expressions.matmul.MatMul.fromiter(margs[:j + 1])
A:sympy.tensor.array.expressions.from_array_to_matrix.second->sympy.matrices.expressions.matmul.MatMul.fromiter(margs[j + 1:])
A:sympy.tensor.array.expressions.from_array_to_matrix.args[pos]->(first * MatMul.fromiter((i for i in trivial_matrices)) * second).doit()
A:sympy.tensor.array.expressions.from_array_to_matrix.shape->get_shape(arg)
A:sympy.tensor.array.expressions.from_array_to_matrix.newargs[-1]->KroneckerProduct(newargs[-1], arg)
A:sympy.tensor.array.expressions.from_array_to_matrix.expr->identify_hadamard_products(expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.subexpr->_array2matrix(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.newexpr->_permute_dims(subexpr, p2)
A:sympy.tensor.array.expressions.from_array_to_matrix.addends->_array_add(*[_a2m_tensor_product(*j) for j in itertools.product(*[i.args if isinstance(i, ArrayAdd) else [i] for i in expr.expr.args])])
A:sympy.tensor.array.expressions.from_array_to_matrix.ret->_array2matrix(expr.name)
A:sympy.tensor.array.expressions.from_array_to_matrix.pexpr->_array_diag2contr_diagmatrix(pexpr)
A:sympy.tensor.array.expressions.from_array_to_matrix.mat_mul_lines->_array2matrix(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.args_array[i]->_a2m_transpose(mat_mul_lines.args[p1 // 2])
A:sympy.tensor.array.expressions.from_array_to_matrix.w->Wild('w', exclude=[d])
A:sympy.tensor.array.expressions.from_array_to_matrix.p->Wild('p', exclude=[d])
A:sympy.tensor.array.expressions.from_array_to_matrix.m->identify_hadamard_products(expr).function.expr.match(w * d ** p)
A:sympy.tensor.array.expressions.from_array_to_matrix.cumul->list(accumulate([0] + [get_rank(arg) for arg in args]))
A:sympy.tensor.array.expressions.from_array_to_matrix.current_range->list(range(cumul[i], cumul[i + 1]))
A:sympy.tensor.array.expressions.from_array_to_matrix.(rarg, rem)->_remove_trivial_dims(arg)
A:sympy.tensor.array.expressions.from_array_to_matrix.(arg, _)->_remove_trivial_dims(arg)
A:sympy.tensor.array.expressions.from_array_to_matrix.prev->_a2m_transpose(prev)
A:sympy.tensor.array.expressions.from_array_to_matrix.arg->_a2m_transpose(arg)
A:sympy.tensor.array.expressions.from_array_to_matrix.(newexpr, newremoved2)->_find_trivial_kronecker_products_broadcast(newexpr)
A:sympy.tensor.array.expressions.from_array_to_matrix.newremoved->_combine_removed(-1, newremoved, newremoved2)
A:sympy.tensor.array.expressions.from_array_to_matrix.(newargs, removed)->zip(*rec)
A:sympy.tensor.array.expressions.from_array_to_matrix.(subexpr, subremoved)->_remove_trivial_dims(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.pinv->_af_invert(expr.permutation.array_form)
A:sympy.tensor.array.expressions.from_array_to_matrix.shift->list(accumulate([1 if i in subremoved else 0 for i in range(len(p))]))
A:sympy.tensor.array.expressions.from_array_to_matrix.premoved->_combine_removed(-1, premoved, removed2)
A:sympy.tensor.array.expressions.from_array_to_matrix.(newexpr, removed2)->_remove_trivial_dims(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.(new_expr, removed0)->_array_contraction_to_diagonal_multiple_identity(expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.(new_expr2, removed1)->_remove_trivial_dims(_array2matrix(new_expr))
A:sympy.tensor.array.expressions.from_array_to_matrix.removed->_combine_removed(-1, removed, removed2)
A:sympy.tensor.array.expressions.from_array_to_matrix.rank1->get_rank(expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.(expr, removed1)->remove_identity_matrices(expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.(expr2, removed2)->_remove_trivial_dims(expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.shifts->list(accumulate([1 if i in removed else 0 for i in range(get_rank(expr))]))
A:sympy.tensor.array.expressions.from_array_to_matrix.removed2->sorted(removed2)
A:sympy.tensor.array.expressions.from_array_to_matrix.none_index->Transpose(other).indices.index(None)
A:sympy.tensor.array.expressions.from_array_to_matrix.other.element->DiagMatrix(other.element)
A:sympy.tensor.array.expressions.from_array_to_matrix.other_range->_EditArrayContraction(expr).get_absolute_range(other)
A:sympy.tensor.array.expressions.from_array_to_matrix.(newexpr, removed)->_remove_trivial_dims(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.rank->get_rank(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.newexpr2->_array_diagonal(newexpr, *new_diag_indices, allow_trivial_diags=True)
A:sympy.tensor.array.expressions.from_array_to_matrix.(newexpr3, removed2)->_remove_diagonalized_identity_matrices(newexpr2)
A:sympy.tensor.array.expressions.from_array_to_matrix.(subexpr, removed)->_remove_trivial_dims(expr.expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.rec->_array2matrix(expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.(rec, removed)->_remove_trivial_dims(rec)
A:sympy.tensor.array.expressions.from_array_to_matrix.args->_EditArrayContraction(expr).get_args_with_index(ind)
A:sympy.tensor.array.expressions.from_array_to_matrix.diag_indices->list(expr.diagonal_indices)
A:sympy.tensor.array.expressions.from_array_to_matrix.mapping->_get_mapping_from_subranks([_get_subrank(arg) for arg in args])
A:sympy.tensor.array.expressions.from_array_to_matrix.total_rank->get_rank(expr)
A:sympy.tensor.array.expressions.from_array_to_matrix.darg1->DiagMatrix(arg1)
A:sympy.tensor.array.expressions.from_array_to_matrix.args[pos1_outer]->OneArray(arg1.shape[pos1_in2])
A:sympy.tensor.array.expressions.from_array_to_matrix.darg2->DiagMatrix(arg2)
A:sympy.tensor.array.expressions.from_array_to_matrix.args[pos2_outer]->OneArray(arg2.shape[pos2_in2])
A:sympy.tensor.array.expressions.from_array_to_matrix.tc->_array_contraction(_array_tensor_product(*args), *contr_indices2)
A:sympy.tensor.array.expressions.from_array_to_matrix.td->_array_diagonal(tc, *diag_indices_new)
A:sympy.tensor.array.expressions.from_array_to_matrix.scalar->sympy.core.mul.Mul.fromiter(scalars)
A:sympy.tensor.array.expressions.from_array_to_matrix.hp->Trace(first_element * hp.T)._normalize()
A:sympy.tensor.array.expressions.from_array_to_matrix.hp_indices->list(reversed(hp_indices))
A:sympy.tensor.array.expressions.from_array_to_matrix.counted->_EditArrayContraction(expr).count_args_with_index(ind)
A:sympy.tensor.array.expressions.from_array_to_matrix.ind_new->_EditArrayContraction(expr).get_new_contraction_index()
A:sympy.tensor.array.expressions.from_array_to_matrix.free_indices->list(accumulate([0] + [sum([i is None for i in arg.indices]) for arg in editor.args_with_ind]))
A:sympy.tensor.array.expressions.from_array_to_matrix.number_identity_matrices->len(identity_matrices)
A:sympy.tensor.array.expressions.from_array_to_matrix.last_removed->_combine_removed(-1, removed, removed2).pop(-1)
A:sympy.tensor.array.expressions.from_array_to_matrix.ret_expr->_EditArrayContraction(expr).to_array_contraction()
A:sympy.tensor.array.expressions.from_array_to_matrix.ret_expr2->_permute_dims(ret_expr, _af_invert(permutation))
A:sympy.tensor.array.expressions.from_array_to_matrix.removed1->sorted(removed1)
A:sympy.tensor.array.expressions.from_array_to_matrix.new_expr->_EditArrayContraction(expr).to_array_contraction()
sympy.tensor.array.expressions.convert_array_to_matrix(expr)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayAdd)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayAdd)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayContraction)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayContraction)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayDiagonal)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayDiagonal)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayElement)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayElementwiseApplyFunc)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayElementwiseApplyFunc)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayTensorProduct)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ArrayTensorProduct)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ElementwiseApplyFunction)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:PermuteDims)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:PermuteDims)
sympy.tensor.array.expressions.from_array_to_matrix._(expr:ZeroArray)
sympy.tensor.array.expressions.from_array_to_matrix._a2m_add(*args)
sympy.tensor.array.expressions.from_array_to_matrix._a2m_mul(*args)
sympy.tensor.array.expressions.from_array_to_matrix._a2m_tensor_product(*args)
sympy.tensor.array.expressions.from_array_to_matrix._a2m_trace(arg)
sympy.tensor.array.expressions.from_array_to_matrix._a2m_transpose(arg)
sympy.tensor.array.expressions.from_array_to_matrix._array2matrix(expr)
sympy.tensor.array.expressions.from_array_to_matrix._array_contraction_to_diagonal_multiple_identity(expr:ArrayContraction)
sympy.tensor.array.expressions.from_array_to_matrix._array_diag2contr_diagmatrix(expr:ArrayDiagonal)
sympy.tensor.array.expressions.from_array_to_matrix._combine_removed(dim:int,removed1:List[int],removed2:List[int])->List[int]
sympy.tensor.array.expressions.from_array_to_matrix._find_trivial_kronecker_products_broadcast(expr:ArrayTensorProduct)
sympy.tensor.array.expressions.from_array_to_matrix._find_trivial_matrices_rewrite(expr:ArrayTensorProduct)
sympy.tensor.array.expressions.from_array_to_matrix._get_candidate_for_matmul_from_contraction(scan_indices:List[Optional[int]],remaining_args:List[_ArgE])->tTuple[Optional[_ArgE], bool, int]
sympy.tensor.array.expressions.from_array_to_matrix._insert_candidate_into_editor(editor:_EditArrayContraction,arg_with_ind:_ArgE,candidate:_ArgE,transpose1:bool,transpose2:bool)
sympy.tensor.array.expressions.from_array_to_matrix._remove_diagonalized_identity_matrices(expr:ArrayDiagonal)
sympy.tensor.array.expressions.from_array_to_matrix._remove_trivial_dims(expr)
sympy.tensor.array.expressions.from_array_to_matrix._support_function_tp1_recognize(contraction_indices,args)
sympy.tensor.array.expressions.from_array_to_matrix.convert_array_to_matrix(expr)
sympy.tensor.array.expressions.from_array_to_matrix.identify_hadamard_products(expr:tUnion[ArrayContraction,ArrayDiagonal])
sympy.tensor.array.expressions.from_array_to_matrix.identify_removable_identity_matrices(expr)
sympy.tensor.array.expressions.from_array_to_matrix.remove_identity_matrices(expr:ArrayContraction)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/conv_indexed_to_array.py----------------------------------------
A:sympy.tensor.array.expressions.conv_indexed_to_array.convert_indexed_to_array->_conv_to_from_decorator(from_indexed_to_array.convert_indexed_to_array)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/arrayexpr_derivatives.py----------------------------------------
A:sympy.tensor.array.expressions.arrayexpr_derivatives.darg->array_derive(arg, x)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.shape_prev->reduce(operator.add, map(get_shape, args_prev), ())
A:sympy.tensor.array.expressions.arrayexpr_derivatives.shape_succ->reduce(operator.add, map(get_shape, args_succ), ())
A:sympy.tensor.array.expressions.arrayexpr_derivatives.addend->_permute_dims(addend, _af_invert(perm))
A:sympy.tensor.array.expressions.arrayexpr_derivatives.tot1->len(get_shape(x))
A:sympy.tensor.array.expressions.arrayexpr_derivatives.fd->array_derive(expr.expr, x)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.dexpr->array_derive(expr.expr, x)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.tp->_array_tensor_product(dsubexpr, ArrayElementwiseApplyFunc(fdiff, subexpr))
A:sympy.tensor.array.expressions.arrayexpr_derivatives.mp->_array_contraction(tp, (1, 4), (5, 6))
A:sympy.tensor.array.expressions.arrayexpr_derivatives.pp->_permute_dims(mp, [1, 2, 0, 3])
A:sympy.tensor.array.expressions.arrayexpr_derivatives.fdiff->expr._get_function_fdiff()
A:sympy.tensor.array.expressions.arrayexpr_derivatives.td->_array_diagonal(tp, (0, 4), (1, 5))
A:sympy.tensor.array.expressions.arrayexpr_derivatives.dsubexpr->array_derive(expr.expr, x)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.b->get_rank(x)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.c->get_rank(expr)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.cg->convert_matrix_to_array(expr)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.rank_x->len(get_shape(x))
A:sympy.tensor.array.expressions.arrayexpr_derivatives.de->array_derive(expr.expr, x)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.ce->convert_matrix_to_array(expr)
A:sympy.tensor.array.expressions.arrayexpr_derivatives.dce->array_derive(ce, x)
sympy.tensor.array.expressions.array_derive(expr,x)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:ArrayAdd,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:ArrayContraction,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:ArrayDiagonal,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:ArrayElementwiseApplyFunc,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:ArraySymbol,x:_ArrayExpr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:ArrayTensorProduct,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:ElementwiseApplyFunction,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:Expr,x:_ArrayExpr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:HadamardProduct,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:Identity,x:_ArrayExpr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:Inverse,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:MatrixExpr,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:MatrixSymbol,x:_ArrayExpr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:OneMatrix,x:_ArrayExpr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:PermuteDims,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:Reshape,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives._(expr:Transpose,x:Expr)
sympy.tensor.array.expressions.arrayexpr_derivatives.array_derive(expr,x)
sympy.tensor.array.expressions.arrayexpr_derivatives.matrix_derive(expr,x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/from_matrix_to_array.py----------------------------------------
A:sympy.tensor.array.expressions.from_matrix_to_array.tprod->_array_tensor_product(scalar, *[convert_matrix_to_array(arg) for arg in args])
A:sympy.tensor.array.expressions.from_matrix_to_array.base->convert_matrix_to_array(expr.base)
A:sympy.tensor.array.expressions.from_matrix_to_array.b->symbols('b', cls=Dummy)
A:sympy.tensor.array.expressions.from_matrix_to_array.tp->_array_tensor_product(*[convert_matrix_to_array(arg) for arg in expr.args])
A:sympy.tensor.array.expressions.from_matrix_to_array.d->Dummy('d')
sympy.tensor.array.expressions.convert_matrix_to_array(expr:Basic)->Basic
sympy.tensor.array.expressions.from_matrix_to_array.convert_matrix_to_array(expr:Basic)->Basic


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/conv_array_to_matrix.py----------------------------------------
A:sympy.tensor.array.expressions.conv_array_to_matrix.convert_array_to_matrix->_conv_to_from_decorator(from_array_to_matrix.convert_array_to_matrix)
A:sympy.tensor.array.expressions.conv_array_to_matrix._array2matrix->_conv_to_from_decorator(from_array_to_matrix._array2matrix)
A:sympy.tensor.array.expressions.conv_array_to_matrix._remove_trivial_dims->_conv_to_from_decorator(from_array_to_matrix._remove_trivial_dims)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/conv_array_to_indexed.py----------------------------------------
A:sympy.tensor.array.expressions.conv_array_to_indexed._conv_to_from_decorator->deprecated("module has been renamed by replacing 'conv_' with 'from_' in its name", deprecated_since_version='1.11', active_deprecations_target='deprecated-conv-array-expr-module-names')
A:sympy.tensor.array.expressions.conv_array_to_indexed.convert_array_to_indexed->_conv_to_from_decorator(from_array_to_indexed.convert_array_to_indexed)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/conv_matrix_to_array.py----------------------------------------
A:sympy.tensor.array.expressions.conv_matrix_to_array.convert_matrix_to_array->_conv_to_from_decorator(from_matrix_to_array.convert_matrix_to_array)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/test_convert_indexed_to_array.py----------------------------------------
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.(A, B)->symbols('A B', cls=IndexedBase)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.(i, j, k, l, m, n)->symbols('i j k l m n')
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.(d0, d1, d2, d3)->symbols('d0:4')
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.I->Identity(k)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.M->MatrixSymbol('M', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.N->MatrixSymbol('N', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.P->MatrixSymbol('P', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.Q->MatrixSymbol('Q', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.a->MatrixSymbol('a', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.b->MatrixSymbol('b', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.c->MatrixSymbol('c', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.d->MatrixSymbol('d', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.expr->Sum(M[i, j] * N[j, m], (j, 1, k - 1))
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.(ret1, ret2)->_convert_indexed_to_array(expr)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.s->tanh(A[i] * B[j])
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.cg->convert_indexed_to_array(elem)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.result->_array_contraction(_array_tensor_product(M, M, N), (1, 4), (2, 5))
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.A->ArraySymbol('A', (3, 3))
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.B->ArraySymbol('B', (3, 3))
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.(p1, p2)->_convert_indexed_to_array(expr)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.O2->OneArray(3, 3)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.expected->ArrayAdd(ArrayTensorProduct(A, O2), ArrayTensorProduct(O2, B))
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.O1->OneArray(3)
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.C->ArraySymbol('C', (d0, d1))
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.D->ArraySymbol('D', (d3, d1))
A:sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.X->ArraySymbol('X', (5, 3))
sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.test_arrayexpr_convert_array_element_to_array_expression()
sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.test_arrayexpr_convert_index_to_array_support_function()
sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.test_arrayexpr_convert_indexed_to_array_and_back_to_matrix()
sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.test_arrayexpr_convert_indexed_to_array_broadcast()
sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.test_arrayexpr_convert_indexed_to_array_expression()
sympy.tensor.array.expressions.tests.test_convert_indexed_to_array.test_arrayexpr_convert_indexed_to_array_out_of_bounds()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/test_convert_array_to_matrix.py----------------------------------------
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.(i, j, k, l, m, n)->symbols('i j k l m n')
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.I->Identity(k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.I1->Identity(1)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.M->MatrixSymbol('M', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.N->MatrixSymbol('N', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.P->MatrixSymbol('P', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.Q->MatrixSymbol('Q', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.A->MatrixSymbol('A', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.B->MatrixSymbol('B', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.C->MatrixSymbol('C', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.D->DiagonalMatrix(MatrixSymbol('D', k, k))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.X->MatrixSymbol('X', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.Y->MatrixSymbol('Y', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.a->ArrayAdd(_array_tensor_product(M, N), _array_tensor_product(N, M))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.b->MatrixSymbol('b', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.c->MatrixSymbol('c', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.d->Dummy('d')
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.x->MatrixSymbol('x', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.y->MatrixSymbol('y', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.cg->_array_contraction(_array_tensor_product(A, B, D, M, N), (1, 2, 4, 5, 6, 8))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.za->ZeroArray(m, n)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.expr->ArrayTensorProduct(a, b, x.T * x)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.Xm->MatrixSymbol('Xm', m, n)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.expected->PermuteDims(ArrayTensorProduct(x * x.T, I1), Permutation(3)(1, 2))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.tp->_array_tensor_product(OneMatrix(1, 1), M, x, OneMatrix(1, 1), Identity(1))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.result->_array_contraction(_array_tensor_product(P, ArrayAdd(_array_contraction(_array_tensor_product(M, N), (1, 2)), _array_contraction(_array_tensor_product(N, M), (1, 2))), Q), (1, 2), (3, 4))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.(rexpr, removed)->_remove_trivial_dims(cg)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.(ret, removed)->_remove_trivial_dims(cg)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.Xs->ArraySymbol('X', (3, 2, k))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.res->_array_diag2contr_diagmatrix(cg)
A:sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.ret->identify_removable_identity_matrices(cg)
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_array2matrix()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_array_contraction_to_diagonal_multiple_identities()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_arrayexpr_convert_array_contraction_tp_additions()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_arrayexpr_convert_array_to_diagonalized_vector()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_arrayexpr_convert_array_to_implicit_matmul()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_arrayexpr_convert_array_to_matrix()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_arrayexpr_convert_array_to_matrix2()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_arrayexpr_convert_array_to_matrix_diag2contraction_diagmatrix()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_arrayexpr_convert_array_to_matrix_remove_trivial_dims()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_arrayexpr_convert_array_to_matrix_support_function()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_combine_removed()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_convert_array_element_to_matrix()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_convert_array_elementwise_function_to_matrix()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_convert_array_to_hadamard_products()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_identify_removable_identity_matrices()
sympy.tensor.array.expressions.tests.test_convert_array_to_matrix.test_recognize_broadcasting()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/test_convert_matrix_to_array.py----------------------------------------
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.(i, j, k, l, m, n)->symbols('i j k l m n')
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.I->Identity(k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.M->MatrixSymbol('M', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.N->MatrixSymbol('N', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.P->MatrixSymbol('P', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.Q->MatrixSymbol('Q', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.A->MatrixSymbol('A', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.B->MatrixSymbol('B', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.C->MatrixSymbol('C', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.D->MatrixSymbol('D', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.X->MatrixSymbol('X', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.Y->MatrixSymbol('Y', k, k)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.a->MatrixSymbol('a', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.b->MatrixSymbol('b', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.c->MatrixSymbol('c', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.d->MatrixSymbol('d', k, 1)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.result->ArrayElementwiseApplyFunc(Lambda(d0, d0 ** n), M)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.expr->KroneckerProduct(A, B, C, D)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.res->convert_matrix_to_array(expr)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.rexpr->convert_array_to_matrix(res)
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.d0->Dummy('d0')
A:sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.cg->convert_matrix_to_array(expr)
sympy.tensor.array.expressions.tests.test_convert_matrix_to_array.test_arrayexpr_convert_matrix_to_array()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/test_convert_array_to_indexed.py----------------------------------------
A:sympy.tensor.array.expressions.tests.test_convert_array_to_indexed.A->ArraySymbol('A', (3, 3, 3))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_indexed.B->ArraySymbol('B', (3, 3))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_indexed.C->ArraySymbol('C', (3, 3))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_indexed.d_->Dummy('d_')
A:sympy.tensor.array.expressions.tests.test_convert_array_to_indexed.expr->Reshape(X, (2, 3, 5))
A:sympy.tensor.array.expressions.tests.test_convert_array_to_indexed.conv->convert_array_to_indexed(expr, [i, j, k])
A:sympy.tensor.array.expressions.tests.test_convert_array_to_indexed.X->ArraySymbol('X', (2 * 3 * 5,))
sympy.tensor.array.expressions.tests.test_convert_array_to_indexed.test_convert_array_to_indexed_main()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/test_as_explicit.py----------------------------------------
A:sympy.tensor.array.expressions.tests.test_as_explicit.k->Symbol('k')
A:sympy.tensor.array.expressions.tests.test_as_explicit.X->ArraySymbol('X', (k, 3, 2))
A:sympy.tensor.array.expressions.tests.test_as_explicit.A->MatrixSymbol('A', 3, 3)
A:sympy.tensor.array.expressions.tests.test_as_explicit.B->MatrixSymbol('B', 3, 3)
A:sympy.tensor.array.expressions.tests.test_as_explicit.texpr->permutedims(A, [1, 0])
A:sympy.tensor.array.expressions.tests.test_as_explicit.expr->ArrayAdd(ArrayTensorProduct(A, B), ArrayTensorProduct(B, A))
sympy.tensor.array.expressions.tests.test_as_explicit.test_array_as_explicit_call()
sympy.tensor.array.expressions.tests.test_as_explicit.test_array_as_explicit_matrix_symbol()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/test_arrayexpr_derivatives.py----------------------------------------
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.k->symbols('k')
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.I->Identity(k)
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.X->MatrixSymbol('X', k, k)
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.x->MatrixSymbol('x', k, 1)
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.A->MatrixSymbol('A', k, k)
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.B->MatrixSymbol('B', k, k)
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.C->MatrixSymbol('C', k, k)
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.D->MatrixSymbol('D', k, k)
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.A1->ArraySymbol('A', (3, 2, k))
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.res->array_derive(cg, A)
A:sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.cg->Reshape(A, (k ** 2,))
sympy.tensor.array.expressions.tests.test_arrayexpr_derivatives.test_arrayexpr_derivatives1()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/test_deprecated_conv_modules.py----------------------------------------
A:sympy.tensor.array.expressions.tests.test_deprecated_conv_modules.M->MatrixSymbol('M', 3, 3)
A:sympy.tensor.array.expressions.tests.test_deprecated_conv_modules.N->MatrixSymbol('N', 3, 3)
A:sympy.tensor.array.expressions.tests.test_deprecated_conv_modules.(i, j, d)->symbols('i j d')
A:sympy.tensor.array.expressions.tests.test_deprecated_conv_modules.x->ArrayContraction(ArrayTensorProduct(M, N), (1, 2))
A:sympy.tensor.array.expressions.tests.test_deprecated_conv_modules.y->Sum(M[i, d] * N[d, j], (d, 0, 2))
sympy.tensor.array.expressions.tests.test_deprecated_conv_modules.test_deprecated_conv_module_results()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/test_array_expressions.py----------------------------------------
A:sympy.tensor.array.expressions.tests.test_array_expressions.(i, j, k, l, m, n)->symbols('i j k l m n')
A:sympy.tensor.array.expressions.tests.test_array_expressions.M->ArraySymbol('M', (k, k))
A:sympy.tensor.array.expressions.tests.test_array_expressions.N->ArraySymbol('N', (k, k))
A:sympy.tensor.array.expressions.tests.test_array_expressions.P->ArraySymbol('P', (k, k))
A:sympy.tensor.array.expressions.tests.test_array_expressions.Q->ArraySymbol('Q', (k, k))
A:sympy.tensor.array.expressions.tests.test_array_expressions.A->Array([[x, y], [z, t]])
A:sympy.tensor.array.expressions.tests.test_array_expressions.B->ArraySymbol('B', (2, 2, 2))
A:sympy.tensor.array.expressions.tests.test_array_expressions.C->Array([1, 2, 3, 4])
A:sympy.tensor.array.expressions.tests.test_array_expressions.D->ArraySymbol('D', (k, k))
A:sympy.tensor.array.expressions.tests.test_array_expressions.X->MatrixSymbol('X', k, k)
A:sympy.tensor.array.expressions.tests.test_array_expressions.Y->ArraySymbol('Y', (k, k))
A:sympy.tensor.array.expressions.tests.test_array_expressions.a->MatrixSymbol('a', k, 1)
A:sympy.tensor.array.expressions.tests.test_array_expressions.b->MatrixSymbol('b', k, 1)
A:sympy.tensor.array.expressions.tests.test_array_expressions.c->ArraySymbol('c', (k, 1))
A:sympy.tensor.array.expressions.tests.test_array_expressions.d->ArraySymbol('d', (k, 1))
A:sympy.tensor.array.expressions.tests.test_array_expressions.A0->ArrayElement(A, (0,))
A:sympy.tensor.array.expressions.tests.test_array_expressions.A1->ArrayElement(A, (1,))
A:sympy.tensor.array.expressions.tests.test_array_expressions.A2->tensorproduct(A, A)
A:sympy.tensor.array.expressions.tests.test_array_expressions.A3->tensorcontraction(A2, (0, 1))
A:sympy.tensor.array.expressions.tests.test_array_expressions.Ae->Array([[x, y], [z, t]]).as_explicit()
A:sympy.tensor.array.expressions.tests.test_array_expressions.p->_permute_dims(A, Permutation(0, 2, 1))
A:sympy.tensor.array.expressions.tests.test_array_expressions.O->OneArray(3, 4)
A:sympy.tensor.array.expressions.tests.test_array_expressions.Z->MatrixSymbol('Z', m, n)
A:sympy.tensor.array.expressions.tests.test_array_expressions.za->ZeroArray(m, n, k, 2)
A:sympy.tensor.array.expressions.tests.test_array_expressions.za_e->ZeroArray(m, n, k, 2).as_explicit()
A:sympy.tensor.array.expressions.tests.test_array_expressions.(m, n, k)->symbols('m n k')
A:sympy.tensor.array.expressions.tests.test_array_expressions.oa->OneArray(m, n, k, 2)
A:sympy.tensor.array.expressions.tests.test_array_expressions.oa_e->OneArray(m, n, k, 2).as_explicit()
A:sympy.tensor.array.expressions.tests.test_array_expressions.cg->_array_contraction(_array_tensor_product(A, B, C, D), (1, 2, 5))
A:sympy.tensor.array.expressions.tests.test_array_expressions.indtup->_array_contraction(_array_tensor_product(A, B, C, D), (1, 2, 5))._get_contraction_tuples()
A:sympy.tensor.array.expressions.tests.test_array_expressions.expr1->_array_contraction(_array_tensor_product(X, A), (1, 2))
A:sympy.tensor.array.expressions.tests.test_array_expressions.expr2->_array_add(expr, expr3)
A:sympy.tensor.array.expressions.tests.test_array_expressions.expr->Reshape(C, (2, 2))
A:sympy.tensor.array.expressions.tests.test_array_expressions.cg1->_array_contraction(_array_contraction(_array_contraction(_array_contraction(_permute_dims(_array_tensor_product(N, Q, Q, M), [2, 1, 5, 4, 0, 3, 6, 7]), [1, 2, 6]), [1, 3, 4]), [1]), [0])
A:sympy.tensor.array.expressions.tests.test_array_expressions.cg2->_array_contraction(_array_tensor_product(M, N, Q, Q), (0, 3, 5), (1, 4, 7), (2,), (6,))
A:sympy.tensor.array.expressions.tests.test_array_expressions.cgnested->_array_diagonal(cg4, (1, 2))
A:sympy.tensor.array.expressions.tests.test_array_expressions.cg3->_array_diagonal(_array_tensor_product(M, N, P, Q), (1, 3), (2, 4))
A:sympy.tensor.array.expressions.tests.test_array_expressions.cg4->_array_diagonal(_array_tensor_product(M, N, P, Q), (1, 5), (3, 7))
A:sympy.tensor.array.expressions.tests.test_array_expressions.Ax->ArraySymbol('Ax', shape=(1, 2, 3, 4, 3, 5, 6, 2, 7))
A:sympy.tensor.array.expressions.tests.test_array_expressions.exprp->_permute_dims(expr, [2, 1, 3, 0])
A:sympy.tensor.array.expressions.tests.test_array_expressions.expr3->_array_tensor_product(N, Z)
A:sympy.tensor.array.expressions.tests.test_array_expressions.sunk->nest_permutation(cg)
A:sympy.tensor.array.expressions.tests.test_array_expressions.indices->list(range(12))
A:sympy.tensor.array.expressions.tests.test_array_expressions.expected->_array_contraction(_array_tensor_product(A.T, DiagMatrix(a), OneArray(1), b, b.T, (A * X * b).applyfunc(cos)), (1, 3), (2, 9), (6, 7, 10))
A:sympy.tensor.array.expressions.tests.test_array_expressions.Me->ArraySymbol('M', (k, k)).subs(k, 3).as_explicit()
A:sympy.tensor.array.expressions.tests.test_array_expressions.Ne->ArraySymbol('N', (k, k)).subs(k, 3).as_explicit()
A:sympy.tensor.array.expressions.tests.test_array_expressions.Pe->ArraySymbol('P', (k, k)).subs(k, 3).as_explicit()
A:sympy.tensor.array.expressions.tests.test_array_expressions.cge->tensorproduct(Me, Ne, Pe)
A:sympy.tensor.array.expressions.tests.test_array_expressions.p1->Permutation(permutation_array1)
A:sympy.tensor.array.expressions.tests.test_array_expressions.p2->Permutation(permutation_array2)
A:sympy.tensor.array.expressions.tests.test_array_expressions.result->_array_add(_array_diagonal(_array_tensor_product(M, N), (1, 2)), _array_diagonal(_array_tensor_product(N, M), (1, 2)))
A:sympy.tensor.array.expressions.tests.test_array_expressions.result1->_permute_dims(_permute_dims(cge, p1), p2)
A:sympy.tensor.array.expressions.tests.test_array_expressions.result2->_permute_dims(cge, p2 * p1)
A:sympy.tensor.array.expressions.tests.test_array_expressions.cge1->tensorcontraction(permutedims(tensorproduct(Me, Ne), Permutation([0, 2, 1, 3])), (2, 3))
A:sympy.tensor.array.expressions.tests.test_array_expressions.cge2->tensorcontraction(tensorproduct(Me, Ne), (1, 3))
A:sympy.tensor.array.expressions.tests.test_array_expressions.tp->tensorproduct(M, N)
A:sympy.tensor.array.expressions.tests.test_array_expressions.td->_array_diagonal(_array_tensor_product(M, N, P, Q), (0, 3))
A:sympy.tensor.array.expressions.tests.test_array_expressions.za1->ZeroArray(k, l, m, n)
A:sympy.tensor.array.expressions.tests.test_array_expressions.zm1->ZeroMatrix(m, n)
A:sympy.tensor.array.expressions.tests.test_array_expressions.za2->ZeroArray(k, m, m, n)
A:sympy.tensor.array.expressions.tests.test_array_expressions.zm2->ZeroMatrix(m, m)
A:sympy.tensor.array.expressions.tests.test_array_expressions.zm3->ZeroMatrix(k, k)
A:sympy.tensor.array.expressions.tests.test_array_expressions.tp1->_array_tensor_product(MatrixSymbol('A', k, l), MatrixSymbol('B', m, n))
A:sympy.tensor.array.expressions.tests.test_array_expressions.tp2->_array_tensor_product(MatrixSymbol('C', k, l), MatrixSymbol('D', m, n))
A:sympy.tensor.array.expressions.tests.test_array_expressions.aaf->ArrayElementwiseApplyFunc(sin, A)
A:sympy.tensor.array.expressions.tests.test_array_expressions.ecg->_EditArrayContraction(cg)
A:sympy.tensor.array.expressions.tests.test_array_expressions.ci->_EditArrayContraction(cg).get_new_contraction_index()
A:sympy.tensor.array.expressions.tests.test_array_expressions.new_arg->_ArgE(X)
A:sympy.tensor.array.expressions.tests.test_array_expressions.arr->Array(range(32)).reshape(2, 2, 2, 2, 2)
A:sympy.tensor.array.expressions.tests.test_array_expressions.K4->ArraySymbol('K4', shape=(k, k, k, k))
A:sympy.tensor.array.expressions.tests.test_array_expressions.ee->Reshape(C, (2, 2)).as_explicit()
sympy.tensor.array.expressions.tests.test_array_expressions.test_array_element_expressions()
sympy.tensor.array.expressions.tests.test_array_expressions.test_array_expr_as_explicit_with_explicit_component_arrays()
sympy.tensor.array.expressions.tests.test_array_expressions.test_array_expr_construction_with_functions()
sympy.tensor.array.expressions.tests.test_array_expressions.test_array_expr_reshape()
sympy.tensor.array.expressions.tests.test_array_expressions.test_array_expressions_no_canonicalization()
sympy.tensor.array.expressions.tests.test_array_expressions.test_array_symbol_and_element()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_array_diagonal()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_array_expr_applyfunc()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_array_expr_zero_array()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_array_flatten()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_array_shape()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_array_wrong_permutation_size()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_canonicalize_diagonal__permute_dims()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_canonicalize_diagonal_contraction()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_contraction_construction()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_contraction_permutation_mix()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_nested_array_elementwise_add()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_nested_permutations()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_permute_tensor_product()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_permutedims_sink()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_push_indices_up_and_down()
sympy.tensor.array.expressions.tests.test_array_expressions.test_arrayexpr_split_multiple_contractions()
sympy.tensor.array.expressions.tests.test_array_expressions.test_edit_array_contraction()
sympy.tensor.array.expressions.tests.test_array_expressions.test_one_array()
sympy.tensor.array.expressions.tests.test_array_expressions.test_zero_array()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/expressions/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/tests/test_ndim_array_conversions.py----------------------------------------
A:sympy.tensor.array.tests.test_ndim_array_conversions.MD->MutableDenseNDimArray([x, y, z])
A:sympy.tensor.array.tests.test_ndim_array_conversions.MS->MutableSparseNDimArray([x, y, z])
A:sympy.tensor.array.tests.test_ndim_array_conversions.ID->ImmutableDenseNDimArray([x, y, z])
A:sympy.tensor.array.tests.test_ndim_array_conversions.IS->ImmutableSparseNDimArray([x, y, z])
sympy.tensor.array.tests.test_ndim_array_conversions.test_NDim_array_conv()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/tests/test_array_comprehension.py----------------------------------------
A:sympy.tensor.array.tests.test_array_comprehension.a->ArrayComprehensionMap(lambda i, j: i + j, (i, 1, 5))
A:sympy.tensor.array.tests.test_array_comprehension.b->ArrayComprehensionMap(lambda i: i + 1, (i, 1, 2), (i, 1, 3), (i, 1, 4), (i, 1, 5))
A:sympy.tensor.array.tests.test_array_comprehension.c->ArrayComprehension(i + j + k + l, (i, 1, 2), (j, 1, 3), (k, 1, 4), (l, 1, 5))
A:sympy.tensor.array.tests.test_array_comprehension.d->ArrayComprehension(k, (i, 1, 5))
A:sympy.tensor.array.tests.test_array_comprehension.e->ArrayComprehension(i, (j, k + 1, k + 5))
A:sympy.tensor.array.tests.test_array_comprehension.expr->ArrayComprehensionMap(lambda i: i + 1, (i, 1, k))
sympy.tensor.array.tests.test_array_comprehension.test_array_comprehension()
sympy.tensor.array.tests.test_array_comprehension.test_arraycomprehensionmap()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/tests/test_ndim_array.py----------------------------------------
A:sympy.tensor.array.tests.test_ndim_array.test_array->ArrayType([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
A:sympy.tensor.array.tests.test_ndim_array.A->array_type([0, 1, 2])
A:sympy.tensor.array.tests.test_ndim_array.B->Matrix([[1, 2], [3, 4]])
A:sympy.tensor.array.tests.test_ndim_array.C->Array([(x + x ** 2) / (x * sin(y) ** 2 + x * cos(y) ** 2), 2 * sin(x) * cos(x)])
sympy.tensor.array.tests.test_ndim_array.test_array_negative_indices()
sympy.tensor.array.tests.test_ndim_array.test_issue_17851()
sympy.tensor.array.tests.test_ndim_array.test_issue_18361()
sympy.tensor.array.tests.test_ndim_array.test_issue_20222()
sympy.tensor.array.tests.test_ndim_array.test_issue_and_18715()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/tests/test_array_derivatives.py----------------------------------------
A:sympy.tensor.array.tests.test_array_derivatives.(x, y, z, t)->symbols('x y z t')
A:sympy.tensor.array.tests.test_array_derivatives.m->Matrix([[x, y], [z, t]])
A:sympy.tensor.array.tests.test_array_derivatives.M->MatrixSymbol('M', 3, 2)
A:sympy.tensor.array.tests.test_array_derivatives.N->MatrixSymbol('N', 4, 3)
A:sympy.tensor.array.tests.test_array_derivatives.d->ArrayDerivative(M.as_explicit(), (N.as_explicit(), 2), evaluate=False)
A:sympy.tensor.array.tests.test_array_derivatives.expr->ArrayDerivative(M.as_explicit(), (N.as_explicit(), 2), evaluate=False).doit()
sympy.tensor.array.tests.test_array_derivatives.test_array_derivative_construction()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/tests/test_immutable_ndim_array.py----------------------------------------
A:sympy.tensor.array.tests.test_immutable_ndim_array.arr_with_no_elements->ImmutableDenseNDimArray([], shape=(0,))
A:sympy.tensor.array.tests.test_immutable_ndim_array.arr_with_one_element->ImmutableDenseNDimArray([23])
A:sympy.tensor.array.tests.test_immutable_ndim_array.arr_with_symbol_element->ImmutableDenseNDimArray([Symbol('x')])
A:sympy.tensor.array.tests.test_immutable_ndim_array.vector->sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray.zeros(number5)
A:sympy.tensor.array.tests.test_immutable_ndim_array.n_dim_array->ImmutableDenseNDimArray(range(3 ** 4), (3, 3, 3, 3))
A:sympy.tensor.array.tests.test_immutable_ndim_array.sparse_array->ImmutableSparseNDimArray([1, 2, 3, 4], (2, 2))
A:sympy.tensor.array.tests.test_immutable_ndim_array.one_dim_array->ImmutableDenseNDimArray([2, 3, 1])
A:sympy.tensor.array.tests.test_immutable_ndim_array.array_with_many_args->sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray.zeros(*shape)
A:sympy.tensor.array.tests.test_immutable_ndim_array.array_with_long_shape->sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray.zeros(*shape)
A:sympy.tensor.array.tests.test_immutable_ndim_array.vector_with_long_shape->ImmutableDenseNDimArray(range(5), int(5))
A:sympy.tensor.array.tests.test_immutable_ndim_array.rank_zero_array->ArrayType(x)
A:sympy.tensor.array.tests.test_immutable_ndim_array.array->array.reshape(4).reshape(4)
A:sympy.tensor.array.tests.test_immutable_ndim_array.a->ImmutableDenseNDimArray([3 for i in range(9)], (3, 3))
A:sympy.tensor.array.tests.test_immutable_ndim_array.b->ImmutableDenseNDimArray([7 for i in range(9)], (3, 3))
A:sympy.tensor.array.tests.test_immutable_ndim_array.dense_array->ImmutableDenseNDimArray([1, 2, 3, 4], (2, 2))
A:sympy.tensor.array.tests.test_immutable_ndim_array.alist->ImmutableSparseNDimArray([1, 2, 3, 4], (2, 2)).tolist()
A:sympy.tensor.array.tests.test_immutable_ndim_array.matrix->ImmutableSparseNDimArray([1, 2, 3, 4], (2, 2)).tomatrix()
A:sympy.tensor.array.tests.test_immutable_ndim_array.arr_matrix->Matrix(((1, 2), (3, 4)))
A:sympy.tensor.array.tests.test_immutable_ndim_array.arr_ndim_array->ImmutableDenseNDimArray(arr_matrix)
A:sympy.tensor.array.tests.test_immutable_ndim_array.first_ndim_array->ImmutableDenseNDimArray(first_list, (2, 2))
A:sympy.tensor.array.tests.test_immutable_ndim_array.second_ndim_array->ImmutableDenseNDimArray(second_list, (2, 2))
A:sympy.tensor.array.tests.test_immutable_ndim_array.fourth_ndim_array->ImmutableDenseNDimArray(first_list, (2, 2))
A:sympy.tensor.array.tests.test_immutable_ndim_array.e3->copy(a)
A:sympy.tensor.array.tests.test_immutable_ndim_array.f2->copy(a)
A:sympy.tensor.array.tests.test_immutable_ndim_array.m3->ImmutableDenseNDimArray(range(10, 34), (2, 3, 4))
A:sympy.tensor.array.tests.test_immutable_ndim_array.m3_rebuilt->ImmutableDenseNDimArray([[[10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21]], [[22, 23, 24, 25], [26, 27, 28, 29], [30, 31, 32, 33]]])
A:sympy.tensor.array.tests.test_immutable_ndim_array.m3_other->ImmutableDenseNDimArray([[[10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21]], [[22, 23, 24, 25], [26, 27, 28, 29], [30, 31, 32, 33]]], (2, 3, 4))
A:sympy.tensor.array.tests.test_immutable_ndim_array.sparr->ImmutableSparseNDimArray(range(10, 34), (2, 3, 4))
A:sympy.tensor.array.tests.test_immutable_ndim_array.densarr->ImmutableDenseNDimArray(range(10, 34), (2, 3, 4))
A:sympy.tensor.array.tests.test_immutable_ndim_array.md->ImmutableDenseNDimArray([1, 2, 3])
A:sympy.tensor.array.tests.test_immutable_ndim_array.sd->ImmutableSparseNDimArray([1, 2, 3])
A:sympy.tensor.array.tests.test_immutable_ndim_array.mdn->ImmutableDenseNDimArray([1, 2, 3]).applyfunc(lambda x: x * 3)
A:sympy.tensor.array.tests.test_immutable_ndim_array.sdn->ImmutableSparseNDimArray([1, 2, 3]).applyfunc(lambda x: x / 2)
A:sympy.tensor.array.tests.test_immutable_ndim_array.sdp->ImmutableSparseNDimArray([1, 2, 3]).applyfunc(lambda x: x + 1)
A:sympy.tensor.array.tests.test_immutable_ndim_array.(x, y, z, w)->symbols('x y z w')
A:sympy.tensor.array.tests.test_immutable_ndim_array.M->ImmutableDenseNDimArray([[x, y], [z, w]])
A:sympy.tensor.array.tests.test_immutable_ndim_array.(i, j)->symbols('i, j')
A:sympy.tensor.array.tests.test_immutable_ndim_array.Ms->ImmutableSparseNDimArray([[2, 3 * x], [4, 5]])
A:sympy.tensor.array.tests.test_immutable_ndim_array.A->IndexedBase('A', (0, 2))
A:sympy.tensor.array.tests.test_immutable_ndim_array.Mo->ImmutableDenseNDimArray([1, 2, 3])
A:sympy.tensor.array.tests.test_immutable_ndim_array.Mos->ImmutableSparseNDimArray([1, 2, 3])
A:sympy.tensor.array.tests.test_immutable_ndim_array.arr->sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray.zeros()
A:sympy.tensor.array.tests.test_immutable_ndim_array.a0->ImmutableDenseNDimArray(0)
A:sympy.tensor.array.tests.test_immutable_ndim_array.a1->ImmutableDenseNDimArray(a0)
sympy.tensor.array.tests.test_immutable_ndim_array.test_arithmetic()
sympy.tensor.array.tests.test_immutable_ndim_array.test_calculation()
sympy.tensor.array.tests.test_immutable_ndim_array.test_converting_functions()
sympy.tensor.array.tests.test_immutable_ndim_array.test_diff_and_applyfunc()
sympy.tensor.array.tests.test_immutable_ndim_array.test_equality()
sympy.tensor.array.tests.test_immutable_ndim_array.test_getitem()
sympy.tensor.array.tests.test_immutable_ndim_array.test_higher_dimenions()
sympy.tensor.array.tests.test_immutable_ndim_array.test_issue_12665()
sympy.tensor.array.tests.test_immutable_ndim_array.test_issue_21870()
sympy.tensor.array.tests.test_immutable_ndim_array.test_iterator()
sympy.tensor.array.tests.test_immutable_ndim_array.test_ndim_array_converting()
sympy.tensor.array.tests.test_immutable_ndim_array.test_ndim_array_initiation()
sympy.tensor.array.tests.test_immutable_ndim_array.test_op_priority()
sympy.tensor.array.tests.test_immutable_ndim_array.test_rebuild_immutable_arrays()
sympy.tensor.array.tests.test_immutable_ndim_array.test_reshape()
sympy.tensor.array.tests.test_immutable_ndim_array.test_slices()
sympy.tensor.array.tests.test_immutable_ndim_array.test_sparse()
sympy.tensor.array.tests.test_immutable_ndim_array.test_symbolic_indexing()
sympy.tensor.array.tests.test_immutable_ndim_array.test_zeros_without_shape()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/tests/test_mutable_ndim_array.py----------------------------------------
A:sympy.tensor.array.tests.test_mutable_ndim_array.arr_with_one_element->MutableDenseNDimArray([23])
A:sympy.tensor.array.tests.test_mutable_ndim_array.arr_with_symbol_element->MutableDenseNDimArray([Symbol('x')])
A:sympy.tensor.array.tests.test_mutable_ndim_array.vector->sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray.zeros(number5)
A:sympy.tensor.array.tests.test_mutable_ndim_array.n_dim_array->MutableDenseNDimArray(range(3 ** 4), (3, 3, 3, 3))
A:sympy.tensor.array.tests.test_mutable_ndim_array.sparse_array->MutableSparseNDimArray([1, 2, 3, 4], (2, 2))
A:sympy.tensor.array.tests.test_mutable_ndim_array.one_dim_array->MutableDenseNDimArray([2, 3, 1])
A:sympy.tensor.array.tests.test_mutable_ndim_array.array_with_many_args->sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray.zeros(*shape)
A:sympy.tensor.array.tests.test_mutable_ndim_array.array_with_long_shape->sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray.zeros(*shape)
A:sympy.tensor.array.tests.test_mutable_ndim_array.vector_with_long_shape->MutableDenseNDimArray(range(5), int(5))
A:sympy.tensor.array.tests.test_mutable_ndim_array.rank_zero_array->ArrayType(x)
A:sympy.tensor.array.tests.test_mutable_ndim_array.arr->MutableDenseNDimArray([[x, y], [1, z * t]])
A:sympy.tensor.array.tests.test_mutable_ndim_array.arr_other->sympify(arr)
A:sympy.tensor.array.tests.test_mutable_ndim_array.array->ArrayType(range(24)).reshape(2, 3, 4)
A:sympy.tensor.array.tests.test_mutable_ndim_array.a->MutableDenseNDimArray(range(12), shape=(4, 3))
A:sympy.tensor.array.tests.test_mutable_ndim_array.b->MutableSparseNDimArray(range(12), shape=(4, 3))
A:sympy.tensor.array.tests.test_mutable_ndim_array.dense_array->MutableDenseNDimArray([1, 2, 3, 4], (2, 2))
A:sympy.tensor.array.tests.test_mutable_ndim_array.alist->MutableSparseNDimArray([1, 2, 3, 4], (2, 2)).tolist()
A:sympy.tensor.array.tests.test_mutable_ndim_array.matrix->MutableSparseNDimArray([1, 2, 3, 4], (2, 2)).tomatrix()
A:sympy.tensor.array.tests.test_mutable_ndim_array.arr_matrix->Matrix(((1, 2), (3, 4)))
A:sympy.tensor.array.tests.test_mutable_ndim_array.arr_ndim_array->MutableDenseNDimArray(arr_matrix)
A:sympy.tensor.array.tests.test_mutable_ndim_array.first_ndim_array->MutableDenseNDimArray(first_list, (2, 2))
A:sympy.tensor.array.tests.test_mutable_ndim_array.second_ndim_array->MutableDenseNDimArray(second_list, (2, 2))
A:sympy.tensor.array.tests.test_mutable_ndim_array.third_ndim_array->MutableDenseNDimArray(third_list, (2, 2))
A:sympy.tensor.array.tests.test_mutable_ndim_array.fourth_ndim_array->MutableDenseNDimArray(first_list, (2, 2))
A:sympy.tensor.array.tests.test_mutable_ndim_array.e3->copy(a)
A:sympy.tensor.array.tests.test_mutable_ndim_array.f2->copy(a)
A:sympy.tensor.array.tests.test_mutable_ndim_array.m3->MutableDenseNDimArray(range(10, 34), (2, 3, 4))
A:sympy.tensor.array.tests.test_mutable_ndim_array.m3_rebuilt->MutableDenseNDimArray([[[10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21]], [[22, 23, 24, 25], [26, 27, 28, 29], [30, 31, 32, 33]]])
A:sympy.tensor.array.tests.test_mutable_ndim_array.m3_other->MutableDenseNDimArray([[[10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21]], [[22, 23, 24, 25], [26, 27, 28, 29], [30, 31, 32, 33]]], (2, 3, 4))
A:sympy.tensor.array.tests.test_mutable_ndim_array.md->MutableDenseNDimArray([[x, y], [x * z, x * y * z]])
A:sympy.tensor.array.tests.test_mutable_ndim_array.sd->MutableSparseNDimArray(md)
sympy.tensor.array.tests.test_mutable_ndim_array.test_arithmetic()
sympy.tensor.array.tests.test_mutable_ndim_array.test_calculation()
sympy.tensor.array.tests.test_mutable_ndim_array.test_converting_functions()
sympy.tensor.array.tests.test_mutable_ndim_array.test_diff()
sympy.tensor.array.tests.test_mutable_ndim_array.test_equality()
sympy.tensor.array.tests.test_mutable_ndim_array.test_getitem()
sympy.tensor.array.tests.test_mutable_ndim_array.test_higher_dimenions()
sympy.tensor.array.tests.test_mutable_ndim_array.test_iterator()
sympy.tensor.array.tests.test_mutable_ndim_array.test_ndim_array_converting()
sympy.tensor.array.tests.test_mutable_ndim_array.test_ndim_array_initiation()
sympy.tensor.array.tests.test_mutable_ndim_array.test_reshape()
sympy.tensor.array.tests.test_mutable_ndim_array.test_slices()
sympy.tensor.array.tests.test_mutable_ndim_array.test_slices_assign()
sympy.tensor.array.tests.test_mutable_ndim_array.test_sparse()
sympy.tensor.array.tests.test_mutable_ndim_array.test_sympify()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/tensor/array/tests/test_arrayop.py----------------------------------------
A:sympy.tensor.array.tests.test_arrayop.(x, y, z, t)->symbols('x y z t')
A:sympy.tensor.array.tests.test_arrayop.A->ArrayType(range(24)).reshape(4, 6)
A:sympy.tensor.array.tests.test_arrayop.B->SparseArrayType({1: 1, 20000: 2}, (10000, 20000))
A:sympy.tensor.array.tests.test_arrayop.C->ArrayType([a, b, c, d])
A:sympy.tensor.array.tests.test_arrayop.a->Array([sexpr])
A:sympy.tensor.array.tests.test_arrayop.b->MutableSparseNDimArray({0: i, 1: j}, (10000, 20000))
A:sympy.tensor.array.tests.test_arrayop.C1->Array([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x], (2, 3, 2, 2))
A:sympy.tensor.array.tests.test_arrayop.sexpr->sin(bexpr)
A:sympy.tensor.array.tests.test_arrayop.cexpr->cos(bexpr)
A:sympy.tensor.array.tests.test_arrayop.U->Array([x, y, z])
A:sympy.tensor.array.tests.test_arrayop.ua->Array([-1, 0])
A:sympy.tensor.array.tests.test_arrayop.Fa->Array([[0, 1], [-1, 0]])
A:sympy.tensor.array.tests.test_arrayop.po->ArrayType(sa, [2, 2, 3, 3, 2, 2])
A:sympy.tensor.array.tests.test_arrayop.sa->symbols('a0:144')
A:sympy.tensor.array.tests.test_arrayop.m1->ArrayType(sa[:6], (2, 3))
A:sympy.tensor.array.tests.test_arrayop.ra->ArrayType(elems, shape)
A:sympy.tensor.array.tests.test_arrayop.perm->list(range(dims))
A:sympy.tensor.array.tests.test_arrayop.z->ArrayType.zeros(4, 5, 6, 7)
A:sympy.tensor.array.tests.test_arrayop.po2->ArrayType(sa, [2, 2, 3, 3, 2, 2]).reshape(4, 9, 2, 2)
A:sympy.tensor.array.tests.test_arrayop.indices_new->list('abcde')
A:sympy.tensor.array.tests.test_arrayop.indices_old->list('cabed')
A:sympy.tensor.array.tests.test_arrayop.new_A->permutedims(A, index_order_new=indices_new, index_order_old=indices_old)
A:sympy.tensor.array.tests.test_arrayop.expr->Array(range(9)).reshape(3, 3)
A:sympy.tensor.array.tests.test_arrayop.(x, y, z)->symbols('x y z')
A:sympy.tensor.array.tests.test_arrayop.expr2->tensorproduct([x, y, z], expr)
A:sympy.tensor.array.tests.test_arrayop.(a, b, c, X, Y, Z)->symbols('a b c X Y Z')
A:sympy.tensor.array.tests.test_arrayop.expr3->tensorproduct([x, y, z], [1, 2, 3], [a, b, c], [X, Y, Z])
sympy.tensor.array.tests.test_arrayop.test_array_permutedims()
sympy.tensor.array.tests.test_arrayop.test_derivative_by_array()
sympy.tensor.array.tests.test_arrayop.test_flatten()
sympy.tensor.array.tests.test_arrayop.test_import_NDimArray()
sympy.tensor.array.tests.test_arrayop.test_issue_emerged_while_discussing_10972()
sympy.tensor.array.tests.test_arrayop.test_permutedims_with_indices()
sympy.tensor.array.tests.test_arrayop.test_tensorcontraction()
sympy.tensor.array.tests.test_arrayop.test_tensordiagonal()
sympy.tensor.array.tests.test_arrayop.test_tensorproduct()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/categories/diagram_drawing.py----------------------------------------
A:sympy.categories.diagram_drawing.edges1->dict(edges)
A:sympy.categories.diagram_drawing.wv->DiagramGrid._juxtapose_edges(w, v)
A:sympy.categories.diagram_drawing.triangles->DiagramGrid._drop_irrelevant_triangles(triangles, placed_objects)
A:sympy.categories.diagram_drawing.pt1_empty->DiagramGrid._empty_point(pt1, grid)
A:sympy.categories.diagram_drawing.pt2_empty->DiagramGrid._empty_point(pt2, grid)
A:sympy.categories.diagram_drawing.obj->DiagramGrid._other_vertex(tri, (grid[a], grid[b]))
A:sympy.categories.diagram_drawing.target_cell->DiagramGrid._choose_target_cell(left_up, left_down, (a, b), obj, skeleton, grid)
A:sympy.categories.diagram_drawing.offset->DiagramGrid._put_object(pt, other_obj, grid, fringe)
A:sympy.categories.diagram_drawing.objects->sorted(all_objects, key=default_sort_key)
A:sympy.categories.diagram_drawing.sorted_candidates->sorted(candidates, key=default_sort_key)
A:sympy.categories.diagram_drawing.objs->DiagramGrid._triangle_objects(tri)
A:sympy.categories.diagram_drawing.candidates->sorted([e for e in tri if skeleton[e]], key=lambda e: FiniteSet(*e).sort_key())
A:sympy.categories.diagram_drawing.groups_grids[group]->DiagramGrid(diagram.subdiagram_from_objects(group), **hints)
A:sympy.categories.diagram_drawing.finiteset_group->group_to_finiteset(group)
A:sympy.categories.diagram_drawing.top_grid->DiagramGrid(Diagram(new_morphisms))
A:sympy.categories.diagram_drawing.grid->DiagramGrid(diagram, groups, **hints)
A:sympy.categories.diagram_drawing.all_objects->set(diagram.objects)
A:sympy.categories.diagram_drawing.skeleton->DiagramGrid._build_skeleton(merged_morphisms)
A:sympy.categories.diagram_drawing.triangle_sizes->DiagramGrid._compute_triangle_min_sizes(triangles, skeleton)
A:sympy.categories.diagram_drawing.root_edge->DiagramGrid._pick_root_edge(triangles[0], skeleton)
A:sympy.categories.diagram_drawing.placed_objects->set(root_edge)
A:sympy.categories.diagram_drawing.welding->DiagramGrid._find_triangle_to_weld(triangles, fringe, grid)
A:sympy.categories.diagram_drawing.restart_required->DiagramGrid._weld_triangle(triangle, welding_edge, fringe, grid, skeleton)
A:sympy.categories.diagram_drawing.new_obj->DiagramGrid._grow_pseudopod(triangles, fringe, grid, skeleton, placed_objects)
A:sympy.categories.diagram_drawing.remaining_diagram->diagram.subdiagram_from_objects(FiniteSet(*remaining_objects))
A:sympy.categories.diagram_drawing.remaining_grid->DiagramGrid(remaining_diagram)
A:sympy.categories.diagram_drawing.final_height->max(grid.height, remaining_grid.height)
A:sympy.categories.diagram_drawing.final_grid->_GrowableGrid(final_width, final_height)
A:sympy.categories.diagram_drawing.sorted_objects->sorted(objects, key=default_sort_key)
A:sympy.categories.diagram_drawing.adjlists->DiagramGrid._get_undirected_graph(objects, merged_morphisms)
A:sympy.categories.diagram_drawing.mindegree->len(adjlists[root])
A:sympy.categories.diagram_drawing.current_degree->len(adjlists[obj])
A:sympy.categories.diagram_drawing.adjlist->DiagramGrid._get_undirected_graph(objects, merged_morphisms)
A:sympy.categories.diagram_drawing.current_morphisms[IdentityMorphism(component[0])]->FiniteSet()
A:sympy.categories.diagram_drawing.premises->DiagramGrid._simplify_morphisms(diagram.premises)
A:sympy.categories.diagram_drawing.conclusions->DiagramGrid._simplify_morphisms(diagram.conclusions)
A:sympy.categories.diagram_drawing.all_merged_morphisms->DiagramGrid._merge_premises_conclusions(premises, conclusions)
A:sympy.categories.diagram_drawing.merged_morphisms->DiagramGrid._drop_inessential_morphisms(all_merged_morphisms)
A:sympy.categories.diagram_drawing.components->sorted(components, key=default_sort_key)
A:sympy.categories.diagram_drawing.self._grid->DiagramGrid._generic_layout(diagram, merged_morphisms)
A:sympy.categories.diagram_drawing.total_width->sum((g.width for g in grids))
A:sympy.categories.diagram_drawing.total_height->max((g.height for g in grids))
A:sympy.categories.diagram_drawing.vertical_direction->repeat_string_cond(delta_i, 'd', 'u')
A:sympy.categories.diagram_drawing.horizontal_direction->repeat_string_cond(delta_j, 'r', 'l')
A:sympy.categories.diagram_drawing.(curving, label_pos, looping_start, looping_end)->XypicDiagramDrawer._process_loop_morphism(i, j, grid, morphisms_str_info, object_coords)
A:sympy.categories.diagram_drawing.(curving, label_pos)->XypicDiagramDrawer._process_vertical_morphism(i, j, target_i, grid, morphisms_str_info, object_coords)
A:sympy.categories.diagram_drawing.count->count_morphisms_undirected(morphism.domain, morphism.codomain)
A:sympy.categories.diagram_drawing.filtered_morphisms->count_morphisms_filtered(morphism.domain, morphism.codomain, curving)
A:sympy.categories.diagram_drawing.morphism_name->latex(Symbol(morphism.name))
A:sympy.categories.diagram_drawing.free_up->all((grid[dom_i - 1, j] for j in range(start, end + 1)))
A:sympy.categories.diagram_drawing.(free_up, free_down, backwards)->XypicDiagramDrawer._check_free_space_diagonal(dom_i, cod_i, dom_j, cod_j, grid)
A:sympy.categories.diagram_drawing.(free_left, free_right, backwards)->XypicDiagramDrawer._check_free_space_vertical(dom_i, cod_i, dom_j, grid)
A:sympy.categories.diagram_drawing.morphisms->sorted(morphisms_props, key=lambda m: XypicDiagramDrawer._morphism_sort_key(m, object_coords))
A:sympy.categories.diagram_drawing.string_description->self._process_morphism(diagram, grid, morphism, object_coords, morphisms, morphisms_str_info)
A:sympy.categories.diagram_drawing.drawer->XypicDiagramDrawer()
A:sympy.categories.diagram_drawing.latex_output->xypic_draw_diagram(diagram, masked, diagram_format, groups, **hints)
sympy.categories.DiagramGrid(self,diagram,groups=None,**hints)
sympy.categories.XypicDiagramDrawer(self)
sympy.categories.diagram_drawing.ArrowStringDescription(self,unit,curving,curving_amount,looping_start,looping_end,horizontal_direction,vertical_direction,label_position,label)
sympy.categories.diagram_drawing.ArrowStringDescription.__str__(self)
sympy.categories.diagram_drawing.DiagramGrid(self,diagram,groups=None,**hints)
sympy.categories.diagram_drawing.DiagramGrid.__getitem__(self,i_j)
sympy.categories.diagram_drawing.DiagramGrid.__str__(self)
sympy.categories.diagram_drawing.DiagramGrid._add_edge_append(dictionary,edge,elem)
sympy.categories.diagram_drawing.DiagramGrid._build_skeleton(morphisms)
sympy.categories.diagram_drawing.DiagramGrid._choose_target_cell(pt1,pt2,edge,obj,skeleton,grid)
sympy.categories.diagram_drawing.DiagramGrid._compute_triangle_min_sizes(triangles,edges)
sympy.categories.diagram_drawing.DiagramGrid._drop_inessential_morphisms(merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._drop_irrelevant_triangles(triangles,placed_objects)
sympy.categories.diagram_drawing.DiagramGrid._drop_redundant_triangles(triangles,skeleton)
sympy.categories.diagram_drawing.DiagramGrid._empty_point(pt,grid)
sympy.categories.diagram_drawing.DiagramGrid._find_triangle_to_weld(triangles,fringe,grid)
sympy.categories.diagram_drawing.DiagramGrid._generic_layout(diagram,merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._get_connected_components(objects,merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._get_undirected_graph(objects,merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._grow_pseudopod(triangles,fringe,grid,skeleton,placed_objects)
sympy.categories.diagram_drawing.DiagramGrid._handle_groups(diagram,groups,merged_morphisms,hints)
sympy.categories.diagram_drawing.DiagramGrid._juxtapose_edges(edge1,edge2)
sympy.categories.diagram_drawing.DiagramGrid._list_triangles(edges)
sympy.categories.diagram_drawing.DiagramGrid._merge_premises_conclusions(premises,conclusions)
sympy.categories.diagram_drawing.DiagramGrid._morphism_length(morphism)
sympy.categories.diagram_drawing.DiagramGrid._other_vertex(triangle,edge)
sympy.categories.diagram_drawing.DiagramGrid._pick_root_edge(tri,skeleton)
sympy.categories.diagram_drawing.DiagramGrid._put_object(coords,obj,grid,fringe)
sympy.categories.diagram_drawing.DiagramGrid._sequential_layout(diagram,merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._simplify_morphisms(morphisms)
sympy.categories.diagram_drawing.DiagramGrid._triangle_key(tri,triangle_sizes)
sympy.categories.diagram_drawing.DiagramGrid._triangle_objects(triangle)
sympy.categories.diagram_drawing.DiagramGrid._weld_triangle(tri,welding_edge,fringe,grid,skeleton)
sympy.categories.diagram_drawing.DiagramGrid.height(self)
sympy.categories.diagram_drawing.DiagramGrid.morphisms(self)
sympy.categories.diagram_drawing.DiagramGrid.width(self)
sympy.categories.diagram_drawing.XypicDiagramDrawer(self)
sympy.categories.diagram_drawing.XypicDiagramDrawer._build_xypic_string(diagram,grid,morphisms,morphisms_str_info,diagram_format)
sympy.categories.diagram_drawing.XypicDiagramDrawer._check_free_space_diagonal(dom_i,cod_i,dom_j,cod_j,grid)
sympy.categories.diagram_drawing.XypicDiagramDrawer._check_free_space_horizontal(dom_i,dom_j,cod_j,grid)
sympy.categories.diagram_drawing.XypicDiagramDrawer._check_free_space_vertical(dom_i,cod_i,dom_j,grid)
sympy.categories.diagram_drawing.XypicDiagramDrawer._morphism_sort_key(morphism,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer._process_horizontal_morphism(i,j,target_j,grid,morphisms_str_info,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer._process_loop_morphism(i,j,grid,morphisms_str_info,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer._process_morphism(self,diagram,grid,morphism,object_coords,morphisms,morphisms_str_info)
sympy.categories.diagram_drawing.XypicDiagramDrawer._process_vertical_morphism(i,j,target_i,grid,morphisms_str_info,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer._push_labels_out(self,morphisms_str_info,grid,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer.draw(self,diagram,grid,masked=None,diagram_format='')
sympy.categories.diagram_drawing._GrowableGrid(self,width,height)
sympy.categories.diagram_drawing._GrowableGrid.__getitem__(self,i_j)
sympy.categories.diagram_drawing._GrowableGrid.__setitem__(self,i_j,newvalue)
sympy.categories.diagram_drawing._GrowableGrid.append_column(self)
sympy.categories.diagram_drawing._GrowableGrid.append_row(self)
sympy.categories.diagram_drawing._GrowableGrid.height(self)
sympy.categories.diagram_drawing._GrowableGrid.prepend_column(self)
sympy.categories.diagram_drawing._GrowableGrid.prepend_row(self)
sympy.categories.diagram_drawing._GrowableGrid.width(self)
sympy.categories.diagram_drawing.preview_diagram(diagram,masked=None,diagram_format='',groups=None,output='png',viewer=None,euler=True,**hints)
sympy.categories.diagram_drawing.xypic_draw_diagram(diagram,masked=None,diagram_format='',groups=None,**hints)
sympy.categories.preview_diagram(diagram,masked=None,diagram_format='',groups=None,output='png',viewer=None,euler=True,**hints)
sympy.categories.xypic_draw_diagram(diagram,masked=None,diagram_format='',groups=None,**hints)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/categories/baseclasses.py----------------------------------------
A:sympy.categories.baseclasses.name->Str(name)
A:sympy.categories.baseclasses.normalised_components->CompositeMorphism._add_morphism(normalised_components, components[-1])
A:sympy.categories.baseclasses.objects->Class(objects)
A:sympy.categories.baseclasses.new_category->sympy.core.Basic.__new__(cls, name, objects, FiniteSet(*commutative_diagrams))
A:sympy.categories.baseclasses.id_dom->IdentityMorphism(morphism.domain)
A:sympy.categories.baseclasses.id_cod->IdentityMorphism(morphism.codomain)
A:sympy.categories.baseclasses.premises->all((m in self.premises and diagram.premises[m] == self.premises[m] for m in diagram.premises))
A:sympy.categories.baseclasses.conclusions->all((m in self.conclusions and diagram.conclusions[m] == self.conclusions[m] for m in diagram.conclusions))
sympy.categories.Category(cls,name,objects=EmptySet,commutative_diagrams=EmptySet)
sympy.categories.CompositeMorphism(cls,*components)
sympy.categories.Diagram(cls,*args)
sympy.categories.IdentityMorphism(cls,domain)
sympy.categories.Morphism(cls,domain,codomain)
sympy.categories.NamedMorphism(cls,domain,codomain,name)
sympy.categories.Object(Symbol)
sympy.categories.baseclasses.Category(cls,name,objects=EmptySet,commutative_diagrams=EmptySet)
sympy.categories.baseclasses.Category.all_morphisms(self)
sympy.categories.baseclasses.Category.commutative_diagrams(self)
sympy.categories.baseclasses.Category.hom(self,A,B)
sympy.categories.baseclasses.Category.name(self)
sympy.categories.baseclasses.Category.objects(self)
sympy.categories.baseclasses.Class(Set)
sympy.categories.baseclasses.CompositeMorphism(cls,*components)
sympy.categories.baseclasses.CompositeMorphism._add_morphism(t,morphism)
sympy.categories.baseclasses.CompositeMorphism.codomain(self)
sympy.categories.baseclasses.CompositeMorphism.components(self)
sympy.categories.baseclasses.CompositeMorphism.domain(self)
sympy.categories.baseclasses.CompositeMorphism.flatten(self,new_name)
sympy.categories.baseclasses.Diagram(cls,*args)
sympy.categories.baseclasses.Diagram._add_morphism_closure(morphisms,morphism,props,add_identities=True,recurse_composites=True)
sympy.categories.baseclasses.Diagram._set_dict_union(dictionary,key,value)
sympy.categories.baseclasses.Diagram.conclusions(self)
sympy.categories.baseclasses.Diagram.hom(self,A,B)
sympy.categories.baseclasses.Diagram.is_subdiagram(self,diagram)
sympy.categories.baseclasses.Diagram.objects(self)
sympy.categories.baseclasses.Diagram.premises(self)
sympy.categories.baseclasses.Diagram.subdiagram_from_objects(self,objects)
sympy.categories.baseclasses.IdentityMorphism(cls,domain)
sympy.categories.baseclasses.IdentityMorphism.codomain(self)
sympy.categories.baseclasses.Morphism(cls,domain,codomain)
sympy.categories.baseclasses.Morphism.__mul__(self,other)
sympy.categories.baseclasses.Morphism.codomain(self)
sympy.categories.baseclasses.Morphism.compose(self,other)
sympy.categories.baseclasses.Morphism.domain(self)
sympy.categories.baseclasses.NamedMorphism(cls,domain,codomain,name)
sympy.categories.baseclasses.NamedMorphism.name(self)
sympy.categories.baseclasses.Object(Symbol)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/categories/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/categories/tests/test_baseclasses.py----------------------------------------
A:sympy.categories.tests.test_baseclasses.A->Object('A')
A:sympy.categories.tests.test_baseclasses.B->Object('B')
A:sympy.categories.tests.test_baseclasses.C->Object('C')
A:sympy.categories.tests.test_baseclasses.D->Object('D')
A:sympy.categories.tests.test_baseclasses.f->NamedMorphism(A, B, 'f')
A:sympy.categories.tests.test_baseclasses.id_A->IdentityMorphism(A)
A:sympy.categories.tests.test_baseclasses.id_B->IdentityMorphism(B)
A:sympy.categories.tests.test_baseclasses.g->NamedMorphism(B, C, 'g')
A:sympy.categories.tests.test_baseclasses.k->NamedMorphism(B, C, 'g').compose(f)
A:sympy.categories.tests.test_baseclasses.h->NamedMorphism(C, D, 'h')
A:sympy.categories.tests.test_baseclasses.u2->u.flatten('u')
A:sympy.categories.tests.test_baseclasses.d1->Diagram([f, g])
A:sympy.categories.tests.test_baseclasses.d2->Diagram([f])
A:sympy.categories.tests.test_baseclasses.d11->Diagram({f: 'unique'})
A:sympy.categories.tests.test_baseclasses.d->Diagram([f, g], {f: 'unique', g * f: 'veryunique'})
A:sympy.categories.tests.test_baseclasses.K->Category('K', objects, commutative_diagrams=[d1, d2])
sympy.categories.tests.test_baseclasses.test_category()
sympy.categories.tests.test_baseclasses.test_diagram()
sympy.categories.tests.test_baseclasses.test_morphisms()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/categories/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/categories/tests/test_drawing.py----------------------------------------
A:sympy.categories.tests.test_drawing.grid->DiagramGrid(d, layout='sequential')
A:sympy.categories.tests.test_drawing.A->Object('A')
A:sympy.categories.tests.test_drawing.B->Object('B')
A:sympy.categories.tests.test_drawing.C->Object('C')
A:sympy.categories.tests.test_drawing.D->Object('D')
A:sympy.categories.tests.test_drawing.E->Object('E')
A:sympy.categories.tests.test_drawing.f->NamedMorphism(A, B, 'f')
A:sympy.categories.tests.test_drawing.g->NamedMorphism(B, C, 'g')
A:sympy.categories.tests.test_drawing.h->NamedMorphism(C, D, 'h')
A:sympy.categories.tests.test_drawing.k->NamedMorphism(D, B, 'k')
A:sympy.categories.tests.test_drawing.d->Diagram([f, g, h, i])
A:sympy.categories.tests.test_drawing.l_A->NamedMorphism(A, A, 'l_A')
A:sympy.categories.tests.test_drawing.A_->Object("A'")
A:sympy.categories.tests.test_drawing.B_->Object("B'")
A:sympy.categories.tests.test_drawing.C_->Object("C'")
A:sympy.categories.tests.test_drawing.D_->Object("D'")
A:sympy.categories.tests.test_drawing.E_->Object("E'")
A:sympy.categories.tests.test_drawing.i->NamedMorphism(D, E, 'i')
A:sympy.categories.tests.test_drawing.j->NamedMorphism(A_, B_, 'j')
A:sympy.categories.tests.test_drawing.l->NamedMorphism(C_, D_, 'l')
A:sympy.categories.tests.test_drawing.m->NamedMorphism(D_, E_, 'm')
A:sympy.categories.tests.test_drawing.o->NamedMorphism(A, A_, 'o')
A:sympy.categories.tests.test_drawing.p->NamedMorphism(B, B_, 'p')
A:sympy.categories.tests.test_drawing.q->NamedMorphism(C, C_, 'q')
A:sympy.categories.tests.test_drawing.r->NamedMorphism(D, D_, 'r')
A:sympy.categories.tests.test_drawing.s->NamedMorphism(E, E_, 's')
A:sympy.categories.tests.test_drawing.morphisms[m]->FiniteSet()
A:sympy.categories.tests.test_drawing.A1->Object('A1')
A:sympy.categories.tests.test_drawing.A2->Object('A2')
A:sympy.categories.tests.test_drawing.A3->Object('A3')
A:sympy.categories.tests.test_drawing.A4->Object('A4')
A:sympy.categories.tests.test_drawing.A5->Object('A5')
A:sympy.categories.tests.test_drawing.A6->Object('A6')
A:sympy.categories.tests.test_drawing.A7->Object('A7')
A:sympy.categories.tests.test_drawing.A8->Object('A8')
A:sympy.categories.tests.test_drawing.f1->NamedMorphism(A1, A2, 'f1')
A:sympy.categories.tests.test_drawing.f2->NamedMorphism(A1, A3, 'f2')
A:sympy.categories.tests.test_drawing.f3->NamedMorphism(A2, A4, 'f3')
A:sympy.categories.tests.test_drawing.f4->NamedMorphism(A3, A4, 'f3')
A:sympy.categories.tests.test_drawing.f5->NamedMorphism(A5, A6, 'f5')
A:sympy.categories.tests.test_drawing.f6->NamedMorphism(A5, A7, 'f6')
A:sympy.categories.tests.test_drawing.f7->NamedMorphism(A6, A8, 'f7')
A:sympy.categories.tests.test_drawing.f8->NamedMorphism(A7, A8, 'f8')
A:sympy.categories.tests.test_drawing.f9->NamedMorphism(A1, A5, 'f9')
A:sympy.categories.tests.test_drawing.f10->NamedMorphism(A2, A6, 'f10')
A:sympy.categories.tests.test_drawing.f11->NamedMorphism(A3, A7, 'f11')
A:sympy.categories.tests.test_drawing.f12->NamedMorphism(A4, A8, 'f11')
A:sympy.categories.tests.test_drawing.m1->NamedMorphism(A, B, 'm1')
A:sympy.categories.tests.test_drawing.m2->NamedMorphism(A, C, 'm2')
A:sympy.categories.tests.test_drawing.s1->NamedMorphism(B, D, 's1')
A:sympy.categories.tests.test_drawing.s2->NamedMorphism(C, D, 's2')
A:sympy.categories.tests.test_drawing.f_->NamedMorphism(A_, B_, 'f')
A:sympy.categories.tests.test_drawing.g_->NamedMorphism(B_, C_, 'g')
A:sympy.categories.tests.test_drawing.F->Object('F')
A:sympy.categories.tests.test_drawing.morphisms[f]->FiniteSet()
A:sympy.categories.tests.test_drawing.astr->ArrowStringDescription('cm', '_', 12, '', '', 'd', 'r', '_', 'f')
A:sympy.categories.tests.test_drawing.drawer->XypicDiagramDrawer()
A:sympy.categories.tests.test_drawing.g1->NamedMorphism(C, B, 'g1')
A:sympy.categories.tests.test_drawing.g2->NamedMorphism(B, C, 'g2')
A:sympy.categories.tests.test_drawing.h1->NamedMorphism(D, A, 'h1')
A:sympy.categories.tests.test_drawing.h2->NamedMorphism(A, D, 'h2')
A:sympy.categories.tests.test_drawing.l_D->NamedMorphism(D, D, 'l_D')
A:sympy.categories.tests.test_drawing.l_C->NamedMorphism(C, C, 'l_C')
A:sympy.categories.tests.test_drawing.l_A_->NamedMorphism(A, A, 'n_A')
A:sympy.categories.tests.test_drawing.l_D_->NamedMorphism(D, D, 'n_D')
A:sympy.categories.tests.test_drawing.l_C_->NamedMorphism(C, C, 'n_C')
sympy.categories.tests.test_drawing.test_ArrowStringDescription()
sympy.categories.tests.test_drawing.test_DiagramGrid()
sympy.categories.tests.test_drawing.test_DiagramGrid_pseudopod()
sympy.categories.tests.test_drawing.test_GrowableGrid()
sympy.categories.tests.test_drawing.test_XypicDiagramDrawer_cube()
sympy.categories.tests.test_drawing.test_XypicDiagramDrawer_curved_and_loops()
sympy.categories.tests.test_drawing.test_XypicDiagramDrawer_line()
sympy.categories.tests.test_drawing.test_XypicDiagramDrawer_triangle()
sympy.categories.tests.test_drawing.test_xypic_draw_diagram()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/error_prop.py----------------------------------------
A:sympy.stats.error_prop.nargs->len(args)
A:sympy.stats.error_prop.var_args->list(map(variance_prop, args, repeat(consts, nargs), repeat(include_covar, nargs)))
A:sympy.stats.error_prop.var_expr->Variance(expr)
sympy.stats.error_prop.variance_prop(expr,consts=(),include_covar=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/joint_rv.py----------------------------------------
A:sympy.stats.joint_rv.sym->tuple((Symbol(str(Indexed(self.symbol, i))) for i in indices))
A:sympy.stats.joint_rv.rvs->sympy.core.containers.Tuple.fromiter((rv for rv in rvs))
A:sympy.stats.joint_rv.replace_dict->dict(zip(all_syms, orig))
A:sympy.stats.joint_rv.limits[index]->tuple(limits[index])
A:sympy.stats.joint_rv.f->Lambda(sym, summation(self.distribution(*all_syms), *limits))
A:sympy.stats.joint_rv.syms->tuple((rv.pspace.symbol if isinstance(rv, RandomSymbol) else rv.args[0] for rv in rvs))
A:sympy.stats.joint_rv.expr->Sum(expr, (rv.pspace.symbol, dom))
A:sympy.stats.joint_rv.limits->tuple(((Indexed(str(rv.base), rv.args[1]), self.distribution.set.args[rv.args[1]]) for rv in syms))
A:sympy.stats.joint_rv.rand_state->numpy.random.default_rng(seed=seed)
A:sympy.stats.joint_rv.dist_list->pymc_rv_map.keys()
A:sympy.stats.joint_rv.samples->numpy_rv_map[dist.__class__.__name__](dist, prod(size))
A:sympy.stats.joint_rv.args->list(map(sympify, args))
A:sympy.stats.joint_rv.args[i]->ImmutableMatrix(args[i])
A:sympy.stats.joint_rv.density->Sum(expr, (rvs[i], _set[i].inf, other[rvs[i]]))
A:sympy.stats.joint_rv.samps->_get_sample_class_jrv[library](self, size, seed=seed)
A:sympy.stats.joint_rv.count->len(expr.domain.args)
A:sympy.stats.joint_rv.x->Dummy('x', real=True)
A:sympy.stats.joint_rv.dom->rv.base.component_domain(rv.pspace.component_domain(rv.args[1]))
sympy.stats.joint_rv.JointDistribution(cls,*args)
sympy.stats.joint_rv.JointDistribution.cdf(self,other)
sympy.stats.joint_rv.JointDistribution.domain(self)
sympy.stats.joint_rv.JointDistribution.pdf(self)
sympy.stats.joint_rv.JointDistribution.sample(self,size=(),library='scipy',seed=None)
sympy.stats.joint_rv.JointPSpace(cls,sym,dist)
sympy.stats.joint_rv.JointPSpace.component_count(self)
sympy.stats.joint_rv.JointPSpace.component_domain(self,index)
sympy.stats.joint_rv.JointPSpace.compute_density(self,expr)
sympy.stats.joint_rv.JointPSpace.compute_expectation(self,expr,rvs=None,evaluate=False,**kwargs)
sympy.stats.joint_rv.JointPSpace.distribution(self)
sympy.stats.joint_rv.JointPSpace.domain(self)
sympy.stats.joint_rv.JointPSpace.marginal_distribution(self,*indices)
sympy.stats.joint_rv.JointPSpace.pdf(self)
sympy.stats.joint_rv.JointPSpace.probability(self,condition)
sympy.stats.joint_rv.JointPSpace.sample(self,size=(),library='scipy',seed=None)
sympy.stats.joint_rv.JointPSpace.set(self)
sympy.stats.joint_rv.JointPSpace.symbol(self)
sympy.stats.joint_rv.JointPSpace.value(self)
sympy.stats.joint_rv.JointPSpace.where(self,condition)
sympy.stats.joint_rv.JointRandomSymbol(RandomSymbol)
sympy.stats.joint_rv.JointRandomSymbol.__getitem__(self,key)
sympy.stats.joint_rv.MarginalDistribution(cls,dist,*rvs)
sympy.stats.joint_rv.MarginalDistribution.check(self)
sympy.stats.joint_rv.MarginalDistribution.compute_pdf(self,expr,rvs)
sympy.stats.joint_rv.MarginalDistribution.marginalise_out(self,expr,rv)
sympy.stats.joint_rv.MarginalDistribution.pdf(self,*x)
sympy.stats.joint_rv.MarginalDistribution.set(self)
sympy.stats.joint_rv.MarginalDistribution.symbols(self)
sympy.stats.joint_rv.SampleJointNumpy(cls,dist,size,seed=None)
sympy.stats.joint_rv.SampleJointNumpy._sample_numpy(cls,dist,size,seed)
sympy.stats.joint_rv.SampleJointPymc(cls,dist,size,seed=None)
sympy.stats.joint_rv.SampleJointPymc._sample_pymc(cls,dist,size,seed)
sympy.stats.joint_rv.SampleJointScipy(cls,dist,size,seed=None)
sympy.stats.joint_rv.SampleJointScipy._sample_scipy(cls,dist,size,seed)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/compound_rv.py----------------------------------------
A:sympy.stats.compound_rv.s->_symbol_converter(s)
A:sympy.stats.compound_rv.x->Dummy('x')
A:sympy.stats.compound_rv.func->Lambda(x, self.distribution.pdf(x, evaluate))
A:sympy.stats.compound_rv.new_pspace->self._get_newpspace(compound_evaluate)
A:sympy.stats.compound_rv.pdf->Lambda(sym, pdf(sym))
A:sympy.stats.compound_rv.expr->Integral(expr * rv_dens, (rv, rv_dom._inf, rv_dom._sup))
A:sympy.stats.compound_rv.rvs->rvs.subs({self.value: new_pspace.value}).subs({self.value: new_pspace.value})
A:sympy.stats.compound_rv.condition->condition.subs({self.value: new_pspace.value}).subs({self.value: new_pspace.value})
A:sympy.stats.compound_rv.y->Dummy('y')
A:sympy.stats.compound_rv.rv_dens->rv.pspace.distribution.pdf(rv)
sympy.stats.compound_rv.CompoundDistribution(cls,dist)
sympy.stats.compound_rv.CompoundDistribution._compound_check(self,dist)
sympy.stats.compound_rv.CompoundDistribution._marginalise(self,expr,rv,evaluate)
sympy.stats.compound_rv.CompoundDistribution.is_Continuous(self)
sympy.stats.compound_rv.CompoundDistribution.is_Discrete(self)
sympy.stats.compound_rv.CompoundDistribution.is_Finite(self)
sympy.stats.compound_rv.CompoundDistribution.pdf(self,x,evaluate=False)
sympy.stats.compound_rv.CompoundDistribution.set(self)
sympy.stats.compound_rv.CompoundPSpace(cls,s,distribution)
sympy.stats.compound_rv.CompoundPSpace._get_newpspace(self,evaluate=False)
sympy.stats.compound_rv.CompoundPSpace._transform_pspace(self,sym,dist,pdf)
sympy.stats.compound_rv.CompoundPSpace.compute_cdf(self,expr,*,compound_evaluate=True,**kwargs)
sympy.stats.compound_rv.CompoundPSpace.compute_density(self,expr,*,compound_evaluate=True,**kwargs)
sympy.stats.compound_rv.CompoundPSpace.compute_expectation(self,expr,rvs=None,evaluate=False,**kwargs)
sympy.stats.compound_rv.CompoundPSpace.conditional_space(self,condition,*,compound_evaluate=True,**kwargs)
sympy.stats.compound_rv.CompoundPSpace.distribution(self)
sympy.stats.compound_rv.CompoundPSpace.domain(self)
sympy.stats.compound_rv.CompoundPSpace.is_Continuous(self)
sympy.stats.compound_rv.CompoundPSpace.is_Discrete(self)
sympy.stats.compound_rv.CompoundPSpace.is_Finite(self)
sympy.stats.compound_rv.CompoundPSpace.pdf(self)
sympy.stats.compound_rv.CompoundPSpace.probability(self,condition,*,compound_evaluate=True,**kwargs)
sympy.stats.compound_rv.CompoundPSpace.set(self)
sympy.stats.compound_rv.CompoundPSpace.symbol(self)
sympy.stats.compound_rv.CompoundPSpace.value(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/symbolic_multivariate_probability.py----------------------------------------
A:sympy.stats.symbolic_multivariate_probability.expr->_sympify(expr)
A:sympy.stats.symbolic_multivariate_probability.obj->sympy.core.expr.Expr.__new__(cls, arg1, arg2)
A:sympy.stats.symbolic_multivariate_probability.condition->_sympify(condition)
A:sympy.stats.symbolic_multivariate_probability.expand_expr->_expand(expr)
A:sympy.stats.symbolic_multivariate_probability.arg->_sympify(arg)
A:sympy.stats.symbolic_multivariate_probability.variances->Add(*(Variance(xv, condition).expand() for xv in rv))
A:sympy.stats.symbolic_multivariate_probability.covariances->Add(*map(map_to_covar, itertools.combinations(rv, 2)))
A:sympy.stats.symbolic_multivariate_probability.arg1->_sympify(arg1)
A:sympy.stats.symbolic_multivariate_probability.arg2->_sympify(arg2)
A:sympy.stats.symbolic_multivariate_probability.coeff_rv_list1->self._expand_single_argument(arg1.expand())
A:sympy.stats.symbolic_multivariate_probability.coeff_rv_list2->self._expand_single_argument(arg2.expand())
sympy.stats.CrossCovarianceMatrix(cls,arg1,arg2,condition=None)
sympy.stats.ExpectationMatrix(cls,expr,condition=None)
sympy.stats.VarianceMatrix(cls,arg,condition=None)
sympy.stats.symbolic_multivariate_probability.CrossCovarianceMatrix(cls,arg1,arg2,condition=None)
sympy.stats.symbolic_multivariate_probability.CrossCovarianceMatrix._expand_single_argument(cls,expr)
sympy.stats.symbolic_multivariate_probability.CrossCovarianceMatrix._get_mul_nonrv_rv_tuple(cls,m)
sympy.stats.symbolic_multivariate_probability.CrossCovarianceMatrix.expand(self,**hints)
sympy.stats.symbolic_multivariate_probability.CrossCovarianceMatrix.shape(self)
sympy.stats.symbolic_multivariate_probability.ExpectationMatrix(cls,expr,condition=None)
sympy.stats.symbolic_multivariate_probability.ExpectationMatrix.expand(self,**hints)
sympy.stats.symbolic_multivariate_probability.ExpectationMatrix.shape(self)
sympy.stats.symbolic_multivariate_probability.VarianceMatrix(cls,arg,condition=None)
sympy.stats.symbolic_multivariate_probability.VarianceMatrix.expand(self,**hints)
sympy.stats.symbolic_multivariate_probability.VarianceMatrix.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/joint_rv_types.py----------------------------------------
A:sympy.stats.joint_rv_types.args->ImmutableMatrix(args)
A:sympy.stats.joint_rv_types.dist->MarginalDistribution(dist, (jrv,))
A:sympy.stats.joint_rv_types.indices->list(indices)
A:sympy.stats.joint_rv_types.symbol->sympify(symbol)
A:sympy.stats.joint_rv_types.syms->tuple(sorted(syms, key=lambda index: index.args[1]))
A:sympy.stats.joint_rv_types.pdf->Lambda(syms, pdf)
A:sympy.stats.joint_rv_types.rvs->random_symbols(pdf)
A:sympy.stats.joint_rv_types.sym->ImmutableMatrix([Indexed(sym, i) for i in indices])
A:sympy.stats.joint_rv_types._mu->_mu.row_del(i).row_del(i)
A:sympy.stats.joint_rv_types._sigma->_sigma.row_del(i).row_del(i)
A:sympy.stats.joint_rv_types.mu_T->mu.transpose()
A:sympy.stats.joint_rv_types.k->len(l)
A:sympy.stats.joint_rv_types.sigma_inv->sigma.inv()
A:sympy.stats.joint_rv_types.args_T->ImmutableMatrix(args).transpose()
A:sympy.stats.joint_rv_types.v->S(self.dof)
A:sympy.stats.joint_rv_types.i->Symbol('i', integer=True, positive=True)
A:sympy.stats.joint_rv_types.prod_set->Range(0, self.n + 1)
A:sympy.stats.joint_rv_types.condi->isinstance(self.n, Integer)
A:sympy.stats.joint_rv_types.term_2->sympy.core.mul.Mul.fromiter((pi ** ki / factorial(ki) for (pi, ki) in zip(p, k)))
A:sympy.stats.joint_rv_types.cond->Eq(Sum((k + 1) * syms[k], (k, 0, n - 1)), n)
A:sympy.stats.joint_rv_types.(j, k)->symbols('j, k', positive=True, integer=True)
A:sympy.stats.joint_rv_types.n->Symbol('n', negative=False, integer=True)
A:sympy.stats.joint_rv_types.sterm2->sympy.core.mul.Mul.fromiter((mui * li ** (-v - n) for (mui, li) in zip(mu, l)))
A:sympy.stats.joint_rv_types.sterm4->sum([exp(mui * yi) / li for (mui, yi, li) in zip(mu, y, l)])
A:sympy.stats.joint_rv_types.term2->exp(sterm3 - sterm4)
A:sympy.stats.joint_rv_types.delta->Pow(Rational(omega.det()), Rational(1, len(lamda) - 1))
sympy.stats.GeneralizedMultivariateLogGamma(syms,delta,v,lamda,mu)
sympy.stats.GeneralizedMultivariateLogGammaOmega(syms,omega,v,lamda,mu)
sympy.stats.JointRV(symbol,pdf,_set=None)
sympy.stats.Multinomial(syms,n,*p)
sympy.stats.MultivariateBeta(syms,*alpha)
sympy.stats.MultivariateEwens(syms,n,theta)
sympy.stats.MultivariateLaplace(name,mu,sigma)
sympy.stats.MultivariateNormal(name,mu,sigma)
sympy.stats.MultivariateT(syms,mu,sigma,v)
sympy.stats.NegativeMultinomial(syms,k0,*p)
sympy.stats.NormalGamma(sym,mu,lamda,alpha,beta)
sympy.stats.joint_rv_types.GeneralizedMultivariateLogGamma(syms,delta,v,lamda,mu)
sympy.stats.joint_rv_types.GeneralizedMultivariateLogGammaDistribution(JointDistribution)
sympy.stats.joint_rv_types.GeneralizedMultivariateLogGammaDistribution.check(self,delta,v,l,mu)
sympy.stats.joint_rv_types.GeneralizedMultivariateLogGammaDistribution.pdf(self,*y)
sympy.stats.joint_rv_types.GeneralizedMultivariateLogGammaDistribution.set(self)
sympy.stats.joint_rv_types.GeneralizedMultivariateLogGammaOmega(syms,omega,v,lamda,mu)
sympy.stats.joint_rv_types.JointDistributionHandmade(JointDistribution)
sympy.stats.joint_rv_types.JointDistributionHandmade.set(self)
sympy.stats.joint_rv_types.JointRV(symbol,pdf,_set=None)
sympy.stats.joint_rv_types.Multinomial(syms,n,*p)
sympy.stats.joint_rv_types.MultinomialDistribution(JointDistribution)
sympy.stats.joint_rv_types.MultinomialDistribution.check(n,p)
sympy.stats.joint_rv_types.MultinomialDistribution.pdf(self,*x)
sympy.stats.joint_rv_types.MultinomialDistribution.set(self)
sympy.stats.joint_rv_types.MultivariateBeta(syms,*alpha)
sympy.stats.joint_rv_types.MultivariateBetaDistribution(JointDistribution)
sympy.stats.joint_rv_types.MultivariateBetaDistribution.check(alpha)
sympy.stats.joint_rv_types.MultivariateBetaDistribution.pdf(self,*syms)
sympy.stats.joint_rv_types.MultivariateBetaDistribution.set(self)
sympy.stats.joint_rv_types.MultivariateEwens(syms,n,theta)
sympy.stats.joint_rv_types.MultivariateEwensDistribution(JointDistribution)
sympy.stats.joint_rv_types.MultivariateEwensDistribution.check(n,theta)
sympy.stats.joint_rv_types.MultivariateEwensDistribution.pdf(self,*syms)
sympy.stats.joint_rv_types.MultivariateEwensDistribution.set(self)
sympy.stats.joint_rv_types.MultivariateLaplace(name,mu,sigma)
sympy.stats.joint_rv_types.MultivariateLaplaceDistribution(JointDistribution)
sympy.stats.joint_rv_types.MultivariateLaplaceDistribution.check(mu,sigma)
sympy.stats.joint_rv_types.MultivariateLaplaceDistribution.pdf(self,*args)
sympy.stats.joint_rv_types.MultivariateLaplaceDistribution.set(self)
sympy.stats.joint_rv_types.MultivariateNormal(name,mu,sigma)
sympy.stats.joint_rv_types.MultivariateNormalDistribution(JointDistribution)
sympy.stats.joint_rv_types.MultivariateNormalDistribution._marginal_distribution(self,indices,sym)
sympy.stats.joint_rv_types.MultivariateNormalDistribution.check(mu,sigma)
sympy.stats.joint_rv_types.MultivariateNormalDistribution.pdf(self,*args)
sympy.stats.joint_rv_types.MultivariateNormalDistribution.set(self)
sympy.stats.joint_rv_types.MultivariateT(syms,mu,sigma,v)
sympy.stats.joint_rv_types.MultivariateTDistribution(JointDistribution)
sympy.stats.joint_rv_types.MultivariateTDistribution.check(mu,sigma,v)
sympy.stats.joint_rv_types.MultivariateTDistribution.pdf(self,*args)
sympy.stats.joint_rv_types.MultivariateTDistribution.set(self)
sympy.stats.joint_rv_types.NegativeMultinomial(syms,k0,*p)
sympy.stats.joint_rv_types.NegativeMultinomialDistribution(JointDistribution)
sympy.stats.joint_rv_types.NegativeMultinomialDistribution.check(k0,p)
sympy.stats.joint_rv_types.NegativeMultinomialDistribution.pdf(self,*k)
sympy.stats.joint_rv_types.NegativeMultinomialDistribution.set(self)
sympy.stats.joint_rv_types.NormalGamma(sym,mu,lamda,alpha,beta)
sympy.stats.joint_rv_types.NormalGammaDistribution(JointDistribution)
sympy.stats.joint_rv_types.NormalGammaDistribution._marginal_distribution(self,indices,*sym)
sympy.stats.joint_rv_types.NormalGammaDistribution.check(mu,lamda,alpha,beta)
sympy.stats.joint_rv_types.NormalGammaDistribution.pdf(self,x,tau)
sympy.stats.joint_rv_types.NormalGammaDistribution.set(self)
sympy.stats.joint_rv_types.marginal_distribution(rv,*indices)
sympy.stats.joint_rv_types.multivariate_rv(cls,sym,*args)
sympy.stats.marginal_distribution(rv,*indices)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/random_matrix.py----------------------------------------
A:sympy.stats.random_matrix.sym->_symbol_converter(sym)
A:sympy.stats.random_matrix.rms->expr.atoms(RandomMatrixSymbol)
sympy.stats.random_matrix.RandomMatrixPSpace(cls,sym,model=None)
sympy.stats.random_matrix.RandomMatrixPSpace.compute_density(self,expr,*args)
sympy.stats.random_matrix.RandomMatrixPSpace.model(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/stochastic_process_types.py----------------------------------------
A:sympy.stats.stochastic_process_types.itr->FiniteSet(*itr)
A:sympy.stats.stochastic_process_types.itr_ret->Tuple(*(sympify(i) if isinstance(i, str) else i for i in itr))
A:sympy.stats.stochastic_process_types.matrix->_matrix_checks(matrix)
A:sympy.stats.stochastic_process_types.sym->_symbol_converter(sym)
A:sympy.stats.stochastic_process_types.state_space->_state_converter(state_space)
A:sympy.stats.stochastic_process_types.args->list(args)
A:sympy.stats.stochastic_process_types.args[i]->self.__call__(arg)
A:sympy.stats.stochastic_process_types.density->Lambda(tuple(args), expr=Mul.fromiter((arg.pspace.process.density(arg) for arg in args)))
A:sympy.stats.stochastic_process_types.time->sympify(time)
A:sympy.stats.stochastic_process_types.idx_obj->Indexed(self.symbol, time)
A:sympy.stats.stochastic_process_types.pspace_obj->StochasticPSpace(self.symbol, self, self.distribution(time))
A:sympy.stats.stochastic_process_types.func_obj->Function(self.symbol)(time)
A:sympy.stats.stochastic_process_types.process->property(lambda self: self.args[0])
A:sympy.stats.stochastic_process_types.ss_size->len(state_space)
A:sympy.stats.stochastic_process_types.state_index->self.replace_with_index(state_index)
A:sympy.stats.stochastic_process_types._n->len(state_space)
A:sympy.stats.stochastic_process_types.trans_probs->self.transition_probabilities(mat)
A:sympy.stats.stochastic_process_types.rows->submatrix.tolist()
A:sympy.stats.stochastic_process_types.rand_var->list(given_condition.atoms(RandomSymbol) - given_condition.atoms(RandomIndexedSymbol))
A:sympy.stats.stochastic_process_types.(trans_probs, state_index, given_condition)->self._extract_information(given_condition)
A:sympy.stats.stochastic_process_types.condition->condition.subs(rv_swap).subs(rv_swap)
A:sympy.stats.stochastic_process_types.(check, mat, state_index, new_given_condition)->self._preprocess(given_condition, evaluate)
A:sympy.stats.stochastic_process_types.rv->Eq(curr.args[0].pspace.process(diff_key), len(working_set))
A:sympy.stats.stochastic_process_types.given_condition->self.replace_with_index(given_condition)
A:sympy.stats.stochastic_process_types.new_given_condition->self.replace_with_index(new_given_condition)
A:sympy.stats.stochastic_process_types.min_key_rv->list(new_given_condition.atoms(RandomIndexedSymbol))
A:sympy.stats.stochastic_process_types.s->Rational(0, 1)
A:sympy.stats.stochastic_process_types.n->len(working_set)
A:sympy.stats.stochastic_process_types.states->list(self.state_space)
A:sympy.stats.stochastic_process_types.gset->Intersection(gr.as_set(), state_index)
A:sympy.stats.stochastic_process_types.gstates->Union(*prob.keys())
A:sympy.stats.stochastic_process_types.cset->Intersection(state2cond[ri].as_set(), state_index)
A:sympy.stats.stochastic_process_types.state2cond[ri]->Intersection(state2cond[ri].as_set(), state_index).as_relational(ri)
A:sympy.stats.stochastic_process_types.sorted_ris->sorted(ris, key=lambda ri: ri.key)
A:sympy.stats.stochastic_process_types.prod->self.probability(state2cond[sorted_ris[0]], given_condition, evaluate, **kwargs)
A:sympy.stats.stochastic_process_types.P->exp(self.generator_matrix * (rv[0].key - min_key_rv.key))
A:sympy.stats.stochastic_process_types.k->Dummy('k')
A:sympy.stats.stochastic_process_types.total->Sum(self.probability(condition, new_given_condition), (k, next_state + upper, self.state_space._sup))
A:sympy.stats.stochastic_process_types.(check, mat, state_index, condition)->self._preprocess(condition, evaluate)
A:sympy.stats.stochastic_process_types.rvs->random_symbols(expr)
A:sympy.stats.stochastic_process_types.(state_space, trans_probs)->MarkovProcess._sanity_checks(state_space, trans_probs)
A:sympy.stats.stochastic_process_types.obj->sympy.core.basic.Basic.__new__(cls, sym, state_space, gen_mat)
A:sympy.stats.stochastic_process_types.V->Range(n)
A:sympy.stats.stochastic_process_types.classes->self.communication_classes()
A:sympy.stats.stochastic_process_types.new_tree_edges->newly_visited.difference(visited)
A:sympy.stats.stochastic_process_types.new_non_tree_edges->newly_visited.intersection(visited)
A:sympy.stats.stochastic_process_types.non_tree_edge_values->non_tree_edge_values.union(new_non_tree_edge_values).union(new_non_tree_edge_values)
A:sympy.stats.stochastic_process_types.visited->visited.union(new_tree_edges).union(new_tree_edges)
A:sympy.stats.stochastic_process_types.(_, _, _, Q)->self.decompose()
A:sympy.stats.stochastic_process_types.I->eye(P.shape[0])
A:sympy.stats.stochastic_process_types.w->IndexedBase('w')
A:sympy.stats.stochastic_process_types.W->Matrix([list(w) for i in range(0, P.shape[0])])
A:sympy.stats.stochastic_process_types.(_, _, R, _)->self.decompose()
A:sympy.stats.stochastic_process_types.N->self.fundamental_matrix()
A:sympy.stats.stochastic_process_types.tuples->self.communication_classes()
A:sympy.stats.stochastic_process_types.(classes, _, periods)->list(zip(*tuples))
A:sympy.stats.stochastic_process_types.(classes, _, _)->list(zip(*tuples))
A:sympy.stats.stochastic_process_types.(states, A, B, C)->self.decompose()
A:sympy.stats.stochastic_process_types.wm->Matrix([wi])
A:sympy.stats.stochastic_process_types.a[0, 0:n]->ones(1, n)
A:sympy.stats.stochastic_process_types.b->zeros(n, 1)
A:sympy.stats.stochastic_process_types.A->Matrix(len(r_states), len(r_states), lambda i, j: trans_probs[indexes[i], indexes[j]])
A:sympy.stats.stochastic_process_types.B->Matrix(len(t_states), len(r_states), lambda i, j: trans_probs[indexes[len(r_states) + i], indexes[j]])
A:sympy.stats.stochastic_process_types.C->Matrix(len(t_states), len(t_states), lambda i, j: trans_probs[indexes[len(r_states) + i], indexes[len(r_states) + j]])
A:sympy.stats.stochastic_process_types.O->zeros(A.shape[0], C.shape[1])
A:sympy.stats.stochastic_process_types.Tlist->self.transition_probabilities.tolist()
A:sympy.stats.stochastic_process_types.(state_space, gen_mat)->MarkovProcess._sanity_checks(state_space, gen_mat)
A:sympy.stats.stochastic_process_types.t->Dummy('t')
A:sympy.stats.stochastic_process_types.(Q, D)->gen_mat.diagonalize()
A:sympy.stats.stochastic_process_types.p->_sympify(p)
A:sympy.stats.stochastic_process_types.success->_sym_sympify(success)
A:sympy.stats.stochastic_process_types.failure->_sym_sympify(failure)
A:sympy.stats.stochastic_process_types.rvs_expr->random_symbols(expr)
A:sympy.stats.stochastic_process_types.newrv->Eq(curr.args[0].pspace.process(diff_key), len(working_set)).pspace.process.simple_rv(rv)
A:sympy.stats.stochastic_process_types.expr->expr.subs(rv_swap).subs(rv_swap)
A:sympy.stats.stochastic_process_types.rvs_cond->random_symbols(condition)
A:sympy.stats.stochastic_process_types.(new_expr, new_condition)->self._rvindexed_subs(expr, condition)
A:sympy.stats.stochastic_process_types.new_pspace->pspace(new_expr)
A:sympy.stats.stochastic_process_types.new_expr->given(new_expr, new_condition)
A:sympy.stats.stochastic_process_types.(new_condition, new_givencondition)->self._rvindexed_subs(condition, given_condition)
A:sympy.stats.stochastic_process_types.condrv->random_symbols(new_condition)
A:sympy.stats.stochastic_process_types.result->pspace(new_condition).probability(new_condition, **kwargs)
A:sympy.stats.stochastic_process_types.expr_syms->list(expr.atoms(RandomIndexedSymbol))
A:sympy.stats.stochastic_process_types.intv->_set_converter(arg.args[1])
A:sympy.stats.stochastic_process_types.rv_swap[expr_sym]->expr_sym.subs({expr_sym.key: diff_key})
A:sympy.stats.stochastic_process_types.index_set->_set_converter(Interval(0, oo))
A:sympy.stats.stochastic_process_types.(intervals, rv_swap)->get_timerv_swaps(condition, given_condition)
A:sympy.stats.stochastic_process_types.diff_key->abs(arg.args[0].key - arg.args[1].key)
A:sympy.stats.stochastic_process_types.arg->self._solve_argwith_tworvs(args_list[0])
A:sympy.stats.stochastic_process_types.args_list->sorted(args_list, key=lambda x: x.args[0].key)
A:sympy.stats.stochastic_process_types.working_set->Intersection(working_set, nex.as_set())
A:sympy.stats.stochastic_process_types.lamda->_sympify(lamda)
A:sympy.stats.stochastic_process_types.gamma->_sympify(gamma)
sympy.stats.BernoulliProcess(cls,sym,p,success=1,failure=0)
sympy.stats.ContinuousMarkovChain(cls,sym,state_space=None,gen_mat=None)
sympy.stats.DiscreteMarkovChain(cls,sym,state_space=None,trans_probs=None)
sympy.stats.DiscreteTimeStochasticProcess(StochasticProcess)
sympy.stats.GammaProcess(cls,sym,lamda,gamma)
sympy.stats.GeneratorMatrixOf(cls,process,matrix)
sympy.stats.PoissonProcess(cls,sym,lamda)
sympy.stats.StochasticProcess(cls,sym,state_space=S.Reals,**kwargs)
sympy.stats.StochasticStateSpaceOf(cls,process,state_space)
sympy.stats.TransitionMatrixOf(cls,process,matrix)
sympy.stats.WienerProcess(cls,sym)
sympy.stats.stochastic_process_types.BernoulliProcess(cls,sym,p,success=1,failure=0)
sympy.stats.stochastic_process_types.BernoulliProcess.density(self,x)
sympy.stats.stochastic_process_types.BernoulliProcess.distribution(self,key=None)
sympy.stats.stochastic_process_types.BernoulliProcess.expectation(self,expr,condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process_types.BernoulliProcess.failure(self)
sympy.stats.stochastic_process_types.BernoulliProcess.p(self)
sympy.stats.stochastic_process_types.BernoulliProcess.probability(self,condition,given_condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process_types.BernoulliProcess.simple_rv(self,rv)
sympy.stats.stochastic_process_types.BernoulliProcess.state_space(self)
sympy.stats.stochastic_process_types.BernoulliProcess.success(self)
sympy.stats.stochastic_process_types.BernoulliProcess.symbol(self)
sympy.stats.stochastic_process_types.ContinuousMarkovChain(cls,sym,state_space=None,gen_mat=None)
sympy.stats.stochastic_process_types.ContinuousMarkovChain.generator_matrix(self)
sympy.stats.stochastic_process_types.ContinuousMarkovChain.limiting_distribution(self)
sympy.stats.stochastic_process_types.ContinuousMarkovChain.transition_probabilities(self,gen_mat=None)
sympy.stats.stochastic_process_types.ContinuousTimeStochasticProcess(self,time)
sympy.stats.stochastic_process_types.CountingProcess(ContinuousTimeStochasticProcess)
sympy.stats.stochastic_process_types.CountingProcess._solve_argwith_tworvs(self,arg)
sympy.stats.stochastic_process_types.CountingProcess._solve_numerical(self,condition,given_condition=None)
sympy.stats.stochastic_process_types.CountingProcess.expectation(self,expr,condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process_types.CountingProcess.probability(self,condition,given_condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process_types.CountingProcess.symbol(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain(cls,sym,state_space=None,trans_probs=None)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.absorbing_probabilites(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.absorbing_probabilities(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.canonical_form(self)->tTuple[tList[Basic], ImmutableMatrix]
sympy.stats.stochastic_process_types.DiscreteMarkovChain.communication_classes(self)->tList[tTuple[tList[Basic], Boolean, Integer]]
sympy.stats.stochastic_process_types.DiscreteMarkovChain.decompose(self)->tTuple[tList[Basic], ImmutableMatrix, ImmutableMatrix, ImmutableMatrix]
sympy.stats.stochastic_process_types.DiscreteMarkovChain.fixed_row_vector(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.fundamental_matrix(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.is_absorbing_chain(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.is_absorbing_state(self,state)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.is_ergodic(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.is_regular(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.limiting_distribution(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.sample(self)
sympy.stats.stochastic_process_types.DiscreteMarkovChain.stationary_distribution(self,condition_set=False)->tUnion[ImmutableMatrix, ConditionSet, Lambda]
sympy.stats.stochastic_process_types.DiscreteMarkovChain.transition_probabilities(self)
sympy.stats.stochastic_process_types.DiscreteTimeStochasticProcess(StochasticProcess)
sympy.stats.stochastic_process_types.DiscreteTimeStochasticProcess.__getitem__(self,time)
sympy.stats.stochastic_process_types.GammaProcess(cls,sym,lamda,gamma)
sympy.stats.stochastic_process_types.GammaProcess.density(self,x)
sympy.stats.stochastic_process_types.GammaProcess.distribution(self,key)
sympy.stats.stochastic_process_types.GammaProcess.gamma(self)
sympy.stats.stochastic_process_types.GammaProcess.lamda(self)
sympy.stats.stochastic_process_types.GammaProcess.simple_rv(self,rv)
sympy.stats.stochastic_process_types.GammaProcess.state_space(self)
sympy.stats.stochastic_process_types.GeneratorMatrixOf(cls,process,matrix)
sympy.stats.stochastic_process_types.MarkovProcess(StochasticProcess)
sympy.stats.stochastic_process_types.MarkovProcess._check_trans_probs(self,trans_probs,row_sum=1)
sympy.stats.stochastic_process_types.MarkovProcess._extract_information(self,given_condition)
sympy.stats.stochastic_process_types.MarkovProcess._preprocess(self,given_condition,evaluate)
sympy.stats.stochastic_process_types.MarkovProcess._sanity_checks(cls,state_space,trans_probs)
sympy.stats.stochastic_process_types.MarkovProcess._state_index(self)
sympy.stats.stochastic_process_types.MarkovProcess._symbolic_probability(self,condition,new_given_condition,rv,min_key_rv)
sympy.stats.stochastic_process_types.MarkovProcess._work_out_state_index(self,state_index,given_condition,trans_probs)
sympy.stats.stochastic_process_types.MarkovProcess.expectation(self,expr,condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process_types.MarkovProcess.number_of_states(self)->tUnion[Integer, Symbol]
sympy.stats.stochastic_process_types.MarkovProcess.probability(self,condition,given_condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process_types.MarkovProcess.replace_with_index(self,condition)
sympy.stats.stochastic_process_types.PoissonProcess(cls,sym,lamda)
sympy.stats.stochastic_process_types.PoissonProcess.__add__(self,other)
sympy.stats.stochastic_process_types.PoissonProcess.density(self,x)
sympy.stats.stochastic_process_types.PoissonProcess.distribution(self,key)
sympy.stats.stochastic_process_types.PoissonProcess.lamda(self)
sympy.stats.stochastic_process_types.PoissonProcess.simple_rv(self,rv)
sympy.stats.stochastic_process_types.PoissonProcess.split(self,l1,l2)
sympy.stats.stochastic_process_types.PoissonProcess.state_space(self)
sympy.stats.stochastic_process_types.StochasticProcess(cls,sym,state_space=S.Reals,**kwargs)
sympy.stats.stochastic_process_types.StochasticProcess.__getitem__(self,time)
sympy.stats.stochastic_process_types.StochasticProcess._deprecation_warn_distribution(self)
sympy.stats.stochastic_process_types.StochasticProcess.density(self,x)
sympy.stats.stochastic_process_types.StochasticProcess.distribution(self,key=None)
sympy.stats.stochastic_process_types.StochasticProcess.expectation(self,condition,given_condition)
sympy.stats.stochastic_process_types.StochasticProcess.joint_distribution(self,*args)
sympy.stats.stochastic_process_types.StochasticProcess.probability(self,condition)
sympy.stats.stochastic_process_types.StochasticProcess.sample(self)
sympy.stats.stochastic_process_types.StochasticProcess.state_space(self)->tUnion[FiniteSet, Range]
sympy.stats.stochastic_process_types.StochasticProcess.symbol(self)
sympy.stats.stochastic_process_types.StochasticStateSpaceOf(cls,process,state_space)
sympy.stats.stochastic_process_types.TransitionMatrixOf(cls,process,matrix)
sympy.stats.stochastic_process_types.WienerProcess(cls,sym)
sympy.stats.stochastic_process_types.WienerProcess.density(self,x)
sympy.stats.stochastic_process_types.WienerProcess.distribution(self,key)
sympy.stats.stochastic_process_types.WienerProcess.simple_rv(self,rv)
sympy.stats.stochastic_process_types.WienerProcess.state_space(self)
sympy.stats.stochastic_process_types._(x)
sympy.stats.stochastic_process_types._(x)
sympy.stats.stochastic_process_types._SubstituteRV
sympy.stats.stochastic_process_types._SubstituteRV._expectation(self,expr,condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process_types._SubstituteRV._probability(self,condition,given_condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process_types._SubstituteRV._rvindexed_subs(expr,condition=None)
sympy.stats.stochastic_process_types._matrix_checks(matrix)
sympy.stats.stochastic_process_types._set_converter(itr)
sympy.stats.stochastic_process_types._state_converter(itr:tSequence)->tUnion[Tuple, Range]
sympy.stats.stochastic_process_types._sym_sympify(arg)
sympy.stats.stochastic_process_types.get_timerv_swaps(expr,condition)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/frv.py----------------------------------------
A:sympy.stats.frv.item->sympify(item)
A:sympy.stats.frv.set->FiniteSet(*set)
A:sympy.stats.frv.proditer->product(*[iter(space._density.items()) for space in self.spaces])
A:sympy.stats.frv.cond->rv_subs(condition)
A:sympy.stats.frv.val->rv_subs(expr, rvs).xreplace(dict(elem))
A:sympy.stats.frv.args->list(map(sympify, args))
A:sympy.stats.frv.values->property(lambda self: self.dict.values)
A:sympy.stats.frv.items->list(cdf.items())
A:sympy.stats.frv.is_symbolic->property(lambda self: False)
A:sympy.stats.frv.__iter__->property(lambda self: self.dict.__iter__)
A:sympy.stats.frv.__getitem__->property(lambda self: self.dict.__getitem__)
A:sympy.stats.frv.public_density->Dict(density)
A:sympy.stats.frv.obj->sympy.stats.rv.PSpace.__new__(cls, domain, public_density)
A:sympy.stats.frv.elem->sumsets(elems)
A:sympy.stats.frv.expr->rv_subs(expr, rvs)
A:sympy.stats.frv.d->self.compute_density(expr)
A:sympy.stats.frv.prob->Mul(*probs)
A:sympy.stats.frv.cdf->self.compute_cdf(expr)
A:sympy.stats.frv.sorted_items->sorted(items, key=lambda val_cumprob: val_cumprob[1])
A:sympy.stats.frv.t->Dummy('t', real=True)
A:sympy.stats.frv.p->Dummy('p', real=True)
A:sympy.stats.frv.cond_symbols->frozenset((rs.symbol for rs in random_symbols(condition)))
A:sympy.stats.frv.domain->self.where(condition)
A:sympy.stats.frv.ki->Dummy('ki')
A:sympy.stats.frv.k->Dummy('k', integer=True)
A:sympy.stats.frv.condition->rv_subs(condition)
A:sympy.stats.frv.(elems, probs)->list(zip(*items))
sympy.stats.frv.ConditionalFiniteDomain(cls,domain,condition)
sympy.stats.frv.ConditionalFiniteDomain.__contains__(self,other)
sympy.stats.frv.ConditionalFiniteDomain.__iter__(self)
sympy.stats.frv.ConditionalFiniteDomain._test(self,elem)
sympy.stats.frv.ConditionalFiniteDomain.as_boolean(self)
sympy.stats.frv.ConditionalFiniteDomain.set(self)
sympy.stats.frv.FiniteDensity(self,item)
sympy.stats.frv.FiniteDensity.dict(self)
sympy.stats.frv.FiniteDomain(RandomDomain)
sympy.stats.frv.FiniteDomain.__contains__(self,other)
sympy.stats.frv.FiniteDomain.__iter__(self)
sympy.stats.frv.FiniteDomain.as_boolean(self)
sympy.stats.frv.FiniteDomain.dict(self)
sympy.stats.frv.FiniteDomain.elements(self)
sympy.stats.frv.FiniteDomain.symbols(self)
sympy.stats.frv.FinitePSpace(cls,domain,density)
sympy.stats.frv.FinitePSpace.compute_cdf(self,expr)
sympy.stats.frv.FinitePSpace.compute_characteristic_function(self,expr)
sympy.stats.frv.FinitePSpace.compute_density(self,expr)
sympy.stats.frv.FinitePSpace.compute_expectation(self,expr,rvs=None,**kwargs)
sympy.stats.frv.FinitePSpace.compute_moment_generating_function(self,expr)
sympy.stats.frv.FinitePSpace.compute_quantile(self,expr)
sympy.stats.frv.FinitePSpace.conditional_space(self,condition)
sympy.stats.frv.FinitePSpace.prob_of(self,elem)
sympy.stats.frv.FinitePSpace.probability(self,condition)
sympy.stats.frv.FinitePSpace.sample(self,size=(),library='scipy',seed=None)
sympy.stats.frv.FinitePSpace.sorted_cdf(self,expr,python_float=False)
sympy.stats.frv.FinitePSpace.where(self,condition)
sympy.stats.frv.ProductFiniteDomain(ProductDomain,FiniteDomain)
sympy.stats.frv.ProductFiniteDomain.__iter__(self)
sympy.stats.frv.ProductFiniteDomain.elements(self)
sympy.stats.frv.ProductFinitePSpace(IndependentProductPSpace,FinitePSpace)
sympy.stats.frv.ProductFinitePSpace._density(self)
sympy.stats.frv.ProductFinitePSpace.compute_density(self,expr)
sympy.stats.frv.ProductFinitePSpace.density(self)
sympy.stats.frv.ProductFinitePSpace.domain(self)
sympy.stats.frv.ProductFinitePSpace.probability(self,condition)
sympy.stats.frv.SingleFiniteDistribution(cls,*args)
sympy.stats.frv.SingleFiniteDistribution.__contains__(self,other)
sympy.stats.frv.SingleFiniteDistribution.check(*args)
sympy.stats.frv.SingleFiniteDistribution.dict(self)
sympy.stats.frv.SingleFiniteDistribution.pmf(self,*args)
sympy.stats.frv.SingleFiniteDistribution.set(self)
sympy.stats.frv.SingleFiniteDomain(cls,symbol,set)
sympy.stats.frv.SingleFiniteDomain.__contains__(self,other)
sympy.stats.frv.SingleFiniteDomain.__iter__(self)
sympy.stats.frv.SingleFiniteDomain.elements(self)
sympy.stats.frv.SingleFiniteDomain.set(self)
sympy.stats.frv.SingleFiniteDomain.symbol(self)
sympy.stats.frv.SingleFiniteDomain.symbols(self)
sympy.stats.frv.SingleFinitePSpace(SinglePSpace,FinitePSpace)
sympy.stats.frv.SingleFinitePSpace._density(self)
sympy.stats.frv.SingleFinitePSpace._is_symbolic(self)
sympy.stats.frv.SingleFinitePSpace.compute_cdf(self,expr)
sympy.stats.frv.SingleFinitePSpace.compute_characteristic_function(self,expr)
sympy.stats.frv.SingleFinitePSpace.compute_density(self,expr)
sympy.stats.frv.SingleFinitePSpace.compute_expectation(self,expr,rvs=None,**kwargs)
sympy.stats.frv.SingleFinitePSpace.compute_moment_generating_function(self,expr)
sympy.stats.frv.SingleFinitePSpace.compute_quantile(self,expr)
sympy.stats.frv.SingleFinitePSpace.conditional_space(self,condition)
sympy.stats.frv.SingleFinitePSpace.distribution(self)
sympy.stats.frv.SingleFinitePSpace.domain(self)
sympy.stats.frv.SingleFinitePSpace.pmf(self,expr)
sympy.stats.frv.SingleFinitePSpace.probability(self,condition)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/random_matrix_models.py----------------------------------------
A:sympy.stats.random_matrix_models.symbol->property(lambda self: self.args[0])
A:sympy.stats.random_matrix_models.dimension->property(lambda self: self.args[1])
A:sympy.stats.random_matrix_models.n->S(n)
A:sympy.stats.random_matrix_models.j->Dummy('j', integer=True, positive=True)
A:sympy.stats.random_matrix_models.term1->exp(-S(n) / 2 * Sum(l[k] ** 2, (k, 1, n)).doit())
A:sympy.stats.random_matrix_models.Zbn->self._compute_normalization_constant(beta, n)
A:sympy.stats.random_matrix_models.l->IndexedBase('l')
A:sympy.stats.random_matrix_models.i->Dummy('i', integer=True, positive=True)
A:sympy.stats.random_matrix_models.k->Dummy('k', integer=True, positive=True)
A:sympy.stats.random_matrix_models.sub_term->Lambda(i, Product(Abs(l[j] - l[i]) ** beta, (j, i + 1, n)))
A:sympy.stats.random_matrix_models.term2->Product(sub_term(i).doit(), (i, 1, n - 1)).doit()
A:sympy.stats.random_matrix_models.syms->ArrayComprehension(t[i], (i, 1, n)).doit()
A:sympy.stats.random_matrix_models.h_pspace->RandomMatrixPSpace('P', model=self)
A:sympy.stats.random_matrix_models.H->RandomMatrixSymbol('H', n, n, pspace=h_pspace)
A:sympy.stats.random_matrix_models.s->Dummy('s')
A:sympy.stats.random_matrix_models._H->MatrixSymbol('_H', n, n)
A:sympy.stats.random_matrix_models.model->CircularSymplecticEnsembleModel(sym, dim)
A:sympy.stats.random_matrix_models.rmp->RandomMatrixPSpace(sym, model=model)
A:sympy.stats.random_matrix_models.t->IndexedBase('t')
A:sympy.stats.random_matrix_models.f->Product(Product(Abs(exp(I * t[k]) - exp(I * t[j])) ** beta, (j, k + 1, n)).doit(), (k, 1, n - 1)).doit()
A:sympy.stats.random_matrix_models.eigenvals->mat.eigenvals(multiple=True)
sympy.stats.CircularEnsemble(sym,dim)
sympy.stats.CircularOrthogonalEnsemble(sym,dim)
sympy.stats.CircularSymplecticEnsemble(sym,dim)
sympy.stats.CircularUnitaryEnsemble(sym,dim)
sympy.stats.GaussianEnsemble(sym,dim)
sympy.stats.GaussianOrthogonalEnsemble(sym,dim)
sympy.stats.GaussianSymplecticEnsemble(sym,dim)
sympy.stats.GaussianUnitaryEnsemble(sym,dim)
sympy.stats.JointEigenDistribution(mat)
sympy.stats.joint_eigen_distribution(mat)
sympy.stats.level_spacing_distribution(mat)
sympy.stats.random_matrix_models.CircularEnsemble(sym,dim)
sympy.stats.random_matrix_models.CircularEnsembleModel(RandomMatrixEnsembleModel)
sympy.stats.random_matrix_models.CircularEnsembleModel._compute_joint_eigen_distribution(self,beta)
sympy.stats.random_matrix_models.CircularEnsembleModel.density(self,expr)
sympy.stats.random_matrix_models.CircularOrthogonalEnsemble(sym,dim)
sympy.stats.random_matrix_models.CircularOrthogonalEnsembleModel(CircularEnsembleModel)
sympy.stats.random_matrix_models.CircularOrthogonalEnsembleModel.joint_eigen_distribution(self)
sympy.stats.random_matrix_models.CircularSymplecticEnsemble(sym,dim)
sympy.stats.random_matrix_models.CircularSymplecticEnsembleModel(CircularEnsembleModel)
sympy.stats.random_matrix_models.CircularSymplecticEnsembleModel.joint_eigen_distribution(self)
sympy.stats.random_matrix_models.CircularUnitaryEnsemble(sym,dim)
sympy.stats.random_matrix_models.CircularUnitaryEnsembleModel(CircularEnsembleModel)
sympy.stats.random_matrix_models.CircularUnitaryEnsembleModel.joint_eigen_distribution(self)
sympy.stats.random_matrix_models.GaussianEnsemble(sym,dim)
sympy.stats.random_matrix_models.GaussianEnsembleModel(RandomMatrixEnsembleModel)
sympy.stats.random_matrix_models.GaussianEnsembleModel._compute_joint_eigen_distribution(self,beta)
sympy.stats.random_matrix_models.GaussianEnsembleModel._compute_normalization_constant(self,beta,n)
sympy.stats.random_matrix_models.GaussianOrthogonalEnsemble(sym,dim)
sympy.stats.random_matrix_models.GaussianOrthogonalEnsembleModel(GaussianEnsembleModel)
sympy.stats.random_matrix_models.GaussianOrthogonalEnsembleModel.density(self,expr)
sympy.stats.random_matrix_models.GaussianOrthogonalEnsembleModel.joint_eigen_distribution(self)
sympy.stats.random_matrix_models.GaussianOrthogonalEnsembleModel.level_spacing_distribution(self)
sympy.stats.random_matrix_models.GaussianOrthogonalEnsembleModel.normalization_constant(self)
sympy.stats.random_matrix_models.GaussianSymplecticEnsemble(sym,dim)
sympy.stats.random_matrix_models.GaussianSymplecticEnsembleModel(GaussianEnsembleModel)
sympy.stats.random_matrix_models.GaussianSymplecticEnsembleModel.density(self,expr)
sympy.stats.random_matrix_models.GaussianSymplecticEnsembleModel.joint_eigen_distribution(self)
sympy.stats.random_matrix_models.GaussianSymplecticEnsembleModel.level_spacing_distribution(self)
sympy.stats.random_matrix_models.GaussianSymplecticEnsembleModel.normalization_constant(self)
sympy.stats.random_matrix_models.GaussianUnitaryEnsemble(sym,dim)
sympy.stats.random_matrix_models.GaussianUnitaryEnsembleModel(GaussianEnsembleModel)
sympy.stats.random_matrix_models.GaussianUnitaryEnsembleModel.density(self,expr)
sympy.stats.random_matrix_models.GaussianUnitaryEnsembleModel.joint_eigen_distribution(self)
sympy.stats.random_matrix_models.GaussianUnitaryEnsembleModel.level_spacing_distribution(self)
sympy.stats.random_matrix_models.GaussianUnitaryEnsembleModel.normalization_constant(self)
sympy.stats.random_matrix_models.JointEigenDistribution(mat)
sympy.stats.random_matrix_models.RandomMatrixEnsembleModel(cls,sym,dim=None)
sympy.stats.random_matrix_models.RandomMatrixEnsembleModel.density(self,expr)
sympy.stats.random_matrix_models._(x)
sympy.stats.random_matrix_models.joint_eigen_distribution(mat)
sympy.stats.random_matrix_models.level_spacing_distribution(mat)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/matrix_distributions.py----------------------------------------
A:sympy.stats.matrix_distributions.sym->_symbol_converter(sym)
A:sympy.stats.matrix_distributions.distribution->property(lambda self: self.args[1])
A:sympy.stats.matrix_distributions.symbol->property(lambda self: self.args[0])
A:sympy.stats.matrix_distributions.rms->ImmutableMatrix(expr).atoms(RandomMatrixSymbol)
A:sympy.stats.matrix_distributions.args->list(map(sympify, args))
A:sympy.stats.matrix_distributions.dist->cls(*args)
A:sympy.stats.matrix_distributions.pspace->MatrixPSpace(symbol, dist, dim[0], dim[1])
A:sympy.stats.matrix_distributions.dist_list->pymc_rv_map.keys()
A:sympy.stats.matrix_distributions.rand_state->numpy.random.default_rng(seed=seed)
A:sympy.stats.matrix_distributions.samp->numpy_rv_map[dist.__class__.__name__](dist, prod(size), rand_state)
A:sympy.stats.matrix_distributions.expr->ImmutableMatrix(expr)
A:sympy.stats.matrix_distributions.samps->_get_sample_class_matrixrv[library](self, size, seed)
A:sympy.stats.matrix_distributions.x->ImmutableMatrix(x)
A:sympy.stats.matrix_distributions.scale_matrix->ImmutableMatrix(scale_matrix)
A:sympy.stats.matrix_distributions.num->exp(-Trace(term1) / S(2))
A:sympy.stats.matrix_distributions.location_matrix->ImmutableMatrix(location_matrix)
A:sympy.stats.matrix_distributions.scale_matrix_1->ImmutableMatrix(scale_matrix_1)
A:sympy.stats.matrix_distributions.scale_matrix_2->ImmutableMatrix(scale_matrix_2)
sympy.stats.MatrixGamma(symbol,alpha,beta,scale_matrix)
sympy.stats.MatrixNormal(symbol,location_matrix,scale_matrix_1,scale_matrix_2)
sympy.stats.MatrixStudentT(symbol,nu,location_matrix,scale_matrix_1,scale_matrix_2)
sympy.stats.Wishart(symbol,n,scale_matrix)
sympy.stats.matrix_distributions.MatrixDistribution(cls,*args)
sympy.stats.matrix_distributions.MatrixDistribution.check(*args)
sympy.stats.matrix_distributions.MatrixDistribution.sample(self,size=(),library='scipy',seed=None)
sympy.stats.matrix_distributions.MatrixGamma(symbol,alpha,beta,scale_matrix)
sympy.stats.matrix_distributions.MatrixGammaDistribution(MatrixDistribution)
sympy.stats.matrix_distributions.MatrixGammaDistribution.check(alpha,beta,scale_matrix)
sympy.stats.matrix_distributions.MatrixGammaDistribution.dimension(self)
sympy.stats.matrix_distributions.MatrixGammaDistribution.pdf(self,x)
sympy.stats.matrix_distributions.MatrixGammaDistribution.set(self)
sympy.stats.matrix_distributions.MatrixNormal(symbol,location_matrix,scale_matrix_1,scale_matrix_2)
sympy.stats.matrix_distributions.MatrixNormalDistribution(MatrixDistribution)
sympy.stats.matrix_distributions.MatrixNormalDistribution.check(location_matrix,scale_matrix_1,scale_matrix_2)
sympy.stats.matrix_distributions.MatrixNormalDistribution.dimension(self)
sympy.stats.matrix_distributions.MatrixNormalDistribution.pdf(self,x)
sympy.stats.matrix_distributions.MatrixNormalDistribution.set(self)
sympy.stats.matrix_distributions.MatrixPSpace(cls,sym,distribution,dim_n,dim_m)
sympy.stats.matrix_distributions.MatrixPSpace.compute_density(self,expr,*args)
sympy.stats.matrix_distributions.MatrixPSpace.domain(self)
sympy.stats.matrix_distributions.MatrixPSpace.sample(self,size=(),library='scipy',seed=None)
sympy.stats.matrix_distributions.MatrixPSpace.value(self)
sympy.stats.matrix_distributions.MatrixPSpace.values(self)
sympy.stats.matrix_distributions.MatrixStudentT(symbol,nu,location_matrix,scale_matrix_1,scale_matrix_2)
sympy.stats.matrix_distributions.MatrixStudentTDistribution(MatrixDistribution)
sympy.stats.matrix_distributions.MatrixStudentTDistribution.check(nu,location_matrix,scale_matrix_1,scale_matrix_2)
sympy.stats.matrix_distributions.MatrixStudentTDistribution.dimension(self)
sympy.stats.matrix_distributions.MatrixStudentTDistribution.pdf(self,x)
sympy.stats.matrix_distributions.MatrixStudentTDistribution.set(self)
sympy.stats.matrix_distributions.SampleMatrixNumpy(cls,dist,size,seed=None)
sympy.stats.matrix_distributions.SampleMatrixNumpy._sample_numpy(cls,dist,size,seed)
sympy.stats.matrix_distributions.SampleMatrixPymc(cls,dist,size,seed=None)
sympy.stats.matrix_distributions.SampleMatrixPymc._sample_pymc(cls,dist,size,seed)
sympy.stats.matrix_distributions.SampleMatrixScipy(cls,dist,size,seed=None)
sympy.stats.matrix_distributions.SampleMatrixScipy._sample_scipy(cls,dist,size,seed)
sympy.stats.matrix_distributions.Wishart(symbol,n,scale_matrix)
sympy.stats.matrix_distributions.WishartDistribution(MatrixDistribution)
sympy.stats.matrix_distributions.WishartDistribution.check(n,scale_matrix)
sympy.stats.matrix_distributions.WishartDistribution.dimension(self)
sympy.stats.matrix_distributions.WishartDistribution.pdf(self,x)
sympy.stats.matrix_distributions.WishartDistribution.set(self)
sympy.stats.matrix_distributions.rv(symbol,cls,args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/drv.py----------------------------------------
A:sympy.stats.drv.args->list(map(sympify, args))
A:sympy.stats.drv.x->Dummy('x', real=True)
A:sympy.stats.drv.z->Dummy('z', real=True)
A:sympy.stats.drv.pdf->Lambda(sym, self.pdf)
A:sympy.stats.drv.cdf->summation(pdf, (x, left_bound, x), **kwargs)
A:sympy.stats.drv.(x, t)->symbols('x, t', real=True, cls=Dummy)
A:sympy.stats.drv.cf->self._characteristic_function(t)
A:sympy.stats.drv.t->Dummy('t', real=True)
A:sympy.stats.drv.mgf->self.moment_generating_function(t)
A:sympy.stats.drv.p->Dummy('p', real=True)
A:sympy.stats.drv.quantile->self._quantile(x)
A:sympy.stats.drv.deg->Dummy('p', real=True).degree()
A:sympy.stats.drv.taylor->poly(series(mgf, t, 0, deg + 1).removeO(), t)
A:sympy.stats.drv.rvs->random_symbols(condition)
A:sympy.stats.drv.conditional_domain->conditional_domain.intersect(self.domain.set).intersect(self.domain.set)
A:sympy.stats.drv.complement->isinstance(condition, Ne)
A:sympy.stats.drv.condition->condition.xreplace({rv: rv.symbol for rv in self.values}).xreplace({rv: rv.symbol for rv in self.values})
A:sympy.stats.drv.prob->Probability(condition)
A:sympy.stats.drv.dens->DiscreteDistributionHandmade(dens)
A:sympy.stats.drv.space->SingleDiscretePSpace(z, dens)
A:sympy.stats.drv.n->symbols('n', integer=True)
A:sympy.stats.drv.summand->self.pdf.replace(sym, n * step)
A:sympy.stats.drv.rv->sum((self.eval_prob(x) for x in _domain.args))
A:sympy.stats.drv.density->Lambda(tuple(self.symbols), self.pdf / self.probability(condition))
A:sympy.stats.drv.domain->ConditionalDiscreteDomain(self.domain, condition)
A:sympy.stats.drv.expr->expr.xreplace({rv: rv.symbol for rv in rvs}).xreplace({rv: rv.symbol for rv in rvs})
sympy.stats.drv.ConditionalDiscreteDomain(DiscreteDomain,ConditionalDomain)
sympy.stats.drv.ConditionalDiscreteDomain.set(self)
sympy.stats.drv.DiscreteDistribution(self,*args)
sympy.stats.drv.DiscreteDomain(RandomDomain)
sympy.stats.drv.DiscretePSpace(PSpace)
sympy.stats.drv.DiscretePSpace.conditional_space(self,condition)
sympy.stats.drv.DiscretePSpace.eval_prob(self,_domain)
sympy.stats.drv.DiscretePSpace.pdf(self)
sympy.stats.drv.DiscretePSpace.probability(self,condition)
sympy.stats.drv.DiscretePSpace.where(self,condition)
sympy.stats.drv.ProductDiscreteDomain(ProductDomain,DiscreteDomain)
sympy.stats.drv.ProductDiscreteDomain.as_boolean(self)
sympy.stats.drv.SingleDiscreteDistribution(cls,*args)
sympy.stats.drv.SingleDiscreteDistribution._cdf(self,x)
sympy.stats.drv.SingleDiscreteDistribution._characteristic_function(self,t)
sympy.stats.drv.SingleDiscreteDistribution._moment_generating_function(self,t)
sympy.stats.drv.SingleDiscreteDistribution._quantile(self,x)
sympy.stats.drv.SingleDiscreteDistribution.cdf(self,x,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.characteristic_function(self,t,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.check(*args)
sympy.stats.drv.SingleDiscreteDistribution.compute_cdf(self,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.compute_characteristic_function(self,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.compute_moment_generating_function(self,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.compute_quantile(self,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.expectation(self,expr,var,evaluate=True,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.moment_generating_function(self,t,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.quantile(self,x,**kwargs)
sympy.stats.drv.SingleDiscreteDomain(DiscreteDomain,SingleDomain)
sympy.stats.drv.SingleDiscreteDomain.as_boolean(self)
sympy.stats.drv.SingleDiscretePSpace(DiscretePSpace,SinglePSpace)
sympy.stats.drv.SingleDiscretePSpace.compute_cdf(self,expr,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.compute_characteristic_function(self,expr,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.compute_density(self,expr,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.compute_expectation(self,expr,rvs=None,evaluate=True,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.compute_moment_generating_function(self,expr,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.compute_quantile(self,expr,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.domain(self)
sympy.stats.drv.SingleDiscretePSpace.sample(self,size=(),library='scipy',seed=None)
sympy.stats.drv.SingleDiscretePSpace.set(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/rv.py----------------------------------------
A:sympy.stats.rv.x->Symbol('x')
A:sympy.stats.rv.symbols->random_symbols(expr)
A:sympy.stats.rv.condition->_sympify(condition)
A:sympy.stats.rv.s->_symbol_converter(s)
A:sympy.stats.rv.pspace->property(lambda self: self.args[3])
A:sympy.stats.rv.symbol->property(lambda self: self.args[0])
A:sympy.stats.rv.name->property(lambda self: str(self.args[0]))
A:sympy.stats.rv.obj->sympy.core.basic.Basic.__new__(cls, expr, condition)
A:sympy.stats.rv.p->Mul(*[space.pdf for space in self.spaces])
A:sympy.stats.rv.rvs->list(ps.values)
A:sympy.stats.rv.expr->expr.subs(sub).subs(sub)
A:sympy.stats.rv.dens->DiscreteDistributionHandmade(dens)
A:sympy.stats.rv.randomsymbols->tuple(set(self.values) - frozenset([expr]))
A:sympy.stats.rv.pdf->self.domain.integrate(self.pdf, symbols, **kwargs)
A:sympy.stats.rv.z->Symbol('z', real=True)
A:sympy.stats.rv.space->pspace(Tuple(expr, condition)).conditional_space(condition, **kwargs)
A:sympy.stats.rv.result->pspace(expr).compute_quantile(expr, **kwargs)
A:sympy.stats.rv.domain->ConditionalDiscreteDomain(self.domain, condition)
A:sympy.stats.rv.norm->ConditionalDiscreteDomain(self.domain, condition).compute_expectation(self.pdf, **kwargs)
A:sympy.stats.rv.density->Lambda(tuple(domain.symbols), pdf)
A:sympy.stats.rv.domains2->FiniteSet(*domains2)
A:sympy.stats.rv.elem->frozenset([item for item in other if sympify(domain.symbols.contains(item[0])) is S.true])
A:sympy.stats.rv.atoms->getattr(expr, 'atoms', None)
A:sympy.stats.rv.l->list(atoms(RandomSymbol))
A:sympy.stats.rv.condsymbols->random_symbols(condition)
A:sympy.stats.rv.results->list(results.args[1])
A:sympy.stats.rv.temp->expr.subs(sub).subs(sub).subs(rv, res)
A:sympy.stats.rv.sums->expr.subs(sub).subs(sub).subs(rv, res)
A:sympy.stats.rv.fullspace->pspace(Tuple(expr, condition))
A:sympy.stats.rv.swapdict->rs_swap(fullspace.values, space.values)
A:sympy.stats.rv.iterator->sample_iter(expr, condition, size=size, library=library, numsamples=numsamples, seed=seed)
A:sympy.stats.rv.ps->pspace(expr)
A:sympy.stats.rv.sub[arg]->RandomSymbol(arg.symbol, arg.pspace)
A:sympy.stats.rv.fn->lambdify(rvs, expr, modules=library, **kwargs)
A:sympy.stats.rv.given_fn->lambdify(rvs, condition, **kwargs)
A:sympy.stats.rv.d->pspace(expr).sample(size=(numsamples,) + ((size,) if isinstance(size, int) else size), library=library, seed=seed)
A:sympy.stats.rv.gd->given_fn_subs(*args)
A:sympy.stats.rv.samples->list(sample_iter(expr, given_condition, library=library, numsamples=numsamples, seed=seed, **kwargs))
A:sympy.stats.rv.a_symbols->set(pspace(b).symbols)
A:sympy.stats.rv.b_symbols->set(pspace(a).symbols)
A:sympy.stats.rv.module->import_module(library)
A:sympy.stats.rv.rand_state->numpy.random.default_rng(seed=seed)
A:sympy.stats.rv.samps->samps.reshape(size).reshape(size)
A:sympy.stats.rv.truth->fuzzy_and(condition)
A:sympy.stats.rv.sym->Symbol(sym)
sympy.stats.rv.ConditionalDomain(cls,fulldomain,condition)
sympy.stats.rv.ConditionalDomain.as_boolean(self)
sympy.stats.rv.ConditionalDomain.condition(self)
sympy.stats.rv.ConditionalDomain.fulldomain(self)
sympy.stats.rv.ConditionalDomain.set(self)
sympy.stats.rv.ConditionalDomain.symbols(self)
sympy.stats.rv.Density(cls,expr,condition=None)
sympy.stats.rv.Density.condition(self)
sympy.stats.rv.Density.doit(self,evaluate=True,**kwargs)
sympy.stats.rv.Distribution(Basic)
sympy.stats.rv.Distribution.sample(self,size=(),library='scipy',seed=None)
sympy.stats.rv.IndependentProductPSpace(cls,*spaces)
sympy.stats.rv.IndependentProductPSpace.compute_cdf(self,expr,**kwargs)
sympy.stats.rv.IndependentProductPSpace.compute_density(self,expr,**kwargs)
sympy.stats.rv.IndependentProductPSpace.compute_expectation(self,expr,rvs=None,evaluate=False,**kwargs)
sympy.stats.rv.IndependentProductPSpace.conditional_space(self,condition,normalize=True,**kwargs)
sympy.stats.rv.IndependentProductPSpace.density(self)
sympy.stats.rv.IndependentProductPSpace.domain(self)
sympy.stats.rv.IndependentProductPSpace.pdf(self)
sympy.stats.rv.IndependentProductPSpace.probability(self,condition,**kwargs)
sympy.stats.rv.IndependentProductPSpace.rs_space_dict(self)
sympy.stats.rv.IndependentProductPSpace.sample(self,size=(),library='scipy',seed=None)
sympy.stats.rv.IndependentProductPSpace.spaces(self)
sympy.stats.rv.IndependentProductPSpace.symbols(self)
sympy.stats.rv.IndependentProductPSpace.values(self)
sympy.stats.rv.MatrixDomain(cls,symbol,set)
sympy.stats.rv.MatrixDomain.symbol(self)
sympy.stats.rv.MatrixDomain.symbols(self)
sympy.stats.rv.NamedArgsMixin
sympy.stats.rv.NamedArgsMixin.__getattr__(self,attr)
sympy.stats.rv.PSpace(Basic)
sympy.stats.rv.PSpace.compute_density(self,expr)
sympy.stats.rv.PSpace.compute_expectation(self,expr)
sympy.stats.rv.PSpace.density(self)
sympy.stats.rv.PSpace.domain(self)
sympy.stats.rv.PSpace.probability(self,condition)
sympy.stats.rv.PSpace.sample(self,size=(),library='scipy',seed=None)
sympy.stats.rv.PSpace.symbols(self)
sympy.stats.rv.PSpace.values(self)
sympy.stats.rv.PSpace.where(self,condition)
sympy.stats.rv.ProductDomain(cls,*domains)
sympy.stats.rv.ProductDomain.__contains__(self,other)
sympy.stats.rv.ProductDomain.as_boolean(self)
sympy.stats.rv.ProductDomain.domains(self)
sympy.stats.rv.ProductDomain.set(self)
sympy.stats.rv.ProductDomain.sym_domain_dict(self)
sympy.stats.rv.ProductDomain.symbols(self)
sympy.stats.rv.ProductPSpace(PSpace)
sympy.stats.rv.RandomDomain(cls,symbols,*args)
sympy.stats.rv.RandomDomain.__contains__(self,other)
sympy.stats.rv.RandomDomain.compute_expectation(self,expr)
sympy.stats.rv.RandomDomain.set(self)
sympy.stats.rv.RandomDomain.symbols(self)
sympy.stats.rv.RandomIndexedSymbol(cls,idx_obj,pspace=None)
sympy.stats.rv.RandomIndexedSymbol.free_symbols(self)
sympy.stats.rv.RandomIndexedSymbol.key(self)
sympy.stats.rv.RandomIndexedSymbol.pspace(self)
sympy.stats.rv.RandomMatrixSymbol(cls,symbol,n,m,pspace=None)
sympy.stats.rv.RandomSymbol(cls,symbol,pspace=None)
sympy.stats.rv.RandomSymbol._eval_is_integer(self)
sympy.stats.rv.RandomSymbol._eval_is_positive(self)
sympy.stats.rv.RandomSymbol._eval_is_real(self)
sympy.stats.rv.RandomSymbol.free_symbols(self)
sympy.stats.rv.RandomSymbol.is_commutative(self)
sympy.stats.rv.SingleDomain(cls,symbol,set)
sympy.stats.rv.SingleDomain.__contains__(self,other)
sympy.stats.rv.SingleDomain.symbol(self)
sympy.stats.rv.SingleDomain.symbols(self)
sympy.stats.rv.SinglePSpace(cls,s,distribution)
sympy.stats.rv.SinglePSpace.distribution(self)
sympy.stats.rv.SinglePSpace.pdf(self)
sympy.stats.rv.SinglePSpace.symbol(self)
sympy.stats.rv.SinglePSpace.value(self)
sympy.stats.rv._(x)
sympy.stats.rv._symbol_converter(sym)
sympy.stats.rv._value_check(condition,message)
sympy.stats.rv.cdf(expr,condition=None,evaluate=True,**kwargs)
sympy.stats.rv.characteristic_function(expr,condition=None,evaluate=True,**kwargs)
sympy.stats.rv.density(expr,condition=None,evaluate=True,numsamples=None,**kwargs)
sympy.stats.rv.dependent(a,b)
sympy.stats.rv.expectation(expr,condition=None,numsamples=None,evaluate=True,**kwargs)
sympy.stats.rv.given(expr,condition=None,**kwargs)
sympy.stats.rv.independent(a,b)
sympy.stats.rv.is_random(x)
sympy.stats.rv.moment_generating_function(expr,condition=None,evaluate=True,**kwargs)
sympy.stats.rv.probability(condition,given_condition=None,numsamples=None,evaluate=True,**kwargs)
sympy.stats.rv.pspace(expr)
sympy.stats.rv.pspace_independent(a,b)
sympy.stats.rv.quantile(expr,evaluate=True,**kwargs)
sympy.stats.rv.random_symbols(expr)
sympy.stats.rv.rs_swap(a,b)
sympy.stats.rv.rv_subs(expr,symbols=None)
sympy.stats.rv.sample(expr,condition=None,size=(),library='scipy',numsamples=1,seed=None,**kwargs)
sympy.stats.rv.sample_iter(expr,condition=None,size=(),library='scipy',numsamples=S.Infinity,seed=None,**kwargs)
sympy.stats.rv.sample_iter_lambdify(expr,condition=None,size=(),numsamples=S.Infinity,seed=None,**kwargs)
sympy.stats.rv.sample_iter_subs(expr,condition=None,size=(),numsamples=S.Infinity,seed=None,**kwargs)
sympy.stats.rv.sample_stochastic_process(process)
sympy.stats.rv.sampling_E(expr,given_condition=None,library='scipy',numsamples=1,evalf=True,seed=None,**kwargs)
sympy.stats.rv.sampling_P(condition,given_condition=None,library='scipy',numsamples=1,evalf=True,seed=None,**kwargs)
sympy.stats.rv.sampling_density(expr,given_condition=None,library='scipy',numsamples=1,seed=None,**kwargs)
sympy.stats.rv.sumsets(sets)
sympy.stats.rv.where(condition,given_condition=None,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/drv_types.py----------------------------------------
A:sympy.stats.drv_types.args->list(map(sympify, args))
A:sympy.stats.drv_types.dist->cls(*args)
A:sympy.stats.drv_types.pspace->CompoundPSpace(symbol, CompoundDistribution(dist))
A:sympy.stats.drv_types.x->Dummy('x')
A:sympy.stats.drv_types.val->Sum(pdf(x), (x, set._inf, set._sup)).doit()
A:sympy.stats.drv_types.set->sympify(set)
A:sympy.stats.drv_types.pdf->Lambda(symbol, pdf)
A:sympy.stats.drv_types.kwargs['check']->kwargs.pop('check', False)
A:sympy.stats.drv_types.term1->exp(-(a1 + a2))
A:sympy.stats.drv_types.j->Dummy('j', integer=True)
A:sympy.stats.drv_types.term2->besseli(k, 2 * sqrt(mu1 * mu2))
sympy.stats.DiscreteDistributionHandmade(cls,pdf,set=S.Integers)
sympy.stats.DiscreteRV(symbol,density,set=S.Integers,**kwargs)
sympy.stats.FlorySchulz(name,a)
sympy.stats.Geometric(name,p)
sympy.stats.Hermite(name,a1,a2)
sympy.stats.Logarithmic(name,p)
sympy.stats.NegativeBinomial(name,r,p)
sympy.stats.Poisson(name,lamda)
sympy.stats.Skellam(name,mu1,mu2)
sympy.stats.YuleSimon(name,rho)
sympy.stats.Zeta(name,s)
sympy.stats.drv_types.DiscreteDistributionHandmade(cls,pdf,set=S.Integers)
sympy.stats.drv_types.DiscreteDistributionHandmade.check(pdf,set)
sympy.stats.drv_types.DiscreteDistributionHandmade.set(self)
sympy.stats.drv_types.DiscreteRV(symbol,density,set=S.Integers,**kwargs)
sympy.stats.drv_types.FlorySchulz(name,a)
sympy.stats.drv_types.FlorySchulzDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.FlorySchulzDistribution._characteristic_function(self,t)
sympy.stats.drv_types.FlorySchulzDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.FlorySchulzDistribution.check(a)
sympy.stats.drv_types.FlorySchulzDistribution.pdf(self,k)
sympy.stats.drv_types.Geometric(name,p)
sympy.stats.drv_types.GeometricDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.GeometricDistribution._characteristic_function(self,t)
sympy.stats.drv_types.GeometricDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.GeometricDistribution.check(p)
sympy.stats.drv_types.GeometricDistribution.pdf(self,k)
sympy.stats.drv_types.Hermite(name,a1,a2)
sympy.stats.drv_types.HermiteDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.HermiteDistribution._characteristic_function(self,t)
sympy.stats.drv_types.HermiteDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.HermiteDistribution.check(a1,a2)
sympy.stats.drv_types.HermiteDistribution.pdf(self,k)
sympy.stats.drv_types.Logarithmic(name,p)
sympy.stats.drv_types.LogarithmicDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.LogarithmicDistribution._characteristic_function(self,t)
sympy.stats.drv_types.LogarithmicDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.LogarithmicDistribution.check(p)
sympy.stats.drv_types.LogarithmicDistribution.pdf(self,k)
sympy.stats.drv_types.NegativeBinomial(name,r,p)
sympy.stats.drv_types.NegativeBinomialDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.NegativeBinomialDistribution._characteristic_function(self,t)
sympy.stats.drv_types.NegativeBinomialDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.NegativeBinomialDistribution.check(r,p)
sympy.stats.drv_types.NegativeBinomialDistribution.pdf(self,k)
sympy.stats.drv_types.Poisson(name,lamda)
sympy.stats.drv_types.PoissonDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.PoissonDistribution._characteristic_function(self,t)
sympy.stats.drv_types.PoissonDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.PoissonDistribution.check(lamda)
sympy.stats.drv_types.PoissonDistribution.pdf(self,k)
sympy.stats.drv_types.Skellam(name,mu1,mu2)
sympy.stats.drv_types.SkellamDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.SkellamDistribution._cdf(self,x)
sympy.stats.drv_types.SkellamDistribution._characteristic_function(self,t)
sympy.stats.drv_types.SkellamDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.SkellamDistribution.check(mu1,mu2)
sympy.stats.drv_types.SkellamDistribution.pdf(self,k)
sympy.stats.drv_types.YuleSimon(name,rho)
sympy.stats.drv_types.YuleSimonDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.YuleSimonDistribution._cdf(self,x)
sympy.stats.drv_types.YuleSimonDistribution._characteristic_function(self,t)
sympy.stats.drv_types.YuleSimonDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.YuleSimonDistribution.check(rho)
sympy.stats.drv_types.YuleSimonDistribution.pdf(self,k)
sympy.stats.drv_types.Zeta(name,s)
sympy.stats.drv_types.ZetaDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.ZetaDistribution._characteristic_function(self,t)
sympy.stats.drv_types.ZetaDistribution._moment_generating_function(self,t)
sympy.stats.drv_types.ZetaDistribution.check(s)
sympy.stats.drv_types.ZetaDistribution.pdf(self,k)
sympy.stats.drv_types.rv(symbol,cls,*args,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/crv.py----------------------------------------
A:sympy.stats.crv.expr->expr.xreplace({rv: rv.symbol for rv in rvs}).xreplace({rv: rv.symbol for rv in rvs})
A:sympy.stats.crv.fullintgrl->self.fulldomain.compute_expectation(expr, variables)
A:sympy.stats.crv.cond->conditions.pop()
A:sympy.stats.crv.symbol->tuple((rs.symbol for rs in randomsymbols)).pop()
A:sympy.stats.crv.cintvl->reduce_rational_inequalities_wrap(cond, symbol)
A:sympy.stats.crv.lintvl->Interval(limit[1], limit[2])
A:sympy.stats.crv.intvl->reduce_rational_inequalities_wrap(cond, symbol).intersect(lintvl)
A:sympy.stats.crv.set->Interval(-oo, oo)
A:sympy.stats.crv.args->list(map(sympify, args))
A:sympy.stats.crv.(x, z)->symbols('x, z', real=True, cls=Dummy)
A:sympy.stats.crv.pdf->self.compute_density(rv, **kwargs)
A:sympy.stats.crv.cdf->Piecewise((cdf, z >= left_bound), (0, True))
A:sympy.stats.crv.(x, t)->symbols('x, t', real=True, cls=Dummy)
A:sympy.stats.crv.cf->integrate(exp(I * t * x) * d(x), (x, -oo, oo), **kwargs)
A:sympy.stats.crv.mgf->integrate(exp(t * x) * d(x), (x, -oo, oo), **kwargs)
A:sympy.stats.crv.p->Dummy('p', real=True)
A:sympy.stats.crv.t->Dummy('t', real=True)
A:sympy.stats.crv.deg->Dummy('p', real=True).degree()
A:sympy.stats.crv.taylor->poly(series(mgf, t, 0, deg + 1).removeO(), t)
A:sympy.stats.crv.(x, p)->symbols('x, p', real=True, cls=Dummy)
A:sympy.stats.crv.quantile->solveset(d(x) - p, x, self.set)
A:sympy.stats.crv.rvs->frozenset(random_symbols(condition))
A:sympy.stats.crv.domain_symbols->frozenset((rv.symbol for rv in rvs))
A:sympy.stats.crv.randomsymbols->tuple(set(self.values) - frozenset([expr]))
A:sympy.stats.crv.symbols->tuple((rs.symbol for rs in randomsymbols))
A:sympy.stats.crv.z->Dummy('z', real=True)
A:sympy.stats.crv.d->self.compute_cdf(expr, **kwargs)
A:sympy.stats.crv.x->Dummy('x', real=True)
A:sympy.stats.crv.condition->condition.xreplace({rv: rv.symbol for rv in self.values}).xreplace({rv: rv.symbol for rv in self.values})
A:sympy.stats.crv.domain->ConditionalContinuousDomain(self.domain, condition)
A:sympy.stats.crv.dens->ContinuousDistributionHandmade(dens, set=self.domain.set)
A:sympy.stats.crv.space->SingleContinuousPSpace(z, dens)
A:sympy.stats.crv.result->SingleContinuousPSpace(z, dens).probability(condition.__class__(space.value, comp))
A:sympy.stats.crv.interval->interval.intersect(self.domain.set).intersect(self.domain.set)
A:sympy.stats.crv.norm->ConditionalContinuousDomain(self.domain, condition).compute_expectation(self.pdf, **kwargs)
A:sympy.stats.crv.density->Lambda(tuple(domain.symbols), pdf)
A:sympy.stats.crv.y->Dummy('y', real=True)
A:sympy.stats.crv.gs->list(gs.args[1])
A:sympy.stats.crv.fx->self.compute_density(self.value)
A:sympy.stats.crv.fy->sum((fx(g) * abs(g.diff(y)) for g in gs))
A:sympy.stats.crv.I->sympy.core.numbers.I.intersect(i).intersect(i)
sympy.stats.crv.ConditionalContinuousDomain(ContinuousDomain,ConditionalDomain)
sympy.stats.crv.ConditionalContinuousDomain.as_boolean(self)
sympy.stats.crv.ConditionalContinuousDomain.compute_expectation(self,expr,variables=None,**kwargs)
sympy.stats.crv.ConditionalContinuousDomain.set(self)
sympy.stats.crv.ContinuousDistribution(self,*args)
sympy.stats.crv.ContinuousDomain(RandomDomain)
sympy.stats.crv.ContinuousDomain.as_boolean(self)
sympy.stats.crv.ContinuousPSpace(PSpace)
sympy.stats.crv.ContinuousPSpace.compute_cdf(self,expr,**kwargs)
sympy.stats.crv.ContinuousPSpace.compute_characteristic_function(self,expr,**kwargs)
sympy.stats.crv.ContinuousPSpace.compute_density(self,expr,**kwargs)
sympy.stats.crv.ContinuousPSpace.compute_expectation(self,expr,rvs=None,evaluate=False,**kwargs)
sympy.stats.crv.ContinuousPSpace.compute_moment_generating_function(self,expr,**kwargs)
sympy.stats.crv.ContinuousPSpace.compute_quantile(self,expr,**kwargs)
sympy.stats.crv.ContinuousPSpace.conditional_space(self,condition,normalize=True,**kwargs)
sympy.stats.crv.ContinuousPSpace.pdf(self)
sympy.stats.crv.ContinuousPSpace.probability(self,condition,**kwargs)
sympy.stats.crv.ContinuousPSpace.where(self,condition)
sympy.stats.crv.ProductContinuousDomain(ProductDomain,ContinuousDomain)
sympy.stats.crv.ProductContinuousDomain.as_boolean(self)
sympy.stats.crv.ProductContinuousDomain.compute_expectation(self,expr,variables=None,**kwargs)
sympy.stats.crv.SingleContinuousDistribution(cls,*args)
sympy.stats.crv.SingleContinuousDistribution._cdf(self,x)
sympy.stats.crv.SingleContinuousDistribution._characteristic_function(self,t)
sympy.stats.crv.SingleContinuousDistribution._moment_generating_function(self,t)
sympy.stats.crv.SingleContinuousDistribution._quantile(self,x)
sympy.stats.crv.SingleContinuousDistribution.cdf(self,x,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.characteristic_function(self,t,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.check(*args)
sympy.stats.crv.SingleContinuousDistribution.compute_cdf(self,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.compute_characteristic_function(self,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.compute_moment_generating_function(self,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.compute_quantile(self,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.expectation(self,expr,var,evaluate=True,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.moment_generating_function(self,t,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.quantile(self,x,**kwargs)
sympy.stats.crv.SingleContinuousDomain(ContinuousDomain,SingleDomain)
sympy.stats.crv.SingleContinuousDomain.as_boolean(self)
sympy.stats.crv.SingleContinuousDomain.compute_expectation(self,expr,variables=None,**kwargs)
sympy.stats.crv.SingleContinuousPSpace(ContinuousPSpace,SinglePSpace)
sympy.stats.crv.SingleContinuousPSpace.compute_cdf(self,expr,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.compute_characteristic_function(self,expr,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.compute_density(self,expr,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.compute_expectation(self,expr,rvs=None,evaluate=False,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.compute_moment_generating_function(self,expr,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.compute_quantile(self,expr,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.domain(self)
sympy.stats.crv.SingleContinuousPSpace.sample(self,size=(),library='scipy',seed=None)
sympy.stats.crv.SingleContinuousPSpace.set(self)
sympy.stats.crv._reduce_inequalities(conditions,var,**kwargs)
sympy.stats.crv.reduce_rational_inequalities_wrap(condition,var)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/stochastic_process.py----------------------------------------
A:sympy.stats.stochastic_process.sym->_symbol_converter(sym)
A:sympy.stats.stochastic_process.distribution->Distribution()
sympy.stats.stochastic_process.StochasticPSpace(cls,sym,process,distribution=None)
sympy.stats.stochastic_process.StochasticPSpace.compute_expectation(self,expr,condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process.StochasticPSpace.distribution(self)
sympy.stats.stochastic_process.StochasticPSpace.domain(self)
sympy.stats.stochastic_process.StochasticPSpace.probability(self,condition,given_condition=None,evaluate=True,**kwargs)
sympy.stats.stochastic_process.StochasticPSpace.process(self)
sympy.stats.stochastic_process.StochasticPSpace.symbol(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/crv_types.py----------------------------------------
A:sympy.stats.crv_types.args->list(map(sympify, args))
A:sympy.stats.crv_types.dist->cls(*args)
A:sympy.stats.crv_types.pspace->CompoundPSpace(symbol, CompoundDistribution(dist))
A:sympy.stats.crv_types.x->Dummy('x')
A:sympy.stats.crv_types.val->integrate(pdf(x), (x, set))
A:sympy.stats.crv_types.pdf->Lambda(symbol, pdf)
A:sympy.stats.crv_types.kwargs['check']->kwargs.pop('check', False)
A:sympy.stats.crv_types.set->Interval(0, oo)
A:sympy.stats.crv_types.k->Dummy('k')
A:sympy.stats.crv_types.part_1->hyper((k / 2,), (S.Half,), t ** 2 / 2)
A:sympy.stats.crv_types.part_3->hyper(((k + 1) / 2,), (S(3) / 2,), t ** 2 / 2)
A:sympy.stats.crv_types.term2->exp(mean * t + std ** 2 * t ** 2 / 2)
A:sympy.stats.crv_types.term3->erfc((mean + rate * std ** 2 - x) / (sqrt(2) * std))
A:sympy.stats.crv_types.GaussianCDF1->cdf(Normal('x', 0, v))(u)
A:sympy.stats.crv_types.GaussianCDF2->cdf(Normal('x', v ** 2, v))(u)
A:sympy.stats.crv_types.num->exp(-(exp(-(x - mu) / sigma) + (x - mu) / sigma) / 2)
A:sympy.stats.crv_types.(a, s, m)->list(map(sympify, (a, s, m)))
A:sympy.stats.crv_types.F_max->exp(-exp(-z))
A:sympy.stats.crv_types.term1->exp(t * mu)
A:sympy.stats.crv_types.stdNormalcdf->cdf(Normal('x', 0, 1))
A:sympy.stats.crv_types.first_term->stdNormalcdf(sqrt(s / x) * (x / mu - S.One))
A:sympy.stats.crv_types.result->result.subs({Max(self.left, self.right): self.right, Min(self.left, self.right): self.left}).subs({Max(self.left, self.right): self.right, Min(self.left, self.right): self.left})
sympy.stats.Arcsin(name,a=0,b=1)
sympy.stats.Benini(name,alpha,beta,sigma)
sympy.stats.Beta(name,alpha,beta)
sympy.stats.BetaNoncentral(name,alpha,beta,lamda)
sympy.stats.BetaPrime(name,alpha,beta)
sympy.stats.BoundedPareto(name,alpha,left,right)
sympy.stats.Cauchy(name,x0,gamma)
sympy.stats.Chi(name,k)
sympy.stats.ChiNoncentral(name,k,l)
sympy.stats.ChiSquared(name,k)
sympy.stats.ContinuousDistributionHandmade(cls,pdf,set=Interval(-oo,oo))
sympy.stats.ContinuousRV(symbol,density,set=Interval(-oo,oo),**kwargs)
sympy.stats.Dagum(name,p,a,b)
sympy.stats.Erlang(name,k,l)
sympy.stats.ExGaussian(name,mean,std,rate)
sympy.stats.Exponential(name,rate)
sympy.stats.ExponentialPower(name,mu,alpha,beta)
sympy.stats.FDistribution(name,d1,d2)
sympy.stats.FisherZ(name,d1,d2)
sympy.stats.Frechet(name,a,s=1,m=0)
sympy.stats.Gamma(name,k,theta)
sympy.stats.GammaInverse(name,a,b)
sympy.stats.GaussianInverse(name,mean,shape)
sympy.stats.Gompertz(name,b,eta)
sympy.stats.Gumbel(name,beta,mu,minimum=False)
sympy.stats.Kumaraswamy(name,a,b)
sympy.stats.Laplace(name,mu,b)
sympy.stats.Levy(name,mu,c)
sympy.stats.LogCauchy(name,mu,sigma)
sympy.stats.LogLogistic(name,alpha,beta)
sympy.stats.LogNormal(name,mean,std)
sympy.stats.Logistic(name,mu,s)
sympy.stats.LogitNormal(name,mu,s)
sympy.stats.Lomax(name,alpha,lamda)
sympy.stats.Maxwell(name,a)
sympy.stats.Moyal(name,mu,sigma)
sympy.stats.Nakagami(name,mu,omega)
sympy.stats.Normal(name,mean,std)
sympy.stats.Pareto(name,xm,alpha)
sympy.stats.PowerFunction(name,alpha,a,b)
sympy.stats.QuadraticU(name,a,b)
sympy.stats.RaisedCosine(name,mu,s)
sympy.stats.Rayleigh(name,sigma)
sympy.stats.Reciprocal(name,a,b)
sympy.stats.ShiftedGompertz(name,b,eta)
sympy.stats.StudentT(name,nu)
sympy.stats.Trapezoidal(name,a,b,c,d)
sympy.stats.Triangular(name,a,b,c)
sympy.stats.Uniform(name,left,right)
sympy.stats.UniformSum(name,n)
sympy.stats.VonMises(name,mu,k)
sympy.stats.Weibull(name,alpha,beta)
sympy.stats.WignerSemicircle(name,R)
sympy.stats.crv_types.Arcsin(name,a=0,b=1)
sympy.stats.crv_types.ArcsinDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ArcsinDistribution._cdf(self,x)
sympy.stats.crv_types.ArcsinDistribution.pdf(self,x)
sympy.stats.crv_types.ArcsinDistribution.set(self)
sympy.stats.crv_types.Benini(name,alpha,beta,sigma)
sympy.stats.crv_types.BeniniDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.BeniniDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.BeniniDistribution.check(alpha,beta,sigma)
sympy.stats.crv_types.BeniniDistribution.pdf(self,x)
sympy.stats.crv_types.BeniniDistribution.set(self)
sympy.stats.crv_types.Beta(name,alpha,beta)
sympy.stats.crv_types.BetaDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.BetaDistribution._characteristic_function(self,t)
sympy.stats.crv_types.BetaDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.BetaDistribution.check(alpha,beta)
sympy.stats.crv_types.BetaDistribution.pdf(self,x)
sympy.stats.crv_types.BetaNoncentral(name,alpha,beta,lamda)
sympy.stats.crv_types.BetaNoncentralDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.BetaNoncentralDistribution.check(alpha,beta,lamda)
sympy.stats.crv_types.BetaNoncentralDistribution.pdf(self,x)
sympy.stats.crv_types.BetaPrime(name,alpha,beta)
sympy.stats.crv_types.BetaPrimeDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.BetaPrimeDistribution.check(alpha,beta)
sympy.stats.crv_types.BetaPrimeDistribution.pdf(self,x)
sympy.stats.crv_types.BoundedPareto(name,alpha,left,right)
sympy.stats.crv_types.BoundedParetoDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.BoundedParetoDistribution.check(alpha,left,right)
sympy.stats.crv_types.BoundedParetoDistribution.pdf(self,x)
sympy.stats.crv_types.BoundedParetoDistribution.set(self)
sympy.stats.crv_types.Cauchy(name,x0,gamma)
sympy.stats.crv_types.CauchyDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.CauchyDistribution._cdf(self,x)
sympy.stats.crv_types.CauchyDistribution._characteristic_function(self,t)
sympy.stats.crv_types.CauchyDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.CauchyDistribution._quantile(self,p)
sympy.stats.crv_types.CauchyDistribution.check(x0,gamma)
sympy.stats.crv_types.CauchyDistribution.pdf(self,x)
sympy.stats.crv_types.Chi(name,k)
sympy.stats.crv_types.ChiDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ChiDistribution._characteristic_function(self,t)
sympy.stats.crv_types.ChiDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.ChiDistribution.check(k)
sympy.stats.crv_types.ChiDistribution.pdf(self,x)
sympy.stats.crv_types.ChiNoncentral(name,k,l)
sympy.stats.crv_types.ChiNoncentralDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ChiNoncentralDistribution.check(k,l)
sympy.stats.crv_types.ChiNoncentralDistribution.pdf(self,x)
sympy.stats.crv_types.ChiSquared(name,k)
sympy.stats.crv_types.ChiSquaredDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ChiSquaredDistribution._cdf(self,x)
sympy.stats.crv_types.ChiSquaredDistribution._characteristic_function(self,t)
sympy.stats.crv_types.ChiSquaredDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.ChiSquaredDistribution.check(k)
sympy.stats.crv_types.ChiSquaredDistribution.pdf(self,x)
sympy.stats.crv_types.ContinuousDistributionHandmade(cls,pdf,set=Interval(-oo,oo))
sympy.stats.crv_types.ContinuousDistributionHandmade.check(pdf,set)
sympy.stats.crv_types.ContinuousDistributionHandmade.set(self)
sympy.stats.crv_types.ContinuousRV(symbol,density,set=Interval(-oo,oo),**kwargs)
sympy.stats.crv_types.Dagum(name,p,a,b)
sympy.stats.crv_types.DagumDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.DagumDistribution._cdf(self,x)
sympy.stats.crv_types.DagumDistribution.check(p,a,b)
sympy.stats.crv_types.DagumDistribution.pdf(self,x)
sympy.stats.crv_types.Erlang(name,k,l)
sympy.stats.crv_types.ExGaussian(name,mean,std,rate)
sympy.stats.crv_types.ExGaussianDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ExGaussianDistribution._cdf(self,x)
sympy.stats.crv_types.ExGaussianDistribution._characteristic_function(self,t)
sympy.stats.crv_types.ExGaussianDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.ExGaussianDistribution.check(mean,std,rate)
sympy.stats.crv_types.ExGaussianDistribution.pdf(self,x)
sympy.stats.crv_types.Exponential(name,rate)
sympy.stats.crv_types.ExponentialDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ExponentialDistribution._cdf(self,x)
sympy.stats.crv_types.ExponentialDistribution._characteristic_function(self,t)
sympy.stats.crv_types.ExponentialDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.ExponentialDistribution._quantile(self,p)
sympy.stats.crv_types.ExponentialDistribution.check(rate)
sympy.stats.crv_types.ExponentialDistribution.pdf(self,x)
sympy.stats.crv_types.ExponentialPower(name,mu,alpha,beta)
sympy.stats.crv_types.ExponentialPowerDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ExponentialPowerDistribution._cdf(self,x)
sympy.stats.crv_types.ExponentialPowerDistribution.check(mu,alpha,beta)
sympy.stats.crv_types.ExponentialPowerDistribution.pdf(self,x)
sympy.stats.crv_types.FDistribution(name,d1,d2)
sympy.stats.crv_types.FDistributionDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.FDistributionDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.FDistributionDistribution.check(d1,d2)
sympy.stats.crv_types.FDistributionDistribution.pdf(self,x)
sympy.stats.crv_types.FisherZ(name,d1,d2)
sympy.stats.crv_types.FisherZDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.FisherZDistribution.check(d1,d2)
sympy.stats.crv_types.FisherZDistribution.pdf(self,x)
sympy.stats.crv_types.Frechet(name,a,s=1,m=0)
sympy.stats.crv_types.FrechetDistribution(cls,a,s=1,m=0)
sympy.stats.crv_types.FrechetDistribution._cdf(self,x)
sympy.stats.crv_types.FrechetDistribution.check(a,s,m)
sympy.stats.crv_types.FrechetDistribution.pdf(self,x)
sympy.stats.crv_types.Gamma(name,k,theta)
sympy.stats.crv_types.GammaDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.GammaDistribution._cdf(self,x)
sympy.stats.crv_types.GammaDistribution._characteristic_function(self,t)
sympy.stats.crv_types.GammaDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.GammaDistribution.check(k,theta)
sympy.stats.crv_types.GammaDistribution.pdf(self,x)
sympy.stats.crv_types.GammaInverse(name,a,b)
sympy.stats.crv_types.GammaInverseDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.GammaInverseDistribution._cdf(self,x)
sympy.stats.crv_types.GammaInverseDistribution._characteristic_function(self,t)
sympy.stats.crv_types.GammaInverseDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.GammaInverseDistribution.check(a,b)
sympy.stats.crv_types.GammaInverseDistribution.pdf(self,x)
sympy.stats.crv_types.GaussianInverse(name,mean,shape)
sympy.stats.crv_types.GaussianInverseDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.GaussianInverseDistribution._cdf(self,x)
sympy.stats.crv_types.GaussianInverseDistribution._characteristic_function(self,t)
sympy.stats.crv_types.GaussianInverseDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.GaussianInverseDistribution.check(mean,shape)
sympy.stats.crv_types.GaussianInverseDistribution.pdf(self,x)
sympy.stats.crv_types.GaussianInverseDistribution.set(self)
sympy.stats.crv_types.Gompertz(name,b,eta)
sympy.stats.crv_types.GompertzDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.GompertzDistribution._cdf(self,x)
sympy.stats.crv_types.GompertzDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.GompertzDistribution.check(b,eta)
sympy.stats.crv_types.GompertzDistribution.pdf(self,x)
sympy.stats.crv_types.Gumbel(name,beta,mu,minimum=False)
sympy.stats.crv_types.GumbelDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.GumbelDistribution._cdf(self,x)
sympy.stats.crv_types.GumbelDistribution._characteristic_function(self,t)
sympy.stats.crv_types.GumbelDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.GumbelDistribution.check(beta,mu,minimum)
sympy.stats.crv_types.GumbelDistribution.pdf(self,x)
sympy.stats.crv_types.Kumaraswamy(name,a,b)
sympy.stats.crv_types.KumaraswamyDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.KumaraswamyDistribution._cdf(self,x)
sympy.stats.crv_types.KumaraswamyDistribution.check(a,b)
sympy.stats.crv_types.KumaraswamyDistribution.pdf(self,x)
sympy.stats.crv_types.Laplace(name,mu,b)
sympy.stats.crv_types.LaplaceDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LaplaceDistribution._cdf(self,x)
sympy.stats.crv_types.LaplaceDistribution._characteristic_function(self,t)
sympy.stats.crv_types.LaplaceDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.LaplaceDistribution.check(mu,b)
sympy.stats.crv_types.LaplaceDistribution.pdf(self,x)
sympy.stats.crv_types.Levy(name,mu,c)
sympy.stats.crv_types.LevyDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LevyDistribution._cdf(self,x)
sympy.stats.crv_types.LevyDistribution._characteristic_function(self,t)
sympy.stats.crv_types.LevyDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.LevyDistribution.check(mu,c)
sympy.stats.crv_types.LevyDistribution.pdf(self,x)
sympy.stats.crv_types.LevyDistribution.set(self)
sympy.stats.crv_types.LogCauchy(name,mu,sigma)
sympy.stats.crv_types.LogCauchyDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LogCauchyDistribution._cdf(self,x)
sympy.stats.crv_types.LogCauchyDistribution._characteristic_function(self,t)
sympy.stats.crv_types.LogCauchyDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.LogCauchyDistribution.check(mu,sigma)
sympy.stats.crv_types.LogCauchyDistribution.pdf(self,x)
sympy.stats.crv_types.LogLogistic(name,alpha,beta)
sympy.stats.crv_types.LogLogisticDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LogLogisticDistribution._cdf(self,x)
sympy.stats.crv_types.LogLogisticDistribution._quantile(self,p)
sympy.stats.crv_types.LogLogisticDistribution.check(alpha,beta)
sympy.stats.crv_types.LogLogisticDistribution.expectation(self,expr,var,**kwargs)
sympy.stats.crv_types.LogLogisticDistribution.pdf(self,x)
sympy.stats.crv_types.LogNormal(name,mean,std)
sympy.stats.crv_types.LogNormalDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LogNormalDistribution._cdf(self,x)
sympy.stats.crv_types.LogNormalDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.LogNormalDistribution.check(mean,std)
sympy.stats.crv_types.LogNormalDistribution.pdf(self,x)
sympy.stats.crv_types.Logistic(name,mu,s)
sympy.stats.crv_types.LogisticDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LogisticDistribution._cdf(self,x)
sympy.stats.crv_types.LogisticDistribution._characteristic_function(self,t)
sympy.stats.crv_types.LogisticDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.LogisticDistribution._quantile(self,p)
sympy.stats.crv_types.LogisticDistribution.check(mu,s)
sympy.stats.crv_types.LogisticDistribution.pdf(self,x)
sympy.stats.crv_types.LogitNormal(name,mu,s)
sympy.stats.crv_types.LogitNormalDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LogitNormalDistribution._cdf(self,x)
sympy.stats.crv_types.LogitNormalDistribution._logit(self,x)
sympy.stats.crv_types.LogitNormalDistribution.check(mu,s)
sympy.stats.crv_types.LogitNormalDistribution.pdf(self,x)
sympy.stats.crv_types.Lomax(name,alpha,lamda)
sympy.stats.crv_types.LomaxDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LomaxDistribution.check(alpha,lamda)
sympy.stats.crv_types.LomaxDistribution.pdf(self,x)
sympy.stats.crv_types.Maxwell(name,a)
sympy.stats.crv_types.MaxwellDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.MaxwellDistribution._cdf(self,x)
sympy.stats.crv_types.MaxwellDistribution.check(a)
sympy.stats.crv_types.MaxwellDistribution.pdf(self,x)
sympy.stats.crv_types.Moyal(name,mu,sigma)
sympy.stats.crv_types.MoyalDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.MoyalDistribution._characteristic_function(self,t)
sympy.stats.crv_types.MoyalDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.MoyalDistribution.check(mu,sigma)
sympy.stats.crv_types.MoyalDistribution.pdf(self,x)
sympy.stats.crv_types.Nakagami(name,mu,omega)
sympy.stats.crv_types.NakagamiDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.NakagamiDistribution._cdf(self,x)
sympy.stats.crv_types.NakagamiDistribution.check(mu,omega)
sympy.stats.crv_types.NakagamiDistribution.pdf(self,x)
sympy.stats.crv_types.Normal(name,mean,std)
sympy.stats.crv_types.NormalDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.NormalDistribution._cdf(self,x)
sympy.stats.crv_types.NormalDistribution._characteristic_function(self,t)
sympy.stats.crv_types.NormalDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.NormalDistribution._quantile(self,p)
sympy.stats.crv_types.NormalDistribution.check(mean,std)
sympy.stats.crv_types.NormalDistribution.pdf(self,x)
sympy.stats.crv_types.Pareto(name,xm,alpha)
sympy.stats.crv_types.ParetoDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ParetoDistribution._cdf(self,x)
sympy.stats.crv_types.ParetoDistribution._characteristic_function(self,t)
sympy.stats.crv_types.ParetoDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.ParetoDistribution.check(xm,alpha)
sympy.stats.crv_types.ParetoDistribution.pdf(self,x)
sympy.stats.crv_types.ParetoDistribution.set(self)
sympy.stats.crv_types.PowerFunction(name,alpha,a,b)
sympy.stats.crv_types.PowerFunctionDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.PowerFunctionDistribution.check(alpha,a,b)
sympy.stats.crv_types.PowerFunctionDistribution.pdf(self,x)
sympy.stats.crv_types.PowerFunctionDistribution.set(self)
sympy.stats.crv_types.QuadraticU(name,a,b)
sympy.stats.crv_types.QuadraticUDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.QuadraticUDistribution._characteristic_function(self,t)
sympy.stats.crv_types.QuadraticUDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.QuadraticUDistribution.check(a,b)
sympy.stats.crv_types.QuadraticUDistribution.pdf(self,x)
sympy.stats.crv_types.QuadraticUDistribution.set(self)
sympy.stats.crv_types.RaisedCosine(name,mu,s)
sympy.stats.crv_types.RaisedCosineDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.RaisedCosineDistribution._characteristic_function(self,t)
sympy.stats.crv_types.RaisedCosineDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.RaisedCosineDistribution.check(mu,s)
sympy.stats.crv_types.RaisedCosineDistribution.pdf(self,x)
sympy.stats.crv_types.RaisedCosineDistribution.set(self)
sympy.stats.crv_types.Rayleigh(name,sigma)
sympy.stats.crv_types.RayleighDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.RayleighDistribution._cdf(self,x)
sympy.stats.crv_types.RayleighDistribution._characteristic_function(self,t)
sympy.stats.crv_types.RayleighDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.RayleighDistribution.check(sigma)
sympy.stats.crv_types.RayleighDistribution.pdf(self,x)
sympy.stats.crv_types.Reciprocal(name,a,b)
sympy.stats.crv_types.ReciprocalDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ReciprocalDistribution.check(a,b)
sympy.stats.crv_types.ReciprocalDistribution.pdf(self,x)
sympy.stats.crv_types.ReciprocalDistribution.set(self)
sympy.stats.crv_types.ShiftedGompertz(name,b,eta)
sympy.stats.crv_types.ShiftedGompertzDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ShiftedGompertzDistribution.check(b,eta)
sympy.stats.crv_types.ShiftedGompertzDistribution.pdf(self,x)
sympy.stats.crv_types.StudentT(name,nu)
sympy.stats.crv_types.StudentTDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.StudentTDistribution._cdf(self,x)
sympy.stats.crv_types.StudentTDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.StudentTDistribution.check(nu)
sympy.stats.crv_types.StudentTDistribution.pdf(self,x)
sympy.stats.crv_types.Trapezoidal(name,a,b,c,d)
sympy.stats.crv_types.TrapezoidalDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.TrapezoidalDistribution.check(a,b,c,d)
sympy.stats.crv_types.TrapezoidalDistribution.pdf(self,x)
sympy.stats.crv_types.TrapezoidalDistribution.set(self)
sympy.stats.crv_types.Triangular(name,a,b,c)
sympy.stats.crv_types.TriangularDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.TriangularDistribution._characteristic_function(self,t)
sympy.stats.crv_types.TriangularDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.TriangularDistribution.check(a,b,c)
sympy.stats.crv_types.TriangularDistribution.pdf(self,x)
sympy.stats.crv_types.TriangularDistribution.set(self)
sympy.stats.crv_types.Uniform(name,left,right)
sympy.stats.crv_types.UniformDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.UniformDistribution._cdf(self,x)
sympy.stats.crv_types.UniformDistribution._characteristic_function(self,t)
sympy.stats.crv_types.UniformDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.UniformDistribution.check(left,right)
sympy.stats.crv_types.UniformDistribution.expectation(self,expr,var,**kwargs)
sympy.stats.crv_types.UniformDistribution.pdf(self,x)
sympy.stats.crv_types.UniformDistribution.set(self)
sympy.stats.crv_types.UniformSum(name,n)
sympy.stats.crv_types.UniformSumDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.UniformSumDistribution._cdf(self,x)
sympy.stats.crv_types.UniformSumDistribution._characteristic_function(self,t)
sympy.stats.crv_types.UniformSumDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.UniformSumDistribution.check(n)
sympy.stats.crv_types.UniformSumDistribution.pdf(self,x)
sympy.stats.crv_types.UniformSumDistribution.set(self)
sympy.stats.crv_types.VonMises(name,mu,k)
sympy.stats.crv_types.VonMisesDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.VonMisesDistribution.check(mu,k)
sympy.stats.crv_types.VonMisesDistribution.pdf(self,x)
sympy.stats.crv_types.Weibull(name,alpha,beta)
sympy.stats.crv_types.WeibullDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.WeibullDistribution.check(alpha,beta)
sympy.stats.crv_types.WeibullDistribution.pdf(self,x)
sympy.stats.crv_types.WignerSemicircle(name,R)
sympy.stats.crv_types.WignerSemicircleDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.WignerSemicircleDistribution._characteristic_function(self,t)
sympy.stats.crv_types.WignerSemicircleDistribution._moment_generating_function(self,t)
sympy.stats.crv_types.WignerSemicircleDistribution.check(R)
sympy.stats.crv_types.WignerSemicircleDistribution.pdf(self,x)
sympy.stats.crv_types.WignerSemicircleDistribution.set(self)
sympy.stats.crv_types._(x)
sympy.stats.crv_types.rv(symbol,cls,args,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/symbolic_probability.py----------------------------------------
A:sympy.stats.symbolic_probability.prob->_sympify(prob)
A:sympy.stats.symbolic_probability.obj->sympy.core.expr.Expr.__new__(cls, arg1, arg2, condition)
A:sympy.stats.symbolic_probability.condition->_sympify(condition)
A:sympy.stats.symbolic_probability.numsamples->hints.get('numsamples', False)
A:sympy.stats.symbolic_probability.condrv->random_symbols(condition)
A:sympy.stats.symbolic_probability.result->pspace(expr).compute_expectation(expr, evaluate=for_rewrite)
A:sympy.stats.symbolic_probability.expr->expr.doit(**hints).doit(**hints)
A:sympy.stats.symbolic_probability.expand_expr->_expand(expr)
A:sympy.stats.symbolic_probability.deep->hints.get('deep', True)
A:sympy.stats.symbolic_probability.evalf->hints.get('evalf', True)
A:sympy.stats.symbolic_probability.rvs->_sympify(arg).atoms(RandomSymbol)
A:sympy.stats.symbolic_probability.rv->_sympify(arg).atoms(RandomSymbol).pop()
A:sympy.stats.symbolic_probability.symbol->Symbol(symbol.name + '_1')
A:sympy.stats.symbolic_probability.arg->_sympify(arg)
A:sympy.stats.symbolic_probability.variances->Add(*(Variance(xv, condition).expand() for xv in rv))
A:sympy.stats.symbolic_probability.covariances->Add(*map(map_to_covar, itertools.combinations(rv, 2)))
A:sympy.stats.symbolic_probability.e1->Expectation(arg1 * arg2, condition)
A:sympy.stats.symbolic_probability.arg1->_sympify(arg1)
A:sympy.stats.symbolic_probability.arg2->_sympify(arg2)
A:sympy.stats.symbolic_probability.(arg1, arg2)->sorted([arg1, arg2], key=default_sort_key)
A:sympy.stats.symbolic_probability.coeff_rv_list1->self._expand_single_argument(arg1.expand())
A:sympy.stats.symbolic_probability.coeff_rv_list2->self._expand_single_argument(arg2.expand())
A:sympy.stats.symbolic_probability.X->_sympify(X)
A:sympy.stats.symbolic_probability.n->_sympify(n)
A:sympy.stats.symbolic_probability.c->_sympify(c)
A:sympy.stats.symbolic_probability.mu->Expectation(X, condition, **kwargs)
sympy.stats.CentralMoment(cls,X,n,condition=None,**kwargs)
sympy.stats.Covariance(cls,arg1,arg2,condition=None,**kwargs)
sympy.stats.Expectation(cls,expr,condition=None,**kwargs)
sympy.stats.Moment(cls,X,n,c=0,condition=None,**kwargs)
sympy.stats.Probability(cls,prob,condition=None,**kwargs)
sympy.stats.Variance(cls,arg,condition=None,**kwargs)
sympy.stats.symbolic_probability.CentralMoment(cls,X,n,condition=None,**kwargs)
sympy.stats.symbolic_probability.CentralMoment._eval_rewrite_as_Expectation(self,X,n,condition=None,**kwargs)
sympy.stats.symbolic_probability.CentralMoment._eval_rewrite_as_Integral(self,X,n,condition=None,**kwargs)
sympy.stats.symbolic_probability.CentralMoment._eval_rewrite_as_Probability(self,X,n,condition=None,**kwargs)
sympy.stats.symbolic_probability.CentralMoment.doit(self,**hints)
sympy.stats.symbolic_probability.Covariance(cls,arg1,arg2,condition=None,**kwargs)
sympy.stats.symbolic_probability.Covariance._eval_rewrite_as_Expectation(self,arg1,arg2,condition=None,**kwargs)
sympy.stats.symbolic_probability.Covariance._eval_rewrite_as_Integral(self,arg1,arg2,condition=None,**kwargs)
sympy.stats.symbolic_probability.Covariance._eval_rewrite_as_Probability(self,arg1,arg2,condition=None,**kwargs)
sympy.stats.symbolic_probability.Covariance._expand_single_argument(cls,expr)
sympy.stats.symbolic_probability.Covariance._get_mul_nonrv_rv_tuple(cls,m)
sympy.stats.symbolic_probability.Covariance.evaluate_integral(self)
sympy.stats.symbolic_probability.Covariance.expand(self,**hints)
sympy.stats.symbolic_probability.Expectation(cls,expr,condition=None,**kwargs)
sympy.stats.symbolic_probability.Expectation._eval_rewrite_as_Integral(self,arg,condition=None,**kwargs)
sympy.stats.symbolic_probability.Expectation._eval_rewrite_as_Probability(self,arg,condition=None,**kwargs)
sympy.stats.symbolic_probability.Expectation.doit(self,**hints)
sympy.stats.symbolic_probability.Expectation.evaluate_integral(self)
sympy.stats.symbolic_probability.Expectation.expand(self,**hints)
sympy.stats.symbolic_probability.Moment(cls,X,n,c=0,condition=None,**kwargs)
sympy.stats.symbolic_probability.Moment._eval_rewrite_as_Expectation(self,X,n,c=0,condition=None,**kwargs)
sympy.stats.symbolic_probability.Moment._eval_rewrite_as_Integral(self,X,n,c=0,condition=None,**kwargs)
sympy.stats.symbolic_probability.Moment._eval_rewrite_as_Probability(self,X,n,c=0,condition=None,**kwargs)
sympy.stats.symbolic_probability.Moment.doit(self,**hints)
sympy.stats.symbolic_probability.Probability(cls,prob,condition=None,**kwargs)
sympy.stats.symbolic_probability.Probability._eval_rewrite_as_Integral(self,arg,condition=None,**kwargs)
sympy.stats.symbolic_probability.Probability.doit(self,**hints)
sympy.stats.symbolic_probability.Probability.evaluate_integral(self)
sympy.stats.symbolic_probability.Variance(cls,arg,condition=None,**kwargs)
sympy.stats.symbolic_probability.Variance._eval_rewrite_as_Expectation(self,arg,condition=None,**kwargs)
sympy.stats.symbolic_probability.Variance._eval_rewrite_as_Integral(self,arg,condition=None,**kwargs)
sympy.stats.symbolic_probability.Variance._eval_rewrite_as_Probability(self,arg,condition=None,**kwargs)
sympy.stats.symbolic_probability.Variance.evaluate_integral(self)
sympy.stats.symbolic_probability.Variance.expand(self,**hints)
sympy.stats.symbolic_probability._(x)
sympy.stats.symbolic_probability._(x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/frv_types.py----------------------------------------
A:sympy.stats.frv_types.args->list(map(sympify, args))
A:sympy.stats.frv_types.dist->cls(*args)
A:sympy.stats.frv_types.pspace->CompoundPSpace(name, CompoundDistribution(dist))
A:sympy.stats.frv_types.x->sympify(x)
A:sympy.stats.frv_types.val->sum(density.values())
A:sympy.stats.frv_types.kwargs['check']->kwargs.pop('check', False)
A:sympy.stats.frv_types.weights->multiset(args)
A:sympy.stats.frv_types.n->Integer(len(args))
A:sympy.stats.frv_types.k->Dummy('k')
A:sympy.stats.frv_types.rho->Piecewise((Rational(1, self.k), cond1), (Rational(1, x * (x - 1)), cond2), (S.Zero, True))
A:sympy.stats.frv_types.cond2->Eq(x, round(self.k / self.R))
A:sympy.stats.frv_types.tau->Piecewise((self.R / (self.k * x), cond1), (self.R * log(self.R / self.delta) / self.k, cond2), (S.Zero, True))
sympy.stats.Bernoulli(name,p,succ=1,fail=0)
sympy.stats.BetaBinomial(name,n,alpha,beta)
sympy.stats.Binomial(name,n,p,succ=1,fail=0)
sympy.stats.Coin(name,p=S.Half)
sympy.stats.Die(name,sides=6)
sympy.stats.DiscreteUniform(name,items)
sympy.stats.FiniteDistributionHandmade(SingleFiniteDistribution)
sympy.stats.FiniteRV(name,density,**kwargs)
sympy.stats.Hypergeometric(name,N,m,n)
sympy.stats.IdealSoliton(name,k)
sympy.stats.Rademacher(name)
sympy.stats.RobustSoliton(name,k,delta,c)
sympy.stats.frv_types.Bernoulli(name,p,succ=1,fail=0)
sympy.stats.frv_types.BernoulliDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.BernoulliDistribution.check(p,succ,fail)
sympy.stats.frv_types.BernoulliDistribution.pmf(self,x)
sympy.stats.frv_types.BernoulliDistribution.set(self)
sympy.stats.frv_types.BetaBinomial(name,n,alpha,beta)
sympy.stats.frv_types.BetaBinomialDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.BetaBinomialDistribution.check(n,alpha,beta)
sympy.stats.frv_types.BetaBinomialDistribution.high(self)
sympy.stats.frv_types.BetaBinomialDistribution.is_symbolic(self)
sympy.stats.frv_types.BetaBinomialDistribution.low(self)
sympy.stats.frv_types.BetaBinomialDistribution.pmf(self,k)
sympy.stats.frv_types.BetaBinomialDistribution.set(self)
sympy.stats.frv_types.Binomial(name,n,p,succ=1,fail=0)
sympy.stats.frv_types.BinomialDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.BinomialDistribution.check(n,p,succ,fail)
sympy.stats.frv_types.BinomialDistribution.dict(self)
sympy.stats.frv_types.BinomialDistribution.high(self)
sympy.stats.frv_types.BinomialDistribution.is_symbolic(self)
sympy.stats.frv_types.BinomialDistribution.low(self)
sympy.stats.frv_types.BinomialDistribution.pmf(self,x)
sympy.stats.frv_types.BinomialDistribution.set(self)
sympy.stats.frv_types.Coin(name,p=S.Half)
sympy.stats.frv_types.Die(name,sides=6)
sympy.stats.frv_types.DieDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.DieDistribution.check(sides)
sympy.stats.frv_types.DieDistribution.high(self)
sympy.stats.frv_types.DieDistribution.is_symbolic(self)
sympy.stats.frv_types.DieDistribution.low(self)
sympy.stats.frv_types.DieDistribution.pmf(self,x)
sympy.stats.frv_types.DieDistribution.set(self)
sympy.stats.frv_types.DiscreteUniform(name,items)
sympy.stats.frv_types.DiscreteUniformDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.DiscreteUniformDistribution.check(*args)
sympy.stats.frv_types.DiscreteUniformDistribution.dict(self)
sympy.stats.frv_types.DiscreteUniformDistribution.p(self)
sympy.stats.frv_types.DiscreteUniformDistribution.pmf(self,x)
sympy.stats.frv_types.DiscreteUniformDistribution.set(self)
sympy.stats.frv_types.FiniteDistributionHandmade(SingleFiniteDistribution)
sympy.stats.frv_types.FiniteDistributionHandmade.check(density)
sympy.stats.frv_types.FiniteDistributionHandmade.dict(self)
sympy.stats.frv_types.FiniteDistributionHandmade.pmf(self,x)
sympy.stats.frv_types.FiniteDistributionHandmade.set(self)
sympy.stats.frv_types.FiniteRV(name,density,**kwargs)
sympy.stats.frv_types.Hypergeometric(name,N,m,n)
sympy.stats.frv_types.HypergeometricDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.HypergeometricDistribution.check(n,N,m)
sympy.stats.frv_types.HypergeometricDistribution.high(self)
sympy.stats.frv_types.HypergeometricDistribution.is_symbolic(self)
sympy.stats.frv_types.HypergeometricDistribution.low(self)
sympy.stats.frv_types.HypergeometricDistribution.pmf(self,k)
sympy.stats.frv_types.HypergeometricDistribution.set(self)
sympy.stats.frv_types.IdealSoliton(name,k)
sympy.stats.frv_types.IdealSolitonDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.IdealSolitonDistribution.check(k)
sympy.stats.frv_types.IdealSolitonDistribution.dict(self)
sympy.stats.frv_types.IdealSolitonDistribution.high(self)
sympy.stats.frv_types.IdealSolitonDistribution.low(self)
sympy.stats.frv_types.IdealSolitonDistribution.pmf(self,x)
sympy.stats.frv_types.IdealSolitonDistribution.set(self)
sympy.stats.frv_types.Rademacher(name)
sympy.stats.frv_types.RademacherDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.RademacherDistribution.pmf(self)
sympy.stats.frv_types.RademacherDistribution.set(self)
sympy.stats.frv_types.RobustSoliton(name,k,delta,c)
sympy.stats.frv_types.RobustSolitonDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.RobustSolitonDistribution.R(self)
sympy.stats.frv_types.RobustSolitonDistribution.Z(self)
sympy.stats.frv_types.RobustSolitonDistribution.check(k,delta,c)
sympy.stats.frv_types.RobustSolitonDistribution.high(self)
sympy.stats.frv_types.RobustSolitonDistribution.is_symbolic(self)
sympy.stats.frv_types.RobustSolitonDistribution.low(self)
sympy.stats.frv_types.RobustSolitonDistribution.pmf(self,x)
sympy.stats.frv_types.RobustSolitonDistribution.set(self)
sympy.stats.frv_types.rv(name,cls,*args,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/rv_interface.py----------------------------------------
A:sympy.stats.rv_interface.pdf->density(expr, condition, **kwargs)
A:sympy.stats.rv_interface.base->kwargs.get('b', exp(1))
A:sympy.stats.rv_interface.sigma->std(X, condition, **kwargs)
A:sympy.stats.rv_interface.cdf->pspace(X).compute_cdf(X)
A:sympy.stats.rv_interface.x->Dummy('x')
A:sympy.stats.rv_interface.result->solveset(piecewise_fold(cdf(x) - Rational(1, 2)), x, pspace(X).set)
A:sympy.stats.rv_interface.num->expectation((X - expectation(X, condition, **kwargs)) * (Y - expectation(Y, condition, **kwargs)) * (Z - expectation(Z, condition, **kwargs)), condition, **kwargs)
sympy.stats.cmoment(X,n,condition=None,*,evaluate=True,**kwargs)
sympy.stats.correlation(X,Y,condition=None,**kwargs)
sympy.stats.coskewness(X,Y,Z,condition=None,**kwargs)
sympy.stats.covariance(X,Y,condition=None,**kwargs)
sympy.stats.entropy(expr,condition=None,**kwargs)
sympy.stats.factorial_moment(X,n,condition=None,**kwargs)
sympy.stats.kurtosis(X,condition=None,**kwargs)
sympy.stats.median(X,evaluate=True,**kwargs)
sympy.stats.moment(X,n,c=0,condition=None,*,evaluate=True,**kwargs)
sympy.stats.rv_interface.cmoment(X,n,condition=None,*,evaluate=True,**kwargs)
sympy.stats.rv_interface.correlation(X,Y,condition=None,**kwargs)
sympy.stats.rv_interface.coskewness(X,Y,Z,condition=None,**kwargs)
sympy.stats.rv_interface.covariance(X,Y,condition=None,**kwargs)
sympy.stats.rv_interface.entropy(expr,condition=None,**kwargs)
sympy.stats.rv_interface.factorial_moment(X,n,condition=None,**kwargs)
sympy.stats.rv_interface.kurtosis(X,condition=None,**kwargs)
sympy.stats.rv_interface.median(X,evaluate=True,**kwargs)
sympy.stats.rv_interface.moment(X,n,c=0,condition=None,*,evaluate=True,**kwargs)
sympy.stats.rv_interface.skewness(X,condition=None,**kwargs)
sympy.stats.rv_interface.smoment(X,n,condition=None,**kwargs)
sympy.stats.rv_interface.standard_deviation(X,condition=None,**kwargs)
sympy.stats.rv_interface.variance(X,condition=None,**kwargs)
sympy.stats.skewness(X,condition=None,**kwargs)
sympy.stats.smoment(X,n,condition=None,**kwargs)
sympy.stats.variance(X,condition=None,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_compound_rv.py----------------------------------------
A:sympy.stats.tests.test_compound_rv.X->Normal('X', 2, 4)
A:sympy.stats.tests.test_compound_rv.Y->Normal('Y', X, 6)
A:sympy.stats.tests.test_compound_rv.(k, t, y)->symbols('k t y', positive=True, real=True)
A:sympy.stats.tests.test_compound_rv.G->Gamma('G', k, t)
A:sympy.stats.tests.test_compound_rv.D->PoissonDistribution(3)
A:sympy.stats.tests.test_compound_rv.a->Bernoulli('a', S(1) / 2)
A:sympy.stats.tests.test_compound_rv.b->Bernoulli('b', a)
A:sympy.stats.tests.test_compound_rv.R->Rayleigh('R', 4)
A:sympy.stats.tests.test_compound_rv.Z->Poisson('Z', Y)
A:sympy.stats.tests.test_compound_rv.exprd->Sum(exp(-Y) * Y ** x * Sum(exp(-1) * exp(-X) * X ** Y / (factorial(X) * factorial(Y)), (X, 0, oo)) / factorial(x), (Y, 0, oo))
A:sympy.stats.tests.test_compound_rv.N->NormalDistribution(1, 2)
A:sympy.stats.tests.test_compound_rv.M->MultivariateNormalDistribution([1, 2], [[2, 1], [1, 2]])
A:sympy.stats.tests.test_compound_rv.C->CompoundDistribution(X)
A:sympy.stats.tests.test_compound_rv.B->BernoulliDistribution(0.2, 1, 0)
A:sympy.stats.tests.test_compound_rv.y->symbols('y', negative=False, integer=True)
A:sympy.stats.tests.test_compound_rv.(k, t, z)->symbols('k t z', positive=True, real=True)
A:sympy.stats.tests.test_compound_rv.pspace1->CompoundPSpace('N', N)
A:sympy.stats.tests.test_compound_rv.pspace2->CompoundPSpace('D', D)
A:sympy.stats.tests.test_compound_rv.pspace3->CompoundPSpace('B', B)
sympy.stats.tests.test_compound_rv.test_Compound_Distribution()
sympy.stats.tests.test_compound_rv.test_bernoulli_CompoundDist()
sympy.stats.tests.test_compound_rv.test_compound_pspace()
sympy.stats.tests.test_compound_rv.test_normal_CompoundDist()
sympy.stats.tests.test_compound_rv.test_poisson_CompoundDist()
sympy.stats.tests.test_compound_rv.test_unevaluated_CompoundDist()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_joint_rv.py----------------------------------------
A:sympy.stats.tests.test_joint_rv.m->Normal('x', [0, 0], [[0, 0], [0, 0]])
A:sympy.stats.tests.test_joint_rv.A->MultivariateNormal('A', [1, 2], [[1, 0], [0, 1]])
A:sympy.stats.tests.test_joint_rv.n->MultivariateNormal('x', [0, 0], [[0, 0], [0, 0]])
A:sympy.stats.tests.test_joint_rv.p->Normal('x', [0, 0], [[0, 0], [0, 1]])
A:sympy.stats.tests.test_joint_rv.N->NegativeMultinomial('N', 4, [p1, p2, p3, p4])
A:sympy.stats.tests.test_joint_rv.mu->MatrixSymbol('mu', n, 1)
A:sympy.stats.tests.test_joint_rv.sigma->MatrixSymbol('sigma', n, n)
A:sympy.stats.tests.test_joint_rv.X->JointRV('x', pdf)
A:sympy.stats.tests.test_joint_rv.Sg->MatrixSymbol('Sg', n, n)
A:sympy.stats.tests.test_joint_rv.obs->MatrixSymbol('obs', n, 1)
A:sympy.stats.tests.test_joint_rv.density_X->density(X)
A:sympy.stats.tests.test_joint_rv.eval_a->density_X(obs).subs({Sg: eye(3), mu: Matrix([0, 0, 0]), obs: Matrix([0, 0, 0])}).doit()
A:sympy.stats.tests.test_joint_rv.eval_b->density_X(0, 0, 0).subs({Sg: eye(3), mu: Matrix([0, 0, 0])}).doit()
A:sympy.stats.tests.test_joint_rv.density_X_at_obs->density(X)(obs)
A:sympy.stats.tests.test_joint_rv.expected_density->MatrixElement(exp(S(1) / 2 * (mu.T - obs.T) * Sg ** (-1) * (-mu + obs)) / sqrt((2 * pi) ** n * Determinant(Sg)), 0, 0)
A:sympy.stats.tests.test_joint_rv.t1->MultivariateT('T', [0, 0], [[1, 0], [0, 1]], 2)
A:sympy.stats.tests.test_joint_rv.t2->MultivariateT('t2', [1, 2], [[x, 0], [0, y]], 1)
A:sympy.stats.tests.test_joint_rv.L->Laplace('L', [1, 0], [[1, 0], [0, 1]])
A:sympy.stats.tests.test_joint_rv.L2->MultivariateLaplace('L2', [1, 0], [[1, 0], [0, 1]])
A:sympy.stats.tests.test_joint_rv.L1->Laplace('L1', [1, 2], [[x, 0], [0, y]])
A:sympy.stats.tests.test_joint_rv.ng->NormalGamma('G', 1, 2, 3, 4)
A:sympy.stats.tests.test_joint_rv.omega->Matrix([[1, h, h, h], [h, 1, h, h], [h, h, 1, h], [h, h, h, 1]])
A:sympy.stats.tests.test_joint_rv.(y_1, y_2, y_3, y_4)->symbols('y_1:5', real=True)
A:sympy.stats.tests.test_joint_rv.delta->symbols('d', positive=True)
A:sympy.stats.tests.test_joint_rv.G->GMVLGO('G', omega, v, l, mu)
A:sympy.stats.tests.test_joint_rv.Gd->GMVLG('Gd', delta, v, l, mu)
A:sympy.stats.tests.test_joint_rv.omega_f1->Matrix([[1, h, h]])
A:sympy.stats.tests.test_joint_rv.omega_f2->Matrix([[1, h, h, h], [h, 1, 2, h], [h, h, 1, h], [h, h, h, 1]])
A:sympy.stats.tests.test_joint_rv.omega_f3->Matrix([[6, h, h, h], [h, 1, 2, h], [h, h, 1, h], [h, h, h, 1]])
A:sympy.stats.tests.test_joint_rv.v_f->symbols('v_f', positive=False, real=True)
A:sympy.stats.tests.test_joint_rv.omega_f4->Matrix([[1, h, h, h, h], [h, 1, h, h, h], [h, h, 1, h, h], [h, h, h, 1, h], [h, h, h, h, 1]])
A:sympy.stats.tests.test_joint_rv.omega_f5->Matrix([[1]])
A:sympy.stats.tests.test_joint_rv.(a1, a2)->symbols('a1, a2', positive=True)
A:sympy.stats.tests.test_joint_rv.(a1_f, a2_f)->symbols('a1, a2', positive=False, real=True)
A:sympy.stats.tests.test_joint_rv.mb->MultivariateBeta('B', [a1, a2])
A:sympy.stats.tests.test_joint_rv.mb_c->MultivariateBeta('C', a1, a2)
A:sympy.stats.tests.test_joint_rv.(n, theta, i)->symbols('n theta i', positive=True)
A:sympy.stats.tests.test_joint_rv.theta_f->symbols('t_f', negative=True)
A:sympy.stats.tests.test_joint_rv.a->IndexedBase('a')
A:sympy.stats.tests.test_joint_rv.ed->MultivariateEwens('E', 3, theta)
A:sympy.stats.tests.test_joint_rv.eds->MultivariateEwens('E', n, theta)
A:sympy.stats.tests.test_joint_rv.(j, k)->symbols('j, k')
A:sympy.stats.tests.test_joint_rv.den->Piecewise((factorial(n) * Product(theta ** a[j] * (j + 1) ** (-a[j]) / factorial(a[j]), (j, 0, n - 1)) / RisingFactorial(theta, n), Eq(n, Sum((k + 1) * a[k], (k, 0, n - 1)))), (0, True))
A:sympy.stats.tests.test_joint_rv.(n, x1, x2, x3, x4)->symbols('n, x1, x2, x3, x4', nonnegative=True, integer=True)
A:sympy.stats.tests.test_joint_rv.(p1, p2, p3, p4)->symbols('p1, p2, p3, p4', positive=True)
A:sympy.stats.tests.test_joint_rv.(p1_f, n_f)->symbols('p1_f, n_f', negative=True)
A:sympy.stats.tests.test_joint_rv.M->Multinomial('M', n, [p1, p2, p3, p4])
A:sympy.stats.tests.test_joint_rv.C->NegativeMultinomial('C', 4, 0.1, 0.2, 0.3)
A:sympy.stats.tests.test_joint_rv.(k0, x1, x2, x3, x4)->symbols('k0, x1, x2, x3, x4', nonnegative=True, integer=True)
A:sympy.stats.tests.test_joint_rv.p1_f->symbols('p1_f', negative=True)
A:sympy.stats.tests.test_joint_rv.T->MultivariateT('T', [0, 0], [[1, 0], [0, 1]], 2)
A:sympy.stats.tests.test_joint_rv.got->marginal_distribution(T, T[1])(x)
A:sympy.stats.tests.test_joint_rv.t->MultivariateT('T', [0, 0, 0], [[1, 0, 0], [0, 1, 0], [0, 0, 1]], 3)
A:sympy.stats.tests.test_joint_rv.numpy->import_module('numpy')
A:sympy.stats.tests.test_joint_rv.samps->sample(X, size=size, library='pymc')
A:sympy.stats.tests.test_joint_rv.N_c->NegativeMultinomial('N', 3, 0.1, 0.1, 0.1)
A:sympy.stats.tests.test_joint_rv.scipy->import_module('scipy')
A:sympy.stats.tests.test_joint_rv.samps2->sample(X, size=(2, 2))
A:sympy.stats.tests.test_joint_rv.pymc->import_module('pymc')
A:sympy.stats.tests.test_joint_rv.imported_lib->import_module(library)
A:sympy.stats.tests.test_joint_rv.s0->sample(X, size=10, library=lib, seed=0)
A:sympy.stats.tests.test_joint_rv.s1->sample(m, size=8, library=library)
A:sympy.stats.tests.test_joint_rv.s2->sample(n, size=8, library=library)
A:sympy.stats.tests.test_joint_rv.s3->sample(p, size=8, library=library)
sympy.stats.tests.test_joint_rv.test_GeneralizedMultivariateLogGammaDistribution()
sympy.stats.tests.test_joint_rv.test_JointPSpace_marginal_distribution()
sympy.stats.tests.test_joint_rv.test_JointRV()
sympy.stats.tests.test_joint_rv.test_Multinomial()
sympy.stats.tests.test_joint_rv.test_MultivariateBeta()
sympy.stats.tests.test_joint_rv.test_MultivariateEwens()
sympy.stats.tests.test_joint_rv.test_MultivariateTDist()
sympy.stats.tests.test_joint_rv.test_NegativeMultinomial()
sympy.stats.tests.test_joint_rv.test_Normal()
sympy.stats.tests.test_joint_rv.test_NormalGamma()
sympy.stats.tests.test_joint_rv.test_expectation()
sympy.stats.tests.test_joint_rv.test_issue_21057()
sympy.stats.tests.test_joint_rv.test_issue_21057_pymc()
sympy.stats.tests.test_joint_rv.test_joint_vector_expectation()
sympy.stats.tests.test_joint_rv.test_multivariate_laplace()
sympy.stats.tests.test_joint_rv.test_sample_numpy()
sympy.stats.tests.test_joint_rv.test_sample_pymc()
sympy.stats.tests.test_joint_rv.test_sample_scipy()
sympy.stats.tests.test_joint_rv.test_sample_seed()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_rv.py----------------------------------------
A:sympy.stats.tests.test_rv.Z->RandomMatrixSymbol('Z', 2, 1)
A:sympy.stats.tests.test_rv.XX->Normal('x', 0, 2)
A:sympy.stats.tests.test_rv.X->Die('X', 6)
A:sympy.stats.tests.test_rv.Y->Normal('Y', 0, 1)
A:sympy.stats.tests.test_rv.t->symbols('_t')
A:sympy.stats.tests.test_rv.P->Lambda(t, exp(t ** 2 / 2))
A:sympy.stats.tests.test_rv.Q->Lambda(t, exp(7 * t) / 3 + exp(2 * t) / 3 + exp(t) / 3)
A:sympy.stats.tests.test_rv.R->Lambda(t, exp(2 * exp(t) - 2))
A:sympy.stats.tests.test_rv.scipy->import_module('scipy')
A:sympy.stats.tests.test_rv.iterator->sample_iter(expr)
A:sympy.stats.tests.test_rv.iterator2->sample_iter(expr2)
A:sympy.stats.tests.test_rv.iterator3->sample_iter(expr3)
A:sympy.stats.tests.test_rv.x->symbols('x')
A:sympy.stats.tests.test_rv.YY->Normal('y', 0, 3)
A:sympy.stats.tests.test_rv.D->Die('D', sides=4)
A:sympy.stats.tests.test_rv.G->GaussianUnitaryEnsemble('U', 2)
A:sympy.stats.tests.test_rv.z->Symbol('z', real=True)
A:sympy.stats.tests.test_rv.numpy->import_module('numpy')
A:sympy.stats.tests.test_rv.A->given(X, True)
A:sympy.stats.tests.test_rv.B->Binomial('B', n, p)
A:sympy.stats.tests.test_rv.(x, y, z, l)->symbols('x y z l')
A:sympy.stats.tests.test_rv.(XX, YY)->given(Tuple(X, Y), X + Y > 5)
A:sympy.stats.tests.test_rv.dens->density(X - Y, Eq(X + Y, z))
A:sympy.stats.tests.test_rv.d->Density(X)
A:sympy.stats.tests.test_rv.a->Foo(S(1), S(2))
A:sympy.stats.tests.test_rv.U->P(X > 0, X)
A:sympy.stats.tests.test_rv.V->P(Y < 0, X)
A:sympy.stats.tests.test_rv.W->RandomMatrixSymbol('W', 2, 1)
A:sympy.stats.tests.test_rv.(a, b)->symbols('a, b')
A:sympy.stats.tests.test_rv.RI->RandomIndexedSymbol(Indexed('RI', 3))
A:sympy.stats.tests.test_rv.(n, p)->symbols('n p')
A:sympy.stats.tests.test_rv.k->Dummy('k', integer=True)
A:sympy.stats.tests.test_rv.eq->Sum(Piecewise((-p ** k * (1 - p) ** (-k + n) * log(p ** k * (1 - p) ** (-k + n) * binomial(n, k)) * binomial(n, k), (k >= 0) & (k <= n)), (nan, True)), (k, 0, n))
sympy.stats.tests.test_rv.test_Density()
sympy.stats.tests.test_rv.test_E()
sympy.stats.tests.test_rv.test_H()
sympy.stats.tests.test_rv.test_IndependentProductPSpace()
sympy.stats.tests.test_rv.test_NamedArgsMixin()
sympy.stats.tests.test_rv.test_RandomSymbol()
sympy.stats.tests.test_rv.test_RandomSymbol_diff()
sympy.stats.tests.test_rv.test_Sample()
sympy.stats.tests.test_rv.test_characteristic_function()
sympy.stats.tests.test_rv.test_cmoment_constant()
sympy.stats.tests.test_rv.test_density_constant()
sympy.stats.tests.test_rv.test_dependence()
sympy.stats.tests.test_rv.test_dependent_finite()
sympy.stats.tests.test_rv.test_factorial_moment()
sympy.stats.tests.test_rv.test_given()
sympy.stats.tests.test_rv.test_is_random()
sympy.stats.tests.test_rv.test_issue_10052()
sympy.stats.tests.test_rv.test_issue_11934()
sympy.stats.tests.test_rv.test_issue_12237()
sympy.stats.tests.test_rv.test_issue_12283()
sympy.stats.tests.test_rv.test_issue_20286()
sympy.stats.tests.test_rv.test_issue_6810()
sympy.stats.tests.test_rv.test_issue_8129()
sympy.stats.tests.test_rv.test_median_constant()
sympy.stats.tests.test_rv.test_moment_constant()
sympy.stats.tests.test_rv.test_moment_generating_function()
sympy.stats.tests.test_rv.test_normality()
sympy.stats.tests.test_rv.test_overlap()
sympy.stats.tests.test_rv.test_pspace()
sympy.stats.tests.test_rv.test_random_symbol_no_pspace()
sympy.stats.tests.test_rv.test_random_symbols()
sympy.stats.tests.test_rv.test_real()
sympy.stats.tests.test_rv.test_rs_swap()
sympy.stats.tests.test_rv.test_sample_iter()
sympy.stats.tests.test_rv.test_samplingE()
sympy.stats.tests.test_rv.test_where()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_error_prop.py----------------------------------------
A:sympy.stats.tests.test_error_prop.(x, y, z)->symbols('x y z')
A:sympy.stats.tests.test_error_prop.(phi, t)consts->symbols('phi t')
A:sympy.stats.tests.test_error_prop.a->RandomSymbol(x)
A:sympy.stats.tests.test_error_prop.var_x->Variance(a)
A:sympy.stats.tests.test_error_prop.var_y->Variance(b)
A:sympy.stats.tests.test_error_prop.var_z->Variance(c)
A:sympy.stats.tests.test_error_prop.f->Function('f')(x)
A:sympy.stats.tests.test_error_prop.obs->variance_prop(inp, consts=consts, include_covar=True)
A:sympy.stats.tests.test_error_prop.b->RandomSymbol(y)
A:sympy.stats.tests.test_error_prop.c->RandomSymbol(z)
A:sympy.stats.tests.test_error_prop.covar_x_y->Covariance(a, b)
A:sympy.stats.tests.test_error_prop.covar_x_z->Covariance(a, c)
A:sympy.stats.tests.test_error_prop.covar_y_z->Covariance(b, c)
sympy.stats.tests.test_error_prop.test_variance_prop()
sympy.stats.tests.test_error_prop.test_variance_prop_with_covar()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_matrix_distributions.py----------------------------------------
A:sympy.stats.tests.test_matrix_distributions.M->MatrixGamma('M', 1, 2, [[1, 0], [0, 1]])
A:sympy.stats.tests.test_matrix_distributions.MP->MatrixPSpace('M', M, 2, 2)
A:sympy.stats.tests.test_matrix_distributions.X->MatrixNormal('M', [[5, 6], [3, 4]], [[1, 0], [0, 1]], [[2, 1], [1, 2]])
A:sympy.stats.tests.test_matrix_distributions.num->exp(Trace(Matrix([[-S(1) / 2, 0], [0, -S(1) / 2]]) * X))
A:sympy.stats.tests.test_matrix_distributions.Y->MatrixSymbol('Y', n, p)
A:sympy.stats.tests.test_matrix_distributions.(a, b)->symbols('a b', positive=True)
A:sympy.stats.tests.test_matrix_distributions.d->symbols('d', positive=True, integer=True)
A:sympy.stats.tests.test_matrix_distributions.Z->MatrixSymbol('Z', 2, 2)
A:sympy.stats.tests.test_matrix_distributions.SM->MatrixSymbol('SM', d, d)
A:sympy.stats.tests.test_matrix_distributions.M2->MatrixGamma('M2', a, b, SM)
A:sympy.stats.tests.test_matrix_distributions.M3->MatrixGamma('M3', 2, 3, [[2, 1], [1, 2]])
A:sympy.stats.tests.test_matrix_distributions.k->Dummy('k')
A:sympy.stats.tests.test_matrix_distributions.W->Wishart('W', n, SM)
A:sympy.stats.tests.test_matrix_distributions.term1->exp(-Trace(Matrix([[S(2) / 3, -S(1) / 3], [-S(1) / 3, S(2) / 3]]) * (Matrix([[-5], [-6]]) + X.T) * Matrix([[S(1) / 4]]) * (Matrix([[-5, -6]]) + X)) / 2)
A:sympy.stats.tests.test_matrix_distributions.n->symbols('n', positive=True)
A:sympy.stats.tests.test_matrix_distributions.(d, n)->symbols('d n', positive=True, integer=True)
A:sympy.stats.tests.test_matrix_distributions.SM2->MatrixSymbol('SM2', d, d)
A:sympy.stats.tests.test_matrix_distributions.SM1->MatrixSymbol('SM1', n, n)
A:sympy.stats.tests.test_matrix_distributions.LM->MatrixSymbol('LM', n, d)
A:sympy.stats.tests.test_matrix_distributions.v->symbols('v', positive=True)
A:sympy.stats.tests.test_matrix_distributions.Omega->MatrixSymbol('Omega', p, p)
A:sympy.stats.tests.test_matrix_distributions.Sigma->MatrixSymbol('Sigma', n, n)
A:sympy.stats.tests.test_matrix_distributions.Location->MatrixSymbol('Location', n, p)
A:sympy.stats.tests.test_matrix_distributions.scipy->import_module('scipy')
A:sympy.stats.tests.test_matrix_distributions.samps->sample(X, size=size, library='pymc')
A:sympy.stats.tests.test_matrix_distributions.pymc->import_module('pymc')
A:sympy.stats.tests.test_matrix_distributions.imported_lib->import_module(lib)
A:sympy.stats.tests.test_matrix_distributions.s0->sample(X, size=10, library=lib, seed=0)
A:sympy.stats.tests.test_matrix_distributions.s1->sample(X, size=10, library=lib, seed=0)
A:sympy.stats.tests.test_matrix_distributions.s2->sample(X, size=10, library=lib, seed=1)
sympy.stats.tests.test_matrix_distributions.test_MatrixGamma()
sympy.stats.tests.test_matrix_distributions.test_MatrixNormal()
sympy.stats.tests.test_matrix_distributions.test_MatrixPSpace()
sympy.stats.tests.test_matrix_distributions.test_MatrixStudentT()
sympy.stats.tests.test_matrix_distributions.test_Wishart()
sympy.stats.tests.test_matrix_distributions.test_sample_pymc()
sympy.stats.tests.test_matrix_distributions.test_sample_scipy()
sympy.stats.tests.test_matrix_distributions.test_sample_seed()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_random_matrix.py----------------------------------------
A:sympy.stats.tests.test_random_matrix.G->GSE('U', 2)
A:sympy.stats.tests.test_random_matrix.H->RandomMatrixSymbol('H', 2, 2, pspace=h_pspace)
A:sympy.stats.tests.test_random_matrix.l->IndexedBase('l')
A:sympy.stats.tests.test_random_matrix.s->Dummy('s')
A:sympy.stats.tests.test_random_matrix._H->MatrixSymbol('_H', 3, 3)
A:sympy.stats.tests.test_random_matrix.CU->CUE('U', 3)
A:sympy.stats.tests.test_random_matrix.t->IndexedBase('t')
A:sympy.stats.tests.test_random_matrix.CO->COE('U', 3)
A:sympy.stats.tests.test_random_matrix.CS->CSE('U', 3)
A:sympy.stats.tests.test_random_matrix.A->Matrix([[Normal('A00', 0, 1), Normal('A01', 1, 1)], [Beta('A10', 1, 1), Beta('A11', 1, 1)]])
A:sympy.stats.tests.test_random_matrix.G1->GUE('U', 2)
A:sympy.stats.tests.test_random_matrix.G2->GUE('U', 2).xreplace({2: 2})
A:sympy.stats.tests.test_random_matrix.X->MatrixSymbol('X', 2, 2)
A:sympy.stats.tests.test_random_matrix.h_pspace->RandomMatrixPSpace('P', model=density(G))
A:sympy.stats.tests.test_random_matrix.H2->RandomMatrixSymbol('H', 2, 2, pspace=None)
sympy.stats.tests.test_random_matrix.test_CircularOrthogonalEnsemble()
sympy.stats.tests.test_random_matrix.test_CircularSymplecticEnsemble()
sympy.stats.tests.test_random_matrix.test_CircularUnitaryEnsemble()
sympy.stats.tests.test_random_matrix.test_GaussianEnsemble()
sympy.stats.tests.test_random_matrix.test_GaussianOrthogonalEnsemble()
sympy.stats.tests.test_random_matrix.test_GaussianSymplecticEnsemble()
sympy.stats.tests.test_random_matrix.test_GaussianUnitaryEnsemble()
sympy.stats.tests.test_random_matrix.test_JointEigenDistribution()
sympy.stats.tests.test_random_matrix.test_issue_19841()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_finite_rv.py----------------------------------------
A:sympy.stats.tests.test_finite_rv.(a, b, c, t)->symbols('a b c t')
A:sympy.stats.tests.test_finite_rv.X->Die('X', 6)
A:sympy.stats.tests.test_finite_rv.Y->P(Eq(B, b))
A:sympy.stats.tests.test_finite_rv.(a, b, t, p)->symbols('a b t p')
A:sympy.stats.tests.test_finite_rv.d->density(x)
A:sympy.stats.tests.test_finite_rv.D->Die('D', 4)
A:sympy.stats.tests.test_finite_rv.(n, k)->symbols('n, k', positive=True)
A:sympy.stats.tests.test_finite_rv.k->Symbol('k', integer=True, positive=True)
A:sympy.stats.tests.test_finite_rv.ki->Dummy('ki')
A:sympy.stats.tests.test_finite_rv.cumuf->cdf(D)(k)
A:sympy.stats.tests.test_finite_rv.t->Symbol('t')
A:sympy.stats.tests.test_finite_rv.cf->characteristic_function(D)(t)
A:sympy.stats.tests.test_finite_rv.mgf->moment_generating_function(D)(t)
A:sympy.stats.tests.test_finite_rv.Z->E(D > n)
A:sympy.stats.tests.test_finite_rv.(p, a, b, t)->symbols('p a b t')
A:sympy.stats.tests.test_finite_rv.z->Symbol('z')
A:sympy.stats.tests.test_finite_rv.p->Symbol('p', positive=True)
A:sympy.stats.tests.test_finite_rv.(H, T)->symbols('H T')
A:sympy.stats.tests.test_finite_rv.F->FiniteRV('F', {1: S.Half, 2: Rational(1, 4), 3: Rational(1, 4)}, check=True)
A:sympy.stats.tests.test_finite_rv.nvals->range(1, 5)
A:sympy.stats.tests.test_finite_rv.n->symbols('n')
A:sympy.stats.tests.test_finite_rv.B->Bernoulli('B', Rational(1, 4))
A:sympy.stats.tests.test_finite_rv.(n, a, b)->symbols('a b n')
A:sympy.stats.tests.test_finite_rv.(a, b)->symbols('a b', positive=True)
A:sympy.stats.tests.test_finite_rv.(N, m, n)->symbols('N, m, n')
A:sympy.stats.tests.test_finite_rv.H->Hypergeometric('H', N, m, n)
A:sympy.stats.tests.test_finite_rv.expec->E(H > 2)
A:sympy.stats.tests.test_finite_rv.f->Function('f')
A:sympy.stats.tests.test_finite_rv.x->Bernoulli('x', p)
A:sympy.stats.tests.test_finite_rv.sol->IdealSoliton('sol', k)
A:sympy.stats.tests.test_finite_rv.delta->Symbol('delta', positive=True)
A:sympy.stats.tests.test_finite_rv.c->Symbol('c', positive=True)
A:sympy.stats.tests.test_finite_rv.robSol->RobustSoliton('robSol', k, delta, c)
A:sympy.stats.tests.test_finite_rv.space->pspace(X)
A:sympy.stats.tests.test_finite_rv.(b, n)->symbols('b, n')
sympy.stats.tests.test_finite_rv.BayesTest(A,B)
sympy.stats.tests.test_finite_rv.test_DieDistribution()
sympy.stats.tests.test_finite_rv.test_FinitePSpace()
sympy.stats.tests.test_finite_rv.test_FiniteRV()
sympy.stats.tests.test_finite_rv.test_bernoulli()
sympy.stats.tests.test_finite_rv.test_beta_binomial()
sympy.stats.tests.test_finite_rv.test_binomial_numeric()
sympy.stats.tests.test_finite_rv.test_binomial_quantile()
sympy.stats.tests.test_finite_rv.test_binomial_symbolic()
sympy.stats.tests.test_finite_rv.test_binomial_verify_parameters()
sympy.stats.tests.test_finite_rv.test_cdf()
sympy.stats.tests.test_finite_rv.test_coins()
sympy.stats.tests.test_finite_rv.test_density_call()
sympy.stats.tests.test_finite_rv.test_dice()
sympy.stats.tests.test_finite_rv.test_discreteuniform()
sympy.stats.tests.test_finite_rv.test_domains()
sympy.stats.tests.test_finite_rv.test_given()
sympy.stats.tests.test_finite_rv.test_hypergeometric_numeric()
sympy.stats.tests.test_finite_rv.test_hypergeometric_symbolic()
sympy.stats.tests.test_finite_rv.test_ideal_soliton()
sympy.stats.tests.test_finite_rv.test_rademacher()
sympy.stats.tests.test_finite_rv.test_robust_soliton()
sympy.stats.tests.test_finite_rv.test_symbolic_conditions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_stochastic_process.py----------------------------------------
A:sympy.stats.tests.test_stochastic_process.X->GammaProcess('X', 1, 2)
A:sympy.stats.tests.test_stochastic_process.t->symbols('t', positive=True, integer=True)
A:sympy.stats.tests.test_stochastic_process.nz->Symbol('n', integer=True)
A:sympy.stats.tests.test_stochastic_process.TZ->MatrixSymbol('M', nz, nz)
A:sympy.stats.tests.test_stochastic_process.SZ->Range(nz)
A:sympy.stats.tests.test_stochastic_process.YZ->DiscreteMarkovChain('Y', SZ, TZ)
A:sympy.stats.tests.test_stochastic_process.(sym, rainy, cloudy, sunny)->symbols('a Rainy Cloudy Sunny', real=True)
A:sympy.stats.tests.test_stochastic_process.Y->PoissonProcess('Y', 6)
A:sympy.stats.tests.test_stochastic_process.T->Matrix([[S.Half, Rational(1, 4), Rational(1, 4)], [Rational(1, 3), 0, Rational(2, 3)], [S.Half, S.Half, 0]])
A:sympy.stats.tests.test_stochastic_process.TS->MatrixSymbol('T', 3, 3)
A:sympy.stats.tests.test_stochastic_process.YS->DiscreteMarkovChain('Y', ['One', 'Two', 3], TS)
A:sympy.stats.tests.test_stochastic_process.TO->Matrix([[0.25, 0.75, 0], [0, 0.25, 0.75], [0.75, 0, 0.25]])
A:sympy.stats.tests.test_stochastic_process.TSO->MatrixSymbol('T', 4, 4)
A:sympy.stats.tests.test_stochastic_process.TO1->Matrix([[Rational(1, 4), Rational(3, 4), 0], [Rational(1, 3), Rational(1, 3), Rational(1, 3)], [0, Rational(1, 4), Rational(3, 4)]])
A:sympy.stats.tests.test_stochastic_process.TO2->Matrix([[S.One, 0, 0], [Rational(1, 3), Rational(1, 3), Rational(1, 3)], [0, Rational(1, 4), Rational(3, 4)]])
A:sympy.stats.tests.test_stochastic_process.TO3->Matrix([[Rational(1, 4), Rational(3, 4), 0], [Rational(1, 3), Rational(1, 3), Rational(1, 3)], [0, Rational(1, 4), Rational(3, 4)]])
A:sympy.stats.tests.test_stochastic_process.Y2->DiscreteMarkovChain('Y', trans_probs=TO2)
A:sympy.stats.tests.test_stochastic_process.Y3->DiscreteMarkovChain('Y', trans_probs=TO3)
A:sympy.stats.tests.test_stochastic_process.TO4->Matrix([[Rational(1, 5), Rational(2, 5), Rational(2, 5)], [Rational(1, 10), S.Half, Rational(2, 5)], [Rational(3, 5), Rational(3, 10), Rational(1, 10)]])
A:sympy.stats.tests.test_stochastic_process.Y4->DiscreteMarkovChain('Y', trans_probs=TO4)
A:sympy.stats.tests.test_stochastic_process.w->ImmutableMatrix([[Rational(11, 39), Rational(16, 39), Rational(4, 13)]])
A:sympy.stats.tests.test_stochastic_process.TS1->MatrixSymbol('G', 3, 3)
A:sympy.stats.tests.test_stochastic_process.Y5->DiscreteMarkovChain('Y', trans_probs=TS1)
A:sympy.stats.tests.test_stochastic_process.TO6->Matrix([[S.One, 0, 0, 0, 0], [S.Half, 0, S.Half, 0, 0], [0, S.Half, 0, S.Half, 0], [0, 0, S.Half, 0, S.Half], [0, 0, 0, 0, 1]])
A:sympy.stats.tests.test_stochastic_process.Y6->DiscreteMarkovChain('Y', trans_probs=TO6)
A:sympy.stats.tests.test_stochastic_process.TO7->Matrix([[Rational(1, 2), Rational(1, 4), Rational(1, 4)], [Rational(1, 2), 0, Rational(1, 2)], [Rational(1, 4), Rational(1, 4), Rational(1, 2)]])
A:sympy.stats.tests.test_stochastic_process.Y7->DiscreteMarkovChain('Y', trans_probs=TO7)
A:sympy.stats.tests.test_stochastic_process.tuples->DiscreteMarkovChain('Y', [1, 2, 3], TO2).communication_classes()
A:sympy.stats.tests.test_stochastic_process.(classes, recurrence, periods)->list(zip(*tuples))
A:sympy.stats.tests.test_stochastic_process.Y8->DiscreteMarkovChain('Y', trans_probs=TO8)
A:sympy.stats.tests.test_stochastic_process.Y9->DiscreteMarkovChain('Y', trans_probs=TO9)
A:sympy.stats.tests.test_stochastic_process.DW->DiscreteMarkovChain('DW', [0, 1, 2, 3, 4], T)
A:sympy.stats.tests.test_stochastic_process.(states, A, B, C)->DiscreteMarkovChain('DW', [0, 1, 2, 3, 4], T).decompose()
A:sympy.stats.tests.test_stochastic_process.(states, new_matrix)->DiscreteMarkovChain('DW', [0, 1, 2, 3, 4], T).canonical_form()
A:sympy.stats.tests.test_stochastic_process.Y10->DiscreteMarkovChain('Y', [1, 2, 3], TO2)
A:sympy.stats.tests.test_stochastic_process.(a, b, c, d)->symbols('a b c d')
A:sympy.stats.tests.test_stochastic_process.query->P(Eq(C(a), b), Eq(C(c), d))
A:sympy.stats.tests.test_stochastic_process.query_gt->P(Gt(C(a), b), Eq(C(c), d))
A:sympy.stats.tests.test_stochastic_process.query_le->P(Le(C(a), b), Eq(C(c), d))
A:sympy.stats.tests.test_stochastic_process.query_ge->P(Ge(C(a), b), Eq(C(c), d))
A:sympy.stats.tests.test_stochastic_process.query_lt->P(Lt(C(a), b), Eq(C(c), d))
A:sympy.stats.tests.test_stochastic_process.numpy->import_module('numpy')
A:sympy.stats.tests.test_stochastic_process.Z->DiscreteMarkovChain('Z', ['1', 1, 0], T)
A:sympy.stats.tests.test_stochastic_process.W->DiscreteMarkovChain('W', [1, pi, oo], T)
A:sympy.stats.tests.test_stochastic_process.T1->Matrix([[S(-2), S(2), S.Zero], [S.Zero, S.NegativeOne, S.One], [Rational(3, 2), Rational(3, 2), S(-3)]])
A:sympy.stats.tests.test_stochastic_process.C1->ContinuousMarkovChain('C', [0, 1, 2], T1)
A:sympy.stats.tests.test_stochastic_process.T2->Matrix([[-S.One, S.One, S.Zero], [S.One, -S.One, S.Zero], [S.Zero, S.One, -S.One]])
A:sympy.stats.tests.test_stochastic_process.C2->ContinuousMarkovChain('C', [0, 1, 2], T2)
A:sympy.stats.tests.test_stochastic_process.CS1->ContinuousMarkovChain('C', [0, 1, 2], TS1)
A:sympy.stats.tests.test_stochastic_process.C3->ContinuousMarkovChain('C', [Symbol('0'), Symbol('1'), Symbol('2')], T2)
A:sympy.stats.tests.test_stochastic_process.G->Matrix([[-S(1), Rational(1, 10), Rational(9, 10)], [Rational(2, 5), -S(1), Rational(3, 5)], [Rational(1, 2), Rational(1, 2), -S(1)]])
A:sympy.stats.tests.test_stochastic_process.C->ContinuousMarkovChain('C', state_space=[0, 1, 2], gen_mat=G)
A:sympy.stats.tests.test_stochastic_process.B->BernoulliProcess('B', p=0.6, success=1, failure=0)
A:sympy.stats.tests.test_stochastic_process.(H, T)->symbols('H,T')
A:sympy.stats.tests.test_stochastic_process.(t, x)->symbols('t, x', positive=True, integer=True)
A:sympy.stats.tests.test_stochastic_process.expr->Sum(B[t], (t, 0, 4))
A:sympy.stats.tests.test_stochastic_process.expr2->Sum(B[t], (t, 1, 3))
A:sympy.stats.tests.test_stochastic_process.expr3->Sum(B[t] ** 2, (t, 1, 3))
A:sympy.stats.tests.test_stochastic_process.(t, d, x, y)->symbols('t d x y', positive=True)
A:sympy.stats.tests.test_stochastic_process.res->P(Eq(X(t), 1), Contains(t, Interval.Lopen(3, 4)))
A:sympy.stats.tests.test_stochastic_process.res1->P(Eq(N(3), N(5)))
A:sympy.stats.tests.test_stochastic_process.res2->P(N(3) > N(1))
A:sympy.stats.tests.test_stochastic_process.(N, M)->DiscreteMarkovChain('Z', ['1', 1, 0], T).split(4, 5)
A:sympy.stats.tests.test_stochastic_process.res3->P(N(3) <= N(1))
A:sympy.stats.tests.test_stochastic_process.(t, d, x, y, g, l)->symbols('t d x y g l', positive=True)
sympy.stats.tests.test_stochastic_process.test_BernoulliProcess()
sympy.stats.tests.test_stochastic_process.test_ContinuousMarkovChain()
sympy.stats.tests.test_stochastic_process.test_DiscreteMarkovChain()
sympy.stats.tests.test_stochastic_process.test_GammaProcess_numeric()
sympy.stats.tests.test_stochastic_process.test_GammaProcess_symbolic()
sympy.stats.tests.test_stochastic_process.test_PoissonProcess()
sympy.stats.tests.test_stochastic_process.test_WienerProcess()
sympy.stats.tests.test_stochastic_process.test_sample_stochastic_process()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_symbolic_probability.py----------------------------------------
A:sympy.stats.tests.test_symbolic_probability.X->Normal('X', mu, sigma)
A:sympy.stats.tests.test_symbolic_probability.Y->Normal('Y', 3, 4)
A:sympy.stats.tests.test_symbolic_probability.Z->Poisson('Z', 4)
A:sympy.stats.tests.test_symbolic_probability.W->Poisson('W', 3)
A:sympy.stats.tests.test_symbolic_probability.x->symbols('x')
A:sympy.stats.tests.test_symbolic_probability.(y, w, z)->symbols('y, w, z')
A:sympy.stats.tests.test_symbolic_probability.(x, y, w, z)->symbols('x, y, w, z')
A:sympy.stats.tests.test_symbolic_probability.(w, x, z)->symbols('W, x, z')
A:sympy.stats.tests.test_symbolic_probability.px->Probability(Eq(X, x))
A:sympy.stats.tests.test_symbolic_probability.pz->Probability(Eq(Z, z))
A:sympy.stats.tests.test_symbolic_probability.mu->symbols('mu', real=True)
A:sympy.stats.tests.test_symbolic_probability.sigma->symbols('sigma', positive=True)
A:sympy.stats.tests.test_symbolic_probability.M->Moment(2, 5)
A:sympy.stats.tests.test_symbolic_probability.k->Dummy('k')
A:sympy.stats.tests.test_symbolic_probability.expri->Integral(sqrt(2) * (k - Integral(sqrt(2) * k * exp(-(k - mu) ** 2 / (2 * sigma ** 2)) / (2 * sqrt(pi) * sigma), (k, -oo, oo))) ** 6 * exp(-(k - mu) ** 2 / (2 * sigma ** 2)) / (2 * sqrt(pi) * sigma), (k, -oo, oo))
A:sympy.stats.tests.test_symbolic_probability.CM->Moment(5, 5)
sympy.stats.tests.test_symbolic_probability.test_literal_probability()
sympy.stats.tests.test_symbolic_probability.test_probability_rewrite()
sympy.stats.tests.test_symbolic_probability.test_symbolic_CentralMoment()
sympy.stats.tests.test_symbolic_probability.test_symbolic_Moment()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_symbolic_multivariate.py----------------------------------------
A:sympy.stats.tests.test_symbolic_multivariate.(j, k)->symbols('j,k')
A:sympy.stats.tests.test_symbolic_multivariate.A->MatrixSymbol('A', k, k)
A:sympy.stats.tests.test_symbolic_multivariate.B->MatrixSymbol('B', k, k)
A:sympy.stats.tests.test_symbolic_multivariate.C->MatrixSymbol('C', k, k)
A:sympy.stats.tests.test_symbolic_multivariate.D->MatrixSymbol('D', k, k)
A:sympy.stats.tests.test_symbolic_multivariate.a->MatrixSymbol('a', k, 1)
A:sympy.stats.tests.test_symbolic_multivariate.b->MatrixSymbol('b', k, 1)
A:sympy.stats.tests.test_symbolic_multivariate.A2->MatrixSymbol('A2', 2, 2)
A:sympy.stats.tests.test_symbolic_multivariate.B2->MatrixSymbol('B2', 2, 2)
A:sympy.stats.tests.test_symbolic_multivariate.X->RandomMatrixSymbol('X', k, 1)
A:sympy.stats.tests.test_symbolic_multivariate.Y->RandomMatrixSymbol('Y', k, 1)
A:sympy.stats.tests.test_symbolic_multivariate.Z->RandomMatrixSymbol('Z', k, 1)
A:sympy.stats.tests.test_symbolic_multivariate.W->RandomMatrixSymbol('W', k, 1)
A:sympy.stats.tests.test_symbolic_multivariate.R->RandomMatrixSymbol('R', k, k)
A:sympy.stats.tests.test_symbolic_multivariate.X2->RandomMatrixSymbol('X2', 2, 1)
A:sympy.stats.tests.test_symbolic_multivariate.normal->Normal('normal', 0, 1)
A:sympy.stats.tests.test_symbolic_multivariate.m1->Matrix([[1, j * Normal('normal2', 2, 1)], [normal, 0]])
A:sympy.stats.tests.test_symbolic_multivariate.expr->Covariance(A * X + B * Y + a, C.T * Z + D.T * W + b)
A:sympy.stats.tests.test_symbolic_multivariate.x1->Matrix([[Normal('N11', 11, 1), Normal('N12', 12, 1)], [Normal('N21', 21, 1), Normal('N22', 22, 1)]])
A:sympy.stats.tests.test_symbolic_multivariate.x2->Matrix([[Normal('M11', 1, 1), Normal('M12', 2, 1)], [Normal('M21', 3, 1), Normal('M22', 4, 1)]])
sympy.stats.tests.test_symbolic_multivariate.test_multivariate_crosscovariance()
sympy.stats.tests.test_symbolic_multivariate.test_multivariate_expectation()
sympy.stats.tests.test_symbolic_multivariate.test_multivariate_variance()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_continuous_rv.py----------------------------------------
A:sympy.stats.tests.test_continuous_rv.(x, y, z)->map(Symbol, 'xyz')
A:sympy.stats.tests.test_continuous_rv.mu->symbols('mu', real=True)
A:sympy.stats.tests.test_continuous_rv.sigma->Symbol('sigma', positive=True)
A:sympy.stats.tests.test_continuous_rv.X->ChiSquared('X', 4)
A:sympy.stats.tests.test_continuous_rv.pdf->density(dist)
A:sympy.stats.tests.test_continuous_rv.x->Symbol('x')
A:sympy.stats.tests.test_continuous_rv.ans->quantile(Y)(x)
A:sympy.stats.tests.test_continuous_rv.Y->Uniform('Y', -1, +1)
A:sympy.stats.tests.test_continuous_rv.z->Dummy('z')
A:sympy.stats.tests.test_continuous_rv.p->density(X)(z)
A:sympy.stats.tests.test_continuous_rv.(mu1, mu2)->symbols('mu1 mu2', real=True)
A:sympy.stats.tests.test_continuous_rv.(s1, s2)->symbols('sigma1 sigma2', positive=True)
A:sympy.stats.tests.test_continuous_rv.rate->Symbol('lambda', positive=True)
A:sympy.stats.tests.test_continuous_rv.Z->ContinuousRV(z, exp(-z), set=Interval(0, oo))
A:sympy.stats.tests.test_continuous_rv.(a, b, c)->symbols('a b c')
A:sympy.stats.tests.test_continuous_rv.d->Symbol('d', real=True)
A:sympy.stats.tests.test_continuous_rv.f->lambdify([x, t], pdf(x) * exp(I * x * t), 'mpmath')
A:sympy.stats.tests.test_continuous_rv.cf->characteristic_function(L)
A:sympy.stats.tests.test_continuous_rv.L->Levy('x', 0, 1)
A:sympy.stats.tests.test_continuous_rv.t->Symbol('t')
A:sympy.stats.tests.test_continuous_rv.mgf->moment_generating_function(WignerSemicircle('x', 1))(t)
A:sympy.stats.tests.test_continuous_rv.(_x, k, theta)->symbols('x k theta', positive=True)
A:sympy.stats.tests.test_continuous_rv.a->SingleContinuousPSpace(x, NormalDistribution(2, 4))
A:sympy.stats.tests.test_continuous_rv.b->SingleContinuousPSpace(x, NormalDistribution(1, 9))
A:sympy.stats.tests.test_continuous_rv.alpha->Symbol('alpha', positive=True)
A:sympy.stats.tests.test_continuous_rv.beta->Symbol('beta', positive=True)
A:sympy.stats.tests.test_continuous_rv.(a, b)->symbols('a b')
A:sympy.stats.tests.test_continuous_rv.B->Beta('x', a, b)
A:sympy.stats.tests.test_continuous_rv.c->cdf(X)
A:sympy.stats.tests.test_continuous_rv._k->Dummy('k')
A:sympy.stats.tests.test_continuous_rv.dens->ContinuousDistributionHandmade(dens, set=Interval(0, 3))
A:sympy.stats.tests.test_continuous_rv.res->Sum(z ** (_k + a - 1) * (c / 2) ** _k * (1 - z) ** (b - 1) * exp(-c / 2) / (beta(_k + a, b) * factorial(_k)), (_k, 0, oo))
A:sympy.stats.tests.test_continuous_rv.betap->Symbol('beta', nonpositive=True)
A:sympy.stats.tests.test_continuous_rv.(L, H)->symbols('L, H', positive=True)
A:sympy.stats.tests.test_continuous_rv.x0->Symbol('x0', real=True)
A:sympy.stats.tests.test_continuous_rv.gamma->Symbol('gamma', nonpositive=True)
A:sympy.stats.tests.test_continuous_rv.x1->Symbol('x1', real=False)
A:sympy.stats.tests.test_continuous_rv.k->Dummy('k')
A:sympy.stats.tests.test_continuous_rv.l->Symbol('l', real=True)
A:sympy.stats.tests.test_continuous_rv.(m, z)->symbols('m, z')
A:sympy.stats.tests.test_continuous_rv.(s, l)->symbols('s, l', positive=True)
A:sympy.stats.tests.test_continuous_rv.GaussianCDF1->cdf(Normal('x', 0, v))(u)
A:sympy.stats.tests.test_continuous_rv.GaussianCDF2->cdf(Normal('x', v ** 2, v))(u)
A:sympy.stats.tests.test_continuous_rv._z->Dummy('_z')
A:sympy.stats.tests.test_continuous_rv.expected1->Integral(sqrt(2) * exp(-(_z - 2) ** 2 / 32) / (8 * sqrt(pi)), (_z, -oo, 1))
A:sympy.stats.tests.test_continuous_rv.expected2->Integral(sqrt(2) * exp(-(_z - 2) ** 2 / 32) / (8 * sqrt(pi)), (_z, 1, oo))
A:sympy.stats.tests.test_continuous_rv.d1->Symbol('d1', positive=True)
A:sympy.stats.tests.test_continuous_rv.d2->Symbol('d2', positive=True)
A:sympy.stats.tests.test_continuous_rv.s->Symbol('s', positive=True)
A:sympy.stats.tests.test_continuous_rv.m->Symbol('m', real=True)
A:sympy.stats.tests.test_continuous_rv.theta->Symbol('theta', positive=True)
A:sympy.stats.tests.test_continuous_rv.(k, theta)->symbols('k theta', positive=True)
A:sympy.stats.tests.test_continuous_rv.eta->Symbol('eta', positive=True)
A:sympy.stats.tests.test_continuous_rv.y->Symbol('y')
A:sympy.stats.tests.test_continuous_rv.(a, b, z, p)->symbols('a b z p', positive=True)
A:sympy.stats.tests.test_continuous_rv.mean->Symbol('mu', real=True)
A:sympy.stats.tests.test_continuous_rv.std->Symbol('sigma', positive=True)
A:sympy.stats.tests.test_continuous_rv.(a, l)->symbols('a, l', positive=True)
A:sympy.stats.tests.test_continuous_rv.M->Moyal('M', mu, sigma)
A:sympy.stats.tests.test_continuous_rv.omega->Symbol('omega', positive=True)
A:sympy.stats.tests.test_continuous_rv.(a, b, z)->symbols('a b z')
A:sympy.stats.tests.test_continuous_rv.(xm, beta)->symbols('xm beta', positive=True)
A:sympy.stats.tests.test_continuous_rv.nu->Symbol('nu', positive=True)
A:sympy.stats.tests.test_continuous_rv.w->Symbol('w', positive=True)
A:sympy.stats.tests.test_continuous_rv.n->symbols('n', integer=True, positive=True)
A:sympy.stats.tests.test_continuous_rv.R->Symbol('R', positive=True)
A:sympy.stats.tests.test_continuous_rv.(p, q)->symbols('p q', positive=True)
A:sympy.stats.tests.test_continuous_rv.(m, n)->symbols('m n', positive=False, real=True)
A:sympy.stats.tests.test_continuous_rv.expr1->Integral(sqrt(2) * k * exp(-k ** 2 / 2) / (2 * sqrt(pi)), (k, -oo, oo))
A:sympy.stats.tests.test_continuous_rv.expr2->Integral(sqrt(2) * exp(-k ** 2 / 2) / (2 * sqrt(pi)), (k, 0, oo))
A:sympy.stats.tests.test_continuous_rv.T->Normal('T', 30, 3)
A:sympy.stats.tests.test_continuous_rv.nd->NormalDistribution(0, 1)
A:sympy.stats.tests.test_continuous_rv.expected3->Integral(sqrt(2) * exp(-(_z - 1) ** 2 / 162) / (18 * sqrt(pi)), (_z, 6, oo))
A:sympy.stats.tests.test_continuous_rv.expected4->Integral(sqrt(2) * exp(-(_z - 1) ** 2 / 162) / (18 * sqrt(pi)), (_z, -oo, 6))
A:sympy.stats.tests.test_continuous_rv.meas->Normal('T', mu, 1)
A:sympy.stats.tests.test_continuous_rv.G->Gamma('g', 1, 2)
A:sympy.stats.tests.test_continuous_rv.(sigma, xm, alpha)->symbols('sigma xm alpha', positive=True)
A:sympy.stats.tests.test_continuous_rv.compdiff->simplify(compdiff.rewrite(erfc))
A:sympy.stats.tests.test_continuous_rv.cf1->lambdify([t], characteristic_function(dist)(t), 'mpmath')
A:sympy.stats.tests.test_continuous_rv.n1->cf1(test_point)
A:sympy.stats.tests.test_continuous_rv.n2->cf2(test_point)
A:sympy.stats.tests.test_continuous_rv.US->UniformSum('US', 5)
A:sympy.stats.tests.test_continuous_rv.pdf01->density(US)(x).subs(floor(x), 0).doit()
A:sympy.stats.tests.test_continuous_rv.cdf01->cdf(US, evaluate=False)(x).subs(floor(x), 0).doit()
A:sympy.stats.tests.test_continuous_rv.E->Exponential('E', 1)
A:sympy.stats.tests.test_continuous_rv.N->SingleContinuousDomain(x, Interval(0, 1))
A:sympy.stats.tests.test_continuous_rv.space->SingleContinuousPSpace(z, dens)
sympy.stats.tests.test_continuous_rv.test_BoundedPareto()
sympy.stats.tests.test_continuous_rv.test_ContinuousDistributionHandmade()
sympy.stats.tests.test_continuous_rv.test_ContinuousDomain()
sympy.stats.tests.test_continuous_rv.test_ContinuousRV()
sympy.stats.tests.test_continuous_rv.test_FiniteSet_prob()
sympy.stats.tests.test_continuous_rv.test_Lomax()
sympy.stats.tests.test_continuous_rv.test_Moyal()
sympy.stats.tests.test_continuous_rv.test_NormalDistribution()
sympy.stats.tests.test_continuous_rv.test_Or()
sympy.stats.tests.test_continuous_rv.test_PowerFunction()
sympy.stats.tests.test_continuous_rv.test_arcsin()
sympy.stats.tests.test_continuous_rv.test_benini()
sympy.stats.tests.test_continuous_rv.test_beta()
sympy.stats.tests.test_continuous_rv.test_beta_noncentral()
sympy.stats.tests.test_continuous_rv.test_betaprime()
sympy.stats.tests.test_continuous_rv.test_cauchy()
sympy.stats.tests.test_continuous_rv.test_cdf()
sympy.stats.tests.test_continuous_rv.test_characteristic_function()
sympy.stats.tests.test_continuous_rv.test_chi()
sympy.stats.tests.test_continuous_rv.test_chi_noncentral()
sympy.stats.tests.test_continuous_rv.test_chi_squared()
sympy.stats.tests.test_continuous_rv.test_conditional_1d()
sympy.stats.tests.test_continuous_rv.test_conditional_eq()
sympy.stats.tests.test_continuous_rv.test_conjugate_priors()
sympy.stats.tests.test_continuous_rv.test_dagum()
sympy.stats.tests.test_continuous_rv.test_density_unevaluated()
sympy.stats.tests.test_continuous_rv.test_difficult_univariate()
sympy.stats.tests.test_continuous_rv.test_erlang()
sympy.stats.tests.test_continuous_rv.test_exgaussian()
sympy.stats.tests.test_continuous_rv.test_exponential()
sympy.stats.tests.test_continuous_rv.test_exponential_power()
sympy.stats.tests.test_continuous_rv.test_f_distribution()
sympy.stats.tests.test_continuous_rv.test_fisher_z()
sympy.stats.tests.test_continuous_rv.test_frechet()
sympy.stats.tests.test_continuous_rv.test_gamma()
sympy.stats.tests.test_continuous_rv.test_gamma_inverse()
sympy.stats.tests.test_continuous_rv.test_gaussian_inverse()
sympy.stats.tests.test_continuous_rv.test_gompertz()
sympy.stats.tests.test_continuous_rv.test_gumbel()
sympy.stats.tests.test_continuous_rv.test_input_value_assertions()
sympy.stats.tests.test_continuous_rv.test_issue_10003()
sympy.stats.tests.test_continuous_rv.test_issue_13324()
sympy.stats.tests.test_continuous_rv.test_issue_16318()
sympy.stats.tests.test_continuous_rv.test_issue_20756()
sympy.stats.tests.test_continuous_rv.test_kumaraswamy()
sympy.stats.tests.test_continuous_rv.test_laplace()
sympy.stats.tests.test_continuous_rv.test_levy()
sympy.stats.tests.test_continuous_rv.test_logcauchy()
sympy.stats.tests.test_continuous_rv.test_logistic()
sympy.stats.tests.test_continuous_rv.test_logitnormal()
sympy.stats.tests.test_continuous_rv.test_loglogistic()
sympy.stats.tests.test_continuous_rv.test_lognormal()
sympy.stats.tests.test_continuous_rv.test_long_precomputed_cdf()
sympy.stats.tests.test_continuous_rv.test_maxwell()
sympy.stats.tests.test_continuous_rv.test_moment_generating_function()
sympy.stats.tests.test_continuous_rv.test_multiple_normal()
sympy.stats.tests.test_continuous_rv.test_nakagami()
sympy.stats.tests.test_continuous_rv.test_pareto()
sympy.stats.tests.test_continuous_rv.test_pareto_numeric()
sympy.stats.tests.test_continuous_rv.test_precomputed_cdf()
sympy.stats.tests.test_continuous_rv.test_precomputed_characteristic_functions()
sympy.stats.tests.test_continuous_rv.test_prob_neq()
sympy.stats.tests.test_continuous_rv.test_probability_unevaluated()
sympy.stats.tests.test_continuous_rv.test_quadratic_u()
sympy.stats.tests.test_continuous_rv.test_raised_cosine()
sympy.stats.tests.test_continuous_rv.test_random_parameters()
sympy.stats.tests.test_continuous_rv.test_random_parameters_given()
sympy.stats.tests.test_continuous_rv.test_rayleigh()
sympy.stats.tests.test_continuous_rv.test_reciprocal()
sympy.stats.tests.test_continuous_rv.test_shiftedgompertz()
sympy.stats.tests.test_continuous_rv.test_single_normal()
sympy.stats.tests.test_continuous_rv.test_studentt()
sympy.stats.tests.test_continuous_rv.test_symbolic()
sympy.stats.tests.test_continuous_rv.test_trapezoidal()
sympy.stats.tests.test_continuous_rv.test_triangular()
sympy.stats.tests.test_continuous_rv.test_unevaluated()
sympy.stats.tests.test_continuous_rv.test_uniform()
sympy.stats.tests.test_continuous_rv.test_uniform_P()
sympy.stats.tests.test_continuous_rv.test_uniformsum()
sympy.stats.tests.test_continuous_rv.test_union()
sympy.stats.tests.test_continuous_rv.test_von_mises()
sympy.stats.tests.test_continuous_rv.test_weibull()
sympy.stats.tests.test_continuous_rv.test_weibull_numeric()
sympy.stats.tests.test_continuous_rv.test_wignersemicircle()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_discrete_rv.py----------------------------------------
A:sympy.stats.tests.test_discrete_rv.x->S('x')
A:sympy.stats.tests.test_discrete_rv.p->PoissonDistribution(l)
A:sympy.stats.tests.test_discrete_rv.a->Symbol('a')
A:sympy.stats.tests.test_discrete_rv.z->Symbol('z')
A:sympy.stats.tests.test_discrete_rv.d->GeometricDistribution(p)
A:sympy.stats.tests.test_discrete_rv.G->Geometric('e', x)
A:sympy.stats.tests.test_discrete_rv.X->Geometric('X', Rational(2, 3))
A:sympy.stats.tests.test_discrete_rv.Y->Poisson('Y', 3)
A:sympy.stats.tests.test_discrete_rv.a1->Symbol('a1', positive=True)
A:sympy.stats.tests.test_discrete_rv.a2->Symbol('a2', positive=True)
A:sympy.stats.tests.test_discrete_rv.H->Hermite('H', a1=5, a2=4)
A:sympy.stats.tests.test_discrete_rv.mu1->Symbol('mu1')
A:sympy.stats.tests.test_discrete_rv.mu2->Symbol('mu2')
A:sympy.stats.tests.test_discrete_rv.rho->S(3)
A:sympy.stats.tests.test_discrete_rv.s->S(5)
A:sympy.stats.tests.test_discrete_rv.D->DiscreteRV(x, pdf, set=S.Naturals, check=True)
A:sympy.stats.tests.test_discrete_rv.pdf->density(dist)
A:sympy.stats.tests.test_discrete_rv.t->S('t')
A:sympy.stats.tests.test_discrete_rv.cf1->lambdify([t], characteristic_function(dist)(t), 'mpmath')
A:sympy.stats.tests.test_discrete_rv.f->lambdify([x, t], pdf(x) * exp(I * x * t), 'mpmath')
A:sympy.stats.tests.test_discrete_rv.n1->cf1(test_point)
A:sympy.stats.tests.test_discrete_rv.n2->cf2(test_point)
A:sympy.stats.tests.test_discrete_rv.geometric_mgf->moment_generating_function(Geometric('g', S.Half))(t)
A:sympy.stats.tests.test_discrete_rv.logarithmic_mgf->moment_generating_function(Logarithmic('l', S.Half))(t)
A:sympy.stats.tests.test_discrete_rv.negative_binomial_mgf->moment_generating_function(NegativeBinomial('n', 5, Rational(1, 3)))(t)
A:sympy.stats.tests.test_discrete_rv.poisson_mgf->moment_generating_function(Poisson('p', 5))(t)
A:sympy.stats.tests.test_discrete_rv.skellam_mgf->moment_generating_function(Skellam('s', 1, 1))(t)
A:sympy.stats.tests.test_discrete_rv.yule_simon_mgf->moment_generating_function(YuleSimon('y', 3))(t)
A:sympy.stats.tests.test_discrete_rv.zeta_mgf->moment_generating_function(Zeta('z', 5))(t)
A:sympy.stats.tests.test_discrete_rv.X1->Geometric('X1', S.Half)
A:sympy.stats.tests.test_discrete_rv.X2->Geometric('X2', Rational(1, 3))
sympy.stats.tests.test_discrete_rv.test_DiscreteRV()
sympy.stats.tests.test_discrete_rv.test_FlorySchulz()
sympy.stats.tests.test_discrete_rv.test_GeometricDistribution()
sympy.stats.tests.test_discrete_rv.test_Hermite()
sympy.stats.tests.test_discrete_rv.test_Logarithmic()
sympy.stats.tests.test_discrete_rv.test_Or()
sympy.stats.tests.test_discrete_rv.test_Poisson()
sympy.stats.tests.test_discrete_rv.test_PoissonDistribution()
sympy.stats.tests.test_discrete_rv.test_conditional()
sympy.stats.tests.test_discrete_rv.test_discrete_probability()
sympy.stats.tests.test_discrete_rv.test_moment_generating_functions()
sympy.stats.tests.test_discrete_rv.test_negative_binomial()
sympy.stats.tests.test_discrete_rv.test_precomputed_characteristic_functions()
sympy.stats.tests.test_discrete_rv.test_product_spaces()
sympy.stats.tests.test_discrete_rv.test_skellam()
sympy.stats.tests.test_discrete_rv.test_where()
sympy.stats.tests.test_discrete_rv.test_yule_simon()
sympy.stats.tests.test_discrete_rv.test_zeta()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/tests/test_mix.py----------------------------------------
A:sympy.stats.tests.test_mix.x->Symbol('x')
A:sympy.stats.tests.test_mix.l->Symbol('l', positive=True)
A:sympy.stats.tests.test_mix.rate->Beta(l, 2, 3)
A:sympy.stats.tests.test_mix.X->Poisson(x, rate)
A:sympy.stats.tests.test_mix.N1->Normal('N1', 0, 1)
A:sympy.stats.tests.test_mix.N2->Normal('N2', N1, 2)
A:sympy.stats.tests.test_mix.(a1, p1, p2)->symbols('a1 p1 p2', positive=True)
A:sympy.stats.tests.test_mix.C->Multinomial('C', 2, p1, p2)
A:sympy.stats.tests.test_mix.B->MultivariateBeta('B', a1, C[0])
A:sympy.stats.tests.test_mix.MGR->MarginalDistribution(B, (C[0],))
A:sympy.stats.tests.test_mix.mgrc->Mul(Symbol('B'), Piecewise(ExprCondPair(Mul(Integer(2), Pow(Symbol('p1', positive=True), Indexed(IndexedBase(Symbol('C')), Integer(0))), Pow(Symbol('p2', positive=True), Indexed(IndexedBase(Symbol('C')), Integer(1))), Pow(factorial(Indexed(IndexedBase(Symbol('C')), Integer(0))), Integer(-1)), Pow(factorial(Indexed(IndexedBase(Symbol('C')), Integer(1))), Integer(-1))), Eq(Add(Indexed(IndexedBase(Symbol('C')), Integer(0)), Indexed(IndexedBase(Symbol('C')), Integer(1))), Integer(2))), ExprCondPair(Integer(0), True)), Pow(gamma(Symbol('a1', positive=True)), Integer(-1)), gamma(Add(Symbol('a1', positive=True), Indexed(IndexedBase(Symbol('C')), Integer(0)))), Pow(gamma(Indexed(IndexedBase(Symbol('C')), Integer(0))), Integer(-1)), Pow(Indexed(IndexedBase(Symbol('B')), Integer(0)), Add(Symbol('a1', positive=True), Integer(-1))), Pow(Indexed(IndexedBase(Symbol('B')), Integer(1)), Add(Indexed(IndexedBase(Symbol('C')), Integer(0)), Integer(-1))))
A:sympy.stats.tests.test_mix.Y->Poisson('Y', 1)
A:sympy.stats.tests.test_mix.Z->Poisson('Z', Y)
A:sympy.stats.tests.test_mix.k->Dummy('k')
A:sympy.stats.tests.test_mix.expr1->Integral(Sum(exp(-1) * Integral(exp(-k) * DiracDelta(k - 2), (k, 0, oo)) / factorial(k), (k, 0, oo)), (k, -oo, 0))
A:sympy.stats.tests.test_mix.expr2->Integral(Sum(exp(-1) * Integral(exp(-k) * DiracDelta(k - 2), (k, 0, oo)) / factorial(k), (k, 0, oo)), (k, 0, oo))
sympy.stats.tests.test_mix.test_MarginalDistribution()
sympy.stats.tests.test_mix.test_compound_distribution()
sympy.stats.tests.test_mix.test_density()
sympy.stats.tests.test_mix.test_mix_expression()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/sampling/sample_numpy.py----------------------------------------
A:sympy.stats.sampling.sample_numpy.numpy->import_module('numpy')
sympy.stats.sampling.sample_numpy._(dist:BetaDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:BinomialDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:ChiSquaredDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:ExponentialDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:FDistributionDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:GammaDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:GeometricDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:GumbelDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:HypergeometricDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:LaplaceDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:LogNormalDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:LogisticDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:NormalDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:ParetoDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:PoissonDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:RayleighDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:TriangularDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:UniformDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy._(dist:ZetaDistribution,size,rand_state)
sympy.stats.sampling.sample_numpy.do_sample_numpy(dist,size,rand_state)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/sampling/sample_pymc.py----------------------------------------
A:sympy.stats.sampling.sample_pymc.pymc->import_module('pymc3')
sympy.stats.sampling.sample_pymc._(dist:BernoulliDistribution)
sympy.stats.sampling.sample_pymc._(dist:BetaDistribution)
sympy.stats.sampling.sample_pymc._(dist:BinomialDistribution)
sympy.stats.sampling.sample_pymc._(dist:CauchyDistribution)
sympy.stats.sampling.sample_pymc._(dist:ChiSquaredDistribution)
sympy.stats.sampling.sample_pymc._(dist:ExponentialDistribution)
sympy.stats.sampling.sample_pymc._(dist:GammaDistribution)
sympy.stats.sampling.sample_pymc._(dist:GaussianInverseDistribution)
sympy.stats.sampling.sample_pymc._(dist:GeometricDistribution)
sympy.stats.sampling.sample_pymc._(dist:LogNormalDistribution)
sympy.stats.sampling.sample_pymc._(dist:NegativeBinomialDistribution)
sympy.stats.sampling.sample_pymc._(dist:NormalDistribution)
sympy.stats.sampling.sample_pymc._(dist:ParetoDistribution)
sympy.stats.sampling.sample_pymc._(dist:PoissonDistribution)
sympy.stats.sampling.sample_pymc._(dist:UniformDistribution)
sympy.stats.sampling.sample_pymc.do_sample_pymc(dist)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/sampling/sample_scipy.py----------------------------------------
A:sympy.stats.sampling.sample_scipy.scipy->import_module('scipy', import_kwargs={'fromlist': ['stats']})
A:sympy.stats.sampling.sample_scipy.z->Dummy('z')
A:sympy.stats.sampling.sample_scipy.handmade_pdf->lambdify(z, dist.pdf(z), ['numpy', 'scipy'])
A:sympy.stats.sampling.sample_scipy.scipy_rv->rv_discrete(name='scipy_rv', values=(x, y))
A:sympy.stats.sampling.sample_scipy.handmade_pmf->lambdify(z, dist.pdf(z), ['numpy', 'scipy'])
sympy.stats.sampling.sample_scipy._(dist:BetaDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:CauchyDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:ChiSquaredDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:DiscreteDistributionHandmade,size,seed)
sympy.stats.sampling.sample_scipy._(dist:ExponentialDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:GammaDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:GeometricDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:LogNormalDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:LogarithmicDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:NegativeBinomialDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:NormalDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:ParetoDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:PoissonDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:SingleContinuousDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:SingleFiniteDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:SkellamDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:StudentTDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:UniformDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:YuleSimonDistribution,size,seed)
sympy.stats.sampling.sample_scipy._(dist:ZetaDistribution,size,seed)
sympy.stats.sampling.sample_scipy.do_sample_scipy(dist,size,seed)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/sampling/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/sampling/tests/test_sample_finite_rv.py----------------------------------------
A:sympy.stats.sampling.tests.test_sample_finite_rv.X->Die('X', 6)
A:sympy.stats.sampling.tests.test_sample_finite_rv.scipy->import_module('scipy')
A:sympy.stats.sampling.tests.test_sample_finite_rv.numpy->import_module('numpy')
A:sympy.stats.sampling.tests.test_sample_finite_rv.samps->sample(X, size=size, library='pymc')
A:sympy.stats.sampling.tests.test_sample_finite_rv.samps2->sample(X, size=(2, 2))
A:sympy.stats.sampling.tests.test_sample_finite_rv.pymc->import_module('pymc')
A:sympy.stats.sampling.tests.test_sample_finite_rv.F->FiniteRV('F', {1: S.Half, 2: Rational(1, 4), 3: Rational(1, 4)})
A:sympy.stats.sampling.tests.test_sample_finite_rv.imported_lib->import_module(lib)
A:sympy.stats.sampling.tests.test_sample_finite_rv.s0->sample(F, size=size, library=lib, seed=0)
A:sympy.stats.sampling.tests.test_sample_finite_rv.s1->sample(F, size=size, library=lib, seed=0)
A:sympy.stats.sampling.tests.test_sample_finite_rv.s2->sample(F, size=size, library=lib, seed=1)
sympy.stats.sampling.tests.test_sample_finite_rv.test_given_sample()
sympy.stats.sampling.tests.test_sample_finite_rv.test_sample_numpy()
sympy.stats.sampling.tests.test_sample_finite_rv.test_sample_pymc()
sympy.stats.sampling.tests.test_sample_finite_rv.test_sample_scipy()
sympy.stats.sampling.tests.test_sample_finite_rv.test_sample_seed()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/sampling/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/sampling/tests/test_sample_continuous_rv.py----------------------------------------
A:sympy.stats.sampling.tests.test_sample_continuous_rv.numpy->import_module('numpy')
A:sympy.stats.sampling.tests.test_sample_continuous_rv.samps->sample(var, size=size)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.scipy->import_module('scipy')
A:sympy.stats.sampling.tests.test_sample_continuous_rv.samps2->sample(X, size=(2, 2), library='scipy')
A:sympy.stats.sampling.tests.test_sample_continuous_rv.pymc->import_module('pymc')
A:sympy.stats.sampling.tests.test_sample_continuous_rv.X->GaussianInverse('x', 1, 1)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.N->Normal('X', 0, 1)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.L->LogNormal('L', 0, 1)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.E->Exponential('Ex', 1)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.P->Pareto('P', 1, 3)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.W->Weibull('W', 1, 1)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.U->Uniform('U', 0, 1)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.B->Beta('B', 2, 5)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.G->Gamma('G', 1, 3)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.z->Symbol('z')
A:sympy.stats.sampling.tests.test_sample_continuous_rv.Z->ContinuousRV(z, exp(-z), set=Interval(0, oo))
A:sympy.stats.sampling.tests.test_sample_continuous_rv.imported_lib->import_module(lib)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.s0->sample(Z, size=10, library=lib, seed=0)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.s1->sample(Z, size=10, library=lib, seed=0)
A:sympy.stats.sampling.tests.test_sample_continuous_rv.s2->sample(Z, size=10, library=lib, seed=1)
sympy.stats.sampling.tests.test_sample_continuous_rv.test_lognormal_sampling()
sympy.stats.sampling.tests.test_sample_continuous_rv.test_prefab_sampling()
sympy.stats.sampling.tests.test_sample_continuous_rv.test_sample_continuous()
sympy.stats.sampling.tests.test_sample_continuous_rv.test_sample_numpy()
sympy.stats.sampling.tests.test_sample_continuous_rv.test_sample_pymc()
sympy.stats.sampling.tests.test_sample_continuous_rv.test_sample_scipy()
sympy.stats.sampling.tests.test_sample_continuous_rv.test_sampling_gamma_inverse()
sympy.stats.sampling.tests.test_sample_continuous_rv.test_sampling_gaussian_inverse()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/stats/sampling/tests/test_sample_discrete_rv.py----------------------------------------
A:sympy.stats.sampling.tests.test_sample_discrete_rv.numpy->import_module('numpy')
A:sympy.stats.sampling.tests.test_sample_discrete_rv.samps->sample(X, size=2)
A:sympy.stats.sampling.tests.test_sample_discrete_rv.x->Symbol('x', integer=True, positive=True)
A:sympy.stats.sampling.tests.test_sample_discrete_rv.scipy->import_module('scipy')
A:sympy.stats.sampling.tests.test_sample_discrete_rv.samps2->sample(X, size=(2, 2), library='scipy')
A:sympy.stats.sampling.tests.test_sample_discrete_rv.pymc->import_module('pymc')
A:sympy.stats.sampling.tests.test_sample_discrete_rv.X->Geometric('X', S.Half)
A:sympy.stats.sampling.tests.test_sample_discrete_rv.imported_lib->import_module(lib)
A:sympy.stats.sampling.tests.test_sample_discrete_rv.s0->sample(X, size=10, library=lib, seed=0)
A:sympy.stats.sampling.tests.test_sample_discrete_rv.s1->sample(X, size=10, library=lib, seed=0)
A:sympy.stats.sampling.tests.test_sample_discrete_rv.s2->sample(X, size=10, library=lib, seed=1)
sympy.stats.sampling.tests.test_sample_discrete_rv.test_sample_discrete()
sympy.stats.sampling.tests.test_sample_discrete_rv.test_sample_numpy()
sympy.stats.sampling.tests.test_sample_discrete_rv.test_sample_pymc()
sympy.stats.sampling.tests.test_sample_discrete_rv.test_sample_scipy()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/algebras/quaternion.py----------------------------------------
A:sympy.algebras.quaternion.numerical->all((i.is_number and i.is_real is True for i in elements))
A:sympy.algebras.quaternion.intrinsic->seq.isupper()
A:sympy.algebras.quaternion.extrinsic->_is_extrinsic(seq)
A:sympy.algebras.quaternion.(i, j, k)->seq.lower()
A:sympy.algebras.quaternion.(a, b, c, d)->map(sympify, (a, b, c, d))
A:sympy.algebras.quaternion.obj->sympy.core.expr.Expr.__new__(cls, a, b, c, d)
A:sympy.algebras.quaternion.norm->norm.subs(*args).subs(*args)
A:sympy.algebras.quaternion.length->len(elements)
A:sympy.algebras.quaternion.qi->cls.from_axis_angle(ei, angles[0])
A:sympy.algebras.quaternion.qj->cls.from_axis_angle(ej, angles[1])
A:sympy.algebras.quaternion.qk->cls.from_axis_angle(ek, angles[2])
A:sympy.algebras.quaternion.angles[1]->asin((c * c + d * d - a * a - b * b) / n2)
A:sympy.algebras.quaternion.angles[0]->atan2(b * c + a * d, a * c - b * d)
A:sympy.algebras.quaternion.angles[2]->atan2(b * c - a * d, a * c + b * d)
A:sympy.algebras.quaternion.s->sqrt(1 - q.a * q.a)
A:sympy.algebras.quaternion.a->ln(q_norm)
A:sympy.algebras.quaternion.q2->Quaternion.from_axis_angle(v, p * angle)
A:sympy.algebras.quaternion.self._norm->sqrt(trigsimp(q.a ** 2 + q.b ** 2 + q.c ** 2 + q.d ** 2))
A:sympy.algebras.quaternion.p->sympify(p)
A:sympy.algebras.quaternion.vector_norm->sqrt(q.b ** 2 + q.c ** 2 + q.d ** 2)
A:sympy.algebras.quaternion.q_norm->q.normalize().norm()
A:sympy.algebras.quaternion.nprec->prec_to_dps(prec)
A:sympy.algebras.quaternion.(v, angle)->q.normalize().to_axis_angle()
A:sympy.algebras.quaternion.q->q.normalize().normalize()
A:sympy.algebras.quaternion.angle->trigsimp(2 * acos(q.a))
A:sympy.algebras.quaternion.x->trigsimp(q.b / s)
A:sympy.algebras.quaternion.y->trigsimp(q.c / s)
A:sympy.algebras.quaternion.z->trigsimp(q.d / s)
A:sympy.algebras.quaternion.axis->self.vector_part().normalize()
A:sympy.algebras.quaternion.M->Matrix([[q1.b, q1.c, q1.d], [q2.b, q2.c, q2.d], [q3.b, q3.c, q3.d]]).det()
sympy.Quaternion(cls,a=0,b=0,c=0,d=0,real_field=True,norm=None)
sympy.algebras.quaternion.Quaternion(cls,a=0,b=0,c=0,d=0,real_field=True,norm=None)
sympy.algebras.quaternion.Quaternion.__add__(self,other)
sympy.algebras.quaternion.Quaternion.__mul__(self,other)
sympy.algebras.quaternion.Quaternion.__neg__(self)
sympy.algebras.quaternion.Quaternion.__pow__(self,p)
sympy.algebras.quaternion.Quaternion.__radd__(self,other)
sympy.algebras.quaternion.Quaternion.__rmul__(self,other)
sympy.algebras.quaternion.Quaternion.__rtruediv__(self,other)
sympy.algebras.quaternion.Quaternion.__sub__(self,other)
sympy.algebras.quaternion.Quaternion.__truediv__(self,other)
sympy.algebras.quaternion.Quaternion._eval_Integral(self,*args)
sympy.algebras.quaternion.Quaternion._eval_conjugate(self)
sympy.algebras.quaternion.Quaternion._eval_evalf(self,prec)
sympy.algebras.quaternion.Quaternion._eval_subs(self,*args)
sympy.algebras.quaternion.Quaternion._generic_mul(q1,q2)
sympy.algebras.quaternion.Quaternion._ln(self)
sympy.algebras.quaternion.Quaternion.a(self)
sympy.algebras.quaternion.Quaternion.add(self,other)
sympy.algebras.quaternion.Quaternion.angle(self)
sympy.algebras.quaternion.Quaternion.arc_coplanar(self,other)
sympy.algebras.quaternion.Quaternion.axis(self)
sympy.algebras.quaternion.Quaternion.b(self)
sympy.algebras.quaternion.Quaternion.c(self)
sympy.algebras.quaternion.Quaternion.d(self)
sympy.algebras.quaternion.Quaternion.diff(self,*symbols,**kwargs)
sympy.algebras.quaternion.Quaternion.exp(self)
sympy.algebras.quaternion.Quaternion.from_Matrix(cls,elements)
sympy.algebras.quaternion.Quaternion.from_axis_angle(cls,vector,angle)
sympy.algebras.quaternion.Quaternion.from_euler(cls,angles,seq)
sympy.algebras.quaternion.Quaternion.from_rotation_matrix(cls,M)
sympy.algebras.quaternion.Quaternion.index_vector(self)
sympy.algebras.quaternion.Quaternion.integrate(self,*args)
sympy.algebras.quaternion.Quaternion.inverse(self)
sympy.algebras.quaternion.Quaternion.is_pure(self)
sympy.algebras.quaternion.Quaternion.is_zero_quaternion(self)
sympy.algebras.quaternion.Quaternion.mensor(self)
sympy.algebras.quaternion.Quaternion.mul(self,other)
sympy.algebras.quaternion.Quaternion.norm(self)
sympy.algebras.quaternion.Quaternion.normalize(self)
sympy.algebras.quaternion.Quaternion.orthogonal(self,other)
sympy.algebras.quaternion.Quaternion.parallel(self,other)
sympy.algebras.quaternion.Quaternion.pow(self,p)
sympy.algebras.quaternion.Quaternion.pow_cos_sin(self,p)
sympy.algebras.quaternion.Quaternion.product_matrix_left(self)
sympy.algebras.quaternion.Quaternion.product_matrix_right(self)
sympy.algebras.quaternion.Quaternion.real_field(self)
sympy.algebras.quaternion.Quaternion.rotate_point(pin,r)
sympy.algebras.quaternion.Quaternion.scalar_part(self)
sympy.algebras.quaternion.Quaternion.set_norm(self,norm)
sympy.algebras.quaternion.Quaternion.to_Matrix(self,vector_only=False)
sympy.algebras.quaternion.Quaternion.to_axis_angle(self)
sympy.algebras.quaternion.Quaternion.to_euler(self,seq,angle_addition=True,avoid_square_root=False)
sympy.algebras.quaternion.Quaternion.to_rotation_matrix(self,v=None,homogeneous=True)
sympy.algebras.quaternion.Quaternion.vector_coplanar(cls,q1,q2,q3)
sympy.algebras.quaternion.Quaternion.vector_part(self)
sympy.algebras.quaternion._check_norm(elements,norm)
sympy.algebras.quaternion._is_extrinsic(seq)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/algebras/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/algebras/tests/test_quaternion.py----------------------------------------
A:sympy.algebras.tests.test_quaternion.(w, x, y, z)->symbols('w:z')
A:sympy.algebras.tests.test_quaternion.phi->symbols('phi')
A:sympy.algebras.tests.test_quaternion.q->Quaternion(*elements)
A:sympy.algebras.tests.test_quaternion.q2->Quaternion(1, 2, 3, 5)
A:sympy.algebras.tests.test_quaternion.M->Matrix([[cos(phi), -sin(phi), 0], [sin(phi), cos(phi), 0], [0, 0, 1]])
A:sympy.algebras.tests.test_quaternion.q3->Quaternion(1, 1, 1, y)
A:sympy.algebras.tests.test_quaternion.nc->Symbol('nc', commutative=False)
A:sympy.algebras.tests.test_quaternion.q1->Quaternion(3 + 4 * I, 2 + 5 * I, 0, 7 + 8 * I, real_field=False)
A:sympy.algebras.tests.test_quaternion.q_full->sympy.algebras.quaternion.Quaternion.from_Matrix(q.to_Matrix())
A:sympy.algebras.tests.test_quaternion.q_vect->sympy.algebras.quaternion.Quaternion.from_Matrix(q.to_Matrix(True))
A:sympy.algebras.tests.test_quaternion.R2->simplify(q.to_rotation_matrix(homogeneous=False) * q.norm() ** 2)
A:sympy.algebras.tests.test_quaternion.result->sympy.algebras.quaternion.Quaternion.from_axis_angle((1, 2, 3), asin(4))
A:sympy.algebras.tests.test_quaternion.a->symbols('a', complex=True)
A:sympy.algebras.tests.test_quaternion.b->symbols('b', real=True)
A:sympy.algebras.tests.test_quaternion.c->symbols('c', commutative=False)
A:sympy.algebras.tests.test_quaternion.q0->Quaternion(0, 0, 0, 0)
A:sympy.algebras.tests.test_quaternion.n->Symbol('n', integer=True)
A:sympy.algebras.tests.test_quaternion.theta->symbols('theta', real=True)
A:sympy.algebras.tests.test_quaternion.z->symbols('z', complex=True)
A:sympy.algebras.tests.test_quaternion.z_quat->Quaternion(re(z), im(z), 0, 0)
A:sympy.algebras.tests.test_quaternion.(axis, angle)->Quaternion(*elements).to_axis_angle()
A:sympy.algebras.tests.test_quaternion.q_normalized->Quaternion(*elements).normalize()
A:sympy.algebras.tests.test_quaternion.euler_from_q->Quaternion(*elements).to_euler(seq)
A:sympy.algebras.tests.test_quaternion.q_back->simplify(Quaternion.from_euler(euler_from_q, seq))
A:sympy.algebras.tests.test_quaternion.angles1->Matrix(q.to_euler(seq, True, True))
A:sympy.algebras.tests.test_quaternion.angles2->Matrix(q.to_euler(seq, False, False))
A:sympy.algebras.tests.test_quaternion.angle_errors->simplify(angles1 - angles2).evalf()
A:sympy.algebras.tests.test_quaternion.seq->''.join(seq_tuple)
sympy.algebras.tests.test_quaternion.test_issue_16318()
sympy.algebras.tests.test_quaternion.test_product_matrices()
sympy.algebras.tests.test_quaternion.test_quaternion_axis_angle()
sympy.algebras.tests.test_quaternion.test_quaternion_axis_angle_simplification()
sympy.algebras.tests.test_quaternion.test_quaternion_complex_real_addition()
sympy.algebras.tests.test_quaternion.test_quaternion_construction()
sympy.algebras.tests.test_quaternion.test_quaternion_construction_norm()
sympy.algebras.tests.test_quaternion.test_quaternion_conversions()
sympy.algebras.tests.test_quaternion.test_quaternion_evalf()
sympy.algebras.tests.test_quaternion.test_quaternion_functions()
sympy.algebras.tests.test_quaternion.test_quaternion_multiplication()
sympy.algebras.tests.test_quaternion.test_quaternion_rotation_iss1593()
sympy.algebras.tests.test_quaternion.test_rotation_matrix_homogeneous()
sympy.algebras.tests.test_quaternion.test_to_and_from_Matrix()
sympy.algebras.tests.test_quaternion.test_to_euler()
sympy.algebras.tests.test_quaternion.test_to_euler_iss24504()
sympy.algebras.tests.test_quaternion.test_to_euler_numerical_singilarities()
sympy.algebras.tests.test_quaternion.test_to_euler_options()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/algebras/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sandbox/indexed_integrals.py----------------------------------------
A:sympy.sandbox.indexed_integrals.(repl, limits)->IndexedIntegral._indexed_process_limits(limits)
A:sympy.sandbox.indexed_integrals.function->function.xreplace(repl).xreplace(repl)
A:sympy.sandbox.indexed_integrals.obj->sympy.integrals.integrals.Integral.__new__(cls, function, *limits, **assumptions)
A:sympy.sandbox.indexed_integrals.res->super().doit()
A:sympy.sandbox.indexed_integrals.r->Dummy(str(v))
sympy.sandbox.indexed_integrals.IndexedIntegral(cls,function,*limits,**assumptions)
sympy.sandbox.indexed_integrals.IndexedIntegral._indexed_process_limits(limits)
sympy.sandbox.indexed_integrals.IndexedIntegral.doit(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sandbox/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sandbox/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/sandbox/tests/test_indexed_integrals.py----------------------------------------
A:sympy.sandbox.tests.test_indexed_integrals.A->IndexedBase('A')
A:sympy.sandbox.tests.test_indexed_integrals.(i, j)->symbols('i j', integer=True)
A:sympy.sandbox.tests.test_indexed_integrals.(a1, a2)->symbols('a1:3', cls=Idx)
sympy.sandbox.tests.test_indexed_integrals.test_indexed_integrals()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/benchmarks/bench_symbench.py----------------------------------------
A:sympy.benchmarks.bench_symbench.v->set(x)
A:sympy.benchmarks.bench_symbench.L->uniq(L)
A:sympy.benchmarks.bench_symbench.a->sympify(a)
A:sympy.benchmarks.bench_symbench.b->sympify(b)
A:sympy.benchmarks.bench_symbench.n->sympify(n)
A:sympy.benchmarks.bench_symbench.x->f.atoms(Symbol).pop()
A:sympy.benchmarks.bench_symbench.t->clock()
sympy.benchmarks.bench_symbench._bench_R9()
sympy.benchmarks.bench_symbench.bench_R1()
sympy.benchmarks.bench_symbench.bench_R10()
sympy.benchmarks.bench_symbench.bench_R11()
sympy.benchmarks.bench_symbench.bench_R2()
sympy.benchmarks.bench_symbench.bench_R3()
sympy.benchmarks.bench_symbench.bench_R4()
sympy.benchmarks.bench_symbench.bench_R5()
sympy.benchmarks.bench_symbench.bench_R6()
sympy.benchmarks.bench_symbench.bench_R7()
sympy.benchmarks.bench_symbench.bench_R8()
sympy.benchmarks.bench_symbench.bench_S1()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/benchmarks/bench_discrete_log.py----------------------------------------
A:sympy.benchmarks.bench_discrete_log.t->time()
A:sympy.benchmarks.bench_discrete_log.l->f(n, pow(g, p - 1, n), g, p)
sympy.benchmarks.bench_discrete_log.bench_discrete_log(data_set,algo=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/benchmarks/bench_meijerint.py----------------------------------------
A:sympy.benchmarks.bench_meijerint.(nu, beta, rho)->symbols('nu beta rho')
A:sympy.benchmarks.bench_meijerint.(apos, bpos, cpos, dpos, posk, p)->symbols('a b c d k p', positive=True)
A:sympy.benchmarks.bench_meijerint.k->Symbol('k', real=True)
A:sympy.benchmarks.bench_meijerint.negk->Symbol('k', negative=True)
A:sympy.benchmarks.bench_meijerint.(mu1, mu2)->symbols('mu1 mu2', real=True, nonzero=True, finite=True)
A:sympy.benchmarks.bench_meijerint.(sigma1, sigma2)->symbols('sigma1 sigma2', real=True, nonzero=True, finite=True, positive=True)
A:sympy.benchmarks.bench_meijerint.rate->Symbol('lambda', positive=True)
A:sympy.benchmarks.bench_meijerint.(alpha, beta)->symbols('alpha beta', positive=True)
A:sympy.benchmarks.bench_meijerint.kint->Symbol('k', integer=True, positive=True)
A:sympy.benchmarks.bench_meijerint.(d1, d2)->symbols('d1 d2', positive=True)
A:sympy.benchmarks.bench_meijerint.(nupos, sigmapos)->symbols('nu sigma', positive=True)
A:sympy.benchmarks.bench_meijerint.mu->Symbol('mu', real=True)
A:sympy.benchmarks.bench_meijerint.u->Symbol('u', polar=True)
A:sympy.benchmarks.bench_meijerint.tpos->Symbol('t', positive=True)
A:sympy.benchmarks.bench_meijerint._t->time()
sympy.benchmarks.bench_meijerint.E(expr)
sympy.benchmarks.bench_meijerint.exponential(x,rate)
sympy.benchmarks.bench_meijerint.normal(x,mu,sigma)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/rules.py----------------------------------------
sympy.core.rules.Transform(self,transform,filter=lambdax:True)
sympy.core.rules.Transform.__contains__(self,item)
sympy.core.rules.Transform.__getitem__(self,key)
sympy.core.rules.Transform.get(self,item,default=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/power.py----------------------------------------
A:sympy.core.power.n->int(exp)
A:sympy.core.power.s->powdenest(self, force=True).trigsimp().func(*self.args)
A:sympy.core.power.(x, t)->sympy.external.gmpy.gmpy.root(y, n)
A:sympy.core.power.(x, rem)->mpmath_sqrtrem(y)
A:sympy.core.power.guess->int(2.0 ** exp)
A:sympy.core.power.shift->int(exp - 53)
A:sympy.core.power.x->sympify(x)
A:sympy.core.power.y->as_int(y)
A:sympy.core.power.(n, b)->integer_log(y if y > 0 else -y, -x)
A:sympy.core.power.(y, rem)->divmod(y, d)
A:sympy.core.power.b->_keep_coeff(*b.as_content_primitive(radical=radical, clear=clear))
A:sympy.core.power.e->_keep_coeff(ce, pe)
A:sympy.core.power.(c, ex)->symbols('c, ex', cls=Wild, exclude=[x])
A:sympy.core.power.(num, den)->fraction(ex)
A:sympy.core.power.obj->cls._exec_constructor_postprocessors(obj)
A:sympy.core.power.(b, e)->expr.simplify().as_base_exp()
A:sympy.core.power.(n, d)->base._evalf(prec).as_numer_denom()
A:sympy.core.power.rv->Mul(*[self.func(b.func(*b.args), e) for b in npow])
A:sympy.core.power.mb->m.bit_length()
A:sympy.core.power.phi->totient(q)
A:sympy.core.power.base->base._evalf(prec)._evalf(prec)
A:sympy.core.power.bit_length->int(q).bit_length()
A:sympy.core.power.ext_neg->Pow._eval_is_extended_negative(self)
A:sympy.core.power.check->powdenest(self, force=True).trigsimp().func(*self.args)
A:sympy.core.power.(c, a)->powdenest(self, force=True).trigsimp().exp.as_coeff_Add()
A:sympy.core.power.c->powdenest(self, force=True).trigsimp().func(b, iceh)
A:sympy.core.power.(pow, remainder)->divmod(as_int(coeff1), as_int(coeff2))
A:sympy.core.power.remainder_pow->Mul(remainder, *terms1)
A:sympy.core.power.l->log(self.base, old.base)
A:sympy.core.power.ct1->old.exp.as_independent(Symbol, as_Add=False)
A:sympy.core.power.ct2->(self.exp * log(self.base)).as_independent(Symbol, as_Add=False)
A:sympy.core.power.(ok, pow, remainder_pow)->_check(ct1, ct2, old)
A:sympy.core.power.result->Mul(result, Pow(old.base, remainder_pow))
A:sympy.core.power.newa->a._subs(old, new)
A:sympy.core.power.expo->Add(*o_al)
A:sympy.core.power.expanded->powdenest(self, force=True).trigsimp().expand(deep, **hints)
A:sympy.core.power.(c, nc)->sift(e.args, lambda x: x.is_commutative, binary=True)
A:sympy.core.power.force->hints.get('force', False)
A:sympy.core.power.(cargs, nc)->_keep_coeff(*b.as_content_primitive(radical=radical, clear=clear)).args_cnc(split_1=False)
A:sympy.core.power.(other, maybe_real)->sift(cargs, lambda x: x.is_extended_real is False, binary=True)
A:sympy.core.power.sifted->sift(maybe_real, pred)
A:sympy.core.power.(npow, cargs)->sift(cargs, lambda x: x.is_Pow and x.exp.is_Rational and x.base.is_number, binary=True)
A:sympy.core.power.expanded_base_n->expanded_base_n._eval_expand_multinomial()._eval_expand_multinomial()
A:sympy.core.power.f->_keep_coeff(*b.as_content_primitive(radical=radical, clear=clear)).as_leading_term(x, logx=logx, cdir=cdir)
A:sympy.core.power.o->Add(*order_terms)
A:sympy.core.power.g->((b - f) / f).expand()
A:sympy.core.power.(a, b)->symbols('a b', cls=Dummy)
A:sympy.core.power.k->powdenest(self, force=True).trigsimp().func(b.q, n)
A:sympy.core.power.expansion_dict->multinomial_coefficients(len(p), n)
A:sympy.core.power.multi->(base ** (n - 1))._eval_expand_multinomial()
A:sympy.core.power.(re_e, im_e)->powdenest(self, force=True).trigsimp().exp.as_real_imag()
A:sympy.core.power.expr->expr.simplify().simplify()
A:sympy.core.power.re_part->Add(*[cc * a ** aa * b ** bb for ((aa, bb), cc) in r])
A:sympy.core.power.im_part1->Add(*[cc * a ** aa * b ** bb for ((aa, bb), cc) in r])
A:sympy.core.power.im_part3->Add(*[cc * a ** aa * b ** bb for ((aa, bb), cc) in r])
A:sympy.core.power.r->powdenest(self, force=True).trigsimp().func(self.func(re_e, 2) + self.func(im_e, 2), S.Half)
A:sympy.core.power.t->atan2(im_e, re_e)
A:sympy.core.power.re_e->re_e.expand(deep, **hints).expand(deep, **hints)
A:sympy.core.power.im_e->im_e.expand(deep, **hints).expand(deep, **hints)
A:sympy.core.power.dbase->powdenest(self, force=True).trigsimp().base.diff(s)
A:sympy.core.power.dexp->powdenest(self, force=True).trigsimp().exp.diff(s)
A:sympy.core.power.(base, exp)->factor.as_base_exp()
A:sympy.core.power.exp->sympy.functions.elementary.exponential.exp._evalf(prec)._evalf(prec)
A:sympy.core.power.p->powdenest(self, force=True).trigsimp().func(*self.as_base_exp())
A:sympy.core.power.base_merom->powdenest(self, force=True).trigsimp().base._eval_is_meromorphic(x, a)
A:sympy.core.power.exp_merom->powdenest(self, force=True).trigsimp().exp._eval_is_meromorphic(x, a)
A:sympy.core.power.log_defined->fuzzy_and((b.is_finite, fuzzy_not(b_zero)))
A:sympy.core.power.neg_exp->sympy.functions.elementary.exponential.exp._evalf(prec)._evalf(prec).could_extract_minus_sign()
A:sympy.core.power.d->powdenest(self, force=True).trigsimp().exp.xreplace(d).matches(e, d)
A:sympy.core.power.(sb, se)->powdenest(self, force=True).trigsimp().as_base_exp()
A:sympy.core.power.e_series->powdenest(self, force=True).trigsimp().exp.nseries(x, n=n, logx=logx)
A:sympy.core.power.e0->limit(e_series.removeO(), x, 0)
A:sympy.core.power.exp_seriesterm->exp(e0)
A:sympy.core.power.term->term.nseries(x, n=n, logx=logx).nseries(x, n=n, logx=logx)
A:sympy.core.power.self->powdenest(self, force=True).trigsimp()
A:sympy.core.power.(_, m)->_keep_coeff(*b.as_content_primitive(radical=radical, clear=clear)).leadterm(x)
A:sympy.core.power.res->exp(e * log(b))._eval_nseries(x, n=n, logx=logx, cdir=cdir)
A:sympy.core.power.maxpow->sympify(n)
A:sympy.core.power.(c, d)->((b - f) / f).expand().leadterm(x, logx=logx)
A:sympy.core.power.(_, d)->((b - f) / f).expand().leadterm(x, logx=logx)
A:sympy.core.power.gpoly->((b - f) / f).expand()._eval_nseries(x, n=ceiling(maxpow), logx=logx, cdir=cdir).removeO()
A:sympy.core.power.(co1, e1)->coeff_exp(term, x)
A:sympy.core.power.tk->mul(tk, gterms)
A:sympy.core.power.ndir->(b - f).dir(x, cdir)
A:sympy.core.power.(inco, inex)->coeff_exp(f ** e, x)
A:sympy.core.power.arg->_keep_coeff(ce, pe).as_leading_term(x, logx=logx)
A:sympy.core.power.arg0->_keep_coeff(ce, pe).as_leading_term(x, logx=logx).limit(x, 0)
A:sympy.core.power.lt->exp(e * log(b))
A:sympy.core.power.log_leadterm->log(b)._eval_as_leading_term(x, logx=logx, cdir=cdir)
A:sympy.core.power.coeff->sympy.functions.elementary.exponential.exp._evalf(prec)._evalf(prec).coeff(S.Pi * S.ImaginaryUnit)
A:sympy.core.power.(ce, pe)->_keep_coeff(ce, pe).as_content_primitive(radical=radical, clear=clear)
A:sympy.core.power.(h, t)->_keep_coeff(*b.as_content_primitive(radical=radical, clear=clear)).as_content_primitive(radical=radical, clear=clear)
A:sympy.core.power.(iceh, r)->divmod(ceh.p, ceh.q)
A:sympy.core.power.(c, m)->powdenest(self, force=True).trigsimp().func(h, e).as_coeff_Mul()
A:sympy.core.power.(m, me)->m.as_base_exp()
A:sympy.core.power.bz->_keep_coeff(*b.as_content_primitive(radical=radical, clear=clear)).equals(0)
A:sympy.core.power.econ->_keep_coeff(ce, pe).is_constant(*wrt)
A:sympy.core.power.bcon->_keep_coeff(*b.as_content_primitive(radical=radical, clear=clear)).is_constant(*wrt)
A:sympy.core.power.new_e->_keep_coeff(ce, pe).subs(n, n + step)
A:sympy.core.power.power->Dispatcher('power')
sympy.Pow(cls,b,e,evaluate=None)
sympy.core.power.Pow(cls,b,e,evaluate=None)
sympy.core.power.Pow._eval_Mod(self,q)
sympy.core.power.Pow._eval_adjoint(self)
sympy.core.power.Pow._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.core.power.Pow._eval_conjugate(self)
sympy.core.power.Pow._eval_derivative(self,s)
sympy.core.power.Pow._eval_difference_delta(self,n,step)
sympy.core.power.Pow._eval_evalf(self,prec)
sympy.core.power.Pow._eval_expand_multinomial(self,**hints)
sympy.core.power.Pow._eval_expand_power_base(self,**hints)
sympy.core.power.Pow._eval_expand_power_exp(self,**hints)
sympy.core.power.Pow._eval_is_algebraic(self)
sympy.core.power.Pow._eval_is_algebraic_expr(self,syms)
sympy.core.power.Pow._eval_is_complex(self)
sympy.core.power.Pow._eval_is_composite(self)
sympy.core.power.Pow._eval_is_even(self)
sympy.core.power.Pow._eval_is_extended_negative(self)
sympy.core.power.Pow._eval_is_extended_positive(self)
sympy.core.power.Pow._eval_is_extended_real(self)
sympy.core.power.Pow._eval_is_finite(self)
sympy.core.power.Pow._eval_is_imaginary(self)
sympy.core.power.Pow._eval_is_integer(self)
sympy.core.power.Pow._eval_is_meromorphic(self,x,a)
sympy.core.power.Pow._eval_is_negative(self)
sympy.core.power.Pow._eval_is_odd(self)
sympy.core.power.Pow._eval_is_polar(self)
sympy.core.power.Pow._eval_is_polynomial(self,syms)
sympy.core.power.Pow._eval_is_prime(self)
sympy.core.power.Pow._eval_is_rational(self)
sympy.core.power.Pow._eval_is_rational_function(self,syms)
sympy.core.power.Pow._eval_is_zero(self)
sympy.core.power.Pow._eval_nseries(self,x,n,logx,cdir=0)
sympy.core.power.Pow._eval_power(self,other)
sympy.core.power.Pow._eval_refine(self,assumptions)
sympy.core.power.Pow._eval_rewrite_as_cos(self,base,exp)
sympy.core.power.Pow._eval_rewrite_as_exp(self,base,expo,**kwargs)
sympy.core.power.Pow._eval_rewrite_as_sin(self,base,exp)
sympy.core.power.Pow._eval_rewrite_as_sqrt(self,base,exp,**kwargs)
sympy.core.power.Pow._eval_rewrite_as_tanh(self,base,exp)
sympy.core.power.Pow._eval_subs(self,old,new)
sympy.core.power.Pow._eval_transpose(self)
sympy.core.power.Pow._taylor_term(self,n,x,*previous_terms)
sympy.core.power.Pow.as_base_exp(self)
sympy.core.power.Pow.as_content_primitive(self,radical=False,clear=True)
sympy.core.power.Pow.as_numer_denom(self)
sympy.core.power.Pow.as_real_imag(self,deep=True,**hints)
sympy.core.power.Pow.base(self)->Expr
sympy.core.power.Pow.class_key(cls)
sympy.core.power.Pow.exp(self)->Expr
sympy.core.power.Pow.inverse(self,argindex=1)
sympy.core.power.Pow.is_constant(self,*wrt,**flags)
sympy.core.power.Pow.kind(self)
sympy.core.power.Pow.matches(self,expr,repl_dict=None,old=False)
sympy.core.power.Pow.taylor_term(self,n,x,*previous_terms)
sympy.core.power._integer_nthroot_python(y,n)
sympy.core.power.integer_log(y,x)
sympy.core.power.integer_nthroot(y,n)
sympy.core.power.isqrt(n)
sympy.integer_log(y,x)
sympy.integer_nthroot(y,n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/logic.py----------------------------------------
A:sympy.core.logic.ai->fuzzy_bool(a)
A:sympy.core.logic.obj->object.__new__(cls)
A:sympy.core.logic.a->str(type(self))
A:sympy.core.logic.b->str(type(other))
A:sympy.core.logic.term->Not(term[1:])
A:sympy.core.logic.lexpr->Logic.op_2class[schedop](lexpr, term)
A:sympy.core.logic.args->tuple(res)
A:sympy.core.logic.args_queue->list(args)
A:sympy.core.logic.arg->arg._eval_propagate_not()._eval_propagate_not()
A:sympy.core.logic.orterms[j]->orterms[j].expand().expand()
A:sympy.core.logic.res->Or(*orterms)
sympy.core.And(AndOr_Base)
sympy.core.Not(cls,arg)
sympy.core.Or(AndOr_Base)
sympy.core.logic.And(AndOr_Base)
sympy.core.logic.And._eval_propagate_not(self)
sympy.core.logic.And.expand(self)
sympy.core.logic.AndOr_Base(cls,*args)
sympy.core.logic.AndOr_Base.flatten(cls,args)
sympy.core.logic.Logic(cls,*args)
sympy.core.logic.Logic.__cmp__(self,other)
sympy.core.logic.Logic.__eq__(a,b)
sympy.core.logic.Logic.__getnewargs__(self)
sympy.core.logic.Logic.__hash__(self)
sympy.core.logic.Logic.__lt__(self,other)
sympy.core.logic.Logic.__ne__(a,b)
sympy.core.logic.Logic.__str__(self)
sympy.core.logic.Logic.fromstring(text)
sympy.core.logic.Not(cls,arg)
sympy.core.logic.Not.arg(self)
sympy.core.logic.Or(AndOr_Base)
sympy.core.logic.Or._eval_propagate_not(self)
sympy.core.logic._fuzzy_group(args,quick_exit=False)
sympy.core.logic._torf(args)
sympy.core.logic.fuzzy_and(args)
sympy.core.logic.fuzzy_bool(x)
sympy.core.logic.fuzzy_nand(args)
sympy.core.logic.fuzzy_not(v)
sympy.core.logic.fuzzy_or(args)
sympy.core.logic.fuzzy_xor(args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/containers.py----------------------------------------
A:sympy.core.containers.obj->super().__new__(cls, *args)
A:sympy.core.containers.indices->i.indices(len(self))
A:sympy.core.containers.n->as_int(other)
A:sympy.core.containers.elements->frozenset(items)
A:sympy.core.containers.obj._dict->dict(items)
A:sympy.core.containers.key->_sympify(key)
A:sympy.core.containers.self.map->OrderedDict()
sympy.Dict(cls,*args)
sympy.Tuple(cls,*args,**kwargs)
sympy.core.containers.Dict(cls,*args)
sympy.core.containers.Dict.__contains__(self,key)
sympy.core.containers.Dict.__eq__(self,other)
sympy.core.containers.Dict.__getitem__(self,key)
sympy.core.containers.Dict.__iter__(self)
sympy.core.containers.Dict.__len__(self)
sympy.core.containers.Dict.__lt__(self,other)
sympy.core.containers.Dict.__setitem__(self,key,value)
sympy.core.containers.Dict._sorted_args(self)
sympy.core.containers.Dict.get(self,key,default=None)
sympy.core.containers.Dict.items(self)
sympy.core.containers.Dict.keys(self)
sympy.core.containers.Dict.values(self)
sympy.core.containers.OrderedSet(self,iterable=None)
sympy.core.containers.OrderedSet.__contains__(self,key)
sympy.core.containers.OrderedSet.__iter__(self)
sympy.core.containers.OrderedSet.__len__(self)
sympy.core.containers.OrderedSet.__repr__(self)
sympy.core.containers.OrderedSet.add(self,key)
sympy.core.containers.OrderedSet.difference(self,other)
sympy.core.containers.OrderedSet.discard(self,key)
sympy.core.containers.OrderedSet.intersection(self,other)
sympy.core.containers.OrderedSet.pop(self,last=True)
sympy.core.containers.OrderedSet.update(self,iterable)
sympy.core.containers.Tuple(cls,*args,**kwargs)
sympy.core.containers.Tuple.__add__(self,other)
sympy.core.containers.Tuple.__contains__(self,item)
sympy.core.containers.Tuple.__eq__(self,other)
sympy.core.containers.Tuple.__getitem__(self,i)
sympy.core.containers.Tuple.__hash__(self)
sympy.core.containers.Tuple.__iter__(self)
sympy.core.containers.Tuple.__le__(self,other)
sympy.core.containers.Tuple.__len__(self)
sympy.core.containers.Tuple.__lt__(self,other)
sympy.core.containers.Tuple.__mul__(self,other)
sympy.core.containers.Tuple.__ne__(self,other)
sympy.core.containers.Tuple.__radd__(self,other)
sympy.core.containers.Tuple._to_mpmath(self,prec)
sympy.core.containers.Tuple.index(self,value,start=None,stop=None)
sympy.core.containers.Tuple.kind(self)
sympy.core.containers.Tuple.tuple_count(self,value)->int
sympy.core.containers.TupleKind(cls,*args)
sympy.core.containers.TupleKind.__repr__(self)
sympy.core.containers.tuple_wrapper(method)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/sorting.py----------------------------------------
A:sympy.core.sorting.args->sorted(args)
A:sympy.core.sorting.item->sympify(item, strict=True)
A:sympy.core.sorting.d->defaultdict(list)
A:sympy.core.sorting.keys->list(keys)
A:sympy.core.sorting.f->list(keys).pop(0)
A:sympy.core.sorting.value->ordered(value, (_nodes, default_sort_key), default=False, warn=warn)
A:sympy.core.sorting.u->list(uniq(value))
sympy.core.sorting._node_count(e)
sympy.core.sorting._nodes(e)
sympy.core.sorting.default_sort_key(item,order=None)
sympy.core.sorting.ordered(seq,keys=None,default=True,warn=False)
sympy.default_sort_key(item,order=None)
sympy.ordered(seq,keys=None,default=True,warn=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/assumptions_generated.py----------------------------------------
A:sympy.core.assumptions_generated.full_implications->dict([(('algebraic', True), set((('commutative', True), ('complex', True), ('finite', True), ('infinite', False), ('transcendental', False)))), (('algebraic', False), set((('composite', False), ('even', False), ('integer', False), ('odd', False), ('prime', False), ('rational', False), ('zero', False)))), (('antihermitian', True), set(())), (('antihermitian', False), set((('imaginary', False),))), (('commutative', True), set(())), (('commutative', False), set((('algebraic', False), ('complex', False), ('composite', False), ('even', False), ('extended_negative', False), ('extended_nonnegative', False), ('extended_nonpositive', False), ('extended_nonzero', False), ('extended_positive', False), ('extended_real', False), ('imaginary', False), ('integer', False), ('irrational', False), ('negative', False), ('noninteger', False), ('nonnegative', False), ('nonpositive', False), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', False), ('real', False), ('transcendental', False), ('zero', False)))), (('complex', True), set((('commutative', True), ('finite', True), ('infinite', False)))), (('complex', False), set((('algebraic', False), ('composite', False), ('even', False), ('imaginary', False), ('integer', False), ('irrational', False), ('negative', False), ('nonnegative', False), ('nonpositive', False), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', False), ('real', False), ('transcendental', False), ('zero', False)))), (('composite', True), set((('algebraic', True), ('commutative', True), ('complex', True), ('extended_negative', False), ('extended_nonnegative', True), ('extended_nonpositive', False), ('extended_nonzero', True), ('extended_positive', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('integer', True), ('irrational', False), ('negative', False), ('noninteger', False), ('nonnegative', True), ('nonpositive', False), ('nonzero', True), ('positive', True), ('prime', False), ('rational', True), ('real', True), ('transcendental', False), ('zero', False)))), (('composite', False), set(())), (('even', True), set((('algebraic', True), ('commutative', True), ('complex', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('integer', True), ('irrational', False), ('noninteger', False), ('odd', False), ('rational', True), ('real', True), ('transcendental', False)))), (('even', False), set((('zero', False),))), (('extended_negative', True), set((('commutative', True), ('composite', False), ('extended_nonnegative', False), ('extended_nonpositive', True), ('extended_nonzero', True), ('extended_positive', False), ('extended_real', True), ('imaginary', False), ('nonnegative', False), ('positive', False), ('prime', False), ('zero', False)))), (('extended_negative', False), set((('negative', False),))), (('extended_nonnegative', True), set((('commutative', True), ('extended_negative', False), ('extended_real', True), ('imaginary', False), ('negative', False)))), (('extended_nonnegative', False), set((('composite', False), ('extended_positive', False), ('nonnegative', False), ('positive', False), ('prime', False), ('zero', False)))), (('extended_nonpositive', True), set((('commutative', True), ('composite', False), ('extended_positive', False), ('extended_real', True), ('imaginary', False), ('positive', False), ('prime', False)))), (('extended_nonpositive', False), set((('extended_negative', False), ('negative', False), ('nonpositive', False), ('zero', False)))), (('extended_nonzero', True), set((('commutative', True), ('extended_real', True), ('imaginary', False), ('zero', False)))), (('extended_nonzero', False), set((('composite', False), ('extended_negative', False), ('extended_positive', False), ('negative', False), ('nonzero', False), ('positive', False), ('prime', False)))), (('extended_positive', True), set((('commutative', True), ('extended_negative', False), ('extended_nonnegative', True), ('extended_nonpositive', False), ('extended_nonzero', True), ('extended_real', True), ('imaginary', False), ('negative', False), ('nonpositive', False), ('zero', False)))), (('extended_positive', False), set((('composite', False), ('positive', False), ('prime', False)))), (('extended_real', True), set((('commutative', True), ('imaginary', False)))), (('extended_real', False), set((('composite', False), ('even', False), ('extended_negative', False), ('extended_nonnegative', False), ('extended_nonpositive', False), ('extended_nonzero', False), ('extended_positive', False), ('integer', False), ('irrational', False), ('negative', False), ('noninteger', False), ('nonnegative', False), ('nonpositive', False), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', False), ('real', False), ('zero', False)))), (('finite', True), set((('infinite', False),))), (('finite', False), set((('algebraic', False), ('complex', False), ('composite', False), ('even', False), ('imaginary', False), ('infinite', True), ('integer', False), ('irrational', False), ('negative', False), ('nonnegative', False), ('nonpositive', False), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', False), ('real', False), ('transcendental', False), ('zero', False)))), (('hermitian', True), set(())), (('hermitian', False), set((('composite', False), ('even', False), ('integer', False), ('irrational', False), ('negative', False), ('nonnegative', False), ('nonpositive', False), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', False), ('real', False), ('zero', False)))), (('imaginary', True), set((('antihermitian', True), ('commutative', True), ('complex', True), ('composite', False), ('even', False), ('extended_negative', False), ('extended_nonnegative', False), ('extended_nonpositive', False), ('extended_nonzero', False), ('extended_positive', False), ('extended_real', False), ('finite', True), ('infinite', False), ('integer', False), ('irrational', False), ('negative', False), ('noninteger', False), ('nonnegative', False), ('nonpositive', False), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', False), ('real', False), ('zero', False)))), (('imaginary', False), set(())), (('infinite', True), set((('algebraic', False), ('complex', False), ('composite', False), ('even', False), ('finite', False), ('imaginary', False), ('integer', False), ('irrational', False), ('negative', False), ('nonnegative', False), ('nonpositive', False), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', False), ('real', False), ('transcendental', False), ('zero', False)))), (('infinite', False), set((('finite', True),))), (('integer', True), set((('algebraic', True), ('commutative', True), ('complex', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('irrational', False), ('noninteger', False), ('rational', True), ('real', True), ('transcendental', False)))), (('integer', False), set((('composite', False), ('even', False), ('odd', False), ('prime', False), ('zero', False)))), (('irrational', True), set((('commutative', True), ('complex', True), ('composite', False), ('even', False), ('extended_nonzero', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('integer', False), ('noninteger', True), ('nonzero', True), ('odd', False), ('prime', False), ('rational', False), ('real', True), ('zero', False)))), (('irrational', False), set(())), (('negative', True), set((('commutative', True), ('complex', True), ('composite', False), ('extended_negative', True), ('extended_nonnegative', False), ('extended_nonpositive', True), ('extended_nonzero', True), ('extended_positive', False), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('nonnegative', False), ('nonpositive', True), ('nonzero', True), ('positive', False), ('prime', False), ('real', True), ('zero', False)))), (('negative', False), set(())), (('noninteger', True), set((('commutative', True), ('composite', False), ('even', False), ('extended_nonzero', True), ('extended_real', True), ('imaginary', False), ('integer', False), ('odd', False), ('prime', False), ('zero', False)))), (('noninteger', False), set(())), (('nonnegative', True), set((('commutative', True), ('complex', True), ('extended_negative', False), ('extended_nonnegative', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('negative', False), ('real', True)))), (('nonnegative', False), set((('composite', False), ('positive', False), ('prime', False), ('zero', False)))), (('nonpositive', True), set((('commutative', True), ('complex', True), ('composite', False), ('extended_nonpositive', True), ('extended_positive', False), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('positive', False), ('prime', False), ('real', True)))), (('nonpositive', False), set((('negative', False), ('zero', False)))), (('nonzero', True), set((('commutative', True), ('complex', True), ('extended_nonzero', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('real', True), ('zero', False)))), (('nonzero', False), set((('composite', False), ('negative', False), ('positive', False), ('prime', False)))), (('odd', True), set((('algebraic', True), ('commutative', True), ('complex', True), ('even', False), ('extended_nonzero', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('integer', True), ('irrational', False), ('noninteger', False), ('nonzero', True), ('rational', True), ('real', True), ('transcendental', False), ('zero', False)))), (('odd', False), set(())), (('positive', True), set((('commutative', True), ('complex', True), ('extended_negative', False), ('extended_nonnegative', True), ('extended_nonpositive', False), ('extended_nonzero', True), ('extended_positive', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('negative', False), ('nonnegative', True), ('nonpositive', False), ('nonzero', True), ('real', True), ('zero', False)))), (('positive', False), set((('composite', False), ('prime', False)))), (('prime', True), set((('algebraic', True), ('commutative', True), ('complex', True), ('composite', False), ('extended_negative', False), ('extended_nonnegative', True), ('extended_nonpositive', False), ('extended_nonzero', True), ('extended_positive', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('integer', True), ('irrational', False), ('negative', False), ('noninteger', False), ('nonnegative', True), ('nonpositive', False), ('nonzero', True), ('positive', True), ('rational', True), ('real', True), ('transcendental', False), ('zero', False)))), (('prime', False), set(())), (('rational', True), set((('algebraic', True), ('commutative', True), ('complex', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('irrational', False), ('real', True), ('transcendental', False)))), (('rational', False), set((('composite', False), ('even', False), ('integer', False), ('odd', False), ('prime', False), ('zero', False)))), (('real', True), set((('commutative', True), ('complex', True), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False)))), (('real', False), set((('composite', False), ('even', False), ('integer', False), ('irrational', False), ('negative', False), ('nonnegative', False), ('nonpositive', False), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', False), ('zero', False)))), (('transcendental', True), set((('algebraic', False), ('commutative', True), ('complex', True), ('composite', False), ('even', False), ('finite', True), ('infinite', False), ('integer', False), ('odd', False), ('prime', False), ('rational', False), ('zero', False)))), (('transcendental', False), set(())), (('zero', True), set((('algebraic', True), ('commutative', True), ('complex', True), ('composite', False), ('even', True), ('extended_negative', False), ('extended_nonnegative', True), ('extended_nonpositive', True), ('extended_nonzero', False), ('extended_positive', False), ('extended_real', True), ('finite', True), ('hermitian', True), ('imaginary', False), ('infinite', False), ('integer', True), ('irrational', False), ('negative', False), ('noninteger', False), ('nonnegative', True), ('nonpositive', True), ('nonzero', False), ('odd', False), ('positive', False), ('prime', False), ('rational', True), ('real', True), ('transcendental', False)))), (('zero', False), set(()))])


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/cache.py----------------------------------------
A:sympy.core.cache.info->myfunc.cache_info()
A:sympy.core.cache.CACHE->_cache()
A:sympy.core.cache.cfunc->__cacheit(maxsize)(func)
A:sympy.core.cache.retval->func(*args, **kwargs)
A:sympy.core.cache.r1->func(*args, **kw_args)
A:sympy.core.cache.r2->cfunc(*args, **kw_args)
A:sympy.core.cache.USE_CACHE->_getenv('SYMPY_USE_CACHE', 'yes').lower()
A:sympy.core.cache.scs->_getenv('SYMPY_CACHE_SIZE', '1000')
A:sympy.core.cache.SYMPY_CACHE_SIZE->int(scs)
A:sympy.core.cache.cacheit->__cacheit_debug(SYMPY_CACHE_SIZE)
A:sympy.core.cache._cached_property_sentinel->object()
A:sympy.core.cache.val->func(self)
A:sympy.core.cache.func->getattr(import_module(module), name)
sympy.core.cache.__cacheit(maxsize)
sympy.core.cache.__cacheit_debug(maxsize)
sympy.core.cache.__cacheit_nocache(func)
sympy.core.cache._cache(list)
sympy.core.cache._cache.clear_cache(self)
sympy.core.cache._cache.print_cache(self)
sympy.core.cache._getenv(key,default=None)
sympy.core.cache.cached_property(func)
sympy.core.cache.lazy_function(module:str,name:str)->Callable
sympy.core.lazy_function(module:str,name:str)->Callable


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/compatibility.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/parameters.py----------------------------------------
A:sympy.core.parameters.global_parameters->_global_parameters(evaluate=True, distribute=True, exp_is_pow=False)
sympy.core.parameters._exp_is_pow(x)
sympy.core.parameters._global_parameters(self,**kwargs)
sympy.core.parameters._global_parameters.__setattr__(self,name,value)
sympy.core.parameters.distribute(x)
sympy.core.parameters.evaluate(x)
sympy.evaluate(x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/_print_helpers.py----------------------------------------
A:sympy.core._print_helpers.s->latex(self, mode='plain')
sympy.core._print_helpers.Printable
sympy.core._print_helpers.Printable.__str__(self)
sympy.core._print_helpers.Printable._repr_disabled(self)
sympy.core._print_helpers.Printable._repr_latex_(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/exprtools.py----------------------------------------
A:sympy.core.exprtools._eps->Dummy(positive=True)
A:sympy.core.exprtools.rv->_keep_coeff(cont, p, clear=clear, sign=sign)
A:sympy.core.exprtools.x->list(a.free_symbols).pop()
A:sympy.core.exprtools.x0->_monotonic_sign(x)
A:sympy.core.exprtools.d->Dummy()
A:sympy.core.exprtools.currentroots->real_roots(d)
A:sympy.core.exprtools.y->self.subs(x, x0)
A:sympy.core.exprtools.(n, d)->gcd(c, Mul._from_args(a[0])).as_numer_denom()
A:sympy.core.exprtools.den->_monotonic_sign(d)
A:sympy.core.exprtools.(c, a)->self.as_coeff_Add()
A:sympy.core.exprtools.reps[x]->_monotonic_sign(x)
A:sympy.core.exprtools.free->list(a.free_symbols)
A:sympy.core.exprtools.v->a.xreplace(p)
A:sympy.core.exprtools.(base, exp)->decompose_power(factor)
A:sympy.core.exprtools.base->Pow(base, Rational(1, exp.q))
A:sympy.core.exprtools.(exp, tail)->max(exp, factors[factor]).as_coeff_Mul(rational=True)
A:sympy.core.exprtools.tail->_keep_coeff(Rational(1, exp.q), tail)
A:sympy.core.exprtools._(base, exp)->expr.func(*[expand_power_exp(i) for i in expr.args]).as_base_exp()
A:sympy.core.exprtools.factors->dict(self.factors)
A:sympy.core.exprtools.(c, nc)->dict(self.factors).args_cnc()
A:sympy.core.exprtools.i->gcd(c, Mul._from_args(a[0])).count(I)
A:sympy.core.exprtools.keys->tuple(ordered(self.factors.keys()))
A:sympy.core.exprtools.self.gens->frozenset(keys())
A:sympy.core.exprtools.(b, e)->factor_terms(result, **kwargs).as_base_exp()
A:sympy.core.exprtools.e->min(e, et)
A:sympy.core.exprtools.other->Factors(other)
A:sympy.core.exprtools.self_factors->dict(self.factors)
A:sympy.core.exprtools.other_factors->dict(other.factors)
A:sympy.core.exprtools.r->Mul(*n)
A:sympy.core.exprtools.(sc, sa)->quo[factor].as_coeff_Add()
A:sympy.core.exprtools.(oc, oa)->other_exp.as_coeff_Add()
A:sympy.core.exprtools.exp->max(exp, factors[factor])
A:sympy.core.exprtools.(coeff, factors)->cont.as_expr().as_coeff_Mul()
A:sympy.core.exprtools.(cont, base)->Pow(base, Rational(1, exp.q)).primitive()
A:sympy.core.exprtools.numer->numer.xreplace(reps).xreplace(reps)
A:sympy.core.exprtools.denom->denom.as_expr().as_expr()
A:sympy.core.exprtools.(numer, denom)->numer.xreplace(reps).xreplace(reps).normal(denom)
A:sympy.core.exprtools.terms->sympify(terms)
A:sympy.core.exprtools.cont->cont.as_expr().as_expr()
A:sympy.core.exprtools.terms[i]->term.quo(cont)
A:sympy.core.exprtools.(_cont, numer)->numer.xreplace(reps).xreplace(reps).primitive()
A:sympy.core.exprtools.nc->Dummy(commutative=False)
A:sympy.core.exprtools.args[i]->Mul(*c)
A:sympy.core.exprtools.isadd->isinstance(terms, Add)
A:sympy.core.exprtools.(terms, reps)->mask(terms)
A:sympy.core.exprtools.(cont, numer, denom)->_gcd_terms(terms, isprimitive, fraction)
A:sympy.core.exprtools.(c, _coeff)->coeff.as_coeff_Mul()
A:sympy.core.exprtools.(c, args)->sympify(terms).as_coeff_mul()
A:sympy.core.exprtools.f->factor_terms(result, **kwargs)
A:sympy.core.exprtools.(i, d)->factor_terms(result, **kwargs).as_independent(*wrt)
A:sympy.core.exprtools.is_iterable->iterable(expr)
A:sympy.core.exprtools.newargs->tuple([do(i) for i in args])
A:sympy.core.exprtools.(cont, p)->expr.func(*[expand_power_exp(i) for i in expr.args]).as_content_primitive(radical=radical, clear=clear)
A:sympy.core.exprtools.list_args[i]->Dummy()
A:sympy.core.exprtools.p->p.func(*[do(a) for a in p.args]).func(*[do(a) for a in p.args])
A:sympy.core.exprtools.expr->expr.func(*[expand_power_exp(i) for i in expr.args]).func(*[expand_power_exp(i) for i in expr.args])
A:sympy.core.exprtools.names->numbered_names()
A:sympy.core.exprtools.nc_obj->sorted(nc_obj, key=default_sort_key)
A:sympy.core.exprtools.nc_syms->list(nc_syms)
A:sympy.core.exprtools.pot->preorder_traversal(expr, keys=default_sort_key)
A:sympy.core.exprtools.(expr, rep, nc_symbols)->_mask_nc(expr)
A:sympy.core.exprtools.c->gcd(c, Mul._from_args(a[0]))
A:sympy.core.exprtools.(c, g)->gcd(c, Mul._from_args(a[0])).as_coeff_Mul()
A:sympy.core.exprtools.cc->list(Mul.make_args(Mul._from_args(list(cc)) / g))
A:sympy.core.exprtools.n->common_suffix(n, a[1])
A:sympy.core.exprtools.(bt, et)->t[1][-1].as_base_exp()
A:sympy.core.exprtools.lenn->len(n)
A:sympy.core.exprtools.l->Mul(*n)
A:sympy.core.exprtools.mid->Add(*[Mul(*cc) * Mul(*nc) for (cc, nc) in args])
A:sympy.core.exprtools.(new_mid, r2, _)->_mask_nc(mid.subs(rep1))
A:sympy.core.exprtools.new_mid->new_mid.subs(r2).subs(unrep1).subs(r2).subs(unrep1)
A:sympy.core.exprtools.target->_pemexpand(expr / c)
sympy.core.exprtools.Factors(self,factors=None)
sympy.core.exprtools.Factors.__divmod__(self,other)
sympy.core.exprtools.Factors.__eq__(self,other)
sympy.core.exprtools.Factors.__hash__(self)
sympy.core.exprtools.Factors.__mod__(self,other)
sympy.core.exprtools.Factors.__mul__(self,other)
sympy.core.exprtools.Factors.__ne__(self,other)
sympy.core.exprtools.Factors.__pow__(self,other)
sympy.core.exprtools.Factors.__repr__(self)
sympy.core.exprtools.Factors.__truediv__(self,other)
sympy.core.exprtools.Factors.as_expr(self)
sympy.core.exprtools.Factors.div(self,other)
sympy.core.exprtools.Factors.gcd(self,other)
sympy.core.exprtools.Factors.is_one(self)
sympy.core.exprtools.Factors.is_zero(self)
sympy.core.exprtools.Factors.lcm(self,other)
sympy.core.exprtools.Factors.mul(self,other)
sympy.core.exprtools.Factors.normal(self,other)
sympy.core.exprtools.Factors.pow(self,other)
sympy.core.exprtools.Factors.quo(self,other)
sympy.core.exprtools.Factors.rem(self,other)
sympy.core.exprtools.Term(self,term,numer=None,denom=None)
sympy.core.exprtools.Term.__eq__(self,other)
sympy.core.exprtools.Term.__hash__(self)
sympy.core.exprtools.Term.__mul__(self,other)
sympy.core.exprtools.Term.__ne__(self,other)
sympy.core.exprtools.Term.__pow__(self,other)
sympy.core.exprtools.Term.__repr__(self)
sympy.core.exprtools.Term.__truediv__(self,other)
sympy.core.exprtools.Term.as_expr(self)
sympy.core.exprtools.Term.gcd(self,other)
sympy.core.exprtools.Term.inv(self)
sympy.core.exprtools.Term.lcm(self,other)
sympy.core.exprtools.Term.mul(self,other)
sympy.core.exprtools.Term.pow(self,other)
sympy.core.exprtools.Term.quo(self,other)
sympy.core.exprtools._factor_sum_int(expr,**kwargs)
sympy.core.exprtools._gcd_terms(terms,isprimitive=False,fraction=True)
sympy.core.exprtools._isnumber(i)
sympy.core.exprtools._mask_nc(eq,name=None)
sympy.core.exprtools._monotonic_sign(self)
sympy.core.exprtools.decompose_power(expr:Expr)->tTuple[Expr, int]
sympy.core.exprtools.decompose_power_rat(expr:Expr)->tTuple[Expr, Rational]
sympy.core.exprtools.factor_nc(expr)
sympy.core.exprtools.factor_terms(expr,radical=False,clear=False,fraction=False,sign=True)
sympy.core.exprtools.gcd_terms(terms,isprimitive=False,clear=True,fraction=True)
sympy.factor_nc(expr)
sympy.factor_terms(expr,radical=False,clear=False,fraction=False,sign=True)
sympy.gcd_terms(terms,isprimitive=False,clear=True,fraction=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/assumptions.py----------------------------------------
A:sympy.core.assumptions._assume_rules->_load_pre_generated_assumption_rules()
A:sympy.core.assumptions._assume_defined->frozenset(_assume_defined)
A:sympy.core.assumptions.n->sympify(expr)
A:sympy.core.assumptions.v->bool(v)
A:sympy.core.assumptions.common->set.intersection(*[set(i) for i in assume])
A:sympy.core.assumptions.expr->sympify(expr)
A:sympy.core.assumptions.test->getattr(expr, 'is_%s' % k, None)
A:sympy.core.assumptions.assume->assumptions(against)
A:sympy.core.assumptions.e->getattr(expr, 'is_' + k, None)
A:sympy.core.assumptions.self._generator->facts.copy()
A:sympy.core.assumptions.self._assumptions->self.default_assumptions.copy()
A:sympy.core.assumptions.getit.func_name->as_property(fact)
A:sympy.core.assumptions.handler_i->handler_map.get(fact_i)
A:sympy.core.assumptions.fact_i_value->handler_i(obj)
A:sympy.core.assumptions.fact_value->getattr(base, '_explicit_class_assumptions', None).get(fact)
A:sympy.core.assumptions.new_facts_to_check->list(_assume_rules.prereq[fact_i] - facts_queued)
A:sympy.core.assumptions.attrname->as_property(k)
A:sympy.core.assumptions.assumptions->getattr(base, '_explicit_class_assumptions', None)
A:sympy.core.assumptions.cls.default_assumptions->StdFactKB(defs)
A:sympy.core.assumptions.eval_is_meth->getattr(cls, '_eval_is_%s' % k, None)
A:sympy.core.assumptions.derived_from_bases->set()
A:sympy.core.assumptions.default_assumptions->getattr(base, 'default_assumptions', None)
A:sympy.core.assumptions.pname->as_property(fact)
sympy.core.assumptions(expr,_check=None)
sympy.core.assumptions.ManagedProperties(cls,*args,**kwargs)
sympy.core.assumptions.StdFactKB(self,facts=None)
sympy.core.assumptions.StdFactKB.copy(self)
sympy.core.assumptions.StdFactKB.generator(self)
sympy.core.assumptions._ask(fact,obj)
sympy.core.assumptions._generate_assumption_rules()
sympy.core.assumptions._load_pre_generated_assumption_rules()
sympy.core.assumptions._prepare_class_assumptions(cls)
sympy.core.assumptions.as_property(fact)
sympy.core.assumptions.assumptions(expr,_check=None)
sympy.core.assumptions.check_assumptions(expr,against=None,**assume)
sympy.core.assumptions.common_assumptions(exprs,check=None)
sympy.core.assumptions.failing_assumptions(expr,**assumptions)
sympy.core.assumptions.make_property(fact)
sympy.core.check_assumptions(expr,against=None,**assume)
sympy.core.common_assumptions(exprs,check=None)
sympy.core.failing_assumptions(expr,**assumptions)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/sympify.py----------------------------------------
A:sympy.core.sympify.is_sympy->getattr(a, '__sympy__', None)
A:sympy.core.sympify.cls->getattr(a, '__class__', None)
A:sympy.core.sympify.conv->_sympy_converter.get(superclass)
A:sympy.core.sympify._sympy_->getattr(a, '_sympy_', None)
A:sympy.core.sympify.flat->getattr(a, 'flat', None)
A:sympy.core.sympify.shape->getattr(a, 'shape', None)
A:sympy.core.sympify.a->a.replace('\n', '').replace('\n', '')
A:sympy.core.sympify.expr->_clear(expr)
A:sympy.core.sympify.s->s.replace(' ', kern).replace(' ', kern)
A:sympy.core.sympify.j->s.replace(' ', kern).replace(' ', kern).find(target, i)
sympy.SympifyError(self,expr,base_exc=None)
sympy.core.sympify.CantSympify
sympy.core.sympify.SympifyError(self,expr,base_exc=None)
sympy.core.sympify.SympifyError.__str__(self)
sympy.core.sympify._convert_numpy_types(a,**sympify_args)
sympy.core.sympify._is_numpy_instance(a)
sympy.core.sympify._sympify(a)
sympy.core.sympify.kernS(s)
sympy.core.sympify.sympify(a,locals=None,convert_xor=True,strict=False,rational=False,evaluate=None)
sympy.sympify(a,locals=None,convert_xor=True,strict=False,rational=False,evaluate=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/expr.py----------------------------------------
A:sympy.core.expr.ci->int(r).coeff(c)
A:sympy.core.expr.(coeff, expr)->self.as_coeff_Mul()
A:sympy.core.expr.args->self._build_args(self.args)
A:sympy.core.expr.exp->exps.pop()
A:sympy.core.expr.power->self._pow(other)
A:sympy.core.expr.denom->Pow(self, S.NegativeOne)
A:sympy.core.expr.r->self.extract_multiplicatively(expr)
A:sympy.core.expr.i->int(r)
A:sympy.core.expr.x->sympify(symbols[0])
A:sympy.core.expr.result->self.evalf()
A:sympy.core.expr.(re, im)->self.evalf().as_real_imag()
A:sympy.core.expr.mt->numbers.Float._new(re, prec).match('\\+?\\d*\\.(\\d+)f', format_spec)
A:sympy.core.expr.prec->int(mt.group(1))
A:sympy.core.expr.rounded->self.round(prec)
A:sympy.core.expr.re->numbers.Float._new(re, prec)
A:sympy.core.expr.reps->dict(list(zip(free, [random_complex_number(a, b, c, d, rational=True) for zi in free])))
A:sympy.core.expr.nmag->abs(self.evalf(prec, subs=reps))
A:sympy.core.expr.n->len(sub)
A:sympy.core.expr.simplify->flags.get('simplify', True)
A:sympy.core.expr.wrt->set(wrt)
A:sympy.core.expr.expr->Add(*terms)
A:sympy.core.expr.a->sympify(a)
A:sympy.core.expr.b->Add(*terms)._random()
A:sympy.core.expr.deriv->deriv.simplify().simplify()
A:sympy.core.expr.cd->check_denominator_zeros(self)
A:sympy.core.expr.other->sympify(other)
A:sympy.core.expr.diff->factor_terms(simplify(self - other), radical=True)
A:sympy.core.expr.constant->factor_terms(simplify(self - other), radical=True).is_constant(simplify=False, failing_number=True)
A:sympy.core.expr.ndiff->factor_terms(simplify(self - other), radical=True)._random()
A:sympy.core.expr.sol->solve(diff, s, simplify=False)
A:sympy.core.expr.mp->minimal_polynomial(diff)
A:sympy.core.expr.n2->self._eval_evalf(2)
A:sympy.core.expr.f->func(*args)
A:sympy.core.expr.match->pure_complex(f)
A:sympy.core.expr.C->limit(self, x, c, '-' if left else '+')
A:sympy.core.expr.A->_eval_endpoint(left=True)
A:sympy.core.expr.B->_eval_endpoint(left=False)
A:sympy.core.expr.domain->Interval(b, a)
A:sympy.core.expr.singularities->solveset(self.cancel().as_numer_denom()[1], x, domain=domain)
A:sympy.core.expr.arg->_sympify(arg)
A:sympy.core.expr.coeff->exps.pop().as_coefficient(ipi)
A:sympy.core.expr.(coeff, _)->_sympify(arg).leadterm(x)
A:sympy.core.expr.obj->Expr.__new__(cls, arg, **kwargs)
A:sympy.core.expr.startswith->getattr(order, 'startswith', None)
A:sympy.core.expr.reverse->startswith('rev-')
A:sympy.core.expr.monom_key->monomial_key(order)
A:sympy.core.expr.monom->neg(monom_key(monom))
A:sympy.core.expr.ncpart->tuple(ncpart)
A:sympy.core.expr.poly->Poly(self, *gens, **args)
A:sympy.core.expr.add_args->sorted(Add.make_args(self), key=key)
A:sympy.core.expr.mul_args->sorted(Mul.make_args(add_args[1]), key=key)
A:sympy.core.expr.(key, reverse)->self._parse_order(order)
A:sympy.core.expr.(terms, gens)->self.as_terms()
A:sympy.core.expr.ordered->sorted(terms, key=key, reverse=reverse)
A:sympy.core.expr.(coeff, _term)->term.as_coeff_Mul()
A:sympy.core.expr.(base, exp)->decompose_power(factor)
A:sympy.core.expr.gens->sorted(gens, key=default_sort_key)
A:sympy.core.expr.o->collect(self, x).getO()
A:sympy.core.expr.syms->set(map(sympify, syms))
A:sympy.core.expr.oi->oi.subs(x, Dummy('x', positive=True)).subs(x, Dummy('x', positive=True))
A:sympy.core.expr.clen->len(c)
A:sympy.core.expr.c->sympy.functions.elementary.complexes.conjugate.subs(d, log(x)).subs(d, log(x))
A:sympy.core.expr.xargs->mul.Mul.make_args(x)
A:sympy.core.expr.d->Dummy('logx')
A:sympy.core.expr.rv->Rational(xr, Pow(10, shift))
A:sympy.core.expr.(c_part, nc_part)->zip(*[i.args_cnc() for i in rv.args])
A:sympy.core.expr.(xargs, nx)->sympify(symbols[0]).args_cnc(cset=True, warn=bool(not x_c))
A:sympy.core.expr.(margs, nc)->sympify(a).args_cnc(cset=True, warn=bool(not self_c))
A:sympy.core.expr.resid->margs.difference(xargs)
A:sympy.core.expr.ii->find(n, nx, right)
A:sympy.core.expr.beg->reduce(incommon, (n[1] for n in co))
A:sympy.core.expr.gcdc->gcdc.intersection(co[i][0]).intersection(co[i][0])
A:sympy.core.expr.end->list(reversed(reduce(incommon, (list(reversed(n[1])) for n in co))))
A:sympy.core.expr.sym->set()
A:sympy.core.expr.has_other->series.removeO().has(*other)
A:sympy.core.expr.(args, nc)->self.args_cnc()
A:sympy.core.expr.(c, m)->ai.as_coeff_Mul()
A:sympy.core.expr.d[k]->Add(*v)
A:sympy.core.expr.(ind, dep)->self.as_independent(*syms, as_Add=True)
A:sympy.core.expr.(c, x)->int(r).as_coeff_mul(*syms)
A:sympy.core.expr.di->defaultdict(int)
A:sympy.core.expr.(c, r)->self.as_coeff_Mul(rational=True)
A:sympy.core.expr.(n, d)->fraction(self)
A:sympy.core.expr.(cc, pc)->sympy.functions.elementary.complexes.conjugate.subs(d, log(x)).subs(d, log(x)).primitive()
A:sympy.core.expr.(a, b)->sympy.functions.elementary.complexes.conjugate.subs(d, log(x)).subs(d, log(x)).as_two_terms()
A:sympy.core.expr.(cs, ps)->self.primitive()
A:sympy.core.expr.xc->cs.extract_multiplicatively(c)
A:sympy.core.expr.newarg->_sympify(arg).extract_multiplicatively(c)
A:sympy.core.expr.(sb, se)->self.as_base_exp()
A:sympy.core.expr.(cb, ce)->sympy.functions.elementary.complexes.conjugate.subs(d, log(x)).subs(d, log(x)).as_base_exp()
A:sympy.core.expr.new_exp->self.exp.extract_additively(1)
A:sympy.core.expr.(co, t)->self.as_coeff_Add()
A:sympy.core.expr.xa->coc.extract_additively(ac)
A:sympy.core.expr.co->self.coeff(at)
A:sympy.core.expr.(h, t)->sympy.functions.elementary.complexes.conjugate.subs(d, log(x)).subs(d, log(x)).as_coeff_Add()
A:sympy.core.expr.(sh, st)->self.as_coeff_Add()
A:sympy.core.expr.xa2->st.extract_additively(t)
A:sympy.core.expr.(co, diff)->_corem(self, c)
A:sympy.core.expr.(ac, at)->sympify(a).as_coeff_Mul()
A:sympy.core.expr.(coc, cot)->self.coeff(at).as_coeff_Add()
A:sympy.core.expr.(coeff, tail)->term.as_coeff_Mul(rational=True)
A:sympy.core.expr.nc->sympy.functions.elementary.complexes.conjugate.subs(d, log(x)).subs(d, log(x)).extract_additively(1)
A:sympy.core.expr.x0->sympify(x0)
A:sympy.core.expr.cdir->sign(x0).simplify()
A:sympy.core.expr.s->collect(self, x)
A:sympy.core.expr.xpos->abs(x.n())
A:sympy.core.expr.s1->s1.removeO().removeO()
A:sympy.core.expr.ngot->collect(self, x).getO().getn()
A:sympy.core.expr.newn->s1.removeO().removeO().getn()
A:sympy.core.expr.s1done->s1.removeO().removeO().doit()
A:sympy.core.expr.ndo->len(si.args)
A:sympy.core.expr.do->(si - yielded + o).removeO()
A:sympy.core.expr.(om, exps)->mrv(self, x)
A:sympy.core.expr.k->Dummy('k', positive=True)
A:sympy.core.expr.(func, logw)->rewrite(exps, om, x, k)
A:sympy.core.expr.res->res.subs(logx, log(x)).subs(logx, log(x))
A:sympy.core.expr.logw->log(1 / res)
A:sympy.core.expr.terms->sorted(Add.make_args(s.removeO()), key=lambda i: int(i.as_coeff_exponent(k)[1]))
A:sympy.core.expr.(coeff, expo)->t.as_coeff_exponent(k)
A:sympy.core.expr.snew->exps.pop().as_coefficient(ipi).aseries(x, n, bound=bound - 1)
A:sympy.core.expr._x->Dummy('x')
A:sympy.core.expr.series->self._eval_nseries(x, n=n, logx=logx, cdir=cdir).removeO()
A:sympy.core.expr.e->self._eval_nseries(x, n=n, logx=logx, cdir=cdir).removeO().removeO()
A:sympy.core.expr.(c, p)->collect(self, x).as_coeff_mul(x)
A:sympy.core.expr.(b, e)->p[0].as_base_exp()
A:sympy.core.expr.l->l.subs(log(x), d).subs(log(x), d)
A:sympy.core.expr.(c, e)->l.subs(log(x), d).subs(log(x), d).as_coeff_exponent(x)
A:sympy.core.expr.(real, imag)->self.as_real_imag(**hints)
A:sympy.core.expr.(arg, arghit)->Expr._expand_hint(arg, hint, **hints)
A:sympy.core.expr.newexpr->getattr(expr, hint)(**hints)
A:sympy.core.expr.(expr, hit)->Expr._expand_hint(expr, hint, deep=deep, **hints)
A:sympy.core.expr.(expr, _)->Expr._expand_hint(expr, '_eval_expand_log', deep=deep, **hints)
A:sympy.core.expr.modulus->sympify(modulus)
A:sympy.core.expr.(r, i)->sympify(symbols[0]).as_real_imag()
A:sympy.core.expr.p->as_int(n or 0)
A:sympy.core.expr.digits_to_decimal->_mag(x)
A:sympy.core.expr.dps->max(15, allow)
A:sympy.core.expr.allow->min(allow, dps)
A:sympy.core.expr.xi->Integer(xf)
A:sympy.core.expr.xr->round(xi.p, ip)
A:sympy.core.expr.mag_first_dig->int(ceil(Float(mpf_log(xpos._mpf_, 53)) / log(10)))
A:sympy.core.expr.ret->_sympify(arg).search_index(elem)
sympy.AtomicExpr(Atom,Expr)
sympy.Expr(Basic,EvalfMixin)
sympy.UnevaluatedExpr(cls,arg,**kwargs)
sympy.core.expr.AtomicExpr(Atom,Expr)
sympy.core.expr.AtomicExpr._eval_derivative(self,s)
sympy.core.expr.AtomicExpr._eval_derivative_n_times(self,s,n)
sympy.core.expr.AtomicExpr._eval_is_algebraic_expr(self,syms)
sympy.core.expr.AtomicExpr._eval_is_meromorphic(self,x,a)
sympy.core.expr.AtomicExpr._eval_is_polynomial(self,syms)
sympy.core.expr.AtomicExpr._eval_is_rational_function(self,syms)
sympy.core.expr.AtomicExpr._eval_nseries(self,x,n,logx,cdir=0)
sympy.core.expr.AtomicExpr.expr_free_symbols(self)
sympy.core.expr.Expr(Basic,EvalfMixin)
sympy.core.expr.Expr.__abs__(self)->Expr
sympy.core.expr.Expr.__add__(self,other)
sympy.core.expr.Expr.__complex__(self)
sympy.core.expr.Expr.__divmod__(self,other)
sympy.core.expr.Expr.__float__(self)
sympy.core.expr.Expr.__floordiv__(self,other)
sympy.core.expr.Expr.__format__(self,format_spec:str)
sympy.core.expr.Expr.__ge__(self,other)
sympy.core.expr.Expr.__gt__(self,other)
sympy.core.expr.Expr.__int__(self)
sympy.core.expr.Expr.__le__(self,other)
sympy.core.expr.Expr.__lt__(self,other)
sympy.core.expr.Expr.__mod__(self,other)
sympy.core.expr.Expr.__mul__(self,other)
sympy.core.expr.Expr.__neg__(self)
sympy.core.expr.Expr.__pos__(self)
sympy.core.expr.Expr.__pow__(self,other,mod=None)->Expr
sympy.core.expr.Expr.__radd__(self,other)
sympy.core.expr.Expr.__rdivmod__(self,other)
sympy.core.expr.Expr.__rfloordiv__(self,other)
sympy.core.expr.Expr.__rmod__(self,other)
sympy.core.expr.Expr.__rmul__(self,other)
sympy.core.expr.Expr.__rpow__(self,other)
sympy.core.expr.Expr.__rsub__(self,other)
sympy.core.expr.Expr.__rtruediv__(self,other)
sympy.core.expr.Expr.__sub__(self,other)
sympy.core.expr.Expr.__truediv__(self,other)
sympy.core.expr.Expr.__trunc__(self)
sympy.core.expr.Expr._add_handler(self)
sympy.core.expr.Expr._diff_wrt(self)
sympy.core.expr.Expr._eval_adjoint(self)
sympy.core.expr.Expr._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.core.expr.Expr._eval_conjugate(self)
sympy.core.expr.Expr._eval_derivative_matrix_lines(self,x)
sympy.core.expr.Expr._eval_expand_complex(self,**hints)
sympy.core.expr.Expr._eval_interval(self,x,a,b)
sympy.core.expr.Expr._eval_is_algebraic_expr(self,syms)
sympy.core.expr.Expr._eval_is_extended_negative(self)
sympy.core.expr.Expr._eval_is_extended_positive(self)
sympy.core.expr.Expr._eval_is_extended_positive_negative(self,positive)
sympy.core.expr.Expr._eval_is_meromorphic(self,x,a)
sympy.core.expr.Expr._eval_is_polynomial(self,syms)
sympy.core.expr.Expr._eval_is_rational_function(self,syms)
sympy.core.expr.Expr._eval_lseries(self,x,logx=None,cdir=0)
sympy.core.expr.Expr._eval_nseries(self,x,n,logx,cdir)
sympy.core.expr.Expr._eval_power(self,other)
sympy.core.expr.Expr._eval_transpose(self)
sympy.core.expr.Expr._expand_hint(expr,hint,deep=True,**hints)
sympy.core.expr.Expr._from_mpmath(x,prec)
sympy.core.expr.Expr._hashable_content(self)
sympy.core.expr.Expr._mul_handler(self)
sympy.core.expr.Expr._parse_order(cls,order)
sympy.core.expr.Expr._pow(self,other)
sympy.core.expr.Expr._random(self,n=None,re_min=-1,im_min=-1,re_max=1,im_max=1)
sympy.core.expr.Expr.adjoint(self)
sympy.core.expr.Expr.apart(self,x=None,**args)
sympy.core.expr.Expr.args_cnc(self,cset=False,warn=True,split_1=True)
sympy.core.expr.Expr.as_base_exp(self)->tuple[Expr, Expr]
sympy.core.expr.Expr.as_coeff_Add(self,rational=False)->tuple['Number', Expr]
sympy.core.expr.Expr.as_coeff_Mul(self,rational:bool=False)->tuple['Number', Expr]
sympy.core.expr.Expr.as_coeff_add(self,*deps)->tuple[Expr, tuple[Expr, ...]]
sympy.core.expr.Expr.as_coeff_exponent(self,x)->tuple[Expr, Expr]
sympy.core.expr.Expr.as_coeff_mul(self,*deps,**kwargs)->tuple[Expr, tuple[Expr, ...]]
sympy.core.expr.Expr.as_coefficient(self,expr)
sympy.core.expr.Expr.as_coefficients_dict(self,*syms)
sympy.core.expr.Expr.as_content_primitive(self,radical=False,clear=True)
sympy.core.expr.Expr.as_expr(self,*gens)
sympy.core.expr.Expr.as_independent(self,*deps,**hint)->tuple[Expr, Expr]
sympy.core.expr.Expr.as_leading_term(self,*symbols,logx=None,cdir=0)
sympy.core.expr.Expr.as_numer_denom(self)
sympy.core.expr.Expr.as_ordered_factors(self,order=None)
sympy.core.expr.Expr.as_ordered_terms(self,order=None,data=False)
sympy.core.expr.Expr.as_poly(self,*gens,**args)
sympy.core.expr.Expr.as_powers_dict(self)
sympy.core.expr.Expr.as_real_imag(self,deep=True,**hints)
sympy.core.expr.Expr.as_terms(self)
sympy.core.expr.Expr.aseries(self,x=None,n=6,bound=0,hir=False)
sympy.core.expr.Expr.cancel(self,*gens,**args)
sympy.core.expr.Expr.coeff(self,x,n=1,right=False,_first=True)
sympy.core.expr.Expr.collect(self,syms,func=None,evaluate=True,exact=False,distribute_order_term=True)
sympy.core.expr.Expr.combsimp(self)
sympy.core.expr.Expr.compute_leading_term(self,x,logx=None)
sympy.core.expr.Expr.conjugate(self)
sympy.core.expr.Expr.could_extract_minus_sign(self)
sympy.core.expr.Expr.count_ops(self,visual=None)
sympy.core.expr.Expr.diff(self,*symbols,**assumptions)
sympy.core.expr.Expr.dir(self,x,cdir)
sympy.core.expr.Expr.equals(self,other,failing_expression=False)
sympy.core.expr.Expr.expand(self,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.core.expr.Expr.expr_free_symbols(self)
sympy.core.expr.Expr.extract_additively(self,c)
sympy.core.expr.Expr.extract_branch_factor(self,allow_half=False)
sympy.core.expr.Expr.extract_multiplicatively(self,c)
sympy.core.expr.Expr.factor(self,*gens,**args)
sympy.core.expr.Expr.fourier_series(self,limits=None)
sympy.core.expr.Expr.fps(self,x=None,x0=0,dir=1,hyper=True,order=4,rational=True,full=False)
sympy.core.expr.Expr.gammasimp(self)
sympy.core.expr.Expr.getO(self)
sympy.core.expr.Expr.getn(self)
sympy.core.expr.Expr.integrate(self,*args,**kwargs)
sympy.core.expr.Expr.invert(self,g,*gens,**args)
sympy.core.expr.Expr.is_algebraic_expr(self,*syms)
sympy.core.expr.Expr.is_constant(self,*wrt,**flags)
sympy.core.expr.Expr.is_meromorphic(self,x,a)
sympy.core.expr.Expr.is_number(self)
sympy.core.expr.Expr.is_polynomial(self,*syms)
sympy.core.expr.Expr.is_rational_function(self,*syms)
sympy.core.expr.Expr.leadterm(self,x,logx=None,cdir=0)
sympy.core.expr.Expr.limit(self,x,xlim,dir='+')
sympy.core.expr.Expr.lseries(self,x=None,x0=0,dir='+',logx=None,cdir=0)
sympy.core.expr.Expr.normal(self)
sympy.core.expr.Expr.nseries(self,x=None,x0=0,n=6,dir='+',logx=None,cdir=0)
sympy.core.expr.Expr.nsimplify(self,constants=(),tolerance=None,full=False)
sympy.core.expr.Expr.powsimp(self,*args,**kwargs)
sympy.core.expr.Expr.primitive(self)
sympy.core.expr.Expr.radsimp(self,**kwargs)
sympy.core.expr.Expr.ratsimp(self)
sympy.core.expr.Expr.removeO(self)
sympy.core.expr.Expr.round(self,n=None)
sympy.core.expr.Expr.separate(self,deep=False,force=False)
sympy.core.expr.Expr.series(self,x=None,x0=0,n=6,dir='+',logx=None,cdir=0)
sympy.core.expr.Expr.sort_key(self,order=None)
sympy.core.expr.Expr.taylor_term(self,n,x,*previous_terms)
sympy.core.expr.Expr.together(self,*args,**kwargs)
sympy.core.expr.Expr.transpose(self)
sympy.core.expr.Expr.trigsimp(self,**args)
sympy.core.expr.ExprBuilder(self,op,args=None,validator=None,check=True)
sympy.core.expr.ExprBuilder.__getitem__(self,item)
sympy.core.expr.ExprBuilder.__repr__(self)
sympy.core.expr.ExprBuilder._build_args(args)
sympy.core.expr.ExprBuilder.append_argument(self,arg,check=True)
sympy.core.expr.ExprBuilder.build(self,check=True)
sympy.core.expr.ExprBuilder.search_element(self,elem)
sympy.core.expr.ExprBuilder.validate(self)
sympy.core.expr.UnevaluatedExpr(cls,arg,**kwargs)
sympy.core.expr.UnevaluatedExpr.doit(self,**hints)
sympy.core.expr._corem(eq,c)
sympy.core.expr._mag(x)
sympy.core.expr.unchanged(func,*args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/backend.py----------------------------------------
A:sympy.core.backend.USE_SYMENGINE->os.getenv('USE_SYMENGINE', '0')
A:sympy.core.backend.Mnew->Mnew.as_immutable().as_immutable()
sympy.core.backend._simplify_matrix(M)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/basic.py----------------------------------------
A:sympy.core.basic.i1->core.ordering_of_classes.index(n1)
A:sympy.core.basic.i2->core.ordering_of_classes.index(n2)
A:sympy.core.basic.obj->f(obj)
A:sympy.core.basic.h->hash((type(self).__name__,) + self._hashable_content())
A:sympy.core.basic.c->Basic.compare(a3, b3)
A:sympy.core.basic.st->self._hashable_content()
A:sympy.core.basic.ot->other._hashable_content()
A:sympy.core.basic.r_a->a.match(p1 * p2 ** p3)
A:sympy.core.basic.r_b->b.match(p1 * p2 ** p3)
A:sympy.core.basic.conv->sympify._external_converter.get(superclass)
A:sympy.core.basic.s->set(patterns)
A:sympy.core.basic.o->o.as_dummy().as_dummy()
A:sympy.core.basic.dummy->dummy_symbols.pop()
A:sympy.core.basic.symbol->symbols.pop()
A:sympy.core.basic.tmp->dummy_symbols.pop().__class__()
A:sympy.core.basic.types->tuple(type_set)
A:sympy.core.basic.nodes->_preorder_traversal(self)
A:sympy.core.basic.bound->set(x.bound_symbols)
A:sympy.core.basic.x->x.xreplace(x.canonical_variables).xreplace(x.canonical_variables)
A:sympy.core.basic.dums->numbered_symbols('_')
A:sympy.core.basic.d->arg._subs(old, new, **hints).xreplace(d).matches(other_arg, d, old=old)
A:sympy.core.basic.sequence->dict(sequence)
A:sympy.core.basic.simultaneous->kwargs.pop('simultaneous', False)
A:sympy.core.basic.k->list(ordered(sequence, default=False, keys=(lambda x: -_nodes(x), default_sort_key)))
A:sympy.core.basic.m->canonical(pattern).matches(canonical(self), old=old)
A:sympy.core.basic.rv->walk(self, rec_replace)
A:sympy.core.basic.args->getattr(rv, 'args', None)
A:sympy.core.basic.arg->arg._subs(old, new, **hints)._subs(old, new, **hints)
A:sympy.core.basic.hack2->hints.get('hack2', False)
A:sympy.core.basic.nonnumber->self.func(*nonnumber)
A:sympy.core.basic.(value, _)->self._xreplace(rule)
A:sympy.core.basic._xreplace->getattr(a, '_xreplace', None)
A:sympy.core.basic.a_xr->_xreplace(rule)
A:sympy.core.basic.type_set->set()
A:sympy.core.basic.p_set->set()
A:sympy.core.basic.p->_sympify(p)
A:sympy.core.basic.match->i._has_matcher()
A:sympy.core.basic.query->_sympify(query)
A:sympy.core.basic.value->_sympify(value)
A:sympy.core.basic.newargs->tuple([walk(a, F) for a in args])
A:sympy.core.basic.result->_query(expr)
A:sympy.core.basic.v->_value(expr, result)
A:sympy.core.basic.results->list(filter(query, _preorder_traversal(self)))
A:sympy.core.basic.expr->sympify(expr)
A:sympy.core.basic.repl_dict->repl_dict.copy().copy()
A:sympy.core.basic.pattern->tuple((p for p in pattern if self.has(p)))
A:sympy.core.basic.wild->tuple((p for p in pattern if self.has(p))).atoms(Wild, WildFunction, WildTensor, WildTensorIndex, WildTensorHead)
A:sympy.core.basic.wpat->tuple((p for p in pattern if self.has(p))).xreplace(m)
A:sympy.core.basic.w->tuple((p for p in pattern if self.has(p))).xreplace(m).matches(self, old=old)
A:sympy.core.basic.obj2->f(obj)._eval_derivative(s)
A:sympy.core.basic.deep->hints.pop('deep', True)
A:sympy.core.basic.meth->getattr(self, method, None)
A:sympy.core.basic.rewritten->self._eval_rewrite(rule, args, **hints)
A:sympy.core.basic.postprocessors->defaultdict(list)
A:sympy.core.basic.pot->_preorder_traversal(e)
A:sympy.core.basic.seen->set()
A:sympy.core.basic.free->getattr(e, 'free_symbols', None)
A:sympy.core.basic.atoms->set()
A:sympy.core.basic.preorder_traversal->deprecated('\n    Using preorder_traversal from the sympy.core.basic submodule is\n    deprecated.\n\n    Instead, use preorder_traversal from the top-level sympy namespace, like\n\n        sympy.preorder_traversal\n    ', deprecated_since_version='1.10', active_deprecations_target='deprecated-traversal-functions-moved')(_preorder_traversal)
sympy.Atom(Basic)
sympy.Basic(cls,*args)
sympy.core.basic.Atom(Basic)
sympy.core.basic.Atom._eval_simplify(self,**kwargs)
sympy.core.basic.Atom._sorted_args(self)
sympy.core.basic.Atom.class_key(cls)
sympy.core.basic.Atom.doit(self,**hints)
sympy.core.basic.Atom.matches(self,expr,repl_dict=None,old=False)
sympy.core.basic.Atom.sort_key(self,order=None)
sympy.core.basic.Atom.xreplace(self,rule,hack2=False)
sympy.core.basic.Basic(cls,*args)
sympy.core.basic.Basic.__eq__(self,other)
sympy.core.basic.Basic.__getnewargs__(self)
sympy.core.basic.Basic.__getstate__(self)
sympy.core.basic.Basic.__hash__(self)->int
sympy.core.basic.Basic.__init_subclass__(cls)
sympy.core.basic.Basic.__ne__(self,other)
sympy.core.basic.Basic.__reduce_ex__(self,protocol)
sympy.core.basic.Basic.__setstate__(self,state)
sympy.core.basic.Basic.__sympy__(self)
sympy.core.basic.Basic._compare_pretty(a,b)
sympy.core.basic.Basic._do_eq_sympify(self,other)
sympy.core.basic.Basic._eval_derivative_n_times(self,s,n)
sympy.core.basic.Basic._eval_rewrite(self,rule,args,**hints)
sympy.core.basic.Basic._eval_subs(self,old,new)
sympy.core.basic.Basic._exec_constructor_postprocessors(cls,obj)
sympy.core.basic.Basic._has(self,iterargs,*patterns)
sympy.core.basic.Basic._hashable_content(self)
sympy.core.basic.Basic._recursive_call(expr_to_call,on_args)
sympy.core.basic.Basic._rewrite(self,pattern,rule,method,**hints)
sympy.core.basic.Basic._sage_(self)
sympy.core.basic.Basic._sorted_args(self)
sympy.core.basic.Basic._subs(self,old,new,**hints)
sympy.core.basic.Basic._xreplace(self,rule)
sympy.core.basic.Basic.args(self)->tuple[Basic, ...]
sympy.core.basic.Basic.as_content_primitive(self,radical=False,clear=True)
sympy.core.basic.Basic.as_dummy(self)
sympy.core.basic.Basic.assumptions0(self)
sympy.core.basic.Basic.atoms(self,*types)
sympy.core.basic.Basic.canonical_variables(self)
sympy.core.basic.Basic.class_key(cls)
sympy.core.basic.Basic.compare(self,other)
sympy.core.basic.Basic.copy(self)
sympy.core.basic.Basic.could_extract_minus_sign(self)
sympy.core.basic.Basic.count(self,query)
sympy.core.basic.Basic.count_ops(self,visual=None)
sympy.core.basic.Basic.doit(self,**hints)
sympy.core.basic.Basic.dummy_eq(self,other,symbol=None)
sympy.core.basic.Basic.expr_free_symbols(self)
sympy.core.basic.Basic.find(self,query,group=False)
sympy.core.basic.Basic.free_symbols(self)->set[Basic]
sympy.core.basic.Basic.fromiter(cls,args,**assumptions)
sympy.core.basic.Basic.func(self)
sympy.core.basic.Basic.has(self,*patterns)
sympy.core.basic.Basic.has_free(self,*patterns)
sympy.core.basic.Basic.has_xfree(self,s:set[Basic])
sympy.core.basic.Basic.is_comparable(self)
sympy.core.basic.Basic.is_hypergeometric(self,k)
sympy.core.basic.Basic.match(self,pattern,old=False)
sympy.core.basic.Basic.matches(self,expr,repl_dict=None,old=False)
sympy.core.basic.Basic.rcall(self,*args)
sympy.core.basic.Basic.refine(self,assumption=True)
sympy.core.basic.Basic.replace(self,query,value,map=False,simultaneous=True,exact=None)
sympy.core.basic.Basic.rewrite(self,*args,deep=True,**hints)
sympy.core.basic.Basic.simplify(self,**kwargs)
sympy.core.basic.Basic.sort_key(self,order=None)
sympy.core.basic.Basic.subs(self,*args,**kwargs)
sympy.core.basic.Basic.xreplace(self,rule)
sympy.core.basic._aresame(a,b)
sympy.core.basic._atomic(e,recursive=False)
sympy.core.basic._make_find_query(query)
sympy.core.basic._ne(a,b)
sympy.core.basic._old_compare(x:type,y:type)->int
sympy.core.basic.as_Basic(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/core.py----------------------------------------
sympy.core.core.Registry
sympy.core.core.Registry.__delattr__(self,name)
sympy.core.core.Registry.__setattr__(self,name,obj)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/alphabets.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/facts.py----------------------------------------
A:sympy.core.facts.full_implications->defaultdict(set)
A:sympy.core.facts.literals->set().union(*map(set, full_implications))
A:sympy.core.facts.res->defaultdict(set)
A:sympy.core.facts.na->Not(a)
A:sympy.core.facts.bargs->set(bcond.args)
A:sympy.core.facts.bimpl_impl->x_impl.get(bimpl)
A:sympy.core.facts.prereq->defaultdict(set)
A:sympy.core.facts.self._rules_seen->set()
A:sympy.core.facts.sorted_bargs->sorted(b.args, key=str)
A:sympy.core.facts.sorted_aargs->sorted(a.args, key=str)
A:sympy.core.facts.rules->rules.splitlines().splitlines()
A:sympy.core.facts.P->Prover()
A:sympy.core.facts.(a, op, b)->rule.split(None, 2)
A:sympy.core.facts.a->logic.Logic.fromstring(a)
A:sympy.core.facts.b->logic.Logic.fromstring(b)
A:sympy.core.facts.impl_a->deduce_alpha_implications(P.rules_alpha)
A:sympy.core.facts.impl_ab->apply_beta_to_alpha_route(impl_a, P.rules_beta)
A:sympy.core.facts.beta_triggers->defaultdict(set)
A:sympy.core.facts.rel_prereq->rules_2prereq(full_implications)
A:sympy.core.facts.self->cls('')
A:sympy.core.facts.d->defaultdict(set)
A:sympy.core.facts.self.defined_facts->set(data['defined_facts'])
A:sympy.core.facts.reverse_implications->defaultdict(list)
A:sympy.core.facts.setstr->', '.join(map(str, sorted(pre)))
A:sympy.core.facts.facts->facts.items().items()
A:sympy.core.facts.beta_maytrigger->set()
sympy.core.facts.FactKB(self,rules)
sympy.core.facts.FactKB.__str__(self)
sympy.core.facts.FactKB._tell(self,k,v)
sympy.core.facts.FactKB.deduce_all_facts(self,facts)
sympy.core.facts.FactRules(self,rules)
sympy.core.facts.FactRules._beta_rules_lines(self)
sympy.core.facts.FactRules._defined_facts_lines(self)
sympy.core.facts.FactRules._from_python(cls,data:dict)
sympy.core.facts.FactRules._full_implications_lines(self)
sympy.core.facts.FactRules._prereq_lines(self)
sympy.core.facts.FactRules._to_python(self)->str
sympy.core.facts.FactRules.print_rules(self)->Iterator[str]
sympy.core.facts.InconsistentAssumptions(ValueError)
sympy.core.facts.InconsistentAssumptions.__str__(self)
sympy.core.facts.Prover(self)
sympy.core.facts.Prover._process_rule(self,a,b)
sympy.core.facts.Prover.process_rule(self,a,b)
sympy.core.facts.Prover.rules_alpha(self)
sympy.core.facts.Prover.rules_beta(self)
sympy.core.facts.Prover.split_alpha_beta(self)
sympy.core.facts.TautologyDetected(Exception)
sympy.core.facts._as_pair(atom)
sympy.core.facts._base_fact(atom)
sympy.core.facts.apply_beta_to_alpha_route(alpha_implications,beta_rules)
sympy.core.facts.deduce_alpha_implications(implications)
sympy.core.facts.rules_2prereq(rules)
sympy.core.facts.transitive_closure(implications)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/coreerrors.py----------------------------------------
sympy.core.coreerrors.BaseCoreError(Exception)
sympy.core.coreerrors.NonCommutativeExpression(BaseCoreError)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/evalf.py----------------------------------------
A:sympy.core.evalf.LG10->math.log(10, 2)
A:sympy.core.evalf.INF->float(mpmath_inf)
A:sympy.core.evalf.MINUS_INF->float(-mpmath_inf)
A:sympy.core.evalf.(h, t)->self._eval_evalf(prec).as_coeff_Add()
A:sympy.core.evalf.(c, i)->t.as_coeff_Mul()
A:sympy.core.evalf.re_size->fastlog(re)
A:sympy.core.evalf.im_size->fastlog(im)
A:sympy.core.evalf.absolute_error->max(absolute_err)
A:sympy.core.evalf.result->evalf(self, prec, {})
A:sympy.core.evalf.(abs_expr, _, acc, _)->evalf(abs(N(expr, prec + 2)), prec + 2, options)
A:sympy.core.evalf.res->pure_complex(v)
A:sympy.core.evalf.size_re->fastlog(re)
A:sympy.core.evalf.size_im->fastlog(im)
A:sympy.core.evalf.a->complex_accuracy(result)
A:sympy.core.evalf.gap->max(fastlog(ire) - ire_acc, fastlog(iim) - iim_acc)
A:sympy.core.evalf.(ire, iim, ire_acc, iim_acc)->evalf(re_im, size, options)
A:sympy.core.evalf.nint->from_int(nint)
A:sympy.core.evalf.s->options.get('subs', False)
A:sympy.core.evalf.re_im->Add(re_im, -nint, evaluate=False)
A:sympy.core.evalf.(x, _, x_acc, _)->evalf(re_im, 10, options)
A:sympy.core.evalf.(re_, re_acc)->calc_part(re(expr, evaluate=False), ire)
A:sympy.core.evalf.(im_, im_acc)->calc_part(im(expr, evaluate=False), iim)
A:sympy.core.evalf.arg->numbers.Float._new(t[0], 1)
A:sympy.core.evalf.rv->rv.round(1 - m).round(1 - m)
A:sympy.core.evalf.sum_bc->bitcount(sum_man)
A:sympy.core.evalf.(re, _, re_acc, _)->evalf(h, prec, options)
A:sympy.core.evalf.(im, _, im_acc, _)->evalf(h, prec, options)
A:sympy.core.evalf.oldmaxprec->options.get('maxprec', DEFAULT_MAXPREC)
A:sympy.core.evalf.options['maxprec']->min(oldmaxprec, 2 * prec)
A:sympy.core.evalf.n->terms.count(S.ComplexInfinity)
A:sympy.core.evalf.(re, re_acc)->add_terms([a[0::2] for a in terms if isinstance(a, tuple) and a[0]], prec, target_prec)
A:sympy.core.evalf.(im, im_acc)->add_terms([a[1::2] for a in terms if isinstance(a, tuple) and a[1]], prec, target_prec)
A:sympy.core.evalf.acc->min(acc, complex_accuracy((wre, wim, wre_acc, wim_acc)))
A:sympy.core.evalf.re->from_int(re.p)
A:sympy.core.evalf.im->from_int(im.p)
A:sympy.core.evalf.args->list(v.args)
A:sympy.core.evalf.num->numbers.Float._new(result[0], 1)
A:sympy.core.evalf.last->len(args)
A:sympy.core.evalf.args[-1]->(args[-1] * arg).expand()
A:sympy.core.evalf.(re, im, re_acc, im_acc)->evalf(s, prec2, options)
A:sympy.core.evalf.v->self._eval_evalf(prec)
A:sympy.core.evalf.A->Wild('A', exclude=[x])
A:sympy.core.evalf.B->Wild('B', exclude=[x])
A:sympy.core.evalf.C->mpf_mul(re, wim, use_prec)
A:sympy.core.evalf.D->Wild('D')
A:sympy.core.evalf.z->mpf_pow_int(im, p, target_prec)
A:sympy.core.evalf.(re, im)->self._eval_evalf(prec).as_real_imag()
A:sympy.core.evalf.ysize->fastlog(y)
A:sympy.core.evalf.(yre, yim, _, _)->evalf(exp, prec, options)
A:sympy.core.evalf.(xre, xim, _, _)->evalf_add(add, prec, options)
A:sympy.core.evalf.xsize->fastlog(re)
A:sympy.core.evalf.y->func(re, prec, rnd)
A:sympy.core.evalf.expr->expr.subs(options['subs']).subs(options['subs'])
A:sympy.core.evalf.size->fastlog(re)
A:sympy.core.evalf.add->Add(S.NegativeOne, arg, evaluate=False)
A:sympy.core.evalf.(xre, xim, reacc, imacc)->evalf(arg, prec + 5, options)
A:sympy.core.evalf.b->b._eval_evalf(prec)._eval_evalf(prec)
A:sympy.core.evalf.newopts->options.copy()
A:sympy.core.evalf.x->x.subs(evalf_subs(prec, options['subs'])).subs(evalf_subs(prec, options['subs']))
A:sympy.core.evalf.xlow->as_mpmath(xlow, prec + 15, options)
A:sympy.core.evalf.xhigh->as_mpmath(xhigh, prec + 15, options)
A:sympy.core.evalf.max_real_term->max(max_real_term, fastlog(re))
A:sympy.core.evalf.max_imag_term->max(max_imag_term, fastlog(im))
A:sympy.core.evalf.m->fastlog(r)
A:sympy.core.evalf.period->as_mpmath(2 * S.Pi / m[A], prec + 15, options)
A:sympy.core.evalf.(result, quadrature_err)->quadts(f, [xlow, xhigh], error=1)
A:sympy.core.evalf.quadrature_error->fastlog(quadrature_err._mpf_)
A:sympy.core.evalf.(re_s, re_acc)->scaled_zero(int(-max(prec, max_real_term, quadrature_error)))
A:sympy.core.evalf.re_acc->int(-max(max_real_term - fastlog(re) - prec, quadrature_error))
A:sympy.core.evalf.(im_s, im_acc)->scaled_zero(int(-max(prec, max_imag_term, quadrature_error)))
A:sympy.core.evalf.im_acc->int(-max(max_imag_term - fastlog(im) - prec, quadrature_error))
A:sympy.core.evalf.maxprec->options.get('maxprec', INF)
A:sympy.core.evalf.accuracy->complex_accuracy(result)
A:sympy.core.evalf.workprec->min(workprec, maxprec)
A:sympy.core.evalf.npol->Poly(numer, n)
A:sympy.core.evalf.dpol->Poly(denom, n)
A:sympy.core.evalf.p->max(1, m + n + 1)
A:sympy.core.evalf.q->Poly(denom, n).degree()
A:sympy.core.evalf.hs->hypersimp(expr, n)
A:sympy.core.evalf.(num, den)->hypersimp(expr, n).as_numer_denom()
A:sympy.core.evalf.func1->lambdify(n, num)
A:sympy.core.evalf.func2->lambdify(n, den)
A:sympy.core.evalf.(h, g, p)->check_convergence(num, den, n)
A:sympy.core.evalf.term->expr.subs(options['subs']).subs(options['subs']).subs(n, 0)
A:sympy.core.evalf.ndig->prec_to_dps(prec)
A:sympy.core.evalf.k->int(k)
A:sympy.core.evalf.vf->Float(v, ndig)
A:sympy.core.evalf.(s, err)->expr.subs(options['subs']).subs(options['subs']).euler_maclaurin(m=m, n=n, eps=eps, eval_integral=False)
A:sympy.core.evalf.err->fastlog(evalf(abs(err), 20, options)[0])
A:sympy.core.evalf.(cached, cached_prec)->cache.get(x, (None, MINUS_INF))
A:sympy.core.evalf.r->self._eval_evalf(prec)
A:sympy.core.evalf.xe->x.subs(evalf_subs(prec, options['subs'])).subs(evalf_subs(prec, options['subs']))._eval_evalf(prec)
A:sympy.core.evalf.as_real_imag->getattr(xe, 'as_real_imag', None)
A:sympy.core.evalf.chop->options.get('chop', False)
A:sympy.core.evalf.chop_prec->int(round(-3.321 * math.log10(chop) + 2.5))
A:sympy.core.evalf.prec->dps_to_prec(n)
A:sympy.core.evalf.(r, _, _, _)->evalf(1 / eps, 1, {})
A:sympy.core.evalf.(c, d, _, _)->evalf(x, 1, {})
sympy.N(x,n=15,**options)
sympy.PrecisionExhausted(ArithmeticError)
sympy.core.evalf.EvalfMixin
sympy.core.evalf.EvalfMixin._eval_evalf(self,prec)
sympy.core.evalf.EvalfMixin._evalf(self,prec)
sympy.core.evalf.EvalfMixin._to_mpmath(self,prec,allow_ints=True)
sympy.core.evalf.EvalfMixin.evalf(self,n=15,subs=None,maxn=100,chop=False,strict=False,quad=None,verbose=False)
sympy.core.evalf.N(x,n=15,**options)
sympy.core.evalf.PrecisionExhausted(ArithmeticError)
sympy.core.evalf._create_evalf_table()
sympy.core.evalf._evalf_with_bounded_error(x:'Expr',eps:'Optional[Expr]'=None,m:int=0,options:Optional[OPT_DICT]=None)->TMP_RES
sympy.core.evalf.add_terms(terms:list,prec:int,target_prec:int)->tTuple[tUnion[MPF_TUP, SCALED_ZERO_TUP, None], Optional[int]]
sympy.core.evalf.as_mpmath(x:Any,prec:int,options:OPT_DICT)->tUnion[mpc, mpf]
sympy.core.evalf.bitcount(n)
sympy.core.evalf.check_convergence(numer:'Expr',denom:'Expr',n:'Symbol')->tTuple[int, Any, Any]
sympy.core.evalf.check_target(expr:'Expr',result:TMP_RES,prec:int)
sympy.core.evalf.chop_parts(value:TMP_RES,prec:int)->TMP_RES
sympy.core.evalf.complex_accuracy(result:TMP_RES)->tUnion[int, Any]
sympy.core.evalf.do_integral(expr:'Integral',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf(x:'Expr',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_abs(expr:'Abs',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_add(v:'Add',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_alg_num(a:'AlgebraicNumber',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_atan(v:'atan',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_ceiling(expr:'ceiling',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_exp(expr:'exp',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_float(expr:'Float',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_floor(expr:'floor',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_im(expr:'im',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_integer(expr:'Integer',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_integral(expr:'Integral',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_log(expr:'log',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_mul(v:'Mul',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_piecewise(expr:'Expr',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_pow(v:'Pow',prec:int,options)->TMP_RES
sympy.core.evalf.evalf_prod(expr:'Product',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_rational(expr:'Rational',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_re(expr:'re',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_subs(prec:int,subs:dict)->dict
sympy.core.evalf.evalf_sum(expr:'Sum',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_symbol(x:'Expr',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.evalf_trig(v:'Expr',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.fastlog(x:Optional[MPF_TUP])->tUnion[int, Any]
sympy.core.evalf.finalize_complex(re:MPF_TUP,im:MPF_TUP,prec:int)->TMP_RES
sympy.core.evalf.get_abs(expr:'Expr',prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.get_complex_part(expr:'Expr',no:int,prec:int,options:OPT_DICT)->TMP_RES
sympy.core.evalf.get_integer_part(expr:'Expr',no:int,options:OPT_DICT,return_ints=False)->tUnion[TMP_RES, tTuple[int, int]]
sympy.core.evalf.hypsum(expr:'Expr',n:'Symbol',start:int,prec:int)->mpf
sympy.core.evalf.iszero(mpf:tUnion[MPF_TUP,SCALED_ZERO_TUP,None],scaled=False)->Optional[bool]
sympy.core.evalf.pure_complex(v:'Expr',or_real=False)->tuple['Number', 'Number'] | None
sympy.core.evalf.quad_to_mpmath(q,ctx=None)
sympy.core.evalf.scaled_zero(mag:tUnion[SCALED_ZERO_TUP,int],sign=1)->tUnion[MPF_TUP, tTuple[SCALED_ZERO_TUP, int]]
sympy.evalf.EvalfMixin.evalf(self,n=15,subs=None,maxn=100,chop=False,strict=False,quad=None,verbose=False)
sympy.evalf.evalf(x:'Expr',prec:int,options:OPT_DICT)->TMP_RES


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/relational.py----------------------------------------
A:sympy.core.relational.(b, l)->rel.lhs.as_coeff_Add(rational=True)
A:sympy.core.relational.(m, lhs)->l.as_coeff_Mul(rational=True)
A:sympy.core.relational.cls->cls.ValidRelationOperator.get(rop, None).ValidRelationOperator.get(rop, None)
A:sympy.core.relational.args->tuple([i.canonical if isinstance(i, Relational) else i for i in self.args])
A:sympy.core.relational.r->r.func(constant, S.Zero).func(constant, S.Zero)
A:sympy.core.relational.LHS_CEMS->getattr(r.lhs, 'could_extract_minus_sign', None)
A:sympy.core.relational.RHS_CEMS->getattr(r.rhs, 'could_extract_minus_sign', None)
A:sympy.core.relational.(expr1, _)->ordered([r.lhs, -r.rhs])
A:sympy.core.relational.left->a.lhs.equals(b.lhs, failing_expression=failing_expression)
A:sympy.core.relational.right->a.rhs.equals(b.rhs, failing_expression=failing_expression)
A:sympy.core.relational.v->(a - b).evalf(2).n(2)
A:sympy.core.relational.free->list(ordered(free))
A:sympy.core.relational.x->list(ordered(free)).pop()
A:sympy.core.relational.(m, b)->linear_coeffs(e.rewrite(Add, evaluate=False), x)
A:sympy.core.relational.p->poly(dif, x)
A:sympy.core.relational.c->poly(dif, x).all_coeffs()
A:sympy.core.relational.scale->gcd(m)
A:sympy.core.relational.m->linear_coeffs(dif, *free)
A:sympy.core.relational.nzm->list(filter(lambda f: f[0] != 0, list(zip(m, free))))
A:sympy.core.relational.newexpr->Add(*[i * j for (i, j) in nzm])
A:sympy.core.relational.xset->ConditionSet(x, self, S.Reals)
A:sympy.core.relational.evaluate->options.pop('evaluate', global_parameters.evaluate)
A:sympy.core.relational.lhs->_sympify(lhs)
A:sympy.core.relational.rhs->_sympify(rhs)
A:sympy.core.relational.val->cls.ValidRelationOperator.get(rop, None).ValidRelationOperator.get(rop, None)._eval_fuzzy_relation(lhs, rhs)
A:sympy.core.relational.e->super()._eval_simplify(**kwargs)
A:sympy.core.relational.enew->super()._eval_simplify(**kwargs).func(m * x, -b)
A:sympy.core.relational.eq->Equality(*self.args)._eval_simplify(**kwargs)
A:sympy.core.relational.dif->(a - b).evalf(2)
A:sympy.core.relational.retval->_eval_is_eq(rhs, lhs)
A:sympy.core.relational.n2->_n2(lhs, rhs)
A:sympy.core.relational._lhs->AssumptionsWrapper(lhs, assumptions)
A:sympy.core.relational._rhs->AssumptionsWrapper(rhs, assumptions)
A:sympy.core.relational.rv->fuzzy_bool(is_eq(*args, assumptions))
A:sympy.core.relational.eval_func->getattr(side1, '_eval_Eq', None)
A:sympy.core.relational.lhs_ri->split_real_imag(lhs)
A:sympy.core.relational.rhs_ri->split_real_imag(rhs)
A:sympy.core.relational.eq_real->is_eq(Add(*lhs_ri['real']), Add(*rhs_ri['real']), assumptions)
A:sympy.core.relational.eq_imag->is_eq(I * Add(*lhs_ri['imag']), I * Add(*rhs_ri['imag']), assumptions)
A:sympy.core.relational.arglhs->arg(lhs)
A:sympy.core.relational.argrhs->arg(rhs)
A:sympy.core.relational._dif->AssumptionsWrapper(dif, assumptions)
A:sympy.core.relational.(n, d)->(a - b).evalf(2).as_numer_denom()
A:sympy.core.relational._n->AssumptionsWrapper(n, assumptions)
A:sympy.core.relational._d->AssumptionsWrapper(d, assumptions)
A:sympy.core.relational.(l, r)->clear_coefficients(d, S.Infinity)
sympy.Equality(cls,lhs,rhs,**options)
sympy.GreaterThan(_Greater)
sympy.LessThan(_Less)
sympy.StrictGreaterThan(_Greater)
sympy.StrictLessThan(_Less)
sympy.Unequality(cls,lhs,rhs,**options)
sympy.core.relational.Equality(cls,lhs,rhs,**options)
sympy.core.relational.Equality._eval_relation(cls,lhs,rhs)
sympy.core.relational.Equality._eval_rewrite_as_Add(self,*args,**kwargs)
sympy.core.relational.Equality._eval_simplify(self,**kwargs)
sympy.core.relational.Equality.as_poly(self,*gens,**kwargs)
sympy.core.relational.Equality.binary_symbols(self)
sympy.core.relational.Equality.integrate(self,*args,**kwargs)
sympy.core.relational.GreaterThan(_Greater)
sympy.core.relational.GreaterThan._eval_fuzzy_relation(cls,lhs,rhs)
sympy.core.relational.GreaterThan.strict(self)
sympy.core.relational.LessThan(_Less)
sympy.core.relational.LessThan._eval_fuzzy_relation(cls,lhs,rhs)
sympy.core.relational.LessThan.strict(self)
sympy.core.relational.Relational(cls,lhs,rhs,rop=None,**assumptions)
sympy.core.relational.Relational.__bool__(self)
sympy.core.relational.Relational._eval_as_set(self)
sympy.core.relational.Relational._eval_evalf(self,prec)
sympy.core.relational.Relational._eval_simplify(self,**kwargs)
sympy.core.relational.Relational._eval_trigsimp(self,**opts)
sympy.core.relational.Relational.binary_symbols(self)
sympy.core.relational.Relational.canonical(self)
sympy.core.relational.Relational.equals(self,other,failing_expression=False)
sympy.core.relational.Relational.expand(self,**kwargs)
sympy.core.relational.Relational.lhs(self)
sympy.core.relational.Relational.negated(self)
sympy.core.relational.Relational.reversed(self)
sympy.core.relational.Relational.reversedsign(self)
sympy.core.relational.Relational.rhs(self)
sympy.core.relational.Relational.strict(self)
sympy.core.relational.Relational.weak(self)
sympy.core.relational.StrictGreaterThan(_Greater)
sympy.core.relational.StrictGreaterThan._eval_fuzzy_relation(cls,lhs,rhs)
sympy.core.relational.StrictGreaterThan.weak(self)
sympy.core.relational.StrictLessThan(_Less)
sympy.core.relational.StrictLessThan._eval_fuzzy_relation(cls,lhs,rhs)
sympy.core.relational.StrictLessThan.weak(self)
sympy.core.relational.Unequality(cls,lhs,rhs,**options)
sympy.core.relational.Unequality._eval_relation(cls,lhs,rhs)
sympy.core.relational.Unequality._eval_simplify(self,**kwargs)
sympy.core.relational.Unequality.binary_symbols(self)
sympy.core.relational._Greater(_Inequality)
sympy.core.relational._Greater.gts(self)
sympy.core.relational._Greater.lts(self)
sympy.core.relational._Inequality(cls,lhs,rhs,**options)
sympy.core.relational._Inequality._eval_relation(cls,lhs,rhs,**options)
sympy.core.relational._Less(_Inequality)
sympy.core.relational._Less.gts(self)
sympy.core.relational._Less.lts(self)
sympy.core.relational._canonical(cond)
sympy.core.relational._canonical_coeff(rel)
sympy.core.relational._eval_is_eq(lhs,rhs)
sympy.core.relational._eval_is_eq(lhs,rhs)
sympy.core.relational._eval_is_eq(lhs,rhs)
sympy.core.relational._eval_is_eq(lhs,rhs)
sympy.core.relational._eval_is_eq(lhs,rhs)
sympy.core.relational._eval_is_ge(lhs,rhs)
sympy.core.relational._n2(a,b)
sympy.core.relational._nontrivBool(side)
sympy.core.relational.is_eq(lhs,rhs,assumptions=None)
sympy.core.relational.is_ge(lhs,rhs,assumptions=None)
sympy.core.relational.is_gt(lhs,rhs,assumptions=None)
sympy.core.relational.is_le(lhs,rhs,assumptions=None)
sympy.core.relational.is_lt(lhs,rhs,assumptions=None)
sympy.core.relational.is_neq(lhs,rhs,assumptions=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/traversal.py----------------------------------------
A:sympy.core.traversal.void->i.canonical_variables.values()
A:sympy.core.traversal.self._pt->self._preorder_traversal(node, keys)
A:sympy.core.traversal.args->ordered(args)
A:sympy.core.traversal.rv->F(rv)
sympy.bottom_up(rv,F,atoms=False,nonbasic=False)
sympy.core.traversal.bottom_up(rv,F,atoms=False,nonbasic=False)
sympy.core.traversal.iterargs(expr)
sympy.core.traversal.iterfreeargs(expr,_first=True)
sympy.core.traversal.postorder_traversal(node,keys=None)
sympy.core.traversal.preorder_traversal(self,node,keys=None)
sympy.core.traversal.preorder_traversal.__iter__(self)
sympy.core.traversal.preorder_traversal.__next__(self)
sympy.core.traversal.preorder_traversal._preorder_traversal(self,node,keys)
sympy.core.traversal.preorder_traversal.skip(self)
sympy.core.traversal.use(expr,func,level=0,args=(),kwargs={})
sympy.core.traversal.walk(e,*target)
sympy.postorder_traversal(node,keys=None)
sympy.preorder_traversal(self,node,keys=None)
sympy.use(expr,func,level=0,args=(),kwargs={})


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/symbol.py----------------------------------------
A:sympy.core.symbol.obj->Symbol.__xnew__(cls, name, **assumptions)
A:sympy.core.symbol.(assumptions, nonassumptions)->map(dict, sift(kwargs.items(), lambda i: i[0] in _assume_defined, binary=True))
A:sympy.core.symbol.n->str(int(s[i + 1:] or start - 1) + 1)
A:sympy.core.symbol.x->modify(x)
A:sympy.core.symbol.names->names[:-1].rstrip()
A:sympy.core.symbol.is_commutative->fuzzy_bool(assumptions.get('commutative', True))
A:sympy.core.symbol.assumptions[key]->bool(v)
A:sympy.core.symbol.assumptions_orig->assumptions.copy()
A:sympy.core.symbol.assumptions_kb->StdFactKB(assumptions)
A:sympy.core.symbol.assumptions0->dict(assumptions_kb)
A:sympy.core.symbol._prng->random.Random()
A:sympy.core.symbol._base_dummy_index->random.Random().randint(10 ** 6, 9 * 10 ** 6)
A:sympy.core.symbol.exclude->tuple([sympify(x) for x in exclude])
A:sympy.core.symbol.properties->tuple(properties)
A:sympy.core.symbol.repl_dict->repl_dict.copy().copy()
A:sympy.core.symbol._range->re.compile('([0-9]*:[0-9]+|[a-zA-Z]?:[a-zA-Z])')
A:sympy.core.symbol.lit_char->chr(marker)
A:sympy.core.symbol.s->s.replace(c, l).replace(c, l)
A:sympy.core.symbol.as_seq->names[:-1].rstrip().endswith(',')
A:sympy.core.symbol.names[i:i + 1]->names[i].split()
A:sympy.core.symbol.seq->args.pop('seq', as_seq)
A:sympy.core.symbol.symbol->cls(literal(name), **args)
A:sympy.core.symbol.(a, b)->s.replace(c, l).replace(c, l).split(':')
A:sympy.core.symbol.b_i->int(b)
A:sympy.core.symbol.syms->ordered(new_iter.free_symbols, keys=key)
A:sympy.core.symbol.new_iter->Tuple(*iter)
A:sympy.core.symbol.mapk0->Symbol('%s' % k, **mapping[k][0].assumptions0)
A:sympy.core.symbol.reps[ki]->Symbol(name, **ki.assumptions0)
sympy.Dummy(cls,name=None,dummy_index=None,**assumptions)
sympy.Symbol(cls,name,**assumptions)
sympy.Wild(cls,name,exclude=(),properties=(),**assumptions)
sympy.core.symbol.Dummy(cls,name=None,dummy_index=None,**assumptions)
sympy.core.symbol.Dummy.__getnewargs_ex__(self)
sympy.core.symbol.Dummy._hashable_content(self)
sympy.core.symbol.Dummy.sort_key(self,order=None)
sympy.core.symbol.Str(cls,name,**kwargs)
sympy.core.symbol.Str.__getnewargs__(self)
sympy.core.symbol.Str._hashable_content(self)
sympy.core.symbol.Symbol(cls,name,**assumptions)
sympy.core.symbol.Symbol.__getnewargs_ex__(self)
sympy.core.symbol.Symbol.__setstate__(self,state)
sympy.core.symbol.Symbol.__xnew__(cls,name,**assumptions)
sympy.core.symbol.Symbol.__xnew_cached_(cls,name,**assumptions)
sympy.core.symbol.Symbol._diff_wrt(self)
sympy.core.symbol.Symbol._eval_refine(self,assumptions)
sympy.core.symbol.Symbol._eval_subs(self,old,new)
sympy.core.symbol.Symbol._hashable_content(self)
sympy.core.symbol.Symbol._merge(self,assumptions)
sympy.core.symbol.Symbol._sanitize(assumptions,obj=None)
sympy.core.symbol.Symbol.as_dummy(self)
sympy.core.symbol.Symbol.as_real_imag(self,deep=True,**hints)
sympy.core.symbol.Symbol.as_set(self)
sympy.core.symbol.Symbol.assumptions0(self)
sympy.core.symbol.Symbol.free_symbols(self)
sympy.core.symbol.Symbol.is_constant(self,*wrt,**flags)
sympy.core.symbol.Symbol.kind(self)
sympy.core.symbol.Symbol.sort_key(self,order=None)
sympy.core.symbol.Wild(cls,name,exclude=(),properties=(),**assumptions)
sympy.core.symbol.Wild.__getnewargs__(self)
sympy.core.symbol.Wild.__xnew__(cls,name,exclude,properties,**assumptions)
sympy.core.symbol.Wild._hashable_content(self)
sympy.core.symbol.Wild.matches(self,expr,repl_dict=None,old=False)
sympy.core.symbol._filter_assumptions(kwargs)
sympy.core.symbol._symbol(s,matching_symbol=None,**assumptions)
sympy.core.symbol.disambiguate(*iter)
sympy.core.symbol.symbols(names,*,cls=Symbol,**args)->Any
sympy.core.symbol.uniquely_named_symbol(xname,exprs=(),compare=str,modify=None,**assumptions)
sympy.core.symbol.var(names,**args)
sympy.symbols(names,*,cls=Symbol,**args)->Any
sympy.var(names,**args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/function.py----------------------------------------
A:sympy.core.function.eval_->getattr(cls, 'eval', cls)
A:sympy.core.function.parameters->inspect.signature(eval_).parameters.items()
A:sympy.core.function.(no, yes)->map(len, sift(p_or_k, lambda p: p.default == p.empty, binary=True))
A:sympy.core.function.nargs->FiniteSet(*nargs)
A:sympy.core.function.args->list(self.args)
A:sympy.core.function.evaluate->kwargs.get('evaluate', False)
A:sympy.core.function.evaluated->cls.eval(*args)
A:sympy.core.function.obj->expr.Expr.__new__(cls, expr, Tuple(*variables), point)
A:sympy.core.function.sentinel->object()
A:sympy.core.function.objnargs->getattr(obj, 'nargs', sentinel)
A:sympy.core.function.n->len(args)
A:sympy.core.function.result->result.evalf(prec_to_dps(pr)).evalf(prec_to_dps(pr))
A:sympy.core.function.pr2->min(_should_evalf)
A:sympy.core.function.pr->max(_should_evalf)
A:sympy.core.function.m->pure_complex(arg)
A:sympy.core.function.fname->sympy.utilities.lambdify.MPMATH_TRANSLATIONS.get(fname, None)
A:sympy.core.function._eval_mpmath->getattr(self, '_eval_mpmath', None)
A:sympy.core.function.func->_get_mpmath_func(self.func.__name__)
A:sympy.core.function.(func, args)->_eval_mpmath()
A:sympy.core.function.imp->getattr(self, '_imp_', None)
A:sympy.core.function.v->Dummy('xi')
A:sympy.core.function.da->args.pop().diff(s)
A:sympy.core.function.df->Function.fdiff(self, i)
A:sympy.core.function.e1->e.subs(vi, pi).expand()
A:sympy.core.function.s->s.removeO().removeO()
A:sympy.core.function.o->Symbol(type(a).__name__.upper())
A:sympy.core.function.e->e.subs(vi, pi).subs(vi, pi)
A:sympy.core.function.term->term.expand().expand()
A:sympy.core.function._x->uniquely_named_symbol('xi', self)
A:sympy.core.function.subs->e.subs(vi, pi).subs(vi, pi).limit(_x, S.Zero)
A:sympy.core.function.cf->Order(arg.as_leading_term(x), x).getn()
A:sympy.core.function.nterms->(n / cf).ceiling()
A:sympy.core.function.g->g.nseries(x, n=n, logx=logx).nseries(x, n=n, logx=logx)
A:sympy.core.function.D->Dummy()
A:sympy.core.function._undef_sage_helper->UndefSageHelper()
A:sympy.core.function.(assumptions, kwargs)->_filter_assumptions(kwargs)
A:sympy.core.function.assumptions->name._merge(assumptions)
A:sympy.core.function.commutative->name._merge(assumptions).get('commutative', None)
A:sympy.core.function.repl_dict->repl_dict.copy().copy()
A:sympy.core.function.expr->sympify(expr)
A:sympy.core.function.symbols_or_none->getattr(expr, 'free_symbols', None)
A:sympy.core.function.has_symbol_set->isinstance(symbols_or_none, set)
A:sympy.core.function.variable_count[-1]->Tuple(prev, count)
A:sympy.core.function.merged[-1]->Tuple(v, c)
A:sympy.core.function.variable_count->list(self.variable_count)
A:sympy.core.function.vc->list(vc)
A:sympy.core.function.V->list(range(len(vc)))
A:sympy.core.function.O->dict(zip(ordered(uniq([i for (i, c) in vc])), range(len(vc))))
A:sympy.core.function.ix->topological_sort((V, E), key=lambda i: O[v(i)])
A:sympy.core.function.dedv->self.expr.diff(v)
A:sympy.core.function.rv->rv.xreplace(Transform(lambda x: Pow(x.base, Float(x.exp, n)), lambda x: x.is_Pow and x.exp.is_Integer)).xreplace(Transform(lambda x: Pow(x.base, Float(x.exp, n)), lambda x: x.is_Pow and x.exp.is_Integer))
A:sympy.core.function.f0->f0.evalf(prec_to_dps(mpmath.mp.prec)).evalf(prec_to_dps(mpmath.mp.prec))
A:sympy.core.function.xi->Dummy('xi_%i' % i)
A:sympy.core.function.old_vars->Counter(dict(reversed(old.variable_count)))
A:sympy.core.function.self_vars->Counter(dict(reversed(self.variable_count)))
A:sympy.core.function.newe->newe._subs(old, new)._subs(old, new)
A:sympy.core.function.arg->self.expr.nseries(other, n=n, logx=logx)
A:sympy.core.function.series_gen->self.expr.lseries(x)
A:sympy.core.function.d->self._match_signature(self.signature, args)
A:sympy.core.function.signature->tuple(signature)
A:sympy.core.function.sig->sympify(sig)
A:sympy.core.function.syms->set()
A:sympy.core.function.variables->Tuple(*variables)
A:sympy.core.function.__->', '.join(repeated)
A:sympy.core.function.point->Tuple(*(point if is_sequence(point, Tuple) else [point]))
A:sympy.core.function.pts->sorted(set(point), key=default_sort_key)
A:sympy.core.function.p->CustomStrPrinter(settings)
A:sympy.core.function.obj._expr->sympify(expr).xreplace(dict(reps))
A:sympy.core.function.pt->list(self.point)
A:sympy.core.function.i->self.variables.index(old)
A:sympy.core.function.pt[j]->pt[j]._subs(old, new)._subs(old, new)
A:sympy.core.function.val->add.Add.fromiter((p.diff(s) * Subs(f.diff(v), *vp).doit() for (v, p) in zip(V, P)))
A:sympy.core.function.masked->f.xreplace(dict(zip(compound, dums)))
A:sympy.core.function.apos->self.point.index(x)
A:sympy.core.function.terms->add.Add.make_args(arg.removeO())
A:sympy.core.function.ipos->self.point.index(x)
A:sympy.core.function.x1->expand_mul(expand_log(x, deep=deep, force=force, factor=True))
A:sympy.core.function.NEG->Symbol('NEG')
A:sympy.core.function.DIV->Symbol('DIV')
A:sympy.core.function.SUB->Symbol('SUB')
A:sympy.core.function.ADD->Symbol('ADD')
A:sympy.core.function.EXP->Symbol('EXP')
A:sympy.core.function.a->list(self.args).pop()
A:sympy.core.function.(n, d)->fraction(a)
A:sympy.core.function.aargs->list(a.args)
A:sympy.core.function.ops->Add(*ops)
sympy.Derivative(cls,expr,*variables,**kwargs)
sympy.Function(cls,*args,**options)
sympy.FunctionClass(cls,*args,**kwargs)
sympy.Lambda(cls,signature,expr)
sympy.PoleError(Exception)
sympy.Subs(cls,expr,variables,point,**assumptions)
sympy.WildFunction(cls,name,**assumptions)
sympy.arity(cls)
sympy.core.function.Application(cls,*args,**options)
sympy.core.function.Application._eval_subs(self,old,new)
sympy.core.function.Application.eval(cls,*args)
sympy.core.function.Application.func(self)
sympy.core.function.AppliedUndef(cls,*args,**options)
sympy.core.function.AppliedUndef._diff_wrt(self)
sympy.core.function.AppliedUndef._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.core.function.ArgumentIndexError(ValueError)
sympy.core.function.ArgumentIndexError.__str__(self)
sympy.core.function.BadArgumentsError(TypeError)
sympy.core.function.BadSignatureError(TypeError)
sympy.core.function.Derivative(cls,expr,*variables,**kwargs)
sympy.core.function.Derivative._diff_wrt(self)
sympy.core.function.Derivative._dispatch_eval_derivative_n_times(cls,expr,v,count)
sympy.core.function.Derivative._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.core.function.Derivative._eval_derivative(self,v)
sympy.core.function.Derivative._eval_is_commutative(self)
sympy.core.function.Derivative._eval_lseries(self,x,logx,cdir=0)
sympy.core.function.Derivative._eval_nseries(self,x,n,logx,cdir=0)
sympy.core.function.Derivative._eval_subs(self,old,new)
sympy.core.function.Derivative._get_zero_with_shape_like(cls,expr)
sympy.core.function.Derivative._sort_variable_count(cls,vc)
sympy.core.function.Derivative._wrt_variables(self)
sympy.core.function.Derivative.as_finite_difference(self,points=1,x0=None,wrt=None)
sympy.core.function.Derivative.canonical(cls)
sympy.core.function.Derivative.derivative_count(self)
sympy.core.function.Derivative.doit(self,**hints)
sympy.core.function.Derivative.doit_numerically(self,z0)
sympy.core.function.Derivative.expr(self)
sympy.core.function.Derivative.free_symbols(self)
sympy.core.function.Derivative.kind(self)
sympy.core.function.Derivative.variable_count(self)
sympy.core.function.Derivative.variables(self)
sympy.core.function.Function(cls,*args,**options)
sympy.core.function.Function._diff_wrt(self)
sympy.core.function.Function._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.core.function.Function._eval_aseries(self,n,args0,x,logx)
sympy.core.function.Function._eval_derivative(self,s)
sympy.core.function.Function._eval_evalf(self,prec)
sympy.core.function.Function._eval_is_commutative(self)
sympy.core.function.Function._eval_is_meromorphic(self,x,a)
sympy.core.function.Function._eval_nseries(self,x,n,logx,cdir=0)
sympy.core.function.Function._should_evalf(cls,arg)
sympy.core.function.Function.as_base_exp(self)
sympy.core.function.Function.class_key(cls)
sympy.core.function.Function.fdiff(self,argindex=1)
sympy.core.function.Function.is_singular(cls,a)
sympy.core.function.FunctionClass(cls,*args,**kwargs)
sympy.core.function.FunctionClass.__repr__(cls)
sympy.core.function.FunctionClass.__signature__(self)
sympy.core.function.FunctionClass._valid_nargs(self,n:int)->bool
sympy.core.function.FunctionClass.free_symbols(self)
sympy.core.function.FunctionClass.nargs(self)
sympy.core.function.FunctionClass.xreplace(self)
sympy.core.function.Lambda(cls,signature,expr)
sympy.core.function.Lambda._check_signature(cls,sig)
sympy.core.function.Lambda._eval_evalf(self,prec)
sympy.core.function.Lambda._match_signature(self,sig,args)
sympy.core.function.Lambda.expr(self)
sympy.core.function.Lambda.free_symbols(self)
sympy.core.function.Lambda.is_identity(self)
sympy.core.function.Lambda.nargs(self)
sympy.core.function.Lambda.signature(self)
sympy.core.function.Lambda.variables(self)
sympy.core.function.PoleError(Exception)
sympy.core.function.Subs(cls,expr,variables,point,**assumptions)
sympy.core.function.Subs.__eq__(self,other)
sympy.core.function.Subs.__hash__(self)
sympy.core.function.Subs.__ne__(self,other)
sympy.core.function.Subs._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.core.function.Subs._eval_derivative(self,s)
sympy.core.function.Subs._eval_is_commutative(self)
sympy.core.function.Subs._eval_nseries(self,x,n,logx,cdir=0)
sympy.core.function.Subs._eval_subs(self,old,new)
sympy.core.function.Subs._hashable_content(self)
sympy.core.function.Subs.doit(self,**hints)
sympy.core.function.Subs.evalf(self,prec=None,**options)
sympy.core.function.Subs.expr(self)
sympy.core.function.Subs.expr_free_symbols(self)
sympy.core.function.Subs.free_symbols(self)
sympy.core.function.Subs.point(self)
sympy.core.function.Subs.variables(self)
sympy.core.function.UndefSageHelper
sympy.core.function.UndefSageHelper.__get__(self,ins,typ)
sympy.core.function.UndefinedFunction(mcl,name,bases=(AppliedUndef,),__dict__=None,**kwargs)
sympy.core.function.UndefinedFunction.__eq__(self,other)
sympy.core.function.UndefinedFunction.__hash__(self)
sympy.core.function.UndefinedFunction.__instancecheck__(cls,instance)
sympy.core.function.UndefinedFunction.__ne__(self,other)
sympy.core.function.UndefinedFunction._diff_wrt(self)
sympy.core.function.WildFunction(cls,name,**assumptions)
sympy.core.function.WildFunction.matches(self,expr,repl_dict=None,old=False)
sympy.core.function._coeff_isneg(a)
sympy.core.function._derivative_dispatch(expr,*variables,**kwargs)
sympy.core.function._mexpand(expr,recursive=False)
sympy.core.function.arity(cls)
sympy.core.function.count_ops(expr,visual=False)
sympy.core.function.diff(f,*symbols,**kwargs)
sympy.core.function.expand(e,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.core.function.expand_complex(expr,deep=True)
sympy.core.function.expand_func(expr,deep=True)
sympy.core.function.expand_log(expr,deep=True,force=False,factor=False)
sympy.core.function.expand_mul(expr,deep=True)
sympy.core.function.expand_multinomial(expr,deep=True)
sympy.core.function.expand_power_base(expr,deep=True,force=False)
sympy.core.function.expand_power_exp(expr,deep=True)
sympy.core.function.expand_trig(expr,deep=True)
sympy.core.function.nfloat(expr,n=15,exponent=False,dkeys=False)
sympy.count_ops(expr,visual=False)
sympy.diff(f,*symbols,**kwargs)
sympy.expand(e,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.expand_complex(expr,deep=True)
sympy.expand_func(expr,deep=True)
sympy.expand_log(expr,deep=True,force=False,factor=False)
sympy.expand_mul(expr,deep=True)
sympy.expand_multinomial(expr,deep=True)
sympy.expand_power_base(expr,deep=True,force=False)
sympy.expand_power_exp(expr,deep=True)
sympy.expand_trig(expr,deep=True)
sympy.nfloat(expr,n=15,exponent=False,dkeys=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/operations.py----------------------------------------
A:sympy.core.operations.args->tuple(map(_sympify_, args))
A:sympy.core.operations.obj->super(AssocOp, cls).__new__(cls, *ordered(_args))
A:sympy.core.operations.(c_part, nc_part, order_symbols)->cls.flatten(args)
A:sympy.core.operations.is_commutative->fuzzy_and((a.is_commutative for a in args))
A:sympy.core.operations.o->seq.pop()
A:sympy.core.operations.d->self._matches_simple(expr, repl_dict)
A:sympy.core.operations.(wild_part, exact_part)->sift(self.args, lambda p: p.has(Wild, WildFunction) and (not expr.has(p)), binary=True)
A:sympy.core.operations.wild_part->sorted(wild_part, key=lambda x: x.args[0] if x.is_Mul and x.args[0].is_Number else 0)
A:sympy.core.operations.exact->self._new_rawargs(*exact_part)
A:sympy.core.operations.newexpr->self._combine_inverse(expr, exact)
A:sympy.core.operations.newpattern->self._new_rawargs(*wild_part)
A:sympy.core.operations.saw->set()
A:sympy.core.operations.d1->w.matches(last_op, repl_dict)
A:sympy.core.operations.d2->self.xreplace(d1).matches(expr, d1)
A:sympy.core.operations.expr->collect(expr, free)
A:sympy.core.operations.(c, e)->collect(expr, free).as_coeff_Mul()
A:sympy.core.operations.did->set()
A:sympy.core.operations.(c, w)->w.as_coeff_mul(Wild)
A:sympy.core.operations.(cpart, ncpart)->sift(expr.args, lambda arg: arg.is_commutative is True, binary=True)
A:sympy.core.operations.(c, nc)->_ncsplit(self)
A:sympy.core.operations.(_c, _nc)->_ncsplit(expr)
A:sympy.core.operations.(x, tail)->self.as_independent(Symbol, AppliedUndef)
A:sympy.core.operations.tail_args->tuple(self.func.make_args(tail))
A:sympy.core.operations.newa->a._eval_evalf(prec)
A:sympy.core.operations._args->frozenset(cls._new_args_filter(args))
A:sympy.core.operations.self._handlergetter->attrgetter(self.handlerattr)
A:sympy.core.operations.self._dispatcher->Dispatcher(name)
A:sympy.core.operations.handlers->frozenset(map(self._handlergetter, args))
A:sympy.core.operations.handler->self._dispatcher.dispatch(prev_handler, typ)
A:sympy.core.operations.typ_sigs->defaultdict(list)
A:sympy.core.operations.sigs_str->', '.join(('<%s>' % str_signature(sig) for sig in sigs))
A:sympy.core.operations.s->'\n'.join(amb_sigs)
sympy.core.operations.AssocOp(cls,*args,evaluate=None,_sympify=True)
sympy.core.operations.AssocOp._eval_evalf(self,prec)
sympy.core.operations.AssocOp._from_args(cls,args,is_commutative=None)
sympy.core.operations.AssocOp._has_matcher(self)
sympy.core.operations.AssocOp._matches_commutative(self,expr,repl_dict=None,old=False)
sympy.core.operations.AssocOp._new_rawargs(self,*args,reeval=True,**kwargs)
sympy.core.operations.AssocOp.doit(self,**hints)
sympy.core.operations.AssocOp.flatten(cls,seq)
sympy.core.operations.AssocOp.make_args(cls,expr)
sympy.core.operations.AssocOpDispatcher(self,name,doc=None)
sympy.core.operations.AssocOpDispatcher.__doc__(self)
sympy.core.operations.AssocOpDispatcher.__repr__(self)
sympy.core.operations.AssocOpDispatcher.dispatch(self,handlers)
sympy.core.operations.AssocOpDispatcher.register_handlerclass(self,classes,typ,on_ambiguity=ambiguity_register_error_ignore_dup)
sympy.core.operations.LatticeOp(cls,*args,**options)
sympy.core.operations.LatticeOp._compare_pretty(a,b)
sympy.core.operations.LatticeOp._new_args_filter(cls,arg_sequence,call_cls=None)
sympy.core.operations.LatticeOp.make_args(cls,expr)
sympy.core.operations.ShortCircuit(Exception)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/singleton.py----------------------------------------
A:sympy.core.singleton.__call__->staticmethod(sympify)
A:sympy.core.singleton.value_to_install->class_to_install()
A:sympy.core.singleton.S->SingletonRegistry()
A:sympy.core.singleton.cls._instanceobj->basic.Basic.__new__(cls)
sympy.core.singleton.Singleton(cls,*args,**kwargs)
sympy.core.singleton.SingletonRegistry(self)
sympy.core.singleton.SingletonRegistry.__getattr__(self,name)
sympy.core.singleton.SingletonRegistry.__repr__(self)
sympy.core.singleton.SingletonRegistry.register(self,cls)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/kind.py----------------------------------------
A:sympy.core.kind.inst->super().__new__(cls)
A:sympy.core.kind.UndefinedKind->_UndefinedKind()
A:sympy.core.kind.NumberKind->_NumberKind()
A:sympy.core.kind.BooleanKind->_BooleanKind()
A:sympy.core.kind.self._dispatcher->Dispatcher(name)
A:sympy.core.kind.on_ambiguity->kwargs.pop('on_ambiguity', None)
A:sympy.core.kind.kinds->frozenset(args)
A:sympy.core.kind.func->self._dispatcher.dispatch(t2, t1)
A:sympy.core.kind.result->func(k1, k2)
A:sympy.core.kind.typ_sigs->defaultdict(list)
A:sympy.core.kind.sigs_str->', '.join(('<%s>' % str_signature(sig) for sig in sigs))
A:sympy.core.kind.s->'\n'.join(amb_sigs)
sympy.core.kind.Kind(cls,*args)
sympy.core.kind.KindDispatcher(self,name,commutative=False,doc=None)
sympy.core.kind.KindDispatcher.__doc__(self)
sympy.core.kind.KindDispatcher.__repr__(self)
sympy.core.kind.KindDispatcher.dispatch_kinds(self,kinds,**kwargs)
sympy.core.kind.KindDispatcher.register(self,*types,**kwargs)
sympy.core.kind.KindMeta(cls,clsname,bases,dct)
sympy.core.kind._BooleanKind(cls)
sympy.core.kind._BooleanKind.__repr__(self)
sympy.core.kind._NumberKind(cls)
sympy.core.kind._NumberKind.__repr__(self)
sympy.core.kind._UndefinedKind(cls)
sympy.core.kind._UndefinedKind.__repr__(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/add.py----------------------------------------
A:sympy.core.add._args_sortkey->cmp_to_key(Basic.compare)
A:sympy.core.add.negative_args->sum((1 for i in expr.args if i.could_extract_minus_sign()))
A:sympy.core.add.args->list(args)
A:sympy.core.add.a->list(args).pop()
A:sympy.core.add.coeff->Order(0).__add__(coeff)
A:sympy.core.add.(c, s)->Order(0).as_coeff_Mul()
A:sympy.core.add.(b, e)->ai.as_base_exp()
A:sympy.core.add.cs->s._new_rawargs(*(c,) + s.args)
A:sympy.core.add.k->attrgetter('kind')
A:sympy.core.add.kinds->frozenset(kinds)
A:sympy.core.add.(l1, l2)->sift(self.args, lambda x: x.has_free(*deps), binary=True)
A:sympy.core.add.(coeff, notrat)->self.args[0].as_coeff_add()
A:sympy.core.add.ico->self.func(*nz).coeff(S.ImaginaryUnit)
A:sympy.core.add.ri->pure_complex(self)
A:sympy.core.add.D->sqrt(r ** 2 + i ** 2)
A:sympy.core.add.(c, m)->list(args).pop().as_coeff_Mul()
A:sympy.core.add.big->abs(i)
A:sympy.core.add.(coeff, terms)->self.as_coeff_add()
A:sympy.core.add.oo->Dummy('oo')
A:sympy.core.add.eq->eq.replace(lambda x: x.is_Pow and x.base is oo, lambda x: x.base).replace(lambda x: x.is_Pow and x.base is oo, lambda x: x.base)
A:sympy.core.add.rv->eq.replace(lambda x: x.is_Pow and x.base is oo, lambda x: x.base).replace(lambda x: x.is_Pow and x.base is oo, lambda x: x.base).xreplace(ireps)
A:sympy.core.add.srv->signsimp(rv)
A:sympy.core.add.(content, expr)->self.primitive()
A:sympy.core.add.(ncon, dcon)->content.as_numer_denom()
A:sympy.core.add.nd->defaultdict(list)
A:sympy.core.add.(ni, di)->f.as_numer_denom()
A:sympy.core.add.(d, n)->defaultdict(list).popitem()
A:sympy.core.add.nd[d]->self.func(*n)
A:sympy.core.add.(coeff, ai)->list(args).pop().as_coeff_mul(S.ImaginaryUnit)
A:sympy.core.add.b->self.func(*nz)
A:sympy.core.add.others->list(self.args)
A:sympy.core.add.(c, a)->self.as_coeff_Add()
A:sympy.core.add.v->_monotonic_sign(self)
A:sympy.core.add.saw_INF->set()
A:sympy.core.add.(coeff_self, terms_self)->self.as_coeff_Add()
A:sympy.core.add.(coeff_old, terms_old)->old.expand(**logflags).as_coeff_Add()
A:sympy.core.add.self_set->set(args_self)
A:sympy.core.add.old_set->set(args_old)
A:sympy.core.add.args_old->self.func.make_args(-terms_old)
A:sympy.core.add.symbols->list(symbols if is_sequence(symbols) else [symbols])
A:sympy.core.add.(re, im)->term.as_real_imag(deep=deep)
A:sympy.core.add.o->Order(0)
A:sympy.core.add.old->old.expand(**logflags).expand(**logflags)
A:sympy.core.add.expr->expand_mul(old)
A:sympy.core.add.order->Order(term, x)
A:sympy.core.add.new_expr->new_expr.trigsimp().cancel().trigsimp().cancel()
A:sympy.core.add.n0->min.getn()
A:sympy.core.add.res->old.expand(**logflags).expand(**logflags)._eval_nseries(x, n=n0 + incr, logx=logx, cdir=cdir).cancel().powsimp().trigsimp()
A:sympy.core.add.ngcd->reduce(igcd, [t[0] for t in terms if t[1]], 0)
A:sympy.core.add.dlcm->reduce(ilcm, [t[1] for t in terms if t[1]], 1)
A:sympy.core.add.terms[i]->_keep_coeff(Rational(p, q), term)
A:sympy.core.add.c->terms.pop(0)
A:sympy.core.add.(con, prim)->self.func(*[_keep_coeff(*a.as_content_primitive(radical=radical, clear=clear)) for a in self.args]).primitive()
A:sympy.core.add.(con, d)->con.as_numer_denom()
A:sympy.core.add.term_rads->defaultdict(list)
A:sympy.core.add.common_q->set(term_rads.keys())
A:sympy.core.add.r[q]->Mul(*r[q])
A:sympy.core.add.g->reduce(igcd, [r[q] for r in rads], 0)
A:sympy.core.add.G->Mul(*G)
A:sympy.core.add.(re_part, rest)->self.as_coeff_Add()
A:sympy.core.add.(im_part, imag_unit)->rest.as_coeff_Mul()
A:sympy.core.add.add->AssocOpDispatcher('add')
sympy.Add(Expr,AssocOp)
sympy.core.add.Add(Expr,AssocOp)
sympy.core.add.Add.__neg__(self)
sympy.core.add.Add._all_nonneg_or_nonppos(self)
sympy.core.add.Add._combine_inverse(lhs,rhs)
sympy.core.add.Add._eval_adjoint(self)
sympy.core.add.Add._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.core.add.Add._eval_conjugate(self)
sympy.core.add.Add._eval_derivative(self,s)
sympy.core.add.Add._eval_difference_delta(self,n,step)
sympy.core.add.Add._eval_is_algebraic_expr(self,syms)
sympy.core.add.Add._eval_is_extended_negative(self)
sympy.core.add.Add._eval_is_extended_nonnegative(self)
sympy.core.add.Add._eval_is_extended_nonpositive(self)
sympy.core.add.Add._eval_is_extended_positive(self)
sympy.core.add.Add._eval_is_imaginary(self)
sympy.core.add.Add._eval_is_infinite(self)
sympy.core.add.Add._eval_is_irrational(self)
sympy.core.add.Add._eval_is_meromorphic(self,x,a)
sympy.core.add.Add._eval_is_odd(self)
sympy.core.add.Add._eval_is_polynomial(self,syms)
sympy.core.add.Add._eval_is_rational_function(self,syms)
sympy.core.add.Add._eval_is_zero(self)
sympy.core.add.Add._eval_nseries(self,x,n,logx,cdir=0)
sympy.core.add.Add._eval_power(self,e)
sympy.core.add.Add._eval_subs(self,old,new)
sympy.core.add.Add._eval_transpose(self)
sympy.core.add.Add._matches_simple(self,expr,repl_dict)
sympy.core.add.Add._mpc_(self)
sympy.core.add.Add._sorted_args(self)
sympy.core.add.Add.as_coeff_Add(self,rational=False,deps=None)
sympy.core.add.Add.as_coeff_add(self,*deps)
sympy.core.add.Add.as_content_primitive(self,radical=False,clear=True)
sympy.core.add.Add.as_numer_denom(self)
sympy.core.add.Add.as_real_imag(self,deep=True,**hints)
sympy.core.add.Add.as_two_terms(self)
sympy.core.add.Add.class_key(cls)
sympy.core.add.Add.could_extract_minus_sign(self)
sympy.core.add.Add.extract_leading_order(self,symbols,point=None)
sympy.core.add.Add.flatten(cls,seq)
sympy.core.add.Add.getO(self)
sympy.core.add.Add.kind(self)
sympy.core.add.Add.matches(self,expr,repl_dict=None,old=False)
sympy.core.add.Add.primitive(self)
sympy.core.add.Add.removeO(self)
sympy.core.add._addsort(args)
sympy.core.add._could_extract_minus_sign(expr)
sympy.core.add._unevaluated_Add(*args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/numbers.py----------------------------------------
A:sympy.core.numbers._LOG2->math.log(2)
A:sympy.core.numbers.fa->math.gcd(a, b).atoms(Float)
A:sympy.core.numbers.fb->b.n(prec_to_dps(min([i._prec for i in fb]))).atoms(Float)
A:sympy.core.numbers.ca->pure_complex(a, or_real=True)
A:sympy.core.numbers.a->math.gcd(a, b)
A:sympy.core.numbers.cb->pure_complex(b, or_real=True)
A:sympy.core.numbers.b->b.n(prec_to_dps(min([i._prec for i in fb]))).n(prec_to_dps(min([i._prec for i in fb])))
A:sympy.core.numbers.diff->abs(z1 - z2)
A:sympy.core.numbers.az1->abs(z1)
A:sympy.core.numbers.rv->Pow(S.ImaginaryUnit, r, evaluate=False)
A:sympy.core.numbers.(neg_pow, man, expt, _)->getattr(p, '_mpf_', mpmath.mpf(p)._mpf_)
A:sympy.core.numbers.(s, d, e)->dec.as_tuple()
A:sympy.core.numbers.prec->max(prec, self._prec)
A:sympy.core.numbers.d->sum([di * 10 ** i for (i, di) in enumerate(reversed(d))])
A:sympy.core.numbers._floatpat->re.compile('[-+]?((\\d*\\.\\d+)|(\\d+\\.?))')
A:sympy.core.numbers.(x, _, g)->igcdex(a, m)
A:sympy.core.numbers._obj->expr.Expr.__new__(cls, *sargs).lower()
A:sympy.core.numbers.val->sympify(obj)
A:sympy.core.numbers.other->_sympify(other)
A:sympy.core.numbers.num->list(num)
A:sympy.core.numbers.Num->decimal.Decimal(num)
A:sympy.core.numbers.(num, dps)->_decimal_to_Rational_prec(Num)
A:sympy.core.numbers.dps->max(dps, len(str(num).lstrip('-')))
A:sympy.core.numbers.precision->int(precision)
A:sympy.core.numbers._mpf_->list(num)._as_mpf_val(precision)
A:sympy.core.numbers.num[1]->MPZ(num[1], 16)
A:sympy.core.numbers.obj->expr.Expr.__new__(cls, *sargs)
A:sympy.core.numbers.obj._mpf_->mpf_norm(_mpf_, _prec)
A:sympy.core.numbers.(rhs, prec)->_sympify(other)._as_mpf_op(self._prec)
A:sympy.core.numbers.(expt, prec)->expt._as_mpf_op(self._prec)
A:sympy.core.numbers.y->_sympify(y)
A:sympy.core.numbers.(re, im)->mpmath.libmp.mpc_pow((mpfself, fzero), (expt, fzero), prec, rnd)
A:sympy.core.numbers.ompf->mpmath.libmp.from_int(other.p)
A:sympy.core.numbers.smpf->mpmath.libmp.mpf_mul(self._mpf_, mlib.from_int(other.q))
A:sympy.core.numbers.p->perfect_power(b_pos)
A:sympy.core.numbers.pq->perfect_power(b_pos).rsplit('/', 1)
A:sympy.core.numbers.fp->fractions.Fraction(p)
A:sympy.core.numbers.fq->fractions.Fraction(q)
A:sympy.core.numbers.q->Rational(q)
A:sympy.core.numbers.gcd->igcd(abs(p), q)
A:sympy.core.numbers.f->fractions.Fraction(self.p, self.q)
A:sympy.core.numbers.ratfracpart->Rational(remfracpart, expt.q)
A:sympy.core.numbers.op->getattr(o, attr)
A:sympy.core.numbers.i->i.replace(' ', '').replace(' ', '')
A:sympy.core.numbers.ival->int(i)
A:sympy.core.numbers.(x, xexact)->integer_nthroot(abs(self.p), expt.q)
A:sympy.core.numbers.result->Integer(x ** abs(expt.p))
A:sympy.core.numbers.b_pos->int(abs(self.p))
A:sympy.core.numbers.dict->Integer(b_pos).factors(limit=2 ** 15)
A:sympy.core.numbers.(div_e, div_m)->divmod(exponent, expt.q)
A:sympy.core.numbers.g->igcd(div_m, expt.q)
A:sympy.core.numbers.sqr_gcd->igcd(sqr_gcd, ex)
A:sympy.core.numbers.expr->sympify(expr)
A:sympy.core.numbers.minpoly->Poly(minpoly)
A:sympy.core.numbers.dom->Poly(minpoly).get_domain()
A:sympy.core.numbers.rep->rep.rem(minpoly.rep).rem(minpoly.rep)
A:sympy.core.numbers.scoeffs->Tuple(*c)
A:sympy.core.numbers.c->self.coeffs()
A:sympy.core.numbers.alias->Symbol(alias)
A:sympy.core.numbers.poly->fractions.Fraction(self.p, self.q).compose(Poly(f.gen / f.LC()))
A:sympy.core.numbers.m->self.minpoly_of_element()
A:sympy.core.numbers.r->self.to_root(radicals=radicals)
A:sympy.core.numbers.theta->self.primitive_element()
A:sympy.core.numbers.self._own_minpoly->minpoly(self.as_expr(theta), polys=True)
A:sympy.core.numbers.roots->self.minpoly_of_element().all_roots(radicals=radicals)
A:sympy.core.numbers.ex->self.as_expr()
A:sympy.core.numbers.(coeff, terms)->arg.as_coeff_Mul()
A:sympy.core.numbers.(i, r)->divmod(expt, 2)
A:sympy.core.numbers.expt_real->re(expt)
A:sympy.core.numbers.coeff->arg.coeff(pi * I)
A:sympy.core.numbers.v->mpmath.libmp.catalan_fixed(prec + 10)
A:sympy.core.numbers.k->Dummy('k', integer=True, nonnegative=True)
A:sympy.core.numbers.x->_sympify(x)
A:sympy.core.numbers.(real, imag)->list(map(sympify, (a.real, a.imag)))
A:sympy.core.numbers.Mul.identity->One()
A:sympy.core.numbers.Add.identity->Zero()
sympy.AlgebraicNumber(cls,expr,coeffs=None,alias=None,**args)
sympy.Float(cls,num,dps=None,precision=None)
sympy.Integer(cls,i)
sympy.Number(cls,*obj)
sympy.NumberSymbol(cls)
sympy.Rational(cls,p,q=None,gcd=None)
sympy.comp(z1,z2,tol=None)
sympy.core.numbers.AlgebraicNumber(cls,expr,coeffs=None,alias=None,**args)
sympy.core.numbers.AlgebraicNumber.__hash__(self)
sympy.core.numbers.AlgebraicNumber._eval_evalf(self,prec)
sympy.core.numbers.AlgebraicNumber._eval_simplify(self,**kwargs)
sympy.core.numbers.AlgebraicNumber.as_expr(self,x=None)
sympy.core.numbers.AlgebraicNumber.as_poly(self,x=None)
sympy.core.numbers.AlgebraicNumber.coeffs(self)
sympy.core.numbers.AlgebraicNumber.field_element(self,coeffs)
sympy.core.numbers.AlgebraicNumber.is_aliased(self)
sympy.core.numbers.AlgebraicNumber.is_primitive_element(self)
sympy.core.numbers.AlgebraicNumber.minpoly_of_element(self)
sympy.core.numbers.AlgebraicNumber.native_coeffs(self)
sympy.core.numbers.AlgebraicNumber.primitive_element(self)
sympy.core.numbers.AlgebraicNumber.to_algebraic_integer(self)
sympy.core.numbers.AlgebraicNumber.to_primitive_element(self,radicals=True)
sympy.core.numbers.AlgebraicNumber.to_root(self,radicals=True,minpoly=None)
sympy.core.numbers.Catalan(NumberSymbol,metaclass=Singleton)
sympy.core.numbers.Catalan.__int__(self)
sympy.core.numbers.Catalan._as_mpf_val(self,prec)
sympy.core.numbers.Catalan._eval_rewrite_as_Sum(self,k_sym=None,symbols=None)
sympy.core.numbers.Catalan._latex(self,printer)
sympy.core.numbers.Catalan.approximation_interval(self,number_cls)
sympy.core.numbers.ComplexInfinity(cls)
sympy.core.numbers.ComplexInfinity.__abs__()
sympy.core.numbers.ComplexInfinity.__neg__()
sympy.core.numbers.ComplexInfinity._eval_power(self,expt)
sympy.core.numbers.ComplexInfinity._latex(self,printer)
sympy.core.numbers.ComplexInfinity.ceiling(self)
sympy.core.numbers.ComplexInfinity.floor(self)
sympy.core.numbers.EulerGamma(NumberSymbol,metaclass=Singleton)
sympy.core.numbers.EulerGamma.__int__(self)
sympy.core.numbers.EulerGamma._as_mpf_val(self,prec)
sympy.core.numbers.EulerGamma._latex(self,printer)
sympy.core.numbers.EulerGamma.approximation_interval(self,number_cls)
sympy.core.numbers.Exp1(NumberSymbol,metaclass=Singleton)
sympy.core.numbers.Exp1.__abs__()
sympy.core.numbers.Exp1.__int__(self)
sympy.core.numbers.Exp1._as_mpf_val(self,prec)
sympy.core.numbers.Exp1._eval_power(self,expt)
sympy.core.numbers.Exp1._eval_power_exp_is_pow(self,arg)
sympy.core.numbers.Exp1._eval_rewrite_as_cos(self,**kwargs)
sympy.core.numbers.Exp1._eval_rewrite_as_sin(self,**kwargs)
sympy.core.numbers.Exp1._latex(self,printer)
sympy.core.numbers.Exp1.approximation_interval(self,number_cls)
sympy.core.numbers.Float(cls,num,dps=None,precision=None)
sympy.core.numbers.Float._Frel(self,other,op)
sympy.core.numbers.Float.__abs__(self)
sympy.core.numbers.Float.__add__(self,other)
sympy.core.numbers.Float.__bool__(self)
sympy.core.numbers.Float.__ceil__(self)
sympy.core.numbers.Float.__eq__(self,other)
sympy.core.numbers.Float.__floor__(self)
sympy.core.numbers.Float.__format__(self,format_spec)
sympy.core.numbers.Float.__ge__(self,other)
sympy.core.numbers.Float.__getnewargs_ex__(self)
sympy.core.numbers.Float.__gt__(self,other)
sympy.core.numbers.Float.__hash__(self)
sympy.core.numbers.Float.__int__(self)
sympy.core.numbers.Float.__le__(self,other)
sympy.core.numbers.Float.__lt__(self,other)
sympy.core.numbers.Float.__mod__(self,other)
sympy.core.numbers.Float.__mul__(self,other)
sympy.core.numbers.Float.__ne__(self,other)
sympy.core.numbers.Float.__neg__(self)
sympy.core.numbers.Float.__rmod__(self,other)
sympy.core.numbers.Float.__sub__(self,other)
sympy.core.numbers.Float.__truediv__(self,other)
sympy.core.numbers.Float._as_mpf_op(self,prec)
sympy.core.numbers.Float._as_mpf_val(self,prec)
sympy.core.numbers.Float._eval_is_extended_negative(self)
sympy.core.numbers.Float._eval_is_extended_positive(self)
sympy.core.numbers.Float._eval_is_finite(self)
sympy.core.numbers.Float._eval_is_infinite(self)
sympy.core.numbers.Float._eval_is_integer(self)
sympy.core.numbers.Float._eval_is_negative(self)
sympy.core.numbers.Float._eval_is_positive(self)
sympy.core.numbers.Float._eval_is_zero(self)
sympy.core.numbers.Float._eval_power(self,expt)
sympy.core.numbers.Float._hashable_content(self)
sympy.core.numbers.Float._new(cls,_mpf_,_prec,zero=True)
sympy.core.numbers.Float.ceiling(self)
sympy.core.numbers.Float.epsilon_eq(self,other,epsilon='1e-15')
sympy.core.numbers.Float.floor(self)
sympy.core.numbers.Float.num(self)
sympy.core.numbers.GoldenRatio(NumberSymbol,metaclass=Singleton)
sympy.core.numbers.GoldenRatio.__int__(self)
sympy.core.numbers.GoldenRatio._as_mpf_val(self,prec)
sympy.core.numbers.GoldenRatio._eval_expand_func(self,**hints)
sympy.core.numbers.GoldenRatio._latex(self,printer)
sympy.core.numbers.GoldenRatio.approximation_interval(self,number_cls)
sympy.core.numbers.Half(RationalConstant,metaclass=Singleton)
sympy.core.numbers.Half.__abs__()
sympy.core.numbers.Half.__getnewargs__(self)
sympy.core.numbers.ImaginaryUnit(AtomicExpr,metaclass=Singleton)
sympy.core.numbers.ImaginaryUnit.__abs__()
sympy.core.numbers.ImaginaryUnit._eval_conjugate(self)
sympy.core.numbers.ImaginaryUnit._eval_evalf(self,prec)
sympy.core.numbers.ImaginaryUnit._eval_power(self,expt)
sympy.core.numbers.ImaginaryUnit._latex(self,printer)
sympy.core.numbers.ImaginaryUnit._mpc_(self)
sympy.core.numbers.ImaginaryUnit.as_base_exp(self)
sympy.core.numbers.Infinity(cls)
sympy.core.numbers.Infinity.__abs__(self)
sympy.core.numbers.Infinity.__add__(self,other)
sympy.core.numbers.Infinity.__eq__(self,other)
sympy.core.numbers.Infinity.__hash__(self)
sympy.core.numbers.Infinity.__mod__(self,other)
sympy.core.numbers.Infinity.__mul__(self,other)
sympy.core.numbers.Infinity.__ne__(self,other)
sympy.core.numbers.Infinity.__neg__(self)
sympy.core.numbers.Infinity.__rsub__(self,other)
sympy.core.numbers.Infinity.__sub__(self,other)
sympy.core.numbers.Infinity.__truediv__(self,other)
sympy.core.numbers.Infinity._as_mpf_val(self,prec)
sympy.core.numbers.Infinity._eval_evalf(self,prec=None)
sympy.core.numbers.Infinity._eval_power(self,expt)
sympy.core.numbers.Infinity._eval_subs(self,old,new)
sympy.core.numbers.Infinity._latex(self,printer)
sympy.core.numbers.Infinity.ceiling(self)
sympy.core.numbers.Infinity.evalf(self,prec=None,**options)
sympy.core.numbers.Infinity.floor(self)
sympy.core.numbers.Integer(cls,i)
sympy.core.numbers.Integer.__abs__(self)
sympy.core.numbers.Integer.__add__(self,other)
sympy.core.numbers.Integer.__and__(self,other)
sympy.core.numbers.Integer.__ceil__(self)
sympy.core.numbers.Integer.__divmod__(self,other)
sympy.core.numbers.Integer.__eq__(self,other)
sympy.core.numbers.Integer.__floor__(self)
sympy.core.numbers.Integer.__floordiv__(self,other)
sympy.core.numbers.Integer.__ge__(self,other)
sympy.core.numbers.Integer.__getnewargs__(self)
sympy.core.numbers.Integer.__gt__(self,other)
sympy.core.numbers.Integer.__hash__(self)
sympy.core.numbers.Integer.__index__(self)
sympy.core.numbers.Integer.__int__(self)
sympy.core.numbers.Integer.__invert__(self)
sympy.core.numbers.Integer.__le__(self,other)
sympy.core.numbers.Integer.__lshift__(self,other)
sympy.core.numbers.Integer.__lt__(self,other)
sympy.core.numbers.Integer.__mod__(self,other)
sympy.core.numbers.Integer.__mul__(self,other)
sympy.core.numbers.Integer.__ne__(self,other)
sympy.core.numbers.Integer.__neg__(self)
sympy.core.numbers.Integer.__or__(self,other)
sympy.core.numbers.Integer.__radd__(self,other)
sympy.core.numbers.Integer.__rand__(self,other)
sympy.core.numbers.Integer.__rdivmod__(self,other)
sympy.core.numbers.Integer.__rfloordiv__(self,other)
sympy.core.numbers.Integer.__rlshift__(self,other)
sympy.core.numbers.Integer.__rmod__(self,other)
sympy.core.numbers.Integer.__rmul__(self,other)
sympy.core.numbers.Integer.__ror__(self,other)
sympy.core.numbers.Integer.__rrshift__(self,other)
sympy.core.numbers.Integer.__rshift__(self,other)
sympy.core.numbers.Integer.__rsub__(self,other)
sympy.core.numbers.Integer.__rxor__(self,other)
sympy.core.numbers.Integer.__sub__(self,other)
sympy.core.numbers.Integer.__xor__(self,other)
sympy.core.numbers.Integer._as_mpf_val(self,prec)
sympy.core.numbers.Integer._eval_is_composite(self)
sympy.core.numbers.Integer._eval_is_odd(self)
sympy.core.numbers.Integer._eval_is_prime(self)
sympy.core.numbers.Integer._eval_power(self,expt)
sympy.core.numbers.Integer._mpmath_(self,prec,rnd)
sympy.core.numbers.Integer.as_numer_denom(self)
sympy.core.numbers.Integer.ceiling(self)
sympy.core.numbers.Integer.floor(self)
sympy.core.numbers.IntegerConstant(cls)
sympy.core.numbers.NaN(cls)
sympy.core.numbers.NaN.__add__(self,other)
sympy.core.numbers.NaN.__eq__(self,other)
sympy.core.numbers.NaN.__hash__(self)
sympy.core.numbers.NaN.__mul__(self,other)
sympy.core.numbers.NaN.__ne__(self,other)
sympy.core.numbers.NaN.__neg__(self)
sympy.core.numbers.NaN.__sub__(self,other)
sympy.core.numbers.NaN.__truediv__(self,other)
sympy.core.numbers.NaN._as_mpf_val(self,prec)
sympy.core.numbers.NaN._latex(self,printer)
sympy.core.numbers.NaN.ceiling(self)
sympy.core.numbers.NaN.floor(self)
sympy.core.numbers.NegativeInfinity(cls)
sympy.core.numbers.NegativeInfinity.__abs__(self)
sympy.core.numbers.NegativeInfinity.__add__(self,other)
sympy.core.numbers.NegativeInfinity.__eq__(self,other)
sympy.core.numbers.NegativeInfinity.__hash__(self)
sympy.core.numbers.NegativeInfinity.__mod__(self,other)
sympy.core.numbers.NegativeInfinity.__mul__(self,other)
sympy.core.numbers.NegativeInfinity.__ne__(self,other)
sympy.core.numbers.NegativeInfinity.__neg__(self)
sympy.core.numbers.NegativeInfinity.__rsub__(self,other)
sympy.core.numbers.NegativeInfinity.__sub__(self,other)
sympy.core.numbers.NegativeInfinity.__truediv__(self,other)
sympy.core.numbers.NegativeInfinity._as_mpf_val(self,prec)
sympy.core.numbers.NegativeInfinity._eval_evalf(self,prec=None)
sympy.core.numbers.NegativeInfinity._eval_power(self,expt)
sympy.core.numbers.NegativeInfinity._eval_subs(self,old,new)
sympy.core.numbers.NegativeInfinity._latex(self,printer)
sympy.core.numbers.NegativeInfinity.as_powers_dict(self)
sympy.core.numbers.NegativeInfinity.ceiling(self)
sympy.core.numbers.NegativeInfinity.evalf(self,prec=None,**options)
sympy.core.numbers.NegativeInfinity.floor(self)
sympy.core.numbers.NegativeOne(IntegerConstant,metaclass=Singleton)
sympy.core.numbers.NegativeOne.__abs__()
sympy.core.numbers.NegativeOne.__getnewargs__(self)
sympy.core.numbers.NegativeOne.__neg__()
sympy.core.numbers.NegativeOne._eval_power(self,expt)
sympy.core.numbers.Number(cls,*obj)
sympy.core.numbers.Number.__add__(self,other)
sympy.core.numbers.Number.__ceil__(self)
sympy.core.numbers.Number.__divmod__(self,other)
sympy.core.numbers.Number.__eq__(self,other)
sympy.core.numbers.Number.__float__(self)
sympy.core.numbers.Number.__floor__(self)
sympy.core.numbers.Number.__ge__(self,other)
sympy.core.numbers.Number.__gt__(self,other)
sympy.core.numbers.Number.__hash__(self)
sympy.core.numbers.Number.__le__(self,other)
sympy.core.numbers.Number.__lt__(self,other)
sympy.core.numbers.Number.__mul__(self,other)
sympy.core.numbers.Number.__ne__(self,other)
sympy.core.numbers.Number.__rdivmod__(self,other)
sympy.core.numbers.Number.__sub__(self,other)
sympy.core.numbers.Number.__truediv__(self,other)
sympy.core.numbers.Number._as_mpf_op(self,prec)
sympy.core.numbers.Number._as_mpf_val(self,prec)
sympy.core.numbers.Number._eval_conjugate(self)
sympy.core.numbers.Number._eval_evalf(self,prec)
sympy.core.numbers.Number._eval_order(self,*symbols)
sympy.core.numbers.Number._eval_subs(self,old,new)
sympy.core.numbers.Number.as_coeff_Add(self,rational=False)
sympy.core.numbers.Number.as_coeff_Mul(self,rational=False)
sympy.core.numbers.Number.as_coeff_add(self,*deps)
sympy.core.numbers.Number.as_coeff_mul(self,*deps,rational=True,**kwargs)
sympy.core.numbers.Number.ceiling(self)
sympy.core.numbers.Number.class_key(cls)
sympy.core.numbers.Number.cofactors(self,other)
sympy.core.numbers.Number.could_extract_minus_sign(self)
sympy.core.numbers.Number.floor(self)
sympy.core.numbers.Number.gcd(self,other)
sympy.core.numbers.Number.invert(self,other,*gens,**args)
sympy.core.numbers.Number.is_constant(self,*wrt,**flags)
sympy.core.numbers.Number.lcm(self,other)
sympy.core.numbers.Number.sort_key(self,order=None)
sympy.core.numbers.NumberSymbol(cls)
sympy.core.numbers.NumberSymbol.__eq__(self,other)
sympy.core.numbers.NumberSymbol.__ge__(self,other)
sympy.core.numbers.NumberSymbol.__hash__(self)
sympy.core.numbers.NumberSymbol.__int__(self)
sympy.core.numbers.NumberSymbol.__le__(self,other)
sympy.core.numbers.NumberSymbol.__ne__(self,other)
sympy.core.numbers.NumberSymbol._eval_evalf(self,prec)
sympy.core.numbers.NumberSymbol.approximation(self,number_cls)
sympy.core.numbers.One(IntegerConstant,metaclass=Singleton)
sympy.core.numbers.One.__abs__()
sympy.core.numbers.One.__getnewargs__(self)
sympy.core.numbers.One.__neg__()
sympy.core.numbers.One._eval_order(self,*symbols)
sympy.core.numbers.One._eval_power(self,expt)
sympy.core.numbers.One.factors(limit=None,use_trial=True,use_rho=False,use_pm1=False,verbose=False,visual=False)
sympy.core.numbers.Pi(NumberSymbol,metaclass=Singleton)
sympy.core.numbers.Pi.__abs__()
sympy.core.numbers.Pi.__int__(self)
sympy.core.numbers.Pi._as_mpf_val(self,prec)
sympy.core.numbers.Pi._latex(self,printer)
sympy.core.numbers.Pi.approximation_interval(self,number_cls)
sympy.core.numbers.Rational(cls,p,q=None,gcd=None)
sympy.core.numbers.Rational._Rrel(self,other,attr)
sympy.core.numbers.Rational.__abs__(self)
sympy.core.numbers.Rational.__add__(self,other)
sympy.core.numbers.Rational.__ceil__(self)
sympy.core.numbers.Rational.__eq__(self,other)
sympy.core.numbers.Rational.__floor__(self)
sympy.core.numbers.Rational.__ge__(self,other)
sympy.core.numbers.Rational.__getnewargs__(self)
sympy.core.numbers.Rational.__gt__(self,other)
sympy.core.numbers.Rational.__hash__(self)
sympy.core.numbers.Rational.__int__(self)
sympy.core.numbers.Rational.__le__(self,other)
sympy.core.numbers.Rational.__lt__(self,other)
sympy.core.numbers.Rational.__mod__(self,other)
sympy.core.numbers.Rational.__mul__(self,other)
sympy.core.numbers.Rational.__ne__(self,other)
sympy.core.numbers.Rational.__neg__(self)
sympy.core.numbers.Rational.__rmod__(self,other)
sympy.core.numbers.Rational.__rsub__(self,other)
sympy.core.numbers.Rational.__rtruediv__(self,other)
sympy.core.numbers.Rational.__sub__(self,other)
sympy.core.numbers.Rational.__truediv__(self,other)
sympy.core.numbers.Rational._as_mpf_val(self,prec)
sympy.core.numbers.Rational._eval_is_positive(self)
sympy.core.numbers.Rational._eval_is_zero(self)
sympy.core.numbers.Rational._eval_power(self,expt)
sympy.core.numbers.Rational._hashable_content(self)
sympy.core.numbers.Rational._mpmath_(self,prec,rnd)
sympy.core.numbers.Rational.as_coeff_Add(self,rational=False)
sympy.core.numbers.Rational.as_coeff_Mul(self,rational=False)
sympy.core.numbers.Rational.as_content_primitive(self,radical=False,clear=True)
sympy.core.numbers.Rational.as_numer_denom(self)
sympy.core.numbers.Rational.ceiling(self)
sympy.core.numbers.Rational.denominator(self)
sympy.core.numbers.Rational.factors(self,limit=None,use_trial=True,use_rho=False,use_pm1=False,verbose=False,visual=False)
sympy.core.numbers.Rational.floor(self)
sympy.core.numbers.Rational.gcd(self,other)
sympy.core.numbers.Rational.lcm(self,other)
sympy.core.numbers.Rational.limit_denominator(self,max_denominator=1000000)
sympy.core.numbers.Rational.numerator(self)
sympy.core.numbers.RationalConstant(cls)
sympy.core.numbers.TribonacciConstant(NumberSymbol,metaclass=Singleton)
sympy.core.numbers.TribonacciConstant.__int__(self)
sympy.core.numbers.TribonacciConstant._eval_evalf(self,prec)
sympy.core.numbers.TribonacciConstant._eval_expand_func(self,**hints)
sympy.core.numbers.TribonacciConstant._latex(self,printer)
sympy.core.numbers.TribonacciConstant.approximation_interval(self,number_cls)
sympy.core.numbers.Zero(IntegerConstant,metaclass=Singleton)
sympy.core.numbers.Zero.__abs__()
sympy.core.numbers.Zero.__bool__(self)
sympy.core.numbers.Zero.__getnewargs__(self)
sympy.core.numbers.Zero.__neg__()
sympy.core.numbers.Zero._eval_order(self,*symbols)
sympy.core.numbers.Zero._eval_power(self,expt)
sympy.core.numbers._as_integer_ratio(p)
sympy.core.numbers._decimal_to_Rational_prec(dec)
sympy.core.numbers._eval_is_eq(a,b)
sympy.core.numbers._eval_is_eq(self,other)
sympy.core.numbers._literal_float(f)
sympy.core.numbers._register_classes()
sympy.core.numbers.comp(z1,z2,tol=None)
sympy.core.numbers.equal_valued(x,y)
sympy.core.numbers.igcd(*args)
sympy.core.numbers.igcd_lehmer(a,b)
sympy.core.numbers.igcdex(a,b)
sympy.core.numbers.ilcm(*args)
sympy.core.numbers.mod_inverse(a,m)
sympy.core.numbers.mpf_norm(mpf,prec)
sympy.core.numbers.seterr(divide=False)
sympy.core.numbers.sympify_complex(a)
sympy.core.numbers.sympify_fractions(f)
sympy.core.numbers.sympify_mpmath(x)
sympy.core.numbers.sympify_mpmath_mpq(x)
sympy.igcd(*args)
sympy.ilcm(*args)
sympy.mod_inverse(a,m)
sympy.seterr(divide=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/random.py----------------------------------------
A:sympy.core.random.rng->random.Random()
A:sympy.core.random._assumptions_rng->random.Random()
A:sympy.core.random.reps->list(zip(z, [random_complex_number(a, b, c, d) for _ in z]))
A:sympy.core.random.z1->f.subs(reps).n()
A:sympy.core.random.z2->g.subs(reps).n()
A:sympy.core.random.z0->random_complex_number(a, b, c, d)
A:sympy.core.random.f1->f.diff(z).subs(z, z0)
A:sympy.core.random.f2->Derivative(f, z).doit_numerically(z0)
A:sympy.core.random.seed->list(seed)
A:sympy.core.random.x->seq.pop()
sympy.core.random._randint(seed=None)
sympy.core.random._randrange(seed=None)
sympy.core.random.random_complex_number(a=2,b=-1,c=3,d=1,rational=False,tolerance=None)
sympy.core.random.seed(a=None,version=2)
sympy.core.random.test_derivative_numerically(f,z,tol=1e-06,a=2,b=-1,c=3,d=1)
sympy.core.random.verify_numerically(f,g,z=None,tol=1e-06,a=2,b=-1,c=3,d=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/decorators.py----------------------------------------
A:sympy.core.decorators.b->sympify(b, strict=True)
A:sympy.core.decorators.f->getattr(other, method_name, None)
A:sympy.core.decorators.other->sympify(other, strict=True)
sympy.core.decorators._SympifyWrapper(self,func,args)
sympy.core.decorators._SympifyWrapper.make_wrapped(self,cls)
sympy.core.decorators.__sympifyit(func,arg,retval=None)
sympy.core.decorators._sympifyit(arg,retval=None)
sympy.core.decorators.call_highest_priority(method_name)
sympy.core.decorators.sympify_method_args(cls)
sympy.core.decorators.sympify_return(*args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/trace.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/multidimensional.py----------------------------------------
A:sympy.core.multidimensional.arglength->len(args)
A:sympy.core.multidimensional.args->list(args)
A:sympy.core.multidimensional.args[n]->structure_copy(entry)
A:sympy.core.multidimensional.kwargs[n]->structure_copy(entry)
A:sympy.core.multidimensional.result->apply_on_element(wrapper, args, kwargs, n)
sympy.core.multidimensional.apply_on_element(f,args,kwargs,n)
sympy.core.multidimensional.iter_copy(structure)
sympy.core.multidimensional.structure_copy(structure)
sympy.core.multidimensional.vectorize(self,*mdargs)
sympy.vectorize(self,*mdargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/mod.py----------------------------------------
A:sympy.core.mod.rv->number_eval(p, q)
A:sympy.core.mod.d->abs(p)
A:sympy.core.mod.prod_mod->Mul(*mod)
A:sympy.core.mod.prod_non_mod->Mul(*non_mod)
A:sympy.core.mod.prod_mod1->Mul(*[i.args[0] for i in mod_l])
A:sympy.core.mod.p->Add(*args)
A:sympy.core.mod.G->mul.Mul._from_args(G.args[1:])
A:sympy.core.mod.a->cls(i, q)
A:sympy.core.mod.(cp, p)->Add(*args).as_coeff_Mul()
A:sympy.core.mod.(cq, q)->q.as_coeff_Mul()
sympy.Mod(Function)
sympy.core.mod.Mod(Function)
sympy.core.mod.Mod._eval_is_integer(self)
sympy.core.mod.Mod._eval_is_nonnegative(self)
sympy.core.mod.Mod._eval_is_nonpositive(self)
sympy.core.mod.Mod._eval_rewrite_as_floor(self,a,b,**kwargs)
sympy.core.mod.Mod.eval(cls,p,q)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/mul.py----------------------------------------
A:sympy.core.mul._args_sortkey->cmp_to_key(Basic.compare)
A:sympy.core.mul.args->list(self.args)
A:sympy.core.mul.a->powdenest(a)
A:sympy.core.mul.(c, nc)->breakup(self2)
A:sympy.core.mul._kind_dispatcher->KindDispatcher('Mul_kind_dispatcher', commutative=True)
A:sympy.core.mul.(c, args)->self.as_coeff_mul()
A:sympy.core.mul.(r, b)->Pow(b, e / co).as_coeff_Mul()
A:sympy.core.mul.arb->cls(a * r, b, evaluate=False)
A:sympy.core.mul.newb->Add(*[_keep_coeff(a, bi) for bi in b.args])
A:sympy.core.mul.(o, order_symbols)->nc_seq.pop(0).as_expr_variables(order_symbols)
A:sympy.core.mul.coeff->nc_seq.pop(0).__mul__(coeff)
A:sympy.core.mul.(b, e)->base_exp(b)
A:sympy.core.mul.o->nc_seq.pop(0)
A:sympy.core.mul.o1->nc_part.pop()
A:sympy.core.mul.(b1, e1)->nc_part.pop().as_base_exp()
A:sympy.core.mul.(b2, e2)->nc_seq.pop(0).as_base_exp()
A:sympy.core.mul.co->Rational(ep, e.q).as_coeff_Mul()
A:sympy.core.mul.d[di]->Add(*li)
A:sympy.core.mul.c_powers->_gather(new_c_powers)
A:sympy.core.mul.num_exp->_gather(num_exp)
A:sympy.core.mul.p->Mul(*[arg.diff((s, k)) for (k, arg) in zip(kvals, args)])
A:sympy.core.mul.inv_exp_dict[e]->cls(*b)
A:sympy.core.mul.b->Pow(b, e / co)
A:sympy.core.mul.(e_i, ep)->divmod(e.p, e.q)
A:sympy.core.mul.e->Rational(ep, e.q)
A:sympy.core.mul.pnew->defaultdict(list)
A:sympy.core.mul.g->bi.gcd(bj)
A:sympy.core.mul.obj->Pow(bi, ei)
A:sympy.core.mul.pnew[e]->cls(*b)
A:sympy.core.mul.(p, q)->Rational(p, q).as_numer_denom()
A:sympy.core.mul.(n, p)->divmod(p, q)
A:sympy.core.mul.neg1e->Rational(p, q)
A:sympy.core.mul.(c_part, coeff_sign)->_handle_for_oo(c_part, 1)
A:sympy.core.mul.(nc_part, coeff_sign)->_handle_for_oo(nc_part, coeff_sign)
A:sympy.core.mul.(cargs, nc)->self.args_cnc(split_1=False)
A:sympy.core.mul.(n, d)->fraction(self)
A:sympy.core.mul.(n, t)->integer_nthroot(n, 2)
A:sympy.core.mul.(d, t)->integer_nthroot(d, 2)
A:sympy.core.mul.(c, m)->self.as_coeff_Mul()
A:sympy.core.mul.mnew->Mul._from_args((coeff, factors))._eval_evalf(prec)
A:sympy.core.mul.rv->operations.AssocOp._eval_evalf(self, prec)
A:sympy.core.mul.(im_part, imag_unit)->self.as_coeff_Mul()
A:sympy.core.mul.(l1, l2)->sift(self.args, lambda x: x.has(*deps), binary=True)
A:sympy.core.mul.(r, i)->powdenest(a).as_real_imag()
A:sympy.core.mul.m->Mul._from_args((coeff, factors))
A:sympy.core.mul.imco->im(coeffi.pop(0))
A:sympy.core.mul.reco->self.func(*coeffr + coeffi)
A:sympy.core.mul.(addre, addim)->expand_mul(addterms, deep=False).as_real_imag()
A:sympy.core.mul.L->len(sums)
A:sympy.core.mul.left->Mul._expandsums(sums[:L // 2])
A:sympy.core.mul.right->Mul._expandsums(sums[L // 2:])
A:sympy.core.mul.added->Add(*terms)
A:sympy.core.mul.plain->self.func(*plain)
A:sympy.core.mul.deep->hints.get('deep', False)
A:sympy.core.mul.terms->Mul.make_args(terms)
A:sympy.core.mul.t->t._eval_expand_mul()._eval_expand_mul()
A:sympy.core.mul.d->defaultdict(int)
A:sympy.core.mul.kvals->symbols('k1:%i' % m, cls=Dummy)
A:sympy.core.mul.nfact->factorial(n)
A:sympy.core.mul.rest->Mul(*self.args[1:])
A:sympy.core.mul.(coeff, terms)->self.as_coeff_Mul()
A:sympy.core.mul.newexpr->self.__class__._combine_inverse(expr, coeff)
A:sympy.core.mul.expr->sympify(expr)
A:sympy.core.mul.(c1, nc1)->self.args_cnc()
A:sympy.core.mul.(c2, nc2)->sympify(expr).args_cnc()
A:sympy.core.mul.comm_mul_self->Mul(*c1)
A:sympy.core.mul.comm_mul_expr->Mul(*c2)
A:sympy.core.mul.repl_dict->repl_dict.copy().copy()
A:sympy.core.mul.nc1->Mul._matches_expand_pows(nc1)
A:sympy.core.mul.nc2->Mul._matches_expand_pows(nc2)
A:sympy.core.mul.states_matches->Mul._matches_new_states(wildcard_dict, state, nodes, targets)
A:sympy.core.mul.state->agenda.pop()
A:sympy.core.mul.match_attempt->node.matches(target)
A:sympy.core.mul.other_node_inds->Mul._matches_get_other_nodes(dictionary, nodes, node_ind)
A:sympy.core.mul.blen->len(b)
A:sympy.core.mul.lhs->Mul(*[k ** v for (k, v) in a.items()]).xreplace(i_)
A:sympy.core.mul.rhs->Mul(*[k ** v for (k, v) in b.items()]).xreplace(i_)
A:sympy.core.mul.srv->signsimp(rv)
A:sympy.core.mul.(numers, denoms)->list(zip(*[f.as_numer_denom() for f in self.args]))
A:sympy.core.mul.comp->_fuzzy_group((a.is_complex for a in self.args))
A:sympy.core.mul.(seen_zero, seen_infinite)->self._eval_is_zero_infinite_helper()
A:sympy.core.mul.r->rejoin(*r)
A:sympy.core.mul.is_rational->self._eval_is_rational()
A:sympy.core.mul.has_polar->any((arg.is_polar for arg in self.args))
A:sympy.core.mul.is_zero->self._eval_is_zero()
A:sympy.core.mul.others->list(self.args)
A:sympy.core.mul.is_integer->self._eval_is_integer()
A:sympy.core.mul.(co, _)->Rational(ep, e.q).as_coeff_mul()
A:sympy.core.mul.co_xmul->co_self.extract_multiplicatively(co_old)
A:sympy.core.mul.(old_c, old_nc)->breakup(old)
A:sympy.core.mul.mult->S(multiplicity(abs(co_old), co_self))
A:sympy.core.mul.cdid->min(rat)
A:sympy.core.mul.nc[i]->rejoin(*nc[i]).subs(old, new)
A:sympy.core.mul.take->len(old_nc)
A:sympy.core.mul.ndo->min(cdid, ndo)
A:sympy.core.mul.l->rejoin(nc[i][0], nc[i][1] - ndo * old_nc[0][1])
A:sympy.core.mul.do->min(ncdid, cdid)
A:sympy.core.mul.lt->self._eval_as_leading_term(x, logx=logx, cdir=cdir)
A:sympy.core.mul.(coeff, exp)->t._eval_expand_mul()._eval_expand_mul().leadterm(x)
A:sympy.core.mul.n0->sympify(sum((t[1] for t in ords if t[1].is_number)))
A:sympy.core.mul.n1->ceiling(n - n0 + (m if m.is_number else 0))
A:sympy.core.mul.s->t._eval_expand_mul()._eval_expand_mul().nseries(x, n=n1, logx=logx, cdir=cdir)
A:sympy.core.mul.ns->t._eval_expand_mul()._eval_expand_mul().nseries(x, n=n1, logx=logx, cdir=cdir).getn()
A:sympy.core.mul.res->powsimp(self.func(*facs).expand(), combine='exp', deep=True)
A:sympy.core.mul.(coeffs, powers)->zip(*ords3)
A:sympy.core.mul.power->sum(powers)
A:sympy.core.mul.(c, p)->powdenest(a).as_content_primitive(radical=radical, clear=clear)
A:sympy.core.mul.(cpart, ncpart)->self.args_cnc()
A:sympy.core.mul.mul->AssocOpDispatcher('mul')
A:sympy.core.mul.margs->list(factors.args)
A:sympy.core.mul.(c, r)->Rational(ep, e.q).as_coeff_Mul()
sympy.Mul(Expr,AssocOp)
sympy.core.mul.Mul(Expr,AssocOp)
sympy.core.mul.Mul.__neg__(self)
sympy.core.mul.Mul._combine_inverse(lhs,rhs)
sympy.core.mul.Mul._eval_adjoint(self)
sympy.core.mul.Mul._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.core.mul.Mul._eval_conjugate(self)
sympy.core.mul.Mul._eval_derivative(self,s)
sympy.core.mul.Mul._eval_derivative_n_times(self,s,n)
sympy.core.mul.Mul._eval_difference_delta(self,n,step)
sympy.core.mul.Mul._eval_evalf(self,prec)
sympy.core.mul.Mul._eval_expand_mul(self,**hints)
sympy.core.mul.Mul._eval_herm_antiherm(self,herm)
sympy.core.mul.Mul._eval_is_algebraic(self)
sympy.core.mul.Mul._eval_is_algebraic_expr(self,syms)
sympy.core.mul.Mul._eval_is_antihermitian(self)
sympy.core.mul.Mul._eval_is_complex(self)
sympy.core.mul.Mul._eval_is_composite(self)
sympy.core.mul.Mul._eval_is_even(self)
sympy.core.mul.Mul._eval_is_extended_negative(self)
sympy.core.mul.Mul._eval_is_extended_positive(self)
sympy.core.mul.Mul._eval_is_extended_real(self)
sympy.core.mul.Mul._eval_is_hermitian(self)
sympy.core.mul.Mul._eval_is_imaginary(self)
sympy.core.mul.Mul._eval_is_infinite(self)
sympy.core.mul.Mul._eval_is_integer(self)
sympy.core.mul.Mul._eval_is_irrational(self)
sympy.core.mul.Mul._eval_is_meromorphic(self,x,a)
sympy.core.mul.Mul._eval_is_odd(self)
sympy.core.mul.Mul._eval_is_polar(self)
sympy.core.mul.Mul._eval_is_polynomial(self,syms)
sympy.core.mul.Mul._eval_is_rational(self)
sympy.core.mul.Mul._eval_is_rational_function(self,syms)
sympy.core.mul.Mul._eval_is_zero(self)
sympy.core.mul.Mul._eval_is_zero_infinite_helper(self)
sympy.core.mul.Mul._eval_nseries(self,x,n,logx,cdir=0)
sympy.core.mul.Mul._eval_pos_neg(self,sign)
sympy.core.mul.Mul._eval_power(self,e)
sympy.core.mul.Mul._eval_real_imag(self,real)
sympy.core.mul.Mul._eval_subs(self,old,new)
sympy.core.mul.Mul._eval_transpose(self)
sympy.core.mul.Mul._expandsums(sums)
sympy.core.mul.Mul._matches_add_wildcard(dictionary,state)
sympy.core.mul.Mul._matches_expand_pows(arg_list)
sympy.core.mul.Mul._matches_get_other_nodes(dictionary,nodes,node_ind)
sympy.core.mul.Mul._matches_match_wilds(dictionary,wildcard_ind,nodes,targets)
sympy.core.mul.Mul._matches_new_states(dictionary,state,nodes,targets)
sympy.core.mul.Mul._matches_noncomm(nodes,targets,repl_dict=None)
sympy.core.mul.Mul._matches_simple(self,expr,repl_dict)
sympy.core.mul.Mul._mpc_(self)
sympy.core.mul.Mul._sorted_args(self)
sympy.core.mul.Mul.as_base_exp(self)
sympy.core.mul.Mul.as_coeff_Mul(self,rational=False)
sympy.core.mul.Mul.as_coeff_mul(self,*deps,rational=True,**kwargs)
sympy.core.mul.Mul.as_content_primitive(self,radical=False,clear=True)
sympy.core.mul.Mul.as_numer_denom(self)
sympy.core.mul.Mul.as_ordered_factors(self,order=None)
sympy.core.mul.Mul.as_powers_dict(self)
sympy.core.mul.Mul.as_real_imag(self,deep=True,**hints)
sympy.core.mul.Mul.as_two_terms(self)
sympy.core.mul.Mul.class_key(cls)
sympy.core.mul.Mul.could_extract_minus_sign(self)
sympy.core.mul.Mul.flatten(cls,seq)
sympy.core.mul.Mul.kind(self)
sympy.core.mul.Mul.matches(self,expr,repl_dict=None,old=False)
sympy.core.mul.NC_Marker
sympy.core.mul._keep_coeff(coeff,factors,clear=True,sign=False)
sympy.core.mul._mulsort(args)
sympy.core.mul._unevaluated_Mul(*args)
sympy.core.mul.expand_2arg(e)
sympy.core.mul.prod(a,start=1)
sympy.prod(a,start=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_singleton.py----------------------------------------
sympy.core.tests.test_singleton.test_Singleton()
sympy.core.tests.test_singleton.test_names_in_namespace()
sympy.core.tests.test_singleton.test_singleton_redefinition()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_subs.py----------------------------------------
A:sympy.core.tests.test_subs.n3->Rational(3)
A:sympy.core.tests.test_subs.e->r(5.0 / 6, 10, 5)
A:sympy.core.tests.test_subs.z->zeros(2)
A:sympy.core.tests.test_subs.z1->ZeroMatrix(2, 2)
A:sympy.core.tests.test_subs.i->Symbol('i', integer=True)
A:sympy.core.tests.test_subs.o->Symbol('o', odd=True)
A:sympy.core.tests.test_subs.n->Symbol('n', negative=True)
A:sympy.core.tests.test_subs.x->Symbol('x', real=True)
A:sympy.core.tests.test_subs.w->Symbol('w')
A:sympy.core.tests.test_subs.x1->Symbol('x1')
A:sympy.core.tests.test_subs.x2->Symbol('x2')
A:sympy.core.tests.test_subs.(a, b, c)->symbols('a b c', commutative=True)
A:sympy.core.tests.test_subs.r->RootOf(eq, 0)
A:sympy.core.tests.test_subs.s->Symbol('s')
A:sympy.core.tests.test_subs.f->Function('f')
A:sympy.core.tests.test_subs.pat->Derivative(f(x), x, x)
A:sympy.core.tests.test_subs.eq->Derivative(g(x), g(x))
A:sympy.core.tests.test_subs.res->Eq(Integer(16), x)
A:sympy.core.tests.test_subs.(c2, c3, q1p, q2p, c1, s1, s2, s3)->symbols('c2 c3 q1p q2p c1 s1 s2 s3')
A:sympy.core.tests.test_subs.(x, y, z, a, b, c)->symbols('x y z a b c')
A:sympy.core.tests.test_subs.(A, B, C)->symbols('A B C', commutative=0)
A:sympy.core.tests.test_subs.a->Subs(x * y * z, (y, x, z), (x + 1, x + z, x))
A:sympy.core.tests.test_subs.(a, b)->symbols('a b', commutative=True)
A:sympy.core.tests.test_subs.(x, y)->symbols('x y', nonnegative=True)
A:sympy.core.tests.test_subs.(a, b, c, d, K)->symbols('a b c d K', commutative=True)
A:sympy.core.tests.test_subs.(w, x, y, z, L)->symbols('w x y z L', commutative=False)
A:sympy.core.tests.test_subs.alpha->symbols('alpha', commutative=True)
A:sympy.core.tests.test_subs.someint->symbols('someint', commutative=True, integer=True)
A:sympy.core.tests.test_subs.(R, S, T, U)->symbols('R S T U', cls=Wild)
A:sympy.core.tests.test_subs.(x, y, z)->symbols('x y z', commutative=True)
A:sympy.core.tests.test_subs.(a, b, c, d, x, y, t)->symbols('a b c d x y t')
A:sympy.core.tests.test_subs.ans->Mul(2, y + 1, evaluate=False)
A:sympy.core.tests.test_subs.(f, g)->symbols('f g', cls=Function)
A:sympy.core.tests.test_subs.l->Lambda((x, y), sin(x) + y)
A:sympy.core.tests.test_subs.g->Function('g')
A:sympy.core.tests.test_subs.(f_func, g_func)->symbols('f g', cls=Function)
A:sympy.core.tests.test_subs.dex->Derivative(exp(x), x)
A:sympy.core.tests.test_subs.(A, B)->symbols('A B', commutative=False)
A:sympy.core.tests.test_subs.it->iter([[x, y]])
A:sympy.core.tests.test_subs.(a, b, c, d, e)->symbols('a b c d e')
A:sympy.core.tests.test_subs.(a, b, c, K)->symbols('a b c K', commutative=True)
A:sympy.core.tests.test_subs.N->Symbol('N', commutative=False)
A:sympy.core.tests.test_subs.(f, g, h, i)->symbols('f g h i', cls=Function)
A:sympy.core.tests.test_subs.p->Piecewise((g(f(x, y)), x < -1), (g(x), x <= 1))
A:sympy.core.tests.test_subs.reps->reps.items().items()
A:sympy.core.tests.test_subs.(x0, x1)->symbols('x0 x1')
A:sympy.core.tests.test_subs.t->Symbol('t')
A:sympy.core.tests.test_subs.result->Symbol('s').subs(sqrt(x ** 2), y)
A:sympy.core.tests.test_subs.F->Lambda((x, y), exp(2 * x + 3 * y))
A:sympy.core.tests.test_subs.A->f(x, f(x, x))
A:sympy.core.tests.test_subs.C->F(x, F(x, x))
A:sympy.core.tests.test_subs.b->Subs(x * y * z, (y, x, z), (x + 1, y + z, y))
A:sympy.core.tests.test_subs.(q1, q2)->dynamicsymbols('q1, q2')
A:sympy.core.tests.test_subs.xr->Symbol('xr', real=True)
sympy.core.tests.test_subs.test_2arg_hack()
sympy.core.tests.test_subs.test_Function_subs()
sympy.core.tests.test_subs.test_RootOf_issue_10092()
sympy.core.tests.test_subs.test_Subs_subs()
sympy.core.tests.test_subs.test_add()
sympy.core.tests.test_subs.test_bug()
sympy.core.tests.test_subs.test_deriv_sub_bug3()
sympy.core.tests.test_subs.test_derivative_subs()
sympy.core.tests.test_subs.test_derivative_subs2()
sympy.core.tests.test_subs.test_derivative_subs3()
sympy.core.tests.test_subs.test_dict_ambigous()
sympy.core.tests.test_subs.test_dict_set()
sympy.core.tests.test_subs.test_division()
sympy.core.tests.test_subs.test_equality_subs1()
sympy.core.tests.test_subs.test_equality_subs2()
sympy.core.tests.test_subs.test_functions_subs()
sympy.core.tests.test_subs.test_guard_against_indeterminate_evaluation()
sympy.core.tests.test_subs.test_issue_10829()
sympy.core.tests.test_subs.test_issue_11746()
sympy.core.tests.test_subs.test_issue_12657()
sympy.core.tests.test_subs.test_issue_13333()
sympy.core.tests.test_subs.test_issue_15234()
sympy.core.tests.test_subs.test_issue_17823()
sympy.core.tests.test_subs.test_issue_19326()
sympy.core.tests.test_subs.test_issue_19558()
sympy.core.tests.test_subs.test_issue_22033()
sympy.core.tests.test_subs.test_issue_2877()
sympy.core.tests.test_subs.test_issue_3742()
sympy.core.tests.test_subs.test_issue_4680()
sympy.core.tests.test_subs.test_issue_5217()
sympy.core.tests.test_subs.test_issue_5261()
sympy.core.tests.test_subs.test_issue_5284()
sympy.core.tests.test_subs.test_issue_5651()
sympy.core.tests.test_subs.test_issue_5910()
sympy.core.tests.test_subs.test_issue_6075()
sympy.core.tests.test_subs.test_issue_6079()
sympy.core.tests.test_subs.test_issue_6158()
sympy.core.tests.test_subs.test_issue_6419_6421()
sympy.core.tests.test_subs.test_issue_6559()
sympy.core.tests.test_subs.test_issue_6923()
sympy.core.tests.test_subs.test_issue_6976()
sympy.core.tests.test_subs.test_issue_8886()
sympy.core.tests.test_subs.test_logexppow()
sympy.core.tests.test_subs.test_mul()
sympy.core.tests.test_subs.test_mul2()
sympy.core.tests.test_subs.test_no_arith_subs_on_floats()
sympy.core.tests.test_subs.test_noncommutative_subs()
sympy.core.tests.test_subs.test_pow_eval_subs_no_cache()
sympy.core.tests.test_subs.test_powers()
sympy.core.tests.test_subs.test_recurse_Application_args()
sympy.core.tests.test_subs.test_simultaneous_subs()
sympy.core.tests.test_subs.test_subbug1()
sympy.core.tests.test_subs.test_subbug2()
sympy.core.tests.test_subs.test_subs()
sympy.core.tests.test_subs.test_subs_AccumBounds()
sympy.core.tests.test_subs.test_subs_Matrix()
sympy.core.tests.test_subs.test_subs_basic_funcs()
sympy.core.tests.test_subs.test_subs_commutative()
sympy.core.tests.test_subs.test_subs_constants()
sympy.core.tests.test_subs.test_subs_dict()
sympy.core.tests.test_subs.test_subs_dict1()
sympy.core.tests.test_subs.test_subs_issue_4009()
sympy.core.tests.test_subs.test_subs_iter()
sympy.core.tests.test_subs.test_subs_mixed()
sympy.core.tests.test_subs.test_subs_noncommutative()
sympy.core.tests.test_subs.test_subs_simple()
sympy.core.tests.test_subs.test_subs_wild()
sympy.core.tests.test_subs.test_trigonometric()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_count_ops.py----------------------------------------
A:sympy.core.tests.test_count_ops.(x, y, z)->symbols('x,y,z')
A:sympy.core.tests.test_count_ops.(a, b, c)->symbols('a,b,c')
A:sympy.core.tests.test_count_ops.(ADD, MUL, POW, SIN, COS, EXP, AND, D, G, M)->symbols('Add Mul Pow sin cos exp And Derivative Integral Sum'.upper())
A:sympy.core.tests.test_count_ops.(DIV, SUB, NEG)->symbols('DIV SUB NEG')
A:sympy.core.tests.test_count_ops.(LT, LE, GT, GE, EQ, NE)->symbols('LT LE GT GE EQ NE')
A:sympy.core.tests.test_count_ops.(NOT, OR, AND, XOR, IMPLIES, EQUIVALENT, _ITE, BASIC, TUPLE)->symbols('Not Or And Xor Implies Equivalent ITE Basic Tuple'.upper())
A:sympy.core.tests.test_count_ops.M->MatrixSymbol('M', m + n, m * m)
A:sympy.core.tests.test_count_ops.P->MatrixSymbol('P', 3, 3)
A:sympy.core.tests.test_count_ops.Q->MatrixSymbol('Q', 3, 3)
A:sympy.core.tests.test_count_ops.m->Symbol('m', integer=True)
A:sympy.core.tests.test_count_ops.n->Symbol('n', integer=True)
A:sympy.core.tests.test_count_ops.f->Function('f')
A:sympy.core.tests.test_count_ops.g->Function('g')
A:sympy.core.tests.test_count_ops.(FUNC_F, FUNC_G)->symbols('FUNC_F, FUNC_G')
sympy.core.tests.test_count_ops.test_count_ops_non_visual()
sympy.core.tests.test_count_ops.test_count_ops_visual()
sympy.core.tests.test_count_ops.test_issue_21532()
sympy.core.tests.test_count_ops.test_issue_9324()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_sympify.py----------------------------------------
A:sympy.core.tests.test_sympify.numpy->import_module('numpy')
A:sympy.core.tests.test_sympify.v->sympify('2*x+4*x+2+4')
A:sympy.core.tests.test_sympify.value->sympify(mpmath.mpf(1.0))
A:sympy.core.tests.test_sympify.a->Function('a')
A:sympy.core.tests.test_sympify.p->sympify(s)
A:sympy.core.tests.test_sympify.x->Symbol('x')
A:sympy.core.tests.test_sympify.f->Function('f')
A:sympy.core.tests.test_sympify.y->Symbol('y')
A:sympy.core.tests.test_sympify.i5->I5()
A:sympy.core.tests.test_sympify.i5b->I5b()
A:sympy.core.tests.test_sympify.i5c->I5c()
A:sympy.core.tests.test_sympify.f1_1->F1_1()
A:sympy.core.tests.test_sympify.f1_1b->F1_1b()
A:sympy.core.tests.test_sympify.f1_1c->F1_1c()
A:sympy.core.tests.test_sympify.b->Symbol('b')
A:sympy.core.tests.test_sympify.C->import_module('numpy').arange(0, 24)
A:sympy.core.tests.test_sympify.exp1->sympify('C')
A:sympy.core.tests.test_sympify.exp2->sympify('C', vars)
A:sympy.core.tests.test_sympify.L->sympify(Line(p, (1, 0)))
A:sympy.core.tests.test_sympify.ss->kernS(s)
A:sympy.core.tests.test_sympify.s->str(pi.evalf(128))
A:sympy.core.tests.test_sympify.one->kernS('x - (x - 1)')
A:sympy.core.tests.test_sympify.A->import_module('numpy').array([[1, 3, -1], [0, 1, 7]])
A:sympy.core.tests.test_sympify.sA->S(A)
A:sympy.core.tests.test_sympify.B->import_module('numpy').array([-7, x, 3 * y ** 2])
A:sympy.core.tests.test_sympify.sB->S(B)
A:sympy.core.tests.test_sympify.sC->S(C)
A:sympy.core.tests.test_sympify.a1->import_module('numpy').array([1, 2, 3])
A:sympy.core.tests.test_sympify.a2->import_module('numpy').array(list(range(24)))
A:sympy.core.tests.test_sympify.n->Symbol('n')
A:sympy.core.tests.test_sympify.d->sympify(defaultdict(int, {0.5: 1}))
A:sympy.core.tests.test_sympify.z1->import_module('numpy').zeros((1, 1), dtype=numpy.float64)
A:sympy.core.tests.test_sympify.z2->import_module('numpy').zeros((2, 2), dtype=numpy.float64)
A:sympy.core.tests.test_sympify.z3->import_module('numpy').zeros((), dtype=numpy.float64)
A:sympy.core.tests.test_sympify.y1->import_module('numpy').ones((1, 1), dtype=numpy.float64)
A:sympy.core.tests.test_sympify.y2->import_module('numpy').ones((2, 2), dtype=numpy.float64)
A:sympy.core.tests.test_sympify.y3->import_module('numpy').ones((), dtype=numpy.float64)
A:sympy.core.tests.test_sympify.u->sympify('x+3*x+2')
sympy.core.tests.test_sympify.test_Range()
sympy.core.tests.test_sympify.test_S_sympify()
sympy.core.tests.test_sympify.test__sympify()
sympy.core.tests.test_sympify.test_evaluate_false()
sympy.core.tests.test_sympify.test_geometry()
sympy.core.tests.test_sympify.test_int_float()
sympy.core.tests.test_sympify.test_issue_10295()
sympy.core.tests.test_sympify.test_issue_13924()
sympy.core.tests.test_sympify.test_issue_14706()
sympy.core.tests.test_sympify.test_issue_16759()
sympy.core.tests.test_sympify.test_issue_16772()
sympy.core.tests.test_sympify.test_issue_16859()
sympy.core.tests.test_sympify.test_issue_17811()
sympy.core.tests.test_sympify.test_issue_19399()
sympy.core.tests.test_sympify.test_issue_21536()
sympy.core.tests.test_sympify.test_issue_3218()
sympy.core.tests.test_sympify.test_issue_3538()
sympy.core.tests.test_sympify.test_issue_3595()
sympy.core.tests.test_sympify.test_issue_3982()
sympy.core.tests.test_sympify.test_issue_4133()
sympy.core.tests.test_sympify.test_issue_4788()
sympy.core.tests.test_sympify.test_issue_4798_None()
sympy.core.tests.test_sympify.test_issue_4988_builtins()
sympy.core.tests.test_sympify.test_issue_5939()
sympy.core.tests.test_sympify.test_issue_6046()
sympy.core.tests.test_sympify.test_issue_6540_6552()
sympy.core.tests.test_sympify.test_issue_8439()
sympy.core.tests.test_sympify.test_issue_8821_highprec_from_str()
sympy.core.tests.test_sympify.test_kernS()
sympy.core.tests.test_sympify.test_lambda()
sympy.core.tests.test_sympify.test_lambda_raises()
sympy.core.tests.test_sympify.test_numpy_sympify_args()
sympy.core.tests.test_sympify.test_sympify1()
sympy.core.tests.test_sympify.test_sympify2()
sympy.core.tests.test_sympify.test_sympify3()
sympy.core.tests.test_sympify.test_sympify4()
sympy.core.tests.test_sympify.test_sympify_Fraction()
sympy.core.tests.test_sympify.test_sympify_bool()
sympy.core.tests.test_sympify.test_sympify_converter()
sympy.core.tests.test_sympify.test_sympify_factorial()
sympy.core.tests.test_sympify.test_sympify_float()
sympy.core.tests.test_sympify.test_sympify_function()
sympy.core.tests.test_sympify.test_sympify_gmpy()
sympy.core.tests.test_sympify.test_sympify_keywords()
sympy.core.tests.test_sympify.test_sympify_mpmath()
sympy.core.tests.test_sympify.test_sympify_mro()
sympy.core.tests.test_sympify.test_sympify_numpy()
sympy.core.tests.test_sympify.test_sympify_poly()
sympy.core.tests.test_sympify.test_sympify_raises()
sympy.core.tests.test_sympify.test_sympify_rational_numbers_set()
sympy.core.tests.test_sympify.test_sympify_set()
sympy.core.tests.test_sympify.test_sympify_text()
sympy.core.tests.test_sympify.test_sympifyit()
sympy.core.tests.test_sympify.test_sympyify_iterables()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_symbol.py----------------------------------------
A:sympy.core.tests.test_symbol.a1->Str('a')
A:sympy.core.tests.test_symbol.a2->Str('a')
A:sympy.core.tests.test_symbol.b->Symbol('b')
A:sympy.core.tests.test_symbol.a->Symbol('a')
A:sympy.core.tests.test_symbol.x1->Symbol('x1')
A:sympy.core.tests.test_symbol.x2->Symbol('x2')
A:sympy.core.tests.test_symbol.xdummy1->Dummy('x')
A:sympy.core.tests.test_symbol.xdummy2->Dummy('x')
A:sympy.core.tests.test_symbol.d->Symbol('d')
A:sympy.core.tests.test_symbol.(c, d)->symbols('c,d', cls=Dummy)
A:sympy.core.tests.test_symbol.d1->Dummy('d', dummy_index=3)
A:sympy.core.tests.test_symbol.d2->Dummy('d')
A:sympy.core.tests.test_symbol.d3->Dummy('d', dummy_index=3)
A:sympy.core.tests.test_symbol.x->Symbol('x')
A:sympy.core.tests.test_symbol.(x, y, z)->symbols('x,y,z')
A:sympy.core.tests.test_symbol.y->Symbol('y')
A:sympy.core.tests.test_symbol.p->Symbol('p', positive=True)
A:sympy.core.tests.test_symbol.k->Symbol('k', integer=True)
A:sympy.core.tests.test_symbol.n->Symbol('n', integer=True, positive=True)
A:sympy.core.tests.test_symbol.S->Wild('S', properties=[symbolp])
A:sympy.core.tests.test_symbol.R->Wild('R', properties=[realp])
A:sympy.core.tests.test_symbol.Y->Wild('Y', exclude=[x, p, k, n])
A:sympy.core.tests.test_symbol.P->Wild('P', properties=[positivep])
A:sympy.core.tests.test_symbol.K->Wild('K', properties=[integerp])
A:sympy.core.tests.test_symbol.N->Wild('N', properties=[positivep, integerp])
A:sympy.core.tests.test_symbol.z->Symbol('z')
A:sympy.core.tests.test_symbol.xyz->Symbol('xyz')
A:sympy.core.tests.test_symbol.abc->Symbol('abc')
A:sympy.core.tests.test_symbol.(a, b)->symbols('x,y', real=True)
A:sympy.core.tests.test_symbol.x0->Symbol('x0')
A:sympy.core.tests.test_symbol.y0->Symbol('y0')
A:sympy.core.tests.test_symbol.y1->Symbol('y1')
A:sympy.core.tests.test_symbol.c->Symbol('c')
A:sympy.core.tests.test_symbol.aa->Symbol('aa')
A:sympy.core.tests.test_symbol.ab->Symbol('ab')
A:sympy.core.tests.test_symbol.ac->Symbol('ac')
A:sympy.core.tests.test_symbol.ad->Symbol('ad')
A:sympy.core.tests.test_symbol.xu->Symbol('x')
A:sympy.core.tests.test_symbol._x->Symbol('x', real=True)
A:sympy.core.tests.test_symbol.r->Symbol('x', real=True)
A:sympy.core.tests.test_symbol.(x, y, y_1, _x, x_1, x_2)->symbols('x y y_1 _x x_1 x_2')
A:sympy.core.tests.test_symbol.syms->list(symbols('x, y'))
A:sympy.core.tests.test_symbol.(syms[0], syms[1])->symbols(f'x{n}, y{n}')
A:sympy.core.tests.test_symbol.thread->threading.Thread(target=thread1)
sympy.core.tests.test_symbol.test_Dummy()
sympy.core.tests.test_symbol.test_Dummy_force_dummy_index()
sympy.core.tests.test_symbol.test_Str()
sympy.core.tests.test_symbol.test_Symbol()
sympy.core.tests.test_symbol.test_Wild_properties()
sympy.core.tests.test_symbol.test_disambiguate()
sympy.core.tests.test_symbol.test_ineq_unequal()
sympy.core.tests.test_symbol.test_issue_gh_16734()
sympy.core.tests.test_symbol.test_lt_gt()
sympy.core.tests.test_symbol.test_no_len()
sympy.core.tests.test_symbol.test_symbols()
sympy.core.tests.test_symbol.test_symbols_become_functions_issue_3539()
sympy.core.tests.test_symbol.test_unicode()
sympy.core.tests.test_symbol.test_uniquely_named_symbol_and_Symbol()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_truediv.py----------------------------------------
A:sympy.core.tests.test_truediv.x->Symbol('x')
A:sympy.core.tests.test_truediv.y->Symbol('y')
sympy.core.tests.test_truediv.dotest(s)
sympy.core.tests.test_truediv.test_basic()
sympy.core.tests.test_truediv.test_ibasic()
sympy.core.tests.test_truediv.test_truediv()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_var.py----------------------------------------
A:sympy.core.tests.test_var.v->eval("var(['d', 'e', 'fg'])", ns)
A:sympy.core.tests.test_var.v2->eval("var('x,y,z')", ns)
A:sympy.core.tests.test_var.v3->eval("var('x,y z')", ns)
A:sympy.core.tests.test_var.v1->eval("var('x y z')", ns)
sympy.core.tests.test_var.test_var()
sympy.core.tests.test_var.test_var_accepts_comma()
sympy.core.tests.test_var.test_var_cls()
sympy.core.tests.test_var.test_var_keywords()
sympy.core.tests.test_var.test_var_return()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_equal.py----------------------------------------
A:sympy.core.tests.test_equal.b->Symbol('b')
A:sympy.core.tests.test_equal.a->Symbol('a')
A:sympy.core.tests.test_equal.x->Symbol('x')
A:sympy.core.tests.test_equal.e1->exp(1 * x)
A:sympy.core.tests.test_equal.y->Symbol('y')
A:sympy.core.tests.test_equal.e2->exp(y + 1 / y)
A:sympy.core.tests.test_equal.e3->exp(x)
A:sympy.core.tests.test_equal.t->T()
A:sympy.core.tests.test_equal.u->Dummy('u')
sympy.core.tests.test_equal.test_cmp_bug1()
sympy.core.tests.test_equal.test_cmp_bug2()
sympy.core.tests.test_equal.test_cmp_issue_4357()
sympy.core.tests.test_equal.test_dummy_eq()
sympy.core.tests.test_equal.test_equal()
sympy.core.tests.test_equal.test_expevalbug()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_expr.py----------------------------------------
A:sympy.core.tests.test_expr.(f, g, h)->symbols('f,g,h', cls=Function)
A:sympy.core.tests.test_expr.i5->I5()
A:sympy.core.tests.test_expr.f1_1->F1_1()
A:sympy.core.tests.test_expr.obj->object.__new__(cls)
A:sympy.core.tests.test_expr.r->Float(str(n)).round(-4)
A:sympy.core.tests.test_expr.m1->Symbol('m1', negative=False, real=True)
A:sympy.core.tests.test_expr.m2->Symbol('m2', nonpositive=False, real=True)
A:sympy.core.tests.test_expr.m3->Symbol('m3', positive=False, real=True)
A:sympy.core.tests.test_expr.m4->Symbol('m4', nonnegative=False, real=True)
A:sympy.core.tests.test_expr.n->S(12345)
A:sympy.core.tests.test_expr.k->symbols('k')
A:sympy.core.tests.test_expr.m->MyInt()
A:sympy.core.tests.test_expr.o->MySymbol()
A:sympy.core.tests.test_expr.a->Add(1, Float('1.' + '9' * 27, ''), evaluate=0)
A:sympy.core.tests.test_expr.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.core.tests.test_expr.(a, b, c)->symbols('a, b, c')
A:sympy.core.tests.test_expr.(x, y)->symbols('x y')
A:sympy.core.tests.test_expr.(n1, n2, n3)->symbols('n1:4', commutative=False)
A:sympy.core.tests.test_expr.eq->(3 * x + 15 * y).extract_multiplicatively(3)
A:sympy.core.tests.test_expr.b->Wild('b')
A:sympy.core.tests.test_expr.p->len(s)
A:sympy.core.tests.test_expr.i->Integer(4400)
A:sympy.core.tests.test_expr.f->Integral(x ** 2 + sin(x * y * z), (x, 0, x + y + z))
A:sympy.core.tests.test_expr.poly->Poly(x ** 2 + x * y * sin(z), x, y, t)
A:sympy.core.tests.test_expr.g->g.expand().expand()
A:sympy.core.tests.test_expr.e->Mul(S.Half, 1 + x, evaluate=False)
A:sympy.core.tests.test_expr.fx->D(f(x), x)
A:sympy.core.tests.test_expr.foo->sign_invariant(x)
A:sympy.core.tests.test_expr.(n1, n2)->symbols('n1 n2', commutative=False)
A:sympy.core.tests.test_expr.(n, m, o, l)->symbols('n m o l', commutative=False)
A:sympy.core.tests.test_expr.(r, kappa)->symbols('r, kappa')
A:sympy.core.tests.test_expr.psi->Function('psi')
A:sympy.core.tests.test_expr.A->symbols('A', commutative=False)
A:sympy.core.tests.test_expr.s->Symbol('bad')
A:sympy.core.tests.test_expr.x->symbols('x')
A:sympy.core.tests.test_expr.expr->Add(*args)
A:sympy.core.tests.test_expr.(A, B)->symbols('A,B', commutative=False)
A:sympy.core.tests.test_expr.(z1, z2)->symbols('z1 z2', zero=True)
A:sympy.core.tests.test_expr.q->symbols('q')
A:sympy.core.tests.test_expr.ans->S(12345).round(4)
A:sympy.core.tests.test_expr.L->int(v[-1])
A:sympy.core.tests.test_expr.fi->float(i)
A:sympy.core.tests.test_expr.he->UnevaluatedExpr(1 / x)
A:sympy.core.tests.test_expr.xx->Mul(x, x, evaluate=False)
A:sympy.core.tests.test_expr.ue2->UnevaluatedExpr(xx)
A:sympy.core.tests.test_expr.eb->ExprBuilder(Mul)
A:sympy.core.tests.test_expr.y->parse_expr('log((2*V/3-V)/C)/-(R+r)*2')
A:sympy.core.tests.test_expr.one->sympify(1)
sympy.core.tests.test_expr.DummyNumber
sympy.core.tests.test_expr.DummyNumber.__add__(self,a)
sympy.core.tests.test_expr.DummyNumber.__mul__(self,a)
sympy.core.tests.test_expr.DummyNumber.__neg__(self)
sympy.core.tests.test_expr.DummyNumber.__pos__(self)
sympy.core.tests.test_expr.DummyNumber.__pow__(self,a)
sympy.core.tests.test_expr.DummyNumber.__radd__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rmul__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rpow__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rsub__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rtruediv__(self,a)
sympy.core.tests.test_expr.DummyNumber.__sub__(self,a)
sympy.core.tests.test_expr.DummyNumber.__truediv__(self,a)
sympy.core.tests.test_expr.F1_1(DummyNumber)
sympy.core.tests.test_expr.F1_1.__float__(self)
sympy.core.tests.test_expr.I5(DummyNumber)
sympy.core.tests.test_expr.I5.__int__(self)
sympy.core.tests.test_expr.NonArithmetic(Basic)
sympy.core.tests.test_expr.NonBasic
sympy.core.tests.test_expr.NonBasic.__add__(self,other)
sympy.core.tests.test_expr.NonBasic.__divmod__(self,other)
sympy.core.tests.test_expr.NonBasic.__floordiv__(self,other)
sympy.core.tests.test_expr.NonBasic.__ge__(self,other)
sympy.core.tests.test_expr.NonBasic.__gt__(self,other)
sympy.core.tests.test_expr.NonBasic.__le__(self,other)
sympy.core.tests.test_expr.NonBasic.__lt__(self,other)
sympy.core.tests.test_expr.NonBasic.__mod__(self,other)
sympy.core.tests.test_expr.NonBasic.__mul__(self,other)
sympy.core.tests.test_expr.NonBasic.__pow__(self,other)
sympy.core.tests.test_expr.NonBasic.__radd__(self,other)
sympy.core.tests.test_expr.NonBasic.__rdivmod__(self,other)
sympy.core.tests.test_expr.NonBasic.__rfloordiv__(self,other)
sympy.core.tests.test_expr.NonBasic.__rmod__(self,other)
sympy.core.tests.test_expr.NonBasic.__rmul__(self,other)
sympy.core.tests.test_expr.NonBasic.__rpow__(self,other)
sympy.core.tests.test_expr.NonBasic.__rsub__(self,other)
sympy.core.tests.test_expr.NonBasic.__rtruediv__(self,other)
sympy.core.tests.test_expr.NonBasic.__sub__(self,other)
sympy.core.tests.test_expr.NonBasic.__truediv__(self,other)
sympy.core.tests.test_expr.NonExpr(Basic,NonBasic)
sympy.core.tests.test_expr.SpecialOp(cls,op,arg1,arg2)
sympy.core.tests.test_expr.dotest(s)
sympy.core.tests.test_expr.test_21494()
sympy.core.tests.test_expr.test_ExprBuilder()
sympy.core.tests.test_expr.test_Expr__eq__iterable_handling()
sympy.core.tests.test_expr.test_SAGE1()
sympy.core.tests.test_expr.test_SAGE2()
sympy.core.tests.test_expr.test_SAGE3()
sympy.core.tests.test_expr.test_action_verbs()
sympy.core.tests.test_expr.test_args()
sympy.core.tests.test_expr.test_args_cnc()
sympy.core.tests.test_expr.test_as_base_exp()
sympy.core.tests.test_expr.test_as_coeff_Add()
sympy.core.tests.test_expr.test_as_coeff_Mul()
sympy.core.tests.test_expr.test_as_coeff_add()
sympy.core.tests.test_expr.test_as_coeff_exponent()
sympy.core.tests.test_expr.test_as_coeff_mul()
sympy.core.tests.test_expr.test_as_coefficients_dict()
sympy.core.tests.test_expr.test_as_independent()
sympy.core.tests.test_expr.test_as_leading_term()
sympy.core.tests.test_expr.test_as_leading_term2()
sympy.core.tests.test_expr.test_as_leading_term3()
sympy.core.tests.test_expr.test_as_leading_term4()
sympy.core.tests.test_expr.test_as_leading_term_deriv_integral()
sympy.core.tests.test_expr.test_as_leading_term_stub()
sympy.core.tests.test_expr.test_as_numer_denom()
sympy.core.tests.test_expr.test_as_ordered_factors()
sympy.core.tests.test_expr.test_as_ordered_terms()
sympy.core.tests.test_expr.test_as_poly_as_expr()
sympy.core.tests.test_expr.test_as_powers_dict()
sympy.core.tests.test_expr.test_atoms()
sympy.core.tests.test_expr.test_attribute_error()
sympy.core.tests.test_expr.test_basic()
sympy.core.tests.test_expr.test_basic_nostr()
sympy.core.tests.test_expr.test_call_2()
sympy.core.tests.test_expr.test_coeff()
sympy.core.tests.test_expr.test_coeff2()
sympy.core.tests.test_expr.test_coeff2_0()
sympy.core.tests.test_expr.test_coeff_expand()
sympy.core.tests.test_expr.test_cooperative_operations()
sympy.core.tests.test_expr.test_count()
sympy.core.tests.test_expr.test_doit()
sympy.core.tests.test_expr.test_equals()
sympy.core.tests.test_expr.test_eval_interval()
sympy.core.tests.test_expr.test_eval_interval_zoo()
sympy.core.tests.test_expr.test_expr()
sympy.core.tests.test_expr.test_expr_sorting()
sympy.core.tests.test_expr.test_extract_branch_factor()
sympy.core.tests.test_expr.test_extractions()
sympy.core.tests.test_expr.test_find()
sympy.core.tests.test_expr.test_float_0()
sympy.core.tests.test_expr.test_float_0_fail()
sympy.core.tests.test_expr.test_floordiv()
sympy.core.tests.test_expr.test_format()
sympy.core.tests.test_expr.test_free_symbols()
sympy.core.tests.test_expr.test_has_basics()
sympy.core.tests.test_expr.test_has_free()
sympy.core.tests.test_expr.test_has_integrals()
sympy.core.tests.test_expr.test_has_iterative()
sympy.core.tests.test_expr.test_has_multiple()
sympy.core.tests.test_expr.test_has_physics()
sympy.core.tests.test_expr.test_has_piecewise()
sympy.core.tests.test_expr.test_has_polys()
sympy.core.tests.test_expr.test_has_tuple()
sympy.core.tests.test_expr.test_has_units()
sympy.core.tests.test_expr.test_has_xfree()
sympy.core.tests.test_expr.test_held_expression_UnevaluatedExpr()
sympy.core.tests.test_expr.test_ibasic()
sympy.core.tests.test_expr.test_identity_removal()
sympy.core.tests.test_expr.test_integrate()
sympy.core.tests.test_expr.test_is_algebraic_expr()
sympy.core.tests.test_expr.test_is_constant()
sympy.core.tests.test_expr.test_is_meromorphic()
sympy.core.tests.test_expr.test_is_number()
sympy.core.tests.test_expr.test_is_polynomial()
sympy.core.tests.test_expr.test_is_rational_function()
sympy.core.tests.test_expr.test_issue_10161()
sympy.core.tests.test_expr.test_issue_10651()
sympy.core.tests.test_expr.test_issue_10755()
sympy.core.tests.test_expr.test_issue_11122()
sympy.core.tests.test_expr.test_issue_11877()
sympy.core.tests.test_expr.test_issue_22020()
sympy.core.tests.test_expr.test_issue_4963()
sympy.core.tests.test_expr.test_issue_5226()
sympy.core.tests.test_expr.test_issue_5300()
sympy.core.tests.test_expr.test_issue_5843()
sympy.core.tests.test_expr.test_issue_6325()
sympy.core.tests.test_expr.test_issue_7426()
sympy.core.tests.test_expr.test_leadterm()
sympy.core.tests.test_expr.test_leadterm2()
sympy.core.tests.test_expr.test_leadterm3()
sympy.core.tests.test_expr.test_len()
sympy.core.tests.test_expr.test_nan_extractions()
sympy.core.tests.test_expr.test_new_rawargs()
sympy.core.tests.test_expr.test_non_string_equality()
sympy.core.tests.test_expr.test_noncommutative_expand_issue_3757()
sympy.core.tests.test_expr.test_nonzero()
sympy.core.tests.test_expr.test_normal()
sympy.core.tests.test_expr.test_primitive()
sympy.core.tests.test_expr.test_random()
sympy.core.tests.test_expr.test_relational()
sympy.core.tests.test_expr.test_relational_assumptions()
sympy.core.tests.test_expr.test_replace()
sympy.core.tests.test_expr.test_round()
sympy.core.tests.test_expr.test_round_exception_nostr()
sympy.core.tests.test_expr.test_series_expansion_for_uniform_order()
sympy.core.tests.test_expr.test_sort_key_atomic_expr()
sympy.core.tests.test_expr.test_trunc()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_kind.py----------------------------------------
A:sympy.core.tests.test_kind.comm_x->Symbol('x')
A:sympy.core.tests.test_kind.noncomm_x->Symbol('x', commutative=False)
A:sympy.core.tests.test_kind.A->MatrixSymbol('A', 2, 2)
A:sympy.core.tests.test_kind.m->cls.zeros(3, 2)
A:sympy.core.tests.test_kind.M->Matrix([[1, 2], [3, 4]])
sympy.core.tests.test_kind.test_Add_kind()
sympy.core.tests.test_kind.test_Derivative_kind()
sympy.core.tests.test_kind.test_Integral_kind()
sympy.core.tests.test_kind.test_MatMul_kind()
sympy.core.tests.test_kind.test_Matrix_kind()
sympy.core.tests.test_kind.test_NumberKind()
sympy.core.tests.test_kind.test_Symbol_kind()
sympy.core.tests.test_kind.test_mul_kind()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_priority.py----------------------------------------
A:sympy.core.tests.test_priority.obj->sympy.core.expr.Expr.__new__(cls)
A:sympy.core.tests.test_priority.x->Symbol('x')
A:sympy.core.tests.test_priority.h->Higher()
A:sympy.core.tests.test_priority.l->Lower()
sympy.core.tests.test_priority.Higher(cls)
sympy.core.tests.test_priority.Higher.__add__(self,other)
sympy.core.tests.test_priority.Higher.__floordiv__(self,other)
sympy.core.tests.test_priority.Higher.__mod__(self,other)
sympy.core.tests.test_priority.Higher.__mul__(self,other)
sympy.core.tests.test_priority.Higher.__pow__(self,other)
sympy.core.tests.test_priority.Higher.__radd__(self,other)
sympy.core.tests.test_priority.Higher.__rfloordiv__(self,other)
sympy.core.tests.test_priority.Higher.__rmod__(self,other)
sympy.core.tests.test_priority.Higher.__rmul__(self,other)
sympy.core.tests.test_priority.Higher.__rpow__(self,other)
sympy.core.tests.test_priority.Higher.__rsub__(self,other)
sympy.core.tests.test_priority.Higher.__rtruediv__(self,other)
sympy.core.tests.test_priority.Higher.__sub__(self,other)
sympy.core.tests.test_priority.Higher.__truediv__(self,other)
sympy.core.tests.test_priority.Lower(cls)
sympy.core.tests.test_priority.test_add()
sympy.core.tests.test_priority.test_div()
sympy.core.tests.test_priority.test_floordiv()
sympy.core.tests.test_priority.test_mod()
sympy.core.tests.test_priority.test_mul()
sympy.core.tests.test_priority.test_pow()
sympy.core.tests.test_priority.test_sub()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_operations.py----------------------------------------
A:sympy.core.tests.test_operations.zero->Integer(0)
A:sympy.core.tests.test_operations.identity->Integer(1)
A:sympy.core.tests.test_operations.(a, b, c, d)->symbols('a,b,c,d')
A:sympy.core.tests.test_operations.u->MyAssoc(b, c)
A:sympy.core.tests.test_operations.v->MyAssoc(u, d, evaluate=False)
sympy.core.tests.test_operations.join(LatticeOp)
sympy.core.tests.test_operations.test_AssocOp_flatten()
sympy.core.tests.test_operations.test_add_dispatcher()
sympy.core.tests.test_operations.test_issue_14025()
sympy.core.tests.test_operations.test_lattice_make_args()
sympy.core.tests.test_operations.test_lattice_print()
sympy.core.tests.test_operations.test_lattice_shortcircuit()
sympy.core.tests.test_operations.test_lattice_simple()
sympy.core.tests.test_operations.test_mul_dispatcher()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_function.py----------------------------------------
A:sympy.core.tests.test_function.(f, g, h)->symbols('f g h', cls=Function)
A:sympy.core.tests.test_function.x->Symbol('x')
A:sympy.core.tests.test_function.e->Derivative(f(g(x), h(x)), x)
A:sympy.core.tests.test_function.nu->Function('nu')
A:sympy.core.tests.test_function.edx->Derivative(f(g(x), h(x)), x).diff(x)
A:sympy.core.tests.test_function.edy->Derivative(f(g(x), h(x)), x).diff(y)
A:sympy.core.tests.test_function.edxdx->Derivative(f(g(x), h(x)), x).diff(x).diff(x)
A:sympy.core.tests.test_function.edxdy->Derivative(f(g(x), h(x)), x).diff(x).diff(y)
A:sympy.core.tests.test_function.d->f(g(x), h(x)).diff(g(x), h(x)).diff(x)
A:sympy.core.tests.test_function.f->Function('f')
A:sympy.core.tests.test_function.flam->Lambda(((x,),), (x, x))
A:sympy.core.tests.test_function.e1->Subs(Derivative(f(x), x), x, x)
A:sympy.core.tests.test_function.e2->Subs(Derivative(f(x), x), x, x ** 2 + 1)
A:sympy.core.tests.test_function.done->Derivative(f(x, g(x)), x, g(x)).doit()
A:sympy.core.tests.test_function.a->Derivative(f(g(x), h(x)), g(x), h(x), x)
A:sympy.core.tests.test_function.xzf->Symbol('x', complex=True, zero=False)
A:sympy.core.tests.test_function.n->Symbol('n', integer=True, positive=True)
A:sympy.core.tests.test_function.s1->f(x, y).series(y, n=2)
A:sympy.core.tests.test_function.xi->Symbol('xi')
A:sympy.core.tests.test_function.s2->f(xi, y).series(y, n=2)
A:sympy.core.tests.test_function.z0->Symbol('x')._random()
A:sympy.core.tests.test_function.mf->myfunc(x)
A:sympy.core.tests.test_function.xd->diff(x, t)
A:sympy.core.tests.test_function.xdd->diff(xd, t)
A:sympy.core.tests.test_function.y->Derivative(8, x).subs(x, 0)
A:sympy.core.tests.test_function.yd->diff(y, t)
A:sympy.core.tests.test_function.fx->Function('Fx', commutative=False)(x)
A:sympy.core.tests.test_function.dfx->f(x).diff(x)
A:sympy.core.tests.test_function.ddfx->diff(f(x), x, x)
A:sympy.core.tests.test_function.expr->solveset(2 * cos(x) * cos(2 * x) - 1, x, S.Reals)
A:sympy.core.tests.test_function.u->Function('u')
A:sympy.core.tests.test_function.v->Function('v')
A:sympy.core.tests.test_function.F->f(x)
A:sympy.core.tests.test_function.abstract->f(x, f(x, x)).diff(x, 2)
A:sympy.core.tests.test_function.concrete->F(x, F(x, x)).diff(x, 2)
A:sympy.core.tests.test_function.df->f(x).diff(x)
A:sympy.core.tests.test_function.dxy->Derivative(f(x, y), x, y)
A:sympy.core.tests.test_function.dyx->Derivative(f(x, y), y, x)
A:sympy.core.tests.test_function.m->symbols('m', integer=True, positive=True)
A:sympy.core.tests.test_function.phi->f(x, t)
A:sympy.core.tests.test_function.eqna->Eq(diff(L, x), diff(L, diff(x, t), t))
A:sympy.core.tests.test_function.eqnb->Eq(-k * x, m * diff(x, t, t))
A:sympy.core.tests.test_function.k->Symbol('k')
A:sympy.core.tests.test_function.Fd->f(x).diff(x)
A:sympy.core.tests.test_function.L->sqrt(1 + Fd ** 2)
A:sympy.core.tests.test_function.fy->f(y).diff(y)
A:sympy.core.tests.test_function.fxx->Function('Fx', commutative=False)(x).diff(x)
A:sympy.core.tests.test_function.dfy->f(y).diff(y)
A:sympy.core.tests.test_function.d2fx->f(x).diff(x).diff(x)
A:sympy.core.tests.test_function.eq->f(x, g(x))
A:sympy.core.tests.test_function.Float_big->Float(big, 15)
A:sympy.core.tests.test_function.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_function.B->ImmutableMatrix([[Float('1.0', precision=53), Float('2.0', precision=53)], [Float('3.0', precision=53), Float('4.0', precision=53)]])
A:sympy.core.tests.test_function.y1->Dummy('y')
A:sympy.core.tests.test_function.y2->Dummy('y')
A:sympy.core.tests.test_function.func1->f(a + y1 * b)
A:sympy.core.tests.test_function.func2->f(a + y2 * b)
A:sympy.core.tests.test_function.func1_y->f(a + y1 * b).diff(y1)
A:sympy.core.tests.test_function.func2_y->f(a + y2 * b).diff(y2)
A:sympy.core.tests.test_function.z1->Subs(f(a), a, y1)
A:sympy.core.tests.test_function.z2->Subs(f(a), a, y2)
A:sympy.core.tests.test_function.ans1->f(x).series(x, a)
A:sympy.core.tests.test_function.ans2->f(x).series(x, a)
A:sympy.core.tests.test_function.ff->Function('f')(x)
A:sympy.core.tests.test_function.match_with_cache->Function('f')(x).matches(f)
A:sympy.core.tests.test_function.ws->symbols(['w%i' % i for i in range(N)])
A:sympy.core.tests.test_function.(x, h)->symbols('x h', real=True)
A:sympy.core.tests.test_function.dfdx->f(x).diff(x)
A:sympy.core.tests.test_function.d2fdx2->f(x).diff(x, 2)
A:sympy.core.tests.test_function.d3fdx3->f(x).diff(x, 3)
A:sympy.core.tests.test_function.d2fdxdy->f(x, y).diff(x, y)
A:sympy.core.tests.test_function.expr1->expr0.subs(expr1, expr0)
A:sympy.core.tests.test_function.expr2->expr0.subs(expr1, expr0)
A:sympy.core.tests.test_function.e3->Subs(Derivative(f(x) + y ** 2 - y, y), y, y ** 2)
A:sympy.core.tests.test_function.e4->Subs(Derivative(f(x + y), y), y, x ** 2)
A:sympy.core.tests.test_function.e5->Subs(Derivative(f(x), x), (y, z), (y, z))
A:sympy.core.tests.test_function.(m, n)->symbols('m n', integer=True)
A:sympy.core.tests.test_function.(x, y)->symbols('x, y')
A:sympy.core.tests.test_function.f2->Function('f')
A:sympy.core.tests.test_function.g->Function('g')
A:sympy.core.tests.test_function.f_real->Function('f', real=True)
A:sympy.core.tests.test_function.f_real1->Function('f', real=1)
A:sympy.core.tests.test_function.f_real_inherit->Function(Symbol('f', real=True))
A:sympy.core.tests.test_function.f_real2->Function('f', is_real=True)
A:sympy.core.tests.test_function.eval->classmethod(lambda cls, t: None)
A:sympy.core.tests.test_function._imp_->classmethod(lambda cls, t: sin(t))
A:sympy.core.tests.test_function.temp->Function('temp', fdiff=fdiff, eval=eval, _imp_=_imp_)
A:sympy.core.tests.test_function.Fx->f(x).diff(x)
A:sympy.core.tests.test_function.G->f(y)
A:sympy.core.tests.test_function.Gy->f(y).diff(y)
A:sympy.core.tests.test_function.dg->g(x).diff(x)
A:sympy.core.tests.test_function.t->Symbol('t', commutative=False)
A:sympy.core.tests.test_function.ft->Function('Ft', commutative=False)(t)
A:sympy.core.tests.test_function.eqdt->f(x, g(x)).diff(t)
A:sympy.core.tests.test_function.b->Derivative(Derivative(f(g(x), h(x)), g(x), h(x)), x)
A:sympy.core.tests.test_function.c->f(g(x), h(x)).diff(g(x), h(x), x)
A:sympy.core.tests.test_function.z->Symbol('z')
sympy.core.tests.test_function.test_Derivative__new__()
sympy.core.tests.test_function.test_Derivative_as_finite_difference()
sympy.core.tests.test_function.test_Derivative_free_symbols()
sympy.core.tests.test_function.test_Function()
sympy.core.tests.test_function.test_IdentityFunction()
sympy.core.tests.test_function.test_Lambda()
sympy.core.tests.test_function.test_Lambda_arguments()
sympy.core.tests.test_function.test_Lambda_equality()
sympy.core.tests.test_function.test_Lambda_symbols()
sympy.core.tests.test_function.test_Subs()
sympy.core.tests.test_function.test_Subs2()
sympy.core.tests.test_function.test_Subs_Derivative()
sympy.core.tests.test_function.test_arity()
sympy.core.tests.test_function.test_bug1()
sympy.core.tests.test_function.test_deriv1()
sympy.core.tests.test_function.test_deriv2()
sympy.core.tests.test_function.test_deriv_wrt_function()
sympy.core.tests.test_function.test_derivative_evaluate()
sympy.core.tests.test_function.test_derivative_linearity()
sympy.core.tests.test_function.test_derivative_numerically()
sympy.core.tests.test_function.test_derivative_quick_exit()
sympy.core.tests.test_function.test_derivative_subs_bug()
sympy.core.tests.test_function.test_derivative_subs_self_bug()
sympy.core.tests.test_function.test_diff_symbols()
sympy.core.tests.test_function.test_diff_wrt()
sympy.core.tests.test_function.test_diff_wrt_func_subs()
sympy.core.tests.test_function.test_diff_wrt_intlike()
sympy.core.tests.test_function.test_diff_wrt_not_allowed()
sympy.core.tests.test_function.test_diff_wrt_value()
sympy.core.tests.test_function.test_doit()
sympy.core.tests.test_function.test_doitdoit()
sympy.core.tests.test_function.test_eval_classmethod_check()
sympy.core.tests.test_function.test_eval_sympified()
sympy.core.tests.test_function.test_evalf_default()
sympy.core.tests.test_function.test_expand_function()
sympy.core.tests.test_function.test_extensibility_eval()
sympy.core.tests.test_function.test_f_expand_complex()
sympy.core.tests.test_function.test_fdiff_argument_index_error()
sympy.core.tests.test_function.test_func_deriv()
sympy.core.tests.test_function.test_function__eval_nseries()
sympy.core.tests.test_function.test_function_assumptions()
sympy.core.tests.test_function.test_function_comparable()
sympy.core.tests.test_function.test_function_comparable_infinities()
sympy.core.tests.test_function.test_function_complex()
sympy.core.tests.test_function.test_function_evalf()
sympy.core.tests.test_function.test_function_non_commutative()
sympy.core.tests.test_function.test_functionclas_symbols()
sympy.core.tests.test_function.test_general_function()
sympy.core.tests.test_function.test_general_function_nullary()
sympy.core.tests.test_function.test_issue_10503()
sympy.core.tests.test_function.test_issue_11159()
sympy.core.tests.test_function.test_issue_12005()
sympy.core.tests.test_function.test_issue_12996()
sympy.core.tests.test_function.test_issue_13843()
sympy.core.tests.test_function.test_issue_14719_10150()
sympy.core.tests.test_function.test_issue_15084_13166()
sympy.core.tests.test_function.test_issue_15226()
sympy.core.tests.test_function.test_issue_15241()
sympy.core.tests.test_function.test_issue_15360()
sympy.core.tests.test_function.test_issue_15947()
sympy.core.tests.test_function.test_issue_17382()
sympy.core.tests.test_function.test_issue_20683()
sympy.core.tests.test_function.test_issue_5399()
sympy.core.tests.test_function.test_issue_7027()
sympy.core.tests.test_function.test_issue_7068()
sympy.core.tests.test_function.test_issue_7231()
sympy.core.tests.test_function.test_issue_7687()
sympy.core.tests.test_function.test_issue_7688()
sympy.core.tests.test_function.test_issue_8469()
sympy.core.tests.test_function.test_klein_gordon_lagrangian()
sympy.core.tests.test_function.test_mexpand()
sympy.core.tests.test_function.test_multiple_derivative()
sympy.core.tests.test_function.test_nargs()
sympy.core.tests.test_function.test_nargs_inheritance()
sympy.core.tests.test_function.test_negative_counts()
sympy.core.tests.test_function.test_nfloat()
sympy.core.tests.test_function.test_noncommutative_issue_15131()
sympy.core.tests.test_function.test_order_could_be_zero()
sympy.core.tests.test_function.test_sho_lagrangian()
sympy.core.tests.test_function.test_should_evalf()
sympy.core.tests.test_function.test_sort_variable()
sympy.core.tests.test_function.test_straight_line()
sympy.core.tests.test_function.test_subs_in_derivative()
sympy.core.tests.test_function.test_suppressed_evaluation()
sympy.core.tests.test_function.test_undef_fcn_float_issue_6938()
sympy.core.tests.test_function.test_undefined_function_eq()
sympy.core.tests.test_function.test_undefined_function_eval()
sympy.core.tests.test_function.test_unhandled()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_multidimensional.py----------------------------------------
A:sympy.core.tests.test_multidimensional.(x, y, z)->symbols('x y z')
A:sympy.core.tests.test_multidimensional.(f, g, h)->list(map(Function, 'fgh'))
sympy.core.tests.test_multidimensional.test_vectorize()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_expand.py----------------------------------------
A:sympy.core.tests.test_expand.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_expand.B->Symbol('B', commutative=False)
A:sympy.core.tests.test_expand.C->Symbol('C', commutative=False)
A:sympy.core.tests.test_expand.a->Symbol('a')
A:sympy.core.tests.test_expand.b->Symbol('b')
A:sympy.core.tests.test_expand.i->Symbol('i', integer=True)
A:sympy.core.tests.test_expand.n->Symbol('n', negative=True)
A:sympy.core.tests.test_expand.m->Symbol('m', negative=True)
A:sympy.core.tests.test_expand.p->Symbol('p', positive=True)
A:sympy.core.tests.test_expand.np->Symbol('p', polar=False)
A:sympy.core.tests.test_expand.e->Mul(2, R(1, 3), evaluate=False)
A:sympy.core.tests.test_expand.c->Symbol('c')
A:sympy.core.tests.test_expand.x->Symbol('x')
A:sympy.core.tests.test_expand.W->W.expand().expand()
A:sympy.core.tests.test_expand.eq->Pow((A + 1) ** 2, 2, evaluate=False)
A:sympy.core.tests.test_expand.t->Symbol('t', positive=True)
A:sympy.core.tests.test_expand.one->Symbol('1', integer=True, prime=True, odd=True, positive=True)
A:sympy.core.tests.test_expand.two->Symbol('2', integer=True, prime=True, even=True)
A:sympy.core.tests.test_expand.nn1->Symbol('nn1', nonnegative=True)
A:sympy.core.tests.test_expand.nn2->Symbol('nn2', nonnegative=True)
A:sympy.core.tests.test_expand.nn3->Symbol('nn3', nonnegative=True)
sympy.core.tests.test_expand.test_expand_arit()
sympy.core.tests.test_expand.test_expand_frac()
sympy.core.tests.test_expand.test_expand_log()
sympy.core.tests.test_expand.test_expand_modulus()
sympy.core.tests.test_expand.test_expand_mul()
sympy.core.tests.test_expand.test_expand_negative_integer_powers()
sympy.core.tests.test_expand.test_expand_no_log()
sympy.core.tests.test_expand.test_expand_no_multinomial()
sympy.core.tests.test_expand.test_expand_non_commutative()
sympy.core.tests.test_expand.test_expand_power_base()
sympy.core.tests.test_expand.test_expand_radicals()
sympy.core.tests.test_expand.test_issue_23952()
sympy.core.tests.test_expand.test_issue_5743()
sympy.core.tests.test_expand.test_issue_6121()
sympy.core.tests.test_expand.test_issues_5919_6830()
sympy.core.tests.test_expand.test_power_expand()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_logic.py----------------------------------------
A:sympy.core.tests.test_logic.l1->And('a', Not('b'))
A:sympy.core.tests.test_logic.l2->And('a', Not('b'))
A:sympy.core.tests.test_logic.t->And(Or('a', 'b'), Or('c', 'd'))
sympy.core.tests.test_logic.test_formatting()
sympy.core.tests.test_logic.test_fuzzy_and()
sympy.core.tests.test_logic.test_fuzzy_group()
sympy.core.tests.test_logic.test_fuzzy_nand()
sympy.core.tests.test_logic.test_fuzzy_not()
sympy.core.tests.test_logic.test_fuzzy_or()
sympy.core.tests.test_logic.test_fuzzy_xor()
sympy.core.tests.test_logic.test_logic_cmp()
sympy.core.tests.test_logic.test_logic_combine_args()
sympy.core.tests.test_logic.test_logic_eval_TF()
sympy.core.tests.test_logic.test_logic_expand()
sympy.core.tests.test_logic.test_logic_fromstring()
sympy.core.tests.test_logic.test_logic_not()
sympy.core.tests.test_logic.test_logic_onearg()
sympy.core.tests.test_logic.test_logic_xnotx()
sympy.core.tests.test_logic.test_torf()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_rules.py----------------------------------------
A:sympy.core.tests.test_rules.add1->Transform(lambda x: x + 1, lambda x: x % 2 == 1)
sympy.core.tests.test_rules.test_Transform()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_exprtools.py----------------------------------------
A:sympy.core.tests.test_exprtools.a->Symbol('a')
A:sympy.core.tests.test_exprtools.b->Term(2 * x ** 3 * y ** 5 * t ** 7)
A:sympy.core.tests.test_exprtools.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_exprtools.f->factor_nc(ex)
A:sympy.core.tests.test_exprtools.args->sympy.core.add.Add.make_args(f)
A:sympy.core.tests.test_exprtools.(alpha, alpha1, alpha2, alpha3)->symbols('alpha:4')
A:sympy.core.tests.test_exprtools.s->Sum(x, (x, 1, 2))
A:sympy.core.tests.test_exprtools.i->Integral(x, (x, 0, oo))
A:sympy.core.tests.test_exprtools.e->Mul(2, 1 + x, evaluate=False)
A:sympy.core.tests.test_exprtools.(x, y)->symbols('x, y')
A:sympy.core.tests.test_exprtools.k->symbols('k', integer=True)
A:sympy.core.tests.test_exprtools.(n, m, o)->symbols('n,m,o', commutative=False)
A:sympy.core.tests.test_exprtools.ex->_mexpand(e)
A:sympy.core.tests.test_exprtools._n->symbols('nz', zero=False, commutative=False)
A:sympy.core.tests.test_exprtools.(a, b)->symbols('a b')
A:sympy.core.tests.test_exprtools.(F, G)->symbols('F, G', commutative=False, cls=Function)
A:sympy.core.tests.test_exprtools.(expr, dummies, _)->_mask_nc(F(x) * G(y) - G(y) * F(x))
A:sympy.core.tests.test_exprtools.x->Symbol('x')
A:sympy.core.tests.test_exprtools.p->Dummy(positive=True, integer=True)
A:sympy.core.tests.test_exprtools.q->Dummy(positive=True, integer=True)
A:sympy.core.tests.test_exprtools.s1->Sum(x + 1, (x, 0, 9))
A:sympy.core.tests.test_exprtools.s2->Sum(x + 1, (x, Range(10)))
A:sympy.core.tests.test_exprtools.r1->Sum(x + 1, (x, 0, 9)).xreplace({x: a})
A:sympy.core.tests.test_exprtools.r2->Sum(x + 1, (x, Range(10))).xreplace({x: a})
A:sympy.core.tests.test_exprtools.M->MatrixSymbol('X', 2, 2)
sympy.core.tests.test_exprtools.test_Factors()
sympy.core.tests.test_exprtools.test_Term()
sympy.core.tests.test_exprtools.test_decompose_power()
sympy.core.tests.test_exprtools.test_factor_nc()
sympy.core.tests.test_exprtools.test_factor_terms()
sympy.core.tests.test_exprtools.test_gcd_terms()
sympy.core.tests.test_exprtools.test_issue_17256()
sympy.core.tests.test_exprtools.test_issue_21623()
sympy.core.tests.test_exprtools.test_issue_6360()
sympy.core.tests.test_exprtools.test_issue_7903()
sympy.core.tests.test_exprtools.test_issue_8263()
sympy.core.tests.test_exprtools.test_monotonic_sign()
sympy.core.tests.test_exprtools.test_xreplace()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_noncommutative.py----------------------------------------
A:sympy.core.tests.test_noncommutative.(A, B, C)->symbols('A B C', commutative=False)
A:sympy.core.tests.test_noncommutative.X->symbols('X', commutative=False, hermitian=True)
A:sympy.core.tests.test_noncommutative.Y->symbols('Y', commutative=False, antihermitian=True)
A:sympy.core.tests.test_noncommutative.p->posify(q)
sympy.core.tests.test_noncommutative.test_adjoint()
sympy.core.tests.test_noncommutative.test_cancel()
sympy.core.tests.test_noncommutative.test_collect()
sympy.core.tests.test_noncommutative.test_combsimp()
sympy.core.tests.test_noncommutative.test_conjugate()
sympy.core.tests.test_noncommutative.test_expand()
sympy.core.tests.test_noncommutative.test_factor()
sympy.core.tests.test_noncommutative.test_gammasimp()
sympy.core.tests.test_noncommutative.test_posify()
sympy.core.tests.test_noncommutative.test_radsimp()
sympy.core.tests.test_noncommutative.test_ratsimp()
sympy.core.tests.test_noncommutative.test_rcollect()
sympy.core.tests.test_noncommutative.test_simplify()
sympy.core.tests.test_noncommutative.test_subs()
sympy.core.tests.test_noncommutative.test_transpose()
sympy.core.tests.test_noncommutative.test_trigsimp()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_cache.py----------------------------------------
A:sympy.core.tests.test_cache.a->A(2)
A:sympy.core.tests.test_cache.b->A(None)
A:sympy.core.tests.test_cache.lazy->lazy_function('sympy.core.cache', 'cheap')
A:sympy.core.tests.test_cache.repr_lazy->repr(lazy)
sympy.core.tests.test_cache.test_cached_property()
sympy.core.tests.test_cache.test_cacheit_doc()
sympy.core.tests.test_cache.test_cacheit_unhashable()
sympy.core.tests.test_cache.test_cachit_exception()
sympy.core.tests.test_cache.test_lazy_function()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_match.py----------------------------------------
A:sympy.core.tests.test_match.x->Symbol('x')
A:sympy.core.tests.test_match.(a, b, c, p, q)->map(Wild, 'abcpq')
A:sympy.core.tests.test_match.e->S(3)
A:sympy.core.tests.test_match.(x, y, a, b, c)->map(Symbol, 'xyabc')
A:sympy.core.tests.test_match.(p, q, r)->map(Wild, 'pqr')
A:sympy.core.tests.test_match.y->Wild('y')
A:sympy.core.tests.test_match.p->symbols('p', positive=True)
A:sympy.core.tests.test_match.q->Wild('q', exclude=[p])
A:sympy.core.tests.test_match.r->collect(eq, [f(x).diff(x, 2), f(x).diff(x), f(x)]).match(deq)
A:sympy.core.tests.test_match.a->Wild('a')
A:sympy.core.tests.test_match.(p, q)->map(Wild, 'pq')
A:sympy.core.tests.test_match.(x, y)->symbols('x y')
A:sympy.core.tests.test_match.(A, B, C)->symbols('A B C', commutative=False)
A:sympy.core.tests.test_match.(u, v)->symbols('u v', cls=Wild)
A:sympy.core.tests.test_match.(w, z)->symbols('w z', cls=Wild, commutative=False)
A:sympy.core.tests.test_match.w->Wild('w', exclude=[x])
A:sympy.core.tests.test_match.(a, b, c)->symbols('a b c', cls=Wild)
A:sympy.core.tests.test_match.g->WildFunction('g')
A:sympy.core.tests.test_match.f->Function('f')
A:sympy.core.tests.test_match.fd->Derivative(f(x), x)
A:sympy.core.tests.test_match.b->Wild('b')
A:sympy.core.tests.test_match.d2->pattern.xreplace(d1).matches(expr, d1)
A:sympy.core.tests.test_match.n->Function('n')
A:sympy.core.tests.test_match.l->Wild('l', exclude=(0,))
A:sympy.core.tests.test_match.res->(x + y).match(p + q + r)
A:sympy.core.tests.test_match.(x, a, b)->map(Symbol, 'xab')
A:sympy.core.tests.test_match.c->Wild('c', exclude=[x])
A:sympy.core.tests.test_match.d->Wild('d', exclude=[x])
A:sympy.core.tests.test_match.(x, y, a)->map(Symbol, 'xya')
A:sympy.core.tests.test_match.(a, b)->symbols('a b', cls=Wild)
A:sympy.core.tests.test_match.eq->diff(g(x) * f(x).diff(x), x)
A:sympy.core.tests.test_match.(z, phi, r)->symbols('z phi r')
A:sympy.core.tests.test_match.(c, A, B, N)->symbols('c A B N', cls=Wild)
A:sympy.core.tests.test_match.g1->Wild('g1', exclude=[gamma])
A:sympy.core.tests.test_match.g2->Wild('g2', exclude=[gamma])
A:sympy.core.tests.test_match.g3->Wild('g3', exclude=[gamma])
A:sympy.core.tests.test_match.(f, g)->symbols('f g', cls=Function)
A:sympy.core.tests.test_match.eq1->sin(x)
A:sympy.core.tests.test_match.(p, c, q)->symbols('p c q', cls=Wild)
A:sympy.core.tests.test_match.a3->Wild('a3', exclude=[f(x), f(x).diff(x), f(x).diff(x, 2)])
A:sympy.core.tests.test_match.b3->Wild('b3', exclude=[f(x), f(x).diff(x), f(x).diff(x, 2)])
A:sympy.core.tests.test_match.c3->Wild('c3', exclude=[f(x), f(x).diff(x), f(x).diff(x, 2)])
A:sympy.core.tests.test_match.(a, r, w)->symbols('a, r, w', nonnegative=True)
A:sympy.core.tests.test_match.g_->Wild('g')
A:sympy.core.tests.test_match.(X, Y)->map(Wild, 'XY')
A:sympy.core.tests.test_match.(x, y, z)->symbols('x y z')
A:sympy.core.tests.test_match.(V, W)->map(Wild, 'VW')
A:sympy.core.tests.test_match.(n, Q)->symbols('n Q', cls=Wild)
sympy.core.tests.test_match.test_Derivative_bug1()
sympy.core.tests.test_match.test__combine_inverse()
sympy.core.tests.test_match.test_add()
sympy.core.tests.test_match.test_complex()
sympy.core.tests.test_match.test_derivative1()
sympy.core.tests.test_match.test_derivative2()
sympy.core.tests.test_match.test_derivative_bug1()
sympy.core.tests.test_match.test_exclude()
sympy.core.tests.test_match.test_floats()
sympy.core.tests.test_match.test_functions()
sympy.core.tests.test_match.test_functions_X1()
sympy.core.tests.test_match.test_gh_issue_2711()
sympy.core.tests.test_match.test_interface()
sympy.core.tests.test_match.test_issue_17354()
sympy.core.tests.test_match.test_issue_22462()
sympy.core.tests.test_match.test_issue_3539()
sympy.core.tests.test_match.test_issue_3773()
sympy.core.tests.test_match.test_issue_3778()
sympy.core.tests.test_match.test_issue_3883()
sympy.core.tests.test_match.test_issue_4319()
sympy.core.tests.test_match.test_issue_4418()
sympy.core.tests.test_match.test_issue_4559()
sympy.core.tests.test_match.test_issue_4700()
sympy.core.tests.test_match.test_issue_4883()
sympy.core.tests.test_match.test_issue_5168()
sympy.core.tests.test_match.test_issue_6103()
sympy.core.tests.test_match.test_match_bound()
sympy.core.tests.test_match.test_match_bug2()
sympy.core.tests.test_match.test_match_bug3()
sympy.core.tests.test_match.test_match_bug4()
sympy.core.tests.test_match.test_match_bug5()
sympy.core.tests.test_match.test_match_bug6()
sympy.core.tests.test_match.test_match_deriv_bug1()
sympy.core.tests.test_match.test_match_exclude()
sympy.core.tests.test_match.test_match_issue_17397()
sympy.core.tests.test_match.test_match_issue_21942()
sympy.core.tests.test_match.test_match_polynomial()
sympy.core.tests.test_match.test_match_terms()
sympy.core.tests.test_match.test_match_wild_wild()
sympy.core.tests.test_match.test_mul()
sympy.core.tests.test_match.test_mul_noncommutative()
sympy.core.tests.test_match.test_mul_noncommutative_mismatch()
sympy.core.tests.test_match.test_mul_noncommutative_pow()
sympy.core.tests.test_match.test_power()
sympy.core.tests.test_match.test_symbol()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_relational.py----------------------------------------
A:sympy.core.tests.test_relational.(x, y, z, t)->symbols('x,y,z,t')
A:sympy.core.tests.test_relational.i->Symbol('i', imaginary=True)
A:sympy.core.tests.test_relational.p->symbols('p', positive=True)
A:sympy.core.tests.test_relational.e->Ge(x, p).doit()
A:sympy.core.tests.test_relational.res->Relational(y, e, '!=')
A:sympy.core.tests.test_relational.x->symbols('x')
A:sympy.core.tests.test_relational.y->Symbol('y', imaginary=True)
A:sympy.core.tests.test_relational.z->Symbol('z', complex=True)
A:sympy.core.tests.test_relational.w->Symbol('w', extended_negative=True, infinite=True)
A:sympy.core.tests.test_relational.a->Ne(x * (x + y), x ** 2 + x * y)
A:sympy.core.tests.test_relational.b->Float('.0000000000000000000001', '')
A:sympy.core.tests.test_relational.n->Symbol('n', negative=True)
A:sympy.core.tests.test_relational.np->Symbol('np', nonpositive=True)
A:sympy.core.tests.test_relational.nn->Symbol('nn', nonnegative=True)
A:sympy.core.tests.test_relational.relation_type->strtype(randint(0, length))
A:sympy.core.tests.test_relational.rel->cls(x, y)
A:sympy.core.tests.test_relational.t->Symbol('t', imaginary=True)
A:sympy.core.tests.test_relational.ineq->Lt(x, y, evaluate=False)
A:sympy.core.tests.test_relational.r->Rational('905502432259640373/288230376151711744')
A:sympy.core.tests.test_relational.f->Function('f')
A:sympy.core.tests.test_relational.(q, r)->symbols('q r')
A:sympy.core.tests.test_relational.root2->sqrt(2)
A:sympy.core.tests.test_relational.equation->(root2 * (-q + r) - root2 * (q - r) <= 0).simplify()
A:sympy.core.tests.test_relational.(w, x, y, z)->symbols('w:z')
A:sympy.core.tests.test_relational.fin->symbols('inf', finite=True)
A:sympy.core.tests.test_relational.inf->symbols('inf', infinite=True)
A:sympy.core.tests.test_relational.inf2->symbols('inf2', infinite=True)
A:sympy.core.tests.test_relational.infx->symbols('infx', infinite=True, extended_real=True)
A:sympy.core.tests.test_relational.infnx->symbols('inf~x', infinite=True, extended_real=False)
A:sympy.core.tests.test_relational.infnx2->symbols('inf~x2', infinite=True, extended_real=False)
A:sympy.core.tests.test_relational.infp->symbols('infp', infinite=True, extended_positive=True)
A:sympy.core.tests.test_relational.infp1->symbols('infp1', infinite=True, extended_positive=True)
A:sympy.core.tests.test_relational.infn->symbols('infn', infinite=True, extended_negative=True)
A:sympy.core.tests.test_relational.zero->symbols('z', zero=True)
A:sympy.core.tests.test_relational.nonzero->symbols('nz', zero=False, finite=True)
A:sympy.core.tests.test_relational.o->symbols('o', odd=True)
A:sympy.core.tests.test_relational.v->sympy.core.numbers.pi.n(i)
A:sympy.core.tests.test_relational.result1->Eq(x * cos(x) - 3 * sin(x), 0)
A:sympy.core.tests.test_relational.result2->Eq(x ** 2 + sqrt(x * 2) + sin(x), 0)
A:sympy.core.tests.test_relational.eq->Le(x, 1)
A:sympy.core.tests.test_relational.(a, b, c)->symbols('a b c')
A:sympy.core.tests.test_relational.A->Eq(FiniteSet(a, b, c), FiniteSet(1, 2, 3))
A:sympy.core.tests.test_relational.B->Ne(FiniteSet(a, b, c), FiniteSet(4, 5, 6))
A:sympy.core.tests.test_relational.changed->trigsimp(Eq(s + c, sqrt(2)))
A:sympy.core.tests.test_relational.(a, b, c, d, e, f, g)->symbols('a b c d e f g')
sympy.core.tests.test_relational.assert_all_ineq_give_class_Inequality(a,b)
sympy.core.tests.test_relational.assert_all_ineq_raise_TypeError(a,b)
sympy.core.tests.test_relational.rel_check(a,b)
sympy.core.tests.test_relational.test_18778()
sympy.core.tests.test_relational.test_Eq_Ne()
sympy.core.tests.test_relational.test_Equality_rewrite_as_Add()
sympy.core.tests.test_relational.test_EvalEq()
sympy.core.tests.test_relational.test_Not()
sympy.core.tests.test_relational.test_as_poly()
sympy.core.tests.test_relational.test_binary_symbols()
sympy.core.tests.test_relational.test_bool()
sympy.core.tests.test_relational.test_canonical()
sympy.core.tests.test_relational.test_complex_compare_not_real()
sympy.core.tests.test_relational.test_complex_infinity_inequalities()
sympy.core.tests.test_relational.test_complex_pure_imag_not_ordered()
sympy.core.tests.test_relational.test_doit()
sympy.core.tests.test_relational.test_equals()
sympy.core.tests.test_relational.test_evaluate()
sympy.core.tests.test_relational.test_imaginary_and_inf_compare_raises_TypeError()
sympy.core.tests.test_relational.test_imaginary_compare_raises_TypeError()
sympy.core.tests.test_relational.test_improved_canonical()
sympy.core.tests.test_relational.test_ineq_avoid_wild_symbol_flip()
sympy.core.tests.test_relational.test_inequalities_cant_sympify_other()
sympy.core.tests.test_relational.test_inequalities_symbol_name_same()
sympy.core.tests.test_relational.test_inequalities_symbol_name_same_complex()
sympy.core.tests.test_relational.test_infinite_symbol_inequalities()
sympy.core.tests.test_relational.test_is_eq()
sympy.core.tests.test_relational.test_is_ge_le()
sympy.core.tests.test_relational.test_issue_10304()
sympy.core.tests.test_relational.test_issue_10401()
sympy.core.tests.test_relational.test_issue_10633()
sympy.core.tests.test_relational.test_issue_10927()
sympy.core.tests.test_relational.test_issue_15847()
sympy.core.tests.test_relational.test_issue_18188()
sympy.core.tests.test_relational.test_issue_18412()
sympy.core.tests.test_relational.test_issue_8245()
sympy.core.tests.test_relational.test_issue_8444_nonworkingtests()
sympy.core.tests.test_relational.test_issue_8444_workingtests()
sympy.core.tests.test_relational.test_issue_8449()
sympy.core.tests.test_relational.test_issues_13081_12583_12534()
sympy.core.tests.test_relational.test_multivariate_linear_function_simplification()
sympy.core.tests.test_relational.test_multivariate_relational_as_set()
sympy.core.tests.test_relational.test_nan_complex_inequalities()
sympy.core.tests.test_relational.test_nan_equality_exceptions()
sympy.core.tests.test_relational.test_nan_inequality_raise_errors()
sympy.core.tests.test_relational.test_negated_property()
sympy.core.tests.test_relational.test_new_relational()
sympy.core.tests.test_relational.test_nonpolymonial_relations()
sympy.core.tests.test_relational.test_polynomial_relation_simplification()
sympy.core.tests.test_relational.test_rel_Infinity()
sympy.core.tests.test_relational.test_rel_args()
sympy.core.tests.test_relational.test_rel_ne()
sympy.core.tests.test_relational.test_rel_subs()
sympy.core.tests.test_relational.test_relational_arithmetic()
sympy.core.tests.test_relational.test_relational_bool_output()
sympy.core.tests.test_relational.test_relational_logic_symbols()
sympy.core.tests.test_relational.test_reversed()
sympy.core.tests.test_relational.test_reversed_reversedsign_property()
sympy.core.tests.test_relational.test_reversedsign_property()
sympy.core.tests.test_relational.test_rich_cmp()
sympy.core.tests.test_relational.test_set_equality_canonical()
sympy.core.tests.test_relational.test_simplify_relational()
sympy.core.tests.test_relational.test_trigsimp()
sympy.core.tests.test_relational.test_univariate_relational_as_set()
sympy.core.tests.test_relational.test_weak_strict()
sympy.core.tests.test_relational.test_wrappers()
sympy.core.tests.test_relational.test_x_minus_y_not_same_as_x_lt_y()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_diff.py----------------------------------------
A:sympy.core.tests.test_diff.p->Rational(5)
A:sympy.core.tests.test_diff.n3->Rational(3)
A:sympy.core.tests.test_diff.n2->Rational(2)
A:sympy.core.tests.test_diff.n6->Rational(6)
A:sympy.core.tests.test_diff.e->log(sin(c))
A:sympy.core.tests.test_diff.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_diff.f->Function('f')
A:sympy.core.tests.test_diff.n->Symbol('n', integer=True)
A:sympy.core.tests.test_diff.expr->diff(sin(x), (x, n))
A:sympy.core.tests.test_diff.expr2->diff(f(x), (x, 2))
A:sympy.core.tests.test_diff.expr3->diff(f(x), (x, n))
A:sympy.core.tests.test_diff.mul_diff->diff(exprm, (x, n))
A:sympy.core.tests.test_diff.dex->exprm2.diff((x, n))
sympy.core.tests.test_diff.test_deriv_noncommutative()
sympy.core.tests.test_diff.test_diff()
sympy.core.tests.test_diff.test_diff2()
sympy.core.tests.test_diff.test_diff3()
sympy.core.tests.test_diff.test_diff_no_eval_derivative()
sympy.core.tests.test_diff.test_diff_nth_derivative()
sympy.core.tests.test_diff.test_issue_16160()
sympy.core.tests.test_diff.test_speed()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_eval.py----------------------------------------
A:sympy.core.tests.test_eval.a->Symbol('a')
A:sympy.core.tests.test_eval.b->Symbol('b')
A:sympy.core.tests.test_eval.c->Rational(1)
A:sympy.core.tests.test_eval.p->Rational(5)
A:sympy.core.tests.test_eval.x->Symbol('x')
A:sympy.core.tests.test_eval.y->Symbol('y')
A:sympy.core.tests.test_eval.(f, l)->map(Function, 'fl')
sympy.core.tests.test_eval.test_add_eval()
sympy.core.tests.test_eval.test_addmul_eval()
sympy.core.tests.test_eval.test_evalpow_bug()
sympy.core.tests.test_eval.test_function()
sympy.core.tests.test_eval.test_mulpow_eval()
sympy.core.tests.test_eval.test_pow_eval()
sympy.core.tests.test_eval.test_pow_eval_X1()
sympy.core.tests.test_eval.test_symbol_expand()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_random.py----------------------------------------
A:sympy.core.tests.test_random.a->rand()
A:sympy.core.tests.test_random.b->rand()
A:sympy.core.tests.test_random.got->set()
A:sympy.core.tests.test_random.(m0, m1)->symbols('m_0 m_1', real=True)
A:sympy.core.tests.test_random._->acos(-m0 / m1)
A:sympy.core.tests.test_random.c->rand()
A:sympy.core.tests.test_random.d->rand()
A:sympy.core.tests.test_random.first->list(abc)
A:sympy.core.tests.test_random.second->list(abc)
A:sympy.core.tests.test_random.third->list(abc)
sympy.core.tests.test_random.test_random()
sympy.core.tests.test_random.test_seed()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_sorting.py----------------------------------------
A:sympy.core.tests.test_sorting.func->C()
sympy.core.tests.test_sorting.test_default_sort_key()
sympy.core.tests.test_sorting.test_ordered()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_power.py----------------------------------------
A:sympy.core.tests.test_power.a->Symbol('a', positive=True)
A:sympy.core.tests.test_power.b->Symbol('b')
A:sympy.core.tests.test_power.k->Symbol('k', integer=True)
A:sympy.core.tests.test_power.m->Symbol('m', integer=True)
A:sympy.core.tests.test_power.x->Symbol('x', prime=True)
A:sympy.core.tests.test_power.y->Symbol('y')
A:sympy.core.tests.test_power.neg->Symbol('neg', negative=True)
A:sympy.core.tests.test_power.nonneg->Symbol('nonneg', nonnegative=True)
A:sympy.core.tests.test_power.any->Symbol('any')
A:sympy.core.tests.test_power.(num, den)->sqrt(1 / any).as_numer_denom()
A:sympy.core.tests.test_power.eq->sqrt(a)
A:sympy.core.tests.test_power.notp->Symbol('notp', positive=False)
A:sympy.core.tests.test_power.nonp->Symbol('nonp', nonpositive=True)
A:sympy.core.tests.test_power.n->Symbol('n', integer=True, nonnegative=True)
A:sympy.core.tests.test_power.c->Symbol('c', complex=True)
A:sympy.core.tests.test_power.e->log((Integer(567) / 500) ** (811 * (Integer(567) / 500) ** x / 100))
A:sympy.core.tests.test_power.i->symbols('i', imaginary=True)
A:sympy.core.tests.test_power.(x, y)->symbols('x y')
A:sympy.core.tests.test_power.r->symbols('r', real=True)
A:sympy.core.tests.test_power.p->symbols('p', positive=True)
A:sympy.core.tests.test_power.(a, b, c, d, e, f, g)->symbols('a:g')
A:sympy.core.tests.test_power.tru->expr.n(30, subs=dict(r))
A:sympy.core.tests.test_power.seq->expr.subs(r)
A:sympy.core.tests.test_power.(e, p)->symbols('e p')
A:sympy.core.tests.test_power.g0->sqrt(1 + e ** 2 - 2 * e * cos(p))
A:sympy.core.tests.test_power.ans->Mul(Rational(5, 4), Pow(Integer(2), Rational(16666666666666667, 25000000000000000)), Pow(Integer(5), Rational(8333333333333333, 25000000000000000)))
A:sympy.core.tests.test_power.(x, xexact)->integer_nthroot(a, a)
sympy.core.tests.test_power.test_Pow_Expr_args()
sympy.core.tests.test_power.test_Pow_signs()
sympy.core.tests.test_power.test_better_sqrt()
sympy.core.tests.test_power.test_expand()
sympy.core.tests.test_power.test_issue_13914()
sympy.core.tests.test_power.test_issue_14704()
sympy.core.tests.test_power.test_issue_14815()
sympy.core.tests.test_power.test_issue_17450()
sympy.core.tests.test_power.test_issue_18190()
sympy.core.tests.test_power.test_issue_18509()
sympy.core.tests.test_power.test_issue_18762()
sympy.core.tests.test_power.test_issue_21647()
sympy.core.tests.test_power.test_issue_21762()
sympy.core.tests.test_power.test_issue_21860()
sympy.core.tests.test_power.test_issue_23918()
sympy.core.tests.test_power.test_issue_2993()
sympy.core.tests.test_power.test_issue_3449()
sympy.core.tests.test_power.test_issue_3866()
sympy.core.tests.test_power.test_issue_4362()
sympy.core.tests.test_power.test_issue_6068()
sympy.core.tests.test_power.test_issue_6100_12942_4473()
sympy.core.tests.test_power.test_issue_6208()
sympy.core.tests.test_power.test_issue_6429()
sympy.core.tests.test_power.test_issue_6653()
sympy.core.tests.test_power.test_issue_6782()
sympy.core.tests.test_power.test_issue_6990()
sympy.core.tests.test_power.test_issue_7638()
sympy.core.tests.test_power.test_issue_8582()
sympy.core.tests.test_power.test_issue_8650()
sympy.core.tests.test_power.test_large_rational()
sympy.core.tests.test_power.test_negative_one()
sympy.core.tests.test_power.test_negative_real()
sympy.core.tests.test_power.test_nseries()
sympy.core.tests.test_power.test_pow_as_base_exp()
sympy.core.tests.test_power.test_power_dispatcher()
sympy.core.tests.test_power.test_power_rewrite_exp()
sympy.core.tests.test_power.test_power_with_noncommutative_mul_as_base()
sympy.core.tests.test_power.test_powers_of_I()
sympy.core.tests.test_power.test_rational()
sympy.core.tests.test_power.test_rational_powers_larger_than_one()
sympy.core.tests.test_power.test_zero()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_arit.py----------------------------------------
A:sympy.core.tests.test_arit.(a, c, x, y, z)->symbols('a,c,x,y,z')
A:sympy.core.tests.test_arit.b->Dummy('b', finite=ib, extended_real=True)
A:sympy.core.tests.test_arit.x->Symbol('x')
A:sympy.core.tests.test_arit.p->exp(I * pi / 3)
A:sympy.core.tests.test_arit.n1->Rational(1)
A:sympy.core.tests.test_arit.n2->Rational(2)
A:sympy.core.tests.test_arit.n5->Rational(5)
A:sympy.core.tests.test_arit.y->Symbol('y', nonnegative=True)
A:sympy.core.tests.test_arit._x->Symbol('x', zero=False)
A:sympy.core.tests.test_arit._y->Symbol('y', zero=False)
A:sympy.core.tests.test_arit.n->Symbol('n', integer=True)
A:sympy.core.tests.test_arit.k->Symbol('k', integer=True, positive=True)
A:sympy.core.tests.test_arit.o->Symbol('o', odd=True)
A:sympy.core.tests.test_arit.(r, i)->Dummy('b', finite=ib, extended_real=True).as_real_imag()
A:sympy.core.tests.test_arit.e->Symbol('e', extended_positive=True)
A:sympy.core.tests.test_arit.im->symbols('im', imaginary=True)
A:sympy.core.tests.test_arit.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_arit.B->Symbol('B', commutative=False)
A:sympy.core.tests.test_arit.C->Symbol('C', commutative=False)
A:sympy.core.tests.test_arit.m->Symbol('m', integer=True, positive=True)
A:sympy.core.tests.test_arit.z->S('9*(3*sqrt(93) + 29)**(2/3)*((3*sqrt(93) +\n        29)**(1/3)*(-2**(2/3)*(3*sqrt(93) + 29)**(1/3) - 2) - 2*2**(1/3))**3 +\n        72*(3*sqrt(93) + 29)**(2/3)*(81*sqrt(93) + 783) + (162*sqrt(93) +\n        1566)*((3*sqrt(93) + 29)**(1/3)*(-2**(2/3)*(3*sqrt(93) + 29)**(1/3) -\n        2) - 2*2**(1/3))**2')
A:sympy.core.tests.test_arit.a->AccumBounds(1, 2)
A:sympy.core.tests.test_arit.c->Dummy(real=False, complex=True)
A:sympy.core.tests.test_arit.nr->Symbol('nr', real=False, complex=True)
A:sympy.core.tests.test_arit.ir->Symbol('ir', irrational=True)
A:sympy.core.tests.test_arit.nz->Dummy(real=True, zero=False)
A:sympy.core.tests.test_arit.i2->Symbol('i2', imaginary=True)
A:sympy.core.tests.test_arit.xq->Symbol('xq', rational=True)
A:sympy.core.tests.test_arit.yq->Symbol('yq', rational=True)
A:sympy.core.tests.test_arit.e_20161->Mul(-1, Mul(1, Pow(2, -1, evaluate=False), evaluate=False), evaluate=False)
A:sympy.core.tests.test_arit.nk->Symbol('nk', integer=False)
A:sympy.core.tests.test_arit.r->Dummy(extended_real=True)
A:sympy.core.tests.test_arit.i->tensor_indices('i', L)
A:sympy.core.tests.test_arit.bi->Symbol('i', imaginary=True, finite=True)
A:sympy.core.tests.test_arit.neg->Symbol('neg', negative=True)
A:sympy.core.tests.test_arit.pos->Symbol('pos', positive=True)
A:sympy.core.tests.test_arit.nneg->Symbol('nneg', nonnegative=True)
A:sympy.core.tests.test_arit.npos->Symbol('npos', nonpositive=True)
A:sympy.core.tests.test_arit.d->Mul(a, a, evaluate=False)
A:sympy.core.tests.test_arit.u->Mul(2, 1 + x, evaluate=False)
A:sympy.core.tests.test_arit.v->Symbol('v', nonpositive=True)
A:sympy.core.tests.test_arit.f->Foo()
A:sympy.core.tests.test_arit.xe->Symbol('xe', extended_real=True)
A:sympy.core.tests.test_arit.xr->Symbol('xr', real=True)
A:sympy.core.tests.test_arit.(zo, zo2)->symbols('zo, zo2', zero=True)
A:sympy.core.tests.test_arit.(zf, zf2)->symbols('zf, zf2', finite=True)
A:sympy.core.tests.test_arit.(wf, wf2)->symbols('wf, wf2', nonzero=True)
A:sympy.core.tests.test_arit.(xf, xf2)->symbols('xf, xf2', real=True)
A:sympy.core.tests.test_arit.(yf, yf2)->symbols('yf, yf2', nonzero=True)
A:sympy.core.tests.test_arit.(af, af2)->symbols('af, af2', positive=True)
A:sympy.core.tests.test_arit.(bf, bf2)->symbols('bf, bf2', nonnegative=True)
A:sympy.core.tests.test_arit.(cf, cf2)->symbols('cf, cf2', negative=True)
A:sympy.core.tests.test_arit.(df, df2)->symbols('df, df2', nonpositive=True)
A:sympy.core.tests.test_arit.(zi, zi2)->symbols('zi, zi2')
A:sympy.core.tests.test_arit.(wi, wi2)->symbols('wi, wi2', zero=False)
A:sympy.core.tests.test_arit.(xi, xi2)->symbols('xi, xi2', extended_real=True)
A:sympy.core.tests.test_arit.(yi, yi2)->symbols('yi, yi2', zero=False, extended_real=True)
A:sympy.core.tests.test_arit.(ai, ai2)->symbols('ai, ai2', extended_positive=True)
A:sympy.core.tests.test_arit.(bi, bi2)->symbols('bi, bi2', extended_nonnegative=True)
A:sympy.core.tests.test_arit.(ci, ci2)->symbols('ci, ci2', extended_negative=True)
A:sympy.core.tests.test_arit.(di, di2)->symbols('di, di2', extended_nonpositive=True)
A:sympy.core.tests.test_arit.l->Symbol('l', integer=True, positive=True)
A:sympy.core.tests.test_arit.i1->Symbol('i1', imaginary=True)
A:sympy.core.tests.test_arit.j->Symbol('j', integer=True, zero=False)
A:sympy.core.tests.test_arit.ni->Symbol('ni', imaginary=False, complex=True)
A:sympy.core.tests.test_arit.(xz, yz)->symbols('xz, yz', zero=True, antihermitian=True)
A:sympy.core.tests.test_arit.(xf, yf)->symbols('xf, yf', hermitian=False, antihermitian=False, finite=True)
A:sympy.core.tests.test_arit.(xh, yh)->symbols('xh, yh', hermitian=True, antihermitian=False, nonzero=True)
A:sympy.core.tests.test_arit.(xa, ya)->symbols('xa, ya', hermitian=False, antihermitian=True, zero=False, finite=True)
A:sympy.core.tests.test_arit.e1->Mul(a, b, c, evaluate=False)
A:sympy.core.tests.test_arit.e2->Mul(b, a, c, evaluate=False)
A:sympy.core.tests.test_arit.e3->Mul(a, b, c, d, evaluate=False)
A:sympy.core.tests.test_arit.e4->Mul(b, a, c, d, evaluate=False)
A:sympy.core.tests.test_arit.e5->Mul(a, c, evaluate=False)
A:sympy.core.tests.test_arit.e6->Mul(a, c, d, evaluate=False)
A:sympy.core.tests.test_arit.expr->Pow(expr, expr, evaluate=False)
A:sympy.core.tests.test_arit.expr1->Add(-1, expr, evaluate=False)
A:sympy.core.tests.test_arit.r2->sqrt(2)
A:sympy.core.tests.test_arit.r3->sqrt(3)
A:sympy.core.tests.test_arit.t->Symbol('t', real=True)
A:sympy.core.tests.test_arit.x1->Symbol('x1', integer=True)
A:sympy.core.tests.test_arit.(i, j)->symbols('i j', integer=True, positive=True)
A:sympy.core.tests.test_arit.(x_r, y_r)->symbols('x_r y_r', real=True)
A:sympy.core.tests.test_arit.q1->Symbol('q1', integer=True)
A:sympy.core.tests.test_arit.q2->Symbol('q2', integer=True, nonzero=True)
A:sympy.core.tests.test_arit.q->Symbol('q', polar=True)
A:sympy.core.tests.test_arit.(n, m)->symbols('n,m', negative=True)
A:sympy.core.tests.test_arit.x_im->symbols('x_im', imaginary=True)
A:sympy.core.tests.test_arit.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.core.tests.test_arit.eq->Mul(-2, x - 2, evaluate=False)
A:sympy.core.tests.test_arit.c2->Dummy(real=False, complex=True)
A:sympy.core.tests.test_arit.zer->Dummy(zero=True)
A:sympy.core.tests.test_arit.inf->Dummy(finite=False)
A:sympy.core.tests.test_arit.(a, b)->symbols('a b')
A:sympy.core.tests.test_arit.(x, y)->symbols('x y', zero=True)
A:sympy.core.tests.test_arit.L->TensorIndexType('L')
A:sympy.core.tests.test_arit.(A, B)->tensor_heads('A B', [L])
sympy.core.tests.test_arit.same_and_same_prec(a,b)
sympy.core.tests.test_arit.test_Add_Mul_Expr_args()
sympy.core.tests.test_arit.test_Add_Mul_is_finite()
sympy.core.tests.test_arit.test_Add_Mul_is_integer()
sympy.core.tests.test_arit.test_Add_as_coeff_mul()
sympy.core.tests.test_arit.test_Add_as_content_primitive()
sympy.core.tests.test_arit.test_Add_is_comparable()
sympy.core.tests.test_arit.test_Add_is_even_odd()
sympy.core.tests.test_arit.test_Add_is_irrational()
sympy.core.tests.test_arit.test_Add_is_negative_positive()
sympy.core.tests.test_arit.test_Add_is_nonpositive_nonnegative()
sympy.core.tests.test_arit.test_Add_is_positive_2()
sympy.core.tests.test_arit.test_Add_is_rational()
sympy.core.tests.test_arit.test_Add_is_zero()
sympy.core.tests.test_arit.test_AssocOp_doit()
sympy.core.tests.test_arit.test_Mod()
sympy.core.tests.test_arit.test_Mod_Pow()
sympy.core.tests.test_arit.test_Mod_is_integer()
sympy.core.tests.test_arit.test_Mod_is_nonposneg()
sympy.core.tests.test_arit.test_Mul_as_content_primitive()
sympy.core.tests.test_arit.test_Mul_does_not_cancel_infinities()
sympy.core.tests.test_arit.test_Mul_does_not_distribute_infinity()
sympy.core.tests.test_arit.test_Mul_doesnt_expand_exp()
sympy.core.tests.test_arit.test_Mul_hermitian_antihermitian()
sympy.core.tests.test_arit.test_Mul_is_comparable()
sympy.core.tests.test_arit.test_Mul_is_even_odd()
sympy.core.tests.test_arit.test_Mul_is_imaginary_real()
sympy.core.tests.test_arit.test_Mul_is_integer()
sympy.core.tests.test_arit.test_Mul_is_irrational()
sympy.core.tests.test_arit.test_Mul_is_negative_positive()
sympy.core.tests.test_arit.test_Mul_is_negative_positive_2()
sympy.core.tests.test_arit.test_Mul_is_nonpositive_nonnegative()
sympy.core.tests.test_arit.test_Mul_is_rational()
sympy.core.tests.test_arit.test_Mul_with_zero_infinite()
sympy.core.tests.test_arit.test_Pow_as_coeff_mul_doesnt_expand()
sympy.core.tests.test_arit.test_Pow_as_content_primitive()
sympy.core.tests.test_arit.test_Pow_is_comparable()
sympy.core.tests.test_arit.test_Pow_is_even_odd()
sympy.core.tests.test_arit.test_Pow_is_finite()
sympy.core.tests.test_arit.test_Pow_is_integer()
sympy.core.tests.test_arit.test_Pow_is_negative_positive()
sympy.core.tests.test_arit.test_Pow_is_nonpositive_nonnegative()
sympy.core.tests.test_arit.test_Pow_is_real()
sympy.core.tests.test_arit.test_Pow_is_zero()
sympy.core.tests.test_arit.test_Rational_as_content_primitive()
sympy.core.tests.test_arit.test_Symbol()
sympy.core.tests.test_arit.test__neg__()
sympy.core.tests.test_arit.test_add_flatten()
sympy.core.tests.test_arit.test_arit0()
sympy.core.tests.test_arit.test_bug1()
sympy.core.tests.test_arit.test_bug3()
sympy.core.tests.test_arit.test_denest_add_mul()
sympy.core.tests.test_arit.test_div()
sympy.core.tests.test_arit.test_divmod()
sympy.core.tests.test_arit.test_evenness_in_ternary_integer_product_with_even()
sympy.core.tests.test_arit.test_evenness_in_ternary_integer_product_with_odd()
sympy.core.tests.test_arit.test_float_int_round()
sympy.core.tests.test_arit.test_issue_14392()
sympy.core.tests.test_arit.test_issue_17130()
sympy.core.tests.test_arit.test_issue_18507()
sympy.core.tests.test_arit.test_issue_21034()
sympy.core.tests.test_arit.test_issue_22021()
sympy.core.tests.test_arit.test_issue_22244()
sympy.core.tests.test_arit.test_issue_22453()
sympy.core.tests.test_arit.test_issue_22613()
sympy.core.tests.test_arit.test_issue_24751()
sympy.core.tests.test_arit.test_issue_3514_18626()
sympy.core.tests.test_arit.test_issue_3531()
sympy.core.tests.test_arit.test_issue_3531b()
sympy.core.tests.test_arit.test_issue_5126()
sympy.core.tests.test_arit.test_issue_5160_6087_6089_6090()
sympy.core.tests.test_arit.test_issue_5460()
sympy.core.tests.test_arit.test_issue_5919()
sympy.core.tests.test_arit.test_issue_6001()
sympy.core.tests.test_arit.test_issue_6040()
sympy.core.tests.test_arit.test_issue_6077()
sympy.core.tests.test_arit.test_issue_6082()
sympy.core.tests.test_arit.test_issue_6611a()
sympy.core.tests.test_arit.test_issue_8247_8354()
sympy.core.tests.test_arit.test_make_args()
sympy.core.tests.test_arit.test_mod_pow()
sympy.core.tests.test_arit.test_mul_add_identity()
sympy.core.tests.test_arit.test_mul_coeff()
sympy.core.tests.test_arit.test_mul_flatten_oo()
sympy.core.tests.test_arit.test_mul_zero_detection()
sympy.core.tests.test_arit.test_ncmul()
sympy.core.tests.test_arit.test_ncpow()
sympy.core.tests.test_arit.test_oddness_in_ternary_integer_product_with_even()
sympy.core.tests.test_arit.test_oddness_in_ternary_integer_product_with_odd()
sympy.core.tests.test_arit.test_polar()
sympy.core.tests.test_arit.test_pow2()
sympy.core.tests.test_arit.test_pow3()
sympy.core.tests.test_arit.test_pow_E()
sympy.core.tests.test_arit.test_pow_arit()
sympy.core.tests.test_arit.test_pow_im()
sympy.core.tests.test_arit.test_pow_issue_3516()
sympy.core.tests.test_arit.test_powerbug()
sympy.core.tests.test_arit.test_product_irrational()
sympy.core.tests.test_arit.test_real_Pow()
sympy.core.tests.test_arit.test_real_mul()
sympy.core.tests.test_arit.test_suppressed_evaluation()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_compatibility.py----------------------------------------
sympy.core.tests.test_compatibility.test_compatibility_submodule()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_traversal.py----------------------------------------
A:sympy.core.tests.test_traversal.b1->Basic()
A:sympy.core.tests.test_traversal.b2->Basic(b1)
A:sympy.core.tests.test_traversal.b3->Basic(b2)
A:sympy.core.tests.test_traversal.b21->Basic(b2, b1)
A:sympy.core.tests.test_traversal.expr->Piecewise((x, x < 1), (x ** 2, True))
A:sympy.core.tests.test_traversal.pt->preorder_traversal(expr)
A:sympy.core.tests.test_traversal.(w, x, y, z)->symbols('w:z')
A:sympy.core.tests.test_traversal.(x, y)->symbols('x y')
A:sympy.core.tests.test_traversal.(x, y, z, w)->symbols('x y z w')
A:sympy.core.tests.test_traversal.f->Function('f')
A:sympy.core.tests.test_traversal.x->symbols('x')
sympy.core.tests.test_traversal.test_deprecated_imports()
sympy.core.tests.test_traversal.test_iterargs()
sympy.core.tests.test_traversal.test_postorder_traversal()
sympy.core.tests.test_traversal.test_preorder_traversal()
sympy.core.tests.test_traversal.test_use()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_containers.py----------------------------------------
A:sympy.core.tests.test_containers.st->Tuple(*t)
A:sympy.core.tests.test_containers.(p, q, r, s)->symbols('p q r s')
A:sympy.core.tests.test_containers.st2->Tuple(*t2)
A:sympy.core.tests.test_containers.f->Function('f')
A:sympy.core.tests.test_containers.p->symbols('p')
A:sympy.core.tests.test_containers.kind->TupleKind(NumberKind, MatrixKind(NumberKind))
A:sympy.core.tests.test_containers.(x, y, z)->symbols('x y z')
A:sympy.core.tests.test_containers.d->Dict(d)
sympy.core.tests.test_containers.test_Dict()
sympy.core.tests.test_containers.test_Tuple()
sympy.core.tests.test_containers.test_TupleKind()
sympy.core.tests.test_containers.test_Tuple_Eq()
sympy.core.tests.test_containers.test_Tuple_comparision()
sympy.core.tests.test_containers.test_Tuple_concatenation()
sympy.core.tests.test_containers.test_Tuple_contains()
sympy.core.tests.test_containers.test_Tuple_equality()
sympy.core.tests.test_containers.test_Tuple_index()
sympy.core.tests.test_containers.test_Tuple_mul()
sympy.core.tests.test_containers.test_Tuple_tuple_count()
sympy.core.tests.test_containers.test_issue_5788()
sympy.core.tests.test_containers.test_iterable_is_sequence()
sympy.core.tests.test_containers.test_tuple_wrapper()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_basic.py----------------------------------------
A:sympy.core.tests.test_basic.b1->Basic()
A:sympy.core.tests.test_basic.b2->Basic(b1)
A:sympy.core.tests.test_basic.b3->Basic(b2)
A:sympy.core.tests.test_basic.b21->Basic(b2, b1)
A:sympy.core.tests.test_basic.b->Wild('b')
A:sympy.core.tests.test_basic.foo->Foo()
A:sympy.core.tests.test_basic.bar->Bar()
A:sympy.core.tests.test_basic.expr->Symbol('var1')
A:sympy.core.tests.test_basic.replaced->Symbol('var1').subs('var1', 'x')
A:sympy.core.tests.test_basic.x->symbols('x')
A:sympy.core.tests.test_basic.(x, y)->symbols('x y')
A:sympy.core.tests.test_basic.l->Lambda(x, 2 * x)
A:sympy.core.tests.test_basic.(x, y, z)->symbols('x y z')
A:sympy.core.tests.test_basic.(a, b)->symbols('a b')
A:sympy.core.tests.test_basic.f->Function('f')
A:sympy.core.tests.test_basic.i->Integral(0, (x, x, x))
A:sympy.core.tests.test_basic.(g, h)->map(Function, 'gh')
A:sympy.core.tests.test_basic.(u, v, x, y, z, _0, _1)->symbols('u v x y z _0 _1')
A:sympy.core.tests.test_basic.once->eq.as_dummy()
A:sympy.core.tests.test_basic.twice->eq.as_dummy().as_dummy()
A:sympy.core.tests.test_basic.d->T('x', real=True)
A:sympy.core.tests.test_basic.D->T('x', real=True).as_dummy()
A:sympy.core.tests.test_basic.(x, i0, i1)->symbols('x _:2')
A:sympy.core.tests.test_basic.c->Wild('c')
sympy.core.tests.test_basic.test_ManagedProperties()
sympy.core.tests.test_basic.test_S()
sympy.core.tests.test_basic.test__aresame()
sympy.core.tests.test_basic.test_as_Basic()
sympy.core.tests.test_basic.test_as_dummy()
sympy.core.tests.test_basic.test_atomic()
sympy.core.tests.test_basic.test_atoms()
sympy.core.tests.test_basic.test_call()
sympy.core.tests.test_basic.test_canonical_variables()
sympy.core.tests.test_basic.test_doit()
sympy.core.tests.test_basic.test_equality()
sympy.core.tests.test_basic.test_free_symbols_empty()
sympy.core.tests.test_basic.test_has()
sympy.core.tests.test_basic.test_immutable()
sympy.core.tests.test_basic.test_literal_evalf_is_number_is_zero_is_comparable()
sympy.core.tests.test_basic.test_matches_basic()
sympy.core.tests.test_basic.test_replace_exceptions()
sympy.core.tests.test_basic.test_rewrite()
sympy.core.tests.test_basic.test_sorted_args()
sympy.core.tests.test_basic.test_structure()
sympy.core.tests.test_basic.test_subs()
sympy.core.tests.test_basic.test_subs_with_unicode_symbols()
sympy.core.tests.test_basic.test_xreplace()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_args.py----------------------------------------
A:sympy.core.tests.test_args.(a, b, c, x, y, z)->symbols('a,b,c,x,y,z')
A:sympy.core.tests.test_args.path->os.path.join(this, os.pardir, os.pardir)
A:sympy.core.tests.test_args.sympy_path->os.path.abspath(path)
A:sympy.core.tests.test_args.re_cls->sympy.functions.elementary.complexes.re.compile('^class ([A-Za-z][A-Za-z0-9_]*)\\s*\\(', re.MULTILINE)
A:sympy.core.tests.test_args.module->root.replace(prefix, '').replace(os.sep, '.')
A:sympy.core.tests.test_args.text->NamedMorphism(A, B, 'f').read()
A:sympy.core.tests.test_args.names->list(filter(is_Basic, names))
A:sympy.core.tests.test_args.mod->root.replace(prefix, '').replace(os.sep, '.').replace('.', '__')
A:sympy.core.tests.test_args.cls->type(cls)
A:sympy.core.tests.test_args.ns->globals()
A:sympy.core.tests.test_args.all_basic->all((isinstance(arg, Basic) for arg in obj.args))
A:sympy.core.tests.test_args.vx->Variable(x, type=Type('float'))
A:sympy.core.tests.test_args.inp_x->Declaration(Variable(x, type=real))
A:sympy.core.tests.test_args.x->Symbol('x')
A:sympy.core.tests.test_args.idl->ImpliedDoLoop('i', 'i', 1, 42)
A:sympy.core.tests.test_args.p->WildTensorHead('p')
A:sympy.core.tests.test_args.A->MatrixSymbol('A', 3, 3)
A:sympy.core.tests.test_args.(i, j)->symbols('i j', below_fermi=True)
A:sympy.core.tests.test_args.(a1, a2)->symbols('a1:3', cls=Idx)
A:sympy.core.tests.test_args.y->Function('y')
A:sympy.core.tests.test_args.S->Intersection(Interval(0, x), Interval(y, 1))
A:sympy.core.tests.test_args.(a, b)->tensor_indices('a,b', Lorentz)
A:sympy.core.tests.test_args.a->Permutation(1, 2)
A:sympy.core.tests.test_args.b->Permutation(0, 1)
A:sympy.core.tests.test_args.theta->Interval(0, 2 * S.Pi)
A:sympy.core.tests.test_args.nd->NormalDistribution(0, 1)
A:sympy.core.tests.test_args.die->DieDistribution(6)
A:sympy.core.tests.test_args.D->SingleDomain(x, Interval(-oo, oo))
A:sympy.core.tests.test_args.E->SingleDomain(y, Interval(0, oo))
A:sympy.core.tests.test_args.X->MatrixSymbol('X', 10, 10)
A:sympy.core.tests.test_args.Y->MatrixSymbol('Y', x, y)
A:sympy.core.tests.test_args.density->Lambda(x, 2 ** (-x))
A:sympy.core.tests.test_args.domain->SingleDiscreteDomain(x, S.Naturals)
A:sympy.core.tests.test_args.r->Poisson('r', 5)
A:sympy.core.tests.test_args.C->CoordSys3D('C')
A:sympy.core.tests.test_args.B->Object('B')
A:sympy.core.tests.test_args.xd->SingleFiniteDomain(x, {1, 2})
A:sympy.core.tests.test_args.yd->SingleFiniteDomain(y, {1, 2})
A:sympy.core.tests.test_args.xp->SingleFinitePSpace(Symbol('x'), die)
A:sympy.core.tests.test_args.yp->SingleFinitePSpace(Symbol('y'), die)
A:sympy.core.tests.test_args.pspace->RandomMatrixPSpace('P')
A:sympy.core.tests.test_args.DMC->DiscreteMarkovChain('Y')
A:sympy.core.tests.test_args.model->RandomMatrixEnsembleModel('R', 3)
A:sympy.core.tests.test_args.M->MatrixDistribution(1, Matrix([[1, 0], [0, 1]]))
A:sympy.core.tests.test_args.L->TensorIndexType('L')
A:sympy.core.tests.test_args.S1->MatrixSymbol('S1', 1, 1)
A:sympy.core.tests.test_args.S2->MatrixSymbol('S2', 2, 2)
A:sympy.core.tests.test_args.v->MatrixSymbol('x', 3, 1)
A:sympy.core.tests.test_args.Omega->MatrixSymbol('Omega', 3, 3)
A:sympy.core.tests.test_args.Sigma->MatrixSymbol('Sigma', 1, 1)
A:sympy.core.tests.test_args.Location->MatrixSymbol('Location', 1, 3)
A:sympy.core.tests.test_args.(a, b1, b2, c, x, y)->symbols('a b1 b2 c x y')
A:sympy.core.tests.test_args.m->ImmutableSparseMatrix(2, 2, lambda i, j: 1 / (1 + i) + 1 / (1 + j))
A:sympy.core.tests.test_args.func->Lambda(x, x ** 2)
A:sympy.core.tests.test_args.Z->MatrixSymbol('Z', x, y)
A:sympy.core.tests.test_args.O->ZeroMatrix(y, x)
A:sympy.core.tests.test_args.n->symbols('n')
A:sympy.core.tests.test_args.(A, B)->symbols('A B', cls=IndexedBase)
A:sympy.core.tests.test_args.c->ComplexSpace(2)
A:sympy.core.tests.test_args.f->NamedMorphism(A, B, 'f')
A:sympy.core.tests.test_args.k->symbols('k', integer=True)
A:sympy.core.tests.test_args.(j, m, j1, j2, j3, j12, x)->symbols('j m j1:4 j12 x')
A:sympy.core.tests.test_args.g->NamedMorphism(B, C, 'g')
A:sympy.core.tests.test_args.(x, y)->symbols('x y', commutative=False)
A:sympy.core.tests.test_args.tf1->TransferFunction(x ** 2 - y ** 3, y - z, x)
A:sympy.core.tests.test_args.tf2->TransferFunction(y - x, z + y, x)
A:sympy.core.tests.test_args.tfm_1->TransferFunctionMatrix([[tf2, tf1], [tf1, tf2]])
A:sympy.core.tests.test_args.tfm_2->TransferFunctionMatrix([[tf1, tf2], [tf2, tf1]])
A:sympy.core.tests.test_args.tfm_3->TransferFunctionMatrix([[tf1], [tf2]])
A:sympy.core.tests.test_args.s1->sequence((1, 2, 3))
A:sympy.core.tests.test_args.s2->sequence(x ** 2)
A:sympy.core.tests.test_args.f1->fps(exp(x))
A:sympy.core.tests.test_args.densarr->ImmutableDenseNDimArray(range(10, 34), (2, 3, 4))
A:sympy.core.tests.test_args.sparr->ImmutableSparseNDimArray(range(10, 34), (2, 3, 4))
A:sympy.core.tests.test_args.arrcom->ArrayComprehension(x, (x, 1, 5))
A:sympy.core.tests.test_args.arrcomma->ArrayComprehensionMap(lambda : 0, (x, 1, 5))
A:sympy.core.tests.test_args.arrder->ArrayDerivative(A, A, evaluate=False)
A:sympy.core.tests.test_args.(m, n, k)->symbols('m n k')
A:sympy.core.tests.test_args.array->ArraySymbol('A', (m, n, k, 2))
A:sympy.core.tests.test_args.ae->ArrayElement('A', (m, n, k, 2))
A:sympy.core.tests.test_args.za->OneArray(m, n, k, 2)
A:sympy.core.tests.test_args.tp->TensorProduct(A, B)
A:sympy.core.tests.test_args.Lorentz->TensorIndexType('Lorentz', dummy_name='L')
A:sympy.core.tests.test_args.sym->TensorSymmetry(get_symmetric_group_sgs(1))
A:sympy.core.tests.test_args.(p, q)->tensor_heads('p, q', [Lorentz], sym)
A:sympy.core.tests.test_args.t1->p(a)
A:sympy.core.tests.test_args.t2->q(a)
A:sympy.core.tests.test_args.telem->TensorElement(A(x, y), {x: 1})
A:sympy.core.tests.test_args.cs->CoordSystem('name', Patch('name', Manifold('name', 3)), [a, b, c])
A:sympy.core.tests.test_args.cs1->CoordSystem('name1', Patch('name', Manifold('name', 3)), [a, b, c])
A:sympy.core.tests.test_args.v1->BaseVectorField(cs1, 0)
A:sympy.core.tests.test_args.d->Diagram([f])
A:sympy.core.tests.test_args.d1->Diagram([f, g])
A:sympy.core.tests.test_args.d2->Diagram([f])
A:sympy.core.tests.test_args.K->Category('K', commutative_diagrams=[d1, d2])
A:sympy.core.tests.test_args.t->primepi(n)
A:sympy.core.tests.test_args.(A, f, phi)->symbols('A, f, phi')
A:sympy.core.tests.test_args.(a, b, c, d)->symbols('a b c d')
A:sympy.core.tests.test_args.G->PermutationGroup([a, b])
sympy.core.tests.test_args._test_args(obj)
sympy.core.tests.test_args.test_all_classes_are_tested()
sympy.core.tests.test_args.test_as_coeff_add()
sympy.core.tests.test_args.test_predicates()
sympy.core.tests.test_args.test_sympy__algebras__quaternion__Quaternion()
sympy.core.tests.test_args.test_sympy__assumptions__assume__AppliedPredicate()
sympy.core.tests.test_args.test_sympy__assumptions__assume__Predicate()
sympy.core.tests.test_args.test_sympy__assumptions__assume__UndefinedPredicate()
sympy.core.tests.test_args.test_sympy__assumptions__relation__binrel__AppliedBinaryRelation()
sympy.core.tests.test_args.test_sympy__assumptions__relation__binrel__BinaryRelation()
sympy.core.tests.test_args.test_sympy__assumptions__wrapper__AssumptionsWrapper()
sympy.core.tests.test_args.test_sympy__calculus__accumulationbounds__AccumulationBounds()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Category()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Class()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__CompositeMorphism()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Diagram()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__IdentityMorphism()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Morphism()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__NamedMorphism()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Object()
sympy.core.tests.test_args.test_sympy__codegen__abstract_nodes__List()
sympy.core.tests.test_args.test_sympy__codegen__ast__AddAugmentedAssignment()
sympy.core.tests.test_args.test_sympy__codegen__ast__Assignment()
sympy.core.tests.test_args.test_sympy__codegen__ast__AssignmentBase()
sympy.core.tests.test_args.test_sympy__codegen__ast__Attribute()
sympy.core.tests.test_args.test_sympy__codegen__ast__AugmentedAssignment()
sympy.core.tests.test_args.test_sympy__codegen__ast__BreakToken()
sympy.core.tests.test_args.test_sympy__codegen__ast__CodeBlock()
sympy.core.tests.test_args.test_sympy__codegen__ast__CodegenAST()
sympy.core.tests.test_args.test_sympy__codegen__ast__Comment()
sympy.core.tests.test_args.test_sympy__codegen__ast__ComplexBaseType()
sympy.core.tests.test_args.test_sympy__codegen__ast__ComplexType()
sympy.core.tests.test_args.test_sympy__codegen__ast__ContinueToken()
sympy.core.tests.test_args.test_sympy__codegen__ast__Declaration()
sympy.core.tests.test_args.test_sympy__codegen__ast__DivAugmentedAssignment()
sympy.core.tests.test_args.test_sympy__codegen__ast__Element()
sympy.core.tests.test_args.test_sympy__codegen__ast__FloatBaseType()
sympy.core.tests.test_args.test_sympy__codegen__ast__FloatType()
sympy.core.tests.test_args.test_sympy__codegen__ast__For()
sympy.core.tests.test_args.test_sympy__codegen__ast__FunctionCall()
sympy.core.tests.test_args.test_sympy__codegen__ast__FunctionDefinition()
sympy.core.tests.test_args.test_sympy__codegen__ast__FunctionPrototype()
sympy.core.tests.test_args.test_sympy__codegen__ast__IntBaseType()
sympy.core.tests.test_args.test_sympy__codegen__ast__ModAugmentedAssignment()
sympy.core.tests.test_args.test_sympy__codegen__ast__MulAugmentedAssignment()
sympy.core.tests.test_args.test_sympy__codegen__ast__Node()
sympy.core.tests.test_args.test_sympy__codegen__ast__NoneToken()
sympy.core.tests.test_args.test_sympy__codegen__ast__Pointer()
sympy.core.tests.test_args.test_sympy__codegen__ast__Print()
sympy.core.tests.test_args.test_sympy__codegen__ast__QuotedString()
sympy.core.tests.test_args.test_sympy__codegen__ast__Return()
sympy.core.tests.test_args.test_sympy__codegen__ast__Scope()
sympy.core.tests.test_args.test_sympy__codegen__ast__SignedIntType()
sympy.core.tests.test_args.test_sympy__codegen__ast__Stream()
sympy.core.tests.test_args.test_sympy__codegen__ast__String()
sympy.core.tests.test_args.test_sympy__codegen__ast__SubAugmentedAssignment()
sympy.core.tests.test_args.test_sympy__codegen__ast__Token()
sympy.core.tests.test_args.test_sympy__codegen__ast__Type()
sympy.core.tests.test_args.test_sympy__codegen__ast__UnsignedIntType()
sympy.core.tests.test_args.test_sympy__codegen__ast__Variable()
sympy.core.tests.test_args.test_sympy__codegen__ast__While()
sympy.core.tests.test_args.test_sympy__codegen__ast___SizedIntType()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__Cbrt()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__Sqrt()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__exp2()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__expm1()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__fma()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__hypot()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__log10()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__log1p()
sympy.core.tests.test_args.test_sympy__codegen__cfunctions__log2()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__CommaOperator()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__Label()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__PostDecrement()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__PostIncrement()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__PreDecrement()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__PreIncrement()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__goto()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__struct()
sympy.core.tests.test_args.test_sympy__codegen__cnodes__union()
sympy.core.tests.test_args.test_sympy__codegen__cxxnodes__using()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__ArrayConstructor()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__Do()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__Extent()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__F95Function()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__FFunction()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__FortranReturn()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__GoTo()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__ImpliedDoLoop()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__Module()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__Program()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__Subroutine()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__SubroutineCall()
sympy.core.tests.test_args.test_sympy__codegen__fnodes___literal()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__cmplx()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__dsign()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__isign()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__kind()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__literal_dp()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__literal_sp()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__merge()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__product_()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__sum_()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__use()
sympy.core.tests.test_args.test_sympy__codegen__fnodes__use_rename()
sympy.core.tests.test_args.test_sympy__codegen__matrix_nodes__MatrixSolve()
sympy.core.tests.test_args.test_sympy__codegen__numpy_nodes__logaddexp()
sympy.core.tests.test_args.test_sympy__codegen__numpy_nodes__logaddexp2()
sympy.core.tests.test_args.test_sympy__codegen__pynodes__List()
sympy.core.tests.test_args.test_sympy__codegen__pynodes__NumExprEvaluate()
sympy.core.tests.test_args.test_sympy__codegen__scipy_nodes__cosm1()
sympy.core.tests.test_args.test_sympy__codegen__scipy_nodes__powm1()
sympy.core.tests.test_args.test_sympy__combinatorics__graycode__GrayCode()
sympy.core.tests.test_args.test_sympy__combinatorics__partitions__IntegerPartition()
sympy.core.tests.test_args.test_sympy__combinatorics__partitions__Partition()
sympy.core.tests.test_args.test_sympy__combinatorics__perm_groups__Coset()
sympy.core.tests.test_args.test_sympy__combinatorics__perm_groups__PermutationGroup()
sympy.core.tests.test_args.test_sympy__combinatorics__perm_groups__SymmetricPermutationGroup()
sympy.core.tests.test_args.test_sympy__combinatorics__permutations__AppliedPermutation()
sympy.core.tests.test_args.test_sympy__combinatorics__permutations__Permutation()
sympy.core.tests.test_args.test_sympy__combinatorics__polyhedron__Polyhedron()
sympy.core.tests.test_args.test_sympy__combinatorics__prufer__Prufer()
sympy.core.tests.test_args.test_sympy__combinatorics__schur_number__SchurNumber()
sympy.core.tests.test_args.test_sympy__concrete__expr_with_intlimits__ExprWithIntLimits()
sympy.core.tests.test_args.test_sympy__concrete__expr_with_limits__AddWithLimits()
sympy.core.tests.test_args.test_sympy__concrete__expr_with_limits__ExprWithLimits()
sympy.core.tests.test_args.test_sympy__concrete__products__Product()
sympy.core.tests.test_args.test_sympy__concrete__summations__Sum()
sympy.core.tests.test_args.test_sympy__core__add__Add()
sympy.core.tests.test_args.test_sympy__core__basic__Atom()
sympy.core.tests.test_args.test_sympy__core__basic__Basic()
sympy.core.tests.test_args.test_sympy__core__containers__Dict()
sympy.core.tests.test_args.test_sympy__core__containers__Tuple()
sympy.core.tests.test_args.test_sympy__core__expr__AtomicExpr()
sympy.core.tests.test_args.test_sympy__core__expr__Expr()
sympy.core.tests.test_args.test_sympy__core__expr__UnevaluatedExpr()
sympy.core.tests.test_args.test_sympy__core__function__Application()
sympy.core.tests.test_args.test_sympy__core__function__AppliedUndef()
sympy.core.tests.test_args.test_sympy__core__function__Derivative()
sympy.core.tests.test_args.test_sympy__core__function__Function()
sympy.core.tests.test_args.test_sympy__core__function__Lambda()
sympy.core.tests.test_args.test_sympy__core__function__Subs()
sympy.core.tests.test_args.test_sympy__core__function__WildFunction()
sympy.core.tests.test_args.test_sympy__core__mod__Mod()
sympy.core.tests.test_args.test_sympy__core__mul__Mul()
sympy.core.tests.test_args.test_sympy__core__numbers__AlgebraicNumber()
sympy.core.tests.test_args.test_sympy__core__numbers__Catalan()
sympy.core.tests.test_args.test_sympy__core__numbers__ComplexInfinity()
sympy.core.tests.test_args.test_sympy__core__numbers__EulerGamma()
sympy.core.tests.test_args.test_sympy__core__numbers__Exp1()
sympy.core.tests.test_args.test_sympy__core__numbers__Float()
sympy.core.tests.test_args.test_sympy__core__numbers__GoldenRatio()
sympy.core.tests.test_args.test_sympy__core__numbers__Half()
sympy.core.tests.test_args.test_sympy__core__numbers__ImaginaryUnit()
sympy.core.tests.test_args.test_sympy__core__numbers__Infinity()
sympy.core.tests.test_args.test_sympy__core__numbers__Integer()
sympy.core.tests.test_args.test_sympy__core__numbers__IntegerConstant()
sympy.core.tests.test_args.test_sympy__core__numbers__NaN()
sympy.core.tests.test_args.test_sympy__core__numbers__NegativeInfinity()
sympy.core.tests.test_args.test_sympy__core__numbers__NegativeOne()
sympy.core.tests.test_args.test_sympy__core__numbers__Number()
sympy.core.tests.test_args.test_sympy__core__numbers__NumberSymbol()
sympy.core.tests.test_args.test_sympy__core__numbers__One()
sympy.core.tests.test_args.test_sympy__core__numbers__Pi()
sympy.core.tests.test_args.test_sympy__core__numbers__Rational()
sympy.core.tests.test_args.test_sympy__core__numbers__RationalConstant()
sympy.core.tests.test_args.test_sympy__core__numbers__TribonacciConstant()
sympy.core.tests.test_args.test_sympy__core__numbers__Zero()
sympy.core.tests.test_args.test_sympy__core__operations__AssocOp()
sympy.core.tests.test_args.test_sympy__core__operations__LatticeOp()
sympy.core.tests.test_args.test_sympy__core__power__Pow()
sympy.core.tests.test_args.test_sympy__core__relational__Equality()
sympy.core.tests.test_args.test_sympy__core__relational__GreaterThan()
sympy.core.tests.test_args.test_sympy__core__relational__LessThan()
sympy.core.tests.test_args.test_sympy__core__relational__Relational()
sympy.core.tests.test_args.test_sympy__core__relational__StrictGreaterThan()
sympy.core.tests.test_args.test_sympy__core__relational__StrictLessThan()
sympy.core.tests.test_args.test_sympy__core__relational__Unequality()
sympy.core.tests.test_args.test_sympy__core__symbol__Dummy()
sympy.core.tests.test_args.test_sympy__core__symbol__Str()
sympy.core.tests.test_args.test_sympy__core__symbol__Symbol()
sympy.core.tests.test_args.test_sympy__core__symbol__Wild()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__BaseCovarDerivativeOp()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__BaseScalarField()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__BaseVectorField()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Commutator()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__CoordSystem()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__CoordinateSymbol()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__CovarDerivativeOp()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Differential()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__LieDerivative()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Manifold()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Patch()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Point()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__TensorProduct()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__WedgeProduct()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__CombinatorialFunction()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__FallingFactorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__MultiFactorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__RisingFactorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__binomial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__factorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__factorial2()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__subfactorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__andre()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__bell()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__bernoulli()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__carmichael()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__catalan()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__euler()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__fibonacci()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__genocchi()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__harmonic()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__lucas()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__motzkin()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__partition()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__tribonacci()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__Abs()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__adjoint()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__arg()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__conjugate()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__im()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__periodic_argument()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__polar_lift()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__principal_branch()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__re()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__sign()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__transpose()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__ExpBase()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__LambertW()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__exp()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__exp_polar()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__log()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__HyperbolicFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__InverseHyperbolicFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__ReciprocalHyperbolicFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__acosh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__acoth()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__acsch()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__asech()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__asinh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__atanh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__cosh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__coth()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__csch()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__sech()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__sinh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__tanh()
sympy.core.tests.test_args.test_sympy__functions__elementary__integers__RoundFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__integers__ceiling()
sympy.core.tests.test_args.test_sympy__functions__elementary__integers__floor()
sympy.core.tests.test_args.test_sympy__functions__elementary__integers__frac()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__IdentityFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__Max()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__Min()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__MinMaxBase()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__Rem()
sympy.core.tests.test_args.test_sympy__functions__elementary__piecewise__ExprCondPair()
sympy.core.tests.test_args.test_sympy__functions__elementary__piecewise__Piecewise()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__InverseTrigonometricFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__ReciprocalTrigonometricFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__TrigonometricFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__acos()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__acot()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__acsc()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__asec()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__asin()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__atan()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__atan2()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__cos()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__cot()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__csc()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__sec()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__sin()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__sinc()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__tan()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__AiryBase()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__BesselBase()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__SphericalBesselBase()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__SphericalHankelBase()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__airyai()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__airyaiprime()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__airybi()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__airybiprime()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__besseli()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__besselj()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__besselk()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__bessely()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__hankel1()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__hankel2()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__hn1()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__hn2()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__jn()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__marcumq()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__yn()
sympy.core.tests.test_args.test_sympy__functions__special__beta_functions__beta()
sympy.core.tests.test_args.test_sympy__functions__special__beta_functions__betainc()
sympy.core.tests.test_args.test_sympy__functions__special__beta_functions__betainc_regularized()
sympy.core.tests.test_args.test_sympy__functions__special__delta_functions__DiracDelta()
sympy.core.tests.test_args.test_sympy__functions__special__delta_functions__Heaviside()
sympy.core.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_e()
sympy.core.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_f()
sympy.core.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_k()
sympy.core.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_pi()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Chi()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Ci()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Ei()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__FresnelIntegral()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Li()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Shi()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Si()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__TrigonometricIntegral()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erf()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erf2()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erf2inv()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfc()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfcinv()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfi()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfinv()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfs()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__expint()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__fresnelc()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__fresnels()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__li()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__digamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__gamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__loggamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__lowergamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__multigamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__polygamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__trigamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__uppergamma()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_asin1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_asin2()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_atanh()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_cosasin()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_log1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_log2()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_power1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_power2()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sinasin()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sqrts1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sqrts2()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__TupleArg()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__TupleParametersBase()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__appellf1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__hyper()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__meijerg()
sympy.core.tests.test_args.test_sympy__functions__special__mathieu_functions__MathieuBase()
sympy.core.tests.test_args.test_sympy__functions__special__mathieu_functions__mathieuc()
sympy.core.tests.test_args.test_sympy__functions__special__mathieu_functions__mathieucprime()
sympy.core.tests.test_args.test_sympy__functions__special__mathieu_functions__mathieus()
sympy.core.tests.test_args.test_sympy__functions__special__mathieu_functions__mathieusprime()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__OrthogonalPolynomial()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__assoc_laguerre()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__assoc_legendre()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__chebyshevt()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__chebyshevt_root()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__chebyshevu()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__chebyshevu_root()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__gegenbauer()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__hermite()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__hermite_prob()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__jacobi()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__laguerre()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__legendre()
sympy.core.tests.test_args.test_sympy__functions__special__singularity_functions__SingularityFunction()
sympy.core.tests.test_args.test_sympy__functions__special__spherical_harmonics__Ynm()
sympy.core.tests.test_args.test_sympy__functions__special__spherical_harmonics__Znm()
sympy.core.tests.test_args.test_sympy__functions__special__tensor_functions__KroneckerDelta()
sympy.core.tests.test_args.test_sympy__functions__special__tensor_functions__LeviCivita()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__dirichlet_eta()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__lerchphi()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__polylog()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__riemann_xi()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__stieltjes()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__zeta()
sympy.core.tests.test_args.test_sympy__geometry__curve__Curve()
sympy.core.tests.test_args.test_sympy__geometry__ellipse__Circle()
sympy.core.tests.test_args.test_sympy__geometry__ellipse__Ellipse()
sympy.core.tests.test_args.test_sympy__geometry__entity__GeometryEntity()
sympy.core.tests.test_args.test_sympy__geometry__entity__GeometrySet()
sympy.core.tests.test_args.test_sympy__geometry__line__Line()
sympy.core.tests.test_args.test_sympy__geometry__line__Line2D()
sympy.core.tests.test_args.test_sympy__geometry__line__Line3D()
sympy.core.tests.test_args.test_sympy__geometry__line__LinearEntity()
sympy.core.tests.test_args.test_sympy__geometry__line__LinearEntity2D()
sympy.core.tests.test_args.test_sympy__geometry__line__LinearEntity3D()
sympy.core.tests.test_args.test_sympy__geometry__line__Ray()
sympy.core.tests.test_args.test_sympy__geometry__line__Ray2D()
sympy.core.tests.test_args.test_sympy__geometry__line__Ray3D()
sympy.core.tests.test_args.test_sympy__geometry__line__Segment()
sympy.core.tests.test_args.test_sympy__geometry__line__Segment2D()
sympy.core.tests.test_args.test_sympy__geometry__line__Segment3D()
sympy.core.tests.test_args.test_sympy__geometry__parabola__Parabola()
sympy.core.tests.test_args.test_sympy__geometry__plane__Plane()
sympy.core.tests.test_args.test_sympy__geometry__point__Point()
sympy.core.tests.test_args.test_sympy__geometry__point__Point2D()
sympy.core.tests.test_args.test_sympy__geometry__point__Point3D()
sympy.core.tests.test_args.test_sympy__geometry__polygon__Polygon()
sympy.core.tests.test_args.test_sympy__geometry__polygon__RegularPolygon()
sympy.core.tests.test_args.test_sympy__geometry__polygon__Triangle()
sympy.core.tests.test_args.test_sympy__integrals__integrals__Integral()
sympy.core.tests.test_args.test_sympy__integrals__laplace__InverseLaplaceTransform()
sympy.core.tests.test_args.test_sympy__integrals__laplace__LaplaceTransform()
sympy.core.tests.test_args.test_sympy__integrals__risch__NonElementaryIntegral()
sympy.core.tests.test_args.test_sympy__integrals__transforms__CosineTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__FourierTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__FourierTypeTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__HankelTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__HankelTypeTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__IntegralTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseCosineTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseFourierTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseHankelTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseMellinTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseSineTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__MellinTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__SineCosineTypeTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__SineTransform()
sympy.core.tests.test_args.test_sympy__liealgebras__cartan_type__Standard_Cartan()
sympy.core.tests.test_args.test_sympy__liealgebras__root_system__RootSystem()
sympy.core.tests.test_args.test_sympy__liealgebras__type_a__TypeA()
sympy.core.tests.test_args.test_sympy__liealgebras__type_b__TypeB()
sympy.core.tests.test_args.test_sympy__liealgebras__type_c__TypeC()
sympy.core.tests.test_args.test_sympy__liealgebras__type_d__TypeD()
sympy.core.tests.test_args.test_sympy__liealgebras__type_e__TypeE()
sympy.core.tests.test_args.test_sympy__liealgebras__type_f__TypeF()
sympy.core.tests.test_args.test_sympy__liealgebras__type_g__TypeG()
sympy.core.tests.test_args.test_sympy__liealgebras__weyl_group__WeylGroup()
sympy.core.tests.test_args.test_sympy__logic__boolalg__And()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Boolean()
sympy.core.tests.test_args.test_sympy__logic__boolalg__BooleanAtom()
sympy.core.tests.test_args.test_sympy__logic__boolalg__BooleanFalse()
sympy.core.tests.test_args.test_sympy__logic__boolalg__BooleanFunction()
sympy.core.tests.test_args.test_sympy__logic__boolalg__BooleanTrue()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Equivalent()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Exclusive()
sympy.core.tests.test_args.test_sympy__logic__boolalg__ITE()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Implies()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Nand()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Nor()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Not()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Or()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Xnor()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Xor()
sympy.core.tests.test_args.test_sympy__matrices__expressions__adjoint__Adjoint()
sympy.core.tests.test_args.test_sympy__matrices__expressions__applyfunc__ElementwiseApplyFunction()
sympy.core.tests.test_args.test_sympy__matrices__expressions__blockmatrix__BlockDiagMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__blockmatrix__BlockMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__companion__CompanionMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__determinant__Determinant()
sympy.core.tests.test_args.test_sympy__matrices__expressions__determinant__Permanent()
sympy.core.tests.test_args.test_sympy__matrices__expressions__diagonal__DiagMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__diagonal__DiagonalMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__diagonal__DiagonalOf()
sympy.core.tests.test_args.test_sympy__matrices__expressions__dotproduct__DotProduct()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__EigenValues()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__EigenVectors()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__Factorization()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__LofCholesky()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__LofLU()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__QofQR()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__RofQR()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__SofSVD()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__UofCholesky()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__UofLU()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__UofSVD()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__VofSVD()
sympy.core.tests.test_args.test_sympy__matrices__expressions__fourier__DFT()
sympy.core.tests.test_args.test_sympy__matrices__expressions__fourier__IDFT()
sympy.core.tests.test_args.test_sympy__matrices__expressions__funcmatrix__FunctionMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__hadamard__HadamardPower()
sympy.core.tests.test_args.test_sympy__matrices__expressions__hadamard__HadamardProduct()
sympy.core.tests.test_args.test_sympy__matrices__expressions__inverse__Inverse()
sympy.core.tests.test_args.test_sympy__matrices__expressions__kronecker__KroneckerProduct()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matadd__MatAdd()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixBase()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixElement()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixExpr()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixSymbol()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matmul__MatMul()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matpow__MatPow()
sympy.core.tests.test_args.test_sympy__matrices__expressions__permutation__MatrixPermute()
sympy.core.tests.test_args.test_sympy__matrices__expressions__permutation__PermutationMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__sets__MatrixSet()
sympy.core.tests.test_args.test_sympy__matrices__expressions__slice__MatrixSlice()
sympy.core.tests.test_args.test_sympy__matrices__expressions__special__GenericIdentity()
sympy.core.tests.test_args.test_sympy__matrices__expressions__special__GenericZeroMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__special__Identity()
sympy.core.tests.test_args.test_sympy__matrices__expressions__special__OneMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__special__ZeroMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__trace__Trace()
sympy.core.tests.test_args.test_sympy__matrices__expressions__transpose__Transpose()
sympy.core.tests.test_args.test_sympy__matrices__immutable__ImmutableDenseMatrix()
sympy.core.tests.test_args.test_sympy__matrices__immutable__ImmutableRepMatrix()
sympy.core.tests.test_args.test_sympy__matrices__immutable__ImmutableSparseMatrix()
sympy.core.tests.test_args.test_sympy__matrices__matrices__DeferredVector()
sympy.core.tests.test_args.test_sympy__ntheory__factor___divisor_sigma()
sympy.core.tests.test_args.test_sympy__ntheory__factor___primenu()
sympy.core.tests.test_args.test_sympy__ntheory__factor___primeomega()
sympy.core.tests.test_args.test_sympy__ntheory__factor___reduced_totient()
sympy.core.tests.test_args.test_sympy__ntheory__factor___totient()
sympy.core.tests.test_args.test_sympy__ntheory__factor___udivisor_sigma()
sympy.core.tests.test_args.test_sympy__ntheory__generate__primepi()
sympy.core.tests.test_args.test_sympy__ntheory__residue_ntheory__mobius()
sympy.core.tests.test_args.test_sympy__physics__control__lti__Feedback()
sympy.core.tests.test_args.test_sympy__physics__control__lti__LinearTimeInvariant()
sympy.core.tests.test_args.test_sympy__physics__control__lti__MIMOFeedback()
sympy.core.tests.test_args.test_sympy__physics__control__lti__MIMOLinearTimeInvariant()
sympy.core.tests.test_args.test_sympy__physics__control__lti__MIMOParallel()
sympy.core.tests.test_args.test_sympy__physics__control__lti__MIMOSeries()
sympy.core.tests.test_args.test_sympy__physics__control__lti__Parallel()
sympy.core.tests.test_args.test_sympy__physics__control__lti__SISOLinearTimeInvariant()
sympy.core.tests.test_args.test_sympy__physics__control__lti__Series()
sympy.core.tests.test_args.test_sympy__physics__control__lti__TransferFunction()
sympy.core.tests.test_args.test_sympy__physics__control__lti__TransferFunctionMatrix()
sympy.core.tests.test_args.test_sympy__physics__optics__gaussopt__BeamParameter()
sympy.core.tests.test_args.test_sympy__physics__optics__medium__Medium()
sympy.core.tests.test_args.test_sympy__physics__optics__medium__MediumN()
sympy.core.tests.test_args.test_sympy__physics__optics__medium__MediumPP()
sympy.core.tests.test_args.test_sympy__physics__optics__waves__TWave()
sympy.core.tests.test_args.test_sympy__physics__paulialgebra__Pauli()
sympy.core.tests.test_args.test_sympy__physics__quantum__anticommutator__AntiCommutator()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonCoherentBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonCoherentKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonFockBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonFockKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PositionBra3D()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PositionKet3D()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PositionState3D()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PxBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PxKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PxOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__XBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__XKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__XOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__YOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__ZOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cg__CG()
sympy.core.tests.test_args.test_sympy__physics__quantum__cg__Wigner3j()
sympy.core.tests.test_args.test_sympy__physics__quantum__cg__Wigner6j()
sympy.core.tests.test_args.test_sympy__physics__quantum__cg__Wigner9j()
sympy.core.tests.test_args.test_sympy__physics__quantum__circuitplot__Mx()
sympy.core.tests.test_args.test_sympy__physics__quantum__circuitplot__Mz()
sympy.core.tests.test_args.test_sympy__physics__quantum__commutator__Commutator()
sympy.core.tests.test_args.test_sympy__physics__quantum__constants__HBar()
sympy.core.tests.test_args.test_sympy__physics__quantum__dagger__Dagger()
sympy.core.tests.test_args.test_sympy__physics__quantum__density__Density()
sympy.core.tests.test_args.test_sympy__physics__quantum__fermion__FermionFockBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__fermion__FermionFockKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__fermion__FermionOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__CGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__CGateS()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__CNotGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__Gate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__HadamardGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__IdentityGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__OneQubitGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__PhaseGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__SwapGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__TGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__TwoQubitGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__UGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__XGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__YGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__ZGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__grover__OracleGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__grover__OracleGateFunction()
sympy.core.tests.test_args.test_sympy__physics__quantum__grover__WGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__ComplexSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__DirectSumHilbertSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__FockSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__HilbertSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__L2()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__TensorPowerHilbertSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__TensorProductHilbertSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__identitysearch__GateIdentity()
sympy.core.tests.test_args.test_sympy__physics__quantum__innerproduct__InnerProduct()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__DifferentialOperator()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__HermitianOperator()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__IdentityOperator()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__Operator()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__OuterProduct()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__UnitaryOperator()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaMinus()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaOpBase()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaPlus()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaX()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaY()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZ()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__piab__PIABBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__piab__PIABHamiltonian()
sympy.core.tests.test_args.test_sympy__physics__quantum__piab__PIABKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__qexpr__QExpr()
sympy.core.tests.test_args.test_sympy__physics__quantum__qft__Fourier()
sympy.core.tests.test_args.test_sympy__physics__quantum__qft__IQFT()
sympy.core.tests.test_args.test_sympy__physics__quantum__qft__QFT()
sympy.core.tests.test_args.test_sympy__physics__quantum__qft__RkGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__IntQubit()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__IntQubitBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__IntQubitState()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__Qubit()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__QubitBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__QubitState()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__Hamiltonian()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__LoweringOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__NumberOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__RaisingOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__SHOBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__SHOKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__SHOOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__SHOState()
sympy.core.tests.test_args.test_sympy__physics__quantum__shor__CMod()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__CoupledSpinState()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__J2Op()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JminusOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JplusOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxBraCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxKetCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyBraCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyKetCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzBraCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzKetCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__Rotation()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__SpinState()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__WignerD()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__Bra()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__BraBase()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__Ket()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__KetBase()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__OrthogonalBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__OrthogonalKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__OrthogonalState()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__State()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__StateBase()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__TimeDepBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__TimeDepKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__TimeDepState()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__Wavefunction()
sympy.core.tests.test_args.test_sympy__physics__quantum__tensorproduct__TensorProduct()
sympy.core.tests.test_args.test_sympy__physics__quantum__trace__Tr()
sympy.core.tests.test_args.test_sympy__physics__secondquant__AnnihilateBoson()
sympy.core.tests.test_args.test_sympy__physics__secondquant__AnnihilateFermion()
sympy.core.tests.test_args.test_sympy__physics__secondquant__Annihilator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__AntiSymmetricTensor()
sympy.core.tests.test_args.test_sympy__physics__secondquant__BosonState()
sympy.core.tests.test_args.test_sympy__physics__secondquant__BosonicOperator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__Commutator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__CreateBoson()
sympy.core.tests.test_args.test_sympy__physics__secondquant__CreateFermion()
sympy.core.tests.test_args.test_sympy__physics__secondquant__Creator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__Dagger()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FermionState()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FermionicOperator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockState()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateBosonBra()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateBosonKet()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateBra()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateFermionBra()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateFermionKet()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateKet()
sympy.core.tests.test_args.test_sympy__physics__secondquant__InnerProduct()
sympy.core.tests.test_args.test_sympy__physics__secondquant__NO()
sympy.core.tests.test_args.test_sympy__physics__secondquant__PermutationOperator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__SqOperator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__TensorSymbol()
sympy.core.tests.test_args.test_sympy__physics__units__dimensions__Dimension()
sympy.core.tests.test_args.test_sympy__physics__units__dimensions__DimensionSystem()
sympy.core.tests.test_args.test_sympy__physics__units__prefixes__Prefix()
sympy.core.tests.test_args.test_sympy__physics__units__quantities__PhysicalConstant()
sympy.core.tests.test_args.test_sympy__physics__units__quantities__Quantity()
sympy.core.tests.test_args.test_sympy__physics__vector__frame__CoordinateSym()
sympy.core.tests.test_args.test_sympy__physics__wigner__Wigner3j()
sympy.core.tests.test_args.test_sympy__polys__polytools__GroebnerBasis()
sympy.core.tests.test_args.test_sympy__polys__polytools__Poly()
sympy.core.tests.test_args.test_sympy__polys__polytools__PurePoly()
sympy.core.tests.test_args.test_sympy__polys__rootoftools__ComplexRootOf()
sympy.core.tests.test_args.test_sympy__polys__rootoftools__RootOf()
sympy.core.tests.test_args.test_sympy__polys__rootoftools__RootSum()
sympy.core.tests.test_args.test_sympy__sandbox__indexed_integrals__IndexedIntegral()
sympy.core.tests.test_args.test_sympy__series__formal__Coeff()
sympy.core.tests.test_args.test_sympy__series__formal__FiniteFormalPowerSeries()
sympy.core.tests.test_args.test_sympy__series__formal__FormalPowerSeries()
sympy.core.tests.test_args.test_sympy__series__formal__FormalPowerSeriesCompose()
sympy.core.tests.test_args.test_sympy__series__formal__FormalPowerSeriesInverse()
sympy.core.tests.test_args.test_sympy__series__formal__FormalPowerSeriesProduct()
sympy.core.tests.test_args.test_sympy__series__fourier__FiniteFourierSeries()
sympy.core.tests.test_args.test_sympy__series__fourier__FourierSeries()
sympy.core.tests.test_args.test_sympy__series__limits__Limit()
sympy.core.tests.test_args.test_sympy__series__order__Order()
sympy.core.tests.test_args.test_sympy__series__sequences__EmptySequence()
sympy.core.tests.test_args.test_sympy__series__sequences__RecursiveSeq()
sympy.core.tests.test_args.test_sympy__series__sequences__SeqAdd()
sympy.core.tests.test_args.test_sympy__series__sequences__SeqBase()
sympy.core.tests.test_args.test_sympy__series__sequences__SeqExpr()
sympy.core.tests.test_args.test_sympy__series__sequences__SeqExprOp()
sympy.core.tests.test_args.test_sympy__series__sequences__SeqFormula()
sympy.core.tests.test_args.test_sympy__series__sequences__SeqMul()
sympy.core.tests.test_args.test_sympy__series__sequences__SeqPer()
sympy.core.tests.test_args.test_sympy__series__series_class__SeriesBase()
sympy.core.tests.test_args.test_sympy__sets__conditionset__ConditionSet()
sympy.core.tests.test_args.test_sympy__sets__contains__Contains()
sympy.core.tests.test_args.test_sympy__sets__fancysets__CartesianComplexRegion()
sympy.core.tests.test_args.test_sympy__sets__fancysets__ComplexRegion()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Complexes()
sympy.core.tests.test_args.test_sympy__sets__fancysets__ImageSet()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Integers()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Naturals()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Naturals0()
sympy.core.tests.test_args.test_sympy__sets__fancysets__PolarComplexRegion()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Range()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Rationals()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Reals()
sympy.core.tests.test_args.test_sympy__sets__ordinals__OmegaPower()
sympy.core.tests.test_args.test_sympy__sets__ordinals__Ordinal()
sympy.core.tests.test_args.test_sympy__sets__ordinals__OrdinalOmega()
sympy.core.tests.test_args.test_sympy__sets__ordinals__OrdinalZero()
sympy.core.tests.test_args.test_sympy__sets__powerset__PowerSet()
sympy.core.tests.test_args.test_sympy__sets__setexpr__SetExpr()
sympy.core.tests.test_args.test_sympy__sets__sets__Complement()
sympy.core.tests.test_args.test_sympy__sets__sets__DisjointUnion()
sympy.core.tests.test_args.test_sympy__sets__sets__EmptySet()
sympy.core.tests.test_args.test_sympy__sets__sets__FiniteSet()
sympy.core.tests.test_args.test_sympy__sets__sets__Intersection()
sympy.core.tests.test_args.test_sympy__sets__sets__Interval()
sympy.core.tests.test_args.test_sympy__sets__sets__ProductSet()
sympy.core.tests.test_args.test_sympy__sets__sets__Set()
sympy.core.tests.test_args.test_sympy__sets__sets__SymmetricDifference()
sympy.core.tests.test_args.test_sympy__sets__sets__Union()
sympy.core.tests.test_args.test_sympy__sets__sets__UniversalSet()
sympy.core.tests.test_args.test_sympy__simplify__hyperexpand__G_Function()
sympy.core.tests.test_args.test_sympy__simplify__hyperexpand__Hyper_Function()
sympy.core.tests.test_args.test_sympy__stats__compound_rv__CompoundDistribution()
sympy.core.tests.test_args.test_sympy__stats__compound_rv__CompoundPSpace()
sympy.core.tests.test_args.test_sympy__stats__crv__ConditionalContinuousDomain()
sympy.core.tests.test_args.test_sympy__stats__crv__ContinuousDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv__ContinuousDomain()
sympy.core.tests.test_args.test_sympy__stats__crv__ContinuousPSpace()
sympy.core.tests.test_args.test_sympy__stats__crv__ProductContinuousDomain()
sympy.core.tests.test_args.test_sympy__stats__crv__SingleContinuousDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv__SingleContinuousDomain()
sympy.core.tests.test_args.test_sympy__stats__crv__SingleContinuousPSpace()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ArcsinDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__BeniniDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__BetaDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__BetaNoncentralDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__BetaPrimeDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__BoundedParetoDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__CauchyDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ChiDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ChiNoncentralDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ChiSquaredDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ContinuousDistributionHandmade()
sympy.core.tests.test_args.test_sympy__stats__crv_types__DagumDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ExGaussianDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ExponentialDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ExponentialPowerDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__FDistributionDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__FisherZDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__FrechetDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__GammaDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__GammaInverseDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__GaussianInverseDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__GompertzDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__GumbelDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__KumaraswamyDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LaplaceDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LevyDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LogCauchyDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LogLogisticDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LogNormalDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LogisticDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LogitNormalDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LomaxDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__MaxwellDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__MoyalDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__NakagamiDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__NormalDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ParetoDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__PowerFunctionDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__QuadraticUDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__RaisedCosineDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__RayleighDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ReciprocalDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ShiftedGompertzDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__StudentTDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__TrapezoidalDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__TriangularDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__UniformDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__UniformSumDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__VonMisesDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__WeibullDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__WignerSemicircleDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv__ConditionalDiscreteDomain()
sympy.core.tests.test_args.test_sympy__stats__drv__DiscreteDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv__DiscreteDomain()
sympy.core.tests.test_args.test_sympy__stats__drv__DiscretePSpace()
sympy.core.tests.test_args.test_sympy__stats__drv__ProductDiscreteDomain()
sympy.core.tests.test_args.test_sympy__stats__drv__SingleDiscreteDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv__SingleDiscreteDomain()
sympy.core.tests.test_args.test_sympy__stats__drv__SingleDiscretePSpace()
sympy.core.tests.test_args.test_sympy__stats__drv_types__DiscreteDistributionHandmade()
sympy.core.tests.test_args.test_sympy__stats__drv_types__FlorySchulzDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__GeometricDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__HermiteDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__LogarithmicDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__NegativeBinomialDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__PoissonDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__SkellamDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__YuleSimonDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__ZetaDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv__ConditionalFiniteDomain()
sympy.core.tests.test_args.test_sympy__stats__frv__FiniteDomain()
sympy.core.tests.test_args.test_sympy__stats__frv__FinitePSpace()
sympy.core.tests.test_args.test_sympy__stats__frv__ProductFiniteDomain()
sympy.core.tests.test_args.test_sympy__stats__frv__ProductFinitePSpace()
sympy.core.tests.test_args.test_sympy__stats__frv__SingleFiniteDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv__SingleFiniteDomain()
sympy.core.tests.test_args.test_sympy__stats__frv__SingleFinitePSpace()
sympy.core.tests.test_args.test_sympy__stats__frv_types__BernoulliDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__BetaBinomialDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__BinomialDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__DieDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__DiscreteUniformDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__FiniteDistributionHandmade()
sympy.core.tests.test_args.test_sympy__stats__frv_types__HypergeometricDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__IdealSolitonDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__RademacherDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__RobustSolitonDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv__JointDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv__JointPSpace()
sympy.core.tests.test_args.test_sympy__stats__joint_rv__JointRandomSymbol()
sympy.core.tests.test_args.test_sympy__stats__joint_rv__MarginalDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__GeneralizedMultivariateLogGammaDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__JointDistributionHandmade()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__MultinomialDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__MultivariateBetaDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__MultivariateEwensDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__MultivariateLaplaceDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__MultivariateNormalDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__MultivariateTDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__NegativeMultinomialDistribution()
sympy.core.tests.test_args.test_sympy__stats__joint_rv_types__NormalGammaDistribution()
sympy.core.tests.test_args.test_sympy__stats__matrix_distributions__MatrixDistribution()
sympy.core.tests.test_args.test_sympy__stats__matrix_distributions__MatrixGammaDistribution()
sympy.core.tests.test_args.test_sympy__stats__matrix_distributions__MatrixNormalDistribution()
sympy.core.tests.test_args.test_sympy__stats__matrix_distributions__MatrixPSpace()
sympy.core.tests.test_args.test_sympy__stats__matrix_distributions__MatrixStudentTDistribution()
sympy.core.tests.test_args.test_sympy__stats__matrix_distributions__WishartDistribution()
sympy.core.tests.test_args.test_sympy__stats__random_matrix__RandomMatrixPSpace()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__CircularEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__CircularOrthogonalEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__CircularSymplecticEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__CircularUnitaryEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__GaussianEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__GaussianOrthogonalEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__GaussianSymplecticEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__GaussianUnitaryEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__random_matrix_models__RandomMatrixEnsembleModel()
sympy.core.tests.test_args.test_sympy__stats__rv__ConditionalDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__Density()
sympy.core.tests.test_args.test_sympy__stats__rv__Distribution()
sympy.core.tests.test_args.test_sympy__stats__rv__IndependentProductPSpace()
sympy.core.tests.test_args.test_sympy__stats__rv__MatrixDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__PSpace()
sympy.core.tests.test_args.test_sympy__stats__rv__ProductDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__ProductPSpace()
sympy.core.tests.test_args.test_sympy__stats__rv__RandomDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__RandomIndexedSymbol()
sympy.core.tests.test_args.test_sympy__stats__rv__RandomMatrixSymbol()
sympy.core.tests.test_args.test_sympy__stats__rv__RandomSymbol()
sympy.core.tests.test_args.test_sympy__stats__rv__SingleDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__SinglePSpace()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process__StochasticPSpace()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__BernoulliProcess()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__ContinuousMarkovChain()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__ContinuousTimeStochasticProcess()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__CountingProcess()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__DiscreteMarkovChain()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__DiscreteTimeStochasticProcess()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__GammaProcess()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__GeneratorMatrixOf()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__MarkovProcess()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__PoissonProcess()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__StochasticProcess()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__StochasticStateSpaceOf()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__TransitionMatrixOf()
sympy.core.tests.test_args.test_sympy__stats__stochastic_process_types__WienerProcess()
sympy.core.tests.test_args.test_sympy__stats__symbolic_multivariate_probability__CrossCovarianceMatrix()
sympy.core.tests.test_args.test_sympy__stats__symbolic_multivariate_probability__ExpectationMatrix()
sympy.core.tests.test_args.test_sympy__stats__symbolic_multivariate_probability__VarianceMatrix()
sympy.core.tests.test_args.test_sympy__stats__symbolic_probability__CentralMoment()
sympy.core.tests.test_args.test_sympy__stats__symbolic_probability__Covariance()
sympy.core.tests.test_args.test_sympy__stats__symbolic_probability__Expectation()
sympy.core.tests.test_args.test_sympy__stats__symbolic_probability__Moment()
sympy.core.tests.test_args.test_sympy__stats__symbolic_probability__Probability()
sympy.core.tests.test_args.test_sympy__stats__symbolic_probability__Variance()
sympy.core.tests.test_args.test_sympy__tensor__array__array_comprehension__ArrayComprehension()
sympy.core.tests.test_args.test_sympy__tensor__array__array_comprehension__ArrayComprehensionMap()
sympy.core.tests.test_args.test_sympy__tensor__array__array_derivatives__ArrayDerivative()
sympy.core.tests.test_args.test_sympy__tensor__array__dense_ndim_array__ImmutableDenseNDimArray()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__ArrayAdd()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__ArrayContraction()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__ArrayDiagonal()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__ArrayElement()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__ArrayElementwiseApplyFunc()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__ArraySymbol()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__ArrayTensorProduct()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__OneArray()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__PermuteDims()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__Reshape()
sympy.core.tests.test_args.test_sympy__tensor__array__expressions__array_expressions__ZeroArray()
sympy.core.tests.test_args.test_sympy__tensor__array__ndim_array__ImmutableNDimArray()
sympy.core.tests.test_args.test_sympy__tensor__array__sparse_ndim_array__ImmutableSparseNDimArray()
sympy.core.tests.test_args.test_sympy__tensor__functions__TensorProduct()
sympy.core.tests.test_args.test_sympy__tensor__indexed__Idx()
sympy.core.tests.test_args.test_sympy__tensor__indexed__Indexed()
sympy.core.tests.test_args.test_sympy__tensor__indexed__IndexedBase()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensAdd()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensExpr()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensMul()
sympy.core.tests.test_args.test_sympy__tensor__tensor__Tensor()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorElement()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorHead()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorIndex()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorIndexType()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorSymmetry()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorType()
sympy.core.tests.test_args.test_sympy__tensor__tensor__WildTensor()
sympy.core.tests.test_args.test_sympy__tensor__tensor__WildTensorHead()
sympy.core.tests.test_args.test_sympy__tensor__tensor__WildTensorIndex()
sympy.core.tests.test_args.test_sympy__tensor__toperators__PartialDerivative()
sympy.core.tests.test_args.test_sympy__utilities__matchpy_connector__WildDot()
sympy.core.tests.test_args.test_sympy__utilities__matchpy_connector__WildPlus()
sympy.core.tests.test_args.test_sympy__utilities__matchpy_connector__WildStar()
sympy.core.tests.test_args.test_sympy__vector__basisdependent__BasisDependent()
sympy.core.tests.test_args.test_sympy__vector__basisdependent__BasisDependentAdd()
sympy.core.tests.test_args.test_sympy__vector__basisdependent__BasisDependentMul()
sympy.core.tests.test_args.test_sympy__vector__basisdependent__BasisDependentZero()
sympy.core.tests.test_args.test_sympy__vector__coordsysrect__CoordSys3D()
sympy.core.tests.test_args.test_sympy__vector__deloperator__Del()
sympy.core.tests.test_args.test_sympy__vector__dyadic__BaseDyadic()
sympy.core.tests.test_args.test_sympy__vector__dyadic__Dyadic()
sympy.core.tests.test_args.test_sympy__vector__dyadic__DyadicAdd()
sympy.core.tests.test_args.test_sympy__vector__dyadic__DyadicMul()
sympy.core.tests.test_args.test_sympy__vector__dyadic__DyadicZero()
sympy.core.tests.test_args.test_sympy__vector__implicitregion__ImplicitRegion()
sympy.core.tests.test_args.test_sympy__vector__integrals__ParametricIntegral()
sympy.core.tests.test_args.test_sympy__vector__operators__Curl()
sympy.core.tests.test_args.test_sympy__vector__operators__Divergence()
sympy.core.tests.test_args.test_sympy__vector__operators__Gradient()
sympy.core.tests.test_args.test_sympy__vector__operators__Laplacian()
sympy.core.tests.test_args.test_sympy__vector__orienters__AxisOrienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__BodyOrienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__Orienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__QuaternionOrienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__SpaceOrienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__ThreeAngleOrienter()
sympy.core.tests.test_args.test_sympy__vector__parametricregion__ParametricRegion()
sympy.core.tests.test_args.test_sympy__vector__point__Point()
sympy.core.tests.test_args.test_sympy__vector__scalar__BaseScalar()
sympy.core.tests.test_args.test_sympy__vector__vector__BaseVector()
sympy.core.tests.test_args.test_sympy__vector__vector__Cross()
sympy.core.tests.test_args.test_sympy__vector__vector__Dot()
sympy.core.tests.test_args.test_sympy__vector__vector__Vector()
sympy.core.tests.test_args.test_sympy__vector__vector__VectorAdd()
sympy.core.tests.test_args.test_sympy__vector__vector__VectorMul()
sympy.core.tests.test_args.test_sympy__vector__vector__VectorZero()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_facts.py----------------------------------------
A:sympy.core.tests.test_facts.I->deduce_alpha_implications(i)
A:sympy.core.tests.test_facts.P->rules_2prereq({(k, True): {(v, True) for v in S} for (k, S) in I.items()})
A:sympy.core.tests.test_facts.(I, P)->D([('rat', 'real'), ('int', 'rat')])
A:sympy.core.tests.test_facts.f->FactRules(['real  == neg | zero | pos', 'neg   -> real & !zero & !pos', 'pos   -> real & !zero & !neg', 'nneg  == real & !neg', 'npos  == real & !pos'])
A:sympy.core.tests.test_facts.kb->FactKB(f)
A:sympy.core.tests.test_facts.base->FactKB(f)
sympy.core.tests.test_facts.test_FactRules_deduce()
sympy.core.tests.test_facts.test_FactRules_deduce2()
sympy.core.tests.test_facts.test_FactRules_deduce_base()
sympy.core.tests.test_facts.test_FactRules_deduce_multiple()
sympy.core.tests.test_facts.test_FactRules_deduce_multiple2()
sympy.core.tests.test_facts.test_FactRules_deduce_staticext()
sympy.core.tests.test_facts.test_FactRules_parse()
sympy.core.tests.test_facts.test_FactRules_parse2()
sympy.core.tests.test_facts.test_apply_beta_to_alpha_route()
sympy.core.tests.test_facts.test_deduce_alpha_implications()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_evalf.py----------------------------------------
A:sympy.core.tests.test_evalf.A->FiniteSet(a, b)
A:sympy.core.tests.test_evalf.B->FiniteSet(a - b, 1)
A:sympy.core.tests.test_evalf.C->Rational('69301/100000')
A:sympy.core.tests.test_evalf.D->Rational('83542/100000')
A:sympy.core.tests.test_evalf.F->Rational('2231321613/2500000000')
A:sympy.core.tests.test_evalf.a->Symbol('a')
A:sympy.core.tests.test_evalf.b->Symbol('b')
A:sympy.core.tests.test_evalf.t->Symbol('a').evalf(maxn=100)
A:sympy.core.tests.test_evalf.s->str(pi.evalf(128))
A:sympy.core.tests.test_evalf.f->implemented_function(Function('sin'), lambda x: x + 1)
A:sympy.core.tests.test_evalf.v->S('-(357587765856 + 18873261792*249**(1/2) + 56619785376*I*83**(1/2) +\n    108755765856*I*3**(1/2) + 41281887168*6**(1/3)*(1422 +\n    54*249**(1/2))**(1/3) - 1239810624*6**(1/3)*249**(1/2)*(1422 +\n    54*249**(1/2))**(1/3) - 3110400000*I*6**(1/3)*83**(1/2)*(1422 +\n    54*249**(1/2))**(1/3) + 13478400000*I*3**(1/2)*6**(1/3)*(1422 +\n    54*249**(1/2))**(1/3) + 1274950152*6**(2/3)*(1422 +\n    54*249**(1/2))**(2/3) + 32347944*6**(2/3)*249**(1/2)*(1422 +\n    54*249**(1/2))**(2/3) - 1758790152*I*3**(1/2)*6**(2/3)*(1422 +\n    54*249**(1/2))**(2/3) - 304403832*I*6**(2/3)*83**(1/2)*(1422 +\n    4*249**(1/2))**(2/3))/(175732658352 + (1106028 + 25596*249**(1/2) +\n    76788*I*83**(1/2))**2)')
A:sympy.core.tests.test_evalf.eps->Rational(1, 1000000)
A:sympy.core.tests.test_evalf.p->Symbol('x', even=True, positive=True)
A:sympy.core.tests.test_evalf.d1->Dummy('d')
A:sympy.core.tests.test_evalf.d2->Dummy('d')
A:sympy.core.tests.test_evalf.e2->Sum(z, (x, 1, 2)).evalf(subs=subst)
A:sympy.core.tests.test_evalf.e->Sum(z, (x, 1, 2))
A:sympy.core.tests.test_evalf.expr0->Sum(x ** 2 + x, (x, 1, 2))
A:sympy.core.tests.test_evalf.expr1->Sum(0, (x, 1, 2))
A:sympy.core.tests.test_evalf.sol->Complement(Intersection(FiniteSet(-b / 2 - sqrt(b ** 2 - 4 * pi) / 2), Reals), FiniteSet(0))
A:sympy.core.tests.test_evalf.(a, b, _, _)->evalf(x0, 53, {})
A:sympy.core.tests.test_evalf.(c, d, _, _)->_evalf_with_bounded_error(x0, eps, m)
A:sympy.core.tests.test_evalf.z->AlgebraicNumber(CRootOf(cyclotomic_poly(5), -1), [-1, -1, 0, 0], alias=zeta).evalf()
A:sympy.core.tests.test_evalf.w->make_mpc((c or fzero, d or fzero))
A:sympy.core.tests.test_evalf.x->AlgebraicNumber(a)
A:sympy.core.tests.test_evalf.zeta->Symbol('zeta')
A:sympy.core.tests.test_evalf.a5->AlgebraicNumber(CRootOf(cyclotomic_poly(5), -1), [-1, -1, 0, 0], alias=zeta)
A:sympy.core.tests.test_evalf.expr->Mul(*(x - i for i in range(2, 1000)))
sympy.core.tests.test_evalf.NS(e,n=15,**options)
sympy.core.tests.test_evalf.test_AssocOp_Function()
sympy.core.tests.test_evalf.test_bugs()
sympy.core.tests.test_evalf.test_cancellation()
sympy.core.tests.test_evalf.test_chop_value()
sympy.core.tests.test_evalf.test_evalf_arguments()
sympy.core.tests.test_evalf.test_evalf_basic()
sympy.core.tests.test_evalf.test_evalf_bugs()
sympy.core.tests.test_evalf.test_evalf_complex()
sympy.core.tests.test_evalf.test_evalf_complex_bug()
sympy.core.tests.test_evalf.test_evalf_complex_cancellation()
sympy.core.tests.test_evalf.test_evalf_complex_powers()
sympy.core.tests.test_evalf.test_evalf_complex_powers_bug()
sympy.core.tests.test_evalf.test_evalf_divergent_series()
sympy.core.tests.test_evalf.test_evalf_exponentiation()
sympy.core.tests.test_evalf.test_evalf_helpers()
sympy.core.tests.test_evalf.test_evalf_integer_parts()
sympy.core.tests.test_evalf.test_evalf_integral()
sympy.core.tests.test_evalf.test_evalf_logs()
sympy.core.tests.test_evalf.test_evalf_mul()
sympy.core.tests.test_evalf.test_evalf_near_integers()
sympy.core.tests.test_evalf.test_evalf_power_subs_bugs()
sympy.core.tests.test_evalf.test_evalf_powers()
sympy.core.tests.test_evalf.test_evalf_product()
sympy.core.tests.test_evalf.test_evalf_py_methods()
sympy.core.tests.test_evalf.test_evalf_ramanujan()
sympy.core.tests.test_evalf.test_evalf_real_alg_num()
sympy.core.tests.test_evalf.test_evalf_relational()
sympy.core.tests.test_evalf.test_evalf_rump()
sympy.core.tests.test_evalf.test_evalf_sum()
sympy.core.tests.test_evalf.test_evalf_trig()
sympy.core.tests.test_evalf.test_evalf_trig_zero_detection()
sympy.core.tests.test_evalf.test_evalf_with_bounded_error()
sympy.core.tests.test_evalf.test_evalf_with_zoo()
sympy.core.tests.test_evalf.test_evaluate_false()
sympy.core.tests.test_evalf.test_implemented_function_evalf()
sympy.core.tests.test_evalf.test_infinities()
sympy.core.tests.test_evalf.test_issue_10323()
sympy.core.tests.test_evalf.test_issue_10395()
sympy.core.tests.test_evalf.test_issue_11151()
sympy.core.tests.test_evalf.test_issue_13098()
sympy.core.tests.test_evalf.test_issue_13425()
sympy.core.tests.test_evalf.test_issue_14601()
sympy.core.tests.test_evalf.test_issue_17421()
sympy.core.tests.test_evalf.test_issue_17681()
sympy.core.tests.test_evalf.test_issue_20291()
sympy.core.tests.test_evalf.test_issue_20733()
sympy.core.tests.test_evalf.test_issue_22849()
sympy.core.tests.test_evalf.test_issue_4806()
sympy.core.tests.test_evalf.test_issue_4945()
sympy.core.tests.test_evalf.test_issue_4956_5204()
sympy.core.tests.test_evalf.test_issue_5486()
sympy.core.tests.test_evalf.test_issue_5486_bug()
sympy.core.tests.test_evalf.test_issue_6632_evalf()
sympy.core.tests.test_evalf.test_issue_8821_highprec_from_str()
sympy.core.tests.test_evalf.test_issue_8853()
sympy.core.tests.test_evalf.test_issue_9326()
sympy.core.tests.test_evalf.test_old_docstring()
sympy.core.tests.test_evalf.test_scaled_zero()
sympy.core.tests.test_evalf.test_subs()
sympy.core.tests.test_evalf.test_to_mpmath()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_constructor_postprocessor.py----------------------------------------
A:sympy.core.tests.test_constructor_postprocessor.args->tuple((i for i in expr.args if not isinstance(i, Symbol) or isinstance(i, SymbolRemovesOtherSymbols)))
A:sympy.core.tests.test_constructor_postprocessor.x->SubclassSymbolInMulOnce('x')
A:sympy.core.tests.test_constructor_postprocessor.y->SubclassSymbolInMulOnce('y')
A:sympy.core.tests.test_constructor_postprocessor.w->SubclassSymbolRemovesOtherSymbols('w')
A:sympy.core.tests.test_constructor_postprocessor.a->symbols('a')
sympy.core.tests.test_constructor_postprocessor.SubclassSymbolInMulOnce(SymbolInMulOnce)
sympy.core.tests.test_constructor_postprocessor.SubclassSymbolRemovesOtherSymbols(SymbolRemovesOtherSymbols)
sympy.core.tests.test_constructor_postprocessor.SymbolInMulOnce(Symbol)
sympy.core.tests.test_constructor_postprocessor.SymbolRemovesOtherSymbols(Symbol)
sympy.core.tests.test_constructor_postprocessor._postprocess_SymbolRemovesOtherSymbols(expr)
sympy.core.tests.test_constructor_postprocessor.test_constructor_postprocessors1()
sympy.core.tests.test_constructor_postprocessor.test_constructor_postprocessors2()
sympy.core.tests.test_constructor_postprocessor.test_subexpression_postprocessors()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_complex.py----------------------------------------
A:sympy.core.tests.test_complex.a->Symbol('a', real=True)
A:sympy.core.tests.test_complex.b->Symbol('b', real=True)
A:sympy.core.tests.test_complex.c->Symbol('c', imaginary=True)
A:sympy.core.tests.test_complex.d->Symbol('d', imaginary=True)
A:sympy.core.tests.test_complex.x->Symbol('x', real=True)
A:sympy.core.tests.test_complex.y->Symbol('y', real=True)
A:sympy.core.tests.test_complex.z->Symbol('z')
A:sympy.core.tests.test_complex.(x, y, z)->symbols('x, y, z')
A:sympy.core.tests.test_complex.(X, Y, Z)->symbols('X, Y, Z', commutative=False)
A:sympy.core.tests.test_complex.r->sqrt(x ** 2 + y ** 2)
A:sympy.core.tests.test_complex.i->Symbol('i', imaginary=True)
A:sympy.core.tests.test_complex.e->S('-2/3 - (-29/54 + sqrt(93)/18)**(1/3) - 1/(9*(-29/54 + sqrt(93)/18)**(1/3))')
A:sympy.core.tests.test_complex.s->abs(x + I * y)
sympy.core.tests.test_complex.test_abs1()
sympy.core.tests.test_complex.test_abs2()
sympy.core.tests.test_complex.test_complex()
sympy.core.tests.test_complex.test_conjugate()
sympy.core.tests.test_complex.test_evalc()
sympy.core.tests.test_complex.test_expand()
sympy.core.tests.test_complex.test_expand_complex()
sympy.core.tests.test_complex.test_expand_inverse()
sympy.core.tests.test_complex.test_issue_11518()
sympy.core.tests.test_complex.test_issue_4124()
sympy.core.tests.test_complex.test_issue_5084()
sympy.core.tests.test_complex.test_issue_5236()
sympy.core.tests.test_complex.test_issue_5429()
sympy.core.tests.test_complex.test_pow_issue_1724()
sympy.core.tests.test_complex.test_pythoncomplex()
sympy.core.tests.test_complex.test_re_im1652()
sympy.core.tests.test_complex.test_real_imag()
sympy.core.tests.test_complex.test_rootcomplex()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_assumptions.py----------------------------------------
A:sympy.core.tests.test_assumptions.x->Symbol('x', positive=True)
A:sympy.core.tests.test_assumptions.z->Symbol('z', zero=True)
A:sympy.core.tests.test_assumptions.r->Symbol('r', real=True)
A:sympy.core.tests.test_assumptions.a->Dummy('a', zero=True)
A:sympy.core.tests.test_assumptions.ix->Symbol('ix', infinite=True, extended_real=True)
A:sympy.core.tests.test_assumptions.fh->Symbol('f', finite=False).xreplace({x: x + h})
A:sympy.core.tests.test_assumptions.y->Symbol('y')
A:sympy.core.tests.test_assumptions.h1->hash(a1)
A:sympy.core.tests.test_assumptions.h2->hash(a2)
A:sympy.core.tests.test_assumptions.x1->Symbol('x', even=True)
A:sympy.core.tests.test_assumptions.x2->Symbol('x', integer=True, odd=False)
A:sympy.core.tests.test_assumptions.ha->hash(a)
A:sympy.core.tests.test_assumptions.b->Symbol('b', finite=None)
A:sympy.core.tests.test_assumptions.hb->hash(b)
A:sympy.core.tests.test_assumptions.n->Dummy('n', integer=True, nonnegative=True)
A:sympy.core.tests.test_assumptions.nn->Dummy(integer=True, nonnegative=True)
A:sympy.core.tests.test_assumptions.np->Symbol('n', extended_nonpositive=True, infinite=True)
A:sympy.core.tests.test_assumptions.p->Dummy(positive=True)
A:sympy.core.tests.test_assumptions.xf->Symbol('xf', finite=True)
A:sympy.core.tests.test_assumptions.na->Symbol('na', algebraic=False)
A:sympy.core.tests.test_assumptions.nb->Symbol('nb', algebraic=False)
A:sympy.core.tests.test_assumptions.an->Symbol('an', algebraic=True, nonzero=True)
A:sympy.core.tests.test_assumptions.e->S('-sqrt(3)*I/2 + 0.866025403784439*I')
A:sympy.core.tests.test_assumptions.azf->Symbol('azf', algebraic=True, zero=False)
A:sympy.core.tests.test_assumptions.ia->Symbol('ia', algebraic=True, irrational=True)
A:sympy.core.tests.test_assumptions.ib->Symbol('ib', algebraic=True, irrational=True)
A:sympy.core.tests.test_assumptions.t->Symbol('t', real=True, transcendental=True)
A:sympy.core.tests.test_assumptions.w->Symbol('w', nonpositive=True)
A:sympy.core.tests.test_assumptions.q->Symbol('q', zero=False, real=True)
A:sympy.core.tests.test_assumptions.j->Symbol('j', zero=False, even=True)
A:sympy.core.tests.test_assumptions.f->Symbol('f', finite=False)
A:sympy.core.tests.test_assumptions.i->Symbol('i', integer=True)
A:sympy.core.tests.test_assumptions.nzf->Dummy(finite=True, zero=False)
A:sympy.core.tests.test_assumptions.i2->Symbol('i2', integer=True)
A:sympy.core.tests.test_assumptions.ni->Symbol('ni', integer=True, nonzero=True)
A:sympy.core.tests.test_assumptions.rn->Symbol('r', rational=True, nonzero=True)
A:sympy.core.tests.test_assumptions.nr->Symbol('nr', irrational=True)
A:sympy.core.tests.test_assumptions.prime->Dummy(prime=True)
A:sympy.core.tests.test_assumptions.even->Dummy(positive=True, even=True)
A:sympy.core.tests.test_assumptions.k->Symbol('k', positive=True, integer=True)
A:sympy.core.tests.test_assumptions.l->Symbol('l', real=True, zero=False)
A:sympy.core.tests.test_assumptions.c->Symbol('c', complex=True)
A:sympy.core.tests.test_assumptions.nf->Symbol('nf', finite=False)
A:sympy.core.tests.test_assumptions.pre_generated_assumptions->_load_pre_generated_assumption_rules()
A:sympy.core.tests.test_assumptions.generated_assumptions->_generate_assumption_rules()
A:sympy.core.tests.test_assumptions.grp->PermutationGroup(Permutation(1, 0, 2), Permutation(2, 1, 3))
A:sympy.core.tests.test_assumptions.first->PermutationGroup(Permutation(1, 0, 2), Permutation(2, 1, 3)).random()
A:sympy.core.tests.test_assumptions.second->PermutationGroup(Permutation(1, 0, 2), Permutation(2, 1, 3)).random()
A:sympy.core.tests.test_assumptions.third->PermutationGroup(Permutation(1, 0, 2), Permutation(2, 1, 3)).random()
sympy.core.tests.test_assumptions.test_Add_is_algebraic()
sympy.core.tests.test_assumptions.test_Add_is_imaginary()
sympy.core.tests.test_assumptions.test_Add_is_infinite()
sympy.core.tests.test_assumptions.test_Add_is_pos_neg()
sympy.core.tests.test_assumptions.test_E()
sympy.core.tests.test_assumptions.test_I()
sympy.core.tests.test_assumptions.test_Mul_is_algebraic()
sympy.core.tests.test_assumptions.test_Mul_is_infinite()
sympy.core.tests.test_assumptions.test_Mul_is_prime_composite()
sympy.core.tests.test_assumptions.test_Pow_is_algebraic()
sympy.core.tests.test_assumptions.test_Pow_is_pos_neg()
sympy.core.tests.test_assumptions.test_Pow_is_prime_composite()
sympy.core.tests.test_assumptions.test_ask_shuffle()
sympy.core.tests.test_assumptions.test_assumptions_copy()
sympy.core.tests.test_assumptions.test_check_assumptions()
sympy.core.tests.test_assumptions.test_common_assumptions()
sympy.core.tests.test_assumptions.test_complex_reciprocal_imaginary()
sympy.core.tests.test_assumptions.test_composite()
sympy.core.tests.test_assumptions.test_evaluate_false()
sympy.core.tests.test_assumptions.test_failing_assumptions()
sympy.core.tests.test_assumptions.test_hash_vs_eq()
sympy.core.tests.test_assumptions.test_hash_vs_typeinfo()
sympy.core.tests.test_assumptions.test_hash_vs_typeinfo_2()
sympy.core.tests.test_assumptions.test_inconsistent()
sympy.core.tests.test_assumptions.test_infinity()
sympy.core.tests.test_assumptions.test_issue_10024()
sympy.core.tests.test_assumptions.test_issue_10302()
sympy.core.tests.test_assumptions.test_issue_16313()
sympy.core.tests.test_assumptions.test_issue_16579()
sympy.core.tests.test_assumptions.test_issue_17556()
sympy.core.tests.test_assumptions.test_issue_21651()
sympy.core.tests.test_assumptions.test_issue_2730()
sympy.core.tests.test_assumptions.test_issue_2920()
sympy.core.tests.test_assumptions.test_issue_3825()
sympy.core.tests.test_assumptions.test_issue_4149()
sympy.core.tests.test_assumptions.test_issue_4822()
sympy.core.tests.test_assumptions.test_issue_6275()
sympy.core.tests.test_assumptions.test_issue_6631()
sympy.core.tests.test_assumptions.test_issue_7899()
sympy.core.tests.test_assumptions.test_issue_7993()
sympy.core.tests.test_assumptions.test_issue_8075()
sympy.core.tests.test_assumptions.test_issue_8642()
sympy.core.tests.test_assumptions.test_issue_9115_9150()
sympy.core.tests.test_assumptions.test_issue_9165()
sympy.core.tests.test_assumptions.test_issues_8632_8633_8638_8675_8992()
sympy.core.tests.test_assumptions.test_nan()
sympy.core.tests.test_assumptions.test_neg_infinity()
sympy.core.tests.test_assumptions.test_neg_rational()
sympy.core.tests.test_assumptions.test_neg_symbol_falsenegative()
sympy.core.tests.test_assumptions.test_neg_symbol_falsenonnegative()
sympy.core.tests.test_assumptions.test_neg_symbol_falsenonnegative_real()
sympy.core.tests.test_assumptions.test_neg_symbol_falsepositive()
sympy.core.tests.test_assumptions.test_neg_symbol_falsepositive_real()
sympy.core.tests.test_assumptions.test_neg_symbol_nonpositive()
sympy.core.tests.test_assumptions.test_neg_symbol_positive()
sympy.core.tests.test_assumptions.test_negativeone()
sympy.core.tests.test_assumptions.test_one()
sympy.core.tests.test_assumptions.test_other_symbol()
sympy.core.tests.test_assumptions.test_pi()
sympy.core.tests.test_assumptions.test_pos_rational()
sympy.core.tests.test_assumptions.test_pre_generated_assumption_rules_are_valid()
sympy.core.tests.test_assumptions.test_prime()
sympy.core.tests.test_assumptions.test_prime_symbol()
sympy.core.tests.test_assumptions.test_sanitize_assumptions()
sympy.core.tests.test_assumptions.test_special_assumptions()
sympy.core.tests.test_assumptions.test_special_is_rational()
sympy.core.tests.test_assumptions.test_symbol_extended_real_false()
sympy.core.tests.test_assumptions.test_symbol_falsenonnegative()
sympy.core.tests.test_assumptions.test_symbol_falsenonnegative_real()
sympy.core.tests.test_assumptions.test_symbol_falsepositive()
sympy.core.tests.test_assumptions.test_symbol_falsepositive_mul()
sympy.core.tests.test_assumptions.test_symbol_falsepositive_real()
sympy.core.tests.test_assumptions.test_symbol_imaginary()
sympy.core.tests.test_assumptions.test_symbol_infinitereal_mul()
sympy.core.tests.test_assumptions.test_symbol_noncommutative()
sympy.core.tests.test_assumptions.test_symbol_nonpositive()
sympy.core.tests.test_assumptions.test_symbol_positive()
sympy.core.tests.test_assumptions.test_symbol_real_false()
sympy.core.tests.test_assumptions.test_symbol_unset()
sympy.core.tests.test_assumptions.test_symbol_zero()
sympy.core.tests.test_assumptions.test_zero()
sympy.core.tests.test_assumptions.test_zoo()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_numbers.py----------------------------------------
A:sympy.core.tests.test_numbers.t->Float('1.0E-15')
A:sympy.core.tests.test_numbers._ninf->float(-oo)
A:sympy.core.tests.test_numbers._inf->float(oo)
A:sympy.core.tests.test_numbers.y->sympy.core.numbers.Rational(1, 3)
A:sympy.core.tests.test_numbers.z->sympy.core.numbers.Integer(3)
A:sympy.core.tests.test_numbers.a->Integer(4)
A:sympy.core.tests.test_numbers.p->Symbol('p', positive=True)
A:sympy.core.tests.test_numbers.r->Rational(500, 41)
A:sympy.core.tests.test_numbers.f->Float(n.n(), 5)
A:sympy.core.tests.test_numbers.ans->Float(Rational(f) % r, 3)
A:sympy.core.tests.test_numbers.b->Symbol('b', finite=True)
A:sympy.core.tests.test_numbers.x->Symbol('x')
A:sympy.core.tests.test_numbers.OO->float('inf')
A:sympy.core.tests.test_numbers.c->Symbol('c', complex=True)
A:sympy.core.tests.test_numbers.i->Integer(10)
A:sympy.core.tests.test_numbers.n3_4->Rational(3, 4)
A:sympy.core.tests.test_numbers.n->Symbol('n', negative=True)
A:sympy.core.tests.test_numbers.n1->Rational(1, 4)
A:sympy.core.tests.test_numbers.n2->Rational(1, 3)
A:sympy.core.tests.test_numbers.n3->Rational(2, 4)
A:sympy.core.tests.test_numbers.n4->Rational(2, -4)
A:sympy.core.tests.test_numbers.n5->Rational(0)
A:sympy.core.tests.test_numbers.n6->Rational(1)
A:sympy.core.tests.test_numbers.n7->Rational(3)
A:sympy.core.tests.test_numbers.n8->Rational(-3)
A:sympy.core.tests.test_numbers.x_str->Float((0, '13333333333333', -52, 53))
A:sympy.core.tests.test_numbers.x_0xstr->Float((0, '0x13333333333333', -52, 53))
A:sympy.core.tests.test_numbers.x2_str->Float((0, '26666666666666', -53, 54))
A:sympy.core.tests.test_numbers.x_hex->Float((0, int(5404319552844595), -52, 53))
A:sympy.core.tests.test_numbers.x_dec->Float(mpf)
A:sympy.core.tests.test_numbers.zero->Float('0.0')
A:sympy.core.tests.test_numbers.q->Float(S.One / 10, precision=54)
A:sympy.core.tests.test_numbers.mp_pi->mpmath.pi()
A:sympy.core.tests.test_numbers.repi->RealField(dps=100)(pi.evalf(100))
A:sympy.core.tests.test_numbers.s->str(pi.evalf(128))
A:sympy.core.tests.test_numbers.(p, r)->integer_nthroot(int(factorial(10000)), 100)
A:sympy.core.tests.test_numbers.tiny->Rational(1, 10 ** 1000)
A:sympy.core.tests.test_numbers.(a, b)->Integer(10).approximation_interval(Integer)
A:sympy.core.tests.test_numbers.ia->int(i)
A:sympy.core.tests.test_numbers.nz->Symbol('nz', nonzero=True)
A:sympy.core.tests.test_numbers.im->Symbol('i', imaginary=True)
A:sympy.core.tests.test_numbers.pb->Symbol('pb', positive=True)
A:sympy.core.tests.test_numbers.nb->Symbol('nb', negative=True)
A:sympy.core.tests.test_numbers.imb->Symbol('ib', imaginary=True, finite=True)
A:sympy.core.tests.test_numbers.k->Dummy('k', integer=True, nonnegative=True)
A:sympy.core.tests.test_numbers.foo->Foo()
A:sympy.core.tests.test_numbers.bar->Bar()
A:sympy.core.tests.test_numbers.rpi->Rational('905502432259640373/288230376151711744')
A:sympy.core.tests.test_numbers.fpi->Float(float(pi))
A:sympy.core.tests.test_numbers.np->import_module('numpy')
sympy.core.tests.test_numbers._strictly_equal(a,b)
sympy.core.tests.test_numbers._test_rational_new(cls)
sympy.core.tests.test_numbers.same_and_same_prec(a,b)
sympy.core.tests.test_numbers.test_Catalan_EulerGamma_prec()
sympy.core.tests.test_numbers.test_Catalan_rewrite()
sympy.core.tests.test_numbers.test_ComplexInfinity()
sympy.core.tests.test_numbers.test_Div_By_Zero()
sympy.core.tests.test_numbers.test_Float()
sympy.core.tests.test_numbers.test_Float_RealElement()
sympy.core.tests.test_numbers.test_Float_default_to_highprec_from_str()
sympy.core.tests.test_numbers.test_Float_eq()
sympy.core.tests.test_numbers.test_Float_eval()
sympy.core.tests.test_numbers.test_Float_from_tuple()
sympy.core.tests.test_numbers.test_Float_gcd_lcm_cofactors()
sympy.core.tests.test_numbers.test_Float_idempotence()
sympy.core.tests.test_numbers.test_Float_issue_2107()
sympy.core.tests.test_numbers.test_GoldenRatio_expand()
sympy.core.tests.test_numbers.test_Infinity()
sympy.core.tests.test_numbers.test_Infinity_2()
sympy.core.tests.test_numbers.test_Infinity_floor_ceiling_power()
sympy.core.tests.test_numbers.test_Infinity_inequations()
sympy.core.tests.test_numbers.test_IntegerInteger()
sympy.core.tests.test_numbers.test_Integer_as_index()
sympy.core.tests.test_numbers.test_Integer_ceiling_floor()
sympy.core.tests.test_numbers.test_Integer_factors()
sympy.core.tests.test_numbers.test_Integer_new()
sympy.core.tests.test_numbers.test_Integer_precision()
sympy.core.tests.test_numbers.test_Mul_Infinity_Zero()
sympy.core.tests.test_numbers.test_NaN()
sympy.core.tests.test_numbers.test_NegativeInfinity()
sympy.core.tests.test_numbers.test_NumberSymbol_comparison()
sympy.core.tests.test_numbers.test_Number_cmp()
sympy.core.tests.test_numbers.test_Number_new()
sympy.core.tests.test_numbers.test_One_power()
sympy.core.tests.test_numbers.test_Rational_cmp()
sympy.core.tests.test_numbers.test_Rational_factors()
sympy.core.tests.test_numbers.test_Rational_gcd_lcm_cofactors()
sympy.core.tests.test_numbers.test_Rational_int()
sympy.core.tests.test_numbers.test_Rational_new()
sympy.core.tests.test_numbers.test_TribonacciConstant_expand()
sympy.core.tests.test_numbers.test_abc()
sympy.core.tests.test_numbers.test_abs1()
sympy.core.tests.test_numbers.test_accept_int()
sympy.core.tests.test_numbers.test_and_Integer()
sympy.core.tests.test_numbers.test_as_content_primitive()
sympy.core.tests.test_numbers.test_bool_eq()
sympy.core.tests.test_numbers.test_bug_sqrt()
sympy.core.tests.test_numbers.test_comp1()
sympy.core.tests.test_numbers.test_comparisons_with_unknown_type()
sympy.core.tests.test_numbers.test_conversion_to_mpmath()
sympy.core.tests.test_numbers.test_divmod()
sympy.core.tests.test_numbers.test_dont_accept_str()
sympy.core.tests.test_numbers.test_equal_valued()
sympy.core.tests.test_numbers.test_exponentiation_of_0()
sympy.core.tests.test_numbers.test_float_mpf()
sympy.core.tests.test_numbers.test_floordiv()
sympy.core.tests.test_numbers.test_golden_ratio_rewrite_as_sqrt()
sympy.core.tests.test_numbers.test_hashing_sympy_integers()
sympy.core.tests.test_numbers.test_igcd()
sympy.core.tests.test_numbers.test_igcd2()
sympy.core.tests.test_numbers.test_igcd_lehmer()
sympy.core.tests.test_numbers.test_igcdex()
sympy.core.tests.test_numbers.test_ilcm()
sympy.core.tests.test_numbers.test_int()
sympy.core.tests.test_numbers.test_int_NumberSymbols()
sympy.core.tests.test_numbers.test_integer_log()
sympy.core.tests.test_numbers.test_integer_nthroot_overflow()
sympy.core.tests.test_numbers.test_invert_Integer()
sympy.core.tests.test_numbers.test_invert_numbers()
sympy.core.tests.test_numbers.test_isqrt()
sympy.core.tests.test_numbers.test_issue_10020()
sympy.core.tests.test_numbers.test_issue_10063()
sympy.core.tests.test_numbers.test_issue_13890()
sympy.core.tests.test_numbers.test_issue_14289()
sympy.core.tests.test_numbers.test_issue_24543()
sympy.core.tests.test_numbers.test_issue_3321()
sympy.core.tests.test_numbers.test_issue_3423()
sympy.core.tests.test_numbers.test_issue_3449()
sympy.core.tests.test_numbers.test_issue_3692()
sympy.core.tests.test_numbers.test_issue_4107()
sympy.core.tests.test_numbers.test_issue_4122()
sympy.core.tests.test_numbers.test_issue_4611()
sympy.core.tests.test_numbers.test_issue_6133()
sympy.core.tests.test_numbers.test_issue_6349()
sympy.core.tests.test_numbers.test_issue_6640()
sympy.core.tests.test_numbers.test_issue_7742()
sympy.core.tests.test_numbers.test_issue_9491()
sympy.core.tests.test_numbers.test_latex()
sympy.core.tests.test_numbers.test_lshift_Integer()
sympy.core.tests.test_numbers.test_mod()
sympy.core.tests.test_numbers.test_mod_inverse()
sympy.core.tests.test_numbers.test_mpf_norm()
sympy.core.tests.test_numbers.test_mpmath_issues()
sympy.core.tests.test_numbers.test_negation()
sympy.core.tests.test_numbers.test_no_len()
sympy.core.tests.test_numbers.test_numpy_to_float()
sympy.core.tests.test_numbers.test_or_Integer()
sympy.core.tests.test_numbers.test_pi_Pi()
sympy.core.tests.test_numbers.test_powers()
sympy.core.tests.test_numbers.test_powers_Float()
sympy.core.tests.test_numbers.test_powers_Integer()
sympy.core.tests.test_numbers.test_powers_Rational()
sympy.core.tests.test_numbers.test_real_bug()
sympy.core.tests.test_numbers.test_relational()
sympy.core.tests.test_numbers.test_rounding_issue_4172()
sympy.core.tests.test_numbers.test_rshift_Integer()
sympy.core.tests.test_numbers.test_seterr()
sympy.core.tests.test_numbers.test_simplify_AlgebraicNumber()
sympy.core.tests.test_numbers.test_special_numbers()
sympy.core.tests.test_numbers.test_tribonacci_constant_rewrite_as_sqrt()
sympy.core.tests.test_numbers.test_xor_Integer()
sympy.core.tests.test_numbers.test_zero_not_false()
sympy.core.tests.test_numbers.test_zoo()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/tests/test_parameters.py----------------------------------------
sympy.core.tests.test_parameters.test_add()
sympy.core.tests.test_parameters.test_nested()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/benchmarks/bench_sympify.py----------------------------------------
A:sympy.core.benchmarks.bench_sympify.x->Symbol('x')
sympy.core.benchmarks.bench_sympify.timeit_sympify_1()
sympy.core.benchmarks.bench_sympify.timeit_sympify_x()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/benchmarks/bench_basic.py----------------------------------------
A:sympy.core.benchmarks.bench_basic.(x, y)->symbols('x,y')
sympy.core.benchmarks.bench_basic.timeit_S_lookup()
sympy.core.benchmarks.bench_basic.timeit_Symbol_eq_xy()
sympy.core.benchmarks.bench_basic.timeit_Symbol_meth_lookup()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/benchmarks/bench_assumptions.py----------------------------------------
A:sympy.core.benchmarks.bench_assumptions.x->Symbol('x')
A:sympy.core.benchmarks.bench_assumptions.i3->Integer(3)
sympy.core.benchmarks.bench_assumptions.timeit_Integer_is_irrational()
sympy.core.benchmarks.bench_assumptions.timeit_x_is_integer()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/benchmarks/bench_expand.py----------------------------------------
A:sympy.core.benchmarks.bench_expand.(x, y, z)->symbols('x,y,z')
sympy.core.benchmarks.bench_expand.bench_expand_32()
sympy.core.benchmarks.bench_expand.timeit_expand_complex_number_1()
sympy.core.benchmarks.bench_expand.timeit_expand_complex_number_2()
sympy.core.benchmarks.bench_expand.timeit_expand_nothing_todo()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/benchmarks/bench_numbers.py----------------------------------------
A:sympy.core.benchmarks.bench_numbers.i3->Integer(3)
A:sympy.core.benchmarks.bench_numbers.i4->Integer(4)
A:sympy.core.benchmarks.bench_numbers.r34->Rational(3, 4)
A:sympy.core.benchmarks.bench_numbers.q45->Rational(4, 5)
sympy.core.benchmarks.bench_numbers.timeit_Integer_abs()
sympy.core.benchmarks.bench_numbers.timeit_Integer_add_Rational()
sympy.core.benchmarks.bench_numbers.timeit_Integer_add_i1()
sympy.core.benchmarks.bench_numbers.timeit_Integer_add_ij()
sympy.core.benchmarks.bench_numbers.timeit_Integer_create()
sympy.core.benchmarks.bench_numbers.timeit_Integer_ed_Rational()
sympy.core.benchmarks.bench_numbers.timeit_Integer_eq_i3()
sympy.core.benchmarks.bench_numbers.timeit_Integer_int()
sympy.core.benchmarks.bench_numbers.timeit_Integer_mul_Rational()
sympy.core.benchmarks.bench_numbers.timeit_Integer_mul_i4()
sympy.core.benchmarks.bench_numbers.timeit_Integer_mul_ij()
sympy.core.benchmarks.bench_numbers.timeit_Integer_neg()
sympy.core.benchmarks.bench_numbers.timeit_Integer_sub()
sympy.core.benchmarks.bench_numbers.timeit_Rational_add_r1()
sympy.core.benchmarks.bench_numbers.timeit_Rational_add_rq()
sympy.core.benchmarks.bench_numbers.timeit_abs_pi()
sympy.core.benchmarks.bench_numbers.timeit_integer_nthroot()
sympy.core.benchmarks.bench_numbers.timeit_neg_one()
sympy.core.benchmarks.bench_numbers.timeit_neg_oo()
sympy.core.benchmarks.bench_numbers.timeit_number_igcd_23_17()
sympy.core.benchmarks.bench_numbers.timeit_number_igcd_60_3600()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/core/benchmarks/bench_arit.py----------------------------------------
A:sympy.core.benchmarks.bench_arit.(x, y, z)->symbols('x,y,z')
sympy.core.benchmarks.bench_arit.timeit_Add_1x()
sympy.core.benchmarks.bench_arit.timeit_Add_x05()
sympy.core.benchmarks.bench_arit.timeit_Add_x1()
sympy.core.benchmarks.bench_arit.timeit_Add_xy()
sympy.core.benchmarks.bench_arit.timeit_Add_xyz()
sympy.core.benchmarks.bench_arit.timeit_Div_2y()
sympy.core.benchmarks.bench_arit.timeit_Div_xy()
sympy.core.benchmarks.bench_arit.timeit_Mul_xy()
sympy.core.benchmarks.bench_arit.timeit_Mul_xyz()
sympy.core.benchmarks.bench_arit.timeit_neg()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/products.py----------------------------------------
A:sympy.concrete.products.obj->expr_with_intlimits.ExprWithIntLimits.__new__(cls, function, *symbols, **assumptions)
A:sympy.concrete.products.d->_dummy_with_inherited_properties_concrete(xab)
A:sympy.concrete.products.did->did.xreplace(undo).xreplace(undo)
A:sympy.concrete.products.g->self._eval_product(f, (i, a, b))
A:sympy.concrete.products.poly->term.as_poly(k)
A:sympy.concrete.products.all_roots->roots(poly)
A:sympy.concrete.products.arg->term._new_rawargs(*include)
A:sympy.concrete.products.B->self.func(arg, (k, a, n)).doit()
A:sympy.concrete.products.factored->factor_terms(term, fraction=True)
A:sympy.concrete.products.(without_k, with_k)->term.as_coeff_mul(k)
A:sympy.concrete.products.p->self._eval_product(term.base, (k, a, n))
A:sympy.concrete.products.A->Mul(*exclude)
A:sympy.concrete.products.s->summation(term.exp, (k, a, n))
A:sympy.concrete.products.evaluated->term.doit()
A:sympy.concrete.products.f->self.func(f, *limits)
A:sympy.concrete.products.rv->Sum(Product(f, (i, a, h - 1)) * Product(f, (i, h + 1, b)) * Derivative(f, x, evaluate=True).subs(i, h), (h, a, b))
A:sympy.concrete.products.limit->limits.pop(-1)
A:sympy.concrete.products.h->Dummy()
A:sympy.concrete.products.log_sum->log(sequence_term)
A:sympy.concrete.products.is_conv->Sum(log_sum, *lim).is_convergent()
A:sympy.concrete.products.l_indices->list(indices)
A:sympy.concrete.products.l_indices[i]->expr.index(indx)
A:sympy.concrete.products.prod->Product(*args, **kwargs)
sympy.Product(cls,function,*symbols,**assumptions)
sympy.concrete.products.Product(cls,function,*symbols,**assumptions)
sympy.concrete.products.Product._eval_adjoint(self)
sympy.concrete.products.Product._eval_conjugate(self)
sympy.concrete.products.Product._eval_derivative(self,x)
sympy.concrete.products.Product._eval_is_extended_nonnegative(self)
sympy.concrete.products.Product._eval_is_extended_nonpositive(self)
sympy.concrete.products.Product._eval_is_extended_real(self)
sympy.concrete.products.Product._eval_is_finite(self)
sympy.concrete.products.Product._eval_is_nonnegative(self)
sympy.concrete.products.Product._eval_is_positive(self)
sympy.concrete.products.Product._eval_is_zero(self)
sympy.concrete.products.Product._eval_product(self,term,limits)
sympy.concrete.products.Product._eval_product_direct(self,term,limits)
sympy.concrete.products.Product._eval_rewrite_as_Sum(self,*args,**kwargs)
sympy.concrete.products.Product._eval_simplify(self,**kwargs)
sympy.concrete.products.Product._eval_transpose(self)
sympy.concrete.products.Product.doit(self,**hints)
sympy.concrete.products.Product.is_convergent(self)
sympy.concrete.products.Product.reverse_order(expr,*indices)
sympy.concrete.products.Product.term(self)
sympy.concrete.products.product(*args,**kwargs)
sympy.product(*args,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/gosper.py----------------------------------------
A:sympy.concrete.gosper.((p, q), opt)->parallel_poly_from_expr((f, g), n, field=True, extension=True)
A:sympy.concrete.gosper.h->Dummy('h')
A:sympy.concrete.gosper.D->Poly(n + h, n, h, domain=opt.domain)
A:sympy.concrete.gosper.R->A.as_expr().resultant(B.compose(D))
A:sympy.concrete.gosper.roots->set(R.ground_roots().keys())
A:sympy.concrete.gosper.d->max(D)
A:sympy.concrete.gosper.A->A.as_expr().as_expr()
A:sympy.concrete.gosper.B->B.shift(-1).shift(-1)
A:sympy.concrete.gosper.C->C.as_expr().as_expr()
A:sympy.concrete.gosper.r->hypersimp(f, n)
A:sympy.concrete.gosper.(p, q)->hypersimp(f, n).as_numer_denom()
A:sympy.concrete.gosper.(A, B, C)->gosper_normal(p, q, n)
A:sympy.concrete.gosper.N->S(A.degree())
A:sympy.concrete.gosper.M->S(B.degree())
A:sympy.concrete.gosper.K->S(C.degree())
A:sympy.concrete.gosper.coeffs->symbols('c:%s' % (d + 1), cls=Dummy)
A:sympy.concrete.gosper.domain->A.as_expr().as_expr().get_domain().inject(*coeffs)
A:sympy.concrete.gosper.x->x.subs(coeff, 0).subs(coeff, 0)
A:sympy.concrete.gosper.solution->solve(H.coeffs(), coeffs)
A:sympy.concrete.gosper.g->gosper_term(f, k)
sympy.concrete.gosper.gosper_normal(f,g,n,polys=True)
sympy.concrete.gosper.gosper_sum(f,k)
sympy.concrete.gosper.gosper_term(f,n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/guess.py----------------------------------------
A:sympy.concrete.guess.c->lcm(c, denom(x))
A:sympy.concrete.guess.q2[k]->int(q2[k] * c)
A:sympy.concrete.guess.p->find_simple_recurrence_vector(v)
A:sympy.concrete.guess.n->len(q)
A:sympy.concrete.guess.a->floor(x)
A:sympy.concrete.guess.q->find_simple_recurrence_vector(v)
A:sympy.concrete.guess.g->guess_generating_function_rational(t, X=X)
A:sympy.concrete.guess.result['ogf']->exp(integrate(result['lgdogf'], X))
A:sympy.concrete.guess.result['egf']->exp(integrate(result['lgdegf'], X))
A:sympy.concrete.guess.N->len(l)
A:sympy.concrete.guess.niter->min(N - 1, niter)
A:sympy.concrete.guess.symb->symbols('i:' + str(niter))
A:sympy.concrete.guess.ri->rinterp(enumerate(g[k][:-1], start=1), i, X=s)
sympy.concrete.guess.find_simple_recurrence(v,A=Function('a'),N=Symbol('n'))
sympy.concrete.guess.find_simple_recurrence_vector(l)
sympy.concrete.guess.guess(l,all=False,evaluate=True,niter=2,variables=None)
sympy.concrete.guess.guess_generating_function(v,X=Symbol('x'),types=['all'],maxsqrtn=2)
sympy.concrete.guess.guess_generating_function_rational(v,X=Symbol('x'))
sympy.concrete.guess.rationalize(x,maxcoeff=10000)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/expr_with_limits.py----------------------------------------
A:sympy.concrete.expr_with_limits.function->function.xreplace(reps).xreplace(reps)
A:sympy.concrete.expr_with_limits.(limits, orientation)->_process_limits(*symbols, discrete=discrete)
A:sympy.concrete.expr_with_limits.limits[i]->Tuple(xab[0])
A:sympy.concrete.expr_with_limits.reps[p]->Dummy()
A:sympy.concrete.expr_with_limits.variable->sympify(flatten(V)).atoms(Symbol).pop()
A:sympy.concrete.expr_with_limits.V->sympify(flatten(V))
A:sympy.concrete.expr_with_limits.dx->abs(V[1].step)
A:sympy.concrete.expr_with_limits.lenV->len(V)
A:sympy.concrete.expr_with_limits.pre->_common_new(cls, function, *symbols, discrete=issubclass(cls, Sum), **assumptions)
A:sympy.concrete.expr_with_limits.obj->sympy.core.expr.Expr.__new__(cls, **assumptions)
A:sympy.concrete.expr_with_limits.obj._args->tuple(arglist)
A:sympy.concrete.expr_with_limits.sy2->set(self.variables).intersection(set(new.atoms(Symbol)))
A:sympy.concrete.expr_with_limits.sy1->set(self.variables).intersection(set(old.args))
A:sympy.concrete.expr_with_limits.func->func.subs(old, new).subs(old, new)
A:sympy.concrete.expr_with_limits.summand->self.function.expand(**hints)
A:sympy.concrete.expr_with_limits.out->sift(summand.args, lambda w: w.is_commutative and (not set(self.variables) & w.free_symbols))
A:sympy.concrete.expr_with_limits.force->hints.get('force', False)
sympy.concrete.expr_with_limits.AddWithLimits(cls,function,*symbols,**assumptions)
sympy.concrete.expr_with_limits.AddWithLimits._eval_adjoint(self)
sympy.concrete.expr_with_limits.AddWithLimits._eval_conjugate(self)
sympy.concrete.expr_with_limits.AddWithLimits._eval_expand_basic(self,**hints)
sympy.concrete.expr_with_limits.AddWithLimits._eval_factor(self,**hints)
sympy.concrete.expr_with_limits.AddWithLimits._eval_transpose(self)
sympy.concrete.expr_with_limits.ExprWithLimits(cls,function,*symbols,**assumptions)
sympy.concrete.expr_with_limits.ExprWithLimits._eval_interval(self,x,a,b)
sympy.concrete.expr_with_limits.ExprWithLimits._eval_subs(self,old,new)
sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols(self)
sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols(self)
sympy.concrete.expr_with_limits.ExprWithLimits.function(self)
sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits(self)
sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits(self)
sympy.concrete.expr_with_limits.ExprWithLimits.is_number(self)
sympy.concrete.expr_with_limits.ExprWithLimits.kind(self)
sympy.concrete.expr_with_limits.ExprWithLimits.limits(self)
sympy.concrete.expr_with_limits.ExprWithLimits.variables(self)
sympy.concrete.expr_with_limits._common_new(cls,function,*symbols,discrete,**assumptions)
sympy.concrete.expr_with_limits._process_limits(*symbols,discrete=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/delta.py----------------------------------------
A:sympy.concrete.delta.p->(delta.args[0] - delta.args[1]).as_poly(index)
A:sympy.concrete.delta.solns->solve(delta.args[0] - delta.args[1], x)
A:sympy.concrete.delta.expr2->expr.func(*newargs)
A:sympy.concrete.delta.slns->solve(expr.args[0] - expr.args[1], dict=True)
A:sympy.concrete.delta.newexpr->f.func(*terms)
A:sympy.concrete.delta.k->Dummy('kprime', integer=True)
A:sympy.concrete.delta.(delta, _)->_extract_delta(f, limit[0])
A:sympy.concrete.delta.g->_expand_delta(f, x)
A:sympy.concrete.delta.(delta, expr)->_extract_delta(g, x)
sympy.concrete.delta._expand_delta(expr,index)
sympy.concrete.delta._extract_delta(expr,index)
sympy.concrete.delta._has_simple_delta(expr,index)
sympy.concrete.delta._is_simple_delta(delta,index)
sympy.concrete.delta._remove_multiple_delta(expr)
sympy.concrete.delta._simplify_delta(expr)
sympy.concrete.delta.deltaproduct(f,limit)
sympy.concrete.delta.deltasummation(f,limit,no_piecewise=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/summations.py----------------------------------------
A:sympy.concrete.summations.obj->expr_with_limits.AddWithLimits.__new__(cls, function, *symbols, **assumptions)
A:sympy.concrete.summations.f->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a)
A:sympy.concrete.summations.d->_dummy_with_inherited_properties_concrete(xab)
A:sympy.concrete.summations.did->did.xreplace(undo).xreplace(undo)
A:sympy.concrete.summations.expanded->self.expand()
A:sympy.concrete.summations.newf->eval_sum_direct(f, (i, a, b))
A:sympy.concrete.summations.zeta_function->self.eval_zeta_function(f, (i, a, b))
A:sympy.concrete.summations.result->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).match(i ** n)
A:sympy.concrete.summations.limit->limits.pop(-1)
A:sympy.concrete.summations.df->Derivative(f, x, evaluate=True)
A:sympy.concrete.summations.rv->self.func(df, limit)
A:sympy.concrete.summations.new_upper->upper.subs(n, n + step)
A:sympy.concrete.summations.function->function.simplify(**kwargs).simplify(**kwargs)
A:sympy.concrete.summations.terms->sympy.core.add.Add.make_args(expand(function))
A:sympy.concrete.summations.subterms->sympy.core.mul.Mul.make_args(expand(term))
A:sympy.concrete.summations.(p, q, r)->symbols('p q r', cls=Wild)
A:sympy.concrete.summations.sequence_term->sequence_term.xreplace({sym: _sym}).xreplace({sym: _sym})
A:sympy.concrete.summations.sym_->Dummy(sym.name, integer=True, positive=True)
A:sympy.concrete.summations.interval->Interval(lower_limit, upper_limit)
A:sympy.concrete.summations.s->solve(den, v)
A:sympy.concrete.summations.lim_val->limit_seq(g1_n, sym)
A:sympy.concrete.summations.lim_val_abs->limit_seq(abs(sequence_term), sym)
A:sympy.concrete.summations.order->O(sequence_term, (sym, S.Infinity))
A:sympy.concrete.summations.p_series_test->O(sequence_term, (sym, S.Infinity)).expr.match(sym ** p)
A:sympy.concrete.summations.lim_comp->limit_seq(sym * sequence_term, sym)
A:sympy.concrete.summations.next_sequence_term->sequence_term.xreplace({sym: _sym}).xreplace({sym: _sym}).xreplace({sym: sym + 1})
A:sympy.concrete.summations.ratio->combsimp(powsimp(next_sequence_term / sequence_term))
A:sympy.concrete.summations.lim_ratio->limit_seq(ratio, sym)
A:sympy.concrete.summations.test_val->test_val.gammasimp().gammasimp()
A:sympy.concrete.summations.lim_evaluated->limit_seq(abs(sequence_term) ** (1 / sym), sym)
A:sympy.concrete.summations.dict_val->sequence_term.xreplace({sym: _sym}).xreplace({sym: _sym}).match(S.NegativeOne ** (sym + p) * q)
A:sympy.concrete.summations.maxima->solveset(sequence_term.diff(sym), sym, interval)
A:sympy.concrete.summations.check_interval->Interval(maxima.sup, interval.sup)
A:sympy.concrete.summations.integral_val->Integral(sequence_term, (sym, lower_limit, upper_limit))
A:sympy.concrete.summations.integral_val_evaluated->Integral(sequence_term, (sym, lower_limit, upper_limit)).doit()
A:sympy.concrete.summations.argset->set(args)
A:sympy.concrete.summations.m->Dummy('m')
A:sympy.concrete.summations.ing_val->limit_seq(Sum(g_n, (sym, interval.inf, m)).doit(), m)
A:sympy.concrete.summations.a_n->Mul(*a_tuple)
A:sympy.concrete.summations.b_n->Mul(*b_set)
A:sympy.concrete.summations.dirich->_dirichlet_test(b_n)
A:sympy.concrete.summations.bc_test->_bounded_convergent_test(a_n, b_n)
A:sympy.concrete.summations.n->sympy.simplify.radsimp.denom.shift(shift).degree(i)
A:sympy.concrete.summations.term->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, a + k)
A:sympy.concrete.summations.x->Dummy('x')
A:sympy.concrete.summations.I->I.doit().doit()
A:sympy.concrete.summations.(fa, fb)->fpoint(f)
A:sympy.concrete.summations.g->g.diff(i, 2, simplify=False).diff(i, 2, simplify=False)
A:sympy.concrete.summations.(ga, gb)->fpoint(g)
A:sympy.concrete.summations.term_evalf->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, a + k).evalf(3)
A:sympy.concrete.summations.l_indices->list(indices)
A:sympy.concrete.summations.l_indices[i]->self.index(indx)
A:sympy.concrete.summations.k->Wild('k')
A:sympy.concrete.summations.sol->(-R).match(L.subs(i, i + k))
A:sympy.concrete.summations.newexpr->eval_sum(arg.expr, limits)
A:sympy.concrete.summations.value->eval_sum_symbolic(f.expand(), (i, a, b))
A:sympy.concrete.summations.(without_i, with_i)->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).as_independent(i)
A:sympy.concrete.summations.(L, R)->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).as_two_terms()
A:sympy.concrete.summations.sR->eval_sum_symbolic(R, (i, a, b))
A:sympy.concrete.summations.sL->eval_sum_symbolic(L, (i, a, b))
A:sympy.concrete.summations.expr->apart(expr, i)
A:sympy.concrete.summations.lsum->eval_sum_symbolic(L, (i, a, b))
A:sympy.concrete.summations.rsum->eval_sum_symbolic(R, (i, a, b))
A:sympy.concrete.summations.lrsum->telescopic(L, R, (i, a, b))
A:sympy.concrete.summations.c1->Wild('c1', exclude=[i])
A:sympy.concrete.summations.c2->Wild('c2', exclude=[i])
A:sympy.concrete.summations.c3->Wild('c3', exclude=[i])
A:sympy.concrete.summations.wexp->Wild('wexp')
A:sympy.concrete.summations.e->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).powsimp().match(c1 ** wexp)
A:sympy.concrete.summations.e_exp->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).powsimp().match(c1 ** wexp).pop(wexp).expand().match(c2 * i + c3)
A:sympy.concrete.summations.p->Poly(fac, i)
A:sympy.concrete.summations.q->(c1 ** c2).subs(e)
A:sympy.concrete.summations.r->eval_sum_residue(f_orig, (i, a, b))
A:sympy.concrete.summations.den->denom(together(r))
A:sympy.concrete.summations.h->hyper(ap, bq, x)
A:sympy.concrete.summations.factored->f_orig.factor()
A:sympy.concrete.summations.hs->nsimplify(hs)
A:sympy.concrete.summations.(numer, denom)->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).as_numer_denom()
A:sympy.concrete.summations.(top, topl)->numer.shift(shift).as_coeff_mul(i)
A:sympy.concrete.summations.(bot, botl)->sympy.simplify.radsimp.denom.shift(shift).as_coeff_mul(i)
A:sympy.concrete.summations.(m, n)->Poly(fac, i).all_coeffs()
A:sympy.concrete.summations.old_sum->Sum(f, (i, a, b))
A:sympy.concrete.summations.res->_eval_sum_hyper(f, i, a)
A:sympy.concrete.summations.had->n_illegal(f)
A:sympy.concrete.summations.res1->_eval_sum_hyper(f.subs(i, -i), i, 1)
A:sympy.concrete.summations.res2->_eval_sum_hyper(f, i, 0)
A:sympy.concrete.summations.cond->And(cond1, cond2)
A:sympy.concrete.summations.numer_even->all((i % 2 == 0 for (i,) in numer.monoms()))
A:sympy.concrete.summations.denom_even->all((i % 2 == 0 for (i,) in denom.monoms()))
A:sympy.concrete.summations.numer_odd->all((i % 2 == 1 for (i,) in numer.monoms()))
A:sympy.concrete.summations.denom_odd->all((i % 2 == 1 for (i,) in denom.monoms()))
A:sympy.concrete.summations.((numer, denom), opt)->parallel_poly_from_expr((numer, denom), i)
A:sympy.concrete.summations.roots->sift(roots, lambda x: x.is_integer)
A:sympy.concrete.summations.a->sympy.simplify.radsimp.denom.shift(shift).coeff_monomial(i ** n)
A:sympy.concrete.summations.b->sympy.simplify.radsimp.denom.shift(shift).coeff_monomial(i ** (n - 1))
A:sympy.concrete.summations.z->Dummy('z')
A:sympy.concrete.summations.residue_factor->get_residue_factor(numer, denom, alternating)
A:sympy.concrete.summations.match->match_rational(f / S.NegativeOne ** i, i)
A:sympy.concrete.summations.poles->get_poles(denom)
A:sympy.concrete.summations.shift->get_shift(denom)
A:sympy.concrete.summations.numer->numer.shift(shift).shift(shift)
A:sympy.concrete.summations.denom->sympy.simplify.radsimp.denom.shift(shift).shift(shift)
A:sympy.concrete.summations.int_roots_max->max(int_roots)
A:sympy.concrete.summations.int_roots_min->min(int_roots)
A:sympy.concrete.summations.assum_true->Dummy('x')._assumptions.get(assum, None)
sympy.Sum(cls,function,*symbols,**assumptions)
sympy.concrete.summations.Sum(cls,function,*symbols,**assumptions)
sympy.concrete.summations.Sum._eval_derivative(self,x)
sympy.concrete.summations.Sum._eval_difference_delta(self,n,step)
sympy.concrete.summations.Sum._eval_is_extended_real(self)
sympy.concrete.summations.Sum._eval_is_finite(self)
sympy.concrete.summations.Sum._eval_is_negative(self)
sympy.concrete.summations.Sum._eval_is_positive(self)
sympy.concrete.summations.Sum._eval_is_zero(self)
sympy.concrete.summations.Sum._eval_rewrite_as_Product(self,*args,**kwargs)
sympy.concrete.summations.Sum._eval_simplify(self,**kwargs)
sympy.concrete.summations.Sum.doit(self,**hints)
sympy.concrete.summations.Sum.euler_maclaurin(self,m=0,n=0,eps=0,eval_integral=True)
sympy.concrete.summations.Sum.eval_zeta_function(self,f,limits)
sympy.concrete.summations.Sum.is_absolutely_convergent(self)
sympy.concrete.summations.Sum.is_convergent(self)
sympy.concrete.summations.Sum.reverse_order(self,*indices)
sympy.concrete.summations._dummy_with_inherited_properties_concrete(limits)
sympy.concrete.summations._eval_matrix_sum(expression)
sympy.concrete.summations._eval_sum_hyper(f,i,a)
sympy.concrete.summations.eval_sum(f,limits)
sympy.concrete.summations.eval_sum_direct(expr,limits)
sympy.concrete.summations.eval_sum_hyper(f,i_a_b)
sympy.concrete.summations.eval_sum_residue(f,i_a_b)
sympy.concrete.summations.eval_sum_symbolic(f,limits)
sympy.concrete.summations.summation(f,*symbols,**kwargs)
sympy.concrete.summations.telescopic(L,R,limits)
sympy.concrete.summations.telescopic_direct(L,R,n,limits)
sympy.summation(f,*symbols,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/expr_with_intlimits.py----------------------------------------
A:sympy.concrete.expr_with_intlimits.p->trafo.as_poly(var)
A:sympy.concrete.expr_with_intlimits.alpha->trafo.as_poly(var).coeff_monomial(var)
A:sympy.concrete.expr_with_intlimits.beta->trafo.as_poly(var).coeff_monomial(S.One)
A:sympy.concrete.expr_with_intlimits.function->function.subs(var, newvar).subs(var, newvar)
A:sympy.concrete.expr_with_intlimits.index1->expr.index(r[0])
A:sympy.concrete.expr_with_intlimits.index2->expr.index(r[1])
A:sympy.concrete.expr_with_intlimits.new_expr->new_expr.reorder_limit(index1, index2).reorder_limit(index1, index2)
A:sympy.concrete.expr_with_intlimits.eq->Eq(dif, 1)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits(ExprWithLimits)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index(self,var,trafo,newvar=None)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence(self)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index(expr,x)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder(expr,*arg)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit(expr,x,y)
sympy.concrete.expr_with_intlimits.ReorderError(self,expr,msg)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/tests/test_products.py----------------------------------------
A:sympy.concrete.tests.test_products.(a, k, n, m, x)->symbols('a,k,n,m,x', integer=True)
A:sympy.concrete.tests.test_products.f->simplify(g.subs(i, i + 1) / g)
A:sympy.concrete.tests.test_products.i->Symbol('i', integer=True)
A:sympy.concrete.tests.test_products.k->Symbol('k')
A:sympy.concrete.tests.test_products.j->Symbol('j', integer=True, positive=True)
A:sympy.concrete.tests.test_products.S1->Product(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_products.S2->Product(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_products.Sz->Product(f(i), (i, a, b)).doit()
A:sympy.concrete.tests.test_products.(i, u, v)->symbols('i u v', integer=True)
A:sympy.concrete.tests.test_products.P->Product(f, (i, a, b)).doit()
A:sympy.concrete.tests.test_products.(i, u, v, w)->symbols('i u v w', integer=True)
A:sympy.concrete.tests.test_products.S3->Product(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_products.a->Function('a')
A:sympy.concrete.tests.test_products.(k, m)->symbols('k m', integer=True)
A:sympy.concrete.tests.test_products.n->Symbol('n')
A:sympy.concrete.tests.test_products.p->Product(n + 1 / 2 ** k, (k, 0, n - 1)).doit()
A:sympy.concrete.tests.test_products.(A, B)->symbols('A B', commutative=False)
A:sympy.concrete.tests.test_products.(y, t, b, c, v, d)->symbols('y, t, b, c, v, d', integer=True)
A:sympy.concrete.tests.test_products.(b, y, c, d, z)->symbols('b, y, c, d, z', integer=True)
A:sympy.concrete.tests.test_products.(x, y, a, b, c, d)->symbols('x, y, a, b, c, d', integer=True)
A:sympy.concrete.tests.test_products.(a, n)->symbols('a n')
A:sympy.concrete.tests.test_products.y->Symbol('y')
A:sympy.concrete.tests.test_products._i->Dummy('i')
A:sympy.concrete.tests.test_products.(t, y, z)->symbols('t y z')
sympy.concrete.tests.test_products.test_KroneckerDelta_Product()
sympy.concrete.tests.test_products.test_Product_is_convergent()
sympy.concrete.tests.test_products.test__eval_product()
sympy.concrete.tests.test_products.test_change_index()
sympy.concrete.tests.test_products.test_conjugate_transpose()
sympy.concrete.tests.test_products.test_infinite_product()
sympy.concrete.tests.test_products.test_issue_13546()
sympy.concrete.tests.test_products.test_issue_14036()
sympy.concrete.tests.test_products.test_issue_20848()
sympy.concrete.tests.test_products.test_issue_9983()
sympy.concrete.tests.test_products.test_karr_convention()
sympy.concrete.tests.test_products.test_karr_proposition_2a()
sympy.concrete.tests.test_products.test_karr_proposition_2b()
sympy.concrete.tests.test_products.test_multiple_products()
sympy.concrete.tests.test_products.test_product_pow()
sympy.concrete.tests.test_products.test_rational_products()
sympy.concrete.tests.test_products.test_reorder()
sympy.concrete.tests.test_products.test_reverse_order()
sympy.concrete.tests.test_products.test_rewrite_Sum()
sympy.concrete.tests.test_products.test_simple_products()
sympy.concrete.tests.test_products.test_simplify_prod()
sympy.concrete.tests.test_products.test_special_products()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/tests/test_gosper.py----------------------------------------
A:sympy.concrete.tests.test_gosper.g->gosper_sum(f3g, (n, 1, m))
A:sympy.concrete.tests.test_gosper.a->Symbol('a', positive=True)
A:sympy.concrete.tests.test_gosper.b->Symbol('b', positive=True)
A:sympy.concrete.tests.test_gosper.n->Symbol('n', integer=True)
A:sympy.concrete.tests.test_gosper.m->Symbol('m', integer=True)
sympy.concrete.tests.test_gosper.test_gosper_nan()
sympy.concrete.tests.test_gosper.test_gosper_normal()
sympy.concrete.tests.test_gosper.test_gosper_sum()
sympy.concrete.tests.test_gosper.test_gosper_sum_AeqB_part1()
sympy.concrete.tests.test_gosper.test_gosper_sum_AeqB_part2()
sympy.concrete.tests.test_gosper.test_gosper_sum_AeqB_part3()
sympy.concrete.tests.test_gosper.test_gosper_sum_algebraic()
sympy.concrete.tests.test_gosper.test_gosper_sum_indefinite()
sympy.concrete.tests.test_gosper.test_gosper_sum_iterated()
sympy.concrete.tests.test_gosper.test_gosper_sum_parametric()
sympy.concrete.tests.test_gosper.test_gosper_term()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/tests/test_sums_products.py----------------------------------------
A:sympy.concrete.tests.test_sums_products.n->Symbol('n', integer=True, positive=True)
A:sympy.concrete.tests.test_sums_products.(f, g)->symbols('f g', cls=Function)
A:sympy.concrete.tests.test_sums_products.i->Symbol('i')
A:sympy.concrete.tests.test_sums_products.k->Symbol('k', integer=True)
A:sympy.concrete.tests.test_sums_products.j->symbols('j', integer=True)
A:sympy.concrete.tests.test_sums_products.S1->Sum(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_sums_products.S2->Sum(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_sums_products.Sz->Sum(f(i), (i, a, b)).doit()
A:sympy.concrete.tests.test_sums_products.e->Sum(x * y, (x, 1, a))
A:sympy.concrete.tests.test_sums_products.s->Sum(binomial(m, k) * binomial(m, n - k) * (-1) ** k, (k, 0, n))
A:sympy.concrete.tests.test_sums_products.u->Symbol('u', integer=True)
A:sympy.concrete.tests.test_sums_products.v->Sum(eq, (n, 0, 10 ** 100)).doit()
A:sympy.concrete.tests.test_sums_products.f->Piecewise((n ** (-2), n <= 1), (n ** 2, n > 1))
A:sympy.concrete.tests.test_sums_products.S->Sum(x * y, (x, a, b), (y, 1, 4))
A:sympy.concrete.tests.test_sums_products.w->Symbol('w', integer=True)
A:sympy.concrete.tests.test_sums_products.S3->Sum(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_sums_products.s1->Product(n, (n, lo, hi))
A:sympy.concrete.tests.test_sums_products.s2->Product(n, (n, hi, lo))
A:sympy.concrete.tests.test_sums_products.result->Sum(A, (n, 0, 3)).doit()
A:sympy.concrete.tests.test_sums_products.(i, k, q)->symbols('i k q', integer=True)
A:sympy.concrete.tests.test_sums_products.B->Matrix([[0, n, 0], [-1, 0, 0], [0, 0, 2]])
A:sympy.concrete.tests.test_sums_products.estr->NS(E, 100)
A:sympy.concrete.tests.test_sums_products.pistr->NS(pi, 100)
A:sympy.concrete.tests.test_sums_products.astr->NS(zeta(3), 100)
A:sympy.concrete.tests.test_sums_products.A->MatrixSymbol('A', 3, 3)
A:sympy.concrete.tests.test_sums_products.(s, e)->MatrixSymbol('A', 3, 3).euler_maclaurin(mi, ni)
A:sympy.concrete.tests.test_sums_products.nz->symbols('nz', nonzero=True)
A:sympy.concrete.tests.test_sums_products.r->Indexed('r', i)
A:sympy.concrete.tests.test_sums_products.nmax->symbols('N', integer=True, positive=True)
A:sympy.concrete.tests.test_sums_products.pw->Piecewise((1, And(1 <= n, n <= nmax)), (0, True))
A:sympy.concrete.tests.test_sums_products.(q, s)->symbols('q, s')
A:sympy.concrete.tests.test_sums_products.m->Symbol('m', nonnegative=True, integer=True)
A:sympy.concrete.tests.test_sums_products.(A, B)->symbols('A B', commutative=False)
A:sympy.concrete.tests.test_sums_products.p->symbols('p', positive=True)
A:sympy.concrete.tests.test_sums_products.M->Symbol('M', negative=True)
A:sympy.concrete.tests.test_sums_products.(y, t, v)->symbols('y, t, v')
A:sympy.concrete.tests.test_sums_products.(b, v, w)->symbols('b, v, w', integer=True)
A:sympy.concrete.tests.test_sums_products.(b, y, c, d, z)->symbols('b, y, c, d, z', integer=True)
A:sympy.concrete.tests.test_sums_products._x->Symbol('x', zero=False)
A:sympy.concrete.tests.test_sums_products.(_a, _n)->symbols('a n', positive=True)
A:sympy.concrete.tests.test_sums_products.(n, k)->symbols('n k', positive=True, integer=True)
A:sympy.concrete.tests.test_sums_products.res->diag(1, 15, -20)
A:sympy.concrete.tests.test_sums_products.ans->C(x, (x, 0, 3))
A:sympy.concrete.tests.test_sums_products.ans2->Piecewise((n * p, x), (factorial(n) * Sum(p ** k * (1 - p) ** (-k + n) / (factorial(-k + n) * factorial(k - 1)), (k, 0, n)), True)).subs(x, (Eq(n, 1) | (n > 1)) & (p / Abs(p - 1) <= 1))
A:sympy.concrete.tests.test_sums_products.(i, k, m)->symbols('i k m', integer=True)
A:sympy.concrete.tests.test_sums_products.(z_i, q_i)->symbols('z_i q_i')
A:sympy.concrete.tests.test_sums_products.a_k->Sum(-q_i * z_i / k, (i, 1, m))
A:sympy.concrete.tests.test_sums_products.b_k->Sum(-q_i * z_i / k, (i, 1, m)).diff(z_i)
A:sympy.concrete.tests.test_sums_products.cx->Sum(2 * y ** 2 * x, (x, 1, 3))
A:sympy.concrete.tests.test_sums_products.x->Symbol('x')
A:sympy.concrete.tests.test_sums_products.(i, n)->symbols('i n', integer=True)
A:sympy.concrete.tests.test_sums_products.(a, b, c)->symbols('a b c', zero=False)
A:sympy.concrete.tests.test_sums_products.d->_dummy_with_inherited_properties_concrete(Tuple(N, 2, 4))
A:sympy.concrete.tests.test_sums_products.(i, j)->symbols('i,j', positive=True, integer=True)
A:sympy.concrete.tests.test_sums_products.(x, y)->symbols('x,y', positive=True)
A:sympy.concrete.tests.test_sums_products.s_as_product->Sum(binomial(m, k) * binomial(m, n - k) * (-1) ** k, (k, 0, n)).rewrite(Product)
A:sympy.concrete.tests.test_sums_products.s5->Sum(binomial(m, k) * binomial(m, n - k) * (-1) ** k, (k, 0, n)).subs(M, 5)
A:sympy.concrete.tests.test_sums_products.s5_as_product->Sum(binomial(m, k) * binomial(m, n - k) * (-1) ** k, (k, 0, n)).subs(M, 5).rewrite(Product)
A:sympy.concrete.tests.test_sums_products.(n, m)->symbols('n, m', integer=True, positive=True)
A:sympy.concrete.tests.test_sums_products.ssimp->Sum(binomial(m, k) * binomial(m, n - k) * (-1) ** k, (k, 0, n)).doit().simplify()
A:sympy.concrete.tests.test_sums_products.N->Symbol('N', integer=True, positive=True)
A:sympy.concrete.tests.test_sums_products.a->Sum(floor(2 * 2 ** (-i)), (i, S.One, 2))
A:sympy.concrete.tests.test_sums_products.union->Or(x < 1, x > 3).as_set()
A:sympy.concrete.tests.test_sums_products.b->Symbol('b', integer=True, positive=True)
A:sympy.concrete.tests.test_sums_products.(p, q)->symbols('p q', real=True, nonnegative=True)
A:sympy.concrete.tests.test_sums_products.(k1, k2)->symbols('k1 k2', integer=True, nonnegative=True)
A:sympy.concrete.tests.test_sums_products.expr->Sum(abs(k1 - k2) * p ** k1 * (1 - q) ** (n - k2), (k1, 0, n), (k2, 0, n))
sympy.concrete.tests.test_sums_products.NS(e,n=15,**options)
sympy.concrete.tests.test_sums_products.test_Product_doit()
sympy.concrete.tests.test_sums_products.test_Sum_doit()
sympy.concrete.tests.test_sums_products.test_Sum_dummy_eq()
sympy.concrete.tests.test_sums_products.test_Sum_interface()
sympy.concrete.tests.test_sums_products.test__dummy_with_inherited_properties_concrete()
sympy.concrete.tests.test_sums_products.test_arithmetic_sums()
sympy.concrete.tests.test_sums_products.test_change_index()
sympy.concrete.tests.test_sums_products.test_composite_sums()
sympy.concrete.tests.test_sums_products.test_conjugate_transpose()
sympy.concrete.tests.test_sums_products.test_convergent_failing()
sympy.concrete.tests.test_sums_products.test_diff()
sympy.concrete.tests.test_sums_products.test_distribution_over_equality()
sympy.concrete.tests.test_sums_products.test_empty_sequence()
sympy.concrete.tests.test_sums_products.test_equality()
sympy.concrete.tests.test_sums_products.test_euler_maclaurin()
sympy.concrete.tests.test_sums_products.test_evalf_euler_maclaurin()
sympy.concrete.tests.test_sums_products.test_evalf_fast_series()
sympy.concrete.tests.test_sums_products.test_evalf_fast_series_issue_4021()
sympy.concrete.tests.test_sums_products.test_evalf_issue_3273()
sympy.concrete.tests.test_sums_products.test_evalf_oo_to_oo()
sympy.concrete.tests.test_sums_products.test_evalf_slow_series()
sympy.concrete.tests.test_sums_products.test_evalf_symbolic()
sympy.concrete.tests.test_sums_products.test_exceptions()
sympy.concrete.tests.test_sums_products.test_expand_with_assumptions()
sympy.concrete.tests.test_sums_products.test_factor_expand_subs()
sympy.concrete.tests.test_sums_products.test_failing_matrix_sum()
sympy.concrete.tests.test_sums_products.test_free_symbols()
sympy.concrete.tests.test_sums_products.test_function_subs()
sympy.concrete.tests.test_sums_products.test_geometric_sums()
sympy.concrete.tests.test_sums_products.test_harmonic_sums()
sympy.concrete.tests.test_sums_products.test_has_empty_sequence()
sympy.concrete.tests.test_sums_products.test_has_finite_limits()
sympy.concrete.tests.test_sums_products.test_has_reversed_limits()
sympy.concrete.tests.test_sums_products.test_hypergeometric_sums()
sympy.concrete.tests.test_sums_products.test_hypersum()
sympy.concrete.tests.test_sums_products.test_indexed_idx_sum()
sympy.concrete.tests.test_sums_products.test_is_absolutely_convergent()
sympy.concrete.tests.test_sums_products.test_is_commutative()
sympy.concrete.tests.test_sums_products.test_is_convergent()
sympy.concrete.tests.test_sums_products.test_is_number()
sympy.concrete.tests.test_sums_products.test_is_zero()
sympy.concrete.tests.test_sums_products.test_issue_10156()
sympy.concrete.tests.test_sums_products.test_issue_10973()
sympy.concrete.tests.test_sums_products.test_issue_14111()
sympy.concrete.tests.test_sums_products.test_issue_14112()
sympy.concrete.tests.test_sums_products.test_issue_14129()
sympy.concrete.tests.test_sums_products.test_issue_14219()
sympy.concrete.tests.test_sums_products.test_issue_14313()
sympy.concrete.tests.test_sums_products.test_issue_14484()
sympy.concrete.tests.test_sums_products.test_issue_14563()
sympy.concrete.tests.test_sums_products.test_issue_14640()
sympy.concrete.tests.test_sums_products.test_issue_14871()
sympy.concrete.tests.test_sums_products.test_issue_15852()
sympy.concrete.tests.test_sums_products.test_issue_15943()
sympy.concrete.tests.test_sums_products.test_issue_16735()
sympy.concrete.tests.test_sums_products.test_issue_17165()
sympy.concrete.tests.test_sums_products.test_issue_19379()
sympy.concrete.tests.test_sums_products.test_issue_20777()
sympy.concrete.tests.test_sums_products.test_issue_21651()
sympy.concrete.tests.test_sums_products.test_issue_23952()
sympy.concrete.tests.test_sums_products.test_issue_2787()
sympy.concrete.tests.test_sums_products.test_issue_4170()
sympy.concrete.tests.test_sums_products.test_issue_4171()
sympy.concrete.tests.test_sums_products.test_issue_4668()
sympy.concrete.tests.test_sums_products.test_issue_6273()
sympy.concrete.tests.test_sums_products.test_issue_6274()
sympy.concrete.tests.test_sums_products.test_issue_6966()
sympy.concrete.tests.test_sums_products.test_issue_7097()
sympy.concrete.tests.test_sums_products.test_issue_8016()
sympy.concrete.tests.test_sums_products.test_karr_convention()
sympy.concrete.tests.test_sums_products.test_karr_proposition_2a()
sympy.concrete.tests.test_sums_products.test_karr_proposition_2b()
sympy.concrete.tests.test_sums_products.test_limit_subs()
sympy.concrete.tests.test_sums_products.test_matrix_sum()
sympy.concrete.tests.test_sums_products.test_matrixsymbol_summation_numerical_limits()
sympy.concrete.tests.test_sums_products.test_matrixsymbol_summation_symbolic_limits()
sympy.concrete.tests.test_sums_products.test_noncommutativity_honoured()
sympy.concrete.tests.test_sums_products.test_other_sums()
sympy.concrete.tests.test_sums_products.test_polynomial_sums()
sympy.concrete.tests.test_sums_products.test_pr_22677()
sympy.concrete.tests.test_sums_products.test_process_limits()
sympy.concrete.tests.test_sums_products.test_rational_products()
sympy.concrete.tests.test_sums_products.test_reorder()
sympy.concrete.tests.test_sums_products.test_reverse_order()
sympy.concrete.tests.test_sums_products.test_simple_products()
sympy.concrete.tests.test_sums_products.test_simplify_sum()
sympy.concrete.tests.test_sums_products.test_sin_times_absolutely_convergent()
sympy.concrete.tests.test_sums_products.test_sum_reconstruct()
sympy.concrete.tests.test_sums_products.test_summation_by_residues()
sympy.concrete.tests.test_sums_products.test_summation_by_residues_failing()
sympy.concrete.tests.test_sums_products.test_sumproducts_assumptions()
sympy.concrete.tests.test_sums_products.test_telescopic_sums()
sympy.concrete.tests.test_sums_products.test_wallis_product()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/tests/test_guess.py----------------------------------------
A:sympy.concrete.tests.test_guess.a->Function('a')
A:sympy.concrete.tests.test_guess.n->Symbol('n')
A:sympy.concrete.tests.test_guess.f->Function('a')
A:sympy.concrete.tests.test_guess.i->Symbol('n')
A:sympy.concrete.tests.test_guess.x->Symbol('x')
A:sympy.concrete.tests.test_guess.(i0, i1)->symbols('i0 i1')
A:sympy.concrete.tests.test_guess.(x, y)->symbols('x y')
sympy.concrete.tests.test_guess.test_find_simple_recurrence()
sympy.concrete.tests.test_guess.test_find_simple_recurrence_vector()
sympy.concrete.tests.test_guess.test_guess()
sympy.concrete.tests.test_guess.test_guess_generating_function()
sympy.concrete.tests.test_guess.test_guess_generating_function_rational()
sympy.concrete.tests.test_guess.test_rationalize()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/concrete/tests/test_delta.py----------------------------------------
A:sympy.concrete.tests.test_delta.(i, j, k, l, m)->symbols('i j k l m', integer=True, finite=True)
A:sympy.concrete.tests.test_delta.(x, y)->symbols('x y', commutative=False)
A:sympy.concrete.tests.test_delta.n->symbols('n', integer=True, nonzero=True)
sympy.concrete.tests.test_delta.test_deltaproduct_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_add_mul_x_y_mul_x_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_basic()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_add_x_kd_add_y_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_add_x_y_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_add_x_y_add_y_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_add_x_y_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_x_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_x_add_y_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_x_add_y_twokd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_x_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_trivial()
sympy.concrete.tests.test_delta.test_deltasummation_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltasummation_add_mul_x_kd_kd()
sympy.concrete.tests.test_delta.test_deltasummation_add_mul_x_y_mul_x_kd()
sympy.concrete.tests.test_delta.test_deltasummation_basic_numerical()
sympy.concrete.tests.test_delta.test_deltasummation_basic_symbolic()
sympy.concrete.tests.test_delta.test_deltasummation_mul_add_x_kd_add_y_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_add_x_y_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_add_x_y_add_y_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_add_x_y_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_x_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_x_add_y_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_x_add_y_twokd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_x_kd()
sympy.concrete.tests.test_delta.test_deltasummation_trivial()
sympy.concrete.tests.test_delta.test_extract_delta()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/util.py----------------------------------------
A:sympy.combinatorics.util.base_len->len(base)
A:sympy.combinatorics.util.used->set()
A:sympy.combinatorics.util.strong_gens_distr->_distribute_gens_by_base(base, strong_gens)
A:sympy.combinatorics.util.(basic_orbits, transversals)->_orbits_transversals_from_bsgs(base, strong_gens_distr)
A:sympy.combinatorics.util.transversals->_orbits_transversals_from_bsgs(base, strong_gens_distr, transversals_only=True)
A:sympy.combinatorics.util.basic_orbits[i]->list(transversals[i].keys())
A:sympy.combinatorics.util.(transversals[i], slps[i])->_orbit_transversal(degree, strong_gens_distr[i], base[i], pairs=True, slp=True)
A:sympy.combinatorics.util.transversals[i]->dict(transversals[i])
A:sympy.combinatorics.util.basic_orbit->_orbit(degree, strong_gens_distr[i], base[i])
A:sympy.combinatorics.util.temp_orbit->_orbit(degree, temp_gens, base[i])
A:sympy.combinatorics.util.h->_af_rmul(_af_invert(u), h)
sympy.combinatorics.util._base_ordering(base,degree)
sympy.combinatorics.util._check_cycles_alt_sym(perm)
sympy.combinatorics.util._distribute_gens_by_base(base,gens)
sympy.combinatorics.util._handle_precomputed_bsgs(base,strong_gens,transversals=None,basic_orbits=None,strong_gens_distr=None)
sympy.combinatorics.util._orbits_transversals_from_bsgs(base,strong_gens_distr,transversals_only=False,slp=False)
sympy.combinatorics.util._remove_gens(base,strong_gens,basic_orbits=None,strong_gens_distr=None)
sympy.combinatorics.util._strip(g,base,orbits,transversals)
sympy.combinatorics.util._strip_af(h,base,orbits,transversals,j,slp=[],slps={})
sympy.combinatorics.util._strong_gens_from_distr(strong_gens_distr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/group_numbers.py----------------------------------------
A:sympy.combinatorics.group_numbers.n->Integer(n)
A:sympy.combinatorics.group_numbers.prime_factors->list(factorint(n).items())
A:sympy.combinatorics.group_numbers.is_abelian->all((a_i < 3 for (p_i, a_i) in prime_factors))
A:sympy.combinatorics.group_numbers.is_cyclic->all((a_i < 2 for (p_i, a_i) in prime_factors))
sympy.combinatorics.group_numbers.is_abelian_number(n)
sympy.combinatorics.group_numbers.is_cyclic_number(n)
sympy.combinatorics.group_numbers.is_nilpotent_number(n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/testutil.py----------------------------------------
A:sympy.combinatorics.testutil.elements->list(self.generate_dimino(af=True))
A:sympy.combinatorics.testutil.strong_gens_distr->_distribute_gens_by_base(base, gens)
A:sympy.combinatorics.testutil.candidate->PermutationGroup(strong_gens_distr[i])
A:sympy.combinatorics.testutil.current_stabilizer->current_stabilizer.stabilizer(base[i]).stabilizer(base[i])
A:sympy.combinatorics.testutil.centr->group.centralizer(arg)
A:sympy.combinatorics.testutil.centr_list->list(centr.generate_dimino(af=True))
A:sympy.combinatorics.testutil.centr_list_naive->_naive_list_centralizer(group, arg, af=True)
A:sympy.combinatorics.testutil.closure->group.normal_closure(arg)
A:sympy.combinatorics.testutil.conjugates->set()
A:sympy.combinatorics.testutil.naive_closure->PermutationGroup(list(conjugates))
A:sympy.combinatorics.testutil.(size, sbase, sgens)->gens_products(*v1)
A:sympy.combinatorics.testutil.dgens->dummy_sgs(dummies, sym, size - 2)
A:sympy.combinatorics.testutil.num_types->len(sym)
A:sympy.combinatorics.testutil.S->PermutationGroup(sgens)
A:sympy.combinatorics.testutil.D->PermutationGroup([Permutation(x) for x in dgens])
A:sympy.combinatorics.testutil.dlist->list(D.generate(af=True))
A:sympy.combinatorics.testutil.st->set()
A:sympy.combinatorics.testutil.h->_af_rmul(g, s)
A:sympy.combinatorics.testutil.q->tuple(_af_rmul(d, h))
A:sympy.combinatorics.testutil.a->list(st)
A:sympy.combinatorics.testutil.items->list(gr.items())
A:sympy.combinatorics.testutil.pvert->_af_invert(pvert)
A:sympy.combinatorics.testutil.g->Permutation(g)
A:sympy.combinatorics.testutil.(base, gens)->get_symmetric_group_sgs(i)
A:sympy.combinatorics.testutil.dummies->list(range(num_indices))
A:sympy.combinatorics.testutil.can->canonicalize(g, dummies, 0, *v)
sympy.combinatorics.testutil._cmp_perm_lists(first,second)
sympy.combinatorics.testutil._naive_list_centralizer(self,other,af=False)
sympy.combinatorics.testutil._verify_bsgs(group,base,gens)
sympy.combinatorics.testutil._verify_centralizer(group,arg,centr=None)
sympy.combinatorics.testutil._verify_normal_closure(group,arg,closure=None)
sympy.combinatorics.testutil.canonicalize_naive(g,dummies,sym,*v)
sympy.combinatorics.testutil.graph_certificate(gr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/subsets.py----------------------------------------
A:sympy.combinatorics.subsets.obj->object.__new__(cls)
A:sympy.combinatorics.subsets.bin_list->Subset.bitlist_from_subset(self.subset, self.superset)
A:sympy.combinatorics.subsets.bits->bin(rank)[2:].rjust(len(superset), '0')
A:sympy.combinatorics.subsets.indices->Subset.subset_indices(self.subset, self.superset)
A:sympy.combinatorics.subsets.unranked_code->sympy.combinatorics.graycode.GrayCode.unrank(self.superset_size, (self.rank_gray + k) % self.cardinality)
A:sympy.combinatorics.subsets.self._rank_binary->int(''.join(Subset.bitlist_from_subset(self.subset, self.superset)), 2)
A:sympy.combinatorics.subsets.self._rank_lex->_ranklex(self, indices, 0, self.superset_size)
A:sympy.combinatorics.subsets.graycode_bitlist->sympy.combinatorics.graycode.GrayCode.unrank(len(superset), rank)
A:sympy.combinatorics.subsets.sb->set(b)
sympy.combinatorics.Subset(cls,subset,superset)
sympy.combinatorics.subsets.Subset(cls,subset,superset)
sympy.combinatorics.subsets.Subset.__eq__(self,other)
sympy.combinatorics.subsets.Subset.bitlist_from_subset(self,subset,superset)
sympy.combinatorics.subsets.Subset.cardinality(self)
sympy.combinatorics.subsets.Subset.iterate_binary(self,k)
sympy.combinatorics.subsets.Subset.iterate_graycode(self,k)
sympy.combinatorics.subsets.Subset.next_binary(self)
sympy.combinatorics.subsets.Subset.next_gray(self)
sympy.combinatorics.subsets.Subset.next_lexicographic(self)
sympy.combinatorics.subsets.Subset.prev_binary(self)
sympy.combinatorics.subsets.Subset.prev_gray(self)
sympy.combinatorics.subsets.Subset.prev_lexicographic(self)
sympy.combinatorics.subsets.Subset.rank_binary(self)
sympy.combinatorics.subsets.Subset.rank_gray(self)
sympy.combinatorics.subsets.Subset.rank_lexicographic(self)
sympy.combinatorics.subsets.Subset.size(self)
sympy.combinatorics.subsets.Subset.subset(self)
sympy.combinatorics.subsets.Subset.subset_from_bitlist(self,super_set,bitlist)
sympy.combinatorics.subsets.Subset.subset_indices(self,subset,superset)
sympy.combinatorics.subsets.Subset.superset(self)
sympy.combinatorics.subsets.Subset.superset_size(self)
sympy.combinatorics.subsets.Subset.unrank_binary(self,rank,superset)
sympy.combinatorics.subsets.Subset.unrank_gray(self,rank,superset)
sympy.combinatorics.subsets.ksubsets(superset,k)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/perm_groups.py----------------------------------------
A:sympy.combinatorics.perm_groups.args->list(uniq([_af_new(list(a)) for a in args]))
A:sympy.combinatorics.perm_groups.degree->max((a.size for a in args))
A:sympy.combinatorics.perm_groups.args[i]->Permutation(args[i], size=degree)
A:sympy.combinatorics.perm_groups.self._generators->list(self.args)
A:sympy.combinatorics.perm_groups.self._r->len(self._generators)
A:sympy.combinatorics.perm_groups.set_self_gens->set(self.generators)
A:sympy.combinatorics.perm_groups.set_other_gens->set(other.generators)
A:sympy.combinatorics.perm_groups.start->list(range(n1))
A:sympy.combinatorics.perm_groups.end->list(range(n1, n1 + n2))
A:sympy.combinatorics.perm_groups.k->Permutation().order()
A:sympy.combinatorics.perm_groups.acc->list(range(deg))
A:sympy.combinatorics.perm_groups.rep_first->self._union_find_rep(first, parents)
A:sympy.combinatorics.perm_groups.rep_second->self._union_find_rep(second, parents)
A:sympy.combinatorics.perm_groups.(transversals, basic_orbits, strong_gens_distr)->_handle_precomputed_bsgs(base, strong_gens, transversals, basic_orbits, strong_gens_distr)
A:sympy.combinatorics.perm_groups.base_len->len(base)
A:sympy.combinatorics.perm_groups.stab_pos->PermutationGroup(strong_gens_distr[pos])
A:sympy.combinatorics.perm_groups.schreier_vector->self.schreier_vector(alpha)
A:sympy.combinatorics.perm_groups.new->PermutationGroup(strong_gens_distr[pos]).random_stab(base[pos + 1], schreier_vector=schreier_vector)
A:sympy.combinatorics.perm_groups.Gamma->set(basic_orbits[pos])
A:sympy.combinatorics.perm_groups.gamma->computed_words[l - 1]._array_form.index(sorted_orbits[l][c[l]])
A:sympy.combinatorics.perm_groups.temp->frozenset([gen[x] for x in b])
A:sympy.combinatorics.perm_groups.el->rmul(x, y)
A:sympy.combinatorics.perm_groups.strong_gens_new->_strong_gens_from_distr(strong_gens_new_distr)
A:sympy.combinatorics.perm_groups.strong_gens_distr->_distribute_gens_by_base(base, strong_gens)
A:sympy.combinatorics.perm_groups.der->self.derived_series()
A:sympy.combinatorics.perm_groups.K->PermutationGroup(intermediate_gens)
A:sympy.combinatorics.perm_groups.base_ordering->_base_ordering(base, degree)
A:sympy.combinatorics.perm_groups.identity->Permutation(n - 1)
A:sympy.combinatorics.perm_groups.transversals[l]->dict(_orbit_transversal(n, strong_gens_distr[l], base[l], pairs=True))
A:sympy.combinatorics.perm_groups.t_len->len(T)
A:sympy.combinatorics.perm_groups.i->[base[l] ^ h for h in h_transversals[l]].index(gamma)
A:sympy.combinatorics.perm_groups.T->homomorphism(G_p, self, G_p.generators, gens)
A:sympy.combinatorics.perm_groups.n->len(C)
A:sympy.combinatorics.perm_groups.A->range(len(A))
A:sympy.combinatorics.perm_groups.orbits->list({tuple(K_beta.orbit(o)) for o in orbit})
A:sympy.combinatorics.perm_groups.num_orbits->len(orbits)
A:sympy.combinatorics.perm_groups.orbit->PermutationGroup(intermediate_gens).orbit(alpha)
A:sympy.combinatorics.perm_groups.orbit_reps_indices[i]->len(long_base)
A:sympy.combinatorics.perm_groups.(base, strong_gens)->self.schreier_sims_incremental()
A:sympy.combinatorics.perm_groups.num_rel_orbits->len(rel_orbits)
A:sympy.combinatorics.perm_groups.transversals[j]->dict(other.orbit_transversal(rep, pairs=True))
A:sympy.combinatorics.perm_groups.gens->PermutationGroup(intermediate_gens).generator_product(perm, original=True)
A:sympy.combinatorics.perm_groups.commutator->rmul(hgen, ggen, ~hgen, ~ggen)
A:sympy.combinatorics.perm_groups.res->_strip(conj, base, basic_orbits, basic_transversals)
A:sympy.combinatorics.perm_groups.g->_sympify(g)
A:sympy.combinatorics.perm_groups.I->set(sorted_I)
A:sympy.combinatorics.perm_groups.h->Z._p_elements_group(p).random()
A:sympy.combinatorics.perm_groups.l->len(primes)
A:sympy.combinatorics.perm_groups.f->GroupHomomorphism(self, K_s_act, images)
A:sympy.combinatorics.perm_groups.factors->factorint(order)
A:sympy.combinatorics.perm_groups.j->basic_orbits[i].index(k)
A:sympy.combinatorics.perm_groups.m->SymmetricPermutationGroup(g.size).order()
A:sympy.combinatorics.perm_groups.(rank, c)->divmod(rank, len(transversals[i]))
A:sympy.combinatorics.perm_groups.nxt->self.commutator(self, current)
A:sympy.combinatorics.perm_groups.set_commutators->set()
A:sympy.combinatorics.perm_groups.rng->list(range(degree))
A:sympy.combinatorics.perm_groups.c->list(range(degree))
A:sympy.combinatorics.perm_groups.ct->tuple(c)
A:sympy.combinatorics.perm_groups.G2->pc_series[1].order()
A:sympy.combinatorics.perm_groups.idn->list(range(self.degree))
A:sympy.combinatorics.perm_groups.ag->_af_rmul(a, g)
A:sympy.combinatorics.perm_groups.ap->_af_rmul(d, ag)
A:sympy.combinatorics.perm_groups.p->Permutation()
A:sympy.combinatorics.perm_groups.self._order->factorial(n)
A:sympy.combinatorics.perm_groups.u->list(reversed(u))
A:sympy.combinatorics.perm_groups.p1->_af_new(p)
A:sympy.combinatorics.perm_groups.self._is_perfect->self.equals(self.derived_subgroup())
A:sympy.combinatorics.perm_groups.H->_sympify(H)
A:sympy.combinatorics.perm_groups.sym_order->_factorial(n)
A:sympy.combinatorics.perm_groups.order->gens[0].order()
A:sympy.combinatorics.perm_groups.N_eps->int(-log(eps) / d_n)
A:sympy.combinatorics.perm_groups.lcs->self.lower_central_series()
A:sympy.combinatorics.perm_groups.new_self->PermGroup(new_self.generators + [Permutation(d_gr - 1)])
A:sympy.combinatorics.perm_groups.gr->PermGroup(gr.generators + [Permutation(d_self - 1)])
A:sympy.combinatorics.perm_groups.v->self.schreier_vector(0)
A:sympy.combinatorics.perm_groups.stab->self.stabilizer(0)
A:sympy.combinatorics.perm_groups.x->choice([1, 2])
A:sympy.combinatorics.perm_groups.block->self.minimal_block([0, x])
A:sympy.combinatorics.perm_groups.(num_block, _)->_number_blocks(block)
A:sympy.combinatorics.perm_groups.ds->self.derived_series()
A:sympy.combinatorics.perm_groups.parents->list(range(n))
A:sympy.combinatorics.perm_groups.delta->sorted(self.orbit(alpha))
A:sympy.combinatorics.perm_groups.this_iteration->set()
A:sympy.combinatorics.perm_groups.new_class->self.conjugacy_class(x)
A:sympy.combinatorics.perm_groups.Z->C.sylow_subgroup(p).center()
A:sympy.combinatorics.perm_groups.(basic_orbits, basic_transversals)->_orbits_transversals_from_bsgs(base, strong_gens_distr)
A:sympy.combinatorics.perm_groups.(temp_base, temp_strong_gens)->C.sylow_subgroup(p).center().schreier_sims_incremental(base, strong_gens)
A:sympy.combinatorics.perm_groups.beta->rand(alpha)
A:sympy.combinatorics.perm_groups._is_alt_sym->self._eval_is_alt_sym_monte_carlo()
A:sympy.combinatorics.perm_groups.primes->list(factors.keys())
A:sympy.combinatorics.perm_groups.self._is_cyclic->all((any((g ** (order // p) != self.identity for g in self.generators)) for (p, e) in factors.items() if e > 1))
A:sympy.combinatorics.perm_groups.stab_gens->_af_new(list(range(degree)))
A:sympy.combinatorics.perm_groups.randomrange->_randrange(seed)
A:sympy.combinatorics.perm_groups.result->rmul(result, p)
A:sympy.combinatorics.perm_groups.rank->randrange(self.order())
A:sympy.combinatorics.perm_groups.s->randrange(r)
A:sympy.combinatorics.perm_groups.t->block_homomorphism(K_s, block)
A:sympy.combinatorics.perm_groups.e->choice([-1, 1])
A:sympy.combinatorics.perm_groups.random_gens[s]->_af_rmul(_af_pow(random_gens[t], e), random_gens[s])
A:sympy.combinatorics.perm_groups.random_gens[r]->_af_rmul(random_gens[s], random_gens[r])
A:sympy.combinatorics.perm_groups.rand->self.random_pr()
A:sympy.combinatorics.perm_groups.schreier->self.schreier_sims_incremental(base=base, slp_dict=True)
A:sympy.combinatorics.perm_groups.(basic_orbits, transversals, slps)->_orbits_transversals_from_bsgs(base, strong_gens_distr, slp=True)
A:sympy.combinatorics.perm_groups.id_af->list(range(degree))
A:sympy.combinatorics.perm_groups.(transversals[i], slps[i])->_orbit_transversal(degree, strong_gens_distr[i], _base[i], pairs=True, af=True, slp=True)
A:sympy.combinatorics.perm_groups.transversals[i]->dict(_orbit_transversal(n, strong_gens_distr[i], base[i], pairs=True))
A:sympy.combinatorics.perm_groups.orbs[i]->list(transversals[i].keys())
A:sympy.combinatorics.perm_groups.g1->_af_rmul(gen._array_form, u_beta)
A:sympy.combinatorics.perm_groups.u1_invdb[gb]->_af_invert(u1)
A:sympy.combinatorics.perm_groups.schreier_gen->_af_rmuln(table_inv[temp], gen, table[b])
A:sympy.combinatorics.perm_groups.(h, j, slp)->_strip_af(schreier_gen, _base, orbs, transversals, i, slp=slp, slps=slps)
A:sympy.combinatorics.perm_groups.(transversals[l], slps[l])->_orbit_transversal(degree, strong_gens_distr[l], _base[l], pairs=True, af=True, slp=True)
A:sympy.combinatorics.perm_groups.orbs[l]->list(transversals[l].keys())
A:sympy.combinatorics.perm_groups.strong_gens_slp->dict(strong_gens_slp)
A:sympy.combinatorics.perm_groups.(h, j)->_strip(g, base, orbs, transversals)
A:sympy.combinatorics.perm_groups.r->len(gens)
A:sympy.combinatorics.perm_groups.G->SymmetricPermutationGroup(g.size)
A:sympy.combinatorics.perm_groups.(basic_orbits, transversals)->_orbits_transversals_from_bsgs(base, strong_gens_distr)
A:sympy.combinatorics.perm_groups.init_subgroup->PermutationGroup([identity])
A:sympy.combinatorics.perm_groups.(res_base, res_strong_gens)->_strip(conj, base, basic_orbits, basic_transversals).schreier_sims_incremental(base=res_base)
A:sympy.combinatorics.perm_groups.res_strong_gens_distr->_distribute_gens_by_base(res_base, res_strong_gens)
A:sympy.combinatorics.perm_groups.orbit_reps[f]->get_reps(temp_orbits)
A:sympy.combinatorics.perm_groups.new_point->computed_words[l](base[l])
A:sympy.combinatorics.perm_groups.new_stab_gens->_stabilizer(degree, res_strong_gens_distr[l], new_point)
A:sympy.combinatorics.perm_groups.orbit_reps[l + 1]->get_reps(orbits)
A:sympy.combinatorics.perm_groups.candidate->computed_words[i](base[i])
A:sympy.combinatorics.perm_groups.computed_words[l]->rmul(computed_words[l - 1], u[l])
A:sympy.combinatorics.perm_groups.temp_point->g(base[l])
A:sympy.combinatorics.perm_groups.temp_orbits->_orbits(degree, res_strong_gens_distr[f])
A:sympy.combinatorics.perm_groups.orb->_orbit(degree, generators, i)
A:sympy.combinatorics.perm_groups.x_order->choice([1, 2]).order()
A:sympy.combinatorics.perm_groups.P->C.sylow_subgroup(p).center()._p_elements_group(p)
A:sympy.combinatorics.perm_groups.gen->Permutation([(j + p ** (i - 1)) % p ** i for j in range(p ** i)])
A:sympy.combinatorics.perm_groups.shift->shift(i, start + i)
A:sympy.combinatorics.perm_groups.Q->block_homomorphism(self, block).invert_subgroup(Q)
A:sympy.combinatorics.perm_groups.nu->block_homomorphism(self, blocks[1])
A:sympy.combinatorics.perm_groups.R->homomorphism(H_p, F, H_p.generators, images, check=False)
A:sympy.combinatorics.perm_groups.(p_group, n)->is_p_group(self)
A:sympy.combinatorics.perm_groups.omega1->list({tuple(K_beta.orbit(o)) for o in orbit}).pop()
A:sympy.combinatorics.perm_groups.omega2->orbits[0].union(*orbits)
A:sympy.combinatorics.perm_groups.mu->block_homomorphism(self, block)
A:sympy.combinatorics.perm_groups.blocks->self.minimal_blocks()
A:sympy.combinatorics.perm_groups.S->self.coset_table(H).sylow_subgroup(p)
A:sympy.combinatorics.perm_groups.g_order->_sympify(g).order()
A:sympy.combinatorics.perm_groups.C->self.coset_table(H)
A:sympy.combinatorics.perm_groups.s_order->self.coset_table(H).sylow_subgroup(p).order()
A:sympy.combinatorics.perm_groups.C_h->self.centralizer(h)
A:sympy.combinatorics.perm_groups.i_a->sorted(self.orbit(alpha)).index(a)
A:sympy.combinatorics.perm_groups.i_d->sorted(self.orbit(alpha)).index(d)
A:sympy.combinatorics.perm_groups.i_gamma->sorted(self.orbit(alpha)).index(gamma)
A:sympy.combinatorics.perm_groups.K_beta->PermutationGroup(intermediate_gens).stabilizer(beta)
A:sympy.combinatorics.perm_groups.union->union.union(K.orbit(r)).union(K.orbit(r))
A:sympy.combinatorics.perm_groups.perm->T(new_rel)
A:sympy.combinatorics.perm_groups.phi->homomorphism(F, self, F.generators, strong_gens)
A:sympy.combinatorics.perm_groups.alpha->frozenset(alpha)
A:sympy.combinatorics.perm_groups.z->new_gens.pop()
A:sympy.combinatorics.perm_groups.K_s->PermutationGroup(intermediate_gens)
A:sympy.combinatorics.perm_groups.orbit_k->PermutationGroup(intermediate_gens).orbit(alpha)
A:sympy.combinatorics.perm_groups.rel->homomorphism(F, self, F.generators, strong_gens).invert(z)
A:sympy.combinatorics.perm_groups.(success, new_rels)->PermutationGroup(list(images.values()))._verify(K_act, f.compose(phi), f(z), d)
A:sympy.combinatorics.perm_groups.(check, block)->PermutationGroup(intermediate_gens)._block_verify(K, alpha)
A:sympy.combinatorics.perm_groups.K_s_act->PermutationGroup(list(images.values()))
A:sympy.combinatorics.perm_groups.K_act->PermutationGroup([f(g) for g in K.generators])
A:sympy.combinatorics.perm_groups.group->FpGroup(F, rels)
A:sympy.combinatorics.perm_groups.len_g->len(gens)
A:sympy.combinatorics.perm_groups.(F, x)->free_group('x')
A:sympy.combinatorics.perm_groups.H_p->_sympify(H).presentation()
A:sympy.combinatorics.perm_groups.len_h->len(H_p.generators)
A:sympy.combinatorics.perm_groups.rels->R(H_p.relators)
A:sympy.combinatorics.perm_groups.G_p->_factor_group_by_rels(G_p, [new_rel])
A:sympy.combinatorics.perm_groups.C_p->_factor_group_by_rels(G_p, [new_rel]).coset_enumeration([], strategy='coset_table', draft=C_p, max_cosets=n, incomplete=True)
A:sympy.combinatorics.perm_groups.C_p.p->list(range(n))
A:sympy.combinatorics.perm_groups.self._fp_presentation->simplify_presentation(G_p)
A:sympy.combinatorics.perm_groups.G1->pc_series[0].order()
A:sympy.combinatorics.perm_groups.sorted_I->list(range(degree))
A:sympy.combinatorics.perm_groups.gen_temp->_af_rmul(gen, table[b])
A:sympy.combinatorics.perm_groups.table_inv[temp]->_af_invert(gen_temp)
A:sympy.combinatorics.perm_groups.deg->_sympify(deg)
A:sympy.combinatorics.perm_groups.obj->sympy.core.Basic.__new__(cls, g, H, G, dir)
A:sympy.combinatorics.perm_groups.dir->Symbol(dir)
sympy.combinatorics.Coset(self,*args,**kwargs)
sympy.combinatorics.PermutationGroup(self,*args,**kwargs)
sympy.combinatorics.SymmetricPermutationGroup(self,*args,**kwargs)
sympy.combinatorics.perm_groups.Coset(self,*args,**kwargs)
sympy.combinatorics.perm_groups.Coset.as_list(self)
sympy.combinatorics.perm_groups.Coset.is_left_coset(self)
sympy.combinatorics.perm_groups.Coset.is_right_coset(self)
sympy.combinatorics.perm_groups.PermutationGroup(self,*args,**kwargs)
sympy.combinatorics.perm_groups.PermutationGroup.__contains__(self,i)
sympy.combinatorics.perm_groups.PermutationGroup.__getitem__(self,i)
sympy.combinatorics.perm_groups.PermutationGroup.__len__(self)
sympy.combinatorics.perm_groups.PermutationGroup.__mul__(self,other)
sympy.combinatorics.perm_groups.PermutationGroup._block_verify(self,L,alpha)
sympy.combinatorics.perm_groups.PermutationGroup._coset_representative(self,g,H)
sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma(cls,primes)
sympy.combinatorics.perm_groups.PermutationGroup._elements(self)
sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo(self,eps=0.05,perms=None)
sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive(self,only_sym=False,only_alt=False)
sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group(self,p)
sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init(self,r,n,_random_prec_n=None)
sympy.combinatorics.perm_groups.PermutationGroup._schreier_sims(self,base=None)
sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym(self,p)
sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge(self,first,second,ranks,parents,not_rep)
sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep(self,num,parents)
sympy.combinatorics.perm_groups.PermutationGroup._verify(H,K,phi,z,alpha)
sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants(self)
sympy.combinatorics.perm_groups.PermutationGroup.base(self)
sympy.combinatorics.perm_groups.PermutationGroup.baseswap(self,base,strong_gens,pos,randomized=False,transversals=None,basic_orbits=None,strong_gens_distr=None)
sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits(self)
sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers(self)
sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals(self)
sympy.combinatorics.perm_groups.PermutationGroup.center(self)
sympy.combinatorics.perm_groups.PermutationGroup.centralizer(self,other)
sympy.combinatorics.perm_groups.PermutationGroup.commutator(self,G,H)
sympy.combinatorics.perm_groups.PermutationGroup.composition_series(self)
sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class(self,x)
sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes(self)
sympy.combinatorics.perm_groups.PermutationGroup.contains(self,g,strict=True)
sympy.combinatorics.perm_groups.PermutationGroup.coset_factor(self,g,factor_index=False)
sympy.combinatorics.perm_groups.PermutationGroup.coset_rank(self,g)
sympy.combinatorics.perm_groups.PermutationGroup.coset_table(self,H)
sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal(self,H)
sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank(self,rank,af=False)
sympy.combinatorics.perm_groups.PermutationGroup.degree(self)
sympy.combinatorics.perm_groups.PermutationGroup.derived_series(self)
sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup(self)
sympy.combinatorics.perm_groups.PermutationGroup.elements(self)
sympy.combinatorics.perm_groups.PermutationGroup.equals(self,other)
sympy.combinatorics.perm_groups.PermutationGroup.generate(self,method='coset',af=False)
sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino(self,af=False)
sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims(self,af=False)
sympy.combinatorics.perm_groups.PermutationGroup.generator_product(self,g,original=False)
sympy.combinatorics.perm_groups.PermutationGroup.generators(self)
sympy.combinatorics.perm_groups.PermutationGroup.identity(self)
sympy.combinatorics.perm_groups.PermutationGroup.index(self,H)
sympy.combinatorics.perm_groups.PermutationGroup.is_abelian(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym(self,eps=0.05,_random_prec=None)
sympy.combinatorics.perm_groups.PermutationGroup.is_alternating(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_dihedral(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_elementary(self,p)
sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_normal(self,gr,strict=True)
sympy.combinatorics.perm_groups.PermutationGroup.is_perfect(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_primitive(self,randomized=True)
sympy.combinatorics.perm_groups.PermutationGroup.is_solvable(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup(self,G,strict=True)
sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_transitive(self,strict=True)
sympy.combinatorics.perm_groups.PermutationGroup.is_trivial(self)
sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series(self)
sympy.combinatorics.perm_groups.PermutationGroup.make_perm(self,n,seed=None)
sympy.combinatorics.perm_groups.PermutationGroup.max_div(self)
sympy.combinatorics.perm_groups.PermutationGroup.minimal_block(self,points)
sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks(self,randomized=True)
sympy.combinatorics.perm_groups.PermutationGroup.normal_closure(self,other,k=10)
sympy.combinatorics.perm_groups.PermutationGroup.orbit(self,alpha,action='tuples')
sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep(self,alpha,beta,schreier_vector=None)
sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal(self,alpha,pairs=False)
sympy.combinatorics.perm_groups.PermutationGroup.orbits(self,rep=False)
sympy.combinatorics.perm_groups.PermutationGroup.order(self)
sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer(self,points,incremental=True)
sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group(self)
sympy.combinatorics.perm_groups.PermutationGroup.presentation(self,eliminate_gens=True)
sympy.combinatorics.perm_groups.PermutationGroup.random(self,af=False)
sympy.combinatorics.perm_groups.PermutationGroup.random_pr(self,gen_count=11,iterations=50,_random_prec=None)
sympy.combinatorics.perm_groups.PermutationGroup.random_stab(self,alpha,schreier_vector=None,_random_prec=None)
sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims(self)
sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental(self,base=None,gens=None,slp_dict=False)
sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random(self,base=None,gens=None,consec_succ=10,_random_prec=None)
sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector(self,alpha)
sympy.combinatorics.perm_groups.PermutationGroup.stabilizer(self,alpha)
sympy.combinatorics.perm_groups.PermutationGroup.strong_gens(self)
sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation(self)
sympy.combinatorics.perm_groups.PermutationGroup.subgroup(self,gens)
sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search(self,prop,base=None,strong_gens=None,tests=None,init_subgroup=None)
sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup(self,p)
sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree(self)
sympy.combinatorics.perm_groups.SymmetricPermutationGroup(self,*args,**kwargs)
sympy.combinatorics.perm_groups.SymmetricPermutationGroup.__contains__(self,i)
sympy.combinatorics.perm_groups.SymmetricPermutationGroup.degree(self)
sympy.combinatorics.perm_groups.SymmetricPermutationGroup.identity(self)
sympy.combinatorics.perm_groups.SymmetricPermutationGroup.order(self)
sympy.combinatorics.perm_groups._orbit(degree,generators,alpha,action='tuples')
sympy.combinatorics.perm_groups._orbit_transversal(degree,generators,alpha,pairs,af=False,slp=False)
sympy.combinatorics.perm_groups._orbits(degree,generators)
sympy.combinatorics.perm_groups._stabilizer(degree,generators,alpha)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/polyhedron.py----------------------------------------
A:sympy.combinatorics.polyhedron.obj->sympy.core.Basic.__new__(cls, *args)
A:sympy.combinatorics.polyhedron.obj._corners->tuple(corners)
A:sympy.combinatorics.polyhedron.obj._faces->FiniteSet(*faces)
A:sympy.combinatorics.polyhedron.obj._pgroup->PermutationGroup(pgroup or [Perm(range(len(corners)))])
A:sympy.combinatorics.polyhedron.corners->list(self.args[0])
A:sympy.combinatorics.polyhedron.output->set()
A:sympy.combinatorics.polyhedron.edge->tuple(sorted([face[i], face[i - 1]]))
A:sympy.combinatorics.polyhedron.self._edges->FiniteSet(*output)
A:sympy.combinatorics.polyhedron.self._corners->tuple(corners)
A:sympy.combinatorics.polyhedron.n->len(ordered_faces[0])
A:sympy.combinatorics.polyhedron.fmap->dict(zip(ordered_faces, range(len(ordered_faces))))
A:sympy.combinatorics.polyhedron.flat_faces->flatten(ordered_faces)
A:sympy.combinatorics.polyhedron.h->polyh.copy()
A:sympy.combinatorics.polyhedron.reorder->unflatten([c[j] for j in flat_faces], n)
A:sympy.combinatorics.polyhedron.tetrahedron->Polyhedron(Tuple(0, 1, 2, 3), Tuple(Tuple(0, 1, 2), Tuple(0, 2, 3), Tuple(0, 1, 3), Tuple(1, 2, 3)), Tuple(Perm(1, 2, 3), Perm(3)(0, 1, 2), Perm(0, 3, 2), Perm(0, 3, 1), Perm(0, 1)(2, 3), Perm(0, 2)(1, 3), Perm(0, 3)(1, 2)))
A:sympy.combinatorics.polyhedron.cube->Polyhedron(Tuple(0, 1, 2, 3, 4, 5, 6, 7), Tuple(Tuple(0, 1, 2, 3), Tuple(0, 1, 5, 4), Tuple(1, 2, 6, 5), Tuple(2, 3, 7, 6), Tuple(0, 3, 7, 4), Tuple(4, 5, 6, 7)), Tuple(Perm(0, 1, 2, 3)(4, 5, 6, 7), Perm(0, 4, 5, 1)(2, 3, 7, 6), Perm(0, 4, 7, 3)(1, 5, 6, 2), Perm(0, 1)(2, 4)(3, 5)(6, 7), Perm(0, 6)(1, 2)(3, 5)(4, 7), Perm(0, 6)(1, 7)(2, 3)(4, 5), Perm(0, 3)(1, 7)(2, 4)(5, 6), Perm(0, 4)(1, 7)(2, 6)(3, 5), Perm(0, 6)(1, 5)(2, 4)(3, 7), Perm(1, 3, 4)(2, 7, 5), Perm(7)(0, 5, 2)(3, 4, 6), Perm(0, 5, 7)(1, 6, 3), Perm(0, 7, 2)(1, 4, 6)))
A:sympy.combinatorics.polyhedron.octahedron->Polyhedron(Tuple(0, 1, 2, 3, 4, 5), Tuple(Tuple(0, 1, 2), Tuple(0, 2, 3), Tuple(0, 3, 4), Tuple(0, 1, 4), Tuple(1, 2, 5), Tuple(2, 3, 5), Tuple(3, 4, 5), Tuple(1, 4, 5)), Tuple(Perm(5)(1, 2, 3, 4), Perm(0, 4, 5, 2), Perm(0, 1, 5, 3), Perm(0, 1)(2, 4)(3, 5), Perm(0, 2)(1, 3)(4, 5), Perm(0, 3)(1, 5)(2, 4), Perm(0, 4)(1, 3)(2, 5), Perm(0, 5)(1, 4)(2, 3), Perm(0, 5)(1, 2)(3, 4), Perm(0, 4, 1)(2, 3, 5), Perm(0, 1, 2)(3, 4, 5), Perm(0, 2, 3)(1, 5, 4), Perm(0, 4, 3)(1, 5, 2)))
A:sympy.combinatorics.polyhedron._f0->Perm([1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15])
A:sympy.combinatorics.polyhedron._f1->Perm([5, 0, 4, 9, 14, 10, 1, 3, 13, 15, 6, 2, 8, 19, 16, 17, 11, 7, 12, 18])
A:sympy.combinatorics.polyhedron.dodecahedron->Polyhedron(Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), Tuple(Tuple(0, 1, 2, 3, 4), Tuple(0, 1, 6, 10, 5), Tuple(1, 2, 7, 11, 6), Tuple(2, 3, 8, 12, 7), Tuple(3, 4, 9, 13, 8), Tuple(0, 4, 9, 14, 5), Tuple(5, 10, 16, 15, 14), Tuple(6, 10, 16, 17, 11), Tuple(7, 11, 17, 18, 12), Tuple(8, 12, 18, 19, 13), Tuple(9, 13, 19, 15, 14), Tuple(15, 16, 17, 18, 19)), Tuple(Perm(0, 1, 2, 3, 4)(5, 6, 7, 8, 9)(10, 11, 12, 13, 14)(15, 16, 17, 18, 19), Perm(0, 5, 10, 6, 1)(2, 4, 14, 16, 11)(3, 9, 15, 17, 7)(8, 13, 19, 18, 12), Perm(0, 10, 17, 12, 3)(1, 6, 11, 7, 2)(4, 5, 16, 18, 8)(9, 14, 15, 19, 13), Perm(0, 6, 17, 19, 9)(1, 11, 18, 13, 4)(2, 7, 12, 8, 3)(5, 10, 16, 15, 14), Perm(0, 2, 12, 19, 14)(1, 7, 18, 15, 5)(3, 8, 13, 9, 4)(6, 11, 17, 16, 10), Perm(0, 4, 9, 14, 5)(1, 3, 13, 15, 10)(2, 8, 19, 16, 6)(7, 12, 18, 17, 11), Perm(0, 1)(2, 5)(3, 10)(4, 6)(7, 14)(8, 16)(9, 11)(12, 15)(13, 17)(18, 19), Perm(0, 7)(1, 2)(3, 6)(4, 11)(5, 12)(8, 10)(9, 17)(13, 16)(14, 18)(15, 19), Perm(0, 12)(1, 8)(2, 3)(4, 7)(5, 18)(6, 13)(9, 11)(10, 19)(14, 17)(15, 16), Perm(0, 8)(1, 13)(2, 9)(3, 4)(5, 12)(6, 19)(7, 14)(10, 18)(11, 15)(16, 17), Perm(0, 4)(1, 9)(2, 14)(3, 5)(6, 13)(7, 15)(8, 10)(11, 19)(12, 16)(17, 18), Perm(0, 5)(1, 14)(2, 15)(3, 16)(4, 10)(6, 9)(7, 19)(8, 17)(11, 13)(12, 18), Perm(0, 11)(1, 6)(2, 10)(3, 16)(4, 17)(5, 7)(8, 15)(9, 18)(12, 14)(13, 19), Perm(0, 18)(1, 12)(2, 7)(3, 11)(4, 17)(5, 19)(6, 8)(9, 16)(10, 13)(14, 15), Perm(0, 18)(1, 19)(2, 13)(3, 8)(4, 12)(5, 17)(6, 15)(7, 9)(10, 16)(11, 14), Perm(0, 13)(1, 19)(2, 15)(3, 14)(4, 9)(5, 8)(6, 18)(7, 16)(10, 12)(11, 17), Perm(0, 16)(1, 15)(2, 19)(3, 18)(4, 17)(5, 10)(6, 14)(7, 13)(8, 12)(9, 11), Perm(0, 18)(1, 17)(2, 16)(3, 15)(4, 19)(5, 12)(6, 11)(7, 10)(8, 14)(9, 13), Perm(0, 15)(1, 19)(2, 18)(3, 17)(4, 16)(5, 14)(6, 13)(7, 12)(8, 11)(9, 10), Perm(0, 17)(1, 16)(2, 15)(3, 19)(4, 18)(5, 11)(6, 10)(7, 14)(8, 13)(9, 12), Perm(0, 19)(1, 18)(2, 17)(3, 16)(4, 15)(5, 13)(6, 12)(7, 11)(8, 10)(9, 14), Perm(1, 4, 5)(2, 9, 10)(3, 14, 6)(7, 13, 16)(8, 15, 11)(12, 19, 17), Perm(19)(0, 6, 2)(3, 5, 11)(4, 10, 7)(8, 14, 17)(9, 16, 12)(13, 15, 18), Perm(0, 11, 8)(1, 7, 3)(4, 6, 12)(5, 17, 13)(9, 10, 18)(14, 16, 19), Perm(0, 7, 13)(1, 12, 9)(2, 8, 4)(5, 11, 19)(6, 18, 14)(10, 17, 15), Perm(0, 3, 9)(1, 8, 14)(2, 13, 5)(6, 12, 15)(7, 19, 10)(11, 18, 16), Perm(0, 14, 10)(1, 9, 16)(2, 13, 17)(3, 19, 11)(4, 15, 6)(7, 8, 18), Perm(0, 16, 7)(1, 10, 11)(2, 5, 17)(3, 14, 18)(4, 15, 12)(8, 9, 19), Perm(0, 16, 13)(1, 17, 8)(2, 11, 12)(3, 6, 18)(4, 10, 19)(5, 15, 9), Perm(0, 11, 15)(1, 17, 14)(2, 18, 9)(3, 12, 13)(4, 7, 19)(5, 6, 16), Perm(0, 8, 15)(1, 12, 16)(2, 18, 10)(3, 19, 5)(4, 13, 14)(6, 7, 17)))
A:sympy.combinatorics.polyhedron.icosahedron->Polyhedron(Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), Tuple(Tuple(0, 1, 2), Tuple(0, 2, 3), Tuple(0, 3, 4), Tuple(0, 4, 5), Tuple(0, 1, 5), Tuple(1, 6, 7), Tuple(1, 2, 7), Tuple(2, 7, 8), Tuple(2, 3, 8), Tuple(3, 8, 9), Tuple(3, 4, 9), Tuple(4, 9, 10), Tuple(4, 5, 10), Tuple(5, 6, 10), Tuple(1, 5, 6), Tuple(6, 7, 11), Tuple(7, 8, 11), Tuple(8, 9, 11), Tuple(9, 10, 11), Tuple(6, 10, 11)), Tuple(Perm(11)(1, 2, 3, 4, 5)(6, 7, 8, 9, 10), Perm(0, 5, 6, 7, 2)(3, 4, 10, 11, 8), Perm(0, 1, 7, 8, 3)(4, 5, 6, 11, 9), Perm(0, 2, 8, 9, 4)(1, 7, 11, 10, 5), Perm(0, 3, 9, 10, 5)(1, 2, 8, 11, 6), Perm(0, 4, 10, 6, 1)(2, 3, 9, 11, 7), Perm(0, 1)(2, 5)(3, 6)(4, 7)(8, 10)(9, 11), Perm(0, 2)(1, 3)(4, 7)(5, 8)(6, 9)(10, 11), Perm(0, 3)(1, 9)(2, 4)(5, 8)(6, 11)(7, 10), Perm(0, 4)(1, 9)(2, 10)(3, 5)(6, 8)(7, 11), Perm(0, 5)(1, 4)(2, 10)(3, 6)(7, 9)(8, 11), Perm(0, 6)(1, 5)(2, 10)(3, 11)(4, 7)(8, 9), Perm(0, 7)(1, 2)(3, 6)(4, 11)(5, 8)(9, 10), Perm(0, 8)(1, 9)(2, 3)(4, 7)(5, 11)(6, 10), Perm(0, 9)(1, 11)(2, 10)(3, 4)(5, 8)(6, 7), Perm(0, 10)(1, 9)(2, 11)(3, 6)(4, 5)(7, 8), Perm(0, 11)(1, 6)(2, 10)(3, 9)(4, 8)(5, 7), Perm(0, 11)(1, 8)(2, 7)(3, 6)(4, 10)(5, 9), Perm(0, 11)(1, 10)(2, 9)(3, 8)(4, 7)(5, 6), Perm(0, 11)(1, 7)(2, 6)(3, 10)(4, 9)(5, 8), Perm(0, 11)(1, 9)(2, 8)(3, 7)(4, 6)(5, 10), Perm(0, 5, 1)(2, 4, 6)(3, 10, 7)(8, 9, 11), Perm(0, 1, 2)(3, 5, 7)(4, 6, 8)(9, 10, 11), Perm(0, 2, 3)(1, 8, 4)(5, 7, 9)(6, 11, 10), Perm(0, 3, 4)(1, 8, 10)(2, 9, 5)(6, 7, 11), Perm(0, 4, 5)(1, 3, 10)(2, 9, 6)(7, 8, 11), Perm(0, 10, 7)(1, 5, 6)(2, 4, 11)(3, 9, 8), Perm(0, 6, 8)(1, 7, 2)(3, 5, 11)(4, 10, 9), Perm(0, 7, 9)(1, 11, 4)(2, 8, 3)(5, 6, 10), Perm(0, 8, 10)(1, 7, 6)(2, 11, 5)(3, 9, 4), Perm(0, 9, 6)(1, 3, 11)(2, 8, 7)(4, 10, 5)))
sympy.combinatorics.Polyhedron(cls,corners,faces=(),pgroup=())
sympy.combinatorics.polyhedron.Polyhedron(cls,corners,faces=(),pgroup=())
sympy.combinatorics.polyhedron.Polyhedron.array_form(self)
sympy.combinatorics.polyhedron.Polyhedron.corners(self)
sympy.combinatorics.polyhedron.Polyhedron.cyclic_form(self)
sympy.combinatorics.polyhedron.Polyhedron.edges(self)
sympy.combinatorics.polyhedron.Polyhedron.faces(self)
sympy.combinatorics.polyhedron.Polyhedron.pgroup(self)
sympy.combinatorics.polyhedron.Polyhedron.reset(self)
sympy.combinatorics.polyhedron.Polyhedron.rotate(self,perm)
sympy.combinatorics.polyhedron.Polyhedron.size(self)
sympy.combinatorics.polyhedron._pgroup_calcs()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/graycode.py----------------------------------------
A:sympy.combinatorics.graycode.n->Integer(n)
A:sympy.combinatorics.graycode.obj->sympy.core.Basic.__new__(cls, *args)
A:sympy.combinatorics.graycode.obj._current->sympy.core.Basic.__new__(cls, *args).unrank(n, obj._rank)
A:sympy.combinatorics.graycode.start->GrayCode.unrank(self.n, hints['rank'])
A:sympy.combinatorics.graycode.graycode_bin->gray_to_bin(current)
A:sympy.combinatorics.graycode.self._current->int(current, 2)
A:sympy.combinatorics.graycode.graycode_int->int(''.join(graycode_bin), 2)
A:sympy.combinatorics.graycode.self._rank->int(gray_to_bin(self.current), 2)
sympy.combinatorics.GrayCode(cls,n,*args,**kw_args)
sympy.combinatorics.graycode.GrayCode(cls,n,*args,**kw_args)
sympy.combinatorics.graycode.GrayCode.current(self)
sympy.combinatorics.graycode.GrayCode.generate_gray(self,**hints)
sympy.combinatorics.graycode.GrayCode.n(self)
sympy.combinatorics.graycode.GrayCode.next(self,delta=1)
sympy.combinatorics.graycode.GrayCode.rank(self)
sympy.combinatorics.graycode.GrayCode.selections(self)
sympy.combinatorics.graycode.GrayCode.skip(self)
sympy.combinatorics.graycode.GrayCode.unrank(self,n,rank)
sympy.combinatorics.graycode.bin_to_gray(bin_list)
sympy.combinatorics.graycode.get_subset_from_bitstring(super_set,bitstring)
sympy.combinatorics.graycode.gray_to_bin(bin_list)
sympy.combinatorics.graycode.graycode_subsets(gray_code_set)
sympy.combinatorics.graycode.random_bitstring(n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/generators.py----------------------------------------
A:sympy.combinatorics.generators.gen->rotate_left(gen, 1)
A:sympy.combinatorics.generators.p->Permutation(perm)
A:sympy.combinatorics.generators.faces[f][:, n - i]->Matrix(n, 1, s)
A:sympy.combinatorics.generators.faces[f][:, i - 1]->Matrix(n, 1, s)
A:sympy.combinatorics.generators.faces[f][i - 1, :]->Matrix(1, n, s)
A:sympy.combinatorics.generators.faces[f][n - i, :]->Matrix(1, n, s)
A:sympy.combinatorics.generators.faces[F]->Matrix(n, n, rv)
A:sympy.combinatorics.generators.temp->getr(L, i)
A:sympy.combinatorics.generators.(U, F, R, B, L, D)names->symbols('U, F, R, B, L, D')
A:sympy.combinatorics.generators.faces[names[fi]]->Matrix(n, n, f)
A:sympy.combinatorics.generators.I->list(range(6 * n ** 2))
sympy.combinatorics.alternating(n)
sympy.combinatorics.cyclic(n)
sympy.combinatorics.dihedral(n)
sympy.combinatorics.generators.alternating(n)
sympy.combinatorics.generators.cyclic(n)
sympy.combinatorics.generators.dihedral(n)
sympy.combinatorics.generators.rubik(n)
sympy.combinatorics.generators.rubik_cube_generators()
sympy.combinatorics.generators.symmetric(n)
sympy.combinatorics.symmetric(n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/rewritingsystem_fsm.py----------------------------------------
A:sympy.combinatorics.rewritingsystem_fsm.new_state->State(state_name, self, state_type, rh_rule)
sympy.combinatorics.rewritingsystem_fsm.State(self,name,state_machine,state_type=None,rh_rule=None)
sympy.combinatorics.rewritingsystem_fsm.State.add_transition(self,letter,state)
sympy.combinatorics.rewritingsystem_fsm.StateMachine(self,name,automaton_alphabet)
sympy.combinatorics.rewritingsystem_fsm.StateMachine.__repr__(self)
sympy.combinatorics.rewritingsystem_fsm.StateMachine.add_state(self,state_name,state_type=None,rh_rule=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/prufer.py----------------------------------------
A:sympy.combinatorics.prufer.self._prufer_repr->self.to_prufer(self._tree_repr[:], self.nodes)
A:sympy.combinatorics.prufer.self._tree_repr->self.to_tree(self._prufer_repr[:])
A:sympy.combinatorics.prufer.self._rank->self.prufer_rank()
A:sympy.combinatorics.prufer.d->defaultdict(lambda : 1)
A:sympy.combinatorics.prufer.e->set()
A:sympy.combinatorics.prufer.got->set()
A:sympy.combinatorics.prufer.L->defaultdict(int)
A:sympy.combinatorics.prufer.ret_obj->sympy.core.Basic.__new__(cls, *args, **kw_args)
A:sympy.combinatorics.prufer.nodes->set(flatten(args[0]))
sympy.combinatorics.Prufer(cls,*args,**kw_args)
sympy.combinatorics.prufer.Prufer(cls,*args,**kw_args)
sympy.combinatorics.prufer.Prufer.edges(*runs)
sympy.combinatorics.prufer.Prufer.next(self,delta=1)
sympy.combinatorics.prufer.Prufer.nodes(self)
sympy.combinatorics.prufer.Prufer.prev(self,delta=1)
sympy.combinatorics.prufer.Prufer.prufer_rank(self)
sympy.combinatorics.prufer.Prufer.prufer_repr(self)
sympy.combinatorics.prufer.Prufer.rank(self)
sympy.combinatorics.prufer.Prufer.size(self)
sympy.combinatorics.prufer.Prufer.to_prufer(tree,n)
sympy.combinatorics.prufer.Prufer.to_tree(prufer)
sympy.combinatorics.prufer.Prufer.tree_repr(self)
sympy.combinatorics.prufer.Prufer.unrank(self,rank,n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/coset_table.py----------------------------------------
A:sympy.combinatorics.coset_table.self.A->list(chain.from_iterable(((gen, gen ** (-1)) for gen in self.fp_group.generators)))
A:sympy.combinatorics.coset_table.self_copy->self.__class__(self.fp_group, self.subgroup)
A:sympy.combinatorics.coset_table.self_copy.p->list(self.p)
A:sympy.combinatorics.coset_table.self_copy.deduction_stack->list(self.deduction_stack)
A:sympy.combinatorics.coset_table.len_table->len(table)
A:sympy.combinatorics.coset_table.r->len(word)
A:sympy.combinatorics.coset_table.gamma->q.pop(0)
A:sympy.combinatorics.coset_table.mu->self.rep(gamma, modified=modified)
A:sympy.combinatorics.coset_table.nu->self.rep(delta, modified=modified)
A:sympy.combinatorics.coset_table.phi->rep(k, modified=modified)
A:sympy.combinatorics.coset_table.psi->rep(lamda, modified=modified)
A:sympy.combinatorics.coset_table.v->max(phi, psi)
A:sympy.combinatorics.coset_table.(alpha, x)->self.deduction_stack.pop()
A:sympy.combinatorics.coset_table.chi->tuple([i for i in range(len(self.p)) if self.p[i] != i])
A:sympy.combinatorics.coset_table.self.p->list(range(gamma + 1))
A:sympy.combinatorics.coset_table.R_c->list(chain.from_iterable(((rel.cyclic_conjugates(), (rel ** (-1)).cyclic_conjugates()) for rel in R_cyc_red)))
A:sympy.combinatorics.coset_table.R_set->R_set.union(conjugate).union(conjugate)
A:sympy.combinatorics.coset_table.C->CosetTable(fp_grp, Y, max_cosets=max_cosets)
sympy.combinatorics.coset_table.CosetTable(self,fp_grp,subgroup,max_cosets=None)
sympy.combinatorics.coset_table.CosetTable.__str__(self)
sympy.combinatorics.coset_table.CosetTable.coincidence(self,alpha,beta,w=None,modified=False)
sympy.combinatorics.coset_table.CosetTable.coincidence_c(self,alpha,beta)
sympy.combinatorics.coset_table.CosetTable.compress(self)
sympy.combinatorics.coset_table.CosetTable.conjugates(self,R)
sympy.combinatorics.coset_table.CosetTable.copy(self)
sympy.combinatorics.coset_table.CosetTable.coset_representative(self,coset)
sympy.combinatorics.coset_table.CosetTable.define(self,alpha,x,modified=False)
sympy.combinatorics.coset_table.CosetTable.define_c(self,alpha,x)
sympy.combinatorics.coset_table.CosetTable.is_complete(self)
sympy.combinatorics.coset_table.CosetTable.look_ahead(self)
sympy.combinatorics.coset_table.CosetTable.merge(self,k,lamda,q,w=None,modified=False)
sympy.combinatorics.coset_table.CosetTable.modified_coincidence(self,alpha,beta,w)
sympy.combinatorics.coset_table.CosetTable.modified_define(self,alpha,x)
sympy.combinatorics.coset_table.CosetTable.modified_merge(self,k,lamda,w,q)
sympy.combinatorics.coset_table.CosetTable.modified_rep(self,k)
sympy.combinatorics.coset_table.CosetTable.modified_scan(self,alpha,w,y,fill=False)
sympy.combinatorics.coset_table.CosetTable.modified_scan_and_fill(self,alpha,w,y)
sympy.combinatorics.coset_table.CosetTable.n(self)
sympy.combinatorics.coset_table.CosetTable.omega(self)
sympy.combinatorics.coset_table.CosetTable.process_deductions(self,R_c_x,R_c_x_inv)
sympy.combinatorics.coset_table.CosetTable.process_deductions_check(self,R_c_x,R_c_x_inv)
sympy.combinatorics.coset_table.CosetTable.rep(self,k,modified=False)
sympy.combinatorics.coset_table.CosetTable.scan(self,alpha,word,y=None,fill=False,modified=False)
sympy.combinatorics.coset_table.CosetTable.scan_and_fill(self,alpha,word)
sympy.combinatorics.coset_table.CosetTable.scan_and_fill_c(self,alpha,word)
sympy.combinatorics.coset_table.CosetTable.scan_c(self,alpha,word)
sympy.combinatorics.coset_table.CosetTable.scan_check(self,alpha,word)
sympy.combinatorics.coset_table.CosetTable.standardize(self)
sympy.combinatorics.coset_table.CosetTable.switch(self,beta,gamma)
sympy.combinatorics.coset_table.coset_enumeration_c(fp_grp,Y,max_cosets=None,draft=None,incomplete=False)
sympy.combinatorics.coset_table.coset_enumeration_r(fp_grp,Y,max_cosets=None,draft=None,incomplete=False,modified=False)
sympy.combinatorics.coset_table.modified_coset_enumeration_r(fp_grp,Y,max_cosets=None,draft=None,incomplete=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/galois.py----------------------------------------
A:sympy.combinatorics.galois.G->PermutationGroup(existing_gens + list(gens))
A:sympy.combinatorics.galois.elts->elts_by_order(G)
A:sympy.combinatorics.galois.S6->match_known_group(S6)
A:sympy.combinatorics.galois.A6->match_known_group(A6)
A:sympy.combinatorics.galois.S6_by_order->elts_by_order(S6)
A:sympy.combinatorics.galois.A4_in_S6->match_known_group(AlternatingGroup(4))
A:sympy.combinatorics.galois.S4m_in_S6->match_known_group(SymmetricGroup(4), alt=False)
A:sympy.combinatorics.galois.S4p_in_S6->match_known_group(SymmetricGroup(4), alt=True)
A:sympy.combinatorics.galois.A4xC2_in_S6->search(A4_in_S6.generators, [2], 24, anti_profile=order_profile(SymmetricGroup(4)))
A:sympy.combinatorics.galois.S4xC2_in_S6->search(S4m_in_S6.generators, [2], 48)
A:sympy.combinatorics.galois.G18_in_S6->search(N_gens, [2], 18)
A:sympy.combinatorics.galois.G36m_in_S6->search(N_gens, [2, 2], 36, alt=False)
A:sympy.combinatorics.galois.G36p_in_S6->search(N_gens, [4], 36, alt=True)
A:sympy.combinatorics.galois.G72_in_S6->search(N_gens, [4, 2], 72)
A:sympy.combinatorics.galois.PSL2F5_in_S6->match_known_group(AlternatingGroup(5))
A:sympy.combinatorics.galois.PGL2F5_in_S6->match_known_group(SymmetricGroup(5))
A:sympy.combinatorics.galois.C6->match_known_group(CyclicGroup(6))
A:sympy.combinatorics.galois.S3->match_known_group(SymmetricGroup(3))
A:sympy.combinatorics.galois.D6->match_known_group(DihedralGroup(6))
sympy.combinatorics.galois.A4_in_S6()
sympy.combinatorics.galois.A4xC2()
sympy.combinatorics.galois.G18()
sympy.combinatorics.galois.G36m()
sympy.combinatorics.galois.G36p()
sympy.combinatorics.galois.G72()
sympy.combinatorics.galois.M20()
sympy.combinatorics.galois.PGL2F5()
sympy.combinatorics.galois.PSL2F5()
sympy.combinatorics.galois.S1TransitiveSubgroups(Enum)
sympy.combinatorics.galois.S1TransitiveSubgroups.get_perm_group(self)
sympy.combinatorics.galois.S2TransitiveSubgroups(Enum)
sympy.combinatorics.galois.S2TransitiveSubgroups.get_perm_group(self)
sympy.combinatorics.galois.S3TransitiveSubgroups(Enum)
sympy.combinatorics.galois.S3TransitiveSubgroups.get_perm_group(self)
sympy.combinatorics.galois.S3_in_S6()
sympy.combinatorics.galois.S4TransitiveSubgroups(Enum)
sympy.combinatorics.galois.S4TransitiveSubgroups.get_perm_group(self)
sympy.combinatorics.galois.S4m()
sympy.combinatorics.galois.S4p()
sympy.combinatorics.galois.S4xC2()
sympy.combinatorics.galois.S5TransitiveSubgroups(Enum)
sympy.combinatorics.galois.S5TransitiveSubgroups.get_perm_group(self)
sympy.combinatorics.galois.S6TransitiveSubgroups(Enum)
sympy.combinatorics.galois.S6TransitiveSubgroups.get_perm_group(self)
sympy.combinatorics.galois.find_transitive_subgroups_of_S6(*targets,print_report=False)
sympy.combinatorics.galois.four_group()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/free_groups.py----------------------------------------
A:sympy.combinatorics.free_groups._free_group->FreeGroup(symbols)
A:sympy.combinatorics.free_groups.symbols->tuple(_parse_symbols(symbols))
A:sympy.combinatorics.free_groups.rank->len(symbols)
A:sympy.combinatorics.free_groups._hash->hash((cls.__name__, symbols, rank))
A:sympy.combinatorics.free_groups.obj->object.__new__(cls)
A:sympy.combinatorics.free_groups.obj.dtype->type('FreeGroupElement', (FreeGroupElement,), {'group': obj})
A:sympy.combinatorics.free_groups.obj.generators->object.__new__(cls)._generators()
A:sympy.combinatorics.free_groups.obj._gens_set->set(obj.generators)
A:sympy.combinatorics.free_groups.self._hash_hash->hash((self.group, frozenset(tuple(self))))
A:sympy.combinatorics.free_groups.n->as_int(n)
A:sympy.combinatorics.free_groups.r->tuple(self.array_form[from_i:to_j])
A:sympy.combinatorics.free_groups.new->new.eliminate_word(sub, _all=_all, inverse=inverse).eliminate_word(sub, _all=_all, inverse=inverse)
A:sympy.combinatorics.free_groups.l->len(other)
A:sympy.combinatorics.free_groups.i->self.copy().subword_index(gen ** (-1))
A:sympy.combinatorics.free_groups.m->len(other)
A:sympy.combinatorics.free_groups.p->group.symbols.index(a[0])
A:sympy.combinatorics.free_groups.q->group.symbols.index(b[0])
A:sympy.combinatorics.free_groups.from_i->max(from_i, 0)
A:sympy.combinatorics.free_groups.to_j->min(len(self), to_j)
A:sympy.combinatorics.free_groups.array_form->letter_form_to_array_form(letter_form, group)
A:sympy.combinatorics.free_groups.gens->self.contains_generators()
A:sympy.combinatorics.free_groups.period1->int(from_i / l)
A:sympy.combinatorics.free_groups.word->self.copy()
A:sympy.combinatorics.free_groups.l1->len(self)
A:sympy.combinatorics.free_groups.l2->len(w)
A:sympy.combinatorics.free_groups.w1->self.identity_cyclic_reduction()
A:sympy.combinatorics.free_groups.w2->w.identity_cyclic_reduction()
A:sympy.combinatorics.free_groups.str1->' '.join(map(str, letter1))
A:sympy.combinatorics.free_groups.str2->' '.join(map(str, letter2))
A:sympy.combinatorics.free_groups.lw->len(self)
A:sympy.combinatorics.free_groups.exp1->abs(word.exponent_syllable(0))
A:sympy.combinatorics.free_groups.exp2->abs(word.exponent_syllable(-1))
A:sympy.combinatorics.free_groups.exp->min(exp1, exp2)
A:sympy.combinatorics.free_groups.(reduced, r1)->self.cyclic_reduction(removed=True)
A:sympy.combinatorics.free_groups.(other, r2)->other.cyclic_reduction(removed=True)
A:sympy.combinatorics.free_groups.prefix->self.subword(0, l)
A:sympy.combinatorics.free_groups.rest->self.subword(l, len(self))
A:sympy.combinatorics.free_groups.a->list(array_form[:])
sympy.combinatorics.free_group(symbols)
sympy.combinatorics.free_groups.FreeGroup(cls,symbols)
sympy.combinatorics.free_groups.FreeGroup.__contains__(self,i)
sympy.combinatorics.free_groups.FreeGroup.__eq__(self,other)
sympy.combinatorics.free_groups.FreeGroup.__getitem__(self,index)
sympy.combinatorics.free_groups.FreeGroup.__hash__(self)
sympy.combinatorics.free_groups.FreeGroup.__len__(self)
sympy.combinatorics.free_groups.FreeGroup.__str__(self)
sympy.combinatorics.free_groups.FreeGroup._generators(group)
sympy.combinatorics.free_groups.FreeGroup.center(self)
sympy.combinatorics.free_groups.FreeGroup.clone(self,symbols=None)
sympy.combinatorics.free_groups.FreeGroup.contains(self,g)
sympy.combinatorics.free_groups.FreeGroup.elements(self)
sympy.combinatorics.free_groups.FreeGroup.identity(self)
sympy.combinatorics.free_groups.FreeGroup.index(self,gen)
sympy.combinatorics.free_groups.FreeGroup.is_abelian(self)
sympy.combinatorics.free_groups.FreeGroup.order(self)
sympy.combinatorics.free_groups.FreeGroup.rank(self)
sympy.combinatorics.free_groups.FreeGroupElement(CantSympify,DefaultPrinting,tuple)
sympy.combinatorics.free_groups.FreeGroupElement.__add__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.__contains__(self,gen)
sympy.combinatorics.free_groups.FreeGroupElement.__eq__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.__ge__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.__getitem__(self,i)
sympy.combinatorics.free_groups.FreeGroupElement.__gt__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.__hash__(self)
sympy.combinatorics.free_groups.FreeGroupElement.__le__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.__len__(self)
sympy.combinatorics.free_groups.FreeGroupElement.__lt__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.__mul__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.__pow__(self,n)
sympy.combinatorics.free_groups.FreeGroupElement.__rtruediv__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.__str__(self)
sympy.combinatorics.free_groups.FreeGroupElement.__truediv__(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.array_form(self)
sympy.combinatorics.free_groups.FreeGroupElement.commutator(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.contains_generators(self)
sympy.combinatorics.free_groups.FreeGroupElement.copy(self)
sympy.combinatorics.free_groups.FreeGroupElement.cyclic_conjugates(self)
sympy.combinatorics.free_groups.FreeGroupElement.cyclic_reduction(self,removed=False)
sympy.combinatorics.free_groups.FreeGroupElement.cyclic_subword(self,from_i,to_j)
sympy.combinatorics.free_groups.FreeGroupElement.eliminate_word(self,gen,by=None,_all=False,inverse=True)
sympy.combinatorics.free_groups.FreeGroupElement.eliminate_words(self,words,_all=False,inverse=True)
sympy.combinatorics.free_groups.FreeGroupElement.exponent_sum(self,gen)
sympy.combinatorics.free_groups.FreeGroupElement.exponent_syllable(self,i)
sympy.combinatorics.free_groups.FreeGroupElement.ext_rep(self)
sympy.combinatorics.free_groups.FreeGroupElement.generator_count(self,gen)
sympy.combinatorics.free_groups.FreeGroupElement.generator_syllable(self,i)
sympy.combinatorics.free_groups.FreeGroupElement.identity_cyclic_reduction(self)
sympy.combinatorics.free_groups.FreeGroupElement.index(self,gen)
sympy.combinatorics.free_groups.FreeGroupElement.inverse(self)
sympy.combinatorics.free_groups.FreeGroupElement.is_cyclic_conjugate(self,w)
sympy.combinatorics.free_groups.FreeGroupElement.is_cyclically_reduced(self)
sympy.combinatorics.free_groups.FreeGroupElement.is_dependent(self,word)
sympy.combinatorics.free_groups.FreeGroupElement.is_identity(self)
sympy.combinatorics.free_groups.FreeGroupElement.is_independent(self,word)
sympy.combinatorics.free_groups.FreeGroupElement.letter_form(self)
sympy.combinatorics.free_groups.FreeGroupElement.letter_form_elm(self)
sympy.combinatorics.free_groups.FreeGroupElement.new(self,init)
sympy.combinatorics.free_groups.FreeGroupElement.number_syllables(self)
sympy.combinatorics.free_groups.FreeGroupElement.order(self)
sympy.combinatorics.free_groups.FreeGroupElement.power_of(self,other)
sympy.combinatorics.free_groups.FreeGroupElement.sub_syllables(self,from_i,to_j)
sympy.combinatorics.free_groups.FreeGroupElement.substituted_word(self,from_i,to_j,by)
sympy.combinatorics.free_groups.FreeGroupElement.subword(self,from_i,to_j,strict=True)
sympy.combinatorics.free_groups.FreeGroupElement.subword_index(self,word,start=0)
sympy.combinatorics.free_groups._parse_symbols(symbols)
sympy.combinatorics.free_groups.free_group(symbols)
sympy.combinatorics.free_groups.letter_form_to_array_form(array_form,group)
sympy.combinatorics.free_groups.vfree_group(symbols)
sympy.combinatorics.free_groups.xfree_group(symbols)
sympy.combinatorics.free_groups.zero_mul_simp(l,index)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tensor_can.py----------------------------------------
A:sympy.combinatorics.tensor_can.a->list(range(ind1[0]))
A:sympy.combinatorics.tensor_can.num_types->len(msym)
A:sympy.combinatorics.tensor_can.k->dx.index(p0)
A:sympy.combinatorics.tensor_can.indices->list(range(num_dummies))
A:sympy.combinatorics.tensor_can.S_transversals->transversal2coset(size, b_S, S_transversals)
A:sympy.combinatorics.tensor_can.idn->list(range(size))
A:sympy.combinatorics.tensor_can.deltab->_orbit(size, sgensx1, b)
A:sympy.combinatorics.tensor_can.md->_min_dummies(dumx, sym, indices)
A:sympy.combinatorics.tensor_can.p_i->min([min([md[h[x]] for x in deltab]) for (s, d, h) in TAB])
A:sympy.combinatorics.tensor_can.(s, d, h)->TAB1.pop()
A:sympy.combinatorics.tensor_can.dg->_af_rmul(d, g)
A:sympy.combinatorics.tensor_can.dginv->_af_invert(dg)
A:sympy.combinatorics.tensor_can.s1->_trace_S(s, j, b, S_transversals)
A:sympy.combinatorics.tensor_can.d1->_trace_D(dg[j], p_i, Dxtrav)
A:sympy.combinatorics.tensor_can.size->len(gens[0])
A:sympy.combinatorics.tensor_can.transversals->get_transversals(base, gens)
A:sympy.combinatorics.tensor_can.h1->_af_rmul(h, sk)
A:sympy.combinatorics.tensor_can.h->_af_rmul(h, s)
A:sympy.combinatorics.tensor_can.res->list(range(size))
A:sympy.combinatorics.tensor_can.fd->list(zip(fixed_slots, free))
A:sympy.combinatorics.tensor_can.num_free->len(free)
A:sympy.combinatorics.tensor_can.mbsgs->get_minimal_bsgs(base_i, gens_i)
A:sympy.combinatorics.tensor_can.can->canonicalize_naive(g, dummies, msym, *v)
A:sympy.combinatorics.tensor_can.(size1, sbase, sgens)->gens_products(*v1)
A:sympy.combinatorics.tensor_can.g1->canonical_free(sbase, sgens, g, num_free)
A:sympy.combinatorics.tensor_can.(size, sbase, sgens)->gens_products(*v1)
A:sympy.combinatorics.tensor_can.map_slots->_get_map_slots(size, pos_free)
A:sympy.combinatorics.tensor_can.transv_red->get_transversals(sbase_red, sgens_red)
A:sympy.combinatorics.tensor_can.g1_red->_af_new(g1_red)
A:sympy.combinatorics.tensor_can.g2->double_coset_can_rep(dummies_red, msym, sbase_red, sgens_red, transv_red, g1_red)
A:sympy.combinatorics.tensor_can.g3->_lift_sgens(size, pos_free, free, g2)
A:sympy.combinatorics.tensor_can.start->list(range(n1))
A:sympy.combinatorics.tensor_can.end->list(range(n1, n1 + n2))
A:sympy.combinatorics.tensor_can.base->list(range(n - 1))
A:sympy.combinatorics.tensor_can.gens->perm_af_direct_product(gens1, gens2, signed)
A:sympy.combinatorics.tensor_can.id_af->list(range(res_size))
A:sympy.combinatorics.tensor_can.stabs->_distribute_gens_by_base(base, gens)
A:sympy.combinatorics.tensor_can.(orbits, transversals)->_orbits_transversals_from_bsgs(base, stabs)
A:sympy.combinatorics.tensor_can.G->PermutationGroup(gens)
A:sympy.combinatorics.tensor_can.(base, gens)->PermutationGroup(gens).schreier_sims_incremental()
A:sympy.combinatorics.tensor_can.H->PermutationGroup(gens).pointwise_stabilizer(free_indices)
A:sympy.combinatorics.tensor_can.(base, sgs)->PermutationGroup(gens).pointwise_stabilizer(free_indices).schreier_sims_incremental()
A:sympy.combinatorics.tensor_can.n->len(list_free_indices)
A:sympy.combinatorics.tensor_can.(res_base, res_gens)->bsgs_direct_product(res_base, res_gens, base, gens, 1)
A:sympy.combinatorics.tensor_can.(base1, gens1)->_get_bsgs(G, base, gens, list_free_indices[i])
A:sympy.combinatorics.tensor_can.res_base->list(res_base)
A:sympy.combinatorics.tensor_can.(res_size, res_base, res_gens)->tensor_gens(*v[0])
A:sympy.combinatorics.tensor_can.(size, base, gens)->tensor_gens(*v[i])
sympy.combinatorics.tensor_can._dumx_remove(dumx,dumx_flat,p0)
sympy.combinatorics.tensor_can._get_map_slots(size,fixed_slots)
sympy.combinatorics.tensor_can._is_minimal_bsgs(base,gens)
sympy.combinatorics.tensor_can._lift_sgens(size,fixed_slots,free,s)
sympy.combinatorics.tensor_can._min_dummies(dummies,sym,indices)
sympy.combinatorics.tensor_can._trace_D(gj,p_i,Dxtrav)
sympy.combinatorics.tensor_can._trace_S(s,j,b,S_cosets)
sympy.combinatorics.tensor_can.bsgs_direct_product(base1,gens1,base2,gens2,signed=True)
sympy.combinatorics.tensor_can.canonical_free(base,gens,g,num_free)
sympy.combinatorics.tensor_can.canonicalize(g,dummies,msym,*v)
sympy.combinatorics.tensor_can.double_coset_can_rep(dummies,sym,b_S,sgens,S_transversals,g)
sympy.combinatorics.tensor_can.dummy_sgs(dummies,sym,n)
sympy.combinatorics.tensor_can.gens_products(*v)
sympy.combinatorics.tensor_can.get_minimal_bsgs(base,gens)
sympy.combinatorics.tensor_can.get_symmetric_group_sgs(n,antisym=False)
sympy.combinatorics.tensor_can.get_transversals(base,gens)
sympy.combinatorics.tensor_can.perm_af_direct_product(gens1,gens2,signed=True)
sympy.combinatorics.tensor_can.tensor_gens(base,gens,list_free_indices,sym=0)
sympy.combinatorics.tensor_can.transversal2coset(size,base,transversal)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/schur_number.py----------------------------------------
A:sympy.combinatorics.schur_number.min_k->math.ceil(math.log(2 * n + 1, 3))
A:sympy.combinatorics.schur_number.number_of_subsets->_schur_subsets_number(n)
A:sympy.combinatorics.schur_number.sum_free_subsets->_generate_next_list(sum_free_subsets, n)
sympy.combinatorics.schur_number.SchurNumber(Function)
sympy.combinatorics.schur_number.SchurNumber.eval(cls,k)
sympy.combinatorics.schur_number.SchurNumber.lower_bound(self)
sympy.combinatorics.schur_number._generate_next_list(current_list,n)
sympy.combinatorics.schur_number._schur_subsets_number(n)
sympy.combinatorics.schur_number.schur_partition(n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/group_constructs.py----------------------------------------
A:sympy.combinatorics.group_constructs.current_num_gens->len(group.generators)
A:sympy.combinatorics.group_constructs.perm_gens->list(uniq([_af_new(list(a)) for a in array_gens]))
sympy.combinatorics.DirectProduct(*groups)
sympy.combinatorics.group_constructs.DirectProduct(*groups)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/permutations.py----------------------------------------
A:sympy.combinatorics.permutations.m->zeros(self.size)
A:sympy.combinatorics.permutations.p0->_af_rmuln(*a[:m // 2])
A:sympy.combinatorics.permutations.p1->_af_rmuln(*a[m // 2:])
A:sympy.combinatorics.permutations.n->len(pi)
A:sympy.combinatorics.permutations.b->list(range(len(a)))
A:sympy.combinatorics.permutations.rv->defaultdict(int)
A:sympy.combinatorics.permutations.big->max([i for i in self.keys() if self[i] != i] + [0])
A:sympy.combinatorics.permutations.size->len(inversion)
A:sympy.combinatorics.permutations.s->s.replace(',', '').replace(',', '')
A:sympy.combinatorics.permutations.args->list(args[0])
A:sympy.combinatorics.permutations.temp->set(temp)
A:sympy.combinatorics.permutations.c->c(*ci)
A:sympy.combinatorics.permutations.aform->list(args)
A:sympy.combinatorics.permutations.p->super().__new__(cls)
A:sympy.combinatorics.permutations.p._size->len(perm)
A:sympy.combinatorics.permutations.a->_af_invert(self._array_form)
A:sympy.combinatorics.permutations.cls->type(self)
A:sympy.combinatorics.permutations.nx->len(x)
A:sympy.combinatorics.permutations.ic->list(zip(i, list(range(len(i)))))
A:sympy.combinatorics.permutations.i->_sympify(i)
A:sympy.combinatorics.permutations.id_perm->list(range(n))
A:sympy.combinatorics.permutations.r->self.rank_nonlex()
A:sympy.combinatorics.permutations.psize->int(ifac(n))
A:sympy.combinatorics.permutations.min->len(a)
A:sympy.combinatorics.permutations.d->rho.index(m)
A:sympy.combinatorics.permutations.par->_af_parity(rho[:m])
A:sympy.combinatorics.permutations.self_prec_mat->self.get_precedence_matrix()
A:sympy.combinatorics.permutations.other_prec_mat->other.get_precedence_matrix()
A:sympy.combinatorics.permutations.self_adj_mat->self.get_adjacency_matrix()
A:sympy.combinatorics.permutations.other_adj_mat->other.get_adjacency_matrix()
A:sympy.combinatorics.permutations.Q->deque(list(range(n)))
A:sympy.combinatorics.permutations.N->list(range(size + 1))
A:sympy.combinatorics.permutations.perm_array->list(range(n))
A:sympy.combinatorics.permutations.l->len(aform)
A:sympy.combinatorics.permutations.cycle_min->min(cycle)
A:sympy.combinatorics.permutations.cycle_max->max(cycle)
A:sympy.combinatorics.permutations.perm->_sympify(perm)
A:sympy.combinatorics.permutations.x->_sympify(x)
A:sympy.combinatorics.permutations.obj->super().__new__(cls, perm, x)
sympy.combinatorics.Cycle(self,*args)
sympy.combinatorics.Permutation(cls,*args,size=None,**kwargs)
sympy.combinatorics.permutations.AppliedPermutation(cls,perm,x,evaluate=None)
sympy.combinatorics.permutations.Cycle(self,*args)
sympy.combinatorics.permutations.Cycle.__iter__(self)
sympy.combinatorics.permutations.Cycle.__missing__(self,arg)
sympy.combinatorics.permutations.Cycle.__repr__(self)
sympy.combinatorics.permutations.Cycle.__str__(self)
sympy.combinatorics.permutations.Cycle.copy(self)
sympy.combinatorics.permutations.Cycle.list(self,size=None)
sympy.combinatorics.permutations.Cycle.size(self)
sympy.combinatorics.permutations.Permutation(cls,*args,size=None,**kwargs)
sympy.combinatorics.permutations.Permutation.__add__(self,other)
sympy.combinatorics.permutations.Permutation.__invert__(self)
sympy.combinatorics.permutations.Permutation.__iter__(self)
sympy.combinatorics.permutations.Permutation.__mul__(self,other)
sympy.combinatorics.permutations.Permutation.__pow__(self,n)
sympy.combinatorics.permutations.Permutation.__repr__(self)
sympy.combinatorics.permutations.Permutation.__rmul__(self,other)
sympy.combinatorics.permutations.Permutation.__rxor__(self,i)
sympy.combinatorics.permutations.Permutation.__sub__(self,other)
sympy.combinatorics.permutations.Permutation.__xor__(self,h)
sympy.combinatorics.permutations.Permutation._af_new(cls,perm)
sympy.combinatorics.permutations.Permutation._hashable_content(self)
sympy.combinatorics.permutations.Permutation.apply(self,i)
sympy.combinatorics.permutations.Permutation.array_form(self)
sympy.combinatorics.permutations.Permutation.ascents(self)
sympy.combinatorics.permutations.Permutation.atoms(self)
sympy.combinatorics.permutations.Permutation.cardinality(self)
sympy.combinatorics.permutations.Permutation.commutator(self,x)
sympy.combinatorics.permutations.Permutation.commutes_with(self,other)
sympy.combinatorics.permutations.Permutation.cycle_structure(self)
sympy.combinatorics.permutations.Permutation.cycles(self)
sympy.combinatorics.permutations.Permutation.cyclic_form(self)
sympy.combinatorics.permutations.Permutation.descents(self)
sympy.combinatorics.permutations.Permutation.from_inversion_vector(cls,inversion)
sympy.combinatorics.permutations.Permutation.from_sequence(self,i,key=None)
sympy.combinatorics.permutations.Permutation.full_cyclic_form(self)
sympy.combinatorics.permutations.Permutation.get_adjacency_distance(self,other)
sympy.combinatorics.permutations.Permutation.get_adjacency_matrix(self)
sympy.combinatorics.permutations.Permutation.get_positional_distance(self,other)
sympy.combinatorics.permutations.Permutation.get_precedence_distance(self,other)
sympy.combinatorics.permutations.Permutation.get_precedence_matrix(self)
sympy.combinatorics.permutations.Permutation.index(self)
sympy.combinatorics.permutations.Permutation.inversion_vector(self)
sympy.combinatorics.permutations.Permutation.inversions(self)
sympy.combinatorics.permutations.Permutation.is_Empty(self)
sympy.combinatorics.permutations.Permutation.is_Identity(self)
sympy.combinatorics.permutations.Permutation.is_Singleton(self)
sympy.combinatorics.permutations.Permutation.is_even(self)
sympy.combinatorics.permutations.Permutation.is_identity(self)
sympy.combinatorics.permutations.Permutation.is_odd(self)
sympy.combinatorics.permutations.Permutation.josephus(cls,m,n,s=1)
sympy.combinatorics.permutations.Permutation.length(self)
sympy.combinatorics.permutations.Permutation.list(self,size=None)
sympy.combinatorics.permutations.Permutation.max(self)
sympy.combinatorics.permutations.Permutation.min(self)
sympy.combinatorics.permutations.Permutation.mul_inv(self,other)
sympy.combinatorics.permutations.Permutation.next_lex(self)
sympy.combinatorics.permutations.Permutation.next_nonlex(self)
sympy.combinatorics.permutations.Permutation.next_trotterjohnson(self)
sympy.combinatorics.permutations.Permutation.order(self)
sympy.combinatorics.permutations.Permutation.parity(self)
sympy.combinatorics.permutations.Permutation.random(cls,n)
sympy.combinatorics.permutations.Permutation.rank(self)
sympy.combinatorics.permutations.Permutation.rank_nonlex(self,inv_perm=None)
sympy.combinatorics.permutations.Permutation.rank_trotterjohnson(self)
sympy.combinatorics.permutations.Permutation.resize(self,n)
sympy.combinatorics.permutations.Permutation.rmul(*args)
sympy.combinatorics.permutations.Permutation.rmul_with_af(cls,*args)
sympy.combinatorics.permutations.Permutation.runs(self)
sympy.combinatorics.permutations.Permutation.signature(self)
sympy.combinatorics.permutations.Permutation.size(self)
sympy.combinatorics.permutations.Permutation.support(self)
sympy.combinatorics.permutations.Permutation.transpositions(self)
sympy.combinatorics.permutations.Permutation.unrank_lex(cls,size,rank)
sympy.combinatorics.permutations.Permutation.unrank_nonlex(self,n,r)
sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson(cls,size,rank)
sympy.combinatorics.permutations._af_commutes_with(a,b)
sympy.combinatorics.permutations._af_invert(a)
sympy.combinatorics.permutations._af_parity(pi)
sympy.combinatorics.permutations._af_pow(a,n)
sympy.combinatorics.permutations._af_rmul(a,b)
sympy.combinatorics.permutations._af_rmuln(*abc)
sympy.combinatorics.permutations._eval_is_eq(lhs,rhs)
sympy.combinatorics.permutations._merge(arr,temp,left,mid,right)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/pc_groups.py----------------------------------------
A:sympy.combinatorics.pc_groups.self.pc_presentation->self.pc_relators()
A:sympy.combinatorics.pc_groups.key->sympy.combinatorics.free_groups.free_group.dtype(key)
A:sympy.combinatorics.pc_groups.w->self.minimal_uncollected_subword(word)
A:sympy.combinatorics.pc_groups.(low, high)->self.subword_index(word, free_group.dtype(w))
A:sympy.combinatorics.pc_groups.word_->sympy.combinatorics.free_groups.free_group.dtype(word_)
A:sympy.combinatorics.pc_groups.word->self.collected_word(w)
A:sympy.combinatorics.pc_groups.s2->sympy.combinatorics.free_groups.free_group.dtype(s2)
A:sympy.combinatorics.pc_groups.l->PermutationGroup([g] + G.generators).generator_product(gens, original=True)
A:sympy.combinatorics.pc_groups.G->PermutationGroup([g] + G.generators)
A:sympy.combinatorics.pc_groups.gens->PermutationGroup([g] + G.generators).generator_product(element, original=True)
A:sympy.combinatorics.pc_groups.exp_vector->self.exponent_vector(element)
A:sympy.combinatorics.pc_groups.depth->self.depth(element)
A:sympy.combinatorics.pc_groups.d->self.depth(h)
A:sympy.combinatorics.pc_groups.g->PermutationGroup([g] + G.generators).pop(0)
A:sympy.combinatorics.pc_groups.h->self._sift(z, g)
sympy.combinatorics.Collector(self,pcgs,pc_series,relative_order,free_group_=None,pc_presentation=None)
sympy.combinatorics.PolycyclicGroup(self,pc_sequence,pc_series,relative_order,collector=None)
sympy.combinatorics.pc_groups.Collector(self,pcgs,pc_series,relative_order,free_group_=None,pc_presentation=None)
sympy.combinatorics.pc_groups.Collector._sift(self,z,g)
sympy.combinatorics.pc_groups.Collector.collected_word(self,word)
sympy.combinatorics.pc_groups.Collector.constructive_membership_test(self,ipcgs,g)
sympy.combinatorics.pc_groups.Collector.depth(self,element)
sympy.combinatorics.pc_groups.Collector.exponent_vector(self,element)
sympy.combinatorics.pc_groups.Collector.induced_pcgs(self,gens)
sympy.combinatorics.pc_groups.Collector.leading_exponent(self,element)
sympy.combinatorics.pc_groups.Collector.map_relation(self,w)
sympy.combinatorics.pc_groups.Collector.minimal_uncollected_subword(self,word)
sympy.combinatorics.pc_groups.Collector.pc_relators(self)
sympy.combinatorics.pc_groups.Collector.relations(self)
sympy.combinatorics.pc_groups.Collector.subword_index(self,word,w)
sympy.combinatorics.pc_groups.PolycyclicGroup(self,pc_sequence,pc_series,relative_order,collector=None)
sympy.combinatorics.pc_groups.PolycyclicGroup.is_prime_order(self)
sympy.combinatorics.pc_groups.PolycyclicGroup.length(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/rewritingsystem.py----------------------------------------
A:sympy.combinatorics.rewritingsystem.self.rules_cache->deque([], 50)
A:sympy.combinatorics.rewritingsystem.generators->list(self.alphabet)
A:sympy.combinatorics.rewritingsystem.self.reduction_automaton->StateMachine('Reduction automaton for ' + repr(self.group), generators)
A:sympy.combinatorics.rewritingsystem.self._is_confluent->self._check_confluence()
A:sympy.combinatorics.rewritingsystem.new_keys->_process_overlap(w, r1, r2, check)
A:sympy.combinatorics.rewritingsystem.s1->s1.subword(0, len(s1) - 1).subword(0, len(s1) - 1)
A:sympy.combinatorics.rewritingsystem.new->new.eliminate_word(r, rules[r], _all=True).eliminate_word(r, rules[r], _all=True)
A:sympy.combinatorics.rewritingsystem.w1->w1.subword(1, len(w1)).subword(1, len(w1))
A:sympy.combinatorics.rewritingsystem.removed->set()
A:sympy.combinatorics.rewritingsystem.added->set()
A:sympy.combinatorics.rewritingsystem.rules->self.rules.copy()
A:sympy.combinatorics.rewritingsystem.v->self.reduce(r, exclude=r)
A:sympy.combinatorics.rewritingsystem.w->self.reduce(rules[r])
A:sympy.combinatorics.rewritingsystem.lhs->list(self.rules.keys())
A:sympy.combinatorics.rewritingsystem.len1->len(r1)
A:sympy.combinatorics.rewritingsystem.len2->len(r2)
A:sympy.combinatorics.rewritingsystem.a->r1.subword(0, len1 - j, strict=False)
A:sympy.combinatorics.rewritingsystem.b->r2.subword(j - len1, j, strict=False)
A:sympy.combinatorics.rewritingsystem.c->r2.subword(j, len2, strict=False)
A:sympy.combinatorics.rewritingsystem.s->self.reduce(s)
A:sympy.combinatorics.rewritingsystem.t->self.reduce(t)
A:sympy.combinatorics.rewritingsystem.overlaps->_overlaps(r1, r2)
A:sympy.combinatorics.rewritingsystem.(r, a)->self._remove_redundancies(changes=True)
A:sympy.combinatorics.rewritingsystem.i->min([lhs.index(s) for s in r])
A:sympy.combinatorics.rewritingsystem.inverse_rules->self._compute_inverse_rules(all_rules)
A:sympy.combinatorics.rewritingsystem.letter_word_array->list(rule.letter_form_elm)
A:sympy.combinatorics.rewritingsystem.len_letter_word_array->len(letter_word_array)
A:sympy.combinatorics.rewritingsystem.automaton_alphabet->set(automaton_alphabet)
A:sympy.combinatorics.rewritingsystem._next->_next.subword(1, len(_next)).subword(1, len(_next))
A:sympy.combinatorics.rewritingsystem.word->word.substituted_word(i - len(next_state_name) + 1, i + 1, subst).substituted_word(i - len(next_state_name) + 1, i + 1, subst)
sympy.combinatorics.rewritingsystem.RewritingSystem(self,group)
sympy.combinatorics.rewritingsystem.RewritingSystem._add_rule(self,r1,r2)
sympy.combinatorics.rewritingsystem.RewritingSystem._add_to_automaton(self,rules)
sympy.combinatorics.rewritingsystem.RewritingSystem._check_confluence(self)
sympy.combinatorics.rewritingsystem.RewritingSystem._compute_inverse_rules(self,rules)
sympy.combinatorics.rewritingsystem.RewritingSystem._init_rules(self)
sympy.combinatorics.rewritingsystem.RewritingSystem._remove_redundancies(self,changes=False)
sympy.combinatorics.rewritingsystem.RewritingSystem.add_rule(self,w1,w2,check=False)
sympy.combinatorics.rewritingsystem.RewritingSystem.construct_automaton(self)
sympy.combinatorics.rewritingsystem.RewritingSystem.is_confluent(self)
sympy.combinatorics.rewritingsystem.RewritingSystem.make_confluent(self,check=False)
sympy.combinatorics.rewritingsystem.RewritingSystem.reduce(self,word,exclude=None)
sympy.combinatorics.rewritingsystem.RewritingSystem.reduce_using_automaton(self,word)
sympy.combinatorics.rewritingsystem.RewritingSystem.set_max(self,n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/fp_groups.py----------------------------------------
A:sympy.combinatorics.fp_groups._fp_group->FpGroup(symbols, relators)
A:sympy.combinatorics.fp_groups.relators->_parse_relators(relators)
A:sympy.combinatorics.fp_groups.self.generators->list({g for g in gens if g != G.identity})
A:sympy.combinatorics.fp_groups.self.dtype->type('FpGroupElement', (FpGroupElement,), {'group': self})
A:sympy.combinatorics.fp_groups.self._rewriting_system->RewritingSystem(self)
A:sympy.combinatorics.fp_groups.(g, rels, _gens)->reidemeister_presentation(self, gens, C=C, homomorphism=True)
A:sympy.combinatorics.fp_groups.(g, rels)->reidemeister_presentation(self, gens, C=C)
A:sympy.combinatorics.fp_groups.g->g.cyclic_reduction().cyclic_reduction()
A:sympy.combinatorics.fp_groups.C->coset_enumeration_r(fp_grp, H)
A:sympy.combinatorics.fp_groups.self._order->self.index([])
A:sympy.combinatorics.fp_groups.(gens, C)->self._finite_index_subgroup()
A:sympy.combinatorics.fp_groups.ind->len(C.table)
A:sympy.combinatorics.fp_groups.used_gens->set()
A:sympy.combinatorics.fp_groups.m->min(m, CosetTable.coset_table_max_limit)
A:sympy.combinatorics.fp_groups.gen->self.most_frequent_generator()
A:sympy.combinatorics.fp_groups.rels->list(filter(lambda rel: rel not in order_1_gens, rels))
A:sympy.combinatorics.fp_groups.rand->self.random()
A:sympy.combinatorics.fp_groups.draft1->self.coset_enumeration(half1, max_cosets=m, draft=draft1, incomplete=True)
A:sympy.combinatorics.fp_groups.draft2->self.coset_enumeration(half2, max_cosets=m, draft=draft2, incomplete=True)
A:sympy.combinatorics.fp_groups.P->PermutationGroup(images)
A:sympy.combinatorics.fp_groups.T->homomorphism(self, P, gens, images, check=False)
A:sympy.combinatorics.fp_groups.(P, T)->self._to_perm_group()
A:sympy.combinatorics.fp_groups.perm_result->getattr(P, method_name)(*args)
A:sympy.combinatorics.fp_groups.other->T(other)
A:sympy.combinatorics.fp_groups.(p, r)->w.eliminate_words(order_1_gens, _all=True).cyclic_reduction(removed=True)
A:sympy.combinatorics.fp_groups.w->w.eliminate_words(order_1_gens, _all=True).eliminate_words(order_1_gens, _all=True)
A:sympy.combinatorics.fp_groups.new->_process(p2 * p1)
A:sympy.combinatorics.fp_groups.(w, r)->w.eliminate_words(order_1_gens, _all=True).eliminate_words(order_1_gens, _all=True).cyclic_reduction(removed=True)
A:sympy.combinatorics.fp_groups.prefix->w.eliminate_words(order_1_gens, _all=True).eliminate_words(order_1_gens, _all=True).subword(0, i)
A:sympy.combinatorics.fp_groups.rest->w.eliminate_words(order_1_gens, _all=True).eliminate_words(order_1_gens, _all=True).subword(i, len(w))
A:sympy.combinatorics.fp_groups.known[rest]->_word_break(rest)
A:sympy.combinatorics.fp_groups.R1_c_list->coset_enumeration_r(fp_grp, H).conjugates(R1)
A:sympy.combinatorics.fp_groups.D->coset_enumeration_r(fp_grp, H).copy()
A:sympy.combinatorics.fp_groups.(gens, rels)->simplify_presentation(gens, rels, change_gens=True)
A:sympy.combinatorics.fp_groups.subs->dict(zip(syms, gens))
A:sympy.combinatorics.fp_groups.contained_gens->list(contained_gens)
A:sympy.combinatorics.fp_groups.k->rel.eliminate_word(g ** (-max_exp), g ** (-(max_exp - exp)), _all=True).exponent_sum(gen)
A:sympy.combinatorics.fp_groups.gen_index->rel.eliminate_word(g ** (-max_exp), g ** (-(max_exp - exp)), _all=True).index(gen ** k)
A:sympy.combinatorics.fp_groups.bk->rel.eliminate_word(g ** (-max_exp), g ** (-(max_exp - exp)), _all=True).subword(gen_index + 1, len(rel))
A:sympy.combinatorics.fp_groups.fw->rel.eliminate_word(g ** (-max_exp), g ** (-(max_exp - exp)), _all=True).subword(0, gen_index)
A:sympy.combinatorics.fp_groups.exp->gcd(exp, exps[g].array_form[0][1])
A:sympy.combinatorics.fp_groups.one_syllables_words->exps.values()
A:sympy.combinatorics.fp_groups.rel->rel.eliminate_word(g ** (-max_exp), g ** (-(max_exp - exp)), _all=True).eliminate_word(g ** (-max_exp), g ** (-(max_exp - exp)), _all=True)
A:sympy.combinatorics.fp_groups.grp_gens->list(free_group(', '.join(y)))
A:sympy.combinatorics.fp_groups.C._schreier_free_group->list(free_group(', '.join(y))).pop(0)
A:sympy.combinatorics.fp_groups.rels[l]->rels[l].eliminate_word(gen, rep_by).eliminate_word(gen, rep_by)
A:sympy.combinatorics.fp_groups.C.schreier_generators->tuple(gens)
A:sympy.combinatorics.fp_groups.C.reidemeister_relators->tuple(rels)
sympy.combinatorics.fp_groups.FpGroup(self,fr_grp,relators)
sympy.combinatorics.fp_groups.FpGroup.__contains__(self,g)
sympy.combinatorics.fp_groups.FpGroup.__str__(self)
sympy.combinatorics.fp_groups.FpGroup._finite_index_subgroup(self,s=None)
sympy.combinatorics.fp_groups.FpGroup._generators(self)
sympy.combinatorics.fp_groups.FpGroup._is_infinite(self)
sympy.combinatorics.fp_groups.FpGroup._perm_group_list(self,method_name,*args)
sympy.combinatorics.fp_groups.FpGroup._perm_property(self,attr)
sympy.combinatorics.fp_groups.FpGroup._to_perm_group(self)
sympy.combinatorics.fp_groups.FpGroup.abelian_invariants(self)
sympy.combinatorics.fp_groups.FpGroup.center(self)
sympy.combinatorics.fp_groups.FpGroup.centralizer(self,other)
sympy.combinatorics.fp_groups.FpGroup.composition_series(self)
sympy.combinatorics.fp_groups.FpGroup.coset_enumeration(self,H,strategy='relator_based',max_cosets=None,draft=None,incomplete=False)
sympy.combinatorics.fp_groups.FpGroup.coset_table(self,H,strategy='relator_based',max_cosets=None,draft=None,incomplete=False)
sympy.combinatorics.fp_groups.FpGroup.derived_series(self)
sympy.combinatorics.fp_groups.FpGroup.derived_subgroup(self)
sympy.combinatorics.fp_groups.FpGroup.elements(self)
sympy.combinatorics.fp_groups.FpGroup.equals(self,word1,word2)
sympy.combinatorics.fp_groups.FpGroup.identity(self)
sympy.combinatorics.fp_groups.FpGroup.index(self,H,strategy='relator_based')
sympy.combinatorics.fp_groups.FpGroup.is_abelian(self)
sympy.combinatorics.fp_groups.FpGroup.is_cyclic(self)
sympy.combinatorics.fp_groups.FpGroup.is_nilpotent(self)
sympy.combinatorics.fp_groups.FpGroup.is_solvable(self)
sympy.combinatorics.fp_groups.FpGroup.lower_central_series(self)
sympy.combinatorics.fp_groups.FpGroup.make_confluent(self)
sympy.combinatorics.fp_groups.FpGroup.most_frequent_generator(self)
sympy.combinatorics.fp_groups.FpGroup.normal_closure(self,other)
sympy.combinatorics.fp_groups.FpGroup.order(self,strategy='relator_based')
sympy.combinatorics.fp_groups.FpGroup.random(self)
sympy.combinatorics.fp_groups.FpGroup.reduce(self,word)
sympy.combinatorics.fp_groups.FpGroup.standardize_coset_table(self)
sympy.combinatorics.fp_groups.FpGroup.subgroup(self,gens,C=None,homomorphism=False)
sympy.combinatorics.fp_groups.FpSubgroup(self,G,gens,normal=False)
sympy.combinatorics.fp_groups.FpSubgroup.__contains__(self,g)
sympy.combinatorics.fp_groups.FpSubgroup.__str__(self)
sympy.combinatorics.fp_groups.FpSubgroup.order(self)
sympy.combinatorics.fp_groups.FpSubgroup.to_FpGroup(self)
sympy.combinatorics.fp_groups._parse_relators(rels)
sympy.combinatorics.fp_groups._simplification_technique_1(rels)
sympy.combinatorics.fp_groups._simplify_relators(rels,identity)
sympy.combinatorics.fp_groups.define_schreier_generators(C,homomorphism=False)
sympy.combinatorics.fp_groups.descendant_subgroups(S,C,R1_c_list,x,R2,N,Y)
sympy.combinatorics.fp_groups.elimination_technique_1(gens,rels,identity)
sympy.combinatorics.fp_groups.elimination_technique_2(C)
sympy.combinatorics.fp_groups.first_in_class(C,Y=())
sympy.combinatorics.fp_groups.fp_group(fr_grp,relators=())
sympy.combinatorics.fp_groups.low_index_subgroups(G,N,Y=())
sympy.combinatorics.fp_groups.reidemeister_presentation(fp_grp,H,C=None,homomorphism=False)
sympy.combinatorics.fp_groups.reidemeister_relators(C)
sympy.combinatorics.fp_groups.rewrite(C,alpha,w)
sympy.combinatorics.fp_groups.simplify_presentation(*args,change_gens=False)
sympy.combinatorics.fp_groups.try_descendant(S,C,R1_c_list,R2,N,alpha,x,beta,Y)
sympy.combinatorics.fp_groups.vfp_group(fr_grpm,relators)
sympy.combinatorics.fp_groups.xfp_group(fr_grp,relators=())


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/homomorphisms.py----------------------------------------
A:sympy.combinatorics.homomorphisms.image->self.image()
A:sympy.combinatorics.homomorphisms.g->self.codomain.reduce(g)
A:sympy.combinatorics.homomorphisms.self._inverses->self._invs()
A:sympy.combinatorics.homomorphisms.self._kernel->self._compute_kernel()
A:sympy.combinatorics.homomorphisms.G_order->simplify_presentation(G).order()
A:sympy.combinatorics.homomorphisms.K->FpSubgroup(G, gens, normal=True)
A:sympy.combinatorics.homomorphisms.i->self.image().order()
A:sympy.combinatorics.homomorphisms.r->simplify_presentation(G).random()
A:sympy.combinatorics.homomorphisms.values->list(set(self.images.values()))
A:sympy.combinatorics.homomorphisms.self._image->FpSubgroup(self.codomain, values)
A:sympy.combinatorics.homomorphisms.gens->list(G.generators)
A:sympy.combinatorics.homomorphisms.im->self.image().order()
A:sympy.combinatorics.homomorphisms.oth->self.codomain.order()
A:sympy.combinatorics.homomorphisms.P->PermutationGroup(gens)
A:sympy.combinatorics.homomorphisms.h_i->self.invert(h)
A:sympy.combinatorics.homomorphisms.images->h_isomorphism.invert(images)
A:sympy.combinatorics.homomorphisms.symbols_to_domain_generators->dict(zip(symbols, domain.generators))
A:sympy.combinatorics.homomorphisms.s->SymmetricGroup(m).equals(_image(r), identity)
A:sympy.combinatorics.homomorphisms.success->SymmetricGroup(m).make_confluent()
A:sympy.combinatorics.homomorphisms.codomain->SymmetricGroup(m)
A:sympy.combinatorics.homomorphisms.omega->list(omega)
A:sympy.combinatorics.homomorphisms.H->simplify_presentation(H)
A:sympy.combinatorics.homomorphisms.H._kernel->PermutationGroup([group.identity])
A:sympy.combinatorics.homomorphisms.n->len(blocks)
A:sympy.combinatorics.homomorphisms.identity->range(m)
A:sympy.combinatorics.homomorphisms.G->simplify_presentation(G)
A:sympy.combinatorics.homomorphisms.g_order->simplify_presentation(G).order()
A:sympy.combinatorics.homomorphisms.h_order->simplify_presentation(H).order()
A:sympy.combinatorics.homomorphisms.(_H, h_isomorphism)->simplify_presentation(H)._to_perm_group()
A:sympy.combinatorics.homomorphisms._images->dict(zip(gens, images))
A:sympy.combinatorics.homomorphisms.T->homomorphism(G, H, G.generators, images, check=False)
sympy.combinatorics.homomorphisms.GroupHomomorphism(self,domain,codomain,images)
sympy.combinatorics.homomorphisms.GroupHomomorphism._apply(self,elem)
sympy.combinatorics.homomorphisms.GroupHomomorphism._compute_kernel(self)
sympy.combinatorics.homomorphisms.GroupHomomorphism._invs(self)
sympy.combinatorics.homomorphisms.GroupHomomorphism.compose(self,other)
sympy.combinatorics.homomorphisms.GroupHomomorphism.image(self)
sympy.combinatorics.homomorphisms.GroupHomomorphism.invert(self,g)
sympy.combinatorics.homomorphisms.GroupHomomorphism.invert_subgroup(self,H)
sympy.combinatorics.homomorphisms.GroupHomomorphism.is_injective(self)
sympy.combinatorics.homomorphisms.GroupHomomorphism.is_isomorphism(self)
sympy.combinatorics.homomorphisms.GroupHomomorphism.is_surjective(self)
sympy.combinatorics.homomorphisms.GroupHomomorphism.is_trivial(self)
sympy.combinatorics.homomorphisms.GroupHomomorphism.kernel(self)
sympy.combinatorics.homomorphisms.GroupHomomorphism.restrict_to(self,H)
sympy.combinatorics.homomorphisms._check_homomorphism(domain,codomain,images)
sympy.combinatorics.homomorphisms.block_homomorphism(group,blocks)
sympy.combinatorics.homomorphisms.group_isomorphism(G,H,isomorphism=True)
sympy.combinatorics.homomorphisms.homomorphism(domain,codomain,gens,images=(),check=True)
sympy.combinatorics.homomorphisms.is_isomorphic(G,H)
sympy.combinatorics.homomorphisms.orbit_homomorphism(group,omega)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/named_groups.py----------------------------------------
A:sympy.combinatorics.named_groups.G->PermutationGroup([gen1, gen2])
A:sympy.combinatorics.named_groups.a->list(range(n))
A:sympy.combinatorics.named_groups.gen->_af_new(a)
A:sympy.combinatorics.named_groups.gen1->_af_new(a)
A:sympy.combinatorics.named_groups.gen2->_af_new(a)
sympy.combinatorics.AbelianGroup(*cyclic_orders)
sympy.combinatorics.AlternatingGroup(n)
sympy.combinatorics.CyclicGroup(n)
sympy.combinatorics.DihedralGroup(n)
sympy.combinatorics.RubikGroup(n)
sympy.combinatorics.SymmetricGroup(n)
sympy.combinatorics.named_groups.AbelianGroup(*cyclic_orders)
sympy.combinatorics.named_groups.AlternatingGroup(n)
sympy.combinatorics.named_groups.CyclicGroup(n)
sympy.combinatorics.named_groups.DihedralGroup(n)
sympy.combinatorics.named_groups.RubikGroup(n)
sympy.combinatorics.named_groups.SymmetricGroup(n)
sympy.combinatorics.named_groups.set_alternating_group_properties(G,n,degree)
sympy.combinatorics.named_groups.set_symmetric_group_properties(G,n,degree)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/partitions.py----------------------------------------
A:sympy.combinatorics.partitions.as_set->set(arg)
A:sympy.combinatorics.partitions.U->Union(*args)
A:sympy.combinatorics.partitions.obj->sympy.core.Basic.__new__(cls, Integer(integer), Tuple(*partition))
A:sympy.combinatorics.partitions.obj.members->tuple(U)
A:sympy.combinatorics.partitions.obj.size->len(U)
A:sympy.combinatorics.partitions.members->tuple(sorted(self.members, key=lambda w: default_sort_key(w, order)))
A:sympy.combinatorics.partitions.self._partition->sorted([sorted(p, key=default_sort_key) for p in self.args])
A:sympy.combinatorics.partitions.other->as_int(other)
A:sympy.combinatorics.partitions.result->RGS_unrank(offset % RGS_enum(self.size), self.size)
A:sympy.combinatorics.partitions.self._rank->RGS_rank(self.RGS)
A:sympy.combinatorics.partitions.partition->flatten([[k] * m for (k, m) in partition])
A:sympy.combinatorics.partitions.integer->as_int(integer)
A:sympy.combinatorics.partitions.obj.partition->list(partition)
A:sympy.combinatorics.partitions.d->zeros(m + 1)
A:sympy.combinatorics.partitions.groups->group(self.partition, multiple=False)
A:sympy.combinatorics.partitions.self._dict->dict(groups)
A:sympy.combinatorics.partitions.n->len(rgs[i + 1:])
A:sympy.combinatorics.partitions.randint->_randint(seed)
A:sympy.combinatorics.partitions.k->randint(1, n)
A:sympy.combinatorics.partitions.mult->randint(1, n // k)
A:sympy.combinatorics.partitions.D->RGS_generalized(rgs_size)
A:sympy.combinatorics.partitions.L[i]->int(rank / v + 1)
A:sympy.combinatorics.partitions.rgs_size->len(rgs)
A:sympy.combinatorics.partitions.m->max(rgs[0:i])
sympy.combinatorics.IntegerPartition(cls,partition,integer=None)
sympy.combinatorics.Partition(cls,*partition)
sympy.combinatorics.RGS_enum(m)
sympy.combinatorics.RGS_rank(rgs)
sympy.combinatorics.RGS_unrank(rank,m)
sympy.combinatorics.partitions.IntegerPartition(cls,partition,integer=None)
sympy.combinatorics.partitions.IntegerPartition.__le__(self,other)
sympy.combinatorics.partitions.IntegerPartition.__lt__(self,other)
sympy.combinatorics.partitions.IntegerPartition.__str__(self)
sympy.combinatorics.partitions.IntegerPartition.as_dict(self)
sympy.combinatorics.partitions.IntegerPartition.as_ferrers(self,char='#')
sympy.combinatorics.partitions.IntegerPartition.conjugate(self)
sympy.combinatorics.partitions.IntegerPartition.next_lex(self)
sympy.combinatorics.partitions.IntegerPartition.prev_lex(self)
sympy.combinatorics.partitions.Partition(cls,*partition)
sympy.combinatorics.partitions.Partition.RGS(self)
sympy.combinatorics.partitions.Partition.__add__(self,other)
sympy.combinatorics.partitions.Partition.__le__(self,other)
sympy.combinatorics.partitions.Partition.__lt__(self,other)
sympy.combinatorics.partitions.Partition.__sub__(self,other)
sympy.combinatorics.partitions.Partition.from_rgs(self,rgs,elements)
sympy.combinatorics.partitions.Partition.partition(self)
sympy.combinatorics.partitions.Partition.rank(self)
sympy.combinatorics.partitions.Partition.sort_key(self,order=None)
sympy.combinatorics.partitions.RGS_enum(m)
sympy.combinatorics.partitions.RGS_generalized(m)
sympy.combinatorics.partitions.RGS_rank(rgs)
sympy.combinatorics.partitions.RGS_unrank(rank,m)
sympy.combinatorics.partitions.random_integer_partition(n,seed=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_graycode.py----------------------------------------
A:sympy.combinatorics.tests.test_graycode.g->GrayCode(2)
A:sympy.combinatorics.tests.test_graycode.a->random_bitstring(5)
sympy.combinatorics.tests.test_graycode.test_graycode()
sympy.combinatorics.tests.test_graycode.test_live_issue_117()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_coset_table.py----------------------------------------
A:sympy.combinatorics.tests.test_coset_table.(F, x, y)->free_group('x, y')
A:sympy.combinatorics.tests.test_coset_table.f->FpGroup(F, [x ** 3, y ** 3, x ** (-1) * y ** (-1) * x * y])
A:sympy.combinatorics.tests.test_coset_table.c->CosetTable(f, [x * y])
A:sympy.combinatorics.tests.test_coset_table.C_r->coset_enumeration_r(M, [a])
A:sympy.combinatorics.tests.test_coset_table.C_c->coset_enumeration_c(f, H)
A:sympy.combinatorics.tests.test_coset_table.(F, r, s, t)->free_group('r, s, t')
A:sympy.combinatorics.tests.test_coset_table.E1->FpGroup(F, [t ** (-1) * r * t * r ** (-2), r ** (-1) * s * r * s ** (-2), s ** (-1) * t * s * t ** (-2)])
A:sympy.combinatorics.tests.test_coset_table.(F, a, b)->free_group('a, b')
A:sympy.combinatorics.tests.test_coset_table.Cox->FpGroup(F, [a ** 6, b ** 6, (a * b) ** 2, (a ** 2 * b ** 2) ** 2, (a ** 3 * b ** 3) ** 5])
A:sympy.combinatorics.tests.test_coset_table.B_2_4->FpGroup(F, [a ** 4, b ** 4, (a * b) ** 4, (a ** (-1) * b) ** 4, (a ** 2 * b) ** 4, (a * b ** 2) ** 4, (a ** 2 * b ** 2) ** 4, (a ** (-1) * b * a * b) ** 4, (a * b ** (-1) * a * b) ** 4])
A:sympy.combinatorics.tests.test_coset_table.M->FpGroup(F, [b ** (-1) * a ** (-1) * b * a * b ** (-1) * a * b * a ** (-2), a ** (-1) * b ** (-1) * a * b * a ** (-1) * b * a * b ** (-2)])
A:sympy.combinatorics.tests.test_coset_table.(F, a, b, c)->free_group('a, b, c')
A:sympy.combinatorics.tests.test_coset_table.C->coset_enumeration_r(f, [x])
A:sympy.combinatorics.tests.test_coset_table.C_m->modified_coset_enumeration_r(f, [x])
sympy.combinatorics.tests.test_coset_table.test_coset_enumeration()
sympy.combinatorics.tests.test_coset_table.test_look_ahead()
sympy.combinatorics.tests.test_coset_table.test_modified_methods()
sympy.combinatorics.tests.test_coset_table.test_scan_1()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_galois.py----------------------------------------
A:sympy.combinatorics.tests.test_galois.G->sympy.combinatorics.galois.S5TransitiveSubgroups.M20.get_perm_group()
A:sympy.combinatorics.tests.test_galois.A4->AlternatingGroup(4)
A:sympy.combinatorics.tests.test_galois.S5->SymmetricGroup(5)
A:sympy.combinatorics.tests.test_galois.A5->AlternatingGroup(5)
A:sympy.combinatorics.tests.test_galois.S6_randomized->find_transitive_subgroups_of_S6(*list(S6TransitiveSubgroups))
A:sympy.combinatorics.tests.test_galois.A6->AlternatingGroup(6)
sympy.combinatorics.tests.test_galois.get_versions_of_S6_subgroup(name)
sympy.combinatorics.tests.test_galois.test_M20()
sympy.combinatorics.tests.test_galois.test_S6_transitive_subgroups()
sympy.combinatorics.tests.test_galois.test_four_group()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_group_numbers.py----------------------------------------
sympy.combinatorics.tests.test_group_numbers.test_is_abelian_number()
sympy.combinatorics.tests.test_group_numbers.test_is_cyclic_number()
sympy.combinatorics.tests.test_group_numbers.test_is_nilpotent_number()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_pc_groups.py----------------------------------------
A:sympy.combinatorics.tests.test_pc_groups.S->SymmetricGroup(11 ** 2).sylow_subgroup(11)
A:sympy.combinatorics.tests.test_pc_groups.G->SymmetricGroup(25).sylow_subgroup(5)
A:sympy.combinatorics.tests.test_pc_groups.PcGroup->Permutation().polycyclic_group()
A:sympy.combinatorics.tests.test_pc_groups.lhs->Permutation()
A:sympy.combinatorics.tests.test_pc_groups.rhs->Permutation()
A:sympy.combinatorics.tests.test_pc_groups.exp->collector.exponent_vector(gen)
A:sympy.combinatorics.tests.test_pc_groups.g->Permutation()
A:sympy.combinatorics.tests.test_pc_groups.gens->list(g.generators)
A:sympy.combinatorics.tests.test_pc_groups.ipcgs->collector.induced_pcgs(gens)
sympy.combinatorics.tests.test_pc_groups.test_exponent_vector()
sympy.combinatorics.tests.test_pc_groups.test_induced_pcgs()
sympy.combinatorics.tests.test_pc_groups.test_pc_presentation()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_schur_number.py----------------------------------------
A:sympy.combinatorics.tests.test_schur_number.random_number_generator->_randint(1000)
A:sympy.combinatorics.tests.test_schur_number.n->symbols('n')
A:sympy.combinatorics.tests.test_schur_number.result->schur_partition(n)
A:sympy.combinatorics.tests.test_schur_number.x->symbols('x')
sympy.combinatorics.tests.test_schur_number._sum_free_test(subset)
sympy.combinatorics.tests.test_schur_number.test_schur_number()
sympy.combinatorics.tests.test_schur_number.test_schur_partition()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_free_groups.py----------------------------------------
A:sympy.combinatorics.tests.test_free_groups.(F, x, y, z)->free_group('x, y, z')
A:sympy.combinatorics.tests.test_free_groups.(x, y, z)->map(Symbol, 'xyz')
A:sympy.combinatorics.tests.test_free_groups.(G, a, b, c)->free_group('a, b, c')
A:sympy.combinatorics.tests.test_free_groups.(e,)->free_group('')
A:sympy.combinatorics.tests.test_free_groups.g->f.copy()
A:sympy.combinatorics.tests.test_free_groups.x1->x.group.dtype(((Symbol('x'), 1),))
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm__hash__()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm__len__()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm__mul__pow__()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_array_form()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_comparison()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_copy()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_eliminate_word()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_ext_rep()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_inverse()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_letter_form()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_methods()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_syllables()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_type_error()
sympy.combinatorics.tests.test_free_groups.test_FreeGroupElm_words()
sympy.combinatorics.tests.test_free_groups.test_FreeGroup__eq__()
sympy.combinatorics.tests.test_free_groups.test_FreeGroup__getitem__()
sympy.combinatorics.tests.test_free_groups.test_FreeGroup__hash__()
sympy.combinatorics.tests.test_free_groups.test_FreeGroup__init__()
sympy.combinatorics.tests.test_free_groups.test_FreeGroup_exponents()
sympy.combinatorics.tests.test_free_groups.test_FreeGroup_generators()
sympy.combinatorics.tests.test_free_groups.test_free_group()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_generators.py----------------------------------------
sympy.combinatorics.tests.test_generators.test_generators()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_util.py----------------------------------------
A:sympy.combinatorics.tests.test_util.perm1->Permutation([[0, 1, 2, 3, 4, 5, 6], [7], [8], [9]])
A:sympy.combinatorics.tests.test_util.perm2->Permutation([[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]])
A:sympy.combinatorics.tests.test_util.perm3->Permutation([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])
A:sympy.combinatorics.tests.test_util.D->DihedralGroup(2)
A:sympy.combinatorics.tests.test_util.member->Permutation([4, 0, 1, 2, 3])
A:sympy.combinatorics.tests.test_util.not_member1->Permutation([0, 1, 4, 3, 2])
A:sympy.combinatorics.tests.test_util.not_member2->Permutation([3, 1, 4, 2, 0])
A:sympy.combinatorics.tests.test_util.identity->Permutation([0, 1, 2, 3, 4])
A:sympy.combinatorics.tests.test_util.res1->_strip(member, D.base, D.basic_orbits, D.basic_transversals)
A:sympy.combinatorics.tests.test_util.res2->_strip(not_member1, D.base, D.basic_orbits, D.basic_transversals)
A:sympy.combinatorics.tests.test_util.res3->_strip(not_member2, D.base, D.basic_orbits, D.basic_transversals)
A:sympy.combinatorics.tests.test_util.S->SymmetricGroup(10)
A:sympy.combinatorics.tests.test_util.strong_gens_distr->_distribute_gens_by_base(base, strong_gens)
A:sympy.combinatorics.tests.test_util.result->_handle_precomputed_bsgs(base, strong_gens)
A:sympy.combinatorics.tests.test_util.base_len->len(base)
A:sympy.combinatorics.tests.test_util.A->AlternatingGroup(7)
A:sympy.combinatorics.tests.test_util.(base, strong_gens)->DihedralGroup(2).schreier_sims_incremental()
A:sympy.combinatorics.tests.test_util.new_gens->_remove_gens(base, strong_gens)
sympy.combinatorics.tests.test_util.test_base_ordering()
sympy.combinatorics.tests.test_util.test_check_cycles_alt_sym()
sympy.combinatorics.tests.test_util.test_distribute_gens_by_base()
sympy.combinatorics.tests.test_util.test_handle_precomputed_bsgs()
sympy.combinatorics.tests.test_util.test_orbits_transversals_from_bsgs()
sympy.combinatorics.tests.test_util.test_remove_gens()
sympy.combinatorics.tests.test_util.test_strip()
sympy.combinatorics.tests.test_util.test_strong_gens_from_distr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_subsets.py----------------------------------------
A:sympy.combinatorics.tests.test_subsets.a->a.prev_lexicographic().prev_lexicographic()
sympy.combinatorics.tests.test_subsets.test_ksubsets()
sympy.combinatorics.tests.test_subsets.test_subset()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_perm_groups.py----------------------------------------
A:sympy.combinatorics.tests.test_perm_groups.a->SymmetricPermutationGroup(5)
A:sympy.combinatorics.tests.test_perm_groups.G->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4))
A:sympy.combinatorics.tests.test_perm_groups.b->Permutation(0, 1)
A:sympy.combinatorics.tests.test_perm_groups.g->Permutation(1, 3)(2, 4)
A:sympy.combinatorics.tests.test_perm_groups.v2->list(G.generate(method='dimino', af=True))
A:sympy.combinatorics.tests.test_perm_groups.p_1->Permutation(0, 1, 3)
A:sympy.combinatorics.tests.test_perm_groups.p_2->Permutation(0, 2, 3)
A:sympy.combinatorics.tests.test_perm_groups.p_3->Permutation(0, 1, 2)
A:sympy.combinatorics.tests.test_perm_groups.p_4->Permutation(0, 1, 3)
A:sympy.combinatorics.tests.test_perm_groups.g_1->PermutationGroup(p_1, p_2)
A:sympy.combinatorics.tests.test_perm_groups.g_2->PermutationGroup(p_3, p_4)
A:sympy.combinatorics.tests.test_perm_groups.g_3->PermutationGroup(p_2, p_1)
A:sympy.combinatorics.tests.test_perm_groups.g_4->PermutationGroup(p_1, p_2)
A:sympy.combinatorics.tests.test_perm_groups.S->SymmetricGroup(3)
A:sympy.combinatorics.tests.test_perm_groups.H->PermutationGroup(Permutation(1, 2, 3, 4))
A:sympy.combinatorics.tests.test_perm_groups.G0->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4)).stabilizer(0)
A:sympy.combinatorics.tests.test_perm_groups.G2->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4)).normal_closure(G1.generators)
A:sympy.combinatorics.tests.test_perm_groups.G2_1->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4)).normal_closure(G1.generators).stabilizer(1)
A:sympy.combinatorics.tests.test_perm_groups.v->Permutation(1, 3)(2, 4).coset_factor(c)
A:sympy.combinatorics.tests.test_perm_groups.D->DihedralGroup(i)
A:sympy.combinatorics.tests.test_perm_groups.A->AlternatingGroup(4)
A:sympy.combinatorics.tests.test_perm_groups.C->CyclicGroup(i)
A:sympy.combinatorics.tests.test_perm_groups.triv->PermutationGroup([Permutation(list(range(i)))])
A:sympy.combinatorics.tests.test_perm_groups.elements->list(S.generate_dimino())
A:sympy.combinatorics.tests.test_perm_groups.rk->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4)).coset_rank(h)
A:sympy.combinatorics.tests.test_perm_groups.h1->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4)).coset_unrank(rk, af=True)
A:sympy.combinatorics.tests.test_perm_groups.c->Permutation(4, 5, 6)
A:sympy.combinatorics.tests.test_perm_groups.d->Permutation([1, 0, 2, 3, 4, 5])
A:sympy.combinatorics.tests.test_perm_groups.p->Permutation(0, 2, 3)(1, 4)
A:sympy.combinatorics.tests.test_perm_groups.(transversal, slps)->_orbit_transversal(G.degree, G.generators, 0, True, slp=True)
A:sympy.combinatorics.tests.test_perm_groups.G1->PermutationGroup(G[:3])
A:sympy.combinatorics.tests.test_perm_groups.G3->PermutationGroup(gens3)
A:sympy.combinatorics.tests.test_perm_groups.G4->PermutationGroup([Permutation([0, 1])])
A:sympy.combinatorics.tests.test_perm_groups.G5->PermutationGroup(gens5)
A:sympy.combinatorics.tests.test_perm_groups.G6->PermutationGroup(G[:3]).normal_closure(G5.generators)
A:sympy.combinatorics.tests.test_perm_groups.I5->PermutationGroup(Permutation(4))
A:sympy.combinatorics.tests.test_perm_groups.p1->Permutation([1, 0, 2, 3, 4])
A:sympy.combinatorics.tests.test_perm_groups.p2->Permutation([0, 1, 2, 4, 3])
A:sympy.combinatorics.tests.test_perm_groups.p3->Permutation([3, 4, 2, 1, 0])
A:sympy.combinatorics.tests.test_perm_groups.id_->Permutation([0, 1, 2, 3, 4])
A:sympy.combinatorics.tests.test_perm_groups.H_n1->PermutationGroup([p1, p2])
A:sympy.combinatorics.tests.test_perm_groups.H_n2_1->PermutationGroup(p1)
A:sympy.combinatorics.tests.test_perm_groups.H_n2_2->PermutationGroup(p2)
A:sympy.combinatorics.tests.test_perm_groups.H_id->PermutationGroup(id_)
A:sympy.combinatorics.tests.test_perm_groups.P->PermutationGroup(c, a, b)
A:sympy.combinatorics.tests.test_perm_groups.gens->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4)).generator_product(p)
A:sympy.combinatorics.tests.test_perm_groups.C1->PermutationGroup(G[:3]).derived_subgroup()
A:sympy.combinatorics.tests.test_perm_groups.L->SymmetricGroup(4)
A:sympy.combinatorics.tests.test_perm_groups.block_system->DihedralGroup(i).minimal_block([0, 3])
A:sympy.combinatorics.tests.test_perm_groups.P1->PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))
A:sympy.combinatorics.tests.test_perm_groups.P2->PermutationGroup(Permutation(0, 1, 2, 3, 4, 5), Permutation(1, 5)(2, 4))
A:sympy.combinatorics.tests.test_perm_groups._random_el->Permutation([1, 3, 2, 0, 4])
A:sympy.combinatorics.tests.test_perm_groups.h->SymmetricGroup(3).random_stab(1)
A:sympy.combinatorics.tests.test_perm_groups.perm->Permutation([1, 2, 0])
A:sympy.combinatorics.tests.test_perm_groups.gen1->rmul(gen0, gen1)
A:sympy.combinatorics.tests.test_perm_groups.gen2->Permutation([1, 2, 3, 4, 0])
A:sympy.combinatorics.tests.test_perm_groups.Alt->SymmetricGroup(3).subgroup_search(prop_even)
A:sympy.combinatorics.tests.test_perm_groups.deterministic->SymmetricGroup(3).baseswap(base, strong_gens, 1, randomized=False)
A:sympy.combinatorics.tests.test_perm_groups.randomized->SymmetricGroup(3).baseswap(base, strong_gens, 1)
A:sympy.combinatorics.tests.test_perm_groups.identity->Permutation([0, 1, 2])
A:sympy.combinatorics.tests.test_perm_groups.TrivialGroup->PermutationGroup([identity])
A:sympy.combinatorics.tests.test_perm_groups.(base, strong_gens)->AlternatingGroup(4).schreier_sims_incremental()
A:sympy.combinatorics.tests.test_perm_groups.gen0->rmul(gen0, gen1)
A:sympy.combinatorics.tests.test_perm_groups.Sym->SymmetricGroup(3).subgroup_search(prop_true, init_subgroup=C)
A:sympy.combinatorics.tests.test_perm_groups.fix35->AlternatingGroup(4).subgroup_search(prop_fix_points)
A:sympy.combinatorics.tests.test_perm_groups.fix5->AlternatingGroup(4).subgroup_search(prop_fix_points)
A:sympy.combinatorics.tests.test_perm_groups.comm_g->AlternatingGroup(4).subgroup_search(prop_comm_g, base=base, strong_gens=strong_gens)
A:sympy.combinatorics.tests.test_perm_groups.closure->SymmetricGroup(3).normal_closure(identity)
A:sympy.combinatorics.tests.test_perm_groups.series->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4)).composition_series()
A:sympy.combinatorics.tests.test_perm_groups.A1->AbelianGroup(2, 5)
A:sympy.combinatorics.tests.test_perm_groups.A2->AbelianGroup(3, 4)
A:sympy.combinatorics.tests.test_perm_groups.Ab->AbelianGroup(5, 7, 10)
A:sympy.combinatorics.tests.test_perm_groups.stab->stab.stabilizer(point).stabilizer(point)
A:sympy.combinatorics.tests.test_perm_groups.ls->SymmetricGroup(3).lower_central_series()
A:sympy.combinatorics.tests.test_perm_groups.length->len(ls)
A:sympy.combinatorics.tests.test_perm_groups.comp_series->PermutationGroup(Permutation(1, 2, 3, 4), Permutation(2, 3, 4)).composition_series()
A:sympy.combinatorics.tests.test_perm_groups.x->Permutation(1, 2, 3)
A:sympy.combinatorics.tests.test_perm_groups.computed->SymmetricGroup(3).conjugacy_classes()
A:sympy.combinatorics.tests.test_perm_groups.list_repr->Coset(g, H, G, dir='+').as_list()
A:sympy.combinatorics.tests.test_perm_groups.rht_coset->Coset(g, H, G, dir='+')
sympy.combinatorics.tests.test_perm_groups._subgroup_search(i,j,k)
sympy.combinatorics.tests.test_perm_groups.test_PermutationGroup()
sympy.combinatorics.tests.test_perm_groups.test_abelian_invariants()
sympy.combinatorics.tests.test_perm_groups.test_baseswap()
sympy.combinatorics.tests.test_perm_groups.test_center()
sympy.combinatorics.tests.test_perm_groups.test_centralizer()
sympy.combinatorics.tests.test_perm_groups.test_commutator()
sympy.combinatorics.tests.test_perm_groups.test_composition_series()
sympy.combinatorics.tests.test_perm_groups.test_conjugacy_class()
sympy.combinatorics.tests.test_perm_groups.test_conjugacy_classes()
sympy.combinatorics.tests.test_perm_groups.test_coset_class()
sympy.combinatorics.tests.test_perm_groups.test_coset_factor()
sympy.combinatorics.tests.test_perm_groups.test_coset_rank()
sympy.combinatorics.tests.test_perm_groups.test_coset_table()
sympy.combinatorics.tests.test_perm_groups.test_coset_transvesal()
sympy.combinatorics.tests.test_perm_groups.test_cyclic()
sympy.combinatorics.tests.test_perm_groups.test_derived_series()
sympy.combinatorics.tests.test_perm_groups.test_derived_subgroup()
sympy.combinatorics.tests.test_perm_groups.test_dihedral()
sympy.combinatorics.tests.test_perm_groups.test_direct_product()
sympy.combinatorics.tests.test_perm_groups.test_elementary()
sympy.combinatorics.tests.test_perm_groups.test_elements()
sympy.combinatorics.tests.test_perm_groups.test_eq()
sympy.combinatorics.tests.test_perm_groups.test_equality()
sympy.combinatorics.tests.test_perm_groups.test_generate()
sympy.combinatorics.tests.test_perm_groups.test_generator_product()
sympy.combinatorics.tests.test_perm_groups.test_has()
sympy.combinatorics.tests.test_perm_groups.test_index()
sympy.combinatorics.tests.test_perm_groups.test_is_alt_sym()
sympy.combinatorics.tests.test_perm_groups.test_is_group()
sympy.combinatorics.tests.test_perm_groups.test_is_nilpotent()
sympy.combinatorics.tests.test_perm_groups.test_is_normal()
sympy.combinatorics.tests.test_perm_groups.test_is_primitive()
sympy.combinatorics.tests.test_perm_groups.test_is_solvable()
sympy.combinatorics.tests.test_perm_groups.test_is_symmetric()
sympy.combinatorics.tests.test_perm_groups.test_is_trivial()
sympy.combinatorics.tests.test_perm_groups.test_lower_central_series()
sympy.combinatorics.tests.test_perm_groups.test_make_perm()
sympy.combinatorics.tests.test_perm_groups.test_max_div()
sympy.combinatorics.tests.test_perm_groups.test_minimal_block()
sympy.combinatorics.tests.test_perm_groups.test_minimal_blocks()
sympy.combinatorics.tests.test_perm_groups.test_normal_closure()
sympy.combinatorics.tests.test_perm_groups.test_orbit_rep()
sympy.combinatorics.tests.test_perm_groups.test_orbits()
sympy.combinatorics.tests.test_perm_groups.test_order()
sympy.combinatorics.tests.test_perm_groups.test_perfect()
sympy.combinatorics.tests.test_perm_groups.test_pointwise_stabilizer()
sympy.combinatorics.tests.test_perm_groups.test_polycyclic()
sympy.combinatorics.tests.test_perm_groups.test_presentation()
sympy.combinatorics.tests.test_perm_groups.test_random_pr()
sympy.combinatorics.tests.test_perm_groups.test_random_stab()
sympy.combinatorics.tests.test_perm_groups.test_rubik()
sympy.combinatorics.tests.test_perm_groups.test_rubik1()
sympy.combinatorics.tests.test_perm_groups.test_schreier_sims_incremental()
sympy.combinatorics.tests.test_perm_groups.test_schreier_sims_random()
sympy.combinatorics.tests.test_perm_groups.test_schreier_vector()
sympy.combinatorics.tests.test_perm_groups.test_stabilizer()
sympy.combinatorics.tests.test_perm_groups.test_subgroup()
sympy.combinatorics.tests.test_perm_groups.test_subgroup_search()
sympy.combinatorics.tests.test_perm_groups.test_subgroup_search2()
sympy.combinatorics.tests.test_perm_groups.test_sylow_subgroup()
sympy.combinatorics.tests.test_perm_groups.test_symmetricpermutationgroup()
sympy.combinatorics.tests.test_perm_groups.test_transitivity_degree()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_polyhedron.py----------------------------------------
A:sympy.combinatorics.tests.test_polyhedron.corners->tuple(symbols('A:H'))
A:sympy.combinatorics.tests.test_polyhedron.cube->Polyhedron(corners, faces, pgroup)
A:sympy.combinatorics.tests.test_polyhedron.got->set()
A:sympy.combinatorics.tests.test_polyhedron.P->h.copy()
A:sympy.combinatorics.tests.test_polyhedron.(tetrahedron2, cube2, octahedron2, dodecahedron2, icosahedron2, tetrahedron_faces2, cube_faces2, octahedron_faces2, dodecahedron_faces2, icosahedron_faces2)->_pgroup_calcs()
sympy.combinatorics.tests.test_polyhedron.test_pgroups()
sympy.combinatorics.tests.test_polyhedron.test_polyhedron()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_testutil.py----------------------------------------
A:sympy.combinatorics.tests.test_testutil.S->SymmetricGroup(5)
A:sympy.combinatorics.tests.test_testutil.els->list(S.generate_dimino())
A:sympy.combinatorics.tests.test_testutil.A->AlternatingGroup(5)
A:sympy.combinatorics.tests.test_testutil.triv->PermutationGroup([Permutation([0, 1, 2])])
A:sympy.combinatorics.tests.test_testutil.C->CyclicGroup(5)
sympy.combinatorics.tests.test_testutil.test_cmp_perm_lists()
sympy.combinatorics.tests.test_testutil.test_naive_list_centralizer()
sympy.combinatorics.tests.test_testutil.test_verify_bsgs()
sympy.combinatorics.tests.test_testutil.test_verify_centralizer()
sympy.combinatorics.tests.test_testutil.test_verify_normal_closure()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_rewriting.py----------------------------------------
A:sympy.combinatorics.tests.test_rewriting.(F, a, b)->free_group('a, b')
A:sympy.combinatorics.tests.test_rewriting.G->FpGroup(F, [a ** 2, b ** 3, (a * b) ** 4])
sympy.combinatorics.tests.test_rewriting.test_rewriting()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_fp_groups.py----------------------------------------
A:sympy.combinatorics.tests.test_fp_groups.(F, x, y)->free_group('x, y')
A:sympy.combinatorics.tests.test_fp_groups.f->FpGroup(F, [x ** 4, y ** 2, x * y * x ** (-1) * y])
A:sympy.combinatorics.tests.test_fp_groups.L->low_index_subgroups(f, 10, [x])
A:sympy.combinatorics.tests.test_fp_groups.p1->reidemeister_presentation(f, H)
A:sympy.combinatorics.tests.test_fp_groups.H->FpGroup(F, [x ** 4, y ** 2, x * y * x ** (-1) * y]).subgroup(H)
A:sympy.combinatorics.tests.test_fp_groups.p2->reidemeister_presentation(f, H)
A:sympy.combinatorics.tests.test_fp_groups.p3->reidemeister_presentation(f, H)
A:sympy.combinatorics.tests.test_fp_groups.p4->reidemeister_presentation(f, H)
A:sympy.combinatorics.tests.test_fp_groups.(F, a, b, c)->free_group('a, b, c')
A:sympy.combinatorics.tests.test_fp_groups.(gens, rels)->reidemeister_presentation(f, H)
A:sympy.combinatorics.tests.test_fp_groups.(F, x)->free_group('x')
A:sympy.combinatorics.tests.test_fp_groups._gens->T(K.generators)
A:sympy.combinatorics.tests.test_fp_groups.S->FpSubgroup(G, G.derived_subgroup())
A:sympy.combinatorics.tests.test_fp_groups.(K, T)->FpGroup(F, [x ** 4, y ** 2, x * y * x ** (-1) * y]).subgroup(H, homomorphism=True)
A:sympy.combinatorics.tests.test_fp_groups.G->simplify_presentation(FpGroup(FreeGroup([]), []))
sympy.combinatorics.tests.test_fp_groups.test_abelian_invariants()
sympy.combinatorics.tests.test_fp_groups.test_cyclic()
sympy.combinatorics.tests.test_fp_groups.test_fp_subgroup()
sympy.combinatorics.tests.test_fp_groups.test_low_index_subgroups()
sympy.combinatorics.tests.test_fp_groups.test_order()
sympy.combinatorics.tests.test_fp_groups.test_permutation_methods()
sympy.combinatorics.tests.test_fp_groups.test_simplify_presentation()
sympy.combinatorics.tests.test_fp_groups.test_subgroup_presentations()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_prufer.py----------------------------------------
A:sympy.combinatorics.tests.test_prufer.a->sorted(t.tree_repr)
A:sympy.combinatorics.tests.test_prufer.b->sorted(t.tree_repr).next()
A:sympy.combinatorics.tests.test_prufer.(e, n)->sympy.combinatorics.prufer.Prufer.edges(*t)
A:sympy.combinatorics.tests.test_prufer.t->Prufer(e, n)
sympy.combinatorics.tests.test_prufer.test_prufer()
sympy.combinatorics.tests.test_prufer.test_round_trip()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_group_constructs.py----------------------------------------
A:sympy.combinatorics.tests.test_group_constructs.C->CyclicGroup(4)
A:sympy.combinatorics.tests.test_group_constructs.D->DihedralGroup(4)
A:sympy.combinatorics.tests.test_group_constructs.G->DirectProduct(C, C, C)
A:sympy.combinatorics.tests.test_group_constructs.H->DirectProduct(D, C)
sympy.combinatorics.tests.test_group_constructs.test_direct_product_n()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_named_groups.py----------------------------------------
A:sympy.combinatorics.tests.test_named_groups.G->AlternatingGroup(5)
A:sympy.combinatorics.tests.test_named_groups.elements->list(G.generate())
A:sympy.combinatorics.tests.test_named_groups.H->AlternatingGroup(1)
A:sympy.combinatorics.tests.test_named_groups.L->AlternatingGroup(2)
A:sympy.combinatorics.tests.test_named_groups.A->AbelianGroup(3, 3, 3)
sympy.combinatorics.tests.test_named_groups.test_AbelianGroup()
sympy.combinatorics.tests.test_named_groups.test_AlternatingGroup()
sympy.combinatorics.tests.test_named_groups.test_CyclicGroup()
sympy.combinatorics.tests.test_named_groups.test_DihedralGroup()
sympy.combinatorics.tests.test_named_groups.test_RubikGroup()
sympy.combinatorics.tests.test_named_groups.test_SymmetricGroup()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_homomorphisms.py----------------------------------------
A:sympy.combinatorics.tests.test_homomorphisms.(F, a, b)->free_group('a, b')
A:sympy.combinatorics.tests.test_homomorphisms.G->PermutationGroup([a, b])
A:sympy.combinatorics.tests.test_homomorphisms.c->Permutation(3)(0, 1, 2)
A:sympy.combinatorics.tests.test_homomorphisms.d->Permutation(3)(1, 2, 3)
A:sympy.combinatorics.tests.test_homomorphisms.A->CyclicGroup(5)
A:sympy.combinatorics.tests.test_homomorphisms.T->homomorphism(D3, D3, D3.generators, D3.generators)
A:sympy.combinatorics.tests.test_homomorphisms.(E, e)->free_group('e')
A:sympy.combinatorics.tests.test_homomorphisms.P->PermutationGroup(p)
A:sympy.combinatorics.tests.test_homomorphisms.D->DihedralGroup(8)
A:sympy.combinatorics.tests.test_homomorphisms.p->Permutation(0, 1, 2, 3, 4, 5, 6, 7)
A:sympy.combinatorics.tests.test_homomorphisms.T2->homomorphism(F, P, [F.generators[0]], P.generators)
A:sympy.combinatorics.tests.test_homomorphisms.D3->DihedralGroup(3)
A:sympy.combinatorics.tests.test_homomorphisms.(E, c, d)->free_group('c, d')
A:sympy.combinatorics.tests.test_homomorphisms.H->CyclicGroup(5)
A:sympy.combinatorics.tests.test_homomorphisms.(F, c, d)->free_group('c, d')
A:sympy.combinatorics.tests.test_homomorphisms.(check, T)->group_isomorphism(G, H)
A:sympy.combinatorics.tests.test_homomorphisms.B->CyclicGroup(7)
A:sympy.combinatorics.tests.test_homomorphisms.a->Permutation(1, 2, 3, 4)
A:sympy.combinatorics.tests.test_homomorphisms.b->Permutation(1, 3)
sympy.combinatorics.tests.test_homomorphisms.test_check_homomorphism()
sympy.combinatorics.tests.test_homomorphisms.test_homomorphism()
sympy.combinatorics.tests.test_homomorphisms.test_isomorphisms()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_tensor_can.py----------------------------------------
A:sympy.combinatorics.tests.test_tensor_can.a->dummy_sgs([2, 3, 4, 5], 1, 8)
A:sympy.combinatorics.tests.test_tensor_can.(base1, gens1)->get_symmetric_group_sgs(1)
A:sympy.combinatorics.tests.test_tensor_can.g->Permutation([4, 2, 10, 0, 11, 8, 1, 9, 6, 5, 7, 3, 12, 13])
A:sympy.combinatorics.tests.test_tensor_can.can->canonicalize(g, dummies, sym, (base, gens, 4, 0))
A:sympy.combinatorics.tests.test_tensor_can.(base2, gens2)->get_symmetric_group_sgs(2)
A:sympy.combinatorics.tests.test_tensor_can.(base2a, gens2a)->get_symmetric_group_sgs(2, 1)
A:sympy.combinatorics.tests.test_tensor_can.(base1a, gens1a)->get_symmetric_group_sgs(1, 1)
A:sympy.combinatorics.tests.test_tensor_can.(base3, gens3)->get_symmetric_group_sgs(3)
A:sympy.combinatorics.tests.test_tensor_can.(base3a, gens3a)->get_symmetric_group_sgs(3, 1)
A:sympy.combinatorics.tests.test_tensor_can.can1->canonicalize_naive(g, list(range(2, 8)), 0, (baser, gensr, 2, 0))
A:sympy.combinatorics.tests.test_tensor_can.(base_f, gens_f)->bsgs_direct_product(base1, gens1, base2a, gens2a)
A:sympy.combinatorics.tests.test_tensor_can.(base_A, gens_A)->bsgs_direct_product(base1, gens1, base1, gens1)
A:sympy.combinatorics.tests.test_tensor_can.(base, gens)->bsgs_direct_product(base1, gens1, base2, gens2)
A:sympy.combinatorics.tests.test_tensor_can.dummies->list(range(4, 12))
A:sympy.combinatorics.tests.test_tensor_can.p->list(range(size))
A:sympy.combinatorics.tests.test_tensor_can.c1->graph_certificate(g1)
A:sympy.combinatorics.tests.test_tensor_can.c2->graph_certificate(g2)
A:sympy.combinatorics.tests.test_tensor_can.g1a->randomize_graph(10, g1)
A:sympy.combinatorics.tests.test_tensor_can.c1a->graph_certificate(g1a)
sympy.combinatorics.tests.test_tensor_can.test_canonical_free()
sympy.combinatorics.tests.test_tensor_can.test_canonicalize1()
sympy.combinatorics.tests.test_tensor_can.test_canonicalize_no_dummies()
sympy.combinatorics.tests.test_tensor_can.test_canonicalize_no_slot_sym()
sympy.combinatorics.tests.test_tensor_can.test_dummy_sgs()
sympy.combinatorics.tests.test_tensor_can.test_get_symmetric_group_sgs()
sympy.combinatorics.tests.test_tensor_can.test_graph_certificate()
sympy.combinatorics.tests.test_tensor_can.test_no_metric_symmetry()
sympy.combinatorics.tests.test_tensor_can.test_perm_af_direct_product()
sympy.combinatorics.tests.test_tensor_can.test_riemann_invariants()
sympy.combinatorics.tests.test_tensor_can.test_riemann_invariants1()
sympy.combinatorics.tests.test_tensor_can.test_riemann_products()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_permutations.py----------------------------------------
A:sympy.combinatorics.tests.test_permutations.a->Permutation(0, 1, 2)
A:sympy.combinatorics.tests.test_permutations.p->Permutation(0, 1, 2)
A:sympy.combinatorics.tests.test_permutations.q->Permutation([[6], [5], [0, 1, 2, 3, 4]])
A:sympy.combinatorics.tests.test_permutations.r->Permutation([3, 2, 1, 0])
A:sympy.combinatorics.tests.test_permutations.t->Permutation(0, 1, 2).transpositions()
A:sympy.combinatorics.tests.test_permutations.b->Permutation(0, 1, 2)
A:sympy.combinatorics.tests.test_permutations.I->Permutation(3)
A:sympy.combinatorics.tests.test_permutations.ans->Permutation(0, 5, 3, 1, 6)(2, 4)
A:sympy.combinatorics.tests.test_permutations.s->Permutation([0])
A:sympy.combinatorics.tests.test_permutations.iden->Permutation([0, 1, 2, 3])
A:sympy.combinatorics.tests.test_permutations.p1->Permutation([0, 1, 2, 3, 4, 5])
A:sympy.combinatorics.tests.test_permutations.prank->Permutation(0, 1, 2).rank_nonlex()
A:sympy.combinatorics.tests.test_permutations.qrank->Permutation([[6], [5], [0, 1, 2, 3, 4]]).rank_nonlex()
A:sympy.combinatorics.tests.test_permutations.p2->Permutation([0, 1, 2])
A:sympy.combinatorics.tests.test_permutations.h->_af_rmul(h, a[i])
A:sympy.combinatorics.tests.test_permutations.h2->_af_rmuln(*a[:i + 1])
A:sympy.combinatorics.tests.test_permutations.p3->Permutation([0, 2, 1])
A:sympy.combinatorics.tests.test_permutations.p4->Permutation([0, 1, 3, 2, 4, 5, 6, 7])
A:sympy.combinatorics.tests.test_permutations.c->Permutation(0, 2, 1)
A:sympy.combinatorics.tests.test_permutations.d->Permutation(0, 1, 2, size=4)
A:sympy.combinatorics.tests.test_permutations.e->Permutation(0, 2, 1, size=4)
A:sympy.combinatorics.tests.test_permutations.i->Permutation()
A:sympy.combinatorics.tests.test_permutations.c1->Cycle(1, 2)
A:sympy.combinatorics.tests.test_permutations.c2->Cycle(1, 2)
A:sympy.combinatorics.tests.test_permutations.x->Symbol('x')
sympy.combinatorics.tests.test_permutations.test_AppliedPermutation()
sympy.combinatorics.tests.test_permutations.test_Cycle()
sympy.combinatorics.tests.test_permutations.test_Permutation()
sympy.combinatorics.tests.test_permutations.test_Permutation_subclassing()
sympy.combinatorics.tests.test_permutations.test_args()
sympy.combinatorics.tests.test_permutations.test_deprecated_print_cyclic()
sympy.combinatorics.tests.test_permutations.test_from_sequence()
sympy.combinatorics.tests.test_permutations.test_issue_17661()
sympy.combinatorics.tests.test_permutations.test_josephus()
sympy.combinatorics.tests.test_permutations.test_mul()
sympy.combinatorics.tests.test_permutations.test_permutation_apply()
sympy.combinatorics.tests.test_permutations.test_permutation_equality()
sympy.combinatorics.tests.test_permutations.test_printing_cyclic()
sympy.combinatorics.tests.test_permutations.test_printing_non_cyclic()
sympy.combinatorics.tests.test_permutations.test_ranking()
sympy.combinatorics.tests.test_permutations.test_resize()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/combinatorics/tests/test_partitions.py----------------------------------------
A:sympy.combinatorics.tests.test_partitions.a->Partition([1, 2, 3], [4])
A:sympy.combinatorics.tests.test_partitions.b->Partition([1, 2], [3, 4])
A:sympy.combinatorics.tests.test_partitions.c->IntegerPartition([1, 3, 4])
A:sympy.combinatorics.tests.test_partitions.d->IntegerPartition(8, {1: 3, 3: 1, 2: 1})
A:sympy.combinatorics.tests.test_partitions.next->set()
A:sympy.combinatorics.tests.test_partitions.prev->set()
A:sympy.combinatorics.tests.test_partitions.n->len(ans)
sympy.combinatorics.tests.test_partitions.test_integer_partition()
sympy.combinatorics.tests.test_partitions.test_ordered_partition_9608()
sympy.combinatorics.tests.test_partitions.test_partition()
sympy.combinatorics.tests.test_partitions.test_partition_constructor()
sympy.combinatorics.tests.test_partitions.test_rgs()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/gmpy.py----------------------------------------
A:sympy.external.gmpy.GROUND_TYPES->os.environ.get('SYMPY_GROUND_TYPES', 'auto').lower()
A:sympy.external.gmpy.gmpy->import_module('gmpy2', min_module_version='2.0.0', module_version_attr='version', module_version_attr_call_args=())


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/pythonmpq.py----------------------------------------
A:sympy.external.pythonmpq.divisor->gcd(numerator, denominator)
A:sympy.external.pythonmpq.numerator->Fraction(numerator)
A:sympy.external.pythonmpq.obj->super().__new__(cls)
A:sympy.external.pythonmpq.dinv->pow(self.denominator, -1, _PyHASH_MODULUS)
A:sympy.external.pythonmpq.hash_->hash(hash(abs(self.numerator)) * dinv)
A:sympy.external.pythonmpq.g->gcd(aq, bq)
A:sympy.external.pythonmpq.g2->gcd(p, g)
A:sympy.external.pythonmpq.x1->gcd(ap, bp)
A:sympy.external.pythonmpq.x2->gcd(bq, aq)
A:sympy.external.pythonmpq.x->gcd(self.numerator, other)
sympy.external.pythonmpq.PythonMPQ(cls,numerator,denominator=None)
sympy.external.pythonmpq.PythonMPQ.__abs__(self)
sympy.external.pythonmpq.PythonMPQ.__add__(self,other)
sympy.external.pythonmpq.PythonMPQ.__bool__(self)
sympy.external.pythonmpq.PythonMPQ.__eq__(self,other)
sympy.external.pythonmpq.PythonMPQ.__float__(self)
sympy.external.pythonmpq.PythonMPQ.__ge__(self,other)
sympy.external.pythonmpq.PythonMPQ.__gt__(self,other)
sympy.external.pythonmpq.PythonMPQ.__hash__(self)
sympy.external.pythonmpq.PythonMPQ.__int__(self)
sympy.external.pythonmpq.PythonMPQ.__le__(self,other)
sympy.external.pythonmpq.PythonMPQ.__lt__(self,other)
sympy.external.pythonmpq.PythonMPQ.__mul__(self,other)
sympy.external.pythonmpq.PythonMPQ.__neg__(self)
sympy.external.pythonmpq.PythonMPQ.__pos__(self)
sympy.external.pythonmpq.PythonMPQ.__pow__(self,exp)
sympy.external.pythonmpq.PythonMPQ.__radd__(self,other)
sympy.external.pythonmpq.PythonMPQ.__reduce__(self)
sympy.external.pythonmpq.PythonMPQ.__repr__(self)
sympy.external.pythonmpq.PythonMPQ.__rmul__(self,other)
sympy.external.pythonmpq.PythonMPQ.__rsub__(self,other)
sympy.external.pythonmpq.PythonMPQ.__rtruediv__(self,other)
sympy.external.pythonmpq.PythonMPQ.__str__(self)
sympy.external.pythonmpq.PythonMPQ.__sub__(self,other)
sympy.external.pythonmpq.PythonMPQ.__truediv__(self,other)
sympy.external.pythonmpq.PythonMPQ._cmp(self,other,op)
sympy.external.pythonmpq.PythonMPQ._new(cls,numerator,denominator)
sympy.external.pythonmpq.PythonMPQ._new_check(cls,numerator,denominator)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/importtools.py----------------------------------------
A:sympy.external.importtools.debug_str->os.getenv('SYMPY_DEBUG', 'False')
A:sympy.external.importtools._component_re->re.compile('(\\d+ | [a-z]+ | \\.)', re.VERBOSE)
A:sympy.external.importtools.x->int(x)
A:sympy.external.importtools.mod->__import__(module, **import_kwargs)
A:sympy.external.importtools.from_list->import_kwargs.get('fromlist', ())
A:sympy.external.importtools.modversion->modversion(*module_version_attr_call_args)
A:sympy.external.importtools.verstr->str(min_module_version)
sympy.external.import_module(module,min_module_version=None,min_python_version=None,warn_not_installed=None,warn_old_version=None,module_version_attr='__version__',module_version_attr_call_args=None,import_kwargs={},catch=())
sympy.external.importtools.__sympy_debug()
sympy.external.importtools.import_module(module,min_module_version=None,min_python_version=None,warn_not_installed=None,warn_old_version=None,module_version_attr='__version__',module_version_attr_call_args=None,import_kwargs={},catch=())
sympy.external.importtools.version_tuple(vstring)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/tests/test_pythonmpq.py----------------------------------------
A:sympy.external.tests.test_pythonmpq.q->Q(2, 3)
sympy.external.tests.test_pythonmpq.test_PythonMPQ()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/tests/test_numpy.py----------------------------------------
A:sympy.external.tests.test_numpy.numpy->import_module('numpy')
A:sympy.external.tests.test_numpy.x->Symbol('x')
A:sympy.external.tests.test_numpy.y->Symbol('y')
A:sympy.external.tests.test_numpy.one->Rational(1)
A:sympy.external.tests.test_numpy.zero->Rational(0)
A:sympy.external.tests.test_numpy.X->sympy.DeferredVector('X')
A:sympy.external.tests.test_numpy.a->symarray('a', 3)
A:sympy.external.tests.test_numpy.b->symarray('b', 3)
A:sympy.external.tests.test_numpy.m->matrix([[2, 4], [x, 6], [x, z ** 2]])
A:sympy.external.tests.test_numpy.M->Matrix([[X[0] ** 2, X[0] * X[1], X[0] * X[2]], [X[1] * X[0], X[1] ** 2, X[1] * X[2]], [X[2] * X[0], X[2] * X[1], X[2] ** 2]])
A:sympy.external.tests.test_numpy.matarr->matarray()
A:sympy.external.tests.test_numpy.c->matrix2numpy(Matrix([[1, 2], [10, 20]]), dtype='int8')
A:sympy.external.tests.test_numpy.d->matrix2numpy(Matrix([[1, 2], [10, 20]]), dtype='float64')
A:sympy.external.tests.test_numpy.sin02->mpmath.mpf('0.198669330795061215459412627')
A:sympy.external.tests.test_numpy.f->lambdify(X, M, [{'ImmutableMatrix': numpy.array}, 'numpy'])
A:sympy.external.tests.test_numpy.expected->array([[Xh[0] ** 2, Xh[0] * Xh[1], Xh[0] * Xh[2]], [Xh[1] * Xh[0], Xh[1] ** 2, Xh[1] * Xh[2]], [Xh[2] * Xh[0], Xh[2] * Xh[1], Xh[2] ** 2]])
A:sympy.external.tests.test_numpy.actual->f(Xh)
A:sympy.external.tests.test_numpy.Xh->array([1.0, 2.0, 3.0])
A:sympy.external.tests.test_numpy.syms->symbols('_0,_1,_2')
A:sympy.external.tests.test_numpy.s1->symarray('', 3)
A:sympy.external.tests.test_numpy.s2->symarray('', 3)
A:sympy.external.tests.test_numpy.asyms->symbols('a_0,a_1,a_2')
A:sympy.external.tests.test_numpy.a2d->symarray('a', (2, 3))
A:sympy.external.tests.test_numpy.(a00, a12)->symbols('a_0_0,a_1_2')
A:sympy.external.tests.test_numpy.a3d->symarray('a', (2, 3, 2))
A:sympy.external.tests.test_numpy.(a000, a120, a121)->symbols('a_0_0_0,a_1_2_0,a_1_2_1')
sympy.external.tests.test_numpy.test_Matrix1()
sympy.external.tests.test_numpy.test_Matrix2()
sympy.external.tests.test_numpy.test_Matrix3()
sympy.external.tests.test_numpy.test_Matrix4()
sympy.external.tests.test_numpy.test_Matrix_array()
sympy.external.tests.test_numpy.test_Matrix_mul()
sympy.external.tests.test_numpy.test_Matrix_sum()
sympy.external.tests.test_numpy.test_arrays()
sympy.external.tests.test_numpy.test_basics()
sympy.external.tests.test_numpy.test_conversion1()
sympy.external.tests.test_numpy.test_conversion2()
sympy.external.tests.test_numpy.test_issue_3728()
sympy.external.tests.test_numpy.test_lambdify()
sympy.external.tests.test_numpy.test_lambdify_matrix()
sympy.external.tests.test_numpy.test_lambdify_matrix_multi_input()
sympy.external.tests.test_numpy.test_lambdify_matrix_vec_input()
sympy.external.tests.test_numpy.test_lambdify_transl()
sympy.external.tests.test_numpy.test_list2numpy()
sympy.external.tests.test_numpy.test_matrix2numpy()
sympy.external.tests.test_numpy.test_matrix2numpy_conversion()
sympy.external.tests.test_numpy.test_symarray()
sympy.external.tests.test_numpy.test_systematic_basic()
sympy.external.tests.test_numpy.test_vectorize()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/tests/test_codegen.py----------------------------------------
A:sympy.external.tests.test_codegen.pyodide_js->import_module('pyodide_js')
A:sympy.external.tests.test_codegen.retcode->subprocess.call(command, stdout=null, shell=True, stderr=subprocess.STDOUT)
A:sympy.external.tests.test_codegen.language->language.upper().upper()
A:sympy.external.tests.test_codegen.clean->os.getenv('SYMPY_TEST_CLEAN_TEMP', 'always').lower()
A:sympy.external.tests.test_codegen.work->tempfile.mkdtemp('_sympy_%s_test' % language, '%s_' % label)
A:sympy.external.tests.test_codegen.oldwork->os.getcwd()
A:sympy.external.tests.test_codegen.code_gen->get_code_generator(language, 'codegen')
A:sympy.external.tests.test_codegen.call_string->fortranize_double_constants(call_string)
A:sympy.external.tests.test_codegen.threshold->fortranize_double_constants(str(threshold))
A:sympy.external.tests.test_codegen.compiled->try_run(commands)
A:sympy.external.tests.test_codegen.executed->try_run(['./test.exe'])
A:sympy.external.tests.test_codegen.pattern_exp->re.compile('\\d+(\\.)?\\d*[eE]-?\\d+')
A:sympy.external.tests.test_codegen.pattern_float->re.compile('\\d+\\.\\d*(?!\\d*d)')
A:sympy.external.tests.test_codegen.code_string->re.compile('\\d+\\.\\d*(?!\\d*d)').sub(subs_float, code_string)
A:sympy.external.tests.test_codegen.routine->make_routine('test', x)
A:sympy.external.tests.test_codegen.expected->N(expr.subs(x, xval).subs(y, yval).subs(z, zval))
sympy.external.tests.test_codegen.fortranize_double_constants(code_string)
sympy.external.tests.test_codegen.is_feasible(language,commands)
sympy.external.tests.test_codegen.run_test(label,routines,numerical_tests,language,commands,friendly=True)
sympy.external.tests.test_codegen.test_C89_cc()
sympy.external.tests.test_codegen.test_C99_cc()
sympy.external.tests.test_codegen.test_F95_g95()
sympy.external.tests.test_codegen.test_F95_gfortran()
sympy.external.tests.test_codegen.test_F95_ifort()
sympy.external.tests.test_codegen.test_basic_codegen()
sympy.external.tests.test_codegen.test_complicated_codegen()
sympy.external.tests.test_codegen.test_instrinsic_math2_codegen()
sympy.external.tests.test_codegen.test_intrinsic_math1_codegen()
sympy.external.tests.test_codegen.try_run(commands)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/tests/test_scipy.py----------------------------------------
A:sympy.external.tests.test_scipy.scipy->import_module('scipy')
sympy.external.tests.test_scipy.eq(a,b,tol=1e-06)
sympy.external.tests.test_scipy.test_jn_zeros()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/tests/test_importtools.py----------------------------------------
A:sympy.external.tests.test_importtools.matplotlib->import_module('matplotlib', import_kwargs={'fromlist': ['cm', 'collections']}, min_module_version='1.1.0')
sympy.external.tests.test_importtools.test_min_module_version_python3_basestring_error()
sympy.external.tests.test_importtools.test_no_stdlib_collections()
sympy.external.tests.test_importtools.test_no_stdlib_collections2()
sympy.external.tests.test_importtools.test_no_stdlib_collections3()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/tests/test_autowrap.py----------------------------------------
A:sympy.external.tests.test_autowrap.numpy->import_module('numpy', min_module_version='1.6.1')
A:sympy.external.tests.test_autowrap.Cython->import_module('Cython', min_module_version='0.15.1')
A:sympy.external.tests.test_autowrap.f2py->import_module('numpy.f2py', import_kwargs={'fromlist': ['f2py']})
A:sympy.external.tests.test_autowrap.(a, b, c)->symbols('a b c')
A:sympy.external.tests.test_autowrap.(n, m, d)->symbols('n m d', integer=True)
A:sympy.external.tests.test_autowrap.(A, B, C)->symbols('A B C', cls=IndexedBase)
A:sympy.external.tests.test_autowrap.i->Idx('i', m)
A:sympy.external.tests.test_autowrap.j->Idx('j', n)
A:sympy.external.tests.test_autowrap.k->Idx('k', d)
A:sympy.external.tests.test_autowrap.f->autowrap(expr, args=[x, y], language='F95')
A:sympy.external.tests.test_autowrap.g->autowrap((((a + b) / c) ** 4).expand(), language, backend)
A:sympy.external.tests.test_autowrap.trace->autowrap(A[i, i], language, backend)
A:sympy.external.tests.test_autowrap.(x, y)->symbols('x, y', integer=True)
A:sympy.external.tests.test_autowrap.expr->Eq(C[i, j], A[i, k] * B[k, j])
A:sympy.external.tests.test_autowrap.mv->autowrap(expr, language, backend)
A:sympy.external.tests.test_autowrap.M->import_module('numpy', min_module_version='1.6.1').random.rand(10, 20)
A:sympy.external.tests.test_autowrap.x->import_module('numpy', min_module_version='1.6.1').random.rand(20)
A:sympy.external.tests.test_autowrap.y->import_module('numpy', min_module_version='1.6.1').dot(M, x)
A:sympy.external.tests.test_autowrap.matmat->autowrap(expr, language, backend)
A:sympy.external.tests.test_autowrap.M1->import_module('numpy', min_module_version='1.6.1').random.rand(10, 20)
A:sympy.external.tests.test_autowrap.M2->import_module('numpy', min_module_version='1.6.1').random.rand(20, 15)
A:sympy.external.tests.test_autowrap.M3->import_module('numpy', min_module_version='1.6.1').dot(M1, M2)
A:sympy.external.tests.test_autowrap.fabc->ufuncify([a, b, c], a * b + c, backend=backend)
A:sympy.external.tests.test_autowrap.facb->ufuncify([a, c, b], a * b + c, backend=backend)
A:sympy.external.tests.test_autowrap.grid->import_module('numpy', min_module_version='1.6.1').linspace(-2, 2, 50)
A:sympy.external.tests.test_autowrap.b->import_module('numpy', min_module_version='1.6.1').linspace(-5, 4, 50)
A:sympy.external.tests.test_autowrap.c->import_module('numpy', min_module_version='1.6.1').linspace(-1, 1, 50)
A:sympy.external.tests.test_autowrap.tmp->tempfile.mkdtemp()
A:sympy.external.tests.test_autowrap.lines->autowrap(expr, args=[x, y], language='F95').readlines()
A:sympy.external.tests.test_autowrap.(a, b, c, d, e)->symbols('a, b, c, d, e')
A:sympy.external.tests.test_autowrap.exp_res->float(expr.xreplace({x: 3.5, y: 2.7}).evalf())
A:sympy.external.tests.test_autowrap.printer->PiPrinter()
A:sympy.external.tests.test_autowrap.gen->C99CodeGen(printer=printer)
A:sympy.external.tests.test_autowrap.tmpdir->tempfile.mkdtemp()
A:sympy.external.tests.test_autowrap.func->autowrap(expr, backend='cython', tempdir=tmpdir, code_gen=gen)
sympy.external.tests.test_autowrap.has_module(module)
sympy.external.tests.test_autowrap.runtest_autowrap_matrix_matrix(language,backend)
sympy.external.tests.test_autowrap.runtest_autowrap_matrix_vector(language,backend)
sympy.external.tests.test_autowrap.runtest_autowrap_trace(language,backend)
sympy.external.tests.test_autowrap.runtest_autowrap_twice(language,backend)
sympy.external.tests.test_autowrap.runtest_issue_10274(language,backend)
sympy.external.tests.test_autowrap.runtest_issue_15337(language,backend)
sympy.external.tests.test_autowrap.runtest_ufuncify(language,backend)
sympy.external.tests.test_autowrap.test_autowrap_custom_printer()
sympy.external.tests.test_autowrap.test_autowrap_matrix_matrix_C_cython()
sympy.external.tests.test_autowrap.test_autowrap_matrix_matrix_f95_f2py()
sympy.external.tests.test_autowrap.test_autowrap_matrix_vector_C_cython()
sympy.external.tests.test_autowrap.test_autowrap_matrix_vector_f95_f2py()
sympy.external.tests.test_autowrap.test_autowrap_trace_C_Cython()
sympy.external.tests.test_autowrap.test_autowrap_trace_f95_f2py()
sympy.external.tests.test_autowrap.test_issue_10274_C_cython()
sympy.external.tests.test_autowrap.test_issue_15230()
sympy.external.tests.test_autowrap.test_issue_15337_C_cython()
sympy.external.tests.test_autowrap.test_issue_15337_f95_f2py()
sympy.external.tests.test_autowrap.test_ufuncify_C_Cython()
sympy.external.tests.test_autowrap.test_ufuncify_f95_f2py()
sympy.external.tests.test_autowrap.test_ufuncify_numpy()
sympy.external.tests.test_autowrap.test_wrap_twice_c_cython()
sympy.external.tests.test_autowrap.test_wrap_twice_f95_f2py()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/external/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/determinant.py----------------------------------------
A:sympy.matrices.determinant.col->list(col)
A:sympy.matrices.determinant.max_value->max(col_abs)
A:sympy.matrices.determinant.index->col_abs.index(max_value)
A:sympy.matrices.determinant.is_zero->iszerofunc(simped)
A:sympy.matrices.determinant.simped->simpfunc(x)
A:sympy.matrices.determinant.i->possible_zeros.index(None)
A:sympy.matrices.determinant.col_val_is_zero->iszerofunc(col_val)
A:sympy.matrices.determinant.tmp_col_val->simpfunc(col_val)
A:sympy.matrices.determinant.toeplitz->M._new(M.cols + 1, M.rows, entry)
A:sympy.matrices.determinant.(submat, toeplitz)->_berkowitz_toeplitz_matrix(M)
A:sympy.matrices.determinant.diagonal_elements->M.diagonal()
A:sympy.matrices.determinant.x->uniquely_named_symbol(x, berk_vector, modify=lambda s: '_' + s)
A:sympy.matrices.determinant.berk_vector->_berkowitz_vector(M)
A:sympy.matrices.determinant.s->list(range(n))
A:sympy.matrices.determinant.sub_len->len(subset)
A:sympy.matrices.determinant.DOM->sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix(M, field=True, extension=True)
A:sympy.matrices.determinant.method->method.lower().lower()
A:sympy.matrices.determinant.det->M[b, b]._eval_det_lu(iszerofunc=iszerofunc)
A:sympy.matrices.determinant.(pivot_pos, pivot_val, _, _)->_find_reasonable_pivot(mat[:, 0], iszerofunc=iszerofunc)
A:sympy.matrices.determinant.cols->list(range(mat.cols))
A:sympy.matrices.determinant.tmp_mat->mat.extract(rows, cols)
A:sympy.matrices.determinant.(lu, row_swaps)->M.LUdecomposition_Simple(iszerofunc=iszerofunc, simpfunc=simpfunc)
sympy.matrices.determinant._adjugate(M,method='berkowitz')
sympy.matrices.determinant._berkowitz_toeplitz_matrix(M)
sympy.matrices.determinant._berkowitz_vector(M)
sympy.matrices.determinant._charpoly(M,x='lambda',simplify=_simplify)
sympy.matrices.determinant._cofactor(M,i,j,method='berkowitz')
sympy.matrices.determinant._cofactor_matrix(M,method='berkowitz')
sympy.matrices.determinant._det(M,method='bareiss',iszerofunc=None)
sympy.matrices.determinant._det_DOM(M)
sympy.matrices.determinant._det_LU(M,iszerofunc=_iszero,simpfunc=None)
sympy.matrices.determinant._det_bareiss(M,iszerofunc=_is_zero_after_expand_mul)
sympy.matrices.determinant._det_berkowitz(M)
sympy.matrices.determinant._find_reasonable_pivot(col,iszerofunc=_iszero,simpfunc=_simplify)
sympy.matrices.determinant._find_reasonable_pivot_naive(col,iszerofunc=_iszero,simpfunc=None)
sympy.matrices.determinant._minor(M,i,j,method='berkowitz')
sympy.matrices.determinant._minor_submatrix(M,i,j)
sympy.matrices.determinant._per(M)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/eigen.py----------------------------------------
A:sympy.matrices.eigen.prec->max([x._prec for x in M.atoms(Float)])
A:sympy.matrices.eigen.A->M.as_mutable().as_mutable()
A:sympy.matrices.eigen.(E, ER)->_eigenvals_eigenvects_mpmath(M)
A:sympy.matrices.eigen.v2->norm2([i for e in E for i in (mp.re(e), mp.im(e))])
A:sympy.matrices.eigen.(E, _)->_eigenvals_eigenvects_mpmath(M)
A:sympy.matrices.eigen.eigenval->_sympify(E[i])
A:sympy.matrices.eigen.eigenvect->_sympify(ER[:, i])
A:sympy.matrices.eigen.M->M.as_mutable().as_mutable()
A:sympy.matrices.eigen.iblocks->M.as_mutable().as_mutable().strongly_connected_components()
A:sympy.matrices.eigen.charpoly->block.charpoly()
A:sympy.matrices.eigen.eigs->M.as_mutable().as_mutable().transpose().eigenvects(**flags)
A:sympy.matrices.eigen.degree->int(charpoly.degree())
A:sympy.matrices.eigen.f->block.charpoly().as_expr()
A:sympy.matrices.eigen.ret->_eigenvects_sympy(M, iszerofunc, simplify=simplify, **flags)
A:sympy.matrices.eigen.DOM->DOM.to_dense().to_dense()
A:sympy.matrices.eigen.(rational, algebraic)->dom_eigenvects(DOM)
A:sympy.matrices.eigen.eigenvects->sorted(eigenvects, key=lambda x: default_sort_key(x[0]))
A:sympy.matrices.eigen.eigenvals->sorted(eigenvals.items(), key=default_sort_key)
A:sympy.matrices.eigen.vects->_eigenspace(M, val, iszerofunc=iszerofunc, simplify=simplify)
A:sympy.matrices.eigen.simplify->flags.get('simplify', True)
A:sympy.matrices.eigen.primitive->flags.get('simplify', False)
A:sympy.matrices.eigen.has_floats->M.as_mutable().as_mutable().has(Float)
A:sympy.matrices.eigen.eigenvecs->sorted(eigenvecs, key=default_sort_key)
A:sympy.matrices.eigen.v->x.copy()
A:sympy.matrices.eigen.v_plus->x.copy()
A:sympy.matrices.eigen.v_minus->x.copy()
A:sympy.matrices.eigen.norm_x->x.norm()
A:sympy.matrices.eigen.(v, bet)->_householder_vector(A[i, i + 1:].T)
A:sympy.matrices.eigen.temp->M.as_mutable().as_mutable().eye(n)
A:sympy.matrices.eigen.X->_bidiagonal_decmp_hholder(M.H)
A:sympy.matrices.eigen.(is_diagonalizable, eigenvecs)->_is_diagonalizable_with_eigen(M, reals_only=reals_only)
A:sympy.matrices.eigen.positive_diagonals->M.as_mutable().as_mutable()._has_positive_diagonals()
A:sympy.matrices.eigen.nonnegative_diagonals->M.as_mutable().as_mutable()._has_nonnegative_diagonals()
A:sympy.matrices.eigen.fuzzy->_fuzzy_positive_semidefinite(M)
A:sympy.matrices.eigen.eigen->M.as_mutable().as_mutable().eigenvals()
A:sympy.matrices.eigen.any_positive->fuzzy_or(args1)
A:sympy.matrices.eigen.any_negative->fuzzy_or(args2)
A:sympy.matrices.eigen.(pivot, pivot_val, nonzero, _)->_find_reasonable_pivot(diags)
A:sympy.matrices.eigen.M[k, k]->sqrt(M[k, k])
A:sympy.matrices.eigen.max_prec->max((term._prec for term in M.values() if isinstance(term, Float)))
A:sympy.matrices.eigen.max_dps->max(prec_to_dps(max_prec), 15)
A:sympy.matrices.eigen.mat_cache[val, pow]->(mat - val * M.eye(M.rows)).pow(pow)
A:sympy.matrices.eigen.(_, pivots)->M.as_mutable().as_mutable().hstack(*small_basis + [v]).echelon_form(with_pivots=True)
A:sympy.matrices.eigen.mat->mat.applyfunc(lambda x: nsimplify(x, rational=True)).applyfunc(lambda x: nsimplify(x, rational=True))
A:sympy.matrices.eigen.blocks->sorted(eigs.keys(), key=default_sort_key)
A:sympy.matrices.eigen.jordan_mat->mat.applyfunc(lambda x: nsimplify(x, rational=True)).applyfunc(lambda x: nsimplify(x, rational=True)).diag(*blocks)
A:sympy.matrices.eigen.basis_mat->mat.applyfunc(lambda x: nsimplify(x, rational=True)).applyfunc(lambda x: nsimplify(x, rational=True)).hstack(*jordan_basis)
A:sympy.matrices.eigen.chain->nullity_chain(eig, algebraic_multiplicity)
A:sympy.matrices.eigen.block_sizes->blocks_from_nullity_chain(chain)
A:sympy.matrices.eigen.jordan_form_size->sum((size for (eig, size) in block_structure))
A:sympy.matrices.eigen.null_big->eig_mat(eig, size).nullspace()
A:sympy.matrices.eigen.null_small->eig_mat(eig, size - 1).nullspace()
A:sympy.matrices.eigen.vec->pick_vec(null_small + eig_basis, null_big)
A:sympy.matrices.eigen.valmultpairs->M.as_mutable().as_mutable().multiply(M.H).eigenvals()
sympy.matrices.eigen._bidiagonal_decmp_hholder(M)
sympy.matrices.eigen._bidiagonal_decomposition(M,upper=True)
sympy.matrices.eigen._bidiagonalize(M,upper=True)
sympy.matrices.eigen._diagonalize(M,reals_only=False,sort=False,normalize=False)
sympy.matrices.eigen._eigenspace(M,eigenval,iszerofunc=_iszero,simplify=False)
sympy.matrices.eigen._eigenvals(M,error_when_incomplete=True,*,simplify=False,multiple=False,rational=False,**flags)
sympy.matrices.eigen._eigenvals_dict(M,error_when_incomplete=True,simplify=False,**flags)
sympy.matrices.eigen._eigenvals_eigenvects_mpmath(M)
sympy.matrices.eigen._eigenvals_list(M,error_when_incomplete=True,simplify=False,**flags)
sympy.matrices.eigen._eigenvals_mpmath(M,multiple=False)
sympy.matrices.eigen._eigenvects(M,error_when_incomplete=True,iszerofunc=_iszero,*,chop=False,**flags)
sympy.matrices.eigen._eigenvects_DOM(M,**kwargs)
sympy.matrices.eigen._eigenvects_mpmath(M)
sympy.matrices.eigen._eigenvects_sympy(M,iszerofunc,simplify=True,**flags)
sympy.matrices.eigen._eval_bidiag_hholder(M)
sympy.matrices.eigen._fuzzy_positive_definite(M)
sympy.matrices.eigen._fuzzy_positive_semidefinite(M)
sympy.matrices.eigen._householder_vector(x)
sympy.matrices.eigen._is_diagonalizable(M,reals_only=False,**kwargs)
sympy.matrices.eigen._is_diagonalizable_with_eigen(M,reals_only=False)
sympy.matrices.eigen._is_indefinite(M)
sympy.matrices.eigen._is_negative_definite(M)
sympy.matrices.eigen._is_negative_semidefinite(M)
sympy.matrices.eigen._is_positive_definite(M)
sympy.matrices.eigen._is_positive_definite_GE(M)
sympy.matrices.eigen._is_positive_semidefinite(M)
sympy.matrices.eigen._is_positive_semidefinite_cholesky(M)
sympy.matrices.eigen._jordan_form(M,calc_transform=True,*,chop=False)
sympy.matrices.eigen._left_eigenvects(M,**flags)
sympy.matrices.eigen._singular_values(M)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/normalforms.py----------------------------------------
A:sympy.matrices.normalforms.ring->getattr(m, 'ring', None)
A:sympy.matrices.normalforms.m->m.applyfunc(lambda e: e.as_expr() if isinstance(e, Poly) else e).applyfunc(lambda e: e.as_expr() if isinstance(e, Poly) else e)
A:sympy.matrices.normalforms.dM->_to_domain(m, domain)
A:sympy.matrices.normalforms.factors->tuple((to_poly(f) for f in factors))
A:sympy.matrices.normalforms.D->ZZ(int(D))
sympy.matrices.normalforms._to_domain(m,domain=None)
sympy.matrices.normalforms.hermite_normal_form(A,*,D=None,check_rank=False)
sympy.matrices.normalforms.invariant_factors(m,domain=None)
sympy.matrices.normalforms.smith_normal_form(m,domain=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/sparse.py----------------------------------------
A:sympy.matrices.sparse.smat->args[0].todok()
A:sympy.matrices.sparse.value->cls._sympify(value)
A:sympy.matrices.sparse.(_, _, smat)->cls._handle_creation_inputs(args[2], **kwargs)
A:sympy.matrices.sparse.v->cls._sympify(v)
A:sympy.matrices.sparse.keys->args[0].todok().keys()
A:sympy.matrices.sparse.smat[i, j]->cls._sympify(vv)
A:sympy.matrices.sparse.c->max(c, len(row))
A:sympy.matrices.sparse.(rows, cols, mat)->super()._handle_creation_inputs(*args)
A:sympy.matrices.sparse.fv->f(v)
A:sympy.matrices.sparse.RL->property(row_list, None, None, 'Alternate faster representation')
A:sympy.matrices.sparse.CL->property(col_list, None, None, 'Alternate faster representation')
A:sympy.matrices.sparse.(rows, cols, smat)->cls._handle_creation_inputs(*args, **kwargs)
A:sympy.matrices.sparse.rep->cls._smat_to_DomainMatrix(rows, cols, smat)
sympy.MutableSparseMatrix(SparseRepMatrix,MutableRepMatrix)
sympy.matrices.sparse.MutableSparseMatrix(SparseRepMatrix,MutableRepMatrix)
sympy.matrices.sparse.MutableSparseMatrix._new(cls,*args,**kwargs)
sympy.matrices.sparse.SparseRepMatrix(RepMatrix)
sympy.matrices.sparse.SparseRepMatrix.LDLdecomposition(self,hermitian=True)
sympy.matrices.sparse.SparseRepMatrix._eval_inverse(self,**kwargs)
sympy.matrices.sparse.SparseRepMatrix._handle_creation_inputs(cls,*args,**kwargs)
sympy.matrices.sparse.SparseRepMatrix._smat(self)
sympy.matrices.sparse.SparseRepMatrix.applyfunc(self,f)
sympy.matrices.sparse.SparseRepMatrix.as_immutable(self)
sympy.matrices.sparse.SparseRepMatrix.as_mutable(self)
sympy.matrices.sparse.SparseRepMatrix.cholesky(self,hermitian=True)
sympy.matrices.sparse.SparseRepMatrix.col_list(self)
sympy.matrices.sparse.SparseRepMatrix.liupc(self)
sympy.matrices.sparse.SparseRepMatrix.lower_triangular_solve(self,rhs)
sympy.matrices.sparse.SparseRepMatrix.nnz(self)
sympy.matrices.sparse.SparseRepMatrix.row_list(self)
sympy.matrices.sparse.SparseRepMatrix.row_structure_symbolic_cholesky(self)
sympy.matrices.sparse.SparseRepMatrix.scalar_multiply(self,scalar)
sympy.matrices.sparse.SparseRepMatrix.solve(self,rhs,method='LDL')
sympy.matrices.sparse.SparseRepMatrix.solve_least_squares(self,rhs,method='LDL')
sympy.matrices.sparse.SparseRepMatrix.upper_triangular_solve(self,rhs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/decompositions.py----------------------------------------
A:sympy.matrices.decompositions.(F, pivot_cols)->A.as_mutable().rref(simplify=simplify, iszerofunc=iszerofunc, pivots=True)
A:sympy.matrices.decompositions.rank->len(pivot_cols)
A:sympy.matrices.decompositions.C->dense.MutableDenseMatrix.zeros(M.rows)
A:sympy.matrices.decompositions.inf->len(R)
A:sympy.matrices.decompositions.(R, parent)->A.as_mutable().liupc()
A:sympy.matrices.decompositions.Lrow->copy.deepcopy(R)
A:sympy.matrices.decompositions.Lrow[k]->sorted(set(Lrow[k]))
A:sympy.matrices.decompositions.L->A.as_mutable()._new(combined.rows, combined.rows, entry_L)
A:sympy.matrices.decompositions.L[i, i]->sqrt(M[i, i] - sum((L[i, k] ** 2 for k in range(i))))
A:sympy.matrices.decompositions.dps->_get_intermediate_simp(expand_mul, expand_mul)
A:sympy.matrices.decompositions.Crowstruc->A.as_mutable().row_structure_symbolic_cholesky()
A:sympy.matrices.decompositions.C[i, j]->dps((C[i, j] - summ) / C[j, j])
A:sympy.matrices.decompositions.Cjj2->dps(C[j, j] - summ)
A:sympy.matrices.decompositions.C[j, j]->sqrt(Cjj2)
A:sympy.matrices.decompositions.D->dense.MutableDenseMatrix.zeros(M.rows, M.cols)
A:sympy.matrices.decompositions.Lrowstruc->A.as_mutable().row_structure_symbolic_cholesky()
A:sympy.matrices.decompositions.L[i, j]->dps((L[i, j] - summ) / D[j, j])
A:sympy.matrices.decompositions.D[i, i]->dps(D[i, i] - summ)
A:sympy.matrices.decompositions.(combined, p)->A.as_mutable().LUdecomposition_Simple(iszerofunc=iszerofunc, simpfunc=simpfunc, rankcheck=rankcheck)
A:sympy.matrices.decompositions.U->A.as_mutable()._new(combined.rows, combined.cols, entry_U)
A:sympy.matrices.decompositions.lu->A.as_mutable().as_mutable()
A:sympy.matrices.decompositions.(pivot_row_offset, pivot_value, is_assumed_non_zero, ind_simplified_pairs)->_find_reasonable_pivot_naive(sub_col, iszerofunc, simpfunc)
A:sympy.matrices.decompositions.lu[row, pivot_row]->dps(lu[row, pivot_col] / lu[pivot_row, pivot_col])
A:sympy.matrices.decompositions.lu[row, c]->dps(lu[row, c] - lu[row, pivot_row] * lu[pivot_row, c])
A:sympy.matrices.decompositions.DD->zeros(n, n)
A:sympy.matrices.decompositions.(V, S)->(AH * A).diagonalize()
A:sympy.matrices.decompositions.S->sympy.core.S.zeros(len(Singular_vals)).zeros(len(Singular_vals))
A:sympy.matrices.decompositions.(V, _)->V.QRdecomposition()
A:sympy.matrices.decompositions.(U, S)->(A * AH).diagonalize()
A:sympy.matrices.decompositions.(U, _)->A.as_mutable()._new(combined.rows, combined.cols, entry_U).QRdecomposition()
A:sympy.matrices.decompositions.A->A.as_mutable().as_mutable()
A:sympy.matrices.decompositions.R->R.extract(ranked, range(R.cols)).extract(ranked, range(R.cols))
A:sympy.matrices.decompositions.R[i, j]->dps(R[i, j])
A:sympy.matrices.decompositions.Q[:, j]->dps(Q[:, j])
A:sympy.matrices.decompositions.Q->Q.extract(range(Q.rows), ranked).extract(range(Q.rows), ranked)
A:sympy.matrices.decompositions.norm->Q[:, i].norm()
A:sympy.matrices.decompositions.M->A.as_mutable().as_mutable().as_mutable()
A:sympy.matrices.decompositions.P->A.as_mutable().as_mutable().as_mutable().eye(n)
sympy.matrices.decompositions._LDLdecomposition(M,hermitian=True)
sympy.matrices.decompositions._LDLdecomposition_sparse(M,hermitian=True)
sympy.matrices.decompositions._LUdecomposition(M,iszerofunc=_iszero,simpfunc=None,rankcheck=False)
sympy.matrices.decompositions._LUdecompositionFF(M)
sympy.matrices.decompositions._LUdecomposition_Simple(M,iszerofunc=_iszero,simpfunc=None,rankcheck=False)
sympy.matrices.decompositions._QRdecomposition(M)
sympy.matrices.decompositions._QRdecomposition_optional(M,normalize=True)
sympy.matrices.decompositions._cholesky(M,hermitian=True)
sympy.matrices.decompositions._cholesky_sparse(M,hermitian=True)
sympy.matrices.decompositions._liupc(M)
sympy.matrices.decompositions._rank_decomposition(M,iszerofunc=_iszero,simplify=False)
sympy.matrices.decompositions._row_structure_symbolic_cholesky(M)
sympy.matrices.decompositions._singular_value_decomposition(A)
sympy.matrices.decompositions._upper_hessenberg_decomposition(A)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/repmatrix.py----------------------------------------
A:sympy.matrices.repmatrix.other->self._new(other)
A:sympy.matrices.repmatrix.element->new_domain.from_sympy(element)
A:sympy.matrices.repmatrix.rep->cls._flat_list_to_DomainMatrix(rows, cols, flat_list)
A:sympy.matrices.repmatrix.elements_dod->defaultdict(dict)
A:sympy.matrices.repmatrix.(i, j)->divmod(n, cols)
A:sympy.matrices.repmatrix.types->set(map(type, smat.values()))
A:sympy.matrices.repmatrix.dok->self.todok()
A:sympy.matrices.repmatrix.zhas->sympy.core.singleton.S.Zero.has(*patterns)
A:sympy.matrices.repmatrix.diff->(self - self.T).applyfunc(simpfunc)
A:sympy.matrices.repmatrix.(selfrep, otherrep)->self._rep.unify(other._rep)
A:sympy.matrices.repmatrix.newrep->selfrep.mul_elementwise(otherrep)
A:sympy.matrices.repmatrix.(rep, other)->self._unify_element_sympy(self._rep, other)
A:sympy.matrices.repmatrix.ans->f(self[i, j], self[k, j]).equals(other[i, j], failing_expression)
A:sympy.matrices.repmatrix.(rows, cols, flat_list)->cls._handle_creation_inputs(*args, **kwargs)
A:sympy.matrices.repmatrix.flat_list->list(flat_list)
A:sympy.matrices.repmatrix.obj->super().__new__(cls)
A:sympy.matrices.repmatrix.rv->self._setitem(key, value)
A:sympy.matrices.repmatrix.(self._rep, value)->self._unify_element_sympy(self._rep, value)
A:sympy.matrices.repmatrix.self._rep->DomainMatrix(elements_dod, self.shape, EXRAW)
A:sympy.matrices.repmatrix.self[i, j]->f(self[i, j], self[k, j])
A:sympy.matrices.repmatrix.(rlo, rhi, clo, chi)->self.key2bounds(key)
A:sympy.matrices.repmatrix.value->_sympify(value)
A:sympy.matrices.repmatrix.is_slice->isinstance(key, slice)
sympy.matrices.repmatrix.MutableRepMatrix(cls,*args,**kwargs)
sympy.matrices.repmatrix.MutableRepMatrix.__setitem__(self,key,value)
sympy.matrices.repmatrix.MutableRepMatrix._eval_col_del(self,col)
sympy.matrices.repmatrix.MutableRepMatrix._eval_col_insert(self,col,other)
sympy.matrices.repmatrix.MutableRepMatrix._eval_row_del(self,row)
sympy.matrices.repmatrix.MutableRepMatrix._eval_row_insert(self,row,other)
sympy.matrices.repmatrix.MutableRepMatrix._fromrep(cls,rep)
sympy.matrices.repmatrix.MutableRepMatrix._new(cls,*args,copy=True,**kwargs)
sympy.matrices.repmatrix.MutableRepMatrix.as_mutable(self)
sympy.matrices.repmatrix.MutableRepMatrix.col_op(self,j,f)
sympy.matrices.repmatrix.MutableRepMatrix.col_swap(self,i,j)
sympy.matrices.repmatrix.MutableRepMatrix.copy(self)
sympy.matrices.repmatrix.MutableRepMatrix.copyin_list(self,key,value)
sympy.matrices.repmatrix.MutableRepMatrix.copyin_matrix(self,key,value)
sympy.matrices.repmatrix.MutableRepMatrix.fill(self,value)
sympy.matrices.repmatrix.MutableRepMatrix.row_op(self,i,f)
sympy.matrices.repmatrix.MutableRepMatrix.row_swap(self,i,j)
sympy.matrices.repmatrix.MutableRepMatrix.zip_row_op(self,i,k,f)
sympy.matrices.repmatrix.RepMatrix(MatrixBase)
sympy.matrices.repmatrix.RepMatrix.__eq__(self,other)
sympy.matrices.repmatrix.RepMatrix.__getitem__(self,key)
sympy.matrices.repmatrix.RepMatrix._dod_to_DomainMatrix(cls,rows,cols,dod,types)
sympy.matrices.repmatrix.RepMatrix._eval_Abs(self)
sympy.matrices.repmatrix.RepMatrix._eval_add(self,other)
sympy.matrices.repmatrix.RepMatrix._eval_col_join(self,other)
sympy.matrices.repmatrix.RepMatrix._eval_conjugate(self)
sympy.matrices.repmatrix.RepMatrix._eval_extract(self,rowsList,colsList)
sympy.matrices.repmatrix.RepMatrix._eval_eye(cls,rows,cols)
sympy.matrices.repmatrix.RepMatrix._eval_has(self,*patterns)
sympy.matrices.repmatrix.RepMatrix._eval_is_Identity(self)
sympy.matrices.repmatrix.RepMatrix._eval_is_symmetric(self,simpfunc)
sympy.matrices.repmatrix.RepMatrix._eval_matrix_mul(self,other)
sympy.matrices.repmatrix.RepMatrix._eval_matrix_mul_elementwise(self,other)
sympy.matrices.repmatrix.RepMatrix._eval_row_join(self,other)
sympy.matrices.repmatrix.RepMatrix._eval_scalar_mul(self,other)
sympy.matrices.repmatrix.RepMatrix._eval_scalar_rmul(self,other)
sympy.matrices.repmatrix.RepMatrix._eval_todok(self)
sympy.matrices.repmatrix.RepMatrix._eval_tolist(self)
sympy.matrices.repmatrix.RepMatrix._eval_transpose(self)
sympy.matrices.repmatrix.RepMatrix._eval_values(self)
sympy.matrices.repmatrix.RepMatrix._eval_zeros(cls,rows,cols)
sympy.matrices.repmatrix.RepMatrix._flat_list_to_DomainMatrix(cls,rows,cols,flat_list)
sympy.matrices.repmatrix.RepMatrix._smat_to_DomainMatrix(cls,rows,cols,smat)
sympy.matrices.repmatrix.RepMatrix._unify_element_sympy(cls,rep,element)
sympy.matrices.repmatrix.RepMatrix.copy(self)
sympy.matrices.repmatrix.RepMatrix.equals(self,other,failing_expression=False)
sympy.matrices.repmatrix.RepMatrix.flat(self)
sympy.matrices.repmatrix.RepMatrix.kind(self)->MatrixKind
sympy.matrices.repmatrix._getitem_RepMatrix(self,key)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/common.py----------------------------------------
A:sympy.matrices.common.mat->self._new(self.rows, self.cols, lambda i, j: simpfunc(self[i, j] - self[j, i]))
A:sympy.matrices.common.entries->list(self)
A:sympy.matrices.common.entries[insert_pos:insert_pos]->list(other)
A:sympy.matrices.common.pos->as_int(pos)
A:sympy.matrices.common.kls->type(args[0])
A:sympy.matrices.common.k->as_int(k)
A:sympy.matrices.common.Mlol->M.tolist()
A:sympy.matrices.common.D->cls._new(2 * n + 1, 2 * n + 1, entry)
A:sympy.matrices.common.klass->kwargs.get('cls', kls)
A:sympy.matrices.common.diag_entries->defaultdict(int)
A:sympy.matrices.common._->Matrix(m)
A:sympy.matrices.common.m->self._eval_matrix_rmul(other)
A:sympy.matrices.common.(r, c, smat)->sympy.matrices.SparseMatrix._handle_creation_inputs(m)
A:sympy.matrices.common.eigenval->kwargs.get('eigenval', None)
A:sympy.matrices.common.size->kls._sympify(poly).degree()
A:sympy.matrices.common.poly->type(args[0])._sympify(poly)
A:sympy.matrices.common.coeffs->linrec_coeffs(coeffs, exp)
A:sympy.matrices.common.n->as_int(n)
A:sympy.matrices.common.result->set()
A:sympy.matrices.common.types->tuple((t if isinstance(t, type) else type(t) for t in types))
A:sympy.matrices.common.out->self._new(self.rows, self.cols, [f(x) for x in self])
A:sympy.matrices.common.mapping->list(perm)
A:sympy.matrices.common.perm->Permutation(perm, size=max_index + 1)
A:sympy.matrices.common.ab->self._eval_pow_by_recursion_dotprodsimp(num // 2, prevsimp=prevsimp)
A:sympy.matrices.common.p->self.charpoly()
A:sympy.matrices.common.new_mat->self.eye(row)
A:sympy.matrices.common.ans->self.zeros(row)
A:sympy.matrices.common.lenm->len(m)
A:sympy.matrices.common.(elems[i], prevsimp[i])->_dotprodsimp(m[i], withsimp=True)
A:sympy.matrices.common.other->_matrixify(other)
A:sympy.matrices.common.isimpbool->_get_intermediate_simp_bool(False, dotprodsimp)
A:sympy.matrices.common.jordan_pow->getattr(a, '_matrix_pow_by_jordan_blocks', None)
A:sympy.matrices.common.exp->sympify(exp)
A:sympy.matrices.common.diagonal->getattr(a, 'is_diagonal', None)
A:sympy.matrices.common.a->a.inv().inv()
A:sympy.matrices.common._sympify->staticmethod(sympify)
A:sympy.matrices.common.(rows, cols)->getattr(mat, 'shape', (rows, cols))
A:sympy.matrices.common.cols->len(mat[0])
A:sympy.matrices.common.rows->len(mat)
A:sympy.matrices.common.self.mat->tuple((self._sympify(x) for x in mat))
A:sympy.matrices.common.row_slice->slice(*row_slice.indices(self.rows))
A:sympy.matrices.common.col_slice->slice(*col_slice.indices(self.cols))
A:sympy.matrices.common.(i, j)->_normalize_slices(i, j)
A:sympy.matrices.common.key->_coord_to_index(i, j)
A:sympy.matrices.common.obj->super().__new__(cls, element_kind)
A:sympy.matrices.common.jindex->getattr(j, '__index__', None)
A:sympy.matrices.common.j->jindex()
A:sympy.matrices.common.priority_A->getattr(A, '_class_priority', None)
A:sympy.matrices.common.priority_B->getattr(B, '_class_priority', None)
sympy.NonSquareMatrixError(ShapeError)
sympy.ShapeError(ValueError,MatrixError)
sympy.matrices.MatrixKind(cls,element_kind=NumberKind)
sympy.matrices.common.MatrixArithmetic(MatrixRequired)
sympy.matrices.common.MatrixArithmetic.__abs__(self)
sympy.matrices.common.MatrixArithmetic.__add__(self,other)
sympy.matrices.common.MatrixArithmetic.__matmul__(self,other)
sympy.matrices.common.MatrixArithmetic.__mod__(self,other)
sympy.matrices.common.MatrixArithmetic.__mul__(self,other)
sympy.matrices.common.MatrixArithmetic.__neg__(self)
sympy.matrices.common.MatrixArithmetic.__pow__(self,exp)
sympy.matrices.common.MatrixArithmetic.__radd__(self,other)
sympy.matrices.common.MatrixArithmetic.__rmatmul__(self,other)
sympy.matrices.common.MatrixArithmetic.__rmul__(self,other)
sympy.matrices.common.MatrixArithmetic.__rsub__(self,a)
sympy.matrices.common.MatrixArithmetic.__sub__(self,a)
sympy.matrices.common.MatrixArithmetic.__truediv__(self,other)
sympy.matrices.common.MatrixArithmetic._eval_Abs(self)
sympy.matrices.common.MatrixArithmetic._eval_Mod(self,other)
sympy.matrices.common.MatrixArithmetic._eval_add(self,other)
sympy.matrices.common.MatrixArithmetic._eval_matrix_mul(self,other)
sympy.matrices.common.MatrixArithmetic._eval_matrix_mul_elementwise(self,other)
sympy.matrices.common.MatrixArithmetic._eval_matrix_rmul(self,other)
sympy.matrices.common.MatrixArithmetic._eval_pow_by_cayley(self,exp)
sympy.matrices.common.MatrixArithmetic._eval_pow_by_recursion(self,num)
sympy.matrices.common.MatrixArithmetic._eval_pow_by_recursion_dotprodsimp(self,num,prevsimp=None)
sympy.matrices.common.MatrixArithmetic._eval_scalar_mul(self,other)
sympy.matrices.common.MatrixArithmetic._eval_scalar_rmul(self,other)
sympy.matrices.common.MatrixArithmetic.multiply(self,other,dotprodsimp=None)
sympy.matrices.common.MatrixArithmetic.multiply_elementwise(self,other)
sympy.matrices.common.MatrixArithmetic.pow(self,exp,method=None)
sympy.matrices.common.MatrixArithmetic.rmultiply(self,other,dotprodsimp=None)
sympy.matrices.common.MatrixCommon(MatrixArithmetic,MatrixOperations,MatrixProperties,MatrixSpecial,MatrixShaping)
sympy.matrices.common.MatrixError(Exception)
sympy.matrices.common.MatrixKind(cls,element_kind=NumberKind)
sympy.matrices.common.MatrixKind.__repr__(self)
sympy.matrices.common.MatrixOperations(MatrixRequired)
sympy.matrices.common.MatrixOperations.C(self)
sympy.matrices.common.MatrixOperations.H(self)
sympy.matrices.common.MatrixOperations.T(self)
sympy.matrices.common.MatrixOperations._eval_adjoint(self)
sympy.matrices.common.MatrixOperations._eval_applyfunc(self,f)
sympy.matrices.common.MatrixOperations._eval_as_real_imag(self)
sympy.matrices.common.MatrixOperations._eval_conjugate(self)
sympy.matrices.common.MatrixOperations._eval_permute_cols(self,perm)
sympy.matrices.common.MatrixOperations._eval_permute_rows(self,perm)
sympy.matrices.common.MatrixOperations._eval_simplify(self,**kwargs)
sympy.matrices.common.MatrixOperations._eval_trace(self)
sympy.matrices.common.MatrixOperations._eval_transpose(self)
sympy.matrices.common.MatrixOperations._eval_trigsimp(self,**opts)
sympy.matrices.common.MatrixOperations.adjoint(self)
sympy.matrices.common.MatrixOperations.applyfunc(self,f)
sympy.matrices.common.MatrixOperations.as_real_imag(self,deep=True,**hints)
sympy.matrices.common.MatrixOperations.conjugate(self)
sympy.matrices.common.MatrixOperations.doit(self,**hints)
sympy.matrices.common.MatrixOperations.evalf(self,n=15,subs=None,maxn=100,chop=False,strict=False,quad=None,verbose=False)
sympy.matrices.common.MatrixOperations.expand(self,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.matrices.common.MatrixOperations.lower_triangular(self,k=0)
sympy.matrices.common.MatrixOperations.n(self,*args,**kwargs)
sympy.matrices.common.MatrixOperations.permute(self,perm,orientation='rows',direction='forward')
sympy.matrices.common.MatrixOperations.permute_cols(self,swaps,direction='forward')
sympy.matrices.common.MatrixOperations.permute_rows(self,swaps,direction='forward')
sympy.matrices.common.MatrixOperations.refine(self,assumptions=True)
sympy.matrices.common.MatrixOperations.replace(self,F,G,map=False,simultaneous=True,exact=None)
sympy.matrices.common.MatrixOperations.rot90(self,k=1)
sympy.matrices.common.MatrixOperations.simplify(self,**kwargs)
sympy.matrices.common.MatrixOperations.subs(self,*args,**kwargs)
sympy.matrices.common.MatrixOperations.trace(self)
sympy.matrices.common.MatrixOperations.transpose(self)
sympy.matrices.common.MatrixOperations.upper_triangular(self,k=0)
sympy.matrices.common.MatrixOperations.xreplace(self,rule)
sympy.matrices.common.MatrixProperties(MatrixRequired)
sympy.matrices.common.MatrixProperties._eval_atoms(self,*types)
sympy.matrices.common.MatrixProperties._eval_free_symbols(self)
sympy.matrices.common.MatrixProperties._eval_has(self,*patterns)
sympy.matrices.common.MatrixProperties._eval_is_Identity(self)->FuzzyBool
sympy.matrices.common.MatrixProperties._eval_is_anti_symmetric(self,simpfunc)
sympy.matrices.common.MatrixProperties._eval_is_diagonal(self)
sympy.matrices.common.MatrixProperties._eval_is_lower(self)
sympy.matrices.common.MatrixProperties._eval_is_lower_hessenberg(self)
sympy.matrices.common.MatrixProperties._eval_is_matrix_hermitian(self,simpfunc)
sympy.matrices.common.MatrixProperties._eval_is_symbolic(self)
sympy.matrices.common.MatrixProperties._eval_is_symmetric(self,simpfunc)
sympy.matrices.common.MatrixProperties._eval_is_upper_hessenberg(self)
sympy.matrices.common.MatrixProperties._eval_is_zero_matrix(self)
sympy.matrices.common.MatrixProperties._eval_values(self)
sympy.matrices.common.MatrixProperties._has_nonnegative_diagonals(self)
sympy.matrices.common.MatrixProperties._has_positive_diagonals(self)
sympy.matrices.common.MatrixProperties.atoms(self,*types)
sympy.matrices.common.MatrixProperties.free_symbols(self)
sympy.matrices.common.MatrixProperties.has(self,*patterns)
sympy.matrices.common.MatrixProperties.is_Identity(self)->FuzzyBool
sympy.matrices.common.MatrixProperties.is_anti_symmetric(self,simplify=True)
sympy.matrices.common.MatrixProperties.is_diagonal(self)
sympy.matrices.common.MatrixProperties.is_hermitian(self)
sympy.matrices.common.MatrixProperties.is_lower(self)
sympy.matrices.common.MatrixProperties.is_lower_hessenberg(self)
sympy.matrices.common.MatrixProperties.is_square(self)
sympy.matrices.common.MatrixProperties.is_strongly_diagonally_dominant(self)
sympy.matrices.common.MatrixProperties.is_symbolic(self)
sympy.matrices.common.MatrixProperties.is_symmetric(self,simplify=True)
sympy.matrices.common.MatrixProperties.is_upper(self)
sympy.matrices.common.MatrixProperties.is_upper_hessenberg(self)
sympy.matrices.common.MatrixProperties.is_weakly_diagonally_dominant(self)
sympy.matrices.common.MatrixProperties.is_zero_matrix(self)
sympy.matrices.common.MatrixProperties.values(self)
sympy.matrices.common.MatrixRequired
sympy.matrices.common.MatrixRequired.__eq__(self,other)
sympy.matrices.common.MatrixRequired.__getitem__(self,key)
sympy.matrices.common.MatrixRequired.__len__(self)
sympy.matrices.common.MatrixRequired._new(cls,*args,**kwargs)
sympy.matrices.common.MatrixRequired.shape(self)
sympy.matrices.common.MatrixShaping(MatrixRequired)
sympy.matrices.common.MatrixShaping._eval_col_del(self,col)
sympy.matrices.common.MatrixShaping._eval_col_insert(self,pos,other)
sympy.matrices.common.MatrixShaping._eval_col_join(self,other)
sympy.matrices.common.MatrixShaping._eval_extract(self,rowsList,colsList)
sympy.matrices.common.MatrixShaping._eval_get_diag_blocks(self)
sympy.matrices.common.MatrixShaping._eval_row_del(self,row)
sympy.matrices.common.MatrixShaping._eval_row_insert(self,pos,other)
sympy.matrices.common.MatrixShaping._eval_row_join(self,other)
sympy.matrices.common.MatrixShaping._eval_todok(self)
sympy.matrices.common.MatrixShaping._eval_tolist(self)
sympy.matrices.common.MatrixShaping._eval_vec(self)
sympy.matrices.common.MatrixShaping._eval_vech(self,diagonal)
sympy.matrices.common.MatrixShaping.col(self,j)
sympy.matrices.common.MatrixShaping.col_del(self,col)
sympy.matrices.common.MatrixShaping.col_insert(self,pos,other)
sympy.matrices.common.MatrixShaping.col_join(self,other)
sympy.matrices.common.MatrixShaping.diagonal(self,k=0)
sympy.matrices.common.MatrixShaping.extract(self,rowsList,colsList)
sympy.matrices.common.MatrixShaping.get_diag_blocks(self)
sympy.matrices.common.MatrixShaping.hstack(cls,*args)
sympy.matrices.common.MatrixShaping.reshape(self,rows,cols)
sympy.matrices.common.MatrixShaping.row(self,i)
sympy.matrices.common.MatrixShaping.row_del(self,row)
sympy.matrices.common.MatrixShaping.row_insert(self,pos,other)
sympy.matrices.common.MatrixShaping.row_join(self,other)
sympy.matrices.common.MatrixShaping.shape(self)
sympy.matrices.common.MatrixShaping.todod(M)
sympy.matrices.common.MatrixShaping.todok(self)
sympy.matrices.common.MatrixShaping.tolist(self)
sympy.matrices.common.MatrixShaping.vec(self)
sympy.matrices.common.MatrixShaping.vech(self,diagonal=True,check_symmetry=True)
sympy.matrices.common.MatrixShaping.vstack(cls,*args)
sympy.matrices.common.MatrixSpecial(MatrixRequired)
sympy.matrices.common.MatrixSpecial._eval_diag(cls,rows,cols,diag_dict)
sympy.matrices.common.MatrixSpecial._eval_eye(cls,rows,cols)
sympy.matrices.common.MatrixSpecial._eval_jordan_block(cls,size:int,eigenvalue,band='upper')
sympy.matrices.common.MatrixSpecial._eval_ones(cls,rows,cols)
sympy.matrices.common.MatrixSpecial._eval_wilkinson(cls,n)
sympy.matrices.common.MatrixSpecial._eval_zeros(cls,rows,cols)
sympy.matrices.common.MatrixSpecial.companion(kls,poly)
sympy.matrices.common.MatrixSpecial.diag(kls,*args,strict=False,unpack=True,rows=None,cols=None,**kwargs)
sympy.matrices.common.MatrixSpecial.eye(kls,rows,cols=None,**kwargs)
sympy.matrices.common.MatrixSpecial.jordan_block(kls,size=None,eigenvalue=None,*,band='upper',**kwargs)
sympy.matrices.common.MatrixSpecial.ones(kls,rows,cols=None,**kwargs)
sympy.matrices.common.MatrixSpecial.wilkinson(kls,n,**kwargs)
sympy.matrices.common.MatrixSpecial.zeros(kls,rows,cols=None,**kwargs)
sympy.matrices.common.NonInvertibleMatrixError(ValueError,MatrixError)
sympy.matrices.common.NonPositiveDefiniteMatrixError(ValueError,MatrixError)
sympy.matrices.common.NonSquareMatrixError(ShapeError)
sympy.matrices.common.ShapeError(ValueError,MatrixError)
sympy.matrices.common._CastableMatrix
sympy.matrices.common._CastableMatrix.as_immutable(self)
sympy.matrices.common._CastableMatrix.as_mutable(self)
sympy.matrices.common._MatrixWrapper(self,mat,shape)
sympy.matrices.common._MatrixWrapper.__getitem__(self,key)
sympy.matrices.common._MatrixWrapper.__iter__(self)
sympy.matrices.common._MinimalMatrix(self,rows,cols=None,mat=None,copy=False)
sympy.matrices.common._MinimalMatrix.__eq__(self,other)
sympy.matrices.common._MinimalMatrix.__getitem__(self,key)
sympy.matrices.common._MinimalMatrix.__len__(self)
sympy.matrices.common._MinimalMatrix.__repr__(self)
sympy.matrices.common._MinimalMatrix._new(cls,*args,**kwargs)
sympy.matrices.common._MinimalMatrix.shape(self)
sympy.matrices.common._matrixify(mat)
sympy.matrices.common.a2idx(j,n=None)
sympy.matrices.common.classof(A,B)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/dense.py----------------------------------------
A:sympy.matrices.dense.a->empty(m.shape, dtype)
A:sympy.matrices.dense.self[i, j]->_simplify(element, **kwargs)
A:sympy.matrices.dense.theta->sympify(theta)
A:sympy.matrices.dense.c->cos(theta)
A:sympy.matrices.dense.s->sin(theta)
A:sympy.matrices.dense.M->eye(dim)
A:sympy.matrices.dense.arr->empty(shape, dtype=object)
A:sympy.matrices.dense.arr[index]->Symbol('%s_%s' % (prefix, '_'.join(map(str, index))), **kwargs)
A:sympy.matrices.dense.seqs->list(map(sympify, seqs))
A:sympy.matrices.dense.k->len(seqs)
A:sympy.matrices.dense.n->len(functions)
A:sympy.matrices.dense.m->zeros(r, c)
A:sympy.matrices.dense.out->zeros(N)
A:sympy.matrices.dense.out[k, i + m]->g.diff(varlist[i])
A:sympy.matrices.dense.out[i + m, j + m]->f.diff(varlist[i]).diff(varlist[j])
A:sympy.matrices.dense.kwargs['cols']->kwargs.pop('c')
A:sympy.matrices.dense.ij->prng.sample(ij, int(len(ij) * percent // 100))
A:sympy.matrices.dense.(i, j)->divmod(ijk, c)
A:sympy.matrices.dense.m[i, j]->prng.randint(min, max)
A:sympy.matrices.dense.m[i, j]m[j, i]->prng.randint(min, max)
A:sympy.matrices.dense.W->Matrix(n, n, lambda i, j: functions[i].diff(var, j))
sympy.GramSchmidt(vlist,orthonormal=False)
sympy.MutableDenseMatrix(DenseMatrix,MutableRepMatrix)
sympy.casoratian(seqs,n,zero=True)
sympy.diag(*values,strict=True,unpack=False,**kwargs)
sympy.eye(*args,**kwargs)
sympy.hessian(f,varlist,constraints=())
sympy.jordan_cell(eigenval,n)
sympy.list2numpy(l,dtype=object)
sympy.matrices.dense.DenseMatrix(RepMatrix)
sympy.matrices.dense.DenseMatrix.LDLdecomposition(self,hermitian=True)
sympy.matrices.dense.DenseMatrix._eval_inverse(self,**kwargs)
sympy.matrices.dense.DenseMatrix._mat(self)
sympy.matrices.dense.DenseMatrix.as_immutable(self)
sympy.matrices.dense.DenseMatrix.as_mutable(self)
sympy.matrices.dense.DenseMatrix.cholesky(self,hermitian=True)
sympy.matrices.dense.DenseMatrix.lower_triangular_solve(self,rhs)
sympy.matrices.dense.DenseMatrix.upper_triangular_solve(self,rhs)
sympy.matrices.dense.GramSchmidt(vlist,orthonormal=False)
sympy.matrices.dense.MutableDenseMatrix(DenseMatrix,MutableRepMatrix)
sympy.matrices.dense.MutableDenseMatrix.simplify(self,**kwargs)
sympy.matrices.dense._force_mutable(x)
sympy.matrices.dense._iszero(x)
sympy.matrices.dense.casoratian(seqs,n,zero=True)
sympy.matrices.dense.diag(*values,strict=True,unpack=False,**kwargs)
sympy.matrices.dense.eye(*args,**kwargs)
sympy.matrices.dense.hessian(f,varlist,constraints=())
sympy.matrices.dense.jordan_cell(eigenval,n)
sympy.matrices.dense.list2numpy(l,dtype=object)
sympy.matrices.dense.matrix2numpy(m,dtype=object)
sympy.matrices.dense.matrix_multiply_elementwise(A,B)
sympy.matrices.dense.ones(*args,**kwargs)
sympy.matrices.dense.randMatrix(r,c=None,min=0,max=99,seed=None,symmetric=False,percent=100,prng=None)
sympy.matrices.dense.rot_axis1(theta)
sympy.matrices.dense.rot_axis2(theta)
sympy.matrices.dense.rot_axis3(theta)
sympy.matrices.dense.rot_ccw_axis1(theta)
sympy.matrices.dense.rot_ccw_axis2(theta)
sympy.matrices.dense.rot_ccw_axis3(theta)
sympy.matrices.dense.rot_givens(i,j,theta,dim=3)
sympy.matrices.dense.symarray(prefix,shape,**kwargs)
sympy.matrices.dense.wronskian(functions,var,method='bareiss')
sympy.matrices.dense.zeros(*args,**kwargs)
sympy.matrix2numpy(m,dtype=object)
sympy.matrix_multiply_elementwise(A,B)
sympy.ones(*args,**kwargs)
sympy.randMatrix(r,c=None,min=0,max=99,seed=None,symmetric=False,percent=100,prng=None)
sympy.rot_axis1(theta)
sympy.rot_axis2(theta)
sympy.rot_axis3(theta)
sympy.rot_ccw_axis1(theta)
sympy.rot_ccw_axis2(theta)
sympy.rot_ccw_axis3(theta)
sympy.rot_givens(i,j,theta,dim=3)
sympy.symarray(prefix,shape,**kwargs)
sympy.wronskian(functions,var,method='bareiss')
sympy.zeros(*args,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/reductions.py----------------------------------------
A:sympy.matrices.reductions.mat[p]->isimp(mat[p] / pivot_val)
A:sympy.matrices.reductions.isimp->_get_intermediate_simp(_dotprodsimp)
A:sympy.matrices.reductions.(pivot_offset, pivot_val, assumed_nonzero, newly_determined)->_find_reasonable_pivot(get_col(piv_col)[piv_row:], iszerofunc, simpfunc)
A:sympy.matrices.reductions.(mat, pivot_cols, swaps)->_row_reduce_list(list(M), M.rows, M.cols, M.one, iszerofunc, simpfunc, normalize_last=normalize_last, normalize=normalize, zero_above=zero_above)
A:sympy.matrices.reductions.zeros_below->all((iszerofunc(t) for t in M[1:, 0]))
A:sympy.matrices.reductions.(mat, pivots, _)->_row_reduce(M, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False)
A:sympy.matrices.reductions.d->M.det()
A:sympy.matrices.reductions.(mat, _)->_permute_complexity_right(M, iszerofunc=iszerofunc)
A:sympy.matrices.reductions.(_, pivots, _)->_row_reduce(mat, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False)
A:sympy.matrices.reductions.(mat, pivot_cols, _)->_row_reduce(M, iszerofunc, simpfunc, normalize_last, normalize=True, zero_above=True)
sympy.matrices.reductions._echelon_form(M,iszerofunc=_iszero,simplify=False,with_pivots=False)
sympy.matrices.reductions._is_echelon(M,iszerofunc=_iszero)
sympy.matrices.reductions._rank(M,iszerofunc=_iszero,simplify=False)
sympy.matrices.reductions._row_reduce(M,iszerofunc,simpfunc,normalize_last=True,normalize=True,zero_above=True)
sympy.matrices.reductions._row_reduce_list(mat,rows,cols,one,iszerofunc,simpfunc,normalize_last=True,normalize=True,zero_above=True)
sympy.matrices.reductions._rref(M,iszerofunc=_iszero,simplify=False,pivots=True,normalize_last=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/immutable.py----------------------------------------
A:sympy.matrices.immutable.is_diagonalizable->cacheit(is_diagonalizable)
A:sympy.matrices.immutable.(rows, cols, flat_list)->cls._handle_creation_inputs(*args, **kwargs)
A:sympy.matrices.immutable.flat_list->cls._smat_to_DomainMatrix(rows, cols, smat).to_sympy().to_list_flat()
A:sympy.matrices.immutable.rep->cls._smat_to_DomainMatrix(rows, cols, smat)
A:sympy.matrices.immutable.obj->sympy.core.Basic.__new__(cls, Integer(rows), Integer(cols), Dict(smat))
A:sympy.matrices.immutable.(rows, cols, smat)->cls._handle_creation_inputs(*args, **kwargs)
A:sympy.matrices.immutable.smat->cls._smat_to_DomainMatrix(rows, cols, smat).to_sympy().to_dok()
sympy.ImmutableDenseMatrix(DenseMatrix,ImmutableRepMatrix)
sympy.ImmutableSparseMatrix(SparseRepMatrix,ImmutableRepMatrix)
sympy.matrices.immutable.ImmutableDenseMatrix(DenseMatrix,ImmutableRepMatrix)
sympy.matrices.immutable.ImmutableDenseMatrix._fromrep(cls,rep)
sympy.matrices.immutable.ImmutableDenseMatrix._new(cls,*args,**kwargs)
sympy.matrices.immutable.ImmutableRepMatrix(cls,*args,**kwargs)
sympy.matrices.immutable.ImmutableRepMatrix.__setitem__(self,*args)
sympy.matrices.immutable.ImmutableRepMatrix._entry(self,i,j,**kwargs)
sympy.matrices.immutable.ImmutableRepMatrix.as_immutable(self)
sympy.matrices.immutable.ImmutableRepMatrix.cols(self)
sympy.matrices.immutable.ImmutableRepMatrix.copy(self)
sympy.matrices.immutable.ImmutableRepMatrix.is_diagonalizable(self,reals_only=False,**kwargs)
sympy.matrices.immutable.ImmutableRepMatrix.rows(self)
sympy.matrices.immutable.ImmutableRepMatrix.shape(self)
sympy.matrices.immutable.ImmutableSparseMatrix(SparseRepMatrix,ImmutableRepMatrix)
sympy.matrices.immutable.ImmutableSparseMatrix._fromrep(cls,rep)
sympy.matrices.immutable.ImmutableSparseMatrix._new(cls,*args,**kwargs)
sympy.matrices.immutable._eval_is_eq(lhs,rhs)
sympy.matrices.immutable.sympify_matrix(arg)
sympy.matrices.immutable.sympify_mpmath_matrix(arg)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/graph.py----------------------------------------
A:sympy.matrices.graph.V->range(M.rows)
A:sympy.matrices.graph.E->sorted(M.todok().keys())
A:sympy.matrices.graph.rep->getattr(M, '_rep', None)
A:sympy.matrices.graph.iblocks->list(reversed(iblocks))
A:sympy.matrices.graph.p->Permutation(flatten(iblocks))
A:sympy.matrices.graph.P->PermutationMatrix(p)
A:sympy.matrices.graph.B->BlockMatrix(rows)
sympy.matrices.graph._connected_components(M)
sympy.matrices.graph._connected_components_decomposition(M)
sympy.matrices.graph._strongly_connected_components(M)
sympy.matrices.graph._strongly_connected_components_decomposition(M,lower=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/subspaces.py----------------------------------------
A:sympy.matrices.subspaces.(reduced, pivots)->cls.hstack(*vecs).echelon_form(simplify=simplify, with_pivots=True)
A:sympy.matrices.subspaces.M->cls.hstack(*vecs)
A:sympy.matrices.subspaces.(Q, R)->_QRdecomposition_optional(M, normalize=normalize)
A:sympy.matrices.subspaces.col->cls(Q[:, i])
sympy.matrices.subspaces._columnspace(M,simplify=False)
sympy.matrices.subspaces._nullspace(M,simplify=False,iszerofunc=_iszero)
sympy.matrices.subspaces._orthogonalize(cls,*vecs,normalize=False,rankcheck=False)
sympy.matrices.subspaces._rowspace(M,simplify=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/matrices.py----------------------------------------
A:sympy.matrices.matrices.cols->as_int(args[1])
A:sympy.matrices.matrices.(op, col, k, col1, col2)->self._normalize_op_args(op, col, k, col1, col2, 'col')
A:sympy.matrices.matrices.(op, row, k, row1, row2)->self._normalize_op_args(op, row, k, row1, row2, 'row')
A:sympy.matrices.matrices.orthogonalize->classmethod(orthogonalize)
A:sympy.matrices.matrices.deriv->ArrayDerivative(self, *args, evaluate=True)
A:sympy.matrices.matrices.X->self._new(X)
A:sympy.matrices.matrices.(P, J)->self.jordan_form()
A:sympy.matrices.matrices.elemk->sympy.core.mul.Mul._kind_dispatcher(k1.element_kind, k2.element_kind)
A:sympy.matrices.matrices._sympify->staticmethod(sympify)
A:sympy.matrices.matrices.jc[0, i]->KroneckerDelta(i, n)
A:sympy.matrices.matrices.bn->bn._eval_expand_func()._eval_expand_func()
A:sympy.matrices.matrices.jordan_cells->J.get_diag_blocks()
A:sympy.matrices.matrices.printer->StrPrinter()
A:sympy.matrices.matrices.ntop->as_int(ntop)
A:sympy.matrices.matrices.q->list(range(len(b)))
A:sympy.matrices.matrices.active[a]->list(range(len(b))).pop(0)
A:sympy.matrices.matrices.arr->arg.__array__()
A:sympy.matrices.matrices.dat->list(args[0])
A:sympy.matrices.matrices.evaluate->kwargs.get('evaluate', True)
A:sympy.matrices.matrices.rows->as_int(args[0])
A:sympy.matrices.matrices.ncol->set()
A:sympy.matrices.matrices.(r, c, flatT)->cls._handle_creation_inputs([i.T for i in row])
A:sympy.matrices.matrices.T->reshape(flatT, [c])
A:sympy.matrices.matrices.c->self.zeros(n).solve(f_val)
A:sympy.matrices.matrices.is_slice->isinstance(key, slice)
A:sympy.matrices.matrices.(i, j)key->self.key2ij(key)
A:sympy.matrices.matrices.is_mat->isinstance(value, MatrixBase)
A:sympy.matrices.matrices.value->Matrix(value)
A:sympy.matrices.matrices.singularvalues->self.singular_values()
A:sympy.matrices.matrices.n->len(mat)
A:sympy.matrices.matrices.mat->mat.conjugate().conjugate()
A:sympy.matrices.matrices.b->b.conjugate().conjugate()
A:sympy.matrices.matrices.work->zeros(n)
A:sympy.matrices.matrices.exp_l->exp(l)
A:sympy.matrices.matrices.eigen->self.eigenvals()
A:sympy.matrices.matrices.max_mul->max(eigen.values())
A:sympy.matrices.matrices.dd->diff(dd, x)
A:sympy.matrices.matrices.r->self.zeros(n)
A:sympy.matrices.matrices.f_val->self.zeros(n, 1)
A:sympy.matrices.matrices.f_val[row]->f.subs(x, i)
A:sympy.matrices.matrices.d_i->derivative[deri].subs(x, i)
A:sympy.matrices.matrices.ans->self.zeros(n)
A:sympy.matrices.matrices.pre->self.eye(n)
A:sympy.matrices.matrices.cells->J.get_diag_blocks()
A:sympy.matrices.matrices.eJ->diag(*blocks)
A:sympy.matrices.matrices.ret->self.__class__(ret)
A:sympy.matrices.matrices.x->uniquely_named_symbol('x', self, modify=lambda s: '_' + s)
A:sympy.matrices.matrices.p->self.charpoly(x)
A:sympy.matrices.matrices.rlo->a2idx(keys[0], self.rows)
A:sympy.matrices.matrices.clo->a2idx(keys[1], self.cols)
A:sympy.matrices.matrices.norm->self.norm()
A:sympy.matrices.matrices.out->self.applyfunc(lambda i: i / norm)
A:sympy.matrices.matrices.m->self.applyfunc(abs)
A:sympy.matrices.matrices.s->StrPrinter()._print(self[i, j])
A:sympy.matrices.matrices.maxlen[j]->max(len(s), maxlen[j])
A:sympy.matrices.matrices.row[j]->getattr(elem, align)(maxlen[j])
sympy.DeferredVector(Symbol,NotIterable)
sympy.MatrixBase(MatrixDeprecated,MatrixCalculus,MatrixEigen,MatrixCommon,Printable)
sympy.matrices.matrices.DeferredVector(Symbol,NotIterable)
sympy.matrices.matrices.DeferredVector.__getitem__(self,i)
sympy.matrices.matrices.DeferredVector.__repr__(self)
sympy.matrices.matrices.DeferredVector.__str__(self)
sympy.matrices.matrices.MatrixBase(MatrixDeprecated,MatrixCalculus,MatrixEigen,MatrixCommon,Printable)
sympy.matrices.matrices.MatrixBase.D(self)
sympy.matrices.matrices.MatrixBase.LDLdecomposition(self,hermitian=True)
sympy.matrices.matrices.MatrixBase.LDLsolve(self,rhs)
sympy.matrices.matrices.MatrixBase.LUdecomposition(self,iszerofunc=_iszero,simpfunc=None,rankcheck=False)
sympy.matrices.matrices.MatrixBase.LUdecompositionFF(self)
sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple(self,iszerofunc=_iszero,simpfunc=None,rankcheck=False)
sympy.matrices.matrices.MatrixBase.LUsolve(self,rhs,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.QRdecomposition(self)
sympy.matrices.matrices.MatrixBase.QRsolve(self,b)
sympy.matrices.matrices.MatrixBase.__array__(self,dtype=object)
sympy.matrices.matrices.MatrixBase.__len__(self)
sympy.matrices.matrices.MatrixBase.__str__(self)
sympy.matrices.matrices.MatrixBase._eval_matrix_exp_jblock(self)
sympy.matrices.matrices.MatrixBase._eval_matrix_log_jblock(self)
sympy.matrices.matrices.MatrixBase._format_str(self,printer=None)
sympy.matrices.matrices.MatrixBase._handle_creation_inputs(cls,*args,**kwargs)
sympy.matrices.matrices.MatrixBase._handle_ndarray(cls,arg)
sympy.matrices.matrices.MatrixBase._matrix_pow_by_jordan_blocks(self,num)
sympy.matrices.matrices.MatrixBase._setitem(self,key,value)
sympy.matrices.matrices.MatrixBase.add(self,b)
sympy.matrices.matrices.MatrixBase.analytic_func(self,f,x)
sympy.matrices.matrices.MatrixBase.cholesky(self,hermitian=True)
sympy.matrices.matrices.MatrixBase.cholesky_solve(self,rhs)
sympy.matrices.matrices.MatrixBase.condition_number(self)
sympy.matrices.matrices.MatrixBase.connected_components(self)
sympy.matrices.matrices.MatrixBase.connected_components_decomposition(self)
sympy.matrices.matrices.MatrixBase.copy(self)
sympy.matrices.matrices.MatrixBase.cross(self,b)
sympy.matrices.matrices.MatrixBase.diagonal_solve(self,rhs)
sympy.matrices.matrices.MatrixBase.dot(self,b,hermitian=None,conjugate_convention=None)
sympy.matrices.matrices.MatrixBase.dual(self)
sympy.matrices.matrices.MatrixBase.exp(self)
sympy.matrices.matrices.MatrixBase.flat(self)
sympy.matrices.matrices.MatrixBase.gauss_jordan_solve(self,B,freevar=False)
sympy.matrices.matrices.MatrixBase.inv(self,method=None,iszerofunc=_iszero,try_block_diag=False)
sympy.matrices.matrices.MatrixBase.inv_mod(self,m)
sympy.matrices.matrices.MatrixBase.inverse_ADJ(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.inverse_BLOCK(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.inverse_CH(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.inverse_GE(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.inverse_LDL(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.inverse_LU(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.inverse_QR(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.irregular(cls,ntop,*matrices,**kwargs)
sympy.matrices.matrices.MatrixBase.is_nilpotent(self)
sympy.matrices.matrices.MatrixBase.key2bounds(self,keys)
sympy.matrices.matrices.MatrixBase.key2ij(self,key)
sympy.matrices.matrices.MatrixBase.kind(self)->MatrixKind
sympy.matrices.matrices.MatrixBase.log(self,simplify=cancel)
sympy.matrices.matrices.MatrixBase.lower_triangular_solve(self,rhs)
sympy.matrices.matrices.MatrixBase.norm(self,ord=None)
sympy.matrices.matrices.MatrixBase.normalized(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.pinv(self,method='RD')
sympy.matrices.matrices.MatrixBase.pinv_solve(self,B,arbitrary_matrix=None)
sympy.matrices.matrices.MatrixBase.print_nonzero(self,symb='X')
sympy.matrices.matrices.MatrixBase.project(self,v)
sympy.matrices.matrices.MatrixBase.rank_decomposition(self,iszerofunc=_iszero,simplify=False)
sympy.matrices.matrices.MatrixBase.singular_value_decomposition(self)
sympy.matrices.matrices.MatrixBase.solve(self,rhs,method='GJ')
sympy.matrices.matrices.MatrixBase.solve_least_squares(self,rhs,method='CH')
sympy.matrices.matrices.MatrixBase.strongly_connected_components(self)
sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition(self,lower=True)
sympy.matrices.matrices.MatrixBase.table(self,printer,rowstart='[',rowend=']',rowsep='\n',colsep=',',align='right')
sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition(self)
sympy.matrices.matrices.MatrixBase.upper_triangular_solve(self,rhs)
sympy.matrices.matrices.MatrixCalculus(MatrixCommon)
sympy.matrices.matrices.MatrixCalculus._eval_derivative(self,arg)
sympy.matrices.matrices.MatrixCalculus.diff(self,*args,**kwargs)
sympy.matrices.matrices.MatrixCalculus.integrate(self,*args,**kwargs)
sympy.matrices.matrices.MatrixCalculus.jacobian(self,X)
sympy.matrices.matrices.MatrixCalculus.limit(self,*args)
sympy.matrices.matrices.MatrixDeprecated(MatrixCommon)
sympy.matrices.matrices.MatrixDeprecated.berkowitz(self)
sympy.matrices.matrices.MatrixDeprecated.berkowitz_charpoly(self,x=Dummy('lambda'),simplify=_simplify)
sympy.matrices.matrices.MatrixDeprecated.berkowitz_det(self)
sympy.matrices.matrices.MatrixDeprecated.berkowitz_eigenvals(self,**flags)
sympy.matrices.matrices.MatrixDeprecated.berkowitz_minors(self)
sympy.matrices.matrices.MatrixDeprecated.cofactorMatrix(self,method='berkowitz')
sympy.matrices.matrices.MatrixDeprecated.det_LU_decomposition(self)
sympy.matrices.matrices.MatrixDeprecated.det_bareis(self)
sympy.matrices.matrices.MatrixDeprecated.jordan_cell(self,eigenval,n)
sympy.matrices.matrices.MatrixDeprecated.jordan_cells(self,calc_transformation=True)
sympy.matrices.matrices.MatrixDeprecated.minorEntry(self,i,j,method='berkowitz')
sympy.matrices.matrices.MatrixDeprecated.minorMatrix(self,i,j)
sympy.matrices.matrices.MatrixDeprecated.permuteBkwd(self,perm)
sympy.matrices.matrices.MatrixDeprecated.permuteFwd(self,perm)
sympy.matrices.matrices.MatrixDeterminant(MatrixCommon)
sympy.matrices.matrices.MatrixDeterminant._eval_det_bareiss(self,iszerofunc=_is_zero_after_expand_mul)
sympy.matrices.matrices.MatrixDeterminant._eval_det_berkowitz(self)
sympy.matrices.matrices.MatrixDeterminant._eval_det_lu(self,iszerofunc=_iszero,simpfunc=None)
sympy.matrices.matrices.MatrixDeterminant._eval_determinant(self)
sympy.matrices.matrices.MatrixDeterminant.adjugate(self,method='berkowitz')
sympy.matrices.matrices.MatrixDeterminant.charpoly(self,x='lambda',simplify=_simplify)
sympy.matrices.matrices.MatrixDeterminant.cofactor(self,i,j,method='berkowitz')
sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix(self,method='berkowitz')
sympy.matrices.matrices.MatrixDeterminant.det(self,method='bareiss',iszerofunc=None)
sympy.matrices.matrices.MatrixDeterminant.minor(self,i,j,method='berkowitz')
sympy.matrices.matrices.MatrixDeterminant.minor_submatrix(self,i,j)
sympy.matrices.matrices.MatrixDeterminant.per(self)
sympy.matrices.matrices.MatrixEigen(MatrixSubspaces)
sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition(self,upper=True)
sympy.matrices.matrices.MatrixEigen.bidiagonalize(self,upper=True)
sympy.matrices.matrices.MatrixEigen.diagonalize(self,reals_only=False,sort=False,normalize=False)
sympy.matrices.matrices.MatrixEigen.eigenvals(self,error_when_incomplete=True,**flags)
sympy.matrices.matrices.MatrixEigen.eigenvects(self,error_when_incomplete=True,iszerofunc=_iszero,**flags)
sympy.matrices.matrices.MatrixEigen.is_diagonalizable(self,reals_only=False,**kwargs)
sympy.matrices.matrices.MatrixEigen.is_indefinite(self)
sympy.matrices.matrices.MatrixEigen.is_negative_definite(self)
sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite(self)
sympy.matrices.matrices.MatrixEigen.is_positive_definite(self)
sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite(self)
sympy.matrices.matrices.MatrixEigen.jordan_form(self,calc_transform=True,**kwargs)
sympy.matrices.matrices.MatrixEigen.left_eigenvects(self,**flags)
sympy.matrices.matrices.MatrixEigen.singular_values(self)
sympy.matrices.matrices.MatrixReductions(MatrixDeterminant)
sympy.matrices.matrices.MatrixReductions._eval_col_op_add_multiple_to_other_col(self,col,k,col2)
sympy.matrices.matrices.MatrixReductions._eval_col_op_multiply_col_by_const(self,col,k)
sympy.matrices.matrices.MatrixReductions._eval_col_op_swap(self,col1,col2)
sympy.matrices.matrices.MatrixReductions._eval_row_op_add_multiple_to_other_row(self,row,k,row2)
sympy.matrices.matrices.MatrixReductions._eval_row_op_multiply_row_by_const(self,row,k)
sympy.matrices.matrices.MatrixReductions._eval_row_op_swap(self,row1,row2)
sympy.matrices.matrices.MatrixReductions._normalize_op_args(self,op,col,k,col1,col2,error_str='col')
sympy.matrices.matrices.MatrixReductions.echelon_form(self,iszerofunc=_iszero,simplify=False,with_pivots=False)
sympy.matrices.matrices.MatrixReductions.elementary_col_op(self,op='n->kn',col=None,k=None,col1=None,col2=None)
sympy.matrices.matrices.MatrixReductions.elementary_row_op(self,op='n->kn',row=None,k=None,row1=None,row2=None)
sympy.matrices.matrices.MatrixReductions.is_echelon(self)
sympy.matrices.matrices.MatrixReductions.rank(self,iszerofunc=_iszero,simplify=False)
sympy.matrices.matrices.MatrixReductions.rref(self,iszerofunc=_iszero,simplify=False,pivots=True,normalize_last=True)
sympy.matrices.matrices.MatrixSubspaces(MatrixReductions)
sympy.matrices.matrices.MatrixSubspaces.columnspace(self,simplify=False)
sympy.matrices.matrices.MatrixSubspaces.nullspace(self,simplify=False,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixSubspaces.orthogonalize(cls,*vecs,**kwargs)
sympy.matrices.matrices.MatrixSubspaces.rowspace(self,simplify=False)
sympy.matrices.matrices.mat_mat_mul(k1,k2)
sympy.matrices.matrices.num_mat_mul(k1,k2)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/sparsetools.py----------------------------------------
A:sympy.matrices.sparsetools.indices->slice(IA[i], IA[i + 1])
A:sympy.matrices.sparsetools.rows->max(cols, s.rows)
A:sympy.matrices.sparsetools.cols->max(rows, s.cols)
A:sympy.matrices.sparsetools.rowscols->as_int(args[0])
A:sympy.matrices.sparsetools.(rows, cols)->map(as_int, args[:2])
A:sympy.matrices.sparsetools._->all((as_int(k) for k in args[-1]))
A:sympy.matrices.sparsetools.tba->Dummy()
A:sympy.matrices.sparsetools.(r, c)->rc(d)
A:sympy.matrices.sparsetools.vi->SparseMatrix(vi)
A:sympy.matrices.sparsetools.v->SparseMatrix(v)
A:sympy.matrices.sparsetools.(nr, xr)->divmod(rows - r, rv)
A:sympy.matrices.sparsetools.(nc, xc)->divmod(cols - c, cv)
A:sympy.matrices.sparsetools.do->min(nr, nc)
A:sympy.matrices.sparsetools.(do, x)->divmod(cols - c, cv)
A:sympy.matrices.sparsetools.j->min(v.shape)
A:sympy.matrices.sparsetools.s->SparseMatrix(None, smat)
A:sympy.matrices.sparsetools.smat->SparseMatrix(None, smat).todok()
sympy.banded(*args,**kwargs)
sympy.matrices.sparsetools._csrtodok(csr)
sympy.matrices.sparsetools._doktocsr(dok)
sympy.matrices.sparsetools.banded(*args,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/solvers.py----------------------------------------
A:sympy.matrices.solvers.dps->_get_intermediate_simp(expand_mul, expand_mul)
A:sympy.matrices.solvers.X->H.multiply(rhs).as_mutable()
A:sympy.matrices.solvers.X[i, j]->dps(X[i, j] / M[i, i])
A:sympy.matrices.solvers.M->H.multiply(M)
A:sympy.matrices.solvers.rhs->H.multiply(rhs)
A:sympy.matrices.solvers.L->H.multiply(M).cholesky(hermitian=hermitian)
A:sympy.matrices.solvers.Y->H.multiply(M).cholesky(hermitian=hermitian).lower_triangular_solve(rhs)
A:sympy.matrices.solvers.(L, D)->H.multiply(M).LDLdecomposition(hermitian=hermitian)
A:sympy.matrices.solvers.Z->D.diagonal_solve(Y)
A:sympy.matrices.solvers.(A, perm)->H.multiply(M).LUdecomposition_Simple(iszerofunc=_iszero, rankcheck=True)
A:sympy.matrices.solvers.b->H.multiply(rhs).permute_rows(perm).as_mutable()
A:sympy.matrices.solvers.(Q, R)->H.multiply(M).QRdecomposition()
A:sympy.matrices.solvers.tmp->dps(tmp)
A:sympy.matrices.solvers.aug->H.multiply(M).hstack(M.copy(), B.copy())
A:sympy.matrices.solvers.(A, pivots)->H.multiply(M).hstack(M.copy(), B.copy()).rref(simplify=True)
A:sympy.matrices.solvers.pivots->list(filter(lambda p: p < col, pivots))
A:sympy.matrices.solvers.rank->len(pivots)
A:sympy.matrices.solvers.gen->numbered_symbols(name)
A:sympy.matrices.solvers.tau->Matrix([next(gen) for k in range((col - rank) * B_cols)]).reshape(col - rank, B_cols)
A:sympy.matrices.solvers.free_sol->Matrix([next(gen) for k in range((col - rank) * B_cols)]).reshape(col - rank, B_cols).vstack(vt - V * tau, tau)
A:sympy.matrices.solvers.sol->zeros(col, B_cols)
A:sympy.matrices.solvers.A_pinv->H.multiply(M).pinv()
A:sympy.matrices.solvers.w->symbols('w:{}_:{}'.format(rows, cols), cls=Dummy)
A:sympy.matrices.solvers.(soln, param)->H.multiply(M).gauss_jordan_solve(rhs)
sympy.matrices.solvers._LDLsolve(M,rhs)
sympy.matrices.solvers._LUsolve(M,rhs,iszerofunc=_iszero)
sympy.matrices.solvers._QRsolve(M,b)
sympy.matrices.solvers._cholesky_solve(M,rhs)
sympy.matrices.solvers._diagonal_solve(M,rhs)
sympy.matrices.solvers._gauss_jordan_solve(M,B,freevar=False)
sympy.matrices.solvers._lower_triangular_solve(M,rhs)
sympy.matrices.solvers._lower_triangular_solve_sparse(M,rhs)
sympy.matrices.solvers._pinv_solve(M,B,arbitrary_matrix=None)
sympy.matrices.solvers._solve(M,rhs,method='GJ')
sympy.matrices.solvers._solve_least_squares(M,rhs,method='CH')
sympy.matrices.solvers._upper_triangular_solve(M,rhs)
sympy.matrices.solvers._upper_triangular_solve_sparse(M,rhs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/inverse.py----------------------------------------
A:sympy.matrices.inverse.(B, C)->M.rank_decomposition()
A:sympy.matrices.inverse.Bp->_pinv_full_rank(B)
A:sympy.matrices.inverse.Cp->_pinv_full_rank(C)
A:sympy.matrices.inverse.(P, D)->A.multiply(AH).diagonalize(normalize=True)
A:sympy.matrices.inverse.D_pinv->D.applyfunc(lambda x: 0 if _iszero(x) else 1 / x)
A:sympy.matrices.inverse.det_K->M.det()
A:sympy.matrices.inverse.det_inv->mod_inverse(det_K, m)
A:sympy.matrices.inverse.K_adj->M.adjugate()
A:sympy.matrices.inverse.K_inv->M.__class__(N, N, [det_inv * K_adj[i, j] % m for i in range(N) for j in range(N)])
A:sympy.matrices.inverse.d->_verify_invertible(M, iszerofunc=iszerofunc)
A:sympy.matrices.inverse.zero->any((iszerofunc(ok[j, j]) for j in range(ok.rows)))
A:sympy.matrices.inverse.big->dense.Matrix.hstack(M.as_mutable(), Matrix.eye(M.rows))
A:sympy.matrices.inverse.D_inv->_inv_block(D)
A:sympy.matrices.inverse.A_n->_inv_block(A_n)
A:sympy.matrices.inverse.nn->BlockMatrix([[A_n, B_n], [C_n, D_n]]).as_explicit()
A:sympy.matrices.inverse.blocks->M.get_diag_blocks()
A:sympy.matrices.inverse.rv->M.inverse_BLOCK(iszerofunc=iszerofunc)
sympy.matrices.inverse._inv(M,method=None,iszerofunc=_iszero,try_block_diag=False)
sympy.matrices.inverse._inv_ADJ(M,iszerofunc=_iszero)
sympy.matrices.inverse._inv_CH(M,iszerofunc=_iszero)
sympy.matrices.inverse._inv_GE(M,iszerofunc=_iszero)
sympy.matrices.inverse._inv_LDL(M,iszerofunc=_iszero)
sympy.matrices.inverse._inv_LU(M,iszerofunc=_iszero)
sympy.matrices.inverse._inv_QR(M,iszerofunc=_iszero)
sympy.matrices.inverse._inv_block(M,iszerofunc=_iszero)
sympy.matrices.inverse._inv_mod(M,m)
sympy.matrices.inverse._pinv(M,method='RD')
sympy.matrices.inverse._pinv_diagonalization(M)
sympy.matrices.inverse._pinv_full_rank(M)
sympy.matrices.inverse._pinv_rank_decomposition(M)
sympy.matrices.inverse._verify_invertible(M,iszerofunc=_iszero)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/utilities.py----------------------------------------
A:sympy.matrices.utilities._dotprodsimp_state->DotProdSimpState()
sympy.matrices.dotprodsimp(x)
sympy.matrices.utilities.DotProdSimpState(self)
sympy.matrices.utilities._dotprodsimp(expr,withsimp=False)
sympy.matrices.utilities._get_intermediate_simp(deffunc=lambdax:x,offfunc=lambdax:x,onfunc=_dotprodsimp,dotprodsimp=None)
sympy.matrices.utilities._get_intermediate_simp_bool(default=False,dotprodsimp=None)
sympy.matrices.utilities._is_zero_after_expand_mul(x)
sympy.matrices.utilities._iszero(x)
sympy.matrices.utilities._simplify(expr)
sympy.matrices.utilities.dotprodsimp(x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/blockmatrix.py----------------------------------------
A:sympy.matrices.expressions.blockmatrix.mat->Matrix([[expr.arg.blocks[0].inverse()]])
A:sympy.matrices.expressions.blockmatrix.obj->sympy.core.Basic.__new__(cls, mat)
A:sympy.matrices.expressions.blockmatrix.M->M.row_join(bb[row, col].blocks).row_join(bb[row, col].blocks)
A:sympy.matrices.expressions.blockmatrix.[[A, B], [C, D]]->expr.arg.blocks.tolist()
A:sympy.matrices.expressions.blockmatrix.real_matrices->Matrix(self.blockshape[0], self.blockshape[1], real_matrices)
A:sympy.matrices.expressions.blockmatrix.im_matrices->Matrix(self.blockshape[0], self.blockshape[1], im_matrices)
A:sympy.matrices.expressions.blockmatrix.Ip->Identity(A.shape[0])
A:sympy.matrices.expressions.blockmatrix.Iq->Identity(B.shape[1])
A:sympy.matrices.expressions.blockmatrix.Z->ZeroMatrix(*B.shape)
A:sympy.matrices.expressions.blockmatrix.L->BlockMatrix([[A, Z], [C * AI, Q]])
A:sympy.matrices.expressions.blockmatrix.D->bc_unpack(BM(blocks[i:, j:]))
A:sympy.matrices.expressions.blockmatrix.U->BlockMatrix([[A, AI * B], [Z.T, Q]])
A:sympy.matrices.expressions.blockmatrix.n->len(self.args)
A:sympy.matrices.expressions.blockmatrix.conditioned_rl->condition(hasbm, typed({MatAdd: do_one(bc_matadd, bc_block_plus_ident), MatMul: do_one(bc_matmul, bc_dist), MatPow: bc_matmul, Transpose: bc_transpose, Inverse: bc_inverse, BlockMatrix: do_one(bc_unpack, deblock)}))
A:sympy.matrices.expressions.blockmatrix.rule->exhaust(bottom_up(exhaust(conditioned_rl), fns=expr_fns))
A:sympy.matrices.expressions.blockmatrix.result->rule(expr)
A:sympy.matrices.expressions.blockmatrix.doit->getattr(result, 'doit', None)
A:sympy.matrices.expressions.blockmatrix.args->sift(expr.args, lambda M: isinstance(M, BlockMatrix))
A:sympy.matrices.expressions.blockmatrix.block->block._blockadd(b)._blockadd(b)
A:sympy.matrices.expressions.blockmatrix.block_id->BlockDiagMatrix(*[Identity(k) for k in blocks[0].rowblocksizes])
A:sympy.matrices.expressions.blockmatrix.(factor, mat)->expr.as_coeff_mmul()
A:sympy.matrices.expressions.blockmatrix.unpacked->unpack(mat)
A:sympy.matrices.expressions.blockmatrix.(factor, matrices)->expr.as_coeff_matrices()
A:sympy.matrices.expressions.blockmatrix.matrices[i]->BlockMatrix([[A]])._blockmul(B)
A:sympy.matrices.expressions.blockmatrix.collapse->block_collapse(expr.arg)
A:sympy.matrices.expressions.blockmatrix.expr2->blockinverse_1x1(expr)
A:sympy.matrices.expressions.blockmatrix.formula->_choose_2x2_inversion_formula(A, B, C, D)
A:sympy.matrices.expressions.blockmatrix.A_inv->ask(Q.invertible(A))
A:sympy.matrices.expressions.blockmatrix.B_inv->ask(Q.invertible(B))
A:sympy.matrices.expressions.blockmatrix.C_inv->ask(Q.invertible(C))
A:sympy.matrices.expressions.blockmatrix.D_inv->ask(Q.invertible(D))
A:sympy.matrices.expressions.blockmatrix.bb->bc_unpack(BM(blocks[:i, j:])).blocks.applyfunc(wrap)
A:sympy.matrices.expressions.blockmatrix.MM->MM.col_join(M).col_join(M)
A:sympy.matrices.expressions.blockmatrix.A->bc_unpack(BM(blocks[:i, :j]))
A:sympy.matrices.expressions.blockmatrix.B->bc_unpack(BM(blocks[:i, j:]))
A:sympy.matrices.expressions.blockmatrix.C->bc_unpack(BM(blocks[i:, :j]))
A:sympy.matrices.expressions.blockmatrix.rowbounds->bounds(rowsizes)
A:sympy.matrices.expressions.blockmatrix.colbounds->bounds(colsizes)
sympy.BlockDiagMatrix(cls,*mats)
sympy.BlockMatrix(cls,*args,**kwargs)
sympy.block_collapse(expr)
sympy.blockcut(expr,rowsizes,colsizes)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix(cls,*mats)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._all_square_blocks(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._blockadd(self,other)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._blockmul(self,other)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._eval_determinant(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._eval_inverse(self,expand='ignored')
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._eval_transpose(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.blocks(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.blockshape(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.colblocksizes(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.diag(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.rowblocksizes(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.shape(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix(cls,*args,**kwargs)
sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix._blockadd(self,other)
sympy.matrices.expressions.blockmatrix.BlockMatrix._blockmul(self,other)
sympy.matrices.expressions.blockmatrix.BlockMatrix._entry(self,i,j,**kwargs)
sympy.matrices.expressions.blockmatrix.BlockMatrix._eval_adjoint(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix._eval_as_real_imag(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix._eval_determinant(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix._eval_trace(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix._eval_transpose(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.blocks(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.blockshape(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.colblocksizes(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.equals(self,other)
sympy.matrices.expressions.blockmatrix.BlockMatrix.is_Identity(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.is_structurally_symmetric(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.rowblocksizes(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.schur(self,mat='A',generalized=False)
sympy.matrices.expressions.blockmatrix.BlockMatrix.shape(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.structurally_equal(self,other)
sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose(self)
sympy.matrices.expressions.blockmatrix._choose_2x2_inversion_formula(A,B,C,D)
sympy.matrices.expressions.blockmatrix.bc_block_plus_ident(expr)
sympy.matrices.expressions.blockmatrix.bc_dist(expr)
sympy.matrices.expressions.blockmatrix.bc_inverse(expr)
sympy.matrices.expressions.blockmatrix.bc_matadd(expr)
sympy.matrices.expressions.blockmatrix.bc_matmul(expr)
sympy.matrices.expressions.blockmatrix.bc_transpose(expr)
sympy.matrices.expressions.blockmatrix.bc_unpack(expr)
sympy.matrices.expressions.blockmatrix.block_collapse(expr)
sympy.matrices.expressions.blockmatrix.blockcut(expr,rowsizes,colsizes)
sympy.matrices.expressions.blockmatrix.blockinverse_1x1(expr)
sympy.matrices.expressions.blockmatrix.blockinverse_2x2(expr)
sympy.matrices.expressions.blockmatrix.bounds(sizes)
sympy.matrices.expressions.blockmatrix.deblock(B)
sympy.matrices.expressions.blockmatrix.reblock_2x2(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/determinant.py----------------------------------------
A:sympy.matrices.expressions.determinant.mat->sympify(mat)
sympy.Determinant(cls,mat)
sympy.Permanent(cls,mat)
sympy.det(matexpr)
sympy.matrices.expressions.determinant.Determinant(cls,mat)
sympy.matrices.expressions.determinant.Determinant.arg(self)
sympy.matrices.expressions.determinant.Determinant.doit(self,expand=False,**hints)
sympy.matrices.expressions.determinant.Determinant.kind(self)
sympy.matrices.expressions.determinant.Permanent(cls,mat)
sympy.matrices.expressions.determinant.Permanent.arg(self)
sympy.matrices.expressions.determinant.Permanent.doit(self,expand=False,**hints)
sympy.matrices.expressions.determinant.det(matexpr)
sympy.matrices.expressions.determinant.per(matexpr)
sympy.matrices.expressions.determinant.refine_Determinant(expr,assumptions)
sympy.per(matexpr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/transpose.py----------------------------------------
A:sympy.matrices.expressions.transpose.arg->arg.doit(**hints).doit(**hints)
A:sympy.matrices.expressions.transpose._eval_transpose->getattr(arg, '_eval_transpose', None)
A:sympy.matrices.expressions.transpose.result->_eval_transpose()
A:sympy.matrices.expressions.transpose.lines->self.args[0]._eval_derivative_matrix_lines(x)
sympy.Transpose(MatrixExpr)
sympy.matrices.expressions.transpose.Transpose(MatrixExpr)
sympy.matrices.expressions.transpose.Transpose._entry(self,i,j,expand=False,**kwargs)
sympy.matrices.expressions.transpose.Transpose._eval_adjoint(self)
sympy.matrices.expressions.transpose.Transpose._eval_conjugate(self)
sympy.matrices.expressions.transpose.Transpose._eval_derivative(self,x)
sympy.matrices.expressions.transpose.Transpose._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.transpose.Transpose._eval_determinant(self)
sympy.matrices.expressions.transpose.Transpose._eval_trace(self)
sympy.matrices.expressions.transpose.Transpose._eval_transpose(self)
sympy.matrices.expressions.transpose.Transpose.arg(self)
sympy.matrices.expressions.transpose.Transpose.doit(self,**hints)
sympy.matrices.expressions.transpose.Transpose.shape(self)
sympy.matrices.expressions.transpose.refine_Transpose(expr,assumptions)
sympy.matrices.expressions.transpose.transpose(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/applyfunc.py----------------------------------------
A:sympy.matrices.expressions.applyfunc.expr->expr.doit(**hints).doit(**hints)
A:sympy.matrices.expressions.applyfunc.ret->function(expr)
A:sympy.matrices.expressions.applyfunc.d->Dummy('d')
A:sympy.matrices.expressions.applyfunc.function->self.function(d)
A:sympy.matrices.expressions.applyfunc.obj->sympy.matrices.expressions.MatrixExpr.__new__(cls, function, expr)
A:sympy.matrices.expressions.applyfunc.deep->hints.get('deep', True)
A:sympy.matrices.expressions.applyfunc.fdiff->self._get_function_fdiff()
A:sympy.matrices.expressions.applyfunc.dexpr->self.expr.diff(x)
A:sympy.matrices.expressions.applyfunc.lr->self.expr._eval_derivative_matrix_lines(x)
A:sympy.matrices.expressions.applyfunc.ewdiff->ElementwiseApplyFunction(fdiff, self.expr)
A:sympy.matrices.expressions.applyfunc.ptr2->Identity(self.shape[1])
A:sympy.matrices.expressions.applyfunc.ptr1->Identity(self.shape[0])
A:sympy.matrices.expressions.applyfunc.subexpr->ExprBuilder(ArrayContraction, [ExprBuilder(ArrayTensorProduct, [ptr1, newptr1, ewdiff, ptr2, newptr2]), (1, 2, 4), (5, 7, 8)], validator=ArrayContraction._validate)
A:sympy.matrices.expressions.applyfunc.newptr1->Identity(ptr1.shape[1])
A:sympy.matrices.expressions.applyfunc.newptr2->Identity(ptr2.shape[1])
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction(cls,function,expr)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction._entry(self,i,j,**kwargs)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction._eval_derivative(self,x)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction._eval_transpose(self)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction._get_function_fdiff(self)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction.doit(self,**hints)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction.expr(self)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction.function(self)
sympy.matrices.expressions.applyfunc.ElementwiseApplyFunction.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/kronecker.py----------------------------------------
A:sympy.matrices.expressions.kronecker.args->sift(expr.args, _kronecker_dims_key)
A:sympy.matrices.expressions.kronecker.ret->Identity(prod((a.rows for a in args)))
A:sympy.matrices.expressions.kronecker.(i, m)->divmod(i, mat.rows)
A:sympy.matrices.expressions.kronecker.(j, n)->divmod(j, mat.cols)
A:sympy.matrices.expressions.kronecker.deep->hints.get('deep', True)
A:sympy.matrices.expressions.kronecker.(c, nc)->arg.args_cnc()
A:sympy.matrices.expressions.kronecker.c_part->Mul(*c_part)
A:sympy.matrices.expressions.kronecker.start->start.row_join(matrix_expansion * mat[i * cols + j + 1]).row_join(matrix_expansion * mat[i * cols + j + 1])
A:sympy.matrices.expressions.kronecker.next->next.col_join(start).col_join(start)
A:sympy.matrices.expressions.kronecker.canonicalize->exhaust(condition(lambda x: isinstance(x, KroneckerProduct), do_one(*rules)))
A:sympy.matrices.expressions.kronecker.nonkrons->sift(expr.args, _kronecker_dims_key).pop((0,), None)
A:sympy.matrices.expressions.kronecker.(factor, matrices)->expr.as_coeff_matrices()
A:sympy.matrices.expressions.kronecker.matrices[i]->A._kronecker_mul(B)
A:sympy.matrices.expressions.kronecker.rule->exhaust(bottom_up(exhaust(condition(haskron, typed({MatAdd: kronecker_mat_add, MatMul: kronecker_mat_mul, MatPow: kronecker_mat_pow})))))
A:sympy.matrices.expressions.kronecker.result->rule(expr)
A:sympy.matrices.expressions.kronecker.doit->getattr(result, 'doit', None)
sympy.KroneckerProduct(cls,*args,check=True)
sympy.kronecker_product(*matrices)
sympy.matrices.expressions.combine_kronecker(expr)
sympy.matrices.expressions.kronecker.KroneckerProduct(cls,*args,check=True)
sympy.matrices.expressions.kronecker.KroneckerProduct._entry(self,i,j,**kwargs)
sympy.matrices.expressions.kronecker.KroneckerProduct._eval_adjoint(self)
sympy.matrices.expressions.kronecker.KroneckerProduct._eval_conjugate(self)
sympy.matrices.expressions.kronecker.KroneckerProduct._eval_determinant(self)
sympy.matrices.expressions.kronecker.KroneckerProduct._eval_expand_kroneckerproduct(self,**hints)
sympy.matrices.expressions.kronecker.KroneckerProduct._eval_inverse(self)
sympy.matrices.expressions.kronecker.KroneckerProduct._eval_trace(self)
sympy.matrices.expressions.kronecker.KroneckerProduct._eval_transpose(self)
sympy.matrices.expressions.kronecker.KroneckerProduct._kronecker_add(self,other)
sympy.matrices.expressions.kronecker.KroneckerProduct._kronecker_mul(self,other)
sympy.matrices.expressions.kronecker.KroneckerProduct.doit(self,**hints)
sympy.matrices.expressions.kronecker.KroneckerProduct.has_matching_shape(self,other)
sympy.matrices.expressions.kronecker.KroneckerProduct.shape(self)
sympy.matrices.expressions.kronecker.KroneckerProduct.structurally_equal(self,other)
sympy.matrices.expressions.kronecker._kronecker_dims_key(expr)
sympy.matrices.expressions.kronecker.combine_kronecker(expr)
sympy.matrices.expressions.kronecker.explicit_kronecker_product(kron)
sympy.matrices.expressions.kronecker.extract_commutative(kron)
sympy.matrices.expressions.kronecker.kronecker_mat_add(expr)
sympy.matrices.expressions.kronecker.kronecker_mat_mul(expr)
sympy.matrices.expressions.kronecker.kronecker_mat_pow(expr)
sympy.matrices.expressions.kronecker.kronecker_product(*matrices)
sympy.matrices.expressions.kronecker.matrix_kronecker_product(*matrices)
sympy.matrices.expressions.kronecker.validate(*args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/dotproduct.py----------------------------------------
A:sympy.matrices.expressions.dotproduct.(arg1, arg2)->_sympify((arg1, arg2))
sympy.DotProduct(cls,arg1,arg2)
sympy.matrices.expressions.dotproduct.DotProduct(cls,arg1,arg2)
sympy.matrices.expressions.dotproduct.DotProduct.doit(self,expand=False,**hints)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/_shape.py----------------------------------------
A:sympy.matrices.expressions._shape.(rows, cols)->zip(*(x.shape for x in args))
sympy.matrices.expressions._shape.is_matadd_valid(*args:MatrixExpr)->Boolean
sympy.matrices.expressions._shape.is_matmul_valid(*args:Union[MatrixExpr,Expr])->Boolean
sympy.matrices.expressions._shape.is_square(arg:MatrixExpr,/)->Boolean
sympy.matrices.expressions._shape.validate_matadd_integer(*args:MatrixExpr)->None
sympy.matrices.expressions._shape.validate_matmul_integer(*args:MatrixExpr)->None


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/permutation.py----------------------------------------
A:sympy.matrices.expressions.permutation.perm->perm.doit(deep=deep, **hints).doit(deep=deep, **hints)
A:sympy.matrices.expressions.permutation.sign->self.args[0].signature()
A:sympy.matrices.expressions.permutation.l->len(cycle)
A:sympy.matrices.expressions.permutation.m->max(cycle)
A:sympy.matrices.expressions.permutation.mat->mat.rewrite(MatMul).rewrite(MatMul)
A:sympy.matrices.expressions.permutation.axis->_sympify(axis)
A:sympy.matrices.expressions.permutation.deep->kwargs.get('deep', True)
sympy.MatrixPermute(cls,mat,perm,axis=S.Zero)
sympy.PermutationMatrix(cls,perm)
sympy.matrices.expressions.permutation.MatrixPermute(cls,mat,perm,axis=S.Zero)
sympy.matrices.expressions.permutation.MatrixPermute._entry(self,i,j,**kwargs)
sympy.matrices.expressions.permutation.MatrixPermute._eval_rewrite_as_MatMul(self,*args,**kwargs)
sympy.matrices.expressions.permutation.MatrixPermute.doit(self,deep=True,**hints)
sympy.matrices.expressions.permutation.MatrixPermute.shape(self)
sympy.matrices.expressions.permutation.PermutationMatrix(cls,perm)
sympy.matrices.expressions.permutation.PermutationMatrix._entry(self,i,j,**kwargs)
sympy.matrices.expressions.permutation.PermutationMatrix._eval_determinant(self)
sympy.matrices.expressions.permutation.PermutationMatrix._eval_inverse(self)
sympy.matrices.expressions.permutation.PermutationMatrix._eval_power(self,exp)
sympy.matrices.expressions.permutation.PermutationMatrix._eval_rewrite_as_BlockDiagMatrix(self,*args,**kwargs)
sympy.matrices.expressions.permutation.PermutationMatrix.doit(self,**hints)
sympy.matrices.expressions.permutation.PermutationMatrix.is_Identity(self)
sympy.matrices.expressions.permutation.PermutationMatrix.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/slice.py----------------------------------------
A:sympy.matrices.expressions.slice.i->list(i)
A:sympy.matrices.expressions.slice.parent->property(lambda self: self.args[0])
A:sympy.matrices.expressions.slice.rowslice->normalize(rowslice, parent.shape[0])
A:sympy.matrices.expressions.slice.colslice->normalize(colslice, parent.shape[1])
A:sympy.matrices.expressions.slice.row->slice_of_slice(parent.rowslice, rowslice)
A:sympy.matrices.expressions.slice.col->slice_of_slice(parent.colslice, colslice)
sympy.MatrixSlice(cls,parent,rowslice,colslice)
sympy.matrices.expressions.slice.MatrixSlice(cls,parent,rowslice,colslice)
sympy.matrices.expressions.slice.MatrixSlice._entry(self,i,j,**kwargs)
sympy.matrices.expressions.slice.MatrixSlice.on_diag(self)
sympy.matrices.expressions.slice.MatrixSlice.shape(self)
sympy.matrices.expressions.slice.mat_slice_of_slice(parent,rowslice,colslice)
sympy.matrices.expressions.slice.normalize(i,parentsize)
sympy.matrices.expressions.slice.slice_of_slice(s,t)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/factorizations.py----------------------------------------
A:sympy.matrices.expressions.factorizations.arg->property(lambda self: self.args[0])
A:sympy.matrices.expressions.factorizations.shape->property(lambda self: self.arg.shape)
sympy.matrices.expressions.factorizations.EigenValues(Factorization)
sympy.matrices.expressions.factorizations.EigenValues.predicates(self)
sympy.matrices.expressions.factorizations.EigenVectors(Factorization)
sympy.matrices.expressions.factorizations.EigenVectors.predicates(self)
sympy.matrices.expressions.factorizations.Factorization(MatrixExpr)
sympy.matrices.expressions.factorizations.LofCholesky(LofLU)
sympy.matrices.expressions.factorizations.LofLU(Factorization)
sympy.matrices.expressions.factorizations.LofLU.predicates(self)
sympy.matrices.expressions.factorizations.QofQR(Factorization)
sympy.matrices.expressions.factorizations.QofQR.predicates(self)
sympy.matrices.expressions.factorizations.RofQR(Factorization)
sympy.matrices.expressions.factorizations.RofQR.predicates(self)
sympy.matrices.expressions.factorizations.SofSVD(Factorization)
sympy.matrices.expressions.factorizations.SofSVD.predicates(self)
sympy.matrices.expressions.factorizations.UofCholesky(UofLU)
sympy.matrices.expressions.factorizations.UofLU(Factorization)
sympy.matrices.expressions.factorizations.UofLU.predicates(self)
sympy.matrices.expressions.factorizations.UofSVD(Factorization)
sympy.matrices.expressions.factorizations.UofSVD.predicates(self)
sympy.matrices.expressions.factorizations.VofSVD(Factorization)
sympy.matrices.expressions.factorizations.VofSVD.predicates(self)
sympy.matrices.expressions.factorizations.eig(expr)
sympy.matrices.expressions.factorizations.lu(expr)
sympy.matrices.expressions.factorizations.qr(expr)
sympy.matrices.expressions.factorizations.svd(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/special.py----------------------------------------
A:sympy.matrices.expressions.special.n->_sympify(n)
A:sympy.matrices.expressions.special.eq->Eq(i, j)
A:sympy.matrices.expressions.special.obj->super().__new__(cls, m, n)
A:sympy.matrices.expressions.special.condition->self._is_1x1()
sympy.Identity(cls,n)
sympy.OneMatrix(cls,m,n,evaluate=False)
sympy.ZeroMatrix(cls,m,n)
sympy.matrices.expressions.special.GenericIdentity(cls)
sympy.matrices.expressions.special.GenericIdentity.__eq__(self,other)
sympy.matrices.expressions.special.GenericIdentity.__hash__(self)
sympy.matrices.expressions.special.GenericIdentity.__ne__(self,other)
sympy.matrices.expressions.special.GenericIdentity.cols(self)
sympy.matrices.expressions.special.GenericIdentity.is_square(self)
sympy.matrices.expressions.special.GenericIdentity.rows(self)
sympy.matrices.expressions.special.GenericIdentity.shape(self)
sympy.matrices.expressions.special.GenericZeroMatrix(cls)
sympy.matrices.expressions.special.GenericZeroMatrix.__eq__(self,other)
sympy.matrices.expressions.special.GenericZeroMatrix.__hash__(self)
sympy.matrices.expressions.special.GenericZeroMatrix.__ne__(self,other)
sympy.matrices.expressions.special.GenericZeroMatrix.cols(self)
sympy.matrices.expressions.special.GenericZeroMatrix.rows(self)
sympy.matrices.expressions.special.GenericZeroMatrix.shape(self)
sympy.matrices.expressions.special.Identity(cls,n)
sympy.matrices.expressions.special.Identity._entry(self,i,j,**kwargs)
sympy.matrices.expressions.special.Identity._eval_adjoint(self)
sympy.matrices.expressions.special.Identity._eval_as_real_imag(self)
sympy.matrices.expressions.special.Identity._eval_conjugate(self)
sympy.matrices.expressions.special.Identity._eval_determinant(self)
sympy.matrices.expressions.special.Identity._eval_inverse(self)
sympy.matrices.expressions.special.Identity._eval_power(self,exp)
sympy.matrices.expressions.special.Identity._eval_trace(self)
sympy.matrices.expressions.special.Identity._eval_transpose(self)
sympy.matrices.expressions.special.Identity.cols(self)
sympy.matrices.expressions.special.Identity.is_square(self)
sympy.matrices.expressions.special.Identity.rows(self)
sympy.matrices.expressions.special.Identity.shape(self)
sympy.matrices.expressions.special.OneMatrix(cls,m,n,evaluate=False)
sympy.matrices.expressions.special.OneMatrix._entry(self,i,j,**kwargs)
sympy.matrices.expressions.special.OneMatrix._eval_adjoint(self)
sympy.matrices.expressions.special.OneMatrix._eval_as_real_imag(self)
sympy.matrices.expressions.special.OneMatrix._eval_conjugate(self)
sympy.matrices.expressions.special.OneMatrix._eval_determinant(self)
sympy.matrices.expressions.special.OneMatrix._eval_inverse(self)
sympy.matrices.expressions.special.OneMatrix._eval_power(self,exp)
sympy.matrices.expressions.special.OneMatrix._eval_trace(self)
sympy.matrices.expressions.special.OneMatrix._eval_transpose(self)
sympy.matrices.expressions.special.OneMatrix._is_1x1(self)
sympy.matrices.expressions.special.OneMatrix.as_explicit(self)
sympy.matrices.expressions.special.OneMatrix.doit(self,**hints)
sympy.matrices.expressions.special.OneMatrix.is_Identity(self)
sympy.matrices.expressions.special.OneMatrix.shape(self)
sympy.matrices.expressions.special.ZeroMatrix(cls,m,n)
sympy.matrices.expressions.special.ZeroMatrix._entry(self,i,j,**kwargs)
sympy.matrices.expressions.special.ZeroMatrix._eval_adjoint(self)
sympy.matrices.expressions.special.ZeroMatrix._eval_as_real_imag(self)
sympy.matrices.expressions.special.ZeroMatrix._eval_conjugate(self)
sympy.matrices.expressions.special.ZeroMatrix._eval_determinant(self)
sympy.matrices.expressions.special.ZeroMatrix._eval_inverse(self)
sympy.matrices.expressions.special.ZeroMatrix._eval_power(self,exp)
sympy.matrices.expressions.special.ZeroMatrix._eval_trace(self)
sympy.matrices.expressions.special.ZeroMatrix._eval_transpose(self)
sympy.matrices.expressions.special.ZeroMatrix.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/matadd.py----------------------------------------
A:sympy.matrices.expressions.matadd.identity->GenericZeroMatrix()
A:sympy.matrices.expressions.matadd.args->list(map(sympify, args))
A:sympy.matrices.expressions.matadd.obj->cls._evaluate(obj)
A:sympy.matrices.expressions.matadd.expanded->super(MatAdd, self).expand(**kwargs)
A:sympy.matrices.expressions.matadd.deep->hints.get('deep', True)
A:sympy.matrices.expressions.matadd.groups->sift(matadd.args, lambda arg: isinstance(arg, MatrixBase))
A:sympy.matrices.expressions.matadd.canonicalize->exhaust(condition(lambda x: isinstance(x, MatAdd), do_one(*rules)))
sympy.MatAdd(cls,*args,evaluate=False,check=None,_sympify=True)
sympy.matrices.expressions.matadd.MatAdd(cls,*args,evaluate=False,check=None,_sympify=True)
sympy.matrices.expressions.matadd.MatAdd._entry(self,i,j,**kwargs)
sympy.matrices.expressions.matadd.MatAdd._eval_adjoint(self)
sympy.matrices.expressions.matadd.MatAdd._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.matadd.MatAdd._eval_trace(self)
sympy.matrices.expressions.matadd.MatAdd._eval_transpose(self)
sympy.matrices.expressions.matadd.MatAdd._evaluate(cls,expr)
sympy.matrices.expressions.matadd.MatAdd.could_extract_minus_sign(self)
sympy.matrices.expressions.matadd.MatAdd.doit(self,**hints)
sympy.matrices.expressions.matadd.MatAdd.expand(self,**kwargs)
sympy.matrices.expressions.matadd.MatAdd.shape(self)
sympy.matrices.expressions.matadd.combine(cnt,mat)
sympy.matrices.expressions.matadd.merge_explicit(matadd)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/companion.py----------------------------------------
A:sympy.matrices.expressions.companion.poly->_sympify(poly)
A:sympy.matrices.expressions.companion.size->_sympify(poly).degree()
sympy.matrices.expressions.CompanionMatrix(cls,poly)
sympy.matrices.expressions.companion.CompanionMatrix(cls,poly)
sympy.matrices.expressions.companion.CompanionMatrix._entry(self,i,j)
sympy.matrices.expressions.companion.CompanionMatrix.as_explicit(self)
sympy.matrices.expressions.companion.CompanionMatrix.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/diagonal.py----------------------------------------
A:sympy.matrices.expressions.diagonal.arg->property(lambda self: self.args[0])
A:sympy.matrices.expressions.diagonal.shape->property(lambda self: self.arg.shape)
A:sympy.matrices.expressions.diagonal.m->min(r, c)
A:sympy.matrices.expressions.diagonal.eq->Eq(i, j)
A:sympy.matrices.expressions.diagonal.vector->_sympify(vector)
A:sympy.matrices.expressions.diagonal.obj->sympy.matrices.expressions.MatrixExpr.__new__(cls, vector)
A:sympy.matrices.expressions.diagonal.result->self._vector._entry(0, j, **kwargs)
A:sympy.matrices.expressions.diagonal.ret->eye(max(vector.shape))
sympy.DiagMatrix(cls,vector)
sympy.DiagonalMatrix(MatrixExpr)
sympy.DiagonalOf(MatrixExpr)
sympy.diagonalize_vector(vector)
sympy.matrices.expressions.diagonal.DiagMatrix(cls,vector)
sympy.matrices.expressions.diagonal.DiagMatrix._entry(self,i,j,**kwargs)
sympy.matrices.expressions.diagonal.DiagMatrix._eval_transpose(self)
sympy.matrices.expressions.diagonal.DiagMatrix.as_explicit(self)
sympy.matrices.expressions.diagonal.DiagMatrix.doit(self,**hints)
sympy.matrices.expressions.diagonal.DiagMatrix.shape(self)
sympy.matrices.expressions.diagonal.DiagonalMatrix(MatrixExpr)
sympy.matrices.expressions.diagonal.DiagonalMatrix._entry(self,i,j,**kwargs)
sympy.matrices.expressions.diagonal.DiagonalMatrix.diagonal_length(self)
sympy.matrices.expressions.diagonal.DiagonalOf(MatrixExpr)
sympy.matrices.expressions.diagonal.DiagonalOf._entry(self,i,j,**kwargs)
sympy.matrices.expressions.diagonal.DiagonalOf.diagonal_length(self)
sympy.matrices.expressions.diagonal.DiagonalOf.shape(self)
sympy.matrices.expressions.diagonal.diagonalize_vector(vector)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/funcmatrix.py----------------------------------------
A:sympy.matrices.expressions.funcmatrix.lamda->Lambda((i, j), lamda(i, j))
sympy.FunctionMatrix(cls,rows,cols,lamda)
sympy.matrices.expressions.funcmatrix.FunctionMatrix(cls,rows,cols,lamda)
sympy.matrices.expressions.funcmatrix.FunctionMatrix._entry(self,i,j,**kwargs)
sympy.matrices.expressions.funcmatrix.FunctionMatrix._eval_as_real_imag(self)
sympy.matrices.expressions.funcmatrix.FunctionMatrix._eval_trace(self)
sympy.matrices.expressions.funcmatrix.FunctionMatrix.lamda(self)
sympy.matrices.expressions.funcmatrix.FunctionMatrix.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/matpow.py----------------------------------------
A:sympy.matrices.expressions.matpow.base->_sympify(base)
A:sympy.matrices.expressions.matpow.exp->_sympify(exp)
A:sympy.matrices.expressions.matpow.obj->obj.doit(deep=False).doit(deep=False)
A:sympy.matrices.expressions.matpow.A->MatMul(*[A.base for k in range(A.exp)])
A:sympy.matrices.expressions.matpow.eval_power->getattr(base, '_eval_power', None)
A:sympy.matrices.expressions.matpow.lr->self.base._eval_derivative_matrix_lines(x)
A:sympy.matrices.expressions.matpow.subexpr->ExprBuilder(ArrayContraction, [ExprBuilder(ArrayTensorProduct, [Identity(1), i._lines[0], exp * self.base ** (exp - 1), i._lines[1], Identity(1)]), (0, 3, 4), (5, 7, 8)], validator=ArrayContraction._validate)
A:sympy.matrices.expressions.matpow.newexpr->matmul.MatMul.fromiter([Inverse(self.base) for i in range(-exp)])
sympy.MatPow(cls,base,exp,evaluate=False,**options)
sympy.matrices.expressions.matpow.MatPow(cls,base,exp,evaluate=False,**options)
sympy.matrices.expressions.matpow.MatPow._entry(self,i,j,**kwargs)
sympy.matrices.expressions.matpow.MatPow._eval_derivative(self,x)
sympy.matrices.expressions.matpow.MatPow._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.matpow.MatPow._eval_inverse(self)
sympy.matrices.expressions.matpow.MatPow._eval_transpose(self)
sympy.matrices.expressions.matpow.MatPow._get_explicit_matrix(self)
sympy.matrices.expressions.matpow.MatPow.base(self)
sympy.matrices.expressions.matpow.MatPow.doit(self,**hints)
sympy.matrices.expressions.matpow.MatPow.exp(self)
sympy.matrices.expressions.matpow.MatPow.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/matmul.py----------------------------------------
A:sympy.matrices.expressions.matmul.identity->Identity(A.shape[0])
A:sympy.matrices.expressions.matmul.args->tuple((arg.doit(**hints) for arg in self.args))
A:sympy.matrices.expressions.matmul.obj->sympy.core.Basic.__new__(cls, *args)
A:sympy.matrices.expressions.matmul.(factor, matrices)->sympy.core.mul.mul.as_coeff_matrices()
A:sympy.matrices.expressions.matmul.(coeff, matrices)->self.as_coeff_matrices()
A:sympy.matrices.expressions.matmul.dummy_generator->kwargs.get('dummy_generator', f())
A:sympy.matrices.expressions.matmul.indices[i]->next(dummy_generator)
A:sympy.matrices.expressions.matmul.expr_in_sum->sympy.core.mul.Mul.fromiter(matrices)
A:sympy.matrices.expressions.matmul.coeff->Mul(*scalars)
A:sympy.matrices.expressions.matmul.expanded->super(MatMul, self).expand(**kwargs)
A:sympy.matrices.expressions.matmul.(factor, mmul)->sympy.core.mul.mul.as_coeff_mmul()
A:sympy.matrices.expressions.matmul.square_matrices->only_squares(*matrices)
A:sympy.matrices.expressions.matmul.deep->hints.get('deep', True)
A:sympy.matrices.expressions.matmul.expr->canonicalize(MatMul(*args))
A:sympy.matrices.expressions.matmul.clen->len(coeff_c)
A:sympy.matrices.expressions.matmul.coeff_c->set(coeff_c)
A:sympy.matrices.expressions.matmul.right_mat->Identity(self.shape[1])
A:sympy.matrices.expressions.matmul.left_rev->Identity(self.shape[0])
A:sympy.matrices.expressions.matmul.d->self.args[ind]._eval_derivative_matrix_lines(x)
A:sympy.matrices.expressions.matmul.result->rm_id(lambda x: x.is_Identity is True)(mmul)
A:sympy.matrices.expressions.matmul.(factor, args)->sympy.core.mul.mul.as_coeff_matrices()
A:sympy.matrices.expressions.matmul.l->len(args)
A:sympy.matrices.expressions.matmul.new_args[-1]->MatPow(A_base, new_exp).doit(deep=False)
A:sympy.matrices.expressions.matmul.B_base_inv->B_base.inverse()
A:sympy.matrices.expressions.matmul.result[-1]->PermutationMatrix(cycle_1 * cycle_2)
A:sympy.matrices.expressions.matmul.canonicalize->exhaust(typed({MatMul: do_one(*rules)}))
A:sympy.matrices.expressions.matmul.last->Identity(arg.shape[0])
sympy.MatMul(cls,*args,evaluate=False,check=None,_sympify=True)
sympy.matrices.expressions.matmul.MatMul(cls,*args,evaluate=False,check=None,_sympify=True)
sympy.matrices.expressions.matmul.MatMul._entry(self,i,j,expand=True,**kwargs)
sympy.matrices.expressions.matmul.MatMul._eval_adjoint(self)
sympy.matrices.expressions.matmul.MatMul._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.matmul.MatMul._eval_determinant(self)
sympy.matrices.expressions.matmul.MatMul._eval_inverse(self)
sympy.matrices.expressions.matmul.MatMul._eval_trace(self)
sympy.matrices.expressions.matmul.MatMul._eval_transpose(self)
sympy.matrices.expressions.matmul.MatMul._evaluate(cls,expr)
sympy.matrices.expressions.matmul.MatMul.args_cnc(self,cset=False,warn=True,**kwargs)
sympy.matrices.expressions.matmul.MatMul.as_coeff_matrices(self)
sympy.matrices.expressions.matmul.MatMul.as_coeff_mmul(self)
sympy.matrices.expressions.matmul.MatMul.doit(self,**hints)
sympy.matrices.expressions.matmul.MatMul.expand(self,**kwargs)
sympy.matrices.expressions.matmul.MatMul.shape(self)
sympy.matrices.expressions.matmul.any_zeros(mul)
sympy.matrices.expressions.matmul.combine_one_matrices(mul)
sympy.matrices.expressions.matmul.combine_permutations(mul)
sympy.matrices.expressions.matmul.combine_powers(mul)
sympy.matrices.expressions.matmul.distribute_monom(mul)
sympy.matrices.expressions.matmul.factor_in_front(mul)
sympy.matrices.expressions.matmul.merge_explicit(matmul)
sympy.matrices.expressions.matmul.newmul(*args)
sympy.matrices.expressions.matmul.only_squares(*matrices)
sympy.matrices.expressions.matmul.refine_MatMul(expr,assumptions)
sympy.matrices.expressions.matmul.remove_ids(mul)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/sets.py----------------------------------------
A:sympy.matrices.expressions.sets.are_symbolic->any((_sympify(x).is_Symbol for x in other.shape + self.shape))
A:sympy.matrices.expressions.sets.ok->check_assumptions(dim, integer=True, nonnegative=True)
sympy.matrices.MatrixSet(cls,n,m,set)
sympy.matrices.expressions.sets.MatrixSet(cls,n,m,set)
sympy.matrices.expressions.sets.MatrixSet._check_dim(cls,dim)
sympy.matrices.expressions.sets.MatrixSet._contains(self,other)
sympy.matrices.expressions.sets.MatrixSet._kind(self)
sympy.matrices.expressions.sets.MatrixSet.set(self)
sympy.matrices.expressions.sets.MatrixSet.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/fourier.py----------------------------------------
A:sympy.matrices.expressions.fourier.n->property(lambda self: self.args[0])
A:sympy.matrices.expressions.fourier.obj->super().__new__(cls, n)
A:sympy.matrices.expressions.fourier.shape->property(lambda self: (self.n, self.n))
A:sympy.matrices.expressions.fourier.w->exp(-2 * S.Pi * I / self.n)
sympy.matrices.expressions.fourier.DFT(cls,n)
sympy.matrices.expressions.fourier.DFT._entry(self,i,j,**kwargs)
sympy.matrices.expressions.fourier.DFT._eval_inverse(self)
sympy.matrices.expressions.fourier.IDFT(DFT)
sympy.matrices.expressions.fourier.IDFT._entry(self,i,j,**kwargs)
sympy.matrices.expressions.fourier.IDFT._eval_inverse(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/adjoint.py----------------------------------------
sympy.Adjoint(MatrixExpr)
sympy.matrices.expressions.adjoint.Adjoint(MatrixExpr)
sympy.matrices.expressions.adjoint.Adjoint._entry(self,i,j,**kwargs)
sympy.matrices.expressions.adjoint.Adjoint._eval_adjoint(self)
sympy.matrices.expressions.adjoint.Adjoint._eval_conjugate(self)
sympy.matrices.expressions.adjoint.Adjoint._eval_trace(self)
sympy.matrices.expressions.adjoint.Adjoint._eval_transpose(self)
sympy.matrices.expressions.adjoint.Adjoint.arg(self)
sympy.matrices.expressions.adjoint.Adjoint.doit(self,**hints)
sympy.matrices.expressions.adjoint.Adjoint.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/hadamard.py----------------------------------------
A:sympy.matrices.expressions.hadamard.args->list(self.args)
A:sympy.matrices.expressions.hadamard.obj->super().__new__(cls, base, exp)
A:sympy.matrices.expressions.hadamard.expr->HadamardProduct(*[expl_mat] + remainder)
A:sympy.matrices.expressions.hadamard.expl_mat->ImmutableMatrix([Mul.fromiter(i) for i in zip(*explicit)]).reshape(*self.shape)
A:sympy.matrices.expressions.hadamard.d->self.args[ind]._eval_derivative_matrix_lines(x)
A:sympy.matrices.expressions.hadamard.hadam->hadamard_product(*right_args + left_args)
A:sympy.matrices.expressions.hadamard.subexpr->ExprBuilder(ArrayDiagonal, [ExprBuilder(ArrayTensorProduct, [ExprBuilder(_make_matrix, [l1]), self.exp * hadamard_power(self.base, self.exp - 1), ExprBuilder(_make_matrix, [l2])]), *diagonal], validator=ArrayDiagonal._validate)
A:sympy.matrices.expressions.hadamard.rule->condition(lambda x: isinstance(x, HadamardProduct), flatten)
A:sympy.matrices.expressions.hadamard.fun->condition(lambda x: isinstance(x, HadamardProduct), sort(default_sort_key))
A:sympy.matrices.expressions.hadamard.x->unpack(x)
A:sympy.matrices.expressions.hadamard.tally->Counter(x.args)
A:sympy.matrices.expressions.hadamard.base->sympify(base)
A:sympy.matrices.expressions.hadamard.exp->sympify(exp)
A:sympy.matrices.expressions.hadamard.a->sympify(base)._entry(i, j, **kwargs)
A:sympy.matrices.expressions.hadamard.b->sympify(exp)._entry(i, j, **kwargs)
A:sympy.matrices.expressions.hadamard.dexp->self.exp.diff(x)
A:sympy.matrices.expressions.hadamard.logbase->self.base.applyfunc(log)
A:sympy.matrices.expressions.hadamard.dlbase->self.base.applyfunc(log).diff(x)
A:sympy.matrices.expressions.hadamard.lr->self.base._eval_derivative_matrix_lines(x)
sympy.HadamardPower(cls,base,exp)
sympy.HadamardProduct(cls,*args,evaluate=False,check=None)
sympy.hadamard_product(*matrices)
sympy.matrices.expressions.hadamard.HadamardPower(cls,base,exp)
sympy.matrices.expressions.hadamard.HadamardPower._entry(self,i,j,**kwargs)
sympy.matrices.expressions.hadamard.HadamardPower._eval_derivative(self,x)
sympy.matrices.expressions.hadamard.HadamardPower._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.hadamard.HadamardPower._eval_transpose(self)
sympy.matrices.expressions.hadamard.HadamardPower.base(self)
sympy.matrices.expressions.hadamard.HadamardPower.exp(self)
sympy.matrices.expressions.hadamard.HadamardPower.shape(self)
sympy.matrices.expressions.hadamard.HadamardProduct(cls,*args,evaluate=False,check=None)
sympy.matrices.expressions.hadamard.HadamardProduct._entry(self,i,j,**kwargs)
sympy.matrices.expressions.hadamard.HadamardProduct._eval_derivative(self,x)
sympy.matrices.expressions.hadamard.HadamardProduct._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.hadamard.HadamardProduct._eval_transpose(self)
sympy.matrices.expressions.hadamard.HadamardProduct.doit(self,**hints)
sympy.matrices.expressions.hadamard.HadamardProduct.shape(self)
sympy.matrices.expressions.hadamard.canonicalize(x)
sympy.matrices.expressions.hadamard.hadamard_power(base,exp)
sympy.matrices.expressions.hadamard.hadamard_product(*matrices)
sympy.matrices.expressions.hadamard_power(base,exp)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/trace.py----------------------------------------
A:sympy.matrices.expressions.trace.mat->sympify(mat)
A:sympy.matrices.expressions.trace.expr->self.doit()
A:sympy.matrices.expressions.trace.r->self.args[0]._eval_derivative_matrix_lines(x)
A:sympy.matrices.expressions.trace.lr.higher->ExprBuilder(ArrayContraction, [ExprBuilder(ArrayTensorProduct, [lr._lines[0], lr._lines[1], lr.higher]), (1, 3), (0, 2)])
A:sympy.matrices.expressions.trace.arg->self.arg.doit(**hints)
A:sympy.matrices.expressions.trace.indmin->min(range(len(trace_arg.args)), key=lambda x: default_sort_key(trace_arg.args[x]))
A:sympy.matrices.expressions.trace.trace_arg->sympy.matrices.expressions.matmul.MatMul.fromiter(trace_arg.args[indmin:] + trace_arg.args[:indmin])
A:sympy.matrices.expressions.trace.i->uniquely_named_symbol('i', expr)
A:sympy.matrices.expressions.trace.s->Sum(self.arg[i, i], (i, 0, self.arg.rows - 1))
sympy.Trace(cls,mat)
sympy.matrices.expressions.trace.Trace(cls,mat)
sympy.matrices.expressions.trace.Trace._eval_derivative(self,v)
sympy.matrices.expressions.trace.Trace._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.trace.Trace._eval_rewrite_as_Sum(self,expr,**kwargs)
sympy.matrices.expressions.trace.Trace._eval_transpose(self)
sympy.matrices.expressions.trace.Trace._normalize(self)
sympy.matrices.expressions.trace.Trace.arg(self)
sympy.matrices.expressions.trace.Trace.as_explicit(self)
sympy.matrices.expressions.trace.Trace.doit(self,**hints)
sympy.matrices.expressions.trace.trace(expr)
sympy.trace(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/matexpr.py----------------------------------------
A:sympy.matrices.expressions.matexpr.b->_sympify(b)
A:sympy.matrices.expressions.matexpr.args->map(_sympify, args)
A:sympy.matrices.expressions.matexpr.ok->check_assumptions(dim, integer=True, nonnegative=True)
A:sympy.matrices.expressions.matexpr.key->_sympify(key)
A:sympy.matrices.expressions.matexpr.a->empty(self.shape, dtype=object)
A:sympy.matrices.expressions.matexpr.arr->convert_indexed_to_array(expr, first_indices=first_indices)
A:sympy.matrices.expressions.matexpr.matrices[i]->matrices[i].__mul__(cls._from_args(nonmatrices)).__mul__(cls._from_args(nonmatrices))
A:sympy.matrices.expressions.matexpr.array_expr->convert_matrix_to_array(expr)
A:sympy.matrices.expressions.matexpr.diff_array_expr->array_derive(array_expr, x)
A:sympy.matrices.expressions.matexpr.diff_matrix_expr->convert_array_to_matrix(diff_array_expr)
A:sympy.matrices.expressions.matexpr.lines->expr._eval_derivative_matrix_lines(x)
A:sympy.matrices.expressions.matexpr.parent->property(lambda self: self.args[0])
A:sympy.matrices.expressions.matexpr.i->property(lambda self: self.args[1])
A:sympy.matrices.expressions.matexpr.j->property(lambda self: self.args[2])
A:sympy.matrices.expressions.matexpr.(n, m)->map(_sympify, (n, m))
A:sympy.matrices.expressions.matexpr.name->Str(name)
A:sympy.matrices.expressions.matexpr.obj->sympy.core.Basic.__new__(cls, name, n, m)
A:sympy.matrices.expressions.matexpr.deep->hints.get('deep', True)
A:sympy.matrices.expressions.matexpr.(i1, i2)->symbols('z1, z2', cls=Dummy)
A:sympy.matrices.expressions.matexpr.self._lines->list(lines)
A:sympy.matrices.expressions.matexpr.data->list(data)
A:sympy.matrices.expressions.matexpr.subexpr->ExprBuilder(ArrayContraction, [ExprBuilder(ArrayTensorProduct, [pointer, other]), (1, 2)], validator=ArrayContraction._validate)
sympy.MatrixExpr(cls,*args,**kwargs)
sympy.MatrixSymbol(cls,name,n,m)
sympy.matrices.expressions.matexpr.MatrixElement(cls,name,n,m)
sympy.matrices.expressions.matexpr.MatrixElement._eval_derivative(self,v)
sympy.matrices.expressions.matexpr.MatrixElement.doit(self,**hints)
sympy.matrices.expressions.matexpr.MatrixElement.indices(self)
sympy.matrices.expressions.matexpr.MatrixElement.symbol(self)
sympy.matrices.expressions.matexpr.MatrixExpr(cls,*args,**kwargs)
sympy.matrices.expressions.matexpr.MatrixExpr.I(self)
sympy.matrices.expressions.matexpr.MatrixExpr.T(self)
sympy.matrices.expressions.matexpr.MatrixExpr.__abs__(self)
sympy.matrices.expressions.matexpr.MatrixExpr.__add__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__array__(self)
sympy.matrices.expressions.matexpr.MatrixExpr.__getitem__(self,key)
sympy.matrices.expressions.matexpr.MatrixExpr.__matmul__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__mul__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__neg__(self)
sympy.matrices.expressions.matexpr.MatrixExpr.__pow__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__radd__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rmatmul__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rmul__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rpow__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rsub__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rtruediv__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__sub__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__truediv__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr._add_handler(self)
sympy.matrices.expressions.matexpr.MatrixExpr._check_dim(cls,dim)
sympy.matrices.expressions.matexpr.MatrixExpr._entry(self,i,j,**kwargs)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_adjoint(self)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_as_real_imag(self)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_conjugate(self)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_derivative(self,x)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_derivative_n_times(self,x,n)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_determinant(self)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_inverse(self)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_power(self,exp)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_simplify(self,**kwargs)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_transpose(self)
sympy.matrices.expressions.matexpr.MatrixExpr._is_shape_symbolic(self)->bool
sympy.matrices.expressions.matexpr.MatrixExpr._mul_handler(self)
sympy.matrices.expressions.matexpr.MatrixExpr.adjoint(self)
sympy.matrices.expressions.matexpr.MatrixExpr.applyfunc(self,func)
sympy.matrices.expressions.matexpr.MatrixExpr.as_coeff_Mul(self,rational=False)
sympy.matrices.expressions.matexpr.MatrixExpr.as_coeff_mmul(self)
sympy.matrices.expressions.matexpr.MatrixExpr.as_explicit(self)
sympy.matrices.expressions.matexpr.MatrixExpr.as_mutable(self)
sympy.matrices.expressions.matexpr.MatrixExpr.as_real_imag(self,deep=True,**hints)
sympy.matrices.expressions.matexpr.MatrixExpr.canonicalize(self)
sympy.matrices.expressions.matexpr.MatrixExpr.cols(self)
sympy.matrices.expressions.matexpr.MatrixExpr.conjugate(self)
sympy.matrices.expressions.matexpr.MatrixExpr.det(self)
sympy.matrices.expressions.matexpr.MatrixExpr.equals(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.from_index_summation(expr,first_index=None,last_index=None,dimensions=None)
sympy.matrices.expressions.matexpr.MatrixExpr.inv(self)
sympy.matrices.expressions.matexpr.MatrixExpr.inverse(self)
sympy.matrices.expressions.matexpr.MatrixExpr.is_square(self)->bool | None
sympy.matrices.expressions.matexpr.MatrixExpr.rows(self)
sympy.matrices.expressions.matexpr.MatrixExpr.shape(self)->tuple[Expr, Expr]
sympy.matrices.expressions.matexpr.MatrixExpr.transpose(self)
sympy.matrices.expressions.matexpr.MatrixExpr.valid_index(self,i,j)
sympy.matrices.expressions.matexpr.MatrixSymbol(cls,name,n,m)
sympy.matrices.expressions.matexpr.MatrixSymbol._entry(self,i,j,**kwargs)
sympy.matrices.expressions.matexpr.MatrixSymbol._eval_derivative(self,x)
sympy.matrices.expressions.matexpr.MatrixSymbol._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.matexpr.MatrixSymbol._eval_simplify(self,**kwargs)
sympy.matrices.expressions.matexpr.MatrixSymbol.free_symbols(self)
sympy.matrices.expressions.matexpr.MatrixSymbol.name(self)
sympy.matrices.expressions.matexpr.MatrixSymbol.shape(self)
sympy.matrices.expressions.matexpr._LeftRightArgs(self,lines,higher=S.One)
sympy.matrices.expressions.matexpr._LeftRightArgs.__repr__(self)
sympy.matrices.expressions.matexpr._LeftRightArgs._build(expr)
sympy.matrices.expressions.matexpr._LeftRightArgs._multiply_pointer(self,pointer,other)
sympy.matrices.expressions.matexpr._LeftRightArgs.append_first(self,other)
sympy.matrices.expressions.matexpr._LeftRightArgs.append_second(self,other)
sympy.matrices.expressions.matexpr._LeftRightArgs.build(self)
sympy.matrices.expressions.matexpr._LeftRightArgs.first_pointer(self)
sympy.matrices.expressions.matexpr._LeftRightArgs.first_pointer(self,value)
sympy.matrices.expressions.matexpr._LeftRightArgs.matrix_form(self)
sympy.matrices.expressions.matexpr._LeftRightArgs.rank(self)
sympy.matrices.expressions.matexpr._LeftRightArgs.second_pointer(self)
sympy.matrices.expressions.matexpr._LeftRightArgs.second_pointer(self,value)
sympy.matrices.expressions.matexpr._LeftRightArgs.transpose(self)
sympy.matrices.expressions.matexpr._eval_is_eq(lhs,rhs)
sympy.matrices.expressions.matexpr._eval_is_eq(lhs,rhs)
sympy.matrices.expressions.matexpr._make_matrix(x)
sympy.matrices.expressions.matexpr._matrix_derivative(expr,x,old_algorithm=False)
sympy.matrices.expressions.matexpr._matrix_derivative_old_algorithm(expr,x)
sympy.matrices.expressions.matexpr._sympifyit(arg,retval=None)
sympy.matrices.expressions.matexpr.get_postprocessor(cls)
sympy.matrices.expressions.matexpr.matrix_symbols(expr)
sympy.matrix_symbols(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/inverse.py----------------------------------------
A:sympy.matrices.expressions.inverse.mat->_sympify(mat)
A:sympy.matrices.expressions.inverse.exp->_sympify(exp)
A:sympy.matrices.expressions.inverse.arg->arg.doit(**hints).doit(**hints)
A:sympy.matrices.expressions.inverse.lines->arg.doit(**hints).doit(**hints)._eval_derivative_matrix_lines(x)
sympy.Inverse(cls,mat,exp=S.NegativeOne)
sympy.matrices.expressions.inverse.Inverse(cls,mat,exp=S.NegativeOne)
sympy.matrices.expressions.inverse.Inverse._eval_derivative_matrix_lines(self,x)
sympy.matrices.expressions.inverse.Inverse._eval_determinant(self)
sympy.matrices.expressions.inverse.Inverse._eval_inverse(self)
sympy.matrices.expressions.inverse.Inverse.arg(self)
sympy.matrices.expressions.inverse.Inverse.doit(self,**hints)
sympy.matrices.expressions.inverse.Inverse.shape(self)
sympy.matrices.expressions.inverse.refine_Inverse(expr,assumptions)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_matmul.py----------------------------------------
A:sympy.matrices.expressions.tests.test_matmul.(n, m, l, k)->symbols('n m l k', integer=True)
A:sympy.matrices.expressions.tests.test_matmul.x->MatMul(A, B)
A:sympy.matrices.expressions.tests.test_matmul.A->MatrixSymbol('A', 2, 2)
A:sympy.matrices.expressions.tests.test_matmul.B->MatrixSymbol('B', 3, 3)
A:sympy.matrices.expressions.tests.test_matmul.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_matmul.D->MatrixSymbol('D', n, n)
A:sympy.matrices.expressions.tests.test_matmul.E->MatrixSymbol('E', m, n)
A:sympy.matrices.expressions.tests.test_matmul.M->Matrix(2, 2, [1, 2 + I, 3, 4])
A:sympy.matrices.expressions.tests.test_matmul.MA->Matrix(2, 2, [1, 3, 2 - I, 4])
A:sympy.matrices.expressions.tests.test_matmul.MT->Matrix(2, 2, [1, 3, 2 + I, 4])
A:sympy.matrices.expressions.tests.test_matmul.X->Matrix([[1, 2], [3, 4]])
A:sympy.matrices.expressions.tests.test_matmul.Y->ImmutableMatrix([[2, 3], [4, 5]])
A:sympy.matrices.expressions.tests.test_matmul.(a, b)->symbols('a b', commutative=False)
A:sympy.matrices.expressions.tests.test_matmul.N->Symbol('N', integer=True)
A:sympy.matrices.expressions.tests.test_matmul.M1->MatrixSymbol('M1', N, N)
A:sympy.matrices.expressions.tests.test_matmul.M2->MatrixSymbol('M2', N, N)
A:sympy.matrices.expressions.tests.test_matmul.I->Identity(N)
sympy.matrices.expressions.tests.test_matmul.test_adjoint()
sympy.matrices.expressions.tests.test_matmul.test_any_zeros()
sympy.matrices.expressions.tests.test_matmul.test_collapse_MatrixBase()
sympy.matrices.expressions.tests.test_matmul.test_combine_powers()
sympy.matrices.expressions.tests.test_matmul.test_construction_with_Mul()
sympy.matrices.expressions.tests.test_matmul.test_construction_with_mul()
sympy.matrices.expressions.tests.test_matmul.test_determinant()
sympy.matrices.expressions.tests.test_matmul.test_doit()
sympy.matrices.expressions.tests.test_matmul.test_doit_deep_false_still_canonical()
sympy.matrices.expressions.tests.test_matmul.test_doit_drills_down()
sympy.matrices.expressions.tests.test_matmul.test_evaluate()
sympy.matrices.expressions.tests.test_matmul.test_factor_in_front()
sympy.matrices.expressions.tests.test_matmul.test_generic_identity()
sympy.matrices.expressions.tests.test_matmul.test_issue_12950()
sympy.matrices.expressions.tests.test_matmul.test_issue_23519()
sympy.matrices.expressions.tests.test_matmul.test_matmul_args_cnc()
sympy.matrices.expressions.tests.test_matmul.test_matmul_args_cnc_symbols()
sympy.matrices.expressions.tests.test_matmul.test_matmul_no_matrices()
sympy.matrices.expressions.tests.test_matmul.test_matmul_scalar_Matrix_doit()
sympy.matrices.expressions.tests.test_matmul.test_matmul_sympify()
sympy.matrices.expressions.tests.test_matmul.test_only_squares()
sympy.matrices.expressions.tests.test_matmul.test_refine()
sympy.matrices.expressions.tests.test_matmul.test_remove_ids()
sympy.matrices.expressions.tests.test_matmul.test_shape_error()
sympy.matrices.expressions.tests.test_matmul.test_transpose()
sympy.matrices.expressions.tests.test_matmul.test_unpack()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_hadamard.py----------------------------------------
A:sympy.matrices.expressions.tests.test_hadamard.(n, m, k)->symbols('n,m,k')
A:sympy.matrices.expressions.tests.test_hadamard.Z->ZeroMatrix(2, 2)
A:sympy.matrices.expressions.tests.test_hadamard.A->MatrixSymbol('A', 3, 2)
A:sympy.matrices.expressions.tests.test_hadamard.B->MatrixSymbol('B', 3, 3)
A:sympy.matrices.expressions.tests.test_hadamard.C->MatrixSymbol('C', m, k)
A:sympy.matrices.expressions.tests.test_hadamard.X->MatrixSymbol('X', 3, 3)
A:sympy.matrices.expressions.tests.test_hadamard.Y->MatrixSymbol('Y', 2, 2)
A:sympy.matrices.expressions.tests.test_hadamard.expr->hadamard_product(eye(3), eye(3))
A:sympy.matrices.expressions.tests.test_hadamard.expr2->hadamard_product(eye(3), eye(3)).doit()
A:sympy.matrices.expressions.tests.test_hadamard.U->OneMatrix(2, 2)
A:sympy.matrices.expressions.tests.test_hadamard.(m, n, p)->symbols('m, n, p', integer=True)
A:sympy.matrices.expressions.tests.test_hadamard.I->Identity(m)
A:sympy.matrices.expressions.tests.test_hadamard.a->MatrixSymbol('a', k, 1)
A:sympy.matrices.expressions.tests.test_hadamard.ret->Matrix([i * j for (i, j) in zip(A, B)]).reshape(3, 3)
A:sympy.matrices.expressions.tests.test_hadamard.(a, b)->symbols('a b')
sympy.matrices.expressions.tests.test_hadamard.test_HadamardProduct()
sympy.matrices.expressions.tests.test_hadamard.test_HadamardProduct_isnt_commutative()
sympy.matrices.expressions.tests.test_hadamard.test_canonicalize()
sympy.matrices.expressions.tests.test_hadamard.test_hadamard()
sympy.matrices.expressions.tests.test_hadamard.test_hadamard_power()
sympy.matrices.expressions.tests.test_hadamard.test_hadamard_power_explicit()
sympy.matrices.expressions.tests.test_hadamard.test_hadamard_product_with_explicit_mat()
sympy.matrices.expressions.tests.test_hadamard.test_mixed_indexing()
sympy.matrices.expressions.tests.test_hadamard.test_shape_error()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_matexpr.py----------------------------------------
A:sympy.matrices.expressions.tests.test_matexpr.(n, m, l, k, p)->symbols('n m l k p', integer=True)
A:sympy.matrices.expressions.tests.test_matexpr.x->Function('x')(t)
A:sympy.matrices.expressions.tests.test_matexpr.A->MatrixSymbol('A', 2, 2)
A:sympy.matrices.expressions.tests.test_matexpr.B->MatrixSymbol('B', 2, 2)
A:sympy.matrices.expressions.tests.test_matexpr.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_matexpr.D->MatrixSymbol('D', n, n)
A:sympy.matrices.expressions.tests.test_matexpr.E->MatrixSymbol('E', m, n)
A:sympy.matrices.expressions.tests.test_matexpr.w->MatrixSymbol('w', n, 1)
A:sympy.matrices.expressions.tests.test_matexpr.n->symbols('n', negative=True)
A:sympy.matrices.expressions.tests.test_matexpr.W->MatrixSymbol('W', 3, 3)
A:sympy.matrices.expressions.tests.test_matexpr.X->Matrix([[1, 2], [3, 4]])
A:sympy.matrices.expressions.tests.test_matexpr.Y->Matrix([[1, 2]])
A:sympy.matrices.expressions.tests.test_matexpr.Z->ZeroMatrix(2, 2)
A:sympy.matrices.expressions.tests.test_matexpr.y->Str('y')
A:sympy.matrices.expressions.tests.test_matexpr.AA->MatPow(A, 2)
A:sympy.matrices.expressions.tests.test_matexpr.(n, m, t)->symbols('n,m,t')
A:sympy.matrices.expressions.tests.test_matexpr.u->MatrixSymbol('u', 2, 1)
A:sympy.matrices.expressions.tests.test_matexpr.v->ImmutableMatrix([3, 5])
A:sympy.matrices.expressions.tests.test_matexpr.M->MatrixSet(2, 2, set={1, 2, 3})
A:sympy.matrices.expressions.tests.test_matexpr.N->Identity(3)
A:sympy.matrices.expressions.tests.test_matexpr.z1->ZeroMatrix(2, 2)
A:sympy.matrices.expressions.tests.test_matexpr.z2->ZeroMatrix(3, 3)
A:sympy.matrices.expressions.tests.test_matexpr.dexpr->diff((D * w)[k, 0], w[p, 0])
A:sympy.matrices.expressions.tests.test_matexpr._i_1->Dummy('_i_1')
A:sympy.matrices.expressions.tests.test_matexpr.(x, y, z, w)->symbols('x y z w')
A:sympy.matrices.expressions.tests.test_matexpr.(i, j)->symbols('i, j')
A:sympy.matrices.expressions.tests.test_matexpr.Ms->SparseMatrix([[2, 3], [4, 5]])
A:sympy.matrices.expressions.tests.test_matexpr.I->Identity(n)
A:sympy.matrices.expressions.tests.test_matexpr.t->symbols('t')
A:sympy.matrices.expressions.tests.test_matexpr.dx->Function('x')(t).diff(t)
A:sympy.matrices.expressions.tests.test_matexpr.z->zeros(2)
A:sympy.matrices.expressions.tests.test_matexpr.Mx->Matrix([[x, 2 * x], [3 * x, 4 * x]])
A:sympy.matrices.expressions.tests.test_matexpr.a->gcd_terms(2 * C * D + 4 * D * C)
A:sympy.matrices.expressions.tests.test_matexpr.b->Mul(A, x, M)
A:sympy.matrices.expressions.tests.test_matexpr.c->Mul(A, M, x)
A:sympy.matrices.expressions.tests.test_matexpr.A_label->Symbol('A', complex=True)
A:sympy.matrices.expressions.tests.test_matexpr.A_1->MatrixSymbol('A', 2, 2).doit()
A:sympy.matrices.expressions.tests.test_matexpr.A_2->MatrixSymbol('A', 2, 2).subs(2, 3)
sympy.matrices.expressions.tests.test_matexpr.test_MatAdd_postprocessor()
sympy.matrices.expressions.tests.test_matexpr.test_MatAdd_postprocessor_xfail()
sympy.matrices.expressions.tests.test_matexpr.test_MatMul_postprocessor()
sympy.matrices.expressions.tests.test_matexpr.test_MatPow()
sympy.matrices.expressions.tests.test_matexpr.test_MatrixElement_commutative()
sympy.matrices.expressions.tests.test_matexpr.test_MatrixElement_diff()
sympy.matrices.expressions.tests.test_matexpr.test_MatrixElement_doit()
sympy.matrices.expressions.tests.test_matexpr.test_MatrixElement_with_values()
sympy.matrices.expressions.tests.test_matexpr.test_MatrixSet()
sympy.matrices.expressions.tests.test_matexpr.test_MatrixSymbol()
sympy.matrices.expressions.tests.test_matexpr.test_MatrixSymbol_determinant()
sympy.matrices.expressions.tests.test_matexpr.test_Zero_power()
sympy.matrices.expressions.tests.test_matexpr.test_addition()
sympy.matrices.expressions.tests.test_matexpr.test_as_explicit()
sympy.matrices.expressions.tests.test_matexpr.test_dense_conversion()
sympy.matrices.expressions.tests.test_matexpr.test_exp()
sympy.matrices.expressions.tests.test_matexpr.test_factor_expand()
sympy.matrices.expressions.tests.test_matexpr.test_free_symbols()
sympy.matrices.expressions.tests.test_matexpr.test_identity_powers()
sympy.matrices.expressions.tests.test_matexpr.test_inv()
sympy.matrices.expressions.tests.test_matexpr.test_invalid_args()
sympy.matrices.expressions.tests.test_matexpr.test_invariants()
sympy.matrices.expressions.tests.test_matexpr.test_issue_21195()
sympy.matrices.expressions.tests.test_matexpr.test_issue_2749()
sympy.matrices.expressions.tests.test_matexpr.test_issue_2750()
sympy.matrices.expressions.tests.test_matexpr.test_issue_7842()
sympy.matrices.expressions.tests.test_matexpr.test_matadd_simplify()
sympy.matrices.expressions.tests.test_matexpr.test_matexpr()
sympy.matrices.expressions.tests.test_matexpr.test_matexpr_indexing()
sympy.matrices.expressions.tests.test_matexpr.test_matexpr_properties()
sympy.matrices.expressions.tests.test_matexpr.test_matexpr_subs()
sympy.matrices.expressions.tests.test_matexpr.test_matmul_simplify()
sympy.matrices.expressions.tests.test_matexpr.test_matrix_symbol_creation()
sympy.matrices.expressions.tests.test_matexpr.test_matrixelement_diff()
sympy.matrices.expressions.tests.test_matexpr.test_matrixsymbol_from_symbol()
sympy.matrices.expressions.tests.test_matexpr.test_matrixsymbol_solving()
sympy.matrices.expressions.tests.test_matexpr.test_multiplication()
sympy.matrices.expressions.tests.test_matexpr.test_simplify_matrix_expressions()
sympy.matrices.expressions.tests.test_matexpr.test_single_indexing()
sympy.matrices.expressions.tests.test_matexpr.test_zero_matmul()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_dotproduct.py----------------------------------------
A:sympy.matrices.expressions.tests.test_dotproduct.A->MatrixSymbol('A', 3, 1)
A:sympy.matrices.expressions.tests.test_dotproduct.B->MatrixSymbol('B', 3, 1)
A:sympy.matrices.expressions.tests.test_dotproduct.C->Matrix(4, 1, [1, 2, 4, 5])
A:sympy.matrices.expressions.tests.test_dotproduct.D->Matrix(2, 2, [1, 2, 3, 4])
A:sympy.matrices.expressions.tests.test_dotproduct.dot->DotProduct(A, B)
sympy.matrices.expressions.tests.test_dotproduct.test_docproduct()
sympy.matrices.expressions.tests.test_dotproduct.test_dotproduct_symbolic()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_slice.py----------------------------------------
A:sympy.matrices.expressions.tests.test_slice.X->MatrixSymbol('x', 10, 10)
A:sympy.matrices.expressions.tests.test_slice.Y->MatrixSymbol('Y', m, k)
A:sympy.matrices.expressions.tests.test_slice.B->MatrixSlice(X, (a, b), (c, d))
sympy.matrices.expressions.tests.test_slice.test_entry()
sympy.matrices.expressions.tests.test_slice.test_exceptions()
sympy.matrices.expressions.tests.test_slice.test_inputs()
sympy.matrices.expressions.tests.test_slice.test_negative_index()
sympy.matrices.expressions.tests.test_slice.test_on_diag()
sympy.matrices.expressions.tests.test_slice.test_shape()
sympy.matrices.expressions.tests.test_slice.test_slice_of_slice()
sympy.matrices.expressions.tests.test_slice.test_slicing()
sympy.matrices.expressions.tests.test_slice.test_symmetry()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_fourier.py----------------------------------------
A:sympy.matrices.expressions.tests.test_fourier.n->symbols('n', negative=True)
A:sympy.matrices.expressions.tests.test_fourier.(n, i, j)->symbols('n i j')
sympy.matrices.expressions.tests.test_fourier.test_dft()
sympy.matrices.expressions.tests.test_fourier.test_dft2()
sympy.matrices.expressions.tests.test_fourier.test_dft_creation()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_sets.py----------------------------------------
A:sympy.matrices.expressions.tests.test_sets.(n, m)->symbols('n m', integer=True)
A:sympy.matrices.expressions.tests.test_sets.A->MatrixSymbol('A', n, m)
A:sympy.matrices.expressions.tests.test_sets.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_sets.M->MatrixSet(2, 2, set={1, 2, 3})
A:sympy.matrices.expressions.tests.test_sets.X->Matrix([[1, 2], [3, 4]])
A:sympy.matrices.expressions.tests.test_sets.Y->Matrix([[1, 2]])
sympy.matrices.expressions.tests.test_sets.test_MatrixSet()
sympy.matrices.expressions.tests.test_sets.test_SetKind_MatrixSet()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_applyfunc.py----------------------------------------
A:sympy.matrices.expressions.tests.test_applyfunc.X->MatrixSymbol('X', 3, 3)
A:sympy.matrices.expressions.tests.test_applyfunc.Y->MatrixSymbol('Y', 3, 3)
A:sympy.matrices.expressions.tests.test_applyfunc.k->symbols('k')
A:sympy.matrices.expressions.tests.test_applyfunc.Xk->MatrixSymbol('X', k, k)
A:sympy.matrices.expressions.tests.test_applyfunc.Xd->MatrixSymbol('X', 3, 3).as_explicit()
A:sympy.matrices.expressions.tests.test_applyfunc.(x, y, z, t)->symbols('x y z t')
A:sympy.matrices.expressions.tests.test_applyfunc.x->Dummy('x')
A:sympy.matrices.expressions.tests.test_applyfunc.double->Lambda(x, x * 2)
A:sympy.matrices.expressions.tests.test_applyfunc.expr->MatrixSymbol('M', 1, 1).applyfunc(double)
A:sympy.matrices.expressions.tests.test_applyfunc.Z->MatrixSymbol('Z', 2, 3)
A:sympy.matrices.expressions.tests.test_applyfunc.M->MatrixSymbol('M', 1, 1)
A:sympy.matrices.expressions.tests.test_applyfunc.expr1->ElementwiseApplyFunction(lambda x: x + 1, Xk)
A:sympy.matrices.expressions.tests.test_applyfunc.expr2->ElementwiseApplyFunction(lambda x: x, Xk)
A:sympy.matrices.expressions.tests.test_applyfunc.af->MatrixSymbol('X', k, k).applyfunc(sin)
sympy.matrices.expressions.tests.test_applyfunc.test_applyfunc_as_explicit()
sympy.matrices.expressions.tests.test_applyfunc.test_applyfunc_entry()
sympy.matrices.expressions.tests.test_applyfunc.test_applyfunc_matrix()
sympy.matrices.expressions.tests.test_applyfunc.test_applyfunc_shape_11_matrices()
sympy.matrices.expressions.tests.test_applyfunc.test_applyfunc_transpose()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_permutation.py----------------------------------------
A:sympy.matrices.expressions.tests.test_permutation.p->Permutation(0, 1, 2)
A:sympy.matrices.expressions.tests.test_permutation.P->PermutationMatrix(p)
A:sympy.matrices.expressions.tests.test_permutation.M->Matrix([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
A:sympy.matrices.expressions.tests.test_permutation.P1->PermutationMatrix(p1)
A:sympy.matrices.expressions.tests.test_permutation.P2->PermutationMatrix(p2)
A:sympy.matrices.expressions.tests.test_permutation.P3->PermutationMatrix(Permutation([1, 0, 2]))
A:sympy.matrices.expressions.tests.test_permutation.p1->Permutation(0, 1, 2, 3)
A:sympy.matrices.expressions.tests.test_permutation.p2->Permutation(0, 2, 3, 1)
A:sympy.matrices.expressions.tests.test_permutation.P0->PermutationMatrix(Permutation([0]))
A:sympy.matrices.expressions.tests.test_permutation.P10->PermutationMatrix(Permutation(0, 1))
A:sympy.matrices.expressions.tests.test_permutation.P3210->PermutationMatrix(Permutation([3, 2, 1, 0]))
A:sympy.matrices.expressions.tests.test_permutation.P3120->PermutationMatrix(Permutation([3, 1, 2, 0]))
A:sympy.matrices.expressions.tests.test_permutation.A->MatrixSymbol('A', 4, 4)
A:sympy.matrices.expressions.tests.test_permutation.pp->Permutation(0, 1, 2)
A:sympy.matrices.expressions.tests.test_permutation.AA->MatrixSymbol('A', 4, 4).as_explicit()
A:sympy.matrices.expressions.tests.test_permutation.expr->MatrixPermute(MatrixPermute(A, p1, 1), p2, 1)
sympy.matrices.expressions.tests.test_permutation.test_MartrixPermute_basic()
sympy.matrices.expressions.tests.test_permutation.test_MatrixPermute_doit()
sympy.matrices.expressions.tests.test_permutation.test_MatrixPermute_explicit()
sympy.matrices.expressions.tests.test_permutation.test_MatrixPermute_rewrite_MatMul()
sympy.matrices.expressions.tests.test_permutation.test_MatrixPermute_shape()
sympy.matrices.expressions.tests.test_permutation.test_PermutationMatrix_basic()
sympy.matrices.expressions.tests.test_permutation.test_PermutationMatrix_determinant()
sympy.matrices.expressions.tests.test_permutation.test_PermutationMatrix_identity()
sympy.matrices.expressions.tests.test_permutation.test_PermutationMatrix_inverse()
sympy.matrices.expressions.tests.test_permutation.test_PermutationMatrix_matmul()
sympy.matrices.expressions.tests.test_permutation.test_PermutationMatrix_matpow()
sympy.matrices.expressions.tests.test_permutation.test_PermutationMatrix_rewrite_BlockDiagMatrix()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_companion.py----------------------------------------
A:sympy.matrices.expressions.tests.test_companion.x->Symbol('x')
A:sympy.matrices.expressions.tests.test_companion.y->Symbol('y')
A:sympy.matrices.expressions.tests.test_companion.(c0, c1, c2)->symbols('c0:3')
A:sympy.matrices.expressions.tests.test_companion.A->CompanionMatrix(Poly([1, c2, c1, c0], x))
sympy.matrices.expressions.tests.test_companion.test_as_explicit()
sympy.matrices.expressions.tests.test_companion.test_creation()
sympy.matrices.expressions.tests.test_companion.test_entry()
sympy.matrices.expressions.tests.test_companion.test_shape()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_derivatives.py----------------------------------------
A:sympy.matrices.expressions.tests.test_derivatives.(i, j, k)->symbols('i j k')
A:sympy.matrices.expressions.tests.test_derivatives.(m, n)->symbols('m n')
A:sympy.matrices.expressions.tests.test_derivatives.X->MatrixSymbol('X', k, k)
A:sympy.matrices.expressions.tests.test_derivatives.x->x.as_explicit().as_explicit()
A:sympy.matrices.expressions.tests.test_derivatives.y->MatrixSymbol('y', k, 1)
A:sympy.matrices.expressions.tests.test_derivatives.A->MatrixSymbol('A', k, k)
A:sympy.matrices.expressions.tests.test_derivatives.B->MatrixSymbol('B', k, k)
A:sympy.matrices.expressions.tests.test_derivatives.C->MatrixSymbol('C', k, k)
A:sympy.matrices.expressions.tests.test_derivatives.D->MatrixSymbol('D', k, k)
A:sympy.matrices.expressions.tests.test_derivatives.a->MatrixSymbol('a', k, 1)
A:sympy.matrices.expressions.tests.test_derivatives.b->MatrixSymbol('b', k, 1)
A:sympy.matrices.expressions.tests.test_derivatives.c->MatrixSymbol('c', k, 1)
A:sympy.matrices.expressions.tests.test_derivatives.d->MatrixSymbol('d', k, 1)
A:sympy.matrices.expressions.tests.test_derivatives.expr->hadamard_power(a.T * X * b, S.Half)
A:sympy.matrices.expressions.tests.test_derivatives.diffexpr->diffexpr.as_explicit().as_explicit()
A:sympy.matrices.expressions.tests.test_derivatives.mu->symbols('mu')
A:sympy.matrices.expressions.tests.test_derivatives.I->Identity(k)
A:sympy.matrices.expressions.tests.test_derivatives.AdA->PermuteDims(ArrayTensorProduct(I, I), Permutation(3)(1, 2))
A:sympy.matrices.expressions.tests.test_derivatives.deriv->hadamard_power(a.T * X * b, S.Half).diff(A)
sympy.matrices.expressions.tests.test_derivatives._check_derivative_with_explicit_matrix(expr,x,diffexpr,dim=2)
sympy.matrices.expressions.tests.test_derivatives.test_derivatives_elementwise_applyfunc()
sympy.matrices.expressions.tests.test_derivatives.test_derivatives_matrix_norms()
sympy.matrices.expressions.tests.test_derivatives.test_derivatives_of_complicated_matrix_expr()
sympy.matrices.expressions.tests.test_derivatives.test_derivatives_of_hadamard_expressions()
sympy.matrices.expressions.tests.test_derivatives.test_matrix_derivative_by_scalar()
sympy.matrices.expressions.tests.test_derivatives.test_matrix_derivative_non_matrix_result()
sympy.matrices.expressions.tests.test_derivatives.test_matrix_derivative_trivial_cases()
sympy.matrices.expressions.tests.test_derivatives.test_matrix_derivative_vectors_and_scalars()
sympy.matrices.expressions.tests.test_derivatives.test_matrix_derivative_with_inverse()
sympy.matrices.expressions.tests.test_derivatives.test_matrix_derivatives_of_traces()
sympy.matrices.expressions.tests.test_derivatives.test_mixed_deriv_mixed_expressions()
sympy.matrices.expressions.tests.test_derivatives.test_one_matrix()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_determinant.py----------------------------------------
A:sympy.matrices.expressions.tests.test_determinant.n->symbols('n', integer=True)
A:sympy.matrices.expressions.tests.test_determinant.A->MatrixSymbol('A', n, n)
A:sympy.matrices.expressions.tests.test_determinant.B->MatrixSymbol('B', n, n)
A:sympy.matrices.expressions.tests.test_determinant.C->MatrixSymbol('C', 3, 4)
A:sympy.matrices.expressions.tests.test_determinant.det_a->Determinant(A)
A:sympy.matrices.expressions.tests.test_determinant.det_b->Determinant(B)
sympy.matrices.expressions.tests.test_determinant.test_commutative()
sympy.matrices.expressions.tests.test_determinant.test_det()
sympy.matrices.expressions.tests.test_determinant.test_eval_determinant()
sympy.matrices.expressions.tests.test_determinant.test_permanent()
sympy.matrices.expressions.tests.test_determinant.test_refine()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_matpow.py----------------------------------------
A:sympy.matrices.expressions.tests.test_matpow.(n, m, l, k)->symbols('n m l k', integer=True)
A:sympy.matrices.expressions.tests.test_matpow.A->MatrixSymbol('A', 2, 3)
A:sympy.matrices.expressions.tests.test_matpow.B->ImmutableMatrix([[1, 2, 3], [4, 5, 6]])
A:sympy.matrices.expressions.tests.test_matpow.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_matpow.D->MatrixSymbol('D', n, n)
A:sympy.matrices.expressions.tests.test_matpow.E->MatrixSymbol('E', m, n)
A:sympy.matrices.expressions.tests.test_matpow.X->ImmutableMatrix([[1, 2], [3, 4]])
A:sympy.matrices.expressions.tests.test_matpow.a->MatrixSymbol('a', 3, 1)
A:sympy.matrices.expressions.tests.test_matpow.b->MatrixSymbol('b', 3, 1)
A:sympy.matrices.expressions.tests.test_matpow.c->MatrixSymbol('c', 3, 1)
A:sympy.matrices.expressions.tests.test_matpow.m->sqrt(a[0, 0] * b[0, 0] + a[1, 0] * b[1, 0] + a[2, 0] * b[2, 0])
A:sympy.matrices.expressions.tests.test_matpow.denom->sqrt(a[0, 0] * b[0, 0] + a[1, 0] * b[1, 0] + a[2, 0] * b[2, 0])
A:sympy.matrices.expressions.tests.test_matpow.Y->ImmutableMatrix([[2, 3], [4, 5]])
A:sympy.matrices.expressions.tests.test_matpow.k->Identity(n)
A:sympy.matrices.expressions.tests.test_matpow.l->Identity(3)
A:sympy.matrices.expressions.tests.test_matpow.z1->ZeroMatrix(n, n)
A:sympy.matrices.expressions.tests.test_matpow.z2->ZeroMatrix(4, 4)
A:sympy.matrices.expressions.tests.test_matpow.o->OneMatrix(n, n)
sympy.matrices.expressions.tests.test_matpow.test_Inverse()
sympy.matrices.expressions.tests.test_matpow.test_OneMatrix_power()
sympy.matrices.expressions.tests.test_matpow.test_as_explicit_matrix()
sympy.matrices.expressions.tests.test_matpow.test_as_explicit_symbol()
sympy.matrices.expressions.tests.test_matpow.test_combine_powers()
sympy.matrices.expressions.tests.test_matpow.test_doit_equals_pow()
sympy.matrices.expressions.tests.test_matpow.test_doit_matrix()
sympy.matrices.expressions.tests.test_matpow.test_doit_nested_MatrixExpr()
sympy.matrices.expressions.tests.test_matpow.test_doit_symbol()
sympy.matrices.expressions.tests.test_matpow.test_entry_matrix()
sympy.matrices.expressions.tests.test_matpow.test_entry_symbol()
sympy.matrices.expressions.tests.test_matpow.test_identity_power()
sympy.matrices.expressions.tests.test_matpow.test_no_exponentiation()
sympy.matrices.expressions.tests.test_matpow.test_nonsquare()
sympy.matrices.expressions.tests.test_matpow.test_transpose_power()
sympy.matrices.expressions.tests.test_matpow.test_unchanged()
sympy.matrices.expressions.tests.test_matpow.test_zero_power()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_adjoint.py----------------------------------------
A:sympy.matrices.expressions.tests.test_adjoint.(n, m, l, k, p)->symbols('n m l k p', integer=True)
A:sympy.matrices.expressions.tests.test_adjoint.A->MatrixSymbol('A', n, m)
A:sympy.matrices.expressions.tests.test_adjoint.B->MatrixSymbol('B', m, l)
A:sympy.matrices.expressions.tests.test_adjoint.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_adjoint.Sq->MatrixSymbol('Sq', n, n)
sympy.matrices.expressions.tests.test_adjoint.test_adjoint()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_diagonal.py----------------------------------------
A:sympy.matrices.expressions.tests.test_diagonal.n->Symbol('n')
A:sympy.matrices.expressions.tests.test_diagonal.m->Symbol('m')
A:sympy.matrices.expressions.tests.test_diagonal.x->MatrixSymbol('x', n, 1)
A:sympy.matrices.expressions.tests.test_diagonal.D->DiagonalMatrix(x)
A:sympy.matrices.expressions.tests.test_diagonal.i->Symbol('i')
A:sympy.matrices.expressions.tests.test_diagonal.j->Symbol('j')
A:sympy.matrices.expressions.tests.test_diagonal.d->diagonalize_vector(a)
A:sympy.matrices.expressions.tests.test_diagonal.a->MatrixSymbol('a', 3, 1).as_explicit()
A:sympy.matrices.expressions.tests.test_diagonal.dx->DiagMatrix(x)
A:sympy.matrices.expressions.tests.test_diagonal.z->MatrixSymbol('z', 1, n)
A:sympy.matrices.expressions.tests.test_diagonal.dz->DiagMatrix(z)
A:sympy.matrices.expressions.tests.test_diagonal.v->MatrixSymbol('v', 1, 3)
A:sympy.matrices.expressions.tests.test_diagonal.dv->DiagMatrix(3 * v)
A:sympy.matrices.expressions.tests.test_diagonal.expr->DiagMatrix(a.T)
A:sympy.matrices.expressions.tests.test_diagonal.result->Matrix([[a[0, 0], 0, 0], [0, a[1, 0], 0], [0, 0, a[2, 0]]])
sympy.matrices.expressions.tests.test_diagonal.test_DiagMatrix()
sympy.matrices.expressions.tests.test_diagonal.test_DiagonalMatrix()
sympy.matrices.expressions.tests.test_diagonal.test_DiagonalOf()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_transpose.py----------------------------------------
A:sympy.matrices.expressions.tests.test_transpose.(n, m, l, k, p)->symbols('n m l k p', integer=True)
A:sympy.matrices.expressions.tests.test_transpose.A->MatrixSymbol('A', 3, 3)
A:sympy.matrices.expressions.tests.test_transpose.B->MatrixSymbol('B', m, l)
A:sympy.matrices.expressions.tests.test_transpose.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_transpose.Sq->MatrixSymbol('Sq', n, n)
A:sympy.matrices.expressions.tests.test_transpose.x->Matrix([i + 1 for i in range(3)])
A:sympy.matrices.expressions.tests.test_transpose.M->MatrixSymbol('M', 3, 3)
A:sympy.matrices.expressions.tests.test_transpose.N->MatrixSymbol('N', 3, 3)
A:sympy.matrices.expressions.tests.test_transpose.m->MatrixSymbol('m', 1, 1)
A:sympy.matrices.expressions.tests.test_transpose.v->MatrixSymbol('v', 3, 1)
A:sympy.matrices.expressions.tests.test_transpose.X->Identity(3)
A:sympy.matrices.expressions.tests.test_transpose.subbed->quadratic.xreplace({v: x, A: X})
sympy.matrices.expressions.tests.test_transpose.test_issue_9817()
sympy.matrices.expressions.tests.test_transpose.test_refine()
sympy.matrices.expressions.tests.test_transpose.test_transpose()
sympy.matrices.expressions.tests.test_transpose.test_transpose1x1()
sympy.matrices.expressions.tests.test_transpose.test_transpose_MatAdd_MatMul()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_funcmatrix.py----------------------------------------
A:sympy.matrices.expressions.tests.test_funcmatrix.(i, j, k)->symbols('i j k')
A:sympy.matrices.expressions.tests.test_funcmatrix.m->FunctionMatrix(2, 2, KroneckerDelta)
A:sympy.matrices.expressions.tests.test_funcmatrix.n->symbols('n', negative=True)
A:sympy.matrices.expressions.tests.test_funcmatrix.(i, j)->symbols('i,j')
A:sympy.matrices.expressions.tests.test_funcmatrix.X->FunctionMatrix(3, 3, KroneckerDelta)
sympy.matrices.expressions.tests.test_funcmatrix.test_funcmatrix()
sympy.matrices.expressions.tests.test_funcmatrix.test_funcmatrix_creation()
sympy.matrices.expressions.tests.test_funcmatrix.test_replace_issue()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_indexing.py----------------------------------------
A:sympy.matrices.expressions.tests.test_indexing.(k, l, m, n)->symbols('k l m n', integer=True, positive=True)
A:sympy.matrices.expressions.tests.test_indexing.(i, j)->symbols('i, j')
A:sympy.matrices.expressions.tests.test_indexing.W->MatrixSymbol('W', k, l)
A:sympy.matrices.expressions.tests.test_indexing.X->MatrixSymbol('X', n, m)
A:sympy.matrices.expressions.tests.test_indexing.Y->MatrixSymbol('Y', m, k)
A:sympy.matrices.expressions.tests.test_indexing.Z->ZeroMatrix(3, 3)
A:sympy.matrices.expressions.tests.test_indexing.X1->MatrixSymbol('X1', m, m)
A:sympy.matrices.expressions.tests.test_indexing.X2->MatrixSymbol('X2', m, m)
A:sympy.matrices.expressions.tests.test_indexing.X3->MatrixSymbol('X3', m, m)
A:sympy.matrices.expressions.tests.test_indexing.X4->MatrixSymbol('X4', m, m)
A:sympy.matrices.expressions.tests.test_indexing.A->MatrixSymbol('A', k, k)
A:sympy.matrices.expressions.tests.test_indexing.B->MatrixSymbol('B', k, k)
A:sympy.matrices.expressions.tests.test_indexing.x->MatrixSymbol('x', 1, 2)
A:sympy.matrices.expressions.tests.test_indexing.y->MatrixSymbol('x', 2, 1)
A:sympy.matrices.expressions.tests.test_indexing.expected->Sum(X[4, i] * Y[i, 2], (i, 0, m - 1))
A:sympy.matrices.expressions.tests.test_indexing.Q->MatPow(A, 2)
A:sympy.matrices.expressions.tests.test_indexing.n->symbols('n')
A:sympy.matrices.expressions.tests.test_indexing.I->Identity(3)
A:sympy.matrices.expressions.tests.test_indexing.e3->ImmutableMatrix(eye(3))
A:sympy.matrices.expressions.tests.test_indexing.BB->BlockMatrix([[e3, e3], [e3, e3]])
A:sympy.matrices.expressions.tests.test_indexing.BI->BlockMatrix([[I, Z], [Z, I]])
A:sympy.matrices.expressions.tests.test_indexing.A1->MatrixSymbol('A1', n, 1)
A:sympy.matrices.expressions.tests.test_indexing.A2->MatrixSymbol('A2', m, 1)
A:sympy.matrices.expressions.tests.test_indexing.A3->MatrixSymbol('A3', n, k)
A:sympy.matrices.expressions.tests.test_indexing.A4->MatrixSymbol('A4', m, n)
A:sympy.matrices.expressions.tests.test_indexing.(n, m, k)->symbols('n m k', integer=True, positive=True)
A:sympy.matrices.expressions.tests.test_indexing.i->symbols('i', integer=True, nonnegative=True)
A:sympy.matrices.expressions.tests.test_indexing.A5->MatrixSymbol('A5', m, m)
A:sympy.matrices.expressions.tests.test_indexing.A6->MatrixSymbol('A6', m, k)
A:sympy.matrices.expressions.tests.test_indexing.A7->MatrixSymbol('A7', k, n)
A:sympy.matrices.expressions.tests.test_indexing.A8->MatrixSymbol('A8', k, m)
A:sympy.matrices.expressions.tests.test_indexing.A9->MatrixSymbol('A9', k, k)
A:sympy.matrices.expressions.tests.test_indexing.(i1, i2, i3)->symbols('i_1:4')
A:sympy.matrices.expressions.tests.test_indexing.C->MatrixSymbol('C', k, k)
A:sympy.matrices.expressions.tests.test_indexing.w1->MatrixSymbol('w1', k, 1)
A:sympy.matrices.expressions.tests.test_indexing.(i0, i1, i2, i3, i4)->symbols('i0:5', cls=Dummy)
A:sympy.matrices.expressions.tests.test_indexing.expr->Sum(A[i1, i2] * B[i2, 0], (i2, 0, k - 1))
sympy.matrices.expressions.tests.test_indexing.test_Identity_index()
sympy.matrices.expressions.tests.test_indexing.test_add_index()
sympy.matrices.expressions.tests.test_indexing.test_block_index()
sympy.matrices.expressions.tests.test_indexing.test_block_index_large()
sympy.matrices.expressions.tests.test_indexing.test_block_index_symbolic()
sympy.matrices.expressions.tests.test_indexing.test_block_index_symbolic_fail()
sympy.matrices.expressions.tests.test_indexing.test_block_index_symbolic_nonzero()
sympy.matrices.expressions.tests.test_indexing.test_errors()
sympy.matrices.expressions.tests.test_indexing.test_matrix_expression_from_index_summation()
sympy.matrices.expressions.tests.test_indexing.test_matrix_expression_to_indices()
sympy.matrices.expressions.tests.test_indexing.test_mul_index()
sympy.matrices.expressions.tests.test_indexing.test_pow_index()
sympy.matrices.expressions.tests.test_indexing.test_slicing()
sympy.matrices.expressions.tests.test_indexing.test_symbolic_indexing()
sympy.matrices.expressions.tests.test_indexing.test_transpose_index()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_kronecker.py----------------------------------------
A:sympy.matrices.expressions.tests.test_kronecker.mat1->Matrix([[1, 2 * I], [1 + I, 3]])
A:sympy.matrices.expressions.tests.test_kronecker.mat2->Matrix([[2 * I, 3], [4 * I, 2]])
A:sympy.matrices.expressions.tests.test_kronecker.(i, j, k, n, m, o, p, x)->symbols('i,j,k,n,m,o,p,x')
A:sympy.matrices.expressions.tests.test_kronecker.Z->MatrixSymbol('Z', n, n)
A:sympy.matrices.expressions.tests.test_kronecker.W->MatrixSymbol('W', m, m)
A:sympy.matrices.expressions.tests.test_kronecker.A->MatrixSymbol('A', n, m)
A:sympy.matrices.expressions.tests.test_kronecker.B->MatrixSymbol('B', o, p)
A:sympy.matrices.expressions.tests.test_kronecker.C->MatrixSymbol('C', m, k)
A:sympy.matrices.expressions.tests.test_kronecker.X->MatrixSymbol('X', n, n)
A:sympy.matrices.expressions.tests.test_kronecker.Y->MatrixSymbol('Y', n, n)
A:sympy.matrices.expressions.tests.test_kronecker.kp->kronecker_product(W, Z)
A:sympy.matrices.expressions.tests.test_kronecker.kp1->kronecker_product(A, X)
A:sympy.matrices.expressions.tests.test_kronecker.kp2->kronecker_product(B, Y)
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_combine_add()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_combine_mul()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_combine_pow()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_determinant()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_entry()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_expand()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_explicit()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_extracts_commutative_part()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_identity()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_inverse()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_is_associative()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_is_bilinear()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_isnt_commutative()
sympy.matrices.expressions.tests.test_kronecker.test_KroneckerProduct_trace()
sympy.matrices.expressions.tests.test_kronecker.test_tensor_product_adjoint()
sympy.matrices.expressions.tests.test_kronecker.test_tensor_product_conjugate()
sympy.matrices.expressions.tests.test_kronecker.test_tensor_product_transpose()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_special.py----------------------------------------
A:sympy.matrices.expressions.tests.test_special.n->symbols('n', integer=True)
A:sympy.matrices.expressions.tests.test_special.z->GenericZeroMatrix()
A:sympy.matrices.expressions.tests.test_special.A->MatrixSymbol('A', n, m)
A:sympy.matrices.expressions.tests.test_special.I->GenericIdentity()
A:sympy.matrices.expressions.tests.test_special.(n, m)->symbols('n m', integer=True)
A:sympy.matrices.expressions.tests.test_special.Z->ZeroMatrix(n, m)
A:sympy.matrices.expressions.tests.test_special.Znn->ZeroMatrix(Add(n, n, evaluate=False), n)
A:sympy.matrices.expressions.tests.test_special.U->OneMatrix(2, 3)
A:sympy.matrices.expressions.tests.test_special.Unn->OneMatrix(Add(n, n, evaluate=False), n)
A:sympy.matrices.expressions.tests.test_special.(n, m, k)->symbols('n m k', integer=True)
A:sympy.matrices.expressions.tests.test_special.w->MatrixSymbol('w', n, 1)
A:sympy.matrices.expressions.tests.test_special.(i, j)->symbols('i j')
A:sympy.matrices.expressions.tests.test_special.In->Identity(n)
A:sympy.matrices.expressions.tests.test_special.Im->Identity(m)
A:sympy.matrices.expressions.tests.test_special.expr->Sum(In[i, j], (i, 1, n - 1))
A:sympy.matrices.expressions.tests.test_special.Inn->Identity(Add(n, n, evaluate=False))
sympy.matrices.expressions.tests.test_special.test_Identity()
sympy.matrices.expressions.tests.test_special.test_Identity_doit()
sympy.matrices.expressions.tests.test_special.test_OneMatrix()
sympy.matrices.expressions.tests.test_special.test_OneMatrix_doit()
sympy.matrices.expressions.tests.test_special.test_OneMatrix_mul()
sympy.matrices.expressions.tests.test_special.test_ZeroMatrix()
sympy.matrices.expressions.tests.test_special.test_ZeroMatrix_doit()
sympy.matrices.expressions.tests.test_special.test_generic_identity()
sympy.matrices.expressions.tests.test_special.test_generic_zero_matrix()
sympy.matrices.expressions.tests.test_special.test_identity_matrix_creation()
sympy.matrices.expressions.tests.test_special.test_one_matrix_creation()
sympy.matrices.expressions.tests.test_special.test_zero_matrix_creation()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_factorizations.py----------------------------------------
A:sympy.matrices.expressions.tests.test_factorizations.n->Symbol('n')
A:sympy.matrices.expressions.tests.test_factorizations.X->MatrixSymbol('X', n, n)
A:sympy.matrices.expressions.tests.test_factorizations.(L, U)->lu(X)
A:sympy.matrices.expressions.tests.test_factorizations.(Q_, R)->qr(X)
A:sympy.matrices.expressions.tests.test_factorizations.(U, S, V)->svd(X)
sympy.matrices.expressions.tests.test_factorizations.test_Cholesky()
sympy.matrices.expressions.tests.test_factorizations.test_LU()
sympy.matrices.expressions.tests.test_factorizations.test_QR()
sympy.matrices.expressions.tests.test_factorizations.test_svd()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_trace.py----------------------------------------
A:sympy.matrices.expressions.tests.test_trace.n->symbols('n', integer=True)
A:sympy.matrices.expressions.tests.test_trace.A->MatrixSymbol('A', n, n)
A:sympy.matrices.expressions.tests.test_trace.B->MatrixSymbol('B', n, n)
A:sympy.matrices.expressions.tests.test_trace.C->MatrixSymbol('C', 3, 4)
A:sympy.matrices.expressions.tests.test_trace.(i, j)->symbols('i j')
A:sympy.matrices.expressions.tests.test_trace.F->FunctionMatrix(3, 3, Lambda((i, j), i + j))
A:sympy.matrices.expressions.tests.test_trace.X->MatrixSymbol('X', 3, 3)
A:sympy.matrices.expressions.tests.test_trace.Y->MatrixSymbol('Y', 3, 3)
A:sympy.matrices.expressions.tests.test_trace.q->MatMul(X, 2 * X)
sympy.matrices.expressions.tests.test_trace.test_Trace()
sympy.matrices.expressions.tests.test_trace.test_Trace_A_plus_B()
sympy.matrices.expressions.tests.test_trace.test_Trace_MatAdd_doit()
sympy.matrices.expressions.tests.test_trace.test_Trace_MatPow_doit()
sympy.matrices.expressions.tests.test_trace.test_Trace_MutableMatrix_plus()
sympy.matrices.expressions.tests.test_trace.test_Trace_doit_deep_False()
sympy.matrices.expressions.tests.test_trace.test_trace_as_explicit()
sympy.matrices.expressions.tests.test_trace.test_trace_constant_factor()
sympy.matrices.expressions.tests.test_trace.test_trace_normalize()
sympy.matrices.expressions.tests.test_trace.test_trace_rewrite()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_matadd.py----------------------------------------
A:sympy.matrices.expressions.tests.test_matadd.X->MatrixSymbol('X', 2, 2)
A:sympy.matrices.expressions.tests.test_matadd.Y->MatrixSymbol('Y', 2, 2)
A:sympy.matrices.expressions.tests.test_matadd.A->MatrixSymbol('A', 3, 2)
A:sympy.matrices.expressions.tests.test_matadd.B->MatrixSymbol('B', 3, 3)
sympy.matrices.expressions.tests.test_matadd.test_doit_args()
sympy.matrices.expressions.tests.test_matadd.test_evaluate()
sympy.matrices.expressions.tests.test_matadd.test_generic_identity()
sympy.matrices.expressions.tests.test_matadd.test_matadd_of_matrices()
sympy.matrices.expressions.tests.test_matadd.test_matadd_sympify()
sympy.matrices.expressions.tests.test_matadd.test_matrix_Add_with_scalar()
sympy.matrices.expressions.tests.test_matadd.test_shape_error()
sympy.matrices.expressions.tests.test_matadd.test_sort_key()
sympy.matrices.expressions.tests.test_matadd.test_zero_matrix_add()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_blockmatrix.py----------------------------------------
A:sympy.matrices.expressions.tests.test_blockmatrix.(i, j, k, l, m, n, p)->symbols('i:n, p', integer=True)
A:sympy.matrices.expressions.tests.test_blockmatrix.A->Identity(3)
A:sympy.matrices.expressions.tests.test_blockmatrix.B->OneMatrix(3, 2)
A:sympy.matrices.expressions.tests.test_blockmatrix.C->ZeroMatrix(2, 3)
A:sympy.matrices.expressions.tests.test_blockmatrix.D->Identity(2)
A:sympy.matrices.expressions.tests.test_blockmatrix.G->MatrixSymbol('G', n, n)
A:sympy.matrices.expressions.tests.test_blockmatrix.H->MatrixSymbol('H', n, n)
A:sympy.matrices.expressions.tests.test_blockmatrix.b1->BlockMatrix([[G, H]])
A:sympy.matrices.expressions.tests.test_blockmatrix.b2->BlockMatrix([[G], [H]])
A:sympy.matrices.expressions.tests.test_blockmatrix.X->BlockMatrix([[A, B], [C, D]])
A:sympy.matrices.expressions.tests.test_blockmatrix.Z->BlockMatrix([[Identity(n), B], [C, D]])
A:sympy.matrices.expressions.tests.test_blockmatrix.M->ImmutableMatrix(4, 4, range(16))
A:sympy.matrices.expressions.tests.test_blockmatrix.N->MatrixSymbol('N', l + n, k + m)
A:sympy.matrices.expressions.tests.test_blockmatrix.E->MatrixSymbol('E', m, 1)
A:sympy.matrices.expressions.tests.test_blockmatrix.F->MatrixSymbol('F', k, 1)
A:sympy.matrices.expressions.tests.test_blockmatrix.Y->BlockDiagMatrix(C, D)
A:sympy.matrices.expressions.tests.test_blockmatrix.Ab->BlockMatrix([[A]])
A:sympy.matrices.expressions.tests.test_blockmatrix.a->MatrixSymbol('a', 2, 2)
A:sympy.matrices.expressions.tests.test_blockmatrix.z->ZeroMatrix(2, 2)
A:sympy.matrices.expressions.tests.test_blockmatrix.b->BlockMatrix([[a, z], [z, z]])
A:sympy.matrices.expressions.tests.test_blockmatrix.D1->Matrix([[1, 2], [2, 4]])
A:sympy.matrices.expressions.tests.test_blockmatrix.D2->Matrix([[1, 3], [3, 9]])
A:sympy.matrices.expressions.tests.test_blockmatrix.D3->Matrix([[1, 4], [4, 16]])
A:sympy.matrices.expressions.tests.test_blockmatrix.K->BlockMatrix([[MatrixSymbol('M%s%s' % (rows, cols), rows, cols) for cols in colblocksizes] for rows in rowblocksizes])
A:sympy.matrices.expressions.tests.test_blockmatrix.collapse->block_collapse(K.I)
A:sympy.matrices.expressions.tests.test_blockmatrix.bdm1->BlockDiagMatrix(Matrix([i]), Matrix([j]))
A:sympy.matrices.expressions.tests.test_blockmatrix.bdm2->BlockDiagMatrix(Matrix([k]), Matrix([l]))
A:sympy.matrices.expressions.tests.test_blockmatrix.BB->reblock_2x2(B)
A:sympy.matrices.expressions.tests.test_blockmatrix.bm1->BlockDiagMatrix(ImmutableMatrix([1]), ImmutableMatrix([2]))
A:sympy.matrices.expressions.tests.test_blockmatrix.bm2->BlockDiagMatrix(ImmutableMatrix([3]), ImmutableMatrix([4]))
A:sympy.matrices.expressions.tests.test_blockmatrix.(L, D, U)->BlockMatrix([[A, B], [C, D]]).LDUdecomposition()
A:sympy.matrices.expressions.tests.test_blockmatrix.(U, D, L)->BlockMatrix([[A, B], [C, D]]).UDLdecomposition()
A:sympy.matrices.expressions.tests.test_blockmatrix.(L, U)->BlockMatrix([[A, B], [C, D]]).LUdecomposition()
A:sympy.matrices.expressions.tests.test_blockmatrix.I->Identity(n)
A:sympy.matrices.expressions.tests.test_blockmatrix.O->ZeroMatrix(n, n)
A:sympy.matrices.expressions.tests.test_blockmatrix.Ainv->block_collapse(A.inv())
A:sympy.matrices.expressions.tests.test_blockmatrix.AinvT->BlockMatrix([[I, O, O, O], [O, I, O, O], [O, O, I, O], [-I, O, O, I]])
A:sympy.matrices.expressions.tests.test_blockmatrix.X2->BlockMatrix([[A, S.ImaginaryUnit * B], [C, D]])
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockDiagMatrix()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockDiagMatrix_determinant()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockDiagMatrix_nonsquare()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockDiagMatrix_trace()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockDiagMatrix_transpose()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix_2x2_inverse_numeric()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix_2x2_inverse_symbolic()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix_3x3_symbolic()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix_Determinant()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix_trace()
sympy.matrices.expressions.tests.test_blockmatrix.test_adjoint_and_special_matrices()
sympy.matrices.expressions.tests.test_blockmatrix.test_bc_dist_diag()
sympy.matrices.expressions.tests.test_blockmatrix.test_bc_matadd()
sympy.matrices.expressions.tests.test_blockmatrix.test_bc_matmul()
sympy.matrices.expressions.tests.test_blockmatrix.test_bc_transpose()
sympy.matrices.expressions.tests.test_blockmatrix.test_block_collapse_explicit_matrices()
sympy.matrices.expressions.tests.test_blockmatrix.test_block_collapse_type()
sympy.matrices.expressions.tests.test_blockmatrix.test_block_lu_decomposition()
sympy.matrices.expressions.tests.test_blockmatrix.test_block_plus_ident()
sympy.matrices.expressions.tests.test_blockmatrix.test_blockcut()
sympy.matrices.expressions.tests.test_blockmatrix.test_deblock()
sympy.matrices.expressions.tests.test_blockmatrix.test_invalid_block_matrix()
sympy.matrices.expressions.tests.test_blockmatrix.test_issue_17624()
sympy.matrices.expressions.tests.test_blockmatrix.test_issue_18618()
sympy.matrices.expressions.tests.test_blockmatrix.test_issue_21866()
sympy.matrices.expressions.tests.test_blockmatrix.test_issue_2460()
sympy.matrices.expressions.tests.test_blockmatrix.test_reblock_2x2()
sympy.matrices.expressions.tests.test_blockmatrix.test_squareBlockMatrix()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/expressions/tests/test_inverse.py----------------------------------------
A:sympy.matrices.expressions.tests.test_inverse.(n, m, l)->symbols('n m l', integer=True)
A:sympy.matrices.expressions.tests.test_inverse.A->MatrixSymbol('A', 3, 4)
A:sympy.matrices.expressions.tests.test_inverse.B->MatrixSymbol('B', m, l)
A:sympy.matrices.expressions.tests.test_inverse.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_inverse.D->MatrixSymbol('D', n, n)
A:sympy.matrices.expressions.tests.test_inverse.E->MatrixSymbol('E', m, n)
sympy.matrices.expressions.tests.test_inverse.test_inverse()
sympy.matrices.expressions.tests.test_inverse.test_inverse_matpow_canonicalization()
sympy.matrices.expressions.tests.test_inverse.test_inverse_non_invertible()
sympy.matrices.expressions.tests.test_inverse.test_nonsquare_error()
sympy.matrices.expressions.tests.test_inverse.test_refine()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_sparse.py----------------------------------------
A:sympy.matrices.tests.test_sparse.a->SparseMatrix([[1, I], [-I, 1]])
A:sympy.matrices.tests.test_sparse.b->SparseMatrix(100, 100, lambda i, j: int(i != 0 and j % i == 0))
A:sympy.matrices.tests.test_sparse.x->Symbol('x')
A:sympy.matrices.tests.test_sparse.A->SparseMatrix([[a, 0], [0, d]])
A:sympy.matrices.tests.test_sparse.S->sympy.matrices.SparseMatrix.eye(3)
A:sympy.matrices.tests.test_sparse.c->SparseMatrix([[1, I], [-I, 1]]).copy()
A:sympy.matrices.tests.test_sparse.m0->sparse_eye(3)
A:sympy.matrices.tests.test_sparse.m1->SparseMatrix(3, 4, lambda i, j: i + j)
A:sympy.matrices.tests.test_sparse.m2->SparseMatrix([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])
A:sympy.matrices.tests.test_sparse.m->sparse_zeros(4)
A:sympy.matrices.tests.test_sparse.m[2:4, 2:4]->sparse_eye(2)
A:sympy.matrices.tests.test_sparse.m[:2, :2]->sparse_eye(2)
A:sympy.matrices.tests.test_sparse.m[:, 0]->SparseMatrix(4, 1, (1, 2, 3, 4))
A:sympy.matrices.tests.test_sparse.m[:, :]->sparse_zeros(4)
A:sympy.matrices.tests.test_sparse.testmat->SparseMatrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])
A:sympy.matrices.tests.test_sparse.(L, U, p)->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]]).LUdecomposition()
A:sympy.matrices.tests.test_sparse.M->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]])
A:sympy.matrices.tests.test_sparse.soln->SparseMatrix([[a, 0], [0, d]]).LUsolve(b)
A:sympy.matrices.tests.test_sparse.Ainv->SparseMatrix(Matrix(A).inv())
A:sympy.matrices.tests.test_sparse.v1->Matrix(1, 3, [1, 2, 3])
A:sympy.matrices.tests.test_sparse.v2->Matrix(1, 3, [3, 4, 5])
A:sympy.matrices.tests.test_sparse.test->SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_sparse.y->Symbol('y')
A:sympy.matrices.tests.test_sparse.L->SparseMatrix(1, 2, [x, x ** 2 * y ** 3])
A:sympy.matrices.tests.test_sparse.(Q, S)->SparseMatrix([[a, 0], [0, d]]).QRdecomposition()
A:sympy.matrices.tests.test_sparse.(out, tmp)->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]]).rref()
A:sympy.matrices.tests.test_sparse.basis->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]]).nullspace()
A:sympy.matrices.tests.test_sparse.sparse_eye3->sparse_eye(3)
A:sympy.matrices.tests.test_sparse.vals->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]]).eigenvals()
A:sympy.matrices.tests.test_sparse.s->SparseMatrix([[a, 0], [0, d]]).solve_least_squares(A[:, 0], 'LDL')
A:sympy.matrices.tests.test_sparse.s[1, 1:]->Matrix([[5, 6]])
A:sympy.matrices.tests.test_sparse.s[0, 0]->SparseMatrix([1, 1, 1])
A:sympy.matrices.tests.test_sparse.(L, D)->SparseMatrix([[a, 0], [0, d]]).LDLdecomposition()
A:sympy.matrices.tests.test_sparse.ans->SparseMatrix([[Rational(2, 3), Rational(1, 3), Rational(1, 6)], [Rational(1, 3), Rational(2, 3), Rational(1, 3)], [0, 0, S.Half]])
A:sympy.matrices.tests.test_sparse.(a, b, c, d)->symbols('a:d')
A:sympy.matrices.tests.test_sparse.(u, v, w, x)->symbols('u:x')
A:sympy.matrices.tests.test_sparse.B->MutableSparseMatrix([[u, v], [w, x]])
A:sympy.matrices.tests.test_sparse.C->ImmutableSparseMatrix([[u, v], [w, x]])
A:sympy.matrices.tests.test_sparse.sol->Matrix([[u / a, v / a], [w / d, x / d]])
A:sympy.matrices.tests.test_sparse.(a, d)->symbols('a d')
sympy.matrices.tests.test_sparse.test_CL_RL()
sympy.matrices.tests.test_sparse.test_add()
sympy.matrices.tests.test_sparse.test_copyin()
sympy.matrices.tests.test_sparse.test_diagonal_solve()
sympy.matrices.tests.test_sparse.test_errors()
sympy.matrices.tests.test_sparse.test_hermitian()
sympy.matrices.tests.test_sparse.test_len()
sympy.matrices.tests.test_sparse.test_lower_triangular_solve()
sympy.matrices.tests.test_sparse.test_scalar_multiply()
sympy.matrices.tests.test_sparse.test_sparse_creation()
sympy.matrices.tests.test_sparse.test_sparse_matrix()
sympy.matrices.tests.test_sparse.test_sparse_solve()
sympy.matrices.tests.test_sparse.test_sparse_zeros_sparse_eye()
sympy.matrices.tests.test_sparse.test_trace()
sympy.matrices.tests.test_sparse.test_transpose()
sympy.matrices.tests.test_sparse.test_upper_triangular_solve()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_normalforms.py----------------------------------------
A:sympy.matrices.tests.test_normalforms.m->Matrix([[2, 7], [0, 0], [0, 0]])
A:sympy.matrices.tests.test_normalforms.smf->Matrix([[2, 0]])
A:sympy.matrices.tests.test_normalforms.x->Symbol('x')
A:sympy.matrices.tests.test_normalforms.hnf->Matrix([[1], [0], [0]])
A:sympy.matrices.tests.test_normalforms.tr_hnf->Matrix([[37, 0, 19], [222, -6, 113], [48, 0, 25], [0, 2, 1], [0, 0, 1]])
A:sympy.matrices.tests.test_normalforms.A->Matrix([[1, 12], [0, 8], [0, 5]])
A:sympy.matrices.tests.test_normalforms.H->Matrix([[1, 0], [0, 8], [0, 5]])
sympy.matrices.tests.test_normalforms.test_hermite_normal()
sympy.matrices.tests.test_normalforms.test_issue_23410()
sympy.matrices.tests.test_normalforms.test_smith_normal()
sympy.matrices.tests.test_normalforms.test_smith_normal_deprecated()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_determinant.py----------------------------------------
A:sympy.matrices.tests.test_determinant.M->Matrix([a1, a2, a3, a4, a5])
A:sympy.matrices.tests.test_determinant.a->Matrix(2, 3, [1, 2, 3, 4, 5, 6])
A:sympy.matrices.tests.test_determinant.ev->Matrix([a1, a2, a3, a4, a5]).eigenvals()
A:sympy.matrices.tests.test_determinant.test_ev->random.choice(list(ev.keys()))
A:sympy.matrices.tests.test_determinant.z->zeros_Determinant(2)
A:sympy.matrices.tests.test_determinant.ey->eye_Determinant(2)
A:sympy.matrices.tests.test_determinant.x->Symbol('x')
A:sympy.matrices.tests.test_determinant.b->Matrix(1, 1, [5])
A:sympy.matrices.tests.test_determinant.c->Matrix(2, 2, [1, 2, 3, 4])
A:sympy.matrices.tests.test_determinant.d->Matrix(3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 8])
A:sympy.matrices.tests.test_determinant.e->Matrix(4, 4, [x, 1, 2, 3, 4, 5, 6, 7, 2, 9, 10, 11, 12, 13, 14, 14])
A:sympy.matrices.tests.test_determinant.f->Matrix(3, 3, [i, l, m, 0, j, n, 0, 0, k])
A:sympy.matrices.tests.test_determinant.g->Matrix(3, 3, [i, 0, 0, l, j, 0, m, n, k])
A:sympy.matrices.tests.test_determinant.h->Matrix(3, 3, [x ** 3, 0, 0, i, x ** (-1), 0, j, k, x ** (-2)])
A:sympy.matrices.tests.test_determinant.(a1, a2, a3, a4, a5)->symbols('a_1 a_2 a_3 a_4 a_5')
A:sympy.matrices.tests.test_determinant.adj->Matrix([[4, -8, 4, 0], [76, -14 * x - 68, 14 * x - 8, -4 * x + 24], [-122, 17 * x + 142, -21 * x + 4, 8 * x - 48], [48, -4 * x - 72, 8 * x, -4 * x + 24]])
A:sympy.matrices.tests.test_determinant.v1->Matrix(1, 3, [1, 2, 3])
A:sympy.matrices.tests.test_determinant.v2->Matrix(1, 3, [3, 4, 5])
A:sympy.matrices.tests.test_determinant.test->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_determinant.m->Matrix(3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9])
A:sympy.matrices.tests.test_determinant.cm->Matrix([[4, 76, -122, 48], [-8, -14 * x - 68, 17 * x + 142, -4 * x - 72], [4, 14 * x - 8, -21 * x + 4, 8 * x], [0, -4 * x + 24, 8 * x - 48, -4 * x + 24]])
A:sympy.matrices.tests.test_determinant.sub->Matrix([[x, 1, 2], [4, 5, 6], [2, 9, 10]])
A:sympy.matrices.tests.test_determinant.n->Matrix(3, 3, [x, 0, 0, a, y, 0, b, c, z])
sympy.matrices.tests.test_determinant.eye_Determinant(n)
sympy.matrices.tests.test_determinant.test_adjugate()
sympy.matrices.tests.test_determinant.test_charpoly()
sympy.matrices.tests.test_determinant.test_cofactor_and_minors()
sympy.matrices.tests.test_determinant.test_det()
sympy.matrices.tests.test_determinant.test_determinant()
sympy.matrices.tests.test_determinant.test_issue_14517()
sympy.matrices.tests.test_determinant.test_legacy_det()
sympy.matrices.tests.test_determinant.test_permanent()
sympy.matrices.tests.test_determinant.test_util()
sympy.matrices.tests.test_determinant.zeros_Determinant(n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_graph.py----------------------------------------
A:sympy.matrices.tests.test_graph.(a, b, c, d, e, f, g, h, i, j, k, l, m)->symbols('a:m')
A:sympy.matrices.tests.test_graph.M->Matrix([[11, 14, 10, 0, 15, 0], [0, 44, 0, 0, 45, 0], [1, 4, 0, 0, 5, 0], [0, 0, 0, 22, 0, 23], [0, 54, 0, 0, 55, 0], [0, 0, 0, 32, 0, 33]])
A:sympy.matrices.tests.test_graph.cc->Matrix([[11, 14, 10, 0, 15, 0], [0, 44, 0, 0, 45, 0], [1, 4, 0, 0, 5, 0], [0, 0, 0, 22, 0, 23], [0, 54, 0, 0, 55, 0], [0, 0, 0, 32, 0, 33]]).connected_components()
A:sympy.matrices.tests.test_graph.(P, B)->Matrix([[11, 14, 10, 0, 15, 0], [0, 44, 0, 0, 45, 0], [1, 4, 0, 0, 5, 0], [0, 0, 0, 22, 0, 23], [0, 54, 0, 0, 55, 0], [0, 0, 0, 32, 0, 33]]).strongly_connected_components_decomposition(lower=False)
A:sympy.matrices.tests.test_graph.p->Permutation([3, 5, 0, 2, 1, 4])
A:sympy.matrices.tests.test_graph.B0->Matrix([[a, b, 0, c], [m, 1, 0, 0], [j, k, 1, l], [0, d, 0, 1]])
A:sympy.matrices.tests.test_graph.B1->Matrix([[d, e, 0, f], [m, 1, 0, 0], [j, k, 1, l], [0, d, 0, 1]])
A:sympy.matrices.tests.test_graph.B2->Matrix([[g, h, 0, i], [m, 1, 0, 0], [j, k, 1, l], [0, d, 0, 1]])
A:sympy.matrices.tests.test_graph.B3->Matrix([[1]])
A:sympy.matrices.tests.test_graph.scc->Matrix([[11, 14, 10, 0, 15, 0], [0, 44, 0, 0, 45, 0], [1, 4, 0, 0, 5, 0], [0, 0, 0, 22, 0, 23], [0, 54, 0, 0, 55, 0], [0, 0, 0, 32, 0, 33]]).strongly_connected_components()
A:sympy.matrices.tests.test_graph.P->P.as_explicit().as_explicit()
A:sympy.matrices.tests.test_graph.B->B.as_explicit().as_explicit()
sympy.matrices.tests.test_graph.test_connected_components()
sympy.matrices.tests.test_graph.test_strongly_connected_components()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_eigen.py----------------------------------------
A:sympy.matrices.tests.test_eigen.M->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i))
A:sympy.matrices.tests.test_eigen.a->Symbol('a', positive=True)
A:sympy.matrices.tests.test_eigen.c->R(13, 2)
A:sympy.matrices.tests.test_eigen.r->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i)).eigenvects()
A:sympy.matrices.tests.test_eigen.eps->Symbol('eps', real=True)
A:sympy.matrices.tests.test_eigen.M._eigenvects->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i)).eigenvects(simplify=True)
A:sympy.matrices.tests.test_eigen.m->Matrix([[0, 0, 0], [0, b, 0], [0, 0, b]])
A:sympy.matrices.tests.test_eigen.q->Symbol('q', positive=True)
A:sympy.matrices.tests.test_eigen.n_evals->sorted(n_evals)
A:sympy.matrices.tests.test_eigen.s_evals->sorted(s_evals)
A:sympy.matrices.tests.test_eigen.(P, D)->Matrix([[0, 0, 0], [0, b, 0], [0, 0, b]]).diagonalize()
A:sympy.matrices.tests.test_eigen.(x, y)->symbols('x y')
A:sympy.matrices.tests.test_eigen.eigenvals->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i)).eigenvals(multiple=True)
A:sympy.matrices.tests.test_eigen.vecs->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i)).left_eigenvects()
A:sympy.matrices.tests.test_eigen.value->random.randint(-1000000000, 1000000000)
A:sympy.matrices.tests.test_eigen.N->ImmutableMatrix(M)
A:sympy.matrices.tests.test_eigen.(N1, N2, N3)->ImmutableMatrix(M).bidiagonal_decomposition()
A:sympy.matrices.tests.test_eigen.(M1, M2, M3)->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i)).bidiagonal_decomposition()
A:sympy.matrices.tests.test_eigen.M0->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i)).bidiagonalize()
A:sympy.matrices.tests.test_eigen.N0->ImmutableMatrix(M).bidiagonalize()
A:sympy.matrices.tests.test_eigen.LM0->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i)).bidiagonalize(upper=False)
A:sympy.matrices.tests.test_eigen.(LM1, LM2, LM3)->M.applyfunc(lambda i: Float(i)).applyfunc(lambda i: Float(i)).bidiagonal_decomposition(upper=False)
A:sympy.matrices.tests.test_eigen.LN0->ImmutableMatrix(M).bidiagonalize(upper=False)
A:sympy.matrices.tests.test_eigen.(LN1, LN2, LN3)->ImmutableMatrix(M).bidiagonal_decomposition(upper=False)
A:sympy.matrices.tests.test_eigen.real->random.randint(-1000000000, 1000000000)
A:sympy.matrices.tests.test_eigen.comp->random.randint(-1000000000, 1000000000)
A:sympy.matrices.tests.test_eigen.(a, b, c)->symbols('a b c')
A:sympy.matrices.tests.test_eigen.(_, D2)->Matrix([[0, 0, 0], [0, b, 0], [0, 0, b]]).diagonalize(reals_only=True)
A:sympy.matrices.tests.test_eigen.(P, J)->Matrix([[0, 0, 0], [0, b, 0], [0, 0, b]]).jordan_form()
A:sympy.matrices.tests.test_eigen.A->DFT(5).as_explicit().expand(complex=True)
A:sympy.matrices.tests.test_eigen.x->Symbol('x', real=True)
A:sympy.matrices.tests.test_eigen.vals->DFT(5).as_explicit().expand(complex=True).singular_values()
A:sympy.matrices.tests.test_eigen.b->symbols('b', nonzero=True)
A:sympy.matrices.tests.test_eigen.t->Symbol('t')
A:sympy.matrices.tests.test_eigen.H->Matrix([[3, 0, 0, 0], [0, 1, 2, 0], [0, 2, 2, 0], [0, 0, 0, 4]])
A:sympy.matrices.tests.test_eigen.eigenvects->DFT(5).as_explicit().expand(complex=True).eigenvects()
sympy.matrices.tests.test_eigen.test___eq__()
sympy.matrices.tests.test_eigen.test_bidiagonalize()
sympy.matrices.tests.test_eigen.test_definite()
sympy.matrices.tests.test_eigen.test_diagonalize()
sympy.matrices.tests.test_eigen.test_eigen()
sympy.matrices.tests.test_eigen.test_eigen_slow()
sympy.matrices.tests.test_eigen.test_eigen_vects()
sympy.matrices.tests.test_eigen.test_eigenvals()
sympy.matrices.tests.test_eigen.test_eigenvects()
sympy.matrices.tests.test_eigen.test_float_eigenvals()
sympy.matrices.tests.test_eigen.test_is_diagonalizable()
sympy.matrices.tests.test_eigen.test_issue_19210()
sympy.matrices.tests.test_eigen.test_issue_20275()
sympy.matrices.tests.test_eigen.test_issue_20582()
sympy.matrices.tests.test_eigen.test_issue_20752()
sympy.matrices.tests.test_eigen.test_issue_8240()
sympy.matrices.tests.test_eigen.test_jordan_form()
sympy.matrices.tests.test_eigen.test_left_eigenvects()
sympy.matrices.tests.test_eigen.test_positive_semidefinite_cholesky()
sympy.matrices.tests.test_eigen.test_singular_values()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_interactions.py----------------------------------------
A:sympy.matrices.tests.test_interactions.SM->MatrixSymbol('X', 3, 3)
A:sympy.matrices.tests.test_interactions.SV->MatrixSymbol('v', 3, 1)
A:sympy.matrices.tests.test_interactions.MM->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_interactions.IM->ImmutableMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_interactions.meye->eye(3)
A:sympy.matrices.tests.test_interactions.imeye->ImmutableMatrix(eye(3))
A:sympy.matrices.tests.test_interactions.ideye->Identity(3)
A:sympy.matrices.tests.test_interactions.(a, b, c)->symbols('a,b,c')
A:sympy.matrices.tests.test_interactions.X->MatrixSymbol('X', 3, 3)
A:sympy.matrices.tests.test_interactions.A->Matrix(3, 3, range(9))
A:sympy.matrices.tests.test_interactions.B->ImmutableMatrix(3, 3, range(9))
A:sympy.matrices.tests.test_interactions.C->MatrixSymbol('C', 3, 3)
sympy.matrices.tests.test_interactions.test_IM_MM()
sympy.matrices.tests.test_interactions.test_ME_MM()
sympy.matrices.tests.test_interactions.test_classof()
sympy.matrices.tests.test_interactions.test_equality()
sympy.matrices.tests.test_interactions.test_indexing_interactions()
sympy.matrices.tests.test_interactions.test_matrix_symbol_MM()
sympy.matrices.tests.test_interactions.test_matrix_symbol_vector_matrix_multiplication()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_subspaces.py----------------------------------------
A:sympy.matrices.tests.test_subspaces.m->SubspaceOnlyMatrix([[1, 2, 0, 2, 5], [-2, -5, 1, -1, -8], [0, -3, 3, 4, 1], [3, 6, 0, -7, 2]])
A:sympy.matrices.tests.test_subspaces.basis->Matrix([[1, 2, 0, 2, 5], [-2, -5, 1, -1, -8], [0, -3, 3, 4, 1], [3, 6, 0, -7, 2]]).columnspace()
A:sympy.matrices.tests.test_subspaces.M->Matrix([[1, 2, 0, 2, 5], [-2, -5, 1, -1, -8], [0, -3, 3, 4, 1], [3, 6, 0, -7, 2]])
A:sympy.matrices.tests.test_subspaces.(out, tmp)->Matrix([[1, 2, 0, 2, 5], [-2, -5, 1, -1, -8], [0, -3, 3, 4, 1], [3, 6, 0, -7, 2]]).rref()
A:sympy.matrices.tests.test_subspaces.(a, b, c, d, e)->symbols('a b c d e')
A:sympy.matrices.tests.test_subspaces.X->Matrix([a, b, c, d, e])
sympy.matrices.tests.test_subspaces.SubspaceOnlyMatrix(_MinimalMatrix,_CastableMatrix,MatrixSubspaces)
sympy.matrices.tests.test_subspaces.test_columnspace_one()
sympy.matrices.tests.test_subspaces.test_columnspace_second()
sympy.matrices.tests.test_subspaces.test_nullspace_one()
sympy.matrices.tests.test_subspaces.test_nullspace_second()
sympy.matrices.tests.test_subspaces.test_rowspace()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_matrices.py----------------------------------------
A:sympy.matrices.tests.test_matrices.m->Matrix([[1]])
A:sympy.matrices.tests.test_matrices.v->Matrix([cos(x), sin(x)])
A:sympy.matrices.tests.test_matrices.n->Symbol('n')
A:sympy.matrices.tests.test_matrices.a->Matrix(MatrixSymbol('a', 3, 1))
A:sympy.matrices.tests.test_matrices.b->Matrix(MatrixSymbol('b', 3, 1))
A:sympy.matrices.tests.test_matrices.h->matrix_multiply_elementwise(a, c)
A:sympy.matrices.tests.test_matrices.M->Matrix([x, y])
A:sympy.matrices.tests.test_matrices.A->Matrix([[0, 2, 1, 6], [0, 0, 1, 2], [0, 0, 0, 3], [0, 0, 0, 0]])
A:sympy.matrices.tests.test_matrices.(P, J)->Matrix([[0, 2, 1, 6], [0, 0, 1, 2], [0, 0, 0, 3], [0, 0, 0, 0]]).jordan_form()
A:sympy.matrices.tests.test_matrices.ev->Matrix([x, y]).eigenvects()
A:sympy.matrices.tests.test_matrices.c23->Matrix(2, 3, range(1, 7))
A:sympy.matrices.tests.test_matrices.c13->Matrix(1, 3, range(7, 10))
A:sympy.matrices.tests.test_matrices.c->Matrix(MatrixSymbol('a', 3, 1)).dot(b)
A:sympy.matrices.tests.test_matrices.M2->Matrix([M, (5, 6)])
A:sympy.matrices.tests.test_matrices.m0->Matrix([[Abs(x) ** 2, sqrt(x ** 2)], [sqrt(x ** 2) * Abs(y) ** 2, sqrt(y ** 2) * Abs(x) ** 2]])
A:sympy.matrices.tests.test_matrices.m1->Matrix(2, 2, [1, 2, 3, 4])
A:sympy.matrices.tests.test_matrices.m2->Matrix([p1 - p0, p2 - p0])
A:sympy.matrices.tests.test_matrices.m[2:4, 2:4]->eye(2)
A:sympy.matrices.tests.test_matrices.m[:2, :2]->eye(2)
A:sympy.matrices.tests.test_matrices.m[:, 0]->Matrix(4, 1, (1, 2, 3, 4))
A:sympy.matrices.tests.test_matrices.m[:, :]->zeros(4)
A:sympy.matrices.tests.test_matrices.S->Matrix([x, y]).copy()
A:sympy.matrices.tests.test_matrices.rng->random.Random(4)
A:sympy.matrices.tests.test_matrices.Ainv->Matrix([[0, 2, 1, 6], [0, 0, 1, 2], [0, 0, 0, 3], [0, 0, 0, 0]]).inv()
A:sympy.matrices.tests.test_matrices.AA->Matrix([[0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0]])
A:sympy.matrices.tests.test_matrices.Ai->Matrix(3, 3, [6, 0, 3, 6, 6, 4, 1, 6, 1])
A:sympy.matrices.tests.test_matrices.L->FiniteSet(Matrix([1]))
A:sympy.matrices.tests.test_matrices.ans->Matrix([[0, 1], [-I, 0]])
A:sympy.matrices.tests.test_matrices.f->getattr(M, op)
A:sympy.matrices.tests.test_matrices.r1->Matrix([x, y]).row(0)
A:sympy.matrices.tests.test_matrices.c1->Matrix([x, y]).col(0)
A:sympy.matrices.tests.test_matrices.index1->Index1()
A:sympy.matrices.tests.test_matrices.index2->Index2()
A:sympy.matrices.tests.test_matrices.(rho, phi)->symbols('rho,phi')
A:sympy.matrices.tests.test_matrices.X->Matrix([[exp(x + y + z), exp(x + y + z)], [exp(x + y + z), exp(x + y + z)]])
A:sympy.matrices.tests.test_matrices.Y->Matrix([[x, y], [x, z]])
A:sympy.matrices.tests.test_matrices.J->X_slice.jacobian(Y_slice)
A:sympy.matrices.tests.test_matrices.g->g.applyfunc(trigsimp).applyfunc(trigsimp)
A:sympy.matrices.tests.test_matrices.m_vec->Matrix([[1]]).vec()
A:sympy.matrices.tests.test_matrices.m_vech->Matrix([[1]]).vech(diagonal=False, check_symmetry=False)
A:sympy.matrices.tests.test_matrices.(P, D)->Matrix([[1]]).diagonalize()
A:sympy.matrices.tests.test_matrices.(a, b, c, d)->symbols('a b c d')
A:sympy.matrices.tests.test_matrices.Jmust->Matrix(4, 4, [1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 1, 0, 0, 0, 4])
A:sympy.matrices.tests.test_matrices.Jmust1->Matrix([[p, 1, 0, 0], [0, p, 0, 0], [0, 0, q, 1], [0, 0, 0, q]])
A:sympy.matrices.tests.test_matrices.Jmust2->Matrix([[q, 1, 0, 0], [0, q, 0, 0], [0, 0, p, 1], [0, 0, 0, p]])
A:sympy.matrices.tests.test_matrices.(UA, K_i, K_w)->symbols('UA K_i K_w')
A:sympy.matrices.tests.test_matrices.charpoly->Matrix([[0, 2, 1, 6], [0, 0, 1, 2], [0, 0, 0, 3], [0, 0, 0, 0]]).charpoly(x)
A:sympy.matrices.tests.test_matrices.p->Matrix([[0, 2, 1, 6], [0, 0, 1, 2], [0, 0, 0, 3], [0, 0, 0, 0]]).charpoly(x)
A:sympy.matrices.tests.test_matrices.l->Symbol('lamda')
A:sympy.matrices.tests.test_matrices.m_exp->Matrix([[exp(3), -4 * exp(-2) / 5 + 4 * exp(3) / 5], [0, exp(-2)]])
A:sympy.matrices.tests.test_matrices.x->Symbol('x', real=True)
A:sympy.matrices.tests.test_matrices.column->Matrix(3, 1, [x, cos(x) ** 2 + sin(x) ** 2 + x, cos(x) ** 2 + sin(x) ** 2])
A:sympy.matrices.tests.test_matrices.(pivot_offset, pivot_val, pivot_assumed_nonzero, simplified)->_find_reasonable_pivot_naive(column, simpfunc=_simplify)
A:sympy.matrices.tests.test_matrices.V->Matrix([[10, 10, 10]])
A:sympy.matrices.tests.test_matrices.A_imm->Matrix([[0, 2, 1, 6], [0, 0, 1, 2], [0, 0, 0, 3], [0, 0, 0, 0]]).as_immutable()
A:sympy.matrices.tests.test_matrices.B->Matrix([10, 20, -15])
A:sympy.matrices.tests.test_matrices.dB->Matrix([10, 20, -15]).diff([[a, b]])
A:sympy.matrices.tests.test_matrices.fxyz->f(x, y, z)
A:sympy.matrices.tests.test_matrices.res->(x ** 3).diff(Matrix([[x, y]]))
A:sympy.matrices.tests.test_matrices.C->SparseMatrix(((1, 0, 0), (0, 1, 0), (0, 0, 1)))
A:sympy.matrices.tests.test_matrices.D->Matrix(((1, 0, 0), (0, 1, 0), (0, 0, 1)))
A:sympy.matrices.tests.test_matrices.alpha->Symbol('alpha', real=True)
A:sympy.matrices.tests.test_matrices.dif->simplify((alpha * X).norm(order) - abs(alpha) * X.norm(order))
A:sympy.matrices.tests.test_matrices.d->diff(c, a[0, 0])
A:sympy.matrices.tests.test_matrices.e->diff(d, a[0, 0])
A:sympy.matrices.tests.test_matrices.A[2, 2]->Rational(1, 10)
A:sympy.matrices.tests.test_matrices.Mc->Matrix([x, y]).condition_number()
A:sympy.matrices.tests.test_matrices.r4->Matrix([[4, 4, 4]])
A:sympy.matrices.tests.test_matrices.c4->Matrix([4, 4, 4])
A:sympy.matrices.tests.test_matrices.i->Matrix([[1, 0], [0, 1]])
A:sympy.matrices.tests.test_matrices.z->Matrix([[0, 0], [0, 0]])
A:sympy.matrices.tests.test_matrices.r3_plus->rot_axis3(theta)
A:sympy.matrices.tests.test_matrices.r3_minus->rot_axis3(-theta)
A:sympy.matrices.tests.test_matrices.r2_plus->rot_axis2(theta)
A:sympy.matrices.tests.test_matrices.r2_minus->rot_axis2(-theta)
A:sympy.matrices.tests.test_matrices.r1_plus->rot_axis1(theta)
A:sympy.matrices.tests.test_matrices.r1_minus->rot_axis1(-theta)
A:sympy.matrices.tests.test_matrices.q1->sympy.algebras.Quaternion.from_axis_angle([1, 0, 0], pi / 2)
A:sympy.matrices.tests.test_matrices.q2->sympy.algebras.Quaternion.from_axis_angle([0, 1, 0], pi / 2)
A:sympy.matrices.tests.test_matrices.q3->sympy.algebras.Quaternion.from_axis_angle([0, 0, 1], pi / 2)
A:sympy.matrices.tests.test_matrices.s->zeros(3, 3)
A:sympy.matrices.tests.test_matrices.s[1, 1:]->Matrix([[5, 6]])
A:sympy.matrices.tests.test_matrices.s[0, 0]->SparseMatrix([1, 1, 1])
A:sympy.matrices.tests.test_matrices.(x, y)->symbols('x y', commutative=False)
A:sympy.matrices.tests.test_matrices.(B_x, B_y, B_z, E_x, E_y, E_z)->symbols('B_x B_y B_z E_x E_y E_z', real=True)
A:sympy.matrices.tests.test_matrices.F->Matrix(((0, E_x, E_y, E_z), (-E_x, 0, B_z, -B_y), (-E_y, -B_z, 0, B_x), (-E_z, B_y, -B_x, 0)))
A:sympy.matrices.tests.test_matrices.Fd->Matrix(((0, -B_x, -B_y, -B_z), (B_x, 0, E_z, -E_y), (B_y, -E_z, 0, E_x), (B_z, E_y, -E_x, 0)))
A:sympy.matrices.tests.test_matrices.(P, Q)->Matrix([[0, 2, 1, 6], [0, 0, 1, 2], [0, 0, 0, 3], [0, 0, 0, 0]]).diagonalize(normalize=True, sort=True)
A:sympy.matrices.tests.test_matrices.AIm->sympify(A)
A:sympy.matrices.tests.test_matrices.col->Matrix([-2, 4, -2])
A:sympy.matrices.tests.test_matrices.(F, G)->symbols('F, G', cls=Function)
A:sympy.matrices.tests.test_matrices.K->Matrix(2, 2, [(G(0), {F(0): G(0)}), (G(1), {F(1): G(1)}), (G(1), {F(1): G(1)}), (G(2), {F(2): G(2)})])
A:sympy.matrices.tests.test_matrices.N->Matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]])
A:sympy.matrices.tests.test_matrices.A1->Matrix([[a, b], [c, d]])
A:sympy.matrices.tests.test_matrices.A_pinv->Matrix([[0, 2, 1, 6], [0, 0, 1, 2], [0, 0, 0, 3], [0, 0, 0, 0]]).pinv(method='ED')
A:sympy.matrices.tests.test_matrices.q->Matrix([[a, b], [c, d]]).pinv(method='ED')
A:sympy.matrices.tests.test_matrices.w->Matrix([[a, b], [c, d]]).inv()
A:sympy.matrices.tests.test_matrices.O->Matrix([[1, 2, 3], [5, 6, 7], [9, 10, 11]])
A:sympy.matrices.tests.test_matrices.P->Matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]])
A:sympy.matrices.tests.test_matrices.Q->Matrix([[1, 2, 3], [2, 3, 4], [3, 4, 5]])
A:sympy.matrices.tests.test_matrices.(a, b)->kls(m3).as_real_imag()
A:sympy.matrices.tests.test_matrices.M1->Matrix(2, 2, [x, y, y, z])
A:sympy.matrices.tests.test_matrices.(ax, ay, bx, by, cx, cy, dx, dy, ex, ey, t0, t1)->symbols('a_x a_y b_x b_y c_x c_y d_x d_y e_x e_y t_0 t_1')
A:sympy.matrices.tests.test_matrices.mm->Matrix([[0.003, 59.14, 59.17], [5.291, -6.13, 46.78]])
A:sympy.matrices.tests.test_matrices.m_mixed->Matrix([[6e-17, 1.0, 4], [-1.0, 0, 8], [0, 0, 1]])
A:sympy.matrices.tests.test_matrices.m_float->Matrix([[6e-17, 1.0, 4.0], [-1.0, 0.0, 8.0], [0.0, 0.0, 1.0]])
A:sympy.matrices.tests.test_matrices.m_inv->Matrix([[0, -1.0, 8.0], [1.0, 6e-17, -4.0], [0, 0, 1]])
A:sympy.matrices.tests.test_matrices.m_correct->Matrix([[1.0, 0, -0.301369863013699, 0], [0, 1.0, -0.712328767123288, 0], [0, 0, 0, 0]])
A:sympy.matrices.tests.test_matrices.p1->Point(0, 0)
A:sympy.matrices.tests.test_matrices.p2->Point(1, -sqrt(3))
A:sympy.matrices.tests.test_matrices.p0->Point(xx, yy)
A:sympy.matrices.tests.test_matrices.m3->Matrix([simplify(p1 - p0), simplify(p2 - p0)])
A:sympy.matrices.tests.test_matrices.(P, Jcells)->Matrix([[1]]).jordan_cells()
A:sympy.matrices.tests.test_matrices.mat->Matrix([[1, I], [1, -I]])
A:sympy.matrices.tests.test_matrices.(Q, R)->Matrix([[1, I], [1, -I]]).QRdecomposition()
A:sympy.matrices.tests.test_matrices.future->executor.submit(f)
sympy.matrices.tests.test_matrices.test_17522_mpmath()
sympy.matrices.tests.test_matrices.test_17522_numpy()
sympy.matrices.tests.test_matrices.test_17522_scipy()
sympy.matrices.tests.test_matrices.test_DeferredVector()
sympy.matrices.tests.test_matrices.test_DeferredVector_Matrix()
sympy.matrices.tests.test_matrices.test_DeferredVector_not_iterable()
sympy.matrices.tests.test_matrices.test_GramSchmidt()
sympy.matrices.tests.test_matrices.test_Matrix_berkowitz_charpoly()
sympy.matrices.tests.test_matrices.test_abs()
sympy.matrices.tests.test_matrices.test_addition()
sympy.matrices.tests.test_matrices.test_adjoint()
sympy.matrices.tests.test_matrices.test_anti_symmetric()
sympy.matrices.tests.test_matrices.test_applyfunc()
sympy.matrices.tests.test_matrices.test_args()
sympy.matrices.tests.test_matrices.test_as_mutable()
sympy.matrices.tests.test_matrices.test_as_real_imag()
sympy.matrices.tests.test_matrices.test_atoms()
sympy.matrices.tests.test_matrices.test_case_6913()
sympy.matrices.tests.test_matrices.test_casoratian()
sympy.matrices.tests.test_matrices.test_cholesky()
sympy.matrices.tests.test_matrices.test_col_insert()
sympy.matrices.tests.test_matrices.test_col_join()
sympy.matrices.tests.test_matrices.test_col_row_op()
sympy.matrices.tests.test_matrices.test_condition_number()
sympy.matrices.tests.test_matrices.test_conj_dirac()
sympy.matrices.tests.test_matrices.test_conjugate()
sympy.matrices.tests.test_matrices.test_copyin()
sympy.matrices.tests.test_matrices.test_creation()
sympy.matrices.tests.test_matrices.test_creation_args()
sympy.matrices.tests.test_matrices.test_cross()
sympy.matrices.tests.test_matrices.test_deprecated()
sympy.matrices.tests.test_matrices.test_deprecated_mat_smat()
sympy.matrices.tests.test_matrices.test_diag()
sympy.matrices.tests.test_matrices.test_diagonal_symmetrical()
sympy.matrices.tests.test_matrices.test_diagonalization()
sympy.matrices.tests.test_matrices.test_diff()
sympy.matrices.tests.test_matrices.test_diff_by_matrix()
sympy.matrices.tests.test_matrices.test_division()
sympy.matrices.tests.test_matrices.test_doit()
sympy.matrices.tests.test_matrices.test_dot()
sympy.matrices.tests.test_matrices.test_dual()
sympy.matrices.tests.test_matrices.test_empty_zeros()
sympy.matrices.tests.test_matrices.test_equality()
sympy.matrices.tests.test_matrices.test_errors()
sympy.matrices.tests.test_matrices.test_evalf()
sympy.matrices.tests.test_matrices.test_exp()
sympy.matrices.tests.test_matrices.test_exp_jordan_block()
sympy.matrices.tests.test_matrices.test_expand()
sympy.matrices.tests.test_matrices.test_extract()
sympy.matrices.tests.test_matrices.test_fancy_index_matrix()
sympy.matrices.tests.test_matrices.test_find_reasonable_pivot_naive_finds_guaranteed_nonzero1()
sympy.matrices.tests.test_matrices.test_find_reasonable_pivot_naive_finds_guaranteed_nonzero2()
sympy.matrices.tests.test_matrices.test_find_reasonable_pivot_naive_simplifies()
sympy.matrices.tests.test_matrices.test_free_symbols()
sympy.matrices.tests.test_matrices.test_from_ndarray()
sympy.matrices.tests.test_matrices.test_func()
sympy.matrices.tests.test_matrices.test_get_diag_blocks1()
sympy.matrices.tests.test_matrices.test_get_diag_blocks2()
sympy.matrices.tests.test_matrices.test_getattr()
sympy.matrices.tests.test_matrices.test_gramschmidt_conjugate_dot()
sympy.matrices.tests.test_matrices.test_has()
sympy.matrices.tests.test_matrices.test_hash()
sympy.matrices.tests.test_matrices.test_hermitian()
sympy.matrices.tests.test_matrices.test_hessenberg()
sympy.matrices.tests.test_matrices.test_integrate()
sympy.matrices.tests.test_matrices.test_inv_block()
sympy.matrices.tests.test_matrices.test_inv_iszerofunc()
sympy.matrices.tests.test_matrices.test_inverse()
sympy.matrices.tests.test_matrices.test_invertible_check()
sympy.matrices.tests.test_matrices.test_irregular_block()
sympy.matrices.tests.test_matrices.test_is_Identity()
sympy.matrices.tests.test_matrices.test_is_lower()
sympy.matrices.tests.test_matrices.test_is_nilpotent()
sympy.matrices.tests.test_matrices.test_is_symbolic()
sympy.matrices.tests.test_matrices.test_is_upper()
sympy.matrices.tests.test_matrices.test_is_zero()
sympy.matrices.tests.test_matrices.test_issue_10220()
sympy.matrices.tests.test_matrices.test_issue_10658()
sympy.matrices.tests.test_matrices.test_issue_10770()
sympy.matrices.tests.test_matrices.test_issue_11238()
sympy.matrices.tests.test_matrices.test_issue_11944()
sympy.matrices.tests.test_matrices.test_issue_11948()
sympy.matrices.tests.test_matrices.test_issue_14489()
sympy.matrices.tests.test_matrices.test_issue_14943()
sympy.matrices.tests.test_matrices.test_issue_15887()
sympy.matrices.tests.test_matrices.test_issue_16823()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_1()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_10()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_11()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_12()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_13()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_14()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_15()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_16()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_17()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_18()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_19()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_2()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_20()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_21()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_22()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_23()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_24()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_25()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_26()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_27()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_28()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_3()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_4()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_5()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_6()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_7()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_8()
sympy.matrices.tests.test_matrices.test_issue_17247_expression_blowup_9()
sympy.matrices.tests.test_matrices.test_issue_18531()
sympy.matrices.tests.test_matrices.test_issue_19809()
sympy.matrices.tests.test_matrices.test_issue_23276()
sympy.matrices.tests.test_matrices.test_issue_3749()
sympy.matrices.tests.test_matrices.test_issue_3950()
sympy.matrices.tests.test_matrices.test_issue_3959()
sympy.matrices.tests.test_matrices.test_issue_3979()
sympy.matrices.tests.test_matrices.test_issue_3981()
sympy.matrices.tests.test_matrices.test_issue_4564()
sympy.matrices.tests.test_matrices.test_issue_5320()
sympy.matrices.tests.test_matrices.test_issue_5321()
sympy.matrices.tests.test_matrices.test_issue_5964()
sympy.matrices.tests.test_matrices.test_issue_7201()
sympy.matrices.tests.test_matrices.test_issue_7604()
sympy.matrices.tests.test_matrices.test_issue_8207()
sympy.matrices.tests.test_matrices.test_issue_9422()
sympy.matrices.tests.test_matrices.test_issue_9457_9467_9876()
sympy.matrices.tests.test_matrices.test_iszero_substitution()
sympy.matrices.tests.test_matrices.test_jacobian2()
sympy.matrices.tests.test_matrices.test_jacobian_hessian()
sympy.matrices.tests.test_matrices.test_jacobian_metrics()
sympy.matrices.tests.test_matrices.test_jordan_form()
sympy.matrices.tests.test_matrices.test_jordan_form_complex_issue_9274()
sympy.matrices.tests.test_matrices.test_jordan_form_issue_15858()
sympy.matrices.tests.test_matrices.test_len()
sympy.matrices.tests.test_matrices.test_limit()
sympy.matrices.tests.test_matrices.test_log()
sympy.matrices.tests.test_matrices.test_matrix_inverse_mod()
sympy.matrices.tests.test_matrices.test_matrix_norm()
sympy.matrices.tests.test_matrices.test_multiplication()
sympy.matrices.tests.test_matrices.test_nonvectorJacobian()
sympy.matrices.tests.test_matrices.test_normalize_sort_diogonalization()
sympy.matrices.tests.test_matrices.test_normalized()
sympy.matrices.tests.test_matrices.test_opportunistic_simplification()
sympy.matrices.tests.test_matrices.test_partial_pivoting()
sympy.matrices.tests.test_matrices.test_pinv()
sympy.matrices.tests.test_matrices.test_pinv_rank_deficient_when_diagonalization_fails()
sympy.matrices.tests.test_matrices.test_power()
sympy.matrices.tests.test_matrices.test_print_nonzero()
sympy.matrices.tests.test_matrices.test_random()
sympy.matrices.tests.test_matrices.test_refine()
sympy.matrices.tests.test_matrices.test_replace()
sympy.matrices.tests.test_matrices.test_replace_map()
sympy.matrices.tests.test_matrices.test_reshape()
sympy.matrices.tests.test_matrices.test_rotation_matrices()
sympy.matrices.tests.test_matrices.test_row_insert()
sympy.matrices.tests.test_matrices.test_shape()
sympy.matrices.tests.test_matrices.test_simplify()
sympy.matrices.tests.test_matrices.test_simplify_immutable()
sympy.matrices.tests.test_matrices.test_slice_issue_2884()
sympy.matrices.tests.test_matrices.test_slice_issue_3401()
sympy.matrices.tests.test_matrices.test_slicing()
sympy.matrices.tests.test_matrices.test_submatrix_assignment()
sympy.matrices.tests.test_matrices.test_subs()
sympy.matrices.tests.test_matrices.test_sum()
sympy.matrices.tests.test_matrices.test_tolist()
sympy.matrices.tests.test_matrices.test_trace()
sympy.matrices.tests.test_matrices.test_transpose()
sympy.matrices.tests.test_matrices.test_vec()
sympy.matrices.tests.test_matrices.test_vech()
sympy.matrices.tests.test_matrices.test_wronskian()
sympy.matrices.tests.test_matrices.test_xreplace()
sympy.matrices.tests.test_matrices.test_zero_dimension_multiply()
sympy.matrices.tests.test_matrices.test_zeros_eye()
sympy.matrices.tests.test_matrices.test_zeros_ones_fill()
sympy.matrices.tests.test_matrices.test_zip_row_op()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_solvers.py----------------------------------------
A:sympy.matrices.tests.test_solvers.M->Matrix([[0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, _x0]])
A:sympy.matrices.tests.test_solvers.A->Matrix([[1, 2], [2, 4]])
A:sympy.matrices.tests.test_solvers.x->Matrix([[8], [7], [-2]])
A:sympy.matrices.tests.test_solvers.soln->Matrix([[1, 2], [2, 4]]).LDLsolve(b)
A:sympy.matrices.tests.test_solvers.b->Matrix([[4], [8]])
A:sympy.matrices.tests.test_solvers.(a00, a01, a11, b0, b1)->symbols('a00, a01, a11, b0, b1')
A:sympy.matrices.tests.test_solvers.B->Matrix([1, 2, 1, 1, 1, 1, 1, 2])
A:sympy.matrices.tests.test_solvers.C->Matrix([[2, 4], [3, 8]])
A:sympy.matrices.tests.test_solvers.solution->Matrix([[1, 2], [2, 4]]).pinv_solve(B)
A:sympy.matrices.tests.test_solvers.A_pinv->Matrix([[1, 2], [2, 4]]).pinv(method='ED')
A:sympy.matrices.tests.test_solvers.w1->Matrix([[1, 2], [2, 4]]).pinv_solve(B).atoms(Symbol).pop()
A:sympy.matrices.tests.test_solvers.(sol, params)->Matrix([[1, 2], [2, 4]]).gauss_jordan_solve(B)
A:sympy.matrices.tests.test_solvers.(sol, params, freevar)->Matrix([[1, 2], [2, 4]]).gauss_jordan_solve(B, freevar=True)
A:sympy.matrices.tests.test_solvers.(x0, x1, x2, _x0)->symbols('_tau0 _tau1 _tau2 tau1')
A:sympy.matrices.tests.test_solvers.sol_1->Matrix(list(linsolve(A))[0])
A:sympy.matrices.tests.test_solvers.(tau0, tau1, tau2, tau3, tau4)->symbols('tau:5')
sympy.matrices.tests.test_solvers.test_LDLsolve()
sympy.matrices.tests.test_solvers.test_LUsolve()
sympy.matrices.tests.test_solvers.test_QRsolve()
sympy.matrices.tests.test_solvers.test_cholesky_solve()
sympy.matrices.tests.test_solvers.test_diagonal_solve()
sympy.matrices.tests.test_solvers.test_errors()
sympy.matrices.tests.test_solvers.test_gauss_jordan_solve()
sympy.matrices.tests.test_solvers.test_issue_17247_expression_blowup_29()
sympy.matrices.tests.test_solvers.test_issue_17247_expression_blowup_30()
sympy.matrices.tests.test_solvers.test_issue_17247_expression_blowup_32()
sympy.matrices.tests.test_solvers.test_linsolve_underdetermined_AND_gauss_jordan_solve()
sympy.matrices.tests.test_solvers.test_lower_triangular_solve()
sympy.matrices.tests.test_solvers.test_pinv_rank_deficient()
sympy.matrices.tests.test_solvers.test_pinv_solve()
sympy.matrices.tests.test_solvers.test_solve()
sympy.matrices.tests.test_solvers.test_upper_triangular_solve()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_immutable.py----------------------------------------
A:sympy.matrices.tests.test_immutable.IM->ImmutableDenseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_immutable.ISM->ImmutableSparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_immutable.ieye->ImmutableDenseMatrix(eye(3))
A:sympy.matrices.tests.test_immutable.A->ImmutableMatrix(3, 3, range(9))
A:sympy.matrices.tests.test_immutable.B->ImmutableMatrix([[1, 2], [x, 4]])
A:sympy.matrices.tests.test_immutable.C->ImmutableMatrix([[-x, x * y], [-(x + y), y ** 2]])
A:sympy.matrices.tests.test_immutable.X->ImmutableMatrix(eye(3))
A:sympy.matrices.tests.test_immutable.Y->ImmutableMatrix([[1], [0]])
A:sympy.matrices.tests.test_immutable.(q, r)->ImmutableMatrix(eye(3)).QRdecomposition()
A:sympy.matrices.tests.test_immutable.(L, D)->ImmutableMatrix(eye(3)).LDLdecomposition()
A:sympy.matrices.tests.test_immutable.M->ImmutableMatrix([x, y])
A:sympy.matrices.tests.test_immutable.intIM->integrate(IM, x)
sympy.matrices.tests.test_immutable.test_Equality()
sympy.matrices.tests.test_immutable.test_as_immutable()
sympy.matrices.tests.test_immutable.test_creation()
sympy.matrices.tests.test_immutable.test_deterimant()
sympy.matrices.tests.test_immutable.test_function_return_types()
sympy.matrices.tests.test_immutable.test_immutability()
sympy.matrices.tests.test_immutable.test_immutable_evaluation()
sympy.matrices.tests.test_immutable.test_integrate()
sympy.matrices.tests.test_immutable.test_slicing()
sympy.matrices.tests.test_immutable.test_subs()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_decompositions.py----------------------------------------
A:sympy.matrices.tests.test_decompositions.testmat->Matrix([[1, 2, 3], [2, 4, 6], [4, 5, 6]])
A:sympy.matrices.tests.test_decompositions.(L, U, p)->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).LUdecomposition()
A:sympy.matrices.tests.test_decompositions.M->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_decompositions.mL->Matrix(((1, 0, 0), (2, 3, 0)))
A:sympy.matrices.tests.test_decompositions.mU->Matrix(((1, 2, 3), (0, 4, 5)))
A:sympy.matrices.tests.test_decompositions.(P, L, Dee, U)->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).LUdecompositionFF()
A:sympy.matrices.tests.test_decompositions.A->Matrix([[1, 0, sqrt(3)], [sqrt(2), Rational(1, 2), 2], [1, Rational(1, 4), 3]])
A:sympy.matrices.tests.test_decompositions.(U, S, V)->Matrix([[1, 2, 3], [-3, 5, 6], [4, -8, 9]]).singular_value_decomposition()
A:sympy.matrices.tests.test_decompositions.B->Matrix([[1, 2, 10], [8, 2, 5], [3, 12, 34]])
A:sympy.matrices.tests.test_decompositions.C->Matrix([[1, sqrt(2), 2, 3], [0, 5, 3, 4], [1, 1, 4, sqrt(5)], [0, 2, 2, 3]])
A:sympy.matrices.tests.test_decompositions.D->Matrix([[1, 2, 3], [-3, 5, 6], [4, -8, 9]])
A:sympy.matrices.tests.test_decompositions.(Q, S)->Matrix([[1, 0, sqrt(3)], [sqrt(2), Rational(1, 2), 2], [1, Rational(1, 4), 3]]).QRdecomposition()
A:sympy.matrices.tests.test_decompositions.(Q, R)->Matrix([[1, 0, sqrt(3)], [sqrt(2), Rational(1, 2), 2], [1, Rational(1, 4), 3]]).QRdecomposition()
A:sympy.matrices.tests.test_decompositions.x->Symbol('x')
A:sympy.matrices.tests.test_decompositions.(lu, p)->Matrix([[1, 0], [0, 1]]).LUdecomposition_Simple(iszerofunc=goofyiszero)
A:sympy.matrices.tests.test_decompositions.(l, u, p)->Matrix([[1, 0], [0, 1]]).LUdecomposition(iszerofunc=goofyiszero)
A:sympy.matrices.tests.test_decompositions.(L, D)->Matrix([[1, 0, sqrt(3)], [sqrt(2), Rational(1, 2), 2], [1, Rational(1, 4), 3]]).LDLdecomposition()
A:sympy.matrices.tests.test_decompositions.A_pinv->Matrix([[1, 0, sqrt(3)], [sqrt(2), Rational(1, 2), 2], [1, Rational(1, 4), 3]]).pinv(method='RD')
A:sympy.matrices.tests.test_decompositions.a->Matrix([[0, 0, 1, 2, 2, -5, 3], [-1, 5, 2, 2, 1, -7, 5], [0, 0, -2, -3, -3, 8, -5], [-1, 5, 0, -1, -2, 1, 0]])
A:sympy.matrices.tests.test_decompositions.(c, f)->Matrix([[0, 0, 1, 2, 2, -5, 3], [-1, 5, 2, 2, 1, -7, 5], [0, 0, -2, -3, -3, 8, -5], [-1, 5, 0, -1, -2, 1, 0]]).rank_decomposition()
A:sympy.matrices.tests.test_decompositions.(H, P)->Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0]]).upper_hessenberg_decomposition()
A:sympy.matrices.tests.test_decompositions.E->Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0]])
sympy.matrices.tests.test_decompositions.test_LDLdecomposition()
sympy.matrices.tests.test_decompositions.test_LUdecomp()
sympy.matrices.tests.test_decompositions.test_LUdecomposition_Simple_iszerofunc()
sympy.matrices.tests.test_decompositions.test_LUdecomposition_iszerofunc()
sympy.matrices.tests.test_decompositions.test_QR()
sympy.matrices.tests.test_decompositions.test_QR_float()
sympy.matrices.tests.test_decompositions.test_QR_non_square()
sympy.matrices.tests.test_decompositions.test_QR_trivial()
sympy.matrices.tests.test_decompositions.test_pinv_succeeds_with_rank_decomposition_method()
sympy.matrices.tests.test_decompositions.test_rank_decomposition()
sympy.matrices.tests.test_decompositions.test_singular_value_decompositionD()
sympy.matrices.tests.test_decompositions.test_upper_hessenberg_decomposition()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_sparsetools.py----------------------------------------
A:sympy.matrices.tests.test_sparsetools.a->SparseMatrix([[1, 2, 0, 0], [0, 3, 9, 0], [0, 1, 4, 0]])
A:sympy.matrices.tests.test_sparsetools.b->SparseMatrix(4, 6, [10, 20, 0, 0, 0, 0, 0, 30, 0, 40, 0, 0, 0, 0, 50, 60, 70, 0, 0, 0, 0, 0, 0, 80])
A:sympy.matrices.tests.test_sparsetools.c->SparseMatrix(4, 4, [0, 0, 0, 0, 0, 12, 0, 2, 15, 0, 12, 0, 0, 0, 0, 4])
A:sympy.matrices.tests.test_sparsetools.d->SparseMatrix(10, 10, {(1, 1): 12, (3, 5): 7, (7, 8): 12})
A:sympy.matrices.tests.test_sparsetools.e->SparseMatrix([[0, 0, 0], [1, 0, 2], [3, 0, 0]])
A:sympy.matrices.tests.test_sparsetools.f->SparseMatrix(7, 8, {(2, 3): 5, (4, 5): 12})
A:sympy.matrices.tests.test_sparsetools.m->_csrtodok(h)
A:sympy.matrices.tests.test_sparsetools.vert->Matrix([1, 2, 3])
A:sympy.matrices.tests.test_sparsetools.u2->Matrix([[1, 1], [0, 1]])
sympy.matrices.tests.test_sparsetools.test_banded()
sympy.matrices.tests.test_sparsetools.test_csrtodok()
sympy.matrices.tests.test_sparsetools.test_doktocsr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_reductions.py----------------------------------------
A:sympy.matrices.tests.test_reductions.e->eye_Reductions(3)
A:sympy.matrices.tests.test_reductions.a->ReductionsOnlyMatrix(2, 3, [x, 1, 1, sqrt(x), x, 1])
A:sympy.matrices.tests.test_reductions.zro->zeros_Reductions(3)
A:sympy.matrices.tests.test_reductions.ident->eye_Reductions(3)
A:sympy.matrices.tests.test_reductions.x->Symbol('x')
A:sympy.matrices.tests.test_reductions.a_echelon->ReductionsOnlyMatrix(2, 3, [x, 1, 1, sqrt(x), x, 1]).echelon_form()
A:sympy.matrices.tests.test_reductions.b->ReductionsOnlyMatrix(3, 3, [1, 2, 3, 0, 0, 0, 0, 0, 0])
A:sympy.matrices.tests.test_reductions.c->ReductionsOnlyMatrix(3, 3, [0, 0, 0, 1, 2, 3, 0, 0, 0])
A:sympy.matrices.tests.test_reductions.d->ReductionsOnlyMatrix(3, 3, [0, 0, 0, 0, 0, 0, 1, 2, 3])
A:sympy.matrices.tests.test_reductions.z->zeros_Reductions(3)
A:sympy.matrices.tests.test_reductions.(mat, pivot_offsets)->ReductionsOnlyMatrix(2, 3, [x, 1, 1, sqrt(x), x, 1]).rref()
A:sympy.matrices.tests.test_reductions.C->Matrix([[3, 4, -1, 1], [9, 12, -3, 3], [0, 2, 1, 3], [2, 3, 0, -2], [0, 3, 3, -5], [8, 15, 0, 6]])
A:sympy.matrices.tests.test_reductions.D->Matrix([[3, 4, -1, 1], [9, 12, -3, 3], [0, 2, 1, 3], [2, 3, 0, -2], [0, 3, 3, -5], [8, 15, 0, 6]]).elementary_row_op('n<->m', row1=2, row2=5)
A:sympy.matrices.tests.test_reductions.E->Matrix([[3, 4, -1, 1], [9, 12, -3, 3], [0, 2, 1, 3], [2, 3, 0, -2], [0, 3, 3, -5], [8, 15, 0, 6]]).elementary_row_op('n->n+km', row1=5, row2=3, k=-4)
A:sympy.matrices.tests.test_reductions.F->Matrix([[3, 4, -1, 1], [9, 12, -3, 3], [0, 2, 1, 3], [2, 3, 0, -2], [0, 3, 3, -5], [8, 15, 0, 6]]).elementary_row_op('n->kn', row=5, k=2)
A:sympy.matrices.tests.test_reductions.m->Matrix([[1, 2], [x, 1 - 1 / x]])
A:sympy.matrices.tests.test_reductions.n->Matrix(3, 3, range(1, 10))
A:sympy.matrices.tests.test_reductions.p->zeros(3)
A:sympy.matrices.tests.test_reductions.(ax, ay, bx, by, cx, cy, dx, dy, ex, ey, t0, t1)->symbols('a_x a_y b_x b_y c_x c_y d_x d_y e_x e_y t_0 t_1')
A:sympy.matrices.tests.test_reductions.M->Matrix([[ax, ay, ax * t0, ay * t0, 0], [bx, by, bx * t0, by * t0, 0], [cx, cy, cx * t0, cy * t0, 1], [dx, dy, dx * t0, dy * t0, 1], [ex, ey, 2 * ex * t1 - ex * t0, 2 * ey * t1 - ey * t0, 0]])
A:sympy.matrices.tests.test_reductions.(nu, lamb)->symbols('nu, lambda')
A:sympy.matrices.tests.test_reductions.A->Matrix([[1, 1, 1, 0], [-2, -1, 0, -1], [0, 0, -1, -1], [0, 0, 2, 1]])
A:sympy.matrices.tests.test_reductions.expected_reduced->Matrix([[1, 0, 0, 1 / (nu ** 2 * (-lamb - nu))], [0, 1, 0, 3 / (nu * (-lamb - nu))], [0, 0, 1, 3 / (-lamb - nu)], [0, 0, 0, 0]])
A:sympy.matrices.tests.test_reductions.(reduced, pivots)->Matrix([[1, 1, 1, 0], [-2, -1, 0, -1], [0, 0, -1, -1], [0, 0, 2, 1]]).rref()
sympy.matrices.tests.test_reductions.ReductionsOnlyMatrix(_MinimalMatrix,_CastableMatrix,MatrixReductions)
sympy.matrices.tests.test_reductions.eye_Reductions(n)
sympy.matrices.tests.test_reductions.test_col_op()
sympy.matrices.tests.test_reductions.test_echelon_form()
sympy.matrices.tests.test_reductions.test_is_echelon()
sympy.matrices.tests.test_reductions.test_issue_11434()
sympy.matrices.tests.test_reductions.test_issue_15872()
sympy.matrices.tests.test_reductions.test_issue_17827()
sympy.matrices.tests.test_reductions.test_rank()
sympy.matrices.tests.test_reductions.test_rank_regression_from_so()
sympy.matrices.tests.test_reductions.test_row_op()
sympy.matrices.tests.test_reductions.test_rref()
sympy.matrices.tests.test_reductions.zeros_Reductions(n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/tests/test_commonmatrix.py----------------------------------------
A:sympy.matrices.tests.test_commonmatrix.x->Symbol('x')
A:sympy.matrices.tests.test_commonmatrix.m->CalculusOnlyMatrix(2, 1, [1 / x, y])
A:sympy.matrices.tests.test_commonmatrix.m_vec->CalculusOnlyMatrix(2, 1, [1 / x, y]).vec()
A:sympy.matrices.tests.test_commonmatrix.(a, b, c, d)->symbols('a:d')
A:sympy.matrices.tests.test_commonmatrix.m1->OperationsOnlyMatrix([[Abs(x) ** 2, sqrt(x ** 2)], [sqrt(x ** 2) * Abs(y) ** 2, sqrt(y ** 2) * Abs(x) ** 2]]).refine(Q.negative(x) & Q.negative(y))
A:sympy.matrices.tests.test_commonmatrix.m2->CalculusOnlyMatrix(4, 1, [1, 2, 3, 4])
A:sympy.matrices.tests.test_commonmatrix.m3->OperationsOnlyMatrix(2, 2, [1 + S.ImaginaryUnit, 2 + 2 * S.ImaginaryUnit, 3 + 3 * S.ImaginaryUnit, 4 + 4 * S.ImaginaryUnit])
A:sympy.matrices.tests.test_commonmatrix.m4->ImmutableSparseMatrix([[a, b], [c, d]])
A:sympy.matrices.tests.test_commonmatrix.e->ShapingOnlyMatrix(3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9])
A:sympy.matrices.tests.test_commonmatrix.a->Matrix(2, 1, [1, 2])
A:sympy.matrices.tests.test_commonmatrix.b->Foo(2, 2, [1, 2, 3, 4])
A:sympy.matrices.tests.test_commonmatrix.c->Matrix([[5, 6]])
A:sympy.matrices.tests.test_commonmatrix.A->Array([[1, 2], [3, 4]])
A:sympy.matrices.tests.test_commonmatrix.B->Matrix([[1, 2], [3, 4]])
A:sympy.matrices.tests.test_commonmatrix.C->ShapingOnlyMatrix(C.rows, C.cols, C)
A:sympy.matrices.tests.test_commonmatrix.D->ShapingOnlyMatrix(D.rows, D.cols, D)
A:sympy.matrices.tests.test_commonmatrix.m0->OperationsOnlyMatrix([[Abs(x) ** 2, sqrt(x ** 2)], [sqrt(x ** 2) * Abs(y) ** 2, sqrt(y ** 2) * Abs(x) ** 2]])
A:sympy.matrices.tests.test_commonmatrix.r4->Matrix([[4, 4, 4]])
A:sympy.matrices.tests.test_commonmatrix.c4->Matrix([4, 4, 4])
A:sympy.matrices.tests.test_commonmatrix.M1->M1.subs(zip([x, y, z], [1, 2, 3])).subs(zip([x, y, z], [1, 2, 3]))
A:sympy.matrices.tests.test_commonmatrix.M2->M2.subs(zip([x], [1])).subs(zip([x], [1]))
A:sympy.matrices.tests.test_commonmatrix.M3->sympy.matrices.Matrix.zeros(0, 2)
A:sympy.matrices.tests.test_commonmatrix.M4->sympy.matrices.Matrix.zeros(0, 3)
A:sympy.matrices.tests.test_commonmatrix.ans->OperationsOnlyMatrix([[0, 1], [-I, 0]])
A:sympy.matrices.tests.test_commonmatrix.(a, b)->OperationsOnlyMatrix(2, 2, [1 + S.ImaginaryUnit, 2 + 2 * S.ImaginaryUnit, 3 + 3 * S.ImaginaryUnit, 4 + 4 * S.ImaginaryUnit]).as_real_imag()
A:sympy.matrices.tests.test_commonmatrix.M->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_commonmatrix.(F, G)->symbols('F, G', cls=Function)
A:sympy.matrices.tests.test_commonmatrix.K->OperationsOnlyMatrix(2, 2, [(G(0), {F(0): G(0)}), (G(1), {F(1): G(1)}), (G(1), {F(1): G(1)}), (G(2), {F(2): G(2)})])
A:sympy.matrices.tests.test_commonmatrix.N->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).replace(F, G, True)
A:sympy.matrices.tests.test_commonmatrix.n->Matrix([[9, 1, 9], [3, 6, 10], [8, 5, 2]])
A:sympy.matrices.tests.test_commonmatrix.f->Function('f')
A:sympy.matrices.tests.test_commonmatrix.R->Array([[1, 2], [3, 4]]).upper_triangular()
A:sympy.matrices.tests.test_commonmatrix.L->Array([[1, 2], [3, 4]]).lower_triangular(-2)
A:sympy.matrices.tests.test_commonmatrix.h->Matrix(2, 1, [1, 2]).multiply_elementwise(c)
A:sympy.matrices.tests.test_commonmatrix.d->CalculusOnlyMatrix(2, 1, [1 / x, y]).diagonal()
A:sympy.matrices.tests.test_commonmatrix.s->SparseMatrix(3, 3, {(1, 1): 1})
A:sympy.matrices.tests.test_commonmatrix.(wminus, wplus)->sympy.matrices.Matrix.wilkinson(3)
A:sympy.matrices.tests.test_commonmatrix.(x, y)->symbols('x y')
A:sympy.matrices.tests.test_commonmatrix.(rho, phi)->symbols('rho,phi')
A:sympy.matrices.tests.test_commonmatrix.X->CalculusOnlyMatrix(3, 1, [rho * cos(phi), rho * sin(phi), rho ** 2])
A:sympy.matrices.tests.test_commonmatrix.Y->CalculusOnlyMatrix(2, 1, [rho, phi])
A:sympy.matrices.tests.test_commonmatrix.J->Matrix([[cos(phi), -rho * sin(phi)], [sin(phi), rho * cos(phi)], [2 * rho, 0]])
A:sympy.matrices.tests.test_commonmatrix.y->Symbol('y')
A:sympy.matrices.tests.test_commonmatrix.(c0, c1, c2)->symbols('c0:3')
A:sympy.matrices.tests.test_commonmatrix.(x, y, z)->symbols('x, y z')
sympy.matrices.tests.test_commonmatrix.ArithmeticOnlyMatrix(_MinimalMatrix,_CastableMatrix,MatrixArithmetic)
sympy.matrices.tests.test_commonmatrix.CalculusOnlyMatrix(_MinimalMatrix,_CastableMatrix,MatrixCalculus)
sympy.matrices.tests.test_commonmatrix.OperationsOnlyMatrix(_MinimalMatrix,_CastableMatrix,MatrixOperations)
sympy.matrices.tests.test_commonmatrix.PropertiesOnlyMatrix(_MinimalMatrix,_CastableMatrix,MatrixProperties)
sympy.matrices.tests.test_commonmatrix.ShapingOnlyMatrix(_MinimalMatrix,_CastableMatrix,MatrixShaping)
sympy.matrices.tests.test_commonmatrix.SpecialOnlyMatrix(_MinimalMatrix,_CastableMatrix,MatrixSpecial)
sympy.matrices.tests.test_commonmatrix.eye_Arithmetic(n)
sympy.matrices.tests.test_commonmatrix.eye_Operations(n)
sympy.matrices.tests.test_commonmatrix.eye_Properties(n)
sympy.matrices.tests.test_commonmatrix.eye_Shaping(n)
sympy.matrices.tests.test_commonmatrix.test__MinimalMatrix()
sympy.matrices.tests.test_commonmatrix.test__eq__()
sympy.matrices.tests.test_commonmatrix.test_abs()
sympy.matrices.tests.test_commonmatrix.test_add()
sympy.matrices.tests.test_commonmatrix.test_adjoint()
sympy.matrices.tests.test_commonmatrix.test_applyfunc()
sympy.matrices.tests.test_commonmatrix.test_as_real_imag()
sympy.matrices.tests.test_commonmatrix.test_atoms()
sympy.matrices.tests.test_commonmatrix.test_col_insert()
sympy.matrices.tests.test_commonmatrix.test_col_join()
sympy.matrices.tests.test_commonmatrix.test_companion()
sympy.matrices.tests.test_commonmatrix.test_conjugate()
sympy.matrices.tests.test_commonmatrix.test_diag_make()
sympy.matrices.tests.test_commonmatrix.test_diagonal()
sympy.matrices.tests.test_commonmatrix.test_diagonal_symmetrical()
sympy.matrices.tests.test_commonmatrix.test_diff()
sympy.matrices.tests.test_commonmatrix.test_div()
sympy.matrices.tests.test_commonmatrix.test_doit()
sympy.matrices.tests.test_commonmatrix.test_evalf()
sympy.matrices.tests.test_commonmatrix.test_expand()
sympy.matrices.tests.test_commonmatrix.test_extract()
sympy.matrices.tests.test_commonmatrix.test_eye()
sympy.matrices.tests.test_commonmatrix.test_free_symbols()
sympy.matrices.tests.test_commonmatrix.test_get_diag_blocks1()
sympy.matrices.tests.test_commonmatrix.test_get_diag_blocks2()
sympy.matrices.tests.test_commonmatrix.test_has()
sympy.matrices.tests.test_commonmatrix.test_hstack()
sympy.matrices.tests.test_commonmatrix.test_integrate()
sympy.matrices.tests.test_commonmatrix.test_is_Identity()
sympy.matrices.tests.test_commonmatrix.test_is_anti_symmetric()
sympy.matrices.tests.test_commonmatrix.test_is_hermitian()
sympy.matrices.tests.test_commonmatrix.test_is_hessenberg()
sympy.matrices.tests.test_commonmatrix.test_is_lower()
sympy.matrices.tests.test_commonmatrix.test_is_square()
sympy.matrices.tests.test_commonmatrix.test_is_symbolic()
sympy.matrices.tests.test_commonmatrix.test_is_symmetric()
sympy.matrices.tests.test_commonmatrix.test_is_upper()
sympy.matrices.tests.test_commonmatrix.test_is_zero()
sympy.matrices.tests.test_commonmatrix.test_issue_10589()
sympy.matrices.tests.test_commonmatrix.test_issue_13774()
sympy.matrices.tests.test_commonmatrix.test_issue_18956()
sympy.matrices.tests.test_commonmatrix.test_jacobian2()
sympy.matrices.tests.test_commonmatrix.test_jordan_block()
sympy.matrices.tests.test_commonmatrix.test_kind()
sympy.matrices.tests.test_commonmatrix.test_limit()
sympy.matrices.tests.test_commonmatrix.test_lower_triangular()
sympy.matrices.tests.test_commonmatrix.test_matmul()
sympy.matrices.tests.test_commonmatrix.test_multiplication()
sympy.matrices.tests.test_commonmatrix.test_neg()
sympy.matrices.tests.test_commonmatrix.test_non_matmul()
sympy.matrices.tests.test_commonmatrix.test_ones()
sympy.matrices.tests.test_commonmatrix.test_orthogonalize()
sympy.matrices.tests.test_commonmatrix.test_permute()
sympy.matrices.tests.test_commonmatrix.test_power()
sympy.matrices.tests.test_commonmatrix.test_refine()
sympy.matrices.tests.test_commonmatrix.test_replace()
sympy.matrices.tests.test_commonmatrix.test_replace_map()
sympy.matrices.tests.test_commonmatrix.test_reshape()
sympy.matrices.tests.test_commonmatrix.test_rmul_pr19860()
sympy.matrices.tests.test_commonmatrix.test_rot90()
sympy.matrices.tests.test_commonmatrix.test_row_col()
sympy.matrices.tests.test_commonmatrix.test_row_col_del()
sympy.matrices.tests.test_commonmatrix.test_row_insert()
sympy.matrices.tests.test_commonmatrix.test_row_join()
sympy.matrices.tests.test_commonmatrix.test_shape()
sympy.matrices.tests.test_commonmatrix.test_simplify()
sympy.matrices.tests.test_commonmatrix.test_sub()
sympy.matrices.tests.test_commonmatrix.test_subs()
sympy.matrices.tests.test_commonmatrix.test_todod()
sympy.matrices.tests.test_commonmatrix.test_todok()
sympy.matrices.tests.test_commonmatrix.test_tolist()
sympy.matrices.tests.test_commonmatrix.test_trace()
sympy.matrices.tests.test_commonmatrix.test_upper_triangular()
sympy.matrices.tests.test_commonmatrix.test_values()
sympy.matrices.tests.test_commonmatrix.test_vec()
sympy.matrices.tests.test_commonmatrix.test_vstack()
sympy.matrices.tests.test_commonmatrix.test_wilkinson()
sympy.matrices.tests.test_commonmatrix.test_xreplace()
sympy.matrices.tests.test_commonmatrix.test_zeros()
sympy.matrices.tests.test_commonmatrix.zeros_Arithmetic(n)
sympy.matrices.tests.test_commonmatrix.zeros_Operations(n)
sympy.matrices.tests.test_commonmatrix.zeros_Properties(n)
sympy.matrices.tests.test_commonmatrix.zeros_Shaping(n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/matrices/benchmarks/bench_matrix.py----------------------------------------
A:sympy.matrices.benchmarks.bench_matrix.i3->Integer(3)
A:sympy.matrices.benchmarks.bench_matrix.M->eye(100)
sympy.matrices.benchmarks.bench_matrix.timeit_Matrix__getitem_II()
sympy.matrices.benchmarks.bench_matrix.timeit_Matrix__getitem_ii()
sympy.matrices.benchmarks.bench_matrix.timeit_Matrix__getslice()
sympy.matrices.benchmarks.bench_matrix.timeit_Matrix_zeronm()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/functions.py----------------------------------------
A:sympy.vector.functions.expr->sympify(expr)
A:sympy.vector.functions.parts->sympify(expr).separate()
A:sympy.vector.functions.system_set->set()
A:sympy.vector.functions.coord_sys->next(iter(coord_sys))
A:sympy.vector.functions.field->express(field, coord_sys, variables=True)
A:sympy.vector.functions.(i, j, k)->next(iter(coord_sys)).base_vectors()
A:sympy.vector.functions.(x, y, z)->next(iter(coord_sys)).base_scalars()
A:sympy.vector.functions.delop->Del()
A:sympy.vector.functions.dimensions->next(iter(coord_sys)).base_vectors()
A:sympy.vector.functions.scalars->next(iter(coord_sys)).base_scalars()
A:sympy.vector.functions.temp_function->integrate(field.dot(dimensions[0]), scalars[0])
A:sympy.vector.functions.partial_diff->diff(temp_function, scalars[i + 1])
A:sympy.vector.functions.scalar_fn->scalar_potential(field, coord_sys)
A:sympy.vector.functions.position1->express(point1.position_wrt(origin), coord_sys, variables=True)
A:sympy.vector.functions.position2->express(point2.position_wrt(origin), coord_sys, variables=True)
A:sympy.vector.functions.subs_dict1[scalars[i]]->x.dot(position1)
A:sympy.vector.functions.subs_dict2[scalars[i]]->x.dot(position2)
A:sympy.vector.functions.vects->system.base_vectors()
A:sympy.vector.functions.object_set->set(other_path)
A:sympy.vector.functions.index->len(from_path)
A:sympy.vector.functions.i->other_path.index(obj)
sympy.vector.directional_derivative(field,direction_vector)
sympy.vector.express(expr,system,system2=None,variables=False)
sympy.vector.functions._path(from_object,to_object)
sympy.vector.functions.directional_derivative(field,direction_vector)
sympy.vector.functions.express(expr,system,system2=None,variables=False)
sympy.vector.functions.is_conservative(field)
sympy.vector.functions.is_solenoidal(field)
sympy.vector.functions.laplacian(expr)
sympy.vector.functions.matrix_to_vector(matrix,system)
sympy.vector.functions.orthogonalize(*vlist,orthonormal=False)
sympy.vector.functions.scalar_potential(field,coord_sys)
sympy.vector.functions.scalar_potential_difference(field,coord_sys,point1,point2)
sympy.vector.is_conservative(field)
sympy.vector.is_solenoidal(field)
sympy.vector.laplacian(expr)
sympy.vector.matrix_to_vector(matrix,system)
sympy.vector.scalar_potential(field,coord_sys)
sympy.vector.scalar_potential_difference(field,coord_sys,point1,point2)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/integrals.py----------------------------------------
A:sympy.vector.integrals.coord_set->_get_coord_systems(field)
A:sympy.vector.integrals.coord_sys->next(iter(coord_set))
A:sympy.vector.integrals.base_vectors->next(iter(coord_set)).base_vectors()
A:sympy.vector.integrals.base_scalars->next(iter(coord_set)).base_scalars()
A:sympy.vector.integrals.parametricfield->parametricfield.subs(base_scalars[i], parametricregion.definition[i]).subs(base_scalars[i], parametricregion.definition[i])
A:sympy.vector.integrals.r_diff->diff(r, parameter)
A:sympy.vector.integrals.integrand->simplify(parametricfield * coeff)
A:sympy.vector.integrals.result->integrate(integrand, *l)
A:sympy.vector.integrals.(u, v)->cls._bounds_case(parametricregion.parameters, parametricregion.limits)
A:sympy.vector.integrals.r_u->diff(r, u)
A:sympy.vector.integrals.r_v->diff(r, v)
A:sympy.vector.integrals.normal_vector->simplify(r_u.cross(r_v))
A:sympy.vector.integrals.variables->cls._bounds_case(parametricregion.parameters, parametricregion.limits)
A:sympy.vector.integrals.coeff->Matrix(parametricregion.definition).jacobian(variables).det()
A:sympy.vector.integrals.V->list(limits.keys())
A:sympy.vector.integrals.lower_p->lower_p.atoms().atoms()
A:sympy.vector.integrals.upper_p->upper_p.atoms().atoms()
A:sympy.vector.integrals.regions_list->parametric_region_list(region[0])
sympy.vector.ParametricIntegral(cls,field,parametricregion)
sympy.vector.integrals.ParametricIntegral(cls,field,parametricregion)
sympy.vector.integrals.ParametricIntegral._bounds_case(cls,parameters,limits)
sympy.vector.integrals.ParametricIntegral.field(self)
sympy.vector.integrals.ParametricIntegral.parametricregion(self)
sympy.vector.integrals.vector_integrate(field,*region)
sympy.vector.vector_integrate(field,*region)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/point.py----------------------------------------
A:sympy.vector.point.name->str(name)
A:sympy.vector.point.obj->super().__new__(cls, Str(name), position, parent_point)
A:sympy.vector.point.(rootindex, path)->_path(self, other)
A:sympy.vector.point.pos_vect->self.position_wrt(coordinate_system.origin)
sympy.vector.Point(cls,name,position=Vector.zero,parent_point=None)
sympy.vector.point.Point(cls,name,position=Vector.zero,parent_point=None)
sympy.vector.point.Point._sympystr(self,printer)
sympy.vector.point.Point.express_coordinates(self,coordinate_system)
sympy.vector.point.Point.locate_new(self,name,position)
sympy.vector.point.Point.position_wrt(self,other)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/deloperator.py----------------------------------------
A:sympy.vector.deloperator.obj->super().__new__(cls)
sympy.vector.Del(cls)
sympy.vector.deloperator.Del(cls)
sympy.vector.deloperator.Del._sympystr(self,printer)
sympy.vector.deloperator.Del.cross(self,vect,doit=False)
sympy.vector.deloperator.Del.dot(self,vect,doit=False)
sympy.vector.deloperator.Del.gradient(self,scalar_field,doit=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/coordsysrect.py----------------------------------------
A:sympy.vector.coordsysrect.name->str(name)
A:sympy.vector.coordsysrect.transformation->Tuple(rotation_matrix, location)
A:sympy.vector.coordsysrect.(x1, x2, x3)->symbols('x1, x2, x3', cls=Dummy, reals=True)
A:sympy.vector.coordsysrect.rotation_matrix->rotation_matrix.as_immutable().as_immutable()
A:sympy.vector.coordsysrect.origin->Point(name + '.origin')
A:sympy.vector.coordsysrect.lambda_transformation->CoordSys3D._get_transformation_lambdas(trname)
A:sympy.vector.coordsysrect.lambda_lame->CoordSys3D._get_lame_coeff(transformation)
A:sympy.vector.coordsysrect.lambda_inverse->CoordSys3D._set_inv_trans_equations(trname)
A:sympy.vector.coordsysrect.obj->super().__new__(cls, Str(name), transformation)
A:sympy.vector.coordsysrect.vector_names->list(vector_names)
A:sympy.vector.coordsysrect.v1->Matrix([diff(equations[0], x1), diff(equations[1], x1), diff(equations[2], x1)])
A:sympy.vector.coordsysrect.v2->Matrix([diff(equations[0], x2), diff(equations[1], x2), diff(equations[2], x2)])
A:sympy.vector.coordsysrect.v3->Matrix([diff(equations[0], x3), diff(equations[1], x3), diff(equations[2], x3)])
A:sympy.vector.coordsysrect.variable_names->list(variable_names)
A:sympy.vector.coordsysrect.x1->BaseScalar(0, obj, pretty_scalars[0], latex_scalars[0])
A:sympy.vector.coordsysrect.x2->BaseScalar(1, obj, pretty_scalars[1], latex_scalars[1])
A:sympy.vector.coordsysrect.x3->BaseScalar(2, obj, pretty_scalars[2], latex_scalars[2])
A:sympy.vector.coordsysrect.obj._lame_coefficients->lambda_lame(x1, x2, x3)
A:sympy.vector.coordsysrect.equations->self._transformation(x1, x2, x3)
A:sympy.vector.coordsysrect.(x, y, z)->symbols('x, y, z', cls=Dummy)
A:sympy.vector.coordsysrect.(rootindex, path)->_path(self, other)
A:sympy.vector.coordsysrect.result->eye(3)
A:sympy.vector.coordsysrect.origin_coords->tuple(self.position_wrt(other).to_matrix(other))
A:sympy.vector.coordsysrect.final_matrix->Matrix(eye(3))
A:sympy.vector.coordsysrect.orienter->QuaternionOrienter(q0, q1, q2, q3)
sympy.vector.CoordSys3D(self,name,location=None,rotation_matrix=None,parent=None,vector_names=None,variable_names=None,latex_vects=None,pretty_vects=None,latex_scalars=None,pretty_scalars=None,transformation=None)
sympy.vector.coordsysrect.CoordSys3D(self,name,location=None,rotation_matrix=None,parent=None,vector_names=None,variable_names=None,latex_vects=None,pretty_vects=None,latex_scalars=None,pretty_scalars=None,transformation=None)
sympy.vector.coordsysrect.CoordSys3D.__iter__(self)
sympy.vector.coordsysrect.CoordSys3D._calculate_inv_trans_equations(self)
sympy.vector.coordsysrect.CoordSys3D._calculate_lame_coeff(equations)
sympy.vector.coordsysrect.CoordSys3D._check_orthogonality(equations)
sympy.vector.coordsysrect.CoordSys3D._compose_rotation_and_translation(rot,translation,parent)
sympy.vector.coordsysrect.CoordSys3D._get_lame_coeff(curv_coord_name)
sympy.vector.coordsysrect.CoordSys3D._get_transformation_lambdas(curv_coord_name)
sympy.vector.coordsysrect.CoordSys3D._inverse_rotation_matrix(self)
sympy.vector.coordsysrect.CoordSys3D._rotation_trans_equations(cls,matrix,equations)
sympy.vector.coordsysrect.CoordSys3D._set_inv_trans_equations(curv_coord_name)
sympy.vector.coordsysrect.CoordSys3D._sympystr(self,printer)
sympy.vector.coordsysrect.CoordSys3D.base_scalars(self)
sympy.vector.coordsysrect.CoordSys3D.base_vectors(self)
sympy.vector.coordsysrect.CoordSys3D.create_new(self,name,transformation,variable_names=None,vector_names=None)
sympy.vector.coordsysrect.CoordSys3D.lame_coefficients(self)
sympy.vector.coordsysrect.CoordSys3D.locate_new(self,name,position,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSys3D.orient_new(self,name,orienters,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSys3D.orient_new_axis(self,name,angle,axis,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSys3D.orient_new_body(self,name,angle1,angle2,angle3,rotation_order,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion(self,name,q0,q1,q2,q3,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSys3D.orient_new_space(self,name,angle1,angle2,angle3,rotation_order,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSys3D.origin(self)
sympy.vector.coordsysrect.CoordSys3D.position_wrt(self,other)
sympy.vector.coordsysrect.CoordSys3D.rotation_matrix(self,other)
sympy.vector.coordsysrect.CoordSys3D.scalar_map(self,other)
sympy.vector.coordsysrect.CoordSys3D.transformation_from_parent(self)
sympy.vector.coordsysrect.CoordSys3D.transformation_from_parent_function(self)
sympy.vector.coordsysrect.CoordSys3D.transformation_to_parent(self)
sympy.vector.coordsysrect._check_strings(arg_name,arg)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/scalar.py----------------------------------------
A:sympy.vector.scalar.pretty_str->'x{}'.format(index)
A:sympy.vector.scalar.latex_str->'x_{}'.format(index)
A:sympy.vector.scalar.index->_sympify(index)
A:sympy.vector.scalar.system->_sympify(system)
A:sympy.vector.scalar.obj->super().__new__(cls, index, system)
sympy.vector.BaseScalar(cls,index,system,pretty_str=None,latex_str=None)
sympy.vector.scalar.BaseScalar(cls,index,system,pretty_str=None,latex_str=None)
sympy.vector.scalar.BaseScalar._eval_derivative(self,s)
sympy.vector.scalar.BaseScalar._latex(self,printer=None)
sympy.vector.scalar.BaseScalar._pretty(self,printer=None)
sympy.vector.scalar.BaseScalar._sympystr(self,printer)
sympy.vector.scalar.BaseScalar.free_symbols(self)
sympy.vector.scalar.BaseScalar.system(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/operators.py----------------------------------------
A:sympy.vector.operators.g->preorder_traversal(expr)
A:sympy.vector.operators.ret->set()
A:sympy.vector.operators.d->collections.defaultdict(lambda : S.One)
A:sympy.vector.operators.expr->sympify(expr)
A:sympy.vector.operators.obj->sympy.core.expr.Expr.__new__(cls, expr)
A:sympy.vector.operators.coord_sys->next(iter(coord_sys))
A:sympy.vector.operators.(i, j, k)->next(iter(coord_sys)).base_vectors()
A:sympy.vector.operators.(x, y, z)->next(iter(coord_sys)).base_scalars()
A:sympy.vector.operators.(h1, h2, h3)->next(iter(coord_sys)).lame_coefficients()
A:sympy.vector.operators.vectx->vect.dot(i)
A:sympy.vector.operators.vecty->vect.dot(j)
A:sympy.vector.operators.vectz->vect.dot(k)
A:sympy.vector.operators.cs->next(iter(coord_sys))
A:sympy.vector.operators.scalar->sympy.core.mul.Mul.fromiter((i for i in vect.args if not isinstance(i, (Vector, Cross, Gradient))))
A:sympy.vector.operators.s->_split_mul_args_wrt_coordsys(scalar_field)
A:sympy.vector.operators.new_expr->express(expr, base_scalar.system, variables=True)
sympy.vector.Curl(cls,expr)
sympy.vector.Divergence(cls,expr)
sympy.vector.Gradient(cls,expr)
sympy.vector.Laplacian(cls,expr)
sympy.vector.curl(vect,doit=True)
sympy.vector.divergence(vect,doit=True)
sympy.vector.gradient(scalar_field,doit=True)
sympy.vector.operators.Curl(cls,expr)
sympy.vector.operators.Curl.doit(self,**hints)
sympy.vector.operators.Divergence(cls,expr)
sympy.vector.operators.Divergence.doit(self,**hints)
sympy.vector.operators.Gradient(cls,expr)
sympy.vector.operators.Gradient.doit(self,**hints)
sympy.vector.operators.Laplacian(cls,expr)
sympy.vector.operators.Laplacian.doit(self,**hints)
sympy.vector.operators._diff_conditional(expr,base_scalar,coeff_1,coeff_2)
sympy.vector.operators._get_coord_systems(expr)
sympy.vector.operators._split_mul_args_wrt_coordsys(expr)
sympy.vector.operators.curl(vect,doit=True)
sympy.vector.operators.divergence(vect,doit=True)
sympy.vector.operators.gradient(scalar_field,doit=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/orienters.py----------------------------------------
A:sympy.vector.orienters.angle->sympify(angle)
A:sympy.vector.orienters.obj->super().__new__(cls, q0, q1, q2, q3)
A:sympy.vector.orienters.axis->axis.to_matrix(system).to_matrix(system)
A:sympy.vector.orienters.rot_order->''.join(rot_order)
A:sympy.vector.orienters.a1->int(rot_order[0])
A:sympy.vector.orienters.a2->int(rot_order[1])
A:sympy.vector.orienters.a3->int(rot_order[2])
A:sympy.vector.orienters.angle1->sympify(angle1)
A:sympy.vector.orienters.angle2->sympify(angle2)
A:sympy.vector.orienters.angle3->sympify(angle3)
A:sympy.vector.orienters.q0->sympify(q0)
A:sympy.vector.orienters.q1->sympify(q1)
A:sympy.vector.orienters.q2->sympify(q2)
A:sympy.vector.orienters.q3->sympify(q3)
A:sympy.vector.orienters.parent_orient->Matrix([[q0 ** 2 + q1 ** 2 - q2 ** 2 - q3 ** 2, 2 * (q1 * q2 - q0 * q3), 2 * (q0 * q2 + q1 * q3)], [2 * (q1 * q2 + q0 * q3), q0 ** 2 - q1 ** 2 + q2 ** 2 - q3 ** 2, 2 * (q2 * q3 - q0 * q1)], [2 * (q1 * q3 - q0 * q2), 2 * (q0 * q1 + q2 * q3), q0 ** 2 - q1 ** 2 - q2 ** 2 + q3 ** 2]])
sympy.vector.AxisOrienter(self,angle,axis)
sympy.vector.BodyOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.QuaternionOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.SpaceOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.AxisOrienter(self,angle,axis)
sympy.vector.orienters.AxisOrienter.angle(self)
sympy.vector.orienters.AxisOrienter.axis(self)
sympy.vector.orienters.AxisOrienter.rotation_matrix(self,system)
sympy.vector.orienters.BodyOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.Orienter(Basic)
sympy.vector.orienters.Orienter.rotation_matrix(self)
sympy.vector.orienters.QuaternionOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.QuaternionOrienter.q0(self)
sympy.vector.orienters.QuaternionOrienter.q1(self)
sympy.vector.orienters.QuaternionOrienter.q2(self)
sympy.vector.orienters.QuaternionOrienter.q3(self)
sympy.vector.orienters.SpaceOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.ThreeAngleOrienter(cls,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.ThreeAngleOrienter.angle1(self)
sympy.vector.orienters.ThreeAngleOrienter.angle2(self)
sympy.vector.orienters.ThreeAngleOrienter.angle3(self)
sympy.vector.orienters.ThreeAngleOrienter.rot_order(self)
sympy.vector.orienters._rot(axis,angle)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/parametricregion.py----------------------------------------
A:sympy.vector.parametricregion.bounds->Tuple(*bounds)
A:sympy.vector.parametricregion.obj->super().__new__(cls, Tuple(*definition), *bounds)
A:sympy.vector.parametricregion.t->_symbol(parameter, real=True)
A:sympy.vector.parametricregion.lower_bound->solve(definition[i] - obj.points[0].args[i], t)
A:sympy.vector.parametricregion.upper_bound->solve(definition[i] - obj.points[1].args[i], t)
A:sympy.vector.parametricregion.definition->Tuple(*definition)
A:sympy.vector.parametricregion.parameter->_symbol(parameters[i], real=True)
sympy.vector.ParametricRegion(cls,definition,*bounds)
sympy.vector.parametric_region_list(reg)
sympy.vector.parametricregion.ParametricRegion(cls,definition,*bounds)
sympy.vector.parametricregion.ParametricRegion.definition(self)
sympy.vector.parametricregion.ParametricRegion.dimensions(self)
sympy.vector.parametricregion.ParametricRegion.limits(self)
sympy.vector.parametricregion.ParametricRegion.parameters(self)
sympy.vector.parametricregion._(obj)
sympy.vector.parametricregion._(obj)
sympy.vector.parametricregion._(obj,parameter='t')
sympy.vector.parametricregion._(obj,parameter='t')
sympy.vector.parametricregion._(obj,parameter='t')
sympy.vector.parametricregion._(obj,parameters=('t','s'))
sympy.vector.parametricregion.parametric_region_list(reg)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/dyadic.py----------------------------------------
A:sympy.vector.dyadic.vect_dot->k1.args[1].dot(k2.args[0])
A:sympy.vector.dyadic.outer_product->k1.args[0].outer(k2.args[1])
A:sympy.vector.dyadic.cross_product->k.args[1].cross(other)
A:sympy.vector.dyadic.outer->k.args[0].outer(cross_product)
A:sympy.vector.dyadic.obj->sympy.vector.basisdependent.BasisDependentZero.__new__(cls)
A:sympy.vector.dyadic.items->list(self.components.items())
A:sympy.vector.dyadic.Dyadic.zero->DyadicZero()
sympy.vector.BaseDyadic(cls,vector1,vector2)
sympy.vector.Dyadic(BasisDependent)
sympy.vector.DyadicAdd(cls,*args,**options)
sympy.vector.DyadicMul(cls,*args,**options)
sympy.vector.DyadicZero(cls)
sympy.vector.dyadic.BaseDyadic(cls,vector1,vector2)
sympy.vector.dyadic.BaseDyadic._sympyrepr(self,printer)
sympy.vector.dyadic.BaseDyadic._sympystr(self,printer)
sympy.vector.dyadic.Dyadic(BasisDependent)
sympy.vector.dyadic.Dyadic.__and__(self,other)
sympy.vector.dyadic.Dyadic.__xor__(self,other)
sympy.vector.dyadic.Dyadic._div_helper(one,other)
sympy.vector.dyadic.Dyadic.components(self)
sympy.vector.dyadic.Dyadic.cross(self,other)
sympy.vector.dyadic.Dyadic.dot(self,other)
sympy.vector.dyadic.Dyadic.to_matrix(self,system,second_system=None)
sympy.vector.dyadic.DyadicAdd(cls,*args,**options)
sympy.vector.dyadic.DyadicAdd._sympystr(self,printer)
sympy.vector.dyadic.DyadicMul(cls,*args,**options)
sympy.vector.dyadic.DyadicMul.base_dyadic(self)
sympy.vector.dyadic.DyadicMul.measure_number(self)
sympy.vector.dyadic.DyadicZero(cls)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/implicitregion.py----------------------------------------
A:sympy.vector.implicitregion.variables->Tuple(*variables)
A:sympy.vector.implicitregion.coeffs(a, b, c, d, e, f)->conic_coeff(self.variables, equation)
A:sympy.vector.implicitregion.(x_reg, y_reg)->self._regular_point_ellipse(*coeffs)
A:sympy.vector.implicitregion.K->Rational(K).limit_denominator(10 ** 12)
A:sympy.vector.implicitregion.L->Rational(L).limit_denominator(10 ** 12)
A:sympy.vector.implicitregion.g->gcd(gcd(a2, b2), c2)
A:sympy.vector.implicitregion.r1->sqrt(a1 / a2)
A:sympy.vector.implicitregion.r2->sqrt(b1 / b2)
A:sympy.vector.implicitregion.r3->sqrt(c1 / c2)
A:sympy.vector.implicitregion.g1->gcd(a2, b2)
A:sympy.vector.implicitregion.g2->gcd(a2, c2)
A:sympy.vector.implicitregion.g3->gcd(b2, c2)
A:sympy.vector.implicitregion.(x, y, z)->tuple((s.subs(rep) for s in sol))
A:sympy.vector.implicitregion.solutions->diophantine(eq)
A:sympy.vector.implicitregion.p->next(iter(syms_z))
A:sympy.vector.implicitregion.p_values->Complement(S.Integers, solveset(Eq(sol_z, 0), p, S.Integers))
A:sympy.vector.implicitregion.rep[p]->next(iter(p_values))
A:sympy.vector.implicitregion.(p, q)->list(ordered(syms_z))
A:sympy.vector.implicitregion.subs_sol_z->sol_z.subs(p, i)
A:sympy.vector.implicitregion.q_values->Complement(S.Integers, solveset(Eq(subs_sol_z, 0), q, S.Integers))
A:sympy.vector.implicitregion.rep[q]->next(iter(q_values))
A:sympy.vector.implicitregion.modified_eq->expand(modified_eq)
A:sympy.vector.implicitregion.m->total_degree(terms)
A:sympy.vector.implicitregion.point->self.regular_point()
A:sympy.vector.implicitregion.singular_points->self.singular_points()
A:sympy.vector.implicitregion.spoint->tuple((s.subs(rep) for s in spoint))
A:sympy.vector.implicitregion.s->_symbol(parameter2, real=True)
A:sympy.vector.implicitregion.t->_symbol(parameter1, real=True)
A:sympy.vector.implicitregion.hn->hn.subs({self.variables[0]: r, self.variables[1]: s, self.variables[2]: t}).subs({self.variables[0]: r, self.variables[1]: s, self.variables[2]: t})
A:sympy.vector.implicitregion.hn_1->hn_1.subs({self.variables[0]: r, self.variables[1]: s, self.variables[2]: t}).subs({self.variables[0]: r, self.variables[1]: s, self.variables[2]: t})
A:sympy.vector.implicitregion.r->_symbol('r', real=True)
A:sympy.vector.implicitregion.equation->expand(equation)
A:sympy.vector.implicitregion.a->expand(equation).coeff(x ** 2)
A:sympy.vector.implicitregion.b->expand(equation).coeff(x * y)
A:sympy.vector.implicitregion.c->expand(equation).coeff(y ** 2)
A:sympy.vector.implicitregion.d->expand(equation).coeff(x, 1).coeff(y, 0)
A:sympy.vector.implicitregion.e->expand(equation).coeff(y, 1).coeff(x, 0)
A:sympy.vector.implicitregion.f->expand(equation).coeff(x, 0).coeff(y, 0)
sympy.vector.ImplicitRegion(cls,variables,equation)
sympy.vector.implicitregion.ImplicitRegion(cls,variables,equation)
sympy.vector.implicitregion.ImplicitRegion._regular_point_ellipse(self,a,b,c,d,e,f)
sympy.vector.implicitregion.ImplicitRegion._regular_point_parabola(self,a,b,c,d,e,f)
sympy.vector.implicitregion.ImplicitRegion.degree(self)
sympy.vector.implicitregion.ImplicitRegion.equation(self)
sympy.vector.implicitregion.ImplicitRegion.multiplicity(self,point)
sympy.vector.implicitregion.ImplicitRegion.rational_parametrization(self,parameters=('t','s'),reg_point=None)
sympy.vector.implicitregion.ImplicitRegion.regular_point(self)
sympy.vector.implicitregion.ImplicitRegion.singular_points(self)
sympy.vector.implicitregion.ImplicitRegion.variables(self)
sympy.vector.implicitregion.conic_coeff(variables,equation)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/vector.py----------------------------------------
A:sympy.vector.vector.vect_dot->k.args[0].dot(self)
A:sympy.vector.vector.cross_product->self.cross(k.args[0])
A:sympy.vector.vector.outer->self.cross(k.args[0]).outer(k.args[1])
A:sympy.vector.vector.base_vec->next(iter(_get_coord_systems(self))).base_vectors()
A:sympy.vector.vector.pretty_str->str(pretty_str)
A:sympy.vector.vector.latex_str->str(latex_str)
A:sympy.vector.vector.obj->sympy.core.expr.Expr.__new__(cls, expr1, expr2)
A:sympy.vector.vector.obj._assumptions->StdFactKB(assumptions)
A:sympy.vector.vector.items->list(self.separate().items())
A:sympy.vector.vector.base_vects->system.base_vectors()
A:sympy.vector.vector.expr1->sympify(expr1)
A:sympy.vector.vector.expr2->sympify(expr2)
A:sympy.vector.vector.(expr1, expr2)->sorted([expr1, expr2], key=default_sort_key)
A:sympy.vector.vector.n3->{0, 1, 2}.difference({n1, n2}).pop()
A:sympy.vector.vector.v->express(vect2, vect1._sys)
A:sympy.vector.vector.(v1, m1)->next(iter(vect1.components.items()))
A:sympy.vector.vector.(v2, m2)->next(iter(vect2.components.items()))
A:sympy.vector.vector.Vector.zero->VectorZero()
sympy.vector.BaseVector(cls,index,system,pretty_str=None,latex_str=None)
sympy.vector.Cross(cls,expr1,expr2)
sympy.vector.Dot(cls,expr1,expr2)
sympy.vector.Vector(BasisDependent)
sympy.vector.VectorAdd(cls,*args,**options)
sympy.vector.VectorMul(cls,*args,**options)
sympy.vector.VectorZero(cls)
sympy.vector.cross(vect1,vect2)
sympy.vector.dot(vect1,vect2)
sympy.vector.vector.BaseVector(cls,index,system,pretty_str=None,latex_str=None)
sympy.vector.vector.BaseVector._sympyrepr(self,printer)
sympy.vector.vector.BaseVector._sympystr(self,printer)
sympy.vector.vector.BaseVector.free_symbols(self)
sympy.vector.vector.BaseVector.system(self)
sympy.vector.vector.Cross(cls,expr1,expr2)
sympy.vector.vector.Cross.doit(self,**hints)
sympy.vector.vector.Dot(cls,expr1,expr2)
sympy.vector.vector.Dot.doit(self,**hints)
sympy.vector.vector.Vector(BasisDependent)
sympy.vector.vector.Vector.__and__(self,other)
sympy.vector.vector.Vector.__or__(self,other)
sympy.vector.vector.Vector.__xor__(self,other)
sympy.vector.vector.Vector._div_helper(one,other)
sympy.vector.vector.Vector._projections(self)
sympy.vector.vector.Vector.components(self)
sympy.vector.vector.Vector.cross(self,other)
sympy.vector.vector.Vector.dot(self,other)
sympy.vector.vector.Vector.magnitude(self)
sympy.vector.vector.Vector.normalize(self)
sympy.vector.vector.Vector.outer(self,other)
sympy.vector.vector.Vector.projection(self,other,scalar=False)
sympy.vector.vector.Vector.separate(self)
sympy.vector.vector.Vector.to_matrix(self,system)
sympy.vector.vector.VectorAdd(cls,*args,**options)
sympy.vector.vector.VectorAdd._sympystr(self,printer)
sympy.vector.vector.VectorMul(cls,*args,**options)
sympy.vector.vector.VectorMul.base_vector(self)
sympy.vector.vector.VectorMul.measure_number(self)
sympy.vector.vector.VectorZero(cls)
sympy.vector.vector.cross(vect1,vect2)
sympy.vector.vector.dot(vect1,vect2)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/basisdependent.py----------------------------------------
A:sympy.vector.basisdependent.arg->cls._add_func(*arg.args)
A:sympy.vector.basisdependent.temp->list(components.keys())
A:sympy.vector.basisdependent.obj->super().__new__(cls)
A:sympy.vector.basisdependent.obj._assumptions->StdFactKB(assumptions)
A:sympy.vector.basisdependent.measure_str->printer._print(self._measure_number)
A:sympy.vector.basisdependent.obj._hash->(S.Zero, cls).__hash__()
sympy.vector.basisdependent.BasisDependent(Expr)
sympy.vector.basisdependent.BasisDependent.__add__(self,other)
sympy.vector.basisdependent.BasisDependent.__mul__(self,other)
sympy.vector.basisdependent.BasisDependent.__neg__(self)
sympy.vector.basisdependent.BasisDependent.__radd__(self,other)
sympy.vector.basisdependent.BasisDependent.__rmul__(self,other)
sympy.vector.basisdependent.BasisDependent.__rsub__(self,other)
sympy.vector.basisdependent.BasisDependent.__rtruediv__(self,other)
sympy.vector.basisdependent.BasisDependent.__sub__(self,other)
sympy.vector.basisdependent.BasisDependent.__truediv__(self,other)
sympy.vector.basisdependent.BasisDependent._eval_Integral(self,*symbols,**assumptions)
sympy.vector.basisdependent.BasisDependent._eval_derivative(self,wrt)
sympy.vector.basisdependent.BasisDependent._eval_simplify(self,**kwargs)
sympy.vector.basisdependent.BasisDependent._eval_trigsimp(self,**opts)
sympy.vector.basisdependent.BasisDependent.as_coeff_Mul(self,rational=False)
sympy.vector.basisdependent.BasisDependent.as_coeff_add(self,*deps)
sympy.vector.basisdependent.BasisDependent.as_numer_denom(self)
sympy.vector.basisdependent.BasisDependent.diff(self,*args,**kwargs)
sympy.vector.basisdependent.BasisDependent.doit(self,**hints)
sympy.vector.basisdependent.BasisDependent.evalf(self,n=15,subs=None,maxn=100,chop=False,strict=False,quad=None,verbose=False)
sympy.vector.basisdependent.BasisDependent.factor(self,*args,**kwargs)
sympy.vector.basisdependent.BasisDependent.simplify(self,**kwargs)
sympy.vector.basisdependent.BasisDependent.trigsimp(self,**opts)
sympy.vector.basisdependent.BasisDependentAdd(cls,*args,**options)
sympy.vector.basisdependent.BasisDependentMul(cls,*args,**options)
sympy.vector.basisdependent.BasisDependentMul._sympystr(self,printer)
sympy.vector.basisdependent.BasisDependentZero(cls)
sympy.vector.basisdependent.BasisDependentZero.__add__(self,other)
sympy.vector.basisdependent.BasisDependentZero.__eq__(self,other)
sympy.vector.basisdependent.BasisDependentZero.__hash__(self)
sympy.vector.basisdependent.BasisDependentZero.__neg__(self)
sympy.vector.basisdependent.BasisDependentZero.__radd__(self,other)
sympy.vector.basisdependent.BasisDependentZero.__rsub__(self,other)
sympy.vector.basisdependent.BasisDependentZero.__sub__(self,other)
sympy.vector.basisdependent.BasisDependentZero._sympystr(self,printer)
sympy.vector.basisdependent.BasisDependentZero.normalize(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_operators.py----------------------------------------
A:sympy.vector.tests.test_operators.R->CoordSys3D('R')
A:sympy.vector.tests.test_operators.Rc->CoordSys3D('R', transformation='cylindrical')
sympy.vector.tests.test_operators.test_Curl()
sympy.vector.tests.test_operators.test_Divergence()
sympy.vector.tests.test_operators.test_Gradient()
sympy.vector.tests.test_operators.test_Laplacian()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_dyadic.py----------------------------------------
A:sympy.vector.tests.test_dyadic.A->CoordSys3D('A')
A:sympy.vector.tests.test_dyadic.(a, b)->symbols('a, b')
A:sympy.vector.tests.test_dyadic.q->symbols('q')
A:sympy.vector.tests.test_dyadic.B->CoordSys3D('A').orient_new_axis('B', q, A.k)
A:sympy.vector.tests.test_dyadic.(a, b, c, d, e, f)->symbols('a, b, c, d, e, f')
A:sympy.vector.tests.test_dyadic.d4->v1.outer(v2)
A:sympy.vector.tests.test_dyadic.d5->v1.outer(v1)
A:sympy.vector.tests.test_dyadic.C->CoordSys3D('A').orient_new_axis('C', q, A.i)
A:sympy.vector.tests.test_dyadic.(x, y, z, k, n, m, w, f, s, A)->symbols('x, y, z, k, n, m, w, f, s, A')
A:sympy.vector.tests.test_dyadic.N->CoordSys3D('N')
A:sympy.vector.tests.test_dyadic.test1->test1.simplify().simplify()
A:sympy.vector.tests.test_dyadic.test2->test2.simplify().simplify()
A:sympy.vector.tests.test_dyadic.test3->test3.simplify().simplify()
A:sympy.vector.tests.test_dyadic.test4->test4.simplify().simplify()
sympy.vector.tests.test_dyadic.test_dyadic()
sympy.vector.tests.test_dyadic.test_dyadic_simplify()
sympy.vector.tests.test_dyadic.test_dyadic_srepr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_integrals.py----------------------------------------
A:sympy.vector.tests.test_integrals.C->CoordSys3D('C')
A:sympy.vector.tests.test_integrals.halfcircle->ParametricRegion((4 * cos(theta), 4 * sin(theta)), (theta, -pi / 2, pi / 2))
A:sympy.vector.tests.test_integrals.curve->Curve((sin(t), cos(t)), (t, 0, 2))
A:sympy.vector.tests.test_integrals.line->ParametricRegion((4 * t - 1, 2 - 2 * t, t), (t, 0, 1))
A:sympy.vector.tests.test_integrals.helix->ParametricRegion((cos(t), sin(t), 3 * t), (t, 0, 4 * pi))
A:sympy.vector.tests.test_integrals.semisphere->ParametricRegion((2 * sin(phi) * cos(theta), 2 * sin(phi) * sin(theta), 2 * cos(phi)), (theta, 0, 2 * pi), (phi, 0, pi / 2))
A:sympy.vector.tests.test_integrals.cylinder->ParametricRegion((sqrt(3) * cos(theta), sqrt(3) * sin(theta), z), (z, 0, 6), (theta, 0, 2 * pi))
A:sympy.vector.tests.test_integrals.cone->ParametricRegion((v * cos(u), v * sin(u), v), (u, 0, 2 * pi), (v, 0, 1))
A:sympy.vector.tests.test_integrals.triangle1->ParametricRegion((x, y), (x, 0, 2), (y, 0, 10 - 5 * x))
A:sympy.vector.tests.test_integrals.triangle2->ParametricRegion((x, y), (y, 0, 10 - 5 * x), (x, 0, 2))
A:sympy.vector.tests.test_integrals.cube->ParametricRegion((x, y, z), (x, 0, 1), (y, 0, 1), (z, 0, 1))
A:sympy.vector.tests.test_integrals.solidsphere1->ParametricRegion((r * sin(phi) * cos(theta), r * sin(phi) * sin(theta), r * cos(phi)), (r, 0, 2), (theta, 0, 2 * pi), (phi, 0, pi))
A:sympy.vector.tests.test_integrals.solidsphere2->ParametricRegion((r * sin(phi) * cos(theta), r * sin(phi) * sin(theta), r * cos(phi)), (r, 0, 2), (phi, 0, pi), (theta, 0, 2 * pi))
A:sympy.vector.tests.test_integrals.region_under_plane1->ParametricRegion((x, y, z), (x, 0, 3), (y, 0, -2 * x / 3 + 2), (z, 0, 6 - 2 * x - 3 * y))
A:sympy.vector.tests.test_integrals.region_under_plane2->ParametricRegion((x, y, z), (x, 0, 3), (z, 0, 6 - 2 * x - 3 * y), (y, 0, -2 * x / 3 + 2))
A:sympy.vector.tests.test_integrals.halfdisc->ParametricRegion((r * cos(theta), r * sin(theta)), (r, -2, 2), (theta, 0, pi))
A:sympy.vector.tests.test_integrals.s1->Segment(Point(0, 0), Point(0, 1))
A:sympy.vector.tests.test_integrals.s2->Segment(Point(4, 3, 9), Point(1, 1, 7))
A:sympy.vector.tests.test_integrals.c1->Circle(Point(2, 3), 6)
A:sympy.vector.tests.test_integrals.c2->Circle(Point(0, 0), Point(1, 1), Point(1, 0))
A:sympy.vector.tests.test_integrals.triangle->Polygon((0, 0), (1, 0), (1, 1))
A:sympy.vector.tests.test_integrals.poly->Polygon(p1, p2, p3, p4)
A:sympy.vector.tests.test_integrals.point->Point(2, 3)
A:sympy.vector.tests.test_integrals.c3->ImplicitRegion((x, y), x ** 2 + y ** 2 - 4)
A:sympy.vector.tests.test_integrals.c4->ImplicitRegion((x, y), (x - 3) ** 2 + (y - 4) ** 2 - 9)
A:sympy.vector.tests.test_integrals.pl->Plane(Point(1, 1, 1), Point(2, 3, 4), Point(2, 2, 2))
sympy.vector.tests.test_integrals.test_parametric_lineintegrals()
sympy.vector.tests.test_integrals.test_parametric_surfaceintegrals()
sympy.vector.tests.test_integrals.test_parametric_volumeintegrals()
sympy.vector.tests.test_integrals.test_vector_integrate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_printing.py----------------------------------------
A:sympy.vector.tests.test_printing.N->CoordSys3D('N')
A:sympy.vector.tests.test_printing.C->CoordSys3D('N').orient_new_axis('C', a, N.k)
A:sympy.vector.tests.test_printing.f->Function('f')
A:sympy.vector.tests.test_printing.delop->Del()
A:sympy.vector.tests.test_printing.CC_->CoordSys3D('C')
A:sympy.vector.tests.test_printing.t->symbols('t')
A:sympy.vector.tests.test_printing.ten->UnevaluatedExpr(10)
A:sympy.vector.tests.test_printing.vecE->vecE.doit().doit()
A:sympy.vector.tests.test_printing.A->CoordSys3D('A', vector_names=['x', 'y', 'z'], variable_names=['i', 'j', 'k'])
sympy.vector.tests.test_pretty(expr)
sympy.vector.tests.test_printing.pretty(expr)
sympy.vector.tests.test_printing.test_custom_names()
sympy.vector.tests.test_printing.test_issue_23058()
sympy.vector.tests.test_printing.test_latex_printing()
sympy.vector.tests.test_printing.test_pretty_print_unicode_v()
sympy.vector.tests.test_printing.test_pretty_printing_ascii()
sympy.vector.tests.test_printing.test_str_printing()
sympy.vector.tests.test_printing.upretty(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_parametricregion.py----------------------------------------
A:sympy.vector.tests.test_parametricregion.C->CoordSys3D('C')
A:sympy.vector.tests.test_parametricregion.point->Point(-5, 12)
A:sympy.vector.tests.test_parametricregion.line_xy->ParametricRegion((y, y), (y, 1, 5))
A:sympy.vector.tests.test_parametricregion.line_yz->ParametricRegion((x, t, t), x, (t, 1, 2))
A:sympy.vector.tests.test_parametricregion.p1->Parabola(Point(0, 0), Line(Point(5, 8), Point(7, 8)))
A:sympy.vector.tests.test_parametricregion.p2->ParametricRegion((t, t ** 3), t)
A:sympy.vector.tests.test_parametricregion.circle->ParametricRegion((r * cos(theta), r * sin(theta)), r, (theta, 0, 2 * pi))
A:sympy.vector.tests.test_parametricregion.halfdisc->ParametricRegion((r * cos(theta), r * sin(theta)), (r, -2, 2), (theta, 0, pi))
A:sympy.vector.tests.test_parametricregion.ellipse->ParametricRegion((a * cos(t), b * sin(t)), (t, 0, 8))
A:sympy.vector.tests.test_parametricregion.cylinder->ParametricRegion((r * cos(theta), r * sin(theta), z), (r, 0, 1), (theta, 0, 2 * pi), (z, 0, 4))
A:sympy.vector.tests.test_parametricregion.sphere->ParametricRegion((r * sin(phi) * cos(theta), r * sin(phi) * sin(theta), r * cos(phi)), r, (theta, 0, 2 * pi), (phi, 0, pi))
A:sympy.vector.tests.test_parametricregion.e->Ellipse(Point(2, 8), 2, 6)
A:sympy.vector.tests.test_parametricregion.c->Curve((t, t ** 3), (t, 5, 3))
A:sympy.vector.tests.test_parametricregion.s->Segment(Point(2, 11, -6), Point(0, 2, 5))
A:sympy.vector.tests.test_parametricregion.s1->Segment(Point(0, 0), (1, 0))
A:sympy.vector.tests.test_parametricregion.s2->Segment(Point(1, 2, 3), Point(1, 2, 5))
A:sympy.vector.tests.test_parametricregion.s3->Segment(Point(12, 56), Point(12, 56))
A:sympy.vector.tests.test_parametricregion.poly->Polygon((1, 3), (-3, 8), (2, 4))
sympy.vector.tests.test_parametricregion.test_ParametricRegion()
sympy.vector.tests.test_parametricregion.test_parametric_region_list()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_vector.py----------------------------------------
A:sympy.vector.tests.test_vector.C->CoordSys3D('C')
A:sympy.vector.tests.test_vector.(i, j, k)->CoordSys3D('C').base_vectors()
A:sympy.vector.tests.test_vector.(a, b, c)->symbols('a b c')
A:sympy.vector.tests.test_vector.(A, s, k, m)->symbols('A, s, k, m')
A:sympy.vector.tests.test_vector.test1->simplify(test1)
A:sympy.vector.tests.test_vector.test2->simplify(test2)
A:sympy.vector.tests.test_vector.test3->simplify(test3)
A:sympy.vector.tests.test_vector.test4->simplify(test4)
A:sympy.vector.tests.test_vector.f->Function('f')
sympy.vector.tests.test_vector.test_cross()
sympy.vector.tests.test_vector.test_dot()
sympy.vector.tests.test_vector.test_projection()
sympy.vector.tests.test_vector.test_scalar()
sympy.vector.tests.test_vector.test_srepr()
sympy.vector.tests.test_vector.test_vector()
sympy.vector.tests.test_vector.test_vector_args()
sympy.vector.tests.test_vector.test_vector_cross()
sympy.vector.tests.test_vector.test_vector_diff_integrate()
sympy.vector.tests.test_vector.test_vector_dot()
sympy.vector.tests.test_vector.test_vector_magnitude_normalize()
sympy.vector.tests.test_vector.test_vector_simplify()
sympy.vector.tests.test_vector.test_vector_sympy()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_implicitregion.py----------------------------------------
A:sympy.vector.tests.test_implicitregion.ellipse->ImplicitRegion((x, y), x ** 2 / 4 + y ** 2 / 16 - 1)
A:sympy.vector.tests.test_implicitregion.r->ImplicitRegion((x, y, z), Eq(x ** 4 + y ** 2 - x * y, 6))
A:sympy.vector.tests.test_implicitregion.r1->ImplicitRegion((x, y), y ** 2 - x ** 3 + x)
A:sympy.vector.tests.test_implicitregion.c1->ImplicitRegion((x, y), x ** 2 + y ** 2 - 4)
A:sympy.vector.tests.test_implicitregion.c2->ImplicitRegion((x, y), (x - S(5) / 2) ** 2 + y ** 2 - (S(1) / 4) ** 2)
A:sympy.vector.tests.test_implicitregion.c3->ImplicitRegion((x, y), (y - 5) ** 2 - 16 * (x - 5))
A:sympy.vector.tests.test_implicitregion.r2->ImplicitRegion((x, y), y ** 2 - x ** 3 - x ** 2 + 1)
A:sympy.vector.tests.test_implicitregion.r3->ImplicitRegion((x, y, z), z ** 2 - x ** 2 - y ** 2)
A:sympy.vector.tests.test_implicitregion.r4->ImplicitRegion((x, y), x ** 2 + y ** 2 - 2 * x)
A:sympy.vector.tests.test_implicitregion.p->ImplicitRegion((x,), x - 2)
A:sympy.vector.tests.test_implicitregion.line->ImplicitRegion((x, y), Eq(y, 3 * x + 2))
A:sympy.vector.tests.test_implicitregion.circle1->ImplicitRegion((x, y), (x - 2) ** 2 + (y + 3) ** 2 - 4)
A:sympy.vector.tests.test_implicitregion.circle2->ImplicitRegion((x, y), (x - S.Half) ** 2 + y ** 2 - (S(1) / 2) ** 2)
A:sympy.vector.tests.test_implicitregion.circle3->ImplicitRegion((x, y), Eq(x ** 2 + y ** 2, 2 * x))
A:sympy.vector.tests.test_implicitregion.parabola->ImplicitRegion((x, y), (y - 3) ** 2 - 4 * (x + 6))
A:sympy.vector.tests.test_implicitregion.rect_hyperbola->ImplicitRegion((x, y), x * y - 1)
A:sympy.vector.tests.test_implicitregion.cubic_curve->ImplicitRegion((x, y), x ** 3 + x ** 2 - y ** 2)
A:sympy.vector.tests.test_implicitregion.cuspidal->ImplicitRegion((x, y), x ** 3 - y ** 2)
A:sympy.vector.tests.test_implicitregion.I->ImplicitRegion((x, y), x ** 3 + x ** 2 - y ** 2)
A:sympy.vector.tests.test_implicitregion.sphere->ImplicitRegion((x, y, z), Eq(x ** 2 + y ** 2 + z ** 2, 2 * x))
A:sympy.vector.tests.test_implicitregion.conic->ImplicitRegion((x, y), Eq(x ** 2 + 4 * x * y + 3 * y ** 2 + x - y + 10, 0))
sympy.vector.tests.test_implicitregion.test_ImplicitRegion()
sympy.vector.tests.test_implicitregion.test_rational_parametrization()
sympy.vector.tests.test_implicitregion.test_regular_point()
sympy.vector.tests.test_implicitregion.test_singular_points_and_multiplicty()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_field_functions.py----------------------------------------
A:sympy.vector.tests.test_field_functions.C->CoordSys3D('C')
A:sympy.vector.tests.test_field_functions.(i, j, k)->CoordSys3D('C').base_vectors()
A:sympy.vector.tests.test_field_functions.(x, y, z)->CoordSys3D('C').base_scalars()
A:sympy.vector.tests.test_field_functions.delop->Del()
A:sympy.vector.tests.test_field_functions.(a, b, c, q)->symbols('a b c q')
A:sympy.vector.tests.test_field_functions.A->CoordSys3D('A', transformation='spherical', variable_names=['r', 'theta', 'phi'])
A:sympy.vector.tests.test_field_functions.B->CoordSys3D('B', transformation='cylindrical', variable_names=['r', 'theta', 'z'])
A:sympy.vector.tests.test_field_functions.lhs->(delop ^ (u ^ v)).doit()
A:sympy.vector.tests.test_field_functions.rhs->(u * (delop & v) - v * (delop & u) + (v & delop)(u) - (u & delop)(v)).doit()
A:sympy.vector.tests.test_field_functions.P->CoordSys3D('C').orient_new_axis('P', q, C.k)
A:sympy.vector.tests.test_field_functions.grad_field->gradient(scalar_field)
A:sympy.vector.tests.test_field_functions.curl_field->curl(vector_field)
A:sympy.vector.tests.test_field_functions.D->CoordSys3D('D', 'spherical', variable_names=['r', 'theta', 'phi'], vector_names=['e_r', 'e_theta', 'e_phi'])
A:sympy.vector.tests.test_field_functions.(r, theta, phi)->CoordSys3D('D', 'spherical', variable_names=['r', 'theta', 'phi'], vector_names=['e_r', 'e_theta', 'e_phi']).base_scalars()
A:sympy.vector.tests.test_field_functions.(e_r, e_theta, e_phi)->CoordSys3D('D', 'spherical', variable_names=['r', 'theta', 'phi'], vector_names=['e_r', 'e_theta', 'e_phi']).base_vectors()
A:sympy.vector.tests.test_field_functions.point1->CoordSys3D('C').origin.locate_new('P1', 1 * i + 2 * j + 3 * k)
A:sympy.vector.tests.test_field_functions.point2->CoordSys3D('C').origin.locate_new('P2', 4 * i + 5 * j + 6 * k)
A:sympy.vector.tests.test_field_functions.genericpointC->CoordSys3D('C').origin.locate_new('RP', x * i + y * j + z * k)
A:sympy.vector.tests.test_field_functions.genericpointP->CoordSys3D('C').orient_new_axis('P', q, C.k).origin.locate_new('PP', P.x * P.i + P.y * P.j + P.z * P.k)
A:sympy.vector.tests.test_field_functions.a->CoordSys3D('a')
A:sympy.vector.tests.test_field_functions.b->CoordSys3D('b')
A:sympy.vector.tests.test_field_functions.c->CoordSys3D('c')
sympy.vector.tests.test_field_functions.test_conservative()
sympy.vector.tests.test_field_functions.test_del_operator()
sympy.vector.tests.test_field_functions.test_differential_operators_curvilinear_system()
sympy.vector.tests.test_field_functions.test_directional_derivative()
sympy.vector.tests.test_field_functions.test_mixed_coordinates()
sympy.vector.tests.test_field_functions.test_product_rules()
sympy.vector.tests.test_field_functions.test_scalar_potential()
sympy.vector.tests.test_field_functions.test_scalar_potential_difference()
sympy.vector.tests.test_field_functions.test_solenoidal()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_functions.py----------------------------------------
A:sympy.vector.tests.test_functions.N->CoordSys3D('N')
A:sympy.vector.tests.test_functions.(q1, q2, q3, q4, q5)->symbols('q1 q2 q3 q4 q5')
A:sympy.vector.tests.test_functions.A->CoordSys3D('N').orient_new_axis('A', q1, N.k)
A:sympy.vector.tests.test_functions.B->CoordSys3D('N').orient_new_axis('A', q1, N.k).orient_new_axis('B', q2, A.i)
A:sympy.vector.tests.test_functions.C->CoordSys3D('C')
A:sympy.vector.tests.test_functions.m->Matrix([[q1], [q2], [q3]])
A:sympy.vector.tests.test_functions.(a, b)->symbols('a b', integer=True)
A:sympy.vector.tests.test_functions.(i, j, k)->CoordSys3D('C').base_vectors()
sympy.vector.tests.test_functions.test_express()
sympy.vector.tests.test_functions.test_matrix_to_vector()
sympy.vector.tests.test_functions.test_orthogonalize()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/vector/tests/test_coordsysrect.py----------------------------------------
A:sympy.vector.tests.test_coordsysrect.(x, y, z)->symbols('x y z')
A:sympy.vector.tests.test_coordsysrect.(a, b, c, q)->symbols('a b c q')
A:sympy.vector.tests.test_coordsysrect.(q1, q2, q3, q4)->symbols('q1 q2 q3 q4')
A:sympy.vector.tests.test_coordsysrect.A->CoordSys3D('A')
A:sympy.vector.tests.test_coordsysrect.A1->CoordSys3D('A')
A:sympy.vector.tests.test_coordsysrect.B->CoordSys3D('A').orient_new_axis('B', q2, A.i)
A:sympy.vector.tests.test_coordsysrect.axis_orienter->AxisOrienter(a, A.k)
A:sympy.vector.tests.test_coordsysrect.body_orienter->BodyOrienter(a, b, c, '123')
A:sympy.vector.tests.test_coordsysrect.space_orienter->SpaceOrienter(a, b, c, '123')
A:sympy.vector.tests.test_coordsysrect.q_orienter->QuaternionOrienter(q1, q2, q3, q4)
A:sympy.vector.tests.test_coordsysrect.N->CoordSys3D('N')
A:sympy.vector.tests.test_coordsysrect.C->CoordSys3D('A').locate_new('C', v)
A:sympy.vector.tests.test_coordsysrect.mapping->CoordSys3D('A').scalar_map(C)
A:sympy.vector.tests.test_coordsysrect.D->CoordSys3D('N').orient_new('D', (orienter1,))
A:sympy.vector.tests.test_coordsysrect.E->CoordSys3D('N').orient_new('E', (orienter2,))
A:sympy.vector.tests.test_coordsysrect.F->CoordSys3D('N').orient_new('F', (orienter3,))
A:sympy.vector.tests.test_coordsysrect.G->CoordSys3D('N').orient_new('G', (orienter4,))
A:sympy.vector.tests.test_coordsysrect.orienter1->AxisOrienter(q4, N.j)
A:sympy.vector.tests.test_coordsysrect.orienter2->SpaceOrienter(q1, q2, q3, '123')
A:sympy.vector.tests.test_coordsysrect.orienter3->QuaternionOrienter(q1, q2, q3, q4)
A:sympy.vector.tests.test_coordsysrect.orienter4->BodyOrienter(q1, q2, q3, '123')
A:sympy.vector.tests.test_coordsysrect.p->CoordSys3D('A').origin.locate_new('p', -v)
A:sympy.vector.tests.test_coordsysrect.p1->CoordSys3D('A').origin.locate_new('p', -v).locate_new('p1', 2 * v)
A:sympy.vector.tests.test_coordsysrect.p2->CoordSys3D('A').origin.locate_new('p', -v).locate_new('p2', A.i)
A:sympy.vector.tests.test_coordsysrect.a->CoordSys3D('a')
A:sympy.vector.tests.test_coordsysrect.c->CoordSys3D('a').orient_new_axis('c', q0, -a.k)
A:sympy.vector.tests.test_coordsysrect.(r, theta, phi)->CoordSys3D('a').base_scalars()
A:sympy.vector.tests.test_coordsysrect.(r, theta, z)->CoordSys3D('a').base_scalars()
A:sympy.vector.tests.test_coordsysrect.(u, v)->symbols('u, v')
A:sympy.vector.tests.test_coordsysrect.q0->symbols('q0')
A:sympy.vector.tests.test_coordsysrect.b->CoordSys3D('a').orient_new_axis('b', 0, -a.k)
sympy.vector.tests.test_coordsysrect.test_check_orthogonality()
sympy.vector.tests.test_coordsysrect.test_coordinate_vars()
sympy.vector.tests.test_coordsysrect.test_coordsys3d_equivalence()
sympy.vector.tests.test_coordsysrect.test_create_new()
sympy.vector.tests.test_coordsysrect.test_evalf()
sympy.vector.tests.test_coordsysrect.test_func_args()
sympy.vector.tests.test_coordsysrect.test_lame_coefficients()
sympy.vector.tests.test_coordsysrect.test_locatenew_point()
sympy.vector.tests.test_coordsysrect.test_orient_new_methods()
sympy.vector.tests.test_coordsysrect.test_orienters()
sympy.vector.tests.test_coordsysrect.test_rotation_matrix()
sympy.vector.tests.test_coordsysrect.test_rotation_trans_equations()
sympy.vector.tests.test_coordsysrect.test_transformation_equations()
sympy.vector.tests.test_coordsysrect.test_vector_with_orientation()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/theanocode.py----------------------------------------
A:sympy.printing.theanocode.theano->import_module('theano')
A:sympy.printing.theanocode.self.cache->kwargs.pop('cache', {})
A:sympy.printing.theanocode.key->self._get_key(s, name, dtype=dtype, broadcastable=broadcastable)
A:sympy.printing.theanocode.value->tt.tensor(name=name, dtype=dtype, broadcastable=broadcastable)
A:sympy.printing.theanocode.dtype->kwargs.get('dtypes', {}).get(X)
A:sympy.printing.theanocode.bc->kwargs.get('broadcastables', {}).get(s)
A:sympy.printing.theanocode.result->tt.dot(result, children[0])
A:sympy.printing.theanocode.parent->self._print(expr.parent, **kwargs)
A:sympy.printing.theanocode.rowslice->self._print(slice(*expr.rowslice), **kwargs)
A:sympy.printing.theanocode.colslice->self._print(slice(*expr.colslice), **kwargs)
A:sympy.printing.theanocode.p_cond->self._print(cond, **kwargs)
A:sympy.printing.theanocode.p_e->self._print(e, **kwargs)
A:sympy.printing.theanocode.p_remaining->self._print(sympy.Piecewise(*expr.args[1:]), **kwargs)
A:sympy.printing.theanocode.rv->tt.Rop(rv, var, tt.ones_like(var))
A:sympy.printing.theanocode.var->self._print(var, **kwargs)
A:sympy.printing.theanocode.maxdim->max(dims.values())
A:sympy.printing.theanocode.cache->kwargs.pop('cache', {})
A:sympy.printing.theanocode.dtypes->kwargs.pop('dtypes', {})
A:sympy.printing.theanocode.broadcastables->dim_handling(inputs, dim=dim, dims=dims, broadcastables=broadcastables)
A:sympy.printing.theanocode.code->partial(theano_code, cache=cache, dtypes=dtypes, broadcastables=broadcastables)
A:sympy.printing.theanocode.tinputs->list(map(code, inputs))
A:sympy.printing.theanocode.toutputs->list(map(code, outputs))
A:sympy.printing.theanocode.func->import_module('theano').function(tinputs, toutputs, **kwargs)
A:sympy.printing.theanocode.out->func(*args)
sympy.printing.theanocode.TheanoPrinter(self,*args,**kwargs)
sympy.printing.theanocode.TheanoPrinter._get_key(self,s,name=None,dtype=None,broadcastable=None)
sympy.printing.theanocode.TheanoPrinter._get_or_create(self,s,name=None,dtype=None,broadcastable=None)
sympy.printing.theanocode.TheanoPrinter._print_AppliedUndef(self,s,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Basic(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_BlockMatrix(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_DenseMatrix(self,X,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Derivative(self,deriv,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Exp1(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Integer(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_MatMul(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_MatPow(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_MatrixSlice(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_MatrixSymbol(self,X,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Number(self,n,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Pi(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Piecewise(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Rational(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Symbol(self,s,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_factorial(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_slice(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter.doprint(self,expr,dtypes=None,broadcastables=None)
sympy.printing.theanocode.TheanoPrinter.emptyPrinter(self,expr)
sympy.printing.theanocode.dim_handling(inputs,dim=None,dims=None,broadcastables=None)
sympy.printing.theanocode.theano_code(expr,cache=None,**kwargs)
sympy.printing.theanocode.theano_function(inputs,outputs,scalar=False,*,dim=None,dims=None,broadcastables=None,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/rcode.py----------------------------------------
A:sympy.printing.rcode.self.known_functions->dict(known_functions)
A:sympy.printing.rcode.userfuncs->settings.get('user_functions', {})
A:sympy.printing.rcode.self._dereference->set(settings.get('dereference', []))
A:sympy.printing.rcode.self.reserved_words->set(reserved_words)
A:sympy.printing.rcode.PREC->precedence(expr)
A:sympy.printing.rcode.temp->Assignment(lhs[i, j], rhs[i, j])
A:sympy.printing.rcode.code0->self._print(temp)
A:sympy.printing.rcode.lhs_code->self._print(expr.lhs)
A:sympy.printing.rcode.rhs_code->self._print(expr.rhs)
A:sympy.printing.rcode.name->super()._print_Symbol(expr)
A:sympy.printing.rcode.target->self._print(expr.target)
A:sympy.printing.rcode.body->self._print(expr.body)
A:sympy.printing.rcode.code_lines->self.indent_code(code.splitlines(True))
sympy.print_rcode(expr,**settings)
sympy.printing.rcode.RCodePrinter(self,settings={})
sympy.printing.rcode.RCodePrinter._declare_number_const(self,name,value)
sympy.printing.rcode.RCodePrinter._format_code(self,lines)
sympy.printing.rcode.RCodePrinter._get_comment(self,text)
sympy.printing.rcode.RCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.rcode.RCodePrinter._get_statement(self,codestring)
sympy.printing.rcode.RCodePrinter._print_Assignment(self,expr)
sympy.printing.rcode.RCodePrinter._print_AugmentedAssignment(self,expr)
sympy.printing.rcode.RCodePrinter._print_Exp1(self,expr)
sympy.printing.rcode.RCodePrinter._print_For(self,expr)
sympy.printing.rcode.RCodePrinter._print_ITE(self,expr)
sympy.printing.rcode.RCodePrinter._print_Idx(self,expr)
sympy.printing.rcode.RCodePrinter._print_Indexed(self,expr)
sympy.printing.rcode.RCodePrinter._print_Infinity(self,expr)
sympy.printing.rcode.RCodePrinter._print_MatrixElement(self,expr)
sympy.printing.rcode.RCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.rcode.RCodePrinter._print_Pi(self,expr)
sympy.printing.rcode.RCodePrinter._print_Piecewise(self,expr)
sympy.printing.rcode.RCodePrinter._print_Pow(self,expr)
sympy.printing.rcode.RCodePrinter._print_Rational(self,expr)
sympy.printing.rcode.RCodePrinter._print_Relational(self,expr)
sympy.printing.rcode.RCodePrinter._print_Symbol(self,expr)
sympy.printing.rcode.RCodePrinter._rate_index_position(self,p)
sympy.printing.rcode.RCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.rcode.RCodePrinter.indent_code(self,code)
sympy.printing.rcode.print_rcode(expr,**settings)
sympy.printing.rcode.rcode(expr,assign_to=None,**settings)
sympy.rcode(expr,assign_to=None,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/gtk.py----------------------------------------
sympy.print_gtk(x,start_viewer=True)
sympy.printing.gtk.print_gtk(x,start_viewer=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/codeprinter.py----------------------------------------
A:sympy.printing.codeprinter.self.reserved_words->set()
A:sympy.printing.codeprinter.assign_to->Symbol(assign_to)
A:sympy.printing.codeprinter.expr->_keep_coeff(-c, e)
A:sympy.printing.codeprinter.self._not_supported->set()
A:sympy.printing.codeprinter.self._number_symbols->set()
A:sympy.printing.codeprinter.lines->self._format_code(lines)
A:sympy.printing.codeprinter.result->'\n'.join(lines)
A:sympy.printing.codeprinter.indices->self._sort_optimized(d, expr)
A:sympy.printing.codeprinter.dummies->get_contraction_structure(expr)
A:sympy.printing.codeprinter.(openloop, closeloop)->self._get_loop_opening_ending(indices)
A:sympy.printing.codeprinter.text->self._get_statement('%s = %s' % (lhs_printed, text))
A:sympy.printing.codeprinter.lhs_printed->self._print(assign_to)
A:sympy.printing.codeprinter.(openloop_d, closeloop_d)->self._get_loop_opening_ending(indices)
A:sympy.printing.codeprinter.(rinds, junk)->get_indices(expr)
A:sympy.printing.codeprinter.(linds, junk)->get_indices(assign_to)
A:sympy.printing.codeprinter.arrays->_keep_coeff(-c, e).atoms(Indexed)
A:sympy.printing.codeprinter.temp->Assignment(lhs[i, j], rhs[i, j])
A:sympy.printing.codeprinter.code0->self._print(temp)
A:sympy.printing.codeprinter.lhs_code->self._print(expr.lhs)
A:sympy.printing.codeprinter.rhs_code->self._print(expr.rhs)
A:sympy.printing.codeprinter.name->super()._print_Symbol(expr)
A:sympy.printing.codeprinter.PREC->precedence(expr)
A:sympy.printing.codeprinter.prec->precedence(expr)
A:sympy.printing.codeprinter.(c, e)->_keep_coeff(-c, e).as_coeff_Mul()
A:sympy.printing.codeprinter.args->sympy.core.Mul.make_args(expr)
sympy.ccode(expr,assign_to=None,standard='c99',**settings)
sympy.cxxcode(expr,assign_to=None,standard='c++11',**settings)
sympy.fcode(expr,assign_to=None,**settings)
sympy.print_ccode(expr,**settings)
sympy.print_fcode(expr,**settings)
sympy.printing.codeprinter.AssignmentError(Exception)
sympy.printing.codeprinter.CodePrinter(self,settings=None)
sympy.printing.codeprinter.CodePrinter._can_print(self,name)
sympy.printing.codeprinter.CodePrinter._declare_number_const(self,name,value)
sympy.printing.codeprinter.CodePrinter._doprint_loops(self,expr,assign_to=None)
sympy.printing.codeprinter.CodePrinter._format_code(self,lines)
sympy.printing.codeprinter.CodePrinter._get_comment(self,text)
sympy.printing.codeprinter.CodePrinter._get_expression_indices(self,expr,assign_to)
sympy.printing.codeprinter.CodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.codeprinter.CodePrinter._get_statement(self,codestring)
sympy.printing.codeprinter.CodePrinter._handle_UnevaluatedExpr(self,expr)
sympy.printing.codeprinter.CodePrinter._print_And(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Assignment(self,expr)
sympy.printing.codeprinter.CodePrinter._print_AugmentedAssignment(self,expr)
sympy.printing.codeprinter.CodePrinter._print_BooleanFunction(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Catalan(self,expr)
sympy.printing.codeprinter.CodePrinter._print_CodeBlock(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Comment(self,string)
sympy.printing.codeprinter.CodePrinter._print_Dummy(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Equivalent(self,expr)
sympy.printing.codeprinter.CodePrinter._print_EulerGamma(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Exp1(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Function(self,expr)
sympy.printing.codeprinter.CodePrinter._print_FunctionCall(self,expr)
sympy.printing.codeprinter.CodePrinter._print_GoldenRatio(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Mul(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Not(self,expr)
sympy.printing.codeprinter.CodePrinter._print_NumberSymbol(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Or(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Pi(self,expr)
sympy.printing.codeprinter.CodePrinter._print_QuotedString(self,arg)
sympy.printing.codeprinter.CodePrinter._print_String(self,string)
sympy.printing.codeprinter.CodePrinter._print_Symbol(self,expr)
sympy.printing.codeprinter.CodePrinter._print_TribonacciConstant(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Variable(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Xor(self,expr)
sympy.printing.codeprinter.CodePrinter._print_not_supported(self,expr)
sympy.printing.codeprinter.CodePrinter._rate_index_position(self,p)
sympy.printing.codeprinter.CodePrinter._sort_optimized(self,indices,expr)
sympy.printing.codeprinter.CodePrinter.doprint(self,expr,assign_to=None)
sympy.printing.codeprinter._convert_python_lists(arg)
sympy.printing.codeprinter.ccode(expr,assign_to=None,standard='c99',**settings)
sympy.printing.codeprinter.cxxcode(expr,assign_to=None,standard='c++11',**settings)
sympy.printing.codeprinter.fcode(expr,assign_to=None,**settings)
sympy.printing.codeprinter.print_ccode(expr,**settings)
sympy.printing.codeprinter.print_fcode(expr,**settings)
sympy.printing.codeprinter.requires(self,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/julia.py----------------------------------------
A:sympy.printing.julia.self.known_functions->dict(zip(known_fcns_src1, known_fcns_src1))
A:sympy.printing.julia.userfuncs->settings.get('user_functions', {})
A:sympy.printing.julia.(var, start, stop)->map(self._print, [i.label, i.lower + 1, i.upper + 1])
A:sympy.printing.julia.prec->precedence(expr)
A:sympy.printing.julia.(c, e)->_keep_coeff(-c, m).as_coeff_Mul()
A:sympy.printing.julia.expr->_keep_coeff(-c, m)
A:sympy.printing.julia.args->sympy.core.Mul.make_args(expr)
A:sympy.printing.julia.lhs_code->self._print(lhs)
A:sympy.printing.julia.rhs_code->self._print(rhs)
A:sympy.printing.julia.PREC->precedence(expr)
A:sympy.printing.julia.temp->Piecewise(*zip(expressions, conditions))
A:sympy.printing.julia.L->A.col_list()
A:sympy.printing.julia.I->Matrix([k[0] + 1 for k in L])
A:sympy.printing.julia.J->Matrix([k[1] + 1 for k in L])
A:sympy.printing.julia.AIJ->Matrix([k[2] for k in L])
A:sympy.printing.julia.lstr->self._print(l)
A:sympy.printing.julia.code0->self._print(e)
A:sympy.printing.julia.(c, m)->_keep_coeff(-c, m).as_coeff_mmul()
A:sympy.printing.julia.(re, im)->c.as_real_imag()
A:sympy.printing.julia.code_lines->self.indent_code(code.splitlines(True))
sympy.julia_code(expr,assign_to=None,**settings)
sympy.printing.julia.JuliaCodePrinter(self,settings={})
sympy.printing.julia.JuliaCodePrinter._declare_number_const(self,name,value)
sympy.printing.julia.JuliaCodePrinter._format_code(self,lines)
sympy.printing.julia.JuliaCodePrinter._get_comment(self,text)
sympy.printing.julia.JuliaCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.julia.JuliaCodePrinter._get_statement(self,codestring)
sympy.printing.julia.JuliaCodePrinter._print_Assignment(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_BooleanFalse(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_BooleanTrue(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Catalan(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_EulerGamma(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Exp1(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_GoldenRatio(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_HadamardPower(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_HadamardProduct(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Identity(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Idx(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_ImaginaryUnit(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Indexed(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Infinity(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_MatMul(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_MatPow(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_MatrixBase(self,A)
sympy.printing.julia.JuliaCodePrinter._print_MatrixElement(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_MatrixSlice(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Mul(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_NaN(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Pi(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Piecewise(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Pow(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Rational(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_Relational(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_SparseRepMatrix(self,A)
sympy.printing.julia.JuliaCodePrinter._print_bool(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_jn(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_list(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_tuple(self,expr)
sympy.printing.julia.JuliaCodePrinter._print_yn(self,expr)
sympy.printing.julia.JuliaCodePrinter._rate_index_position(self,p)
sympy.printing.julia.JuliaCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.julia.JuliaCodePrinter.indent_code(self,code)
sympy.printing.julia.julia_code(expr,assign_to=None,**settings)
sympy.printing.julia.print_julia_code(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/glsl.py----------------------------------------
A:sympy.printing.glsl.self.known_functions->dict(known_functions)
A:sympy.printing.glsl.userfuncs->settings.get('user_functions', {})
A:sympy.printing.glsl.code_lines->self.indent_code(code.splitlines(True))
A:sympy.printing.glsl.array_constructor->'{}[{}]'.format(array_type, array_size)
A:sympy.printing.glsl.pnt->self._print(expr.parent)
A:sympy.printing.glsl.l->', '.join((self._print(item) for item in expr))
A:sympy.printing.glsl.array_size->len(expr)
A:sympy.printing.glsl.code0->self._print(e)
A:sympy.printing.glsl.PREC->precedence(expr)
A:sympy.printing.glsl.e->self._print(expr.exp)
A:sympy.printing.glsl.lhs_code->self._print(expr.lhs)
A:sympy.printing.glsl.rhs_code->self._print(expr.rhs)
A:sympy.printing.glsl.terms->expr.as_ordered_factors()
A:sympy.printing.glsl.(neg, pos)->partition(lambda arg: arg.could_extract_minus_sign(), terms)
A:sympy.printing.glsl.spos->self._print(self._settings['zero'])
A:sympy.printing.glsl.neg->reduce(lambda a, b: add(a, b), (self._print(-n) for n in neg))
A:sympy.printing.glsl.s->reduce(lambda a, b: mul(a, b), (self._print(t) for t in terms))
sympy.glsl_code(expr,assign_to=None,**settings)
sympy.print_glsl(expr,**settings)
sympy.printing.glsl.GLSLPrinter(self,settings={})
sympy.printing.glsl.GLSLPrinter._declare_number_const(self,name,value)
sympy.printing.glsl.GLSLPrinter._format_code(self,lines)
sympy.printing.glsl.GLSLPrinter._get_comment(self,text)
sympy.printing.glsl.GLSLPrinter._get_loop_opening_ending(self,indices)
sympy.printing.glsl.GLSLPrinter._get_statement(self,codestring)
sympy.printing.glsl.GLSLPrinter._print_Add(self,expr,order=None)
sympy.printing.glsl.GLSLPrinter._print_Function_with_args(self,func,func_args)
sympy.printing.glsl.GLSLPrinter._print_Idx(self,expr)
sympy.printing.glsl.GLSLPrinter._print_Indexed(self,expr)
sympy.printing.glsl.GLSLPrinter._print_MatrixBase(self,mat)
sympy.printing.glsl.GLSLPrinter._print_MatrixElement(self,expr)
sympy.printing.glsl.GLSLPrinter._print_Mul(self,expr,**kwargs)
sympy.printing.glsl.GLSLPrinter._print_Piecewise(self,expr)
sympy.printing.glsl.GLSLPrinter._print_Pow(self,expr)
sympy.printing.glsl.GLSLPrinter._print_Rational(self,expr)
sympy.printing.glsl.GLSLPrinter._print_Relational(self,expr)
sympy.printing.glsl.GLSLPrinter._print_SparseRepMatrix(self,mat)
sympy.printing.glsl.GLSLPrinter._print_int(self,expr)
sympy.printing.glsl.GLSLPrinter._print_list(self,expr)
sympy.printing.glsl.GLSLPrinter._rate_index_position(self,p)
sympy.printing.glsl.GLSLPrinter._traverse_matrix_indices(self,mat)
sympy.printing.glsl.GLSLPrinter.indent_code(self,code)
sympy.printing.glsl.glsl_code(expr,assign_to=None,**settings)
sympy.printing.glsl.print_glsl(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/defaults.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tableform.py----------------------------------------
A:sympy.printing.tableform.data->data.tolist().tolist()
A:sympy.printing.tableform._h->len(data)
A:sympy.printing.tableform.pad->Symbol(pad)
A:sympy.printing.tableform._w->max((len(line) for line in data))
A:sympy.printing.tableform.lj->Symbol(str(lj))
A:sympy.printing.tableform._lines->Tuple(*[Tuple(*d) for d in data])
A:sympy.printing.tableform.headings->kwarg.get('headings', [None, None])
A:sympy.printing.tableform.h1->range(1, _h + 1)
A:sympy.printing.tableform.h2->range(1, _w + 1)
A:sympy.printing.tableform.alignments->kwarg.get('alignments', 'l')
A:sympy.printing.tableform.a->a.strip().lower().strip().lower()
A:sympy.printing.tableform.std_align->_std_align(a)
A:sympy.printing.tableform._column_formats->kwarg.get('formats', [None] * _w)
A:sympy.printing.tableform._wipe_zeros->kwarg.get('wipe_zeros', True)
A:sympy.printing.tableform.s->str(self._headings[1][i])
A:sympy.printing.tableform.w->len(s)
A:sympy.printing.tableform._head_width->max([len(x) for x in self._headings[0]])
A:sympy.printing.tableform.v->printer._print(x)
sympy.TableForm(self,data,**kwarg)
sympy.printing.tableform.TableForm(self,data,**kwarg)
sympy.printing.tableform.TableForm.__repr__(self)
sympy.printing.tableform.TableForm.__str__(self)
sympy.printing.tableform.TableForm._latex(self,printer)
sympy.printing.tableform.TableForm._sympystr(self,p)
sympy.printing.tableform.TableForm.as_latex(self)
sympy.printing.tableform.TableForm.as_matrix(self)
sympy.printing.tableform.TableForm.as_str(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/c.py----------------------------------------
A:sympy.printing.c.known_functions_C99->dict(known_functions_C89, **{'exp2': 'exp2', 'expm1': 'expm1', 'log10': 'log10', 'log2': 'log2', 'log1p': 'log1p', 'Cbrt': 'cbrt', 'hypot': 'hypot', 'fma': 'fma', 'loggamma': 'lgamma', 'erfc': 'erfc', 'Max': 'fmax', 'Min': 'fmin', 'asinh': 'asinh', 'acosh': 'acosh', 'atanh': 'atanh', 'erf': 'erf', 'gamma': 'tgamma'})
A:sympy.printing.c.reserved_words->set(reserved_words + reserved_words_c99)
A:sympy.printing.c.self.math_macros->settings.pop('math_macros', get_math_macros())
A:sympy.printing.c.self.type_aliases->dict(chain(self.type_aliases.items(), settings.pop('type_aliases', {}).items()))
A:sympy.printing.c.self.type_mappings->dict(chain(self.type_mappings.items(), settings.pop('type_mappings', {}).items()))
A:sympy.printing.c.self.type_headers->dict(chain(self.type_headers.items(), settings.pop('type_headers', {}).items()))
A:sympy.printing.c.self.type_macros->dict(chain(self.type_macros.items(), settings.pop('type_macros', {}).items()))
A:sympy.printing.c.self.type_func_suffixes->dict(chain(self.type_func_suffixes.items(), settings.pop('type_func_suffixes', {}).items()))
A:sympy.printing.c.self.type_literal_suffixes->dict(chain(self.type_literal_suffixes.items(), settings.pop('type_literal_suffixes', {}).items()))
A:sympy.printing.c.self.type_math_macro_suffixes->dict(chain(self.type_math_macro_suffixes.items(), settings.pop('type_math_macro_suffixes', {}).items()))
A:sympy.printing.c.self.known_functions->dict(self._kf, **settings.get('user_functions', {}))
A:sympy.printing.c.self._dereference->set(settings.get('dereference', []))
A:sympy.printing.c.self.headers->set()
A:sympy.printing.c.self.libraries->set()
A:sympy.printing.c.self.macros->set()
A:sympy.printing.c.var->Variable(name, type=type_, value=value.evalf(type_.decimal_dig), attrs={value_const})
A:sympy.printing.c.decl->Declaration(var)
A:sympy.printing.c.PREC->precedence(expr)
A:sympy.printing.c.suffix->self._get_literal_suffix(type_)
A:sympy.printing.c.literal_suffix->self._get_literal_suffix(real)
A:sympy.printing.c.offset->getattr(expr.base, 'offset', S.Zero)
A:sympy.printing.c.strides->getattr(expr.base, 'strides', None)
A:sympy.printing.c.traversal->range(expr.rank)
A:sympy.printing.c.code0->self._print(e)
A:sympy.printing.c.name->super()._print_Symbol(expr)
A:sympy.printing.c.lhs_code->self._print(expr.lhs)
A:sympy.printing.c.rhs_code->self._print(expr.rhs)
A:sympy.printing.c.target->self._print(expr.target)
A:sympy.printing.c.body->self._print(expr.body)
A:sympy.printing.c.code_lines->self.indent_code(code.splitlines(True))
A:sympy.printing.c.alias->self.type_aliases.get(type_, type_)
A:sympy.printing.c.dflt->self.type_math_macro_suffixes.get(alias, '')
A:sympy.printing.c.result->'{vc}{t} {s}'.format(vc='const ' if value_const in var.attrs else '', t=self._print(var.type), s=self._print(var.symbol))
A:sympy.printing.c.type_->self.type_aliases.get(real, real)
A:sympy.printing.c.num->str(flt.evalf(type_.decimal_dig))
A:sympy.printing.c.num_parts->str(flt.evalf(type_.decimal_dig)).split('e')
A:sympy.printing.c.num_parts[0]->num_parts[0].rstrip('0').rstrip('0')
A:sympy.printing.c.idxs->self._print(global_idx)
A:sympy.printing.c.global_idx->sum([i * s for (i, s) in zip(elem.indices, elem.strides)])
A:sympy.printing.c.pars->', '.join((self._print(Declaration(arg)) for arg in expr.parameters))
A:sympy.printing.c.type_mappings->dict(chain(C89CodePrinter.type_mappings.items(), {complex64: 'float complex', complex128: 'double complex'}.items()))
A:sympy.printing.c.type_headers->dict(chain(C89CodePrinter.type_headers.items(), {complex64: {'complex.h'}, complex128: {'complex.h'}}.items()))
A:sympy.printing.c._prec_funcs->'fabs fmod remainder remquo fma fmax fmin fdim nan exp exp2 expm1 log log10 log2 log1p pow sqrt cbrt hypot sin cos tan asin acos atan atan2 sinh cosh tanh asinh acosh atanh erf erfc tgamma lgamma ceil floor trunc round nearbyint rint frexp ldexp modf scalbn ilogb logb nextafter copysign'.split()
A:sympy.printing.c.args->', '.join((self._print(arg) for arg in expr.args))
sympy.printing.c.C11CodePrinter(C99CodePrinter)
sympy.printing.c.C11CodePrinter._print_alignof(self,expr)
sympy.printing.c.C89CodePrinter(self,settings=None)
sympy.printing.c.C89CodePrinter._declare_number_const(self,name,value)
sympy.printing.c.C89CodePrinter._format_code(self,lines)
sympy.printing.c.C89CodePrinter._get_comment(self,text)
sympy.printing.c.C89CodePrinter._get_func_suffix(self,type_)
sympy.printing.c.C89CodePrinter._get_literal_suffix(self,type_)
sympy.printing.c.C89CodePrinter._get_math_macro_suffix(self,type_)
sympy.printing.c.C89CodePrinter._get_statement(self,codestring)
sympy.printing.c.C89CodePrinter._print_BooleanFalse(self,expr)
sympy.printing.c.C89CodePrinter._print_BooleanTrue(self,expr)
sympy.printing.c.C89CodePrinter._print_BreakToken(self,_)
sympy.printing.c.C89CodePrinter._print_CodeBlock(self,expr)
sympy.printing.c.C89CodePrinter._print_CommaOperator(self,expr)
sympy.printing.c.C89CodePrinter._print_ContinueToken(self,_)
sympy.printing.c.C89CodePrinter._print_Declaration(self,decl)
sympy.printing.c.C89CodePrinter._print_Element(self,elem)
sympy.printing.c.C89CodePrinter._print_Float(self,flt)
sympy.printing.c.C89CodePrinter._print_For(self,expr)
sympy.printing.c.C89CodePrinter._print_FunctionDefinition(self,expr)
sympy.printing.c.C89CodePrinter._print_FunctionPrototype(self,expr)
sympy.printing.c.C89CodePrinter._print_ITE(self,expr)
sympy.printing.c.C89CodePrinter._print_Idx(self,expr)
sympy.printing.c.C89CodePrinter._print_Indexed(self,expr)
sympy.printing.c.C89CodePrinter._print_Infinity(self,expr)
sympy.printing.c.C89CodePrinter._print_Label(self,expr)
sympy.printing.c.C89CodePrinter._print_MatrixElement(self,expr)
sympy.printing.c.C89CodePrinter._print_Max(self,expr)
sympy.printing.c.C89CodePrinter._print_Min(self,expr)
sympy.printing.c.C89CodePrinter._print_Mod(self,expr)
sympy.printing.c.C89CodePrinter._print_Mul(self,expr,**kwargs)
sympy.printing.c.C89CodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.c.C89CodePrinter._print_NumberSymbol(self,expr)
sympy.printing.c.C89CodePrinter._print_Piecewise(self,expr)
sympy.printing.c.C89CodePrinter._print_PostDecrement(self,expr)
sympy.printing.c.C89CodePrinter._print_PostIncrement(self,expr)
sympy.printing.c.C89CodePrinter._print_Pow(self,expr)
sympy.printing.c.C89CodePrinter._print_PreDecrement(self,expr)
sympy.printing.c.C89CodePrinter._print_PreIncrement(self,expr)
sympy.printing.c.C89CodePrinter._print_Print(self,expr)
sympy.printing.c.C89CodePrinter._print_Rational(self,expr)
sympy.printing.c.C89CodePrinter._print_Relational(self,expr)
sympy.printing.c.C89CodePrinter._print_Return(self,expr)
sympy.printing.c.C89CodePrinter._print_Scope(self,expr)
sympy.printing.c.C89CodePrinter._print_Symbol(self,expr)
sympy.printing.c.C89CodePrinter._print_Tuple(self,expr)
sympy.printing.c.C89CodePrinter._print_Type(self,type_)
sympy.printing.c.C89CodePrinter._print_While(self,expr)
sympy.printing.c.C89CodePrinter._print_goto(self,expr)
sympy.printing.c.C89CodePrinter._print_sign(self,func)
sympy.printing.c.C89CodePrinter._print_struct(self,expr)
sympy.printing.c.C89CodePrinter._rate_index_position(self,p)
sympy.printing.c.C89CodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.c.C89CodePrinter.indent_code(self,code)
sympy.printing.c.C99CodePrinter(C89CodePrinter)
sympy.printing.c.C99CodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.c.C99CodePrinter._print_Infinity(self,expr)
sympy.printing.c.C99CodePrinter._print_Max(self,expr)
sympy.printing.c.C99CodePrinter._print_Min(self,expr)
sympy.printing.c.C99CodePrinter._print_NaN(self,expr)
sympy.printing.c.C99CodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.c.C99CodePrinter._print_math_func(self,expr,nest=False,known=None)
sympy.printing.c._as_macro_if_defined(meth)
sympy.printing.c.get_math_macros()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/cxx.py----------------------------------------
A:sympy.printing.cxx._math_functions['C++98'][k]->k.lower()
A:sympy.printing.cxx._math_functions['C++11'][k]->k.lower()
A:sympy.printing.cxx.reserved_words->set(reserved['C++17'])
A:sympy.printing.cxx.type_mappings->dict(chain(CXX98CodePrinter.type_mappings.items(), {Type('int8'): ('int8_t', {'cstdint'}), Type('int16'): ('int16_t', {'cstdint'}), Type('int32'): ('int32_t', {'cstdint'}), Type('int64'): ('int64_t', {'cstdint'}), Type('uint8'): ('uint8_t', {'cstdint'}), Type('uint16'): ('uint16_t', {'cstdint'}), Type('uint32'): ('uint32_t', {'cstdint'}), Type('uint64'): ('uint64_t', {'cstdint'}), Type('complex64'): ('std::complex<float>', {'complex'}), Type('complex128'): ('std::complex<double>', {'complex'}), Type('bool'): ('bool', None)}.items()))
A:sympy.printing.cxx._kf->dict(C99CodePrinter._kf, **_math_functions['C++17'])
sympy.printing.cxx.CXX11CodePrinter(_CXXCodePrinterBase,C99CodePrinter)
sympy.printing.cxx.CXX11CodePrinter._print_using(self,expr)
sympy.printing.cxx.CXX17CodePrinter(_CXXCodePrinterBase,C99CodePrinter)
sympy.printing.cxx.CXX17CodePrinter._print_Ei(self,expr)
sympy.printing.cxx.CXX17CodePrinter._print_beta(self,expr)
sympy.printing.cxx.CXX17CodePrinter._print_zeta(self,expr)
sympy.printing.cxx.CXX98CodePrinter(_CXXCodePrinterBase,C89CodePrinter)
sympy.printing.cxx._CXXCodePrinterBase(self,settings=None)
sympy.printing.cxx._CXXCodePrinterBase._print_Max(self,expr)
sympy.printing.cxx._CXXCodePrinterBase._print_Min(self,expr)
sympy.printing.cxx._CXXCodePrinterBase._print_using(self,expr)
sympy.printing.cxx._attach_print_method(cls,sympy_name,func_name)
sympy.printing.cxx._attach_print_methods(cls,cont)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/str.py----------------------------------------
A:sympy.printing.str.terms->self._as_ordered_terms(expr, order=order)
A:sympy.printing.str.prec->precedence(expr)
A:sympy.printing.str.t->self._print(term)
A:sympy.printing.str.sign->l.pop(0)
A:sympy.printing.str.args->', '.join((self._print(arg) for arg in items))
A:sympy.printing.str.keys->sorted(d.keys(), key=default_sort_key)
A:sympy.printing.str.L->', '.join([_xab_tostr(l) for l in expr.limits])
A:sympy.printing.str.x->list(x)
A:sympy.printing.str.(d, n)->sift(args, lambda x: isinstance(x, Pow) and bool(x.exp.as_coeff_Mul()[0] < 0), binary=True)
A:sympy.printing.str.dargs->list(di.exp.args)
A:sympy.printing.str.e->self.parenthesize(expr.exp, PREC, strict=False)
A:sympy.printing.str.n->'*'.join(nfactors)
A:sympy.printing.str.d->'*'.join(dfactors)
A:sympy.printing.str.(c, e)->_keep_coeff(-c, m).as_coeff_Mul()
A:sympy.printing.str.expr->_keep_coeff(-c, m)
A:sympy.printing.str.(b, e)->i.as_base_exp()
A:sympy.printing.str.eargs->list(Mul.make_args(e))
A:sympy.printing.str.(c, m)->_keep_coeff(-c, m).as_coeff_mmul()
A:sympy.printing.str.(re, im)->c.as_real_imag()
A:sympy.printing.str.perm_cyclic->self._settings.get('perm_cyclic', True)
A:sympy.printing.str.last->p.doprint(expr).rfind('(')
A:sympy.printing.str.s->StrReprPrinter(settings).doprint(expr)
A:sympy.printing.str.usefull->self._print(expr.array_form)
A:sympy.printing.str.(sign, args)->_keep_coeff(-c, m)._get_args_for_traditional_printer()
A:sympy.printing.str.numer->self.parenthesize(frac.numer, PRECEDENCE['Mul'], strict=True)
A:sympy.printing.str.denom->self.parenthesize(frac.denom, PRECEDENCE['Atom'], strict=True)
A:sympy.printing.str.s_monom->'*'.join(s_monom)
A:sympy.printing.str.s_coeff->self._print(coeff)
A:sympy.printing.str.modifier->self._as_ordered_terms(expr, order=order).pop(0)
A:sympy.printing.str.PREC->precedence(expr)
A:sympy.printing.str.dps->prec_to_dps(expr._prec)
A:sympy.printing.str.rv->mlib_to_str(expr._mpf_, dps, strip_zeros=strip, min_fixed=low, max_fixed=high)
A:sympy.printing.str.items->sorted(s, key=default_sort_key)
A:sympy.printing.str.rep->self._print(p.rep)
A:sympy.printing.str.dom->self._print(p.dom)
A:sympy.printing.str.ring->self._print(p.ring)
A:sympy.printing.str.p->StrReprPrinter(settings)
sympy.StrPrinter(Printer)
sympy.printing.str.StrPrinter(Printer)
sympy.printing.str.StrPrinter._print_AccumulationBounds(self,i)
sympy.printing.str.StrPrinter._print_Add(self,expr,order=None)
sympy.printing.str.StrPrinter._print_AlgebraicNumber(self,expr)
sympy.printing.str.StrPrinter._print_And(self,expr)
sympy.printing.str.StrPrinter._print_AppliedBinaryRelation(self,expr)
sympy.printing.str.StrPrinter._print_AppliedPredicate(self,expr)
sympy.printing.str.StrPrinter._print_ArrayElement(self,expr)
sympy.printing.str.StrPrinter._print_ArraySymbol(self,expr)
sympy.printing.str.StrPrinter._print_BaseScalarField(self,field)
sympy.printing.str.StrPrinter._print_BaseVectorField(self,field)
sympy.printing.str.StrPrinter._print_Basic(self,expr)
sympy.printing.str.StrPrinter._print_BlockMatrix(self,B)
sympy.printing.str.StrPrinter._print_BooleanFalse(self,expr)
sympy.printing.str.StrPrinter._print_BooleanTrue(self,expr)
sympy.printing.str.StrPrinter._print_Catalan(self,expr)
sympy.printing.str.StrPrinter._print_Category(self,category)
sympy.printing.str.StrPrinter._print_ComplexInfinity(self,expr)
sympy.printing.str.StrPrinter._print_ComplexRootOf(self,expr)
sympy.printing.str.StrPrinter._print_Complexes(self,expr)
sympy.printing.str.StrPrinter._print_ConditionSet(self,s)
sympy.printing.str.StrPrinter._print_CoordSystem(self,coords)
sympy.printing.str.StrPrinter._print_Cycle(self,expr)
sympy.printing.str.StrPrinter._print_DMF(self,expr)
sympy.printing.str.StrPrinter._print_DMP(self,p)
sympy.printing.str.StrPrinter._print_DeferredVector(self,expr)
sympy.printing.str.StrPrinter._print_Derivative(self,expr)
sympy.printing.str.StrPrinter._print_Dict(self,expr)
sympy.printing.str.StrPrinter._print_Differential(self,diff)
sympy.printing.str.StrPrinter._print_Dimension(self,expr)
sympy.printing.str.StrPrinter._print_Dummy(self,expr)
sympy.printing.str.StrPrinter._print_ElementwiseApplyFunction(self,expr)
sympy.printing.str.StrPrinter._print_EmptySequence(self,expr)
sympy.printing.str.StrPrinter._print_EmptySet(self,expr)
sympy.printing.str.StrPrinter._print_EulerGamma(self,expr)
sympy.printing.str.StrPrinter._print_Exp1(self,expr)
sympy.printing.str.StrPrinter._print_ExprCondPair(self,expr)
sympy.printing.str.StrPrinter._print_FiniteSet(self,s)
sympy.printing.str.StrPrinter._print_Float(self,expr)
sympy.printing.str.StrPrinter._print_FracElement(self,frac)
sympy.printing.str.StrPrinter._print_FracField(self,field)
sympy.printing.str.StrPrinter._print_Fraction(self,expr)
sympy.printing.str.StrPrinter._print_FreeGroupElement(self,elm)
sympy.printing.str.StrPrinter._print_Function(self,expr)
sympy.printing.str.StrPrinter._print_GaussianElement(self,poly)
sympy.printing.str.StrPrinter._print_GoldenRatio(self,expr)
sympy.printing.str.StrPrinter._print_GroebnerBasis(self,basis)
sympy.printing.str.StrPrinter._print_Heaviside(self,expr)
sympy.printing.str.StrPrinter._print_Identity(self,expr)
sympy.printing.str.StrPrinter._print_IdentityMorphism(self,morphism)
sympy.printing.str.StrPrinter._print_ImaginaryUnit(self,expr)
sympy.printing.str.StrPrinter._print_Infinity(self,expr)
sympy.printing.str.StrPrinter._print_Integer(self,expr)
sympy.printing.str.StrPrinter._print_Integers(self,expr)
sympy.printing.str.StrPrinter._print_Integral(self,expr)
sympy.printing.str.StrPrinter._print_Interval(self,i)
sympy.printing.str.StrPrinter._print_Inverse(self,I)
sympy.printing.str.StrPrinter._print_Lambda(self,obj)
sympy.printing.str.StrPrinter._print_LatticeOp(self,expr)
sympy.printing.str.StrPrinter._print_Limit(self,expr)
sympy.printing.str.StrPrinter._print_List(self,expr)
sympy.printing.str.StrPrinter._print_Manifold(self,manifold)
sympy.printing.str.StrPrinter._print_MatMul(self,expr)
sympy.printing.str.StrPrinter._print_MatPow(self,expr)
sympy.printing.str.StrPrinter._print_MatrixBase(self,expr)
sympy.printing.str.StrPrinter._print_MatrixElement(self,expr)
sympy.printing.str.StrPrinter._print_MatrixSlice(self,expr)
sympy.printing.str.StrPrinter._print_Mul(self,expr)
sympy.printing.str.StrPrinter._print_NaN(self,expr)
sympy.printing.str.StrPrinter._print_NamedMorphism(self,morphism)
sympy.printing.str.StrPrinter._print_Naturals(self,expr)
sympy.printing.str.StrPrinter._print_Naturals0(self,expr)
sympy.printing.str.StrPrinter._print_NegativeInfinity(self,expr)
sympy.printing.str.StrPrinter._print_Not(self,expr)
sympy.printing.str.StrPrinter._print_Object(self,obj)
sympy.printing.str.StrPrinter._print_OneMatrix(self,expr)
sympy.printing.str.StrPrinter._print_Or(self,expr)
sympy.printing.str.StrPrinter._print_Order(self,expr)
sympy.printing.str.StrPrinter._print_Ordinal(self,expr)
sympy.printing.str.StrPrinter._print_Partition(self,s)
sympy.printing.str.StrPrinter._print_Patch(self,patch)
sympy.printing.str.StrPrinter._print_Permutation(self,expr)
sympy.printing.str.StrPrinter._print_PermutationGroup(self,expr)
sympy.printing.str.StrPrinter._print_Pi(self,expr)
sympy.printing.str.StrPrinter._print_Poly(self,expr)
sympy.printing.str.StrPrinter._print_PolyElement(self,poly)
sympy.printing.str.StrPrinter._print_PolyRing(self,ring)
sympy.printing.str.StrPrinter._print_Pow(self,expr,rational=False)
sympy.printing.str.StrPrinter._print_Predicate(self,expr)
sympy.printing.str.StrPrinter._print_PythonRational(self,expr)
sympy.printing.str.StrPrinter._print_Quantity(self,expr)
sympy.printing.str.StrPrinter._print_Quaternion(self,expr)
sympy.printing.str.StrPrinter._print_RandomDomain(self,d)
sympy.printing.str.StrPrinter._print_Rational(self,expr)
sympy.printing.str.StrPrinter._print_Rationals(self,expr)
sympy.printing.str.StrPrinter._print_Reals(self,expr)
sympy.printing.str.StrPrinter._print_Relational(self,expr)
sympy.printing.str.StrPrinter._print_RootSum(self,expr)
sympy.printing.str.StrPrinter._print_Str(self,s)
sympy.printing.str.StrPrinter._print_Subs(self,obj)
sympy.printing.str.StrPrinter._print_Sum(self,expr)
sympy.printing.str.StrPrinter._print_Symbol(self,expr)
sympy.printing.str.StrPrinter._print_TensAdd(self,expr)
sympy.printing.str.StrPrinter._print_TensMul(self,expr)
sympy.printing.str.StrPrinter._print_Tensor(self,expr)
sympy.printing.str.StrPrinter._print_TensorHead(self,expr)
sympy.printing.str.StrPrinter._print_TensorIndex(self,expr)
sympy.printing.str.StrPrinter._print_Tr(self,expr)
sympy.printing.str.StrPrinter._print_Transpose(self,T)
sympy.printing.str.StrPrinter._print_TribonacciConstant(self,expr)
sympy.printing.str.StrPrinter._print_Tuple(self,expr)
sympy.printing.str.StrPrinter._print_UnevaluatedExpr(self,expr)
sympy.printing.str.StrPrinter._print_Uniform(self,expr)
sympy.printing.str.StrPrinter._print_UniversalSet(self,p)
sympy.printing.str.StrPrinter._print_Wild(self,expr)
sympy.printing.str.StrPrinter._print_WildDot(self,expr)
sympy.printing.str.StrPrinter._print_WildFunction(self,expr)
sympy.printing.str.StrPrinter._print_WildPlus(self,expr)
sympy.printing.str.StrPrinter._print_WildStar(self,expr)
sympy.printing.str.StrPrinter._print_Xor(self,expr)
sympy.printing.str.StrPrinter._print_Zero(self,expr)
sympy.printing.str.StrPrinter._print_ZeroMatrix(self,expr)
sympy.printing.str.StrPrinter._print_dict(self,d)
sympy.printing.str.StrPrinter._print_frozenset(self,s)
sympy.printing.str.StrPrinter._print_int(self,expr)
sympy.printing.str.StrPrinter._print_list(self,expr)
sympy.printing.str.StrPrinter._print_mpq(self,expr)
sympy.printing.str.StrPrinter._print_mpz(self,expr)
sympy.printing.str.StrPrinter._print_set(self,s)
sympy.printing.str.StrPrinter._print_str(self,expr)
sympy.printing.str.StrPrinter._print_tuple(self,expr)
sympy.printing.str.StrPrinter.emptyPrinter(self,expr)
sympy.printing.str.StrPrinter.parenthesize(self,item,level,strict=False)
sympy.printing.str.StrPrinter.stringify(self,args,sep,level=0)
sympy.printing.str.StrReprPrinter(StrPrinter)
sympy.printing.str.StrReprPrinter._print_Str(self,s)
sympy.printing.str.StrReprPrinter._print_str(self,s)
sympy.printing.str.sstr(expr,**settings)
sympy.printing.str.sstrrepr(expr,**settings)
sympy.sstr(expr,**settings)
sympy.sstrrepr(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/mathematica.py----------------------------------------
A:sympy.printing.mathematica.self.known_functions->dict(known_functions)
A:sympy.printing.mathematica.userfuncs->settings.get('user_functions', {}).copy()
A:sympy.printing.mathematica.PREC->precedence(expr)
A:sympy.printing.mathematica.(c, nc)->expr.args_cnc()
A:sympy.printing.mathematica.res->super()._print_Mul(expr.func(*c))
A:sympy.printing.mathematica.lhs_code->self._print(expr.lhs)
A:sympy.printing.mathematica.rhs_code->self._print(expr.rhs)
A:sympy.printing.mathematica.expanded->expr.expand(func=True)
A:sympy.printing.mathematica.items->sorted(expr.todok().items(), key=default_sort_key)
sympy.mathematica_code(expr,**settings)
sympy.printing.mathematica.MCodePrinter(self,settings={})
sympy.printing.mathematica.MCodePrinter._format_code(self,lines)
sympy.printing.mathematica.MCodePrinter._get_comment(self,text)
sympy.printing.mathematica.MCodePrinter._print_Catalan(self,expr)
sympy.printing.mathematica.MCodePrinter._print_ComplexInfinity(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Derivative(self,expr)
sympy.printing.mathematica.MCodePrinter._print_EulerGamma(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Exp1(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Function(self,expr)
sympy.printing.mathematica.MCodePrinter._print_GoldenRatio(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Half(self,expr)
sympy.printing.mathematica.MCodePrinter._print_ImaginaryUnit(self,expr)
sympy.printing.mathematica.MCodePrinter._print_ImmutableDenseMatrix(self,expr)
sympy.printing.mathematica.MCodePrinter._print_ImmutableDenseNDimArray(self,expr)
sympy.printing.mathematica.MCodePrinter._print_ImmutableSparseMatrix(self,expr)
sympy.printing.mathematica.MCodePrinter._print_ImmutableSparseNDimArray(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Infinity(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Integral(self,expr)
sympy.printing.mathematica.MCodePrinter._print_LambertW(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Mul(self,expr)
sympy.printing.mathematica.MCodePrinter._print_NaN(self,expr)
sympy.printing.mathematica.MCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.mathematica.MCodePrinter._print_NegativeOne(self,expr)
sympy.printing.mathematica.MCodePrinter._print_One(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Pi(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Pow(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Relational(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Sum(self,expr)
sympy.printing.mathematica.MCodePrinter._print_TribonacciConstant(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Zero(self,expr)
sympy.printing.mathematica.MCodePrinter._print_list(self,expr)
sympy.printing.mathematica.mathematica_code(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/fortran.py----------------------------------------
A:sympy.printing.fortran.self.type_aliases->dict(chain(self.type_aliases.items(), settings.pop('type_aliases', {}).items()))
A:sympy.printing.fortran.self.type_mappings->dict(chain(self.type_mappings.items(), settings.pop('type_mappings', {}).items()))
A:sympy.printing.fortran.self.known_functions->dict(known_functions)
A:sympy.printing.fortran.userfuncs->settings.get('user_functions', {})
A:sympy.printing.fortran.self.module_uses->defaultdict(set)
A:sympy.printing.fortran.self.mangled_symbols[expr]->Symbol(name)
A:sympy.printing.fortran.expr->self._print(e)
A:sympy.printing.fortran.name->super()._print_Symbol(expr)
A:sympy.printing.fortran.(var, start, stop)->map(self._print, [i.label, i.lower + 1, i.upper + 1])
A:sympy.printing.fortran.new_expr->merge(literal_dp(0), dsign(literal_dp(1), arg), Eq(arg, literal_dp(0)))
A:sympy.printing.fortran.code->pattern.format(T=expr, F=code, COND=cond)
A:sympy.printing.fortran.terms->list(expr.args[:-1])
A:sympy.printing.fortran.(e, c)->list(expr.args[:-1]).pop()
A:sympy.printing.fortran.cond->self._print(c)
A:sympy.printing.fortran.PREC->precedence(expr)
A:sympy.printing.fortran.term->Add(*mixed)
A:sympy.printing.fortran.t->self._print(term)
A:sympy.printing.fortran.eval_expr->self._print(e).func(*args)
A:sympy.printing.fortran.printed->sympy.printing.codeprinter.CodePrinter._print_Float(self, expr)
A:sympy.printing.fortran.e->sympy.printing.codeprinter.CodePrinter._print_Float(self, expr).find('e')
A:sympy.printing.fortran.lhs_code->self._print(expr.lhs)
A:sympy.printing.fortran.rhs_code->self._print(expr.rhs)
A:sympy.printing.fortran.params->self._print(sm.array)
A:sympy.printing.fortran.target->self._print(expr.target)
A:sympy.printing.fortran.body->self._print(expr.body)
A:sympy.printing.fortran.type_->self.type_aliases.get(type_, type_)
A:sympy.printing.fortran.type_str->self.type_mappings.get(type_, type_.name)
A:sympy.printing.fortran.module_uses->self.type_modules.get(type_)
A:sympy.printing.fortran.dim->var.attr_params('dimension')
A:sympy.printing.fortran.result->' '.join((self._print(arg) for arg in [var.type, var.symbol]))
A:sympy.printing.fortran.my_alnum->set('_+-.' + string.digits + string.ascii_letters)
A:sympy.printing.fortran.my_white->set(' \t()')
A:sympy.printing.fortran.pos->split_pos_code(line, 65)
A:sympy.printing.fortran.line->line[pos:].lstrip()
A:sympy.printing.fortran.hunk->line[:pos].rstrip()
A:sympy.printing.fortran.code_lines->self.indent_code(code.splitlines(True))
A:sympy.printing.fortran.fmt->self._print(ps.format_string)
A:sympy.printing.fortran.bind_C_params->fp.attr_params('bind_C')
A:sympy.printing.fortran.result_name->self._settings.get('result_name', None)
A:sympy.printing.fortran.entity->'{} function '.format(self._print(fd.return_type))
sympy.printing.fortran.FCodePrinter(self,settings=None)
sympy.printing.fortran.FCodePrinter._declare_number_const(self,name,value)
sympy.printing.fortran.FCodePrinter._format_code(self,lines)
sympy.printing.fortran.FCodePrinter._get_comment(self,text)
sympy.printing.fortran.FCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.fortran.FCodePrinter._get_statement(self,codestring)
sympy.printing.fortran.FCodePrinter._head(self,entity,fp,**kwargs)
sympy.printing.fortran.FCodePrinter._lead(self)
sympy.printing.fortran.FCodePrinter._pad_leading_columns(self,lines)
sympy.printing.fortran.FCodePrinter._print_Add(self,expr)
sympy.printing.fortran.FCodePrinter._print_ArrayConstructor(self,ac)
sympy.printing.fortran.FCodePrinter._print_ArrayElement(self,elem)
sympy.printing.fortran.FCodePrinter._print_AugmentedAssignment(self,expr)
sympy.printing.fortran.FCodePrinter._print_BooleanFalse(self,expr)
sympy.printing.fortran.FCodePrinter._print_BooleanTrue(self,expr)
sympy.printing.fortran.FCodePrinter._print_BreakToken(self,_)
sympy.printing.fortran.FCodePrinter._print_ContinueToken(self,_)
sympy.printing.fortran.FCodePrinter._print_Declaration(self,expr)
sympy.printing.fortran.FCodePrinter._print_Do(self,do)
sympy.printing.fortran.FCodePrinter._print_Element(self,elem)
sympy.printing.fortran.FCodePrinter._print_Extent(self,ext)
sympy.printing.fortran.FCodePrinter._print_Float(self,expr)
sympy.printing.fortran.FCodePrinter._print_For(self,expr)
sympy.printing.fortran.FCodePrinter._print_FortranReturn(self,frs)
sympy.printing.fortran.FCodePrinter._print_Function(self,expr)
sympy.printing.fortran.FCodePrinter._print_FunctionDefinition(self,fd)
sympy.printing.fortran.FCodePrinter._print_FunctionPrototype(self,fp)
sympy.printing.fortran.FCodePrinter._print_GoTo(self,goto)
sympy.printing.fortran.FCodePrinter._print_Idx(self,expr)
sympy.printing.fortran.FCodePrinter._print_ImaginaryUnit(self,expr)
sympy.printing.fortran.FCodePrinter._print_ImpliedDoLoop(self,idl)
sympy.printing.fortran.FCodePrinter._print_Indexed(self,expr)
sympy.printing.fortran.FCodePrinter._print_Infinity(self,expr)
sympy.printing.fortran.FCodePrinter._print_MatrixElement(self,expr)
sympy.printing.fortran.FCodePrinter._print_Mod(self,expr)
sympy.printing.fortran.FCodePrinter._print_Module(self,mod)
sympy.printing.fortran.FCodePrinter._print_Mul(self,expr)
sympy.printing.fortran.FCodePrinter._print_NumberSymbol(self,expr)
sympy.printing.fortran.FCodePrinter._print_Piecewise(self,expr)
sympy.printing.fortran.FCodePrinter._print_Pow(self,expr)
sympy.printing.fortran.FCodePrinter._print_Print(self,ps)
sympy.printing.fortran.FCodePrinter._print_Program(self,prog)
sympy.printing.fortran.FCodePrinter._print_Rational(self,expr)
sympy.printing.fortran.FCodePrinter._print_Relational(self,expr)
sympy.printing.fortran.FCodePrinter._print_Return(self,rs)
sympy.printing.fortran.FCodePrinter._print_Stream(self,strm)
sympy.printing.fortran.FCodePrinter._print_Subroutine(self,sub)
sympy.printing.fortran.FCodePrinter._print_SubroutineCall(self,scall)
sympy.printing.fortran.FCodePrinter._print_Symbol(self,expr)
sympy.printing.fortran.FCodePrinter._print_Type(self,type_)
sympy.printing.fortran.FCodePrinter._print_While(self,expr)
sympy.printing.fortran.FCodePrinter._print_int(self,expr)
sympy.printing.fortran.FCodePrinter._print_product_(self,prod)
sympy.printing.fortran.FCodePrinter._print_sign(self,expr)
sympy.printing.fortran.FCodePrinter._print_sum_(self,sm)
sympy.printing.fortran.FCodePrinter._print_use(self,use)
sympy.printing.fortran.FCodePrinter._print_use_rename(self,rnm)
sympy.printing.fortran.FCodePrinter._rate_index_position(self,p)
sympy.printing.fortran.FCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.fortran.FCodePrinter._wrap_fortran(self,lines)
sympy.printing.fortran.FCodePrinter.indent_code(self,code)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/latex.py----------------------------------------
A:sympy.printing.latex.greek_letters_set->frozenset(greeks)
A:sympy.printing.latex.s->super().emptyPrinter(expr)
A:sympy.printing.latex.self._settings['imaginary_unit_latex']->imaginary_unit_table.get(imag_unit, imag_unit)
A:sympy.printing.latex.self._settings['diff_operator_latex']->diff_operator_table.get(diff_operator, diff_operator)
A:sympy.printing.latex.prec_val->precedence_traditional(item)
A:sympy.printing.latex.tex->tex_greek_dictionary.get(s)
A:sympy.printing.latex.name->translate(name)
A:sympy.printing.latex.terms->rhs.as_ordered_terms()
A:sympy.printing.latex.term_tex->self._print(term)
A:sympy.printing.latex.expr->self._print(root.expr)
A:sympy.printing.latex.perm_cyclic->self._settings.get('perm_cyclic', True)
A:sympy.printing.latex.row1->' & '.join(upper)
A:sympy.printing.latex.row2->' & '.join(lower)
A:sympy.printing.latex.mat->self._print(expr._expr_mat)
A:sympy.printing.latex.dps->prec_to_dps(expr._prec)
A:sympy.printing.latex.str_real->str_real.replace('.', '{,}').replace('.', '{,}')
A:sympy.printing.latex.(mant, exp)->str_real.replace('.', '{,}').replace('.', '{,}').split('e')
A:sympy.printing.latex.mant->mant.replace('.', '{,}').replace('.', '{,}')
A:sympy.printing.latex.args->list(expr.args)
A:sympy.printing.latex.(units, nonunits)->sift(args, lambda x: (hasattr(x, '_scale_factor') or hasattr(x, 'is_physical_constant')) or (isinstance(x, Pow) and hasattr(x.base, 'is_physical_constant')), binary=True)
A:sympy.printing.latex.(prefixes, units)->sift(units, lambda x: hasattr(x, '_scale_factor'), binary=True)
A:sympy.printing.latex.(numer, denom)->fraction(expr, exact=True)
A:sympy.printing.latex.snumer->convert(numer)
A:sympy.printing.latex.sdenom->convert(denom)
A:sympy.printing.latex.ldenom->len(sdenom.split())
A:sympy.printing.latex.p->self._print(expr.p)
A:sympy.printing.latex.alpha->self._print(expr.alpha.as_expr())
A:sympy.printing.latex.base->self.parenthesize_super(base)
A:sympy.printing.latex.exp->self._print(expr.exp)
A:sympy.printing.latex.items->', '.join(map(self._print, items))
A:sympy.printing.latex.inneritems->list(vect.components.items())
A:sympy.printing.latex.outstr->''.join(o1)
A:sympy.printing.latex.tex_base->self._print(expr.base)
A:sympy.printing.latex.label->self._print(expr.label)
A:sympy.printing.latex.upper->self._print(expr.upper)
A:sympy.printing.latex.lower->self._print(S.Zero)
A:sympy.printing.latex.interval->'{lower}\\mathrel{{..}}\\nobreak {upper}'.format(lower=lower, upper=upper)
A:sympy.printing.latex.latex_expr->self._print(expr)
A:sympy.printing.latex.latex_subs->'\\\\ '.join((e[0] + '=' + e[1] for e in zip(latex_old, latex_new)))
A:sympy.printing.latex.func->self._deal_with_super_sub(func)
A:sympy.printing.latex.superscriptidx->self._deal_with_super_sub(func).find('^')
A:sympy.printing.latex.subscriptidx->self._deal_with_super_sub(func).find('_')
A:sympy.printing.latex.func_tex->self.parenthesize_super(func_tex)
A:sympy.printing.latex.symbols->', '.join(map(self._print, expr.symbols))
A:sympy.printing.latex.nu->self._print(expr.args[0])
A:sympy.printing.latex.(s, z)->map(self._print, expr.args)
A:sympy.printing.latex.(n, a, b, x)->map(self._print, expr.args)
A:sympy.printing.latex.(n, a, x)->map(self._print, expr.args)
A:sympy.printing.latex.(n, x)->map(self._print, expr.args)
A:sympy.printing.latex.(n, m, theta, phi)->map(self._print, expr.args)
A:sympy.printing.latex.(a, q, z)->map(self._print, args)
A:sympy.printing.latex.(name, supers, subs)->split_super_sub(string)
A:sympy.printing.latex.out_str->self._print(name)
A:sympy.printing.latex.x->list(x)
A:sympy.printing.latex.base_str->self._print(base)
A:sympy.printing.latex.perm_str->self._print(P.args[0])
A:sympy.printing.latex.block_str->block_str.replace('%s', '{}%s').replace('%s', '{}%s')
A:sympy.printing.latex.indices->map(self._print, expr.args)
A:sympy.printing.latex.(sign, args)->self._print(root.expr)._get_args_for_traditional_printer()
A:sympy.printing.latex.keys->sorted(d.keys(), key=default_sort_key)
A:sympy.printing.latex.shift->self._print(expr.args[0] - expr.args[1])
A:sympy.printing.latex.power->self._print(expr.args[2])
A:sympy.printing.latex.pargs->', '.join((self._print(arg) for arg in expr.pargs))
A:sympy.printing.latex.i->self._print(expr.args[0])
A:sympy.printing.latex.j->self._print(expr.args[1])
A:sympy.printing.latex.cont->', '.join((self._print(arg) for arg in s.args))
A:sympy.printing.latex.dots->object()
A:sympy.printing.latex.it->iter(s)
A:sympy.printing.latex.printset->tuple(s)
A:sympy.printing.latex.prec->precedence_traditional(p)
A:sympy.printing.latex.xinys->', '.join(('%s \\in %s' % xy for xy in xys))
A:sympy.printing.latex.vars_print->', '.join([self._print(var) for var in s.variables])
A:sympy.printing.latex.arg_print->self._print(expr.args[0])
A:sympy.printing.latex.domain->self._print(morphism.domain)
A:sympy.printing.latex.s_coeff->self._print(coeff)
A:sympy.printing.latex.modifier->rhs.as_ordered_terms().pop(0)
A:sympy.printing.latex.gens->list(map(self._print, poly.gens))
A:sympy.printing.latex.numer->self._print(num)
A:sympy.printing.latex.denom->self._print(frac.denom)
A:sympy.printing.latex.arg0->self._print(expr.args[0])
A:sympy.printing.latex.arg1->self._print(expr.args[1])
A:sympy.printing.latex.result->'W{0}_{{{1}}}\\left({2}\\right)'.format(exp, arg1, arg0)
A:sympy.printing.latex.codomain->self._print(morphism.codomain)
A:sympy.printing.latex.den_term_2->Series(*num_arg_list, *den_arg_list)
A:sympy.printing.latex.denom_1->self._print(den_term_1)
A:sympy.printing.latex.denom_2->self._print(den_term_2)
A:sympy.printing.latex.inv_mat->self._print(MIMOSeries(expr.sys2, expr.sys1))
A:sympy.printing.latex.sys1->self._print(expr.sys1)
A:sympy.printing.latex.pretty_name->self._print(Symbol(morphism.name))
A:sympy.printing.latex.pretty_morphism->self._print_Morphism(morphism)
A:sympy.printing.latex.latex_result->self._print(diagram.premises)
A:sympy.printing.latex.string->self._print(field)
A:sympy.printing.latex.contents->self._print(p.args[0])
A:sympy.printing.latex.pred_latex->self._print(pred)
A:sympy.printing.latex.args_latex->', '.join([self._print(a) for a in args])
A:sympy.printing.latex.l->LatexPrinter(**settings)
A:sympy.printing.latex.n_terms->len(terms)
sympy.latex(expr,**settings)
sympy.multiline_latex(lhs,rhs,terms_per_line=1,environment='align*',use_dots=False,**settings)
sympy.print_latex(expr,**settings)
sympy.printing.latex.LatexPrinter(self,settings=None)
sympy.printing.latex.LatexPrinter.__print_mathieu_functions(self,character,args,prime=False,exp=None)
sympy.printing.latex.LatexPrinter.__print_number_polynomial(self,expr,letter,exp=None)
sympy.printing.latex.LatexPrinter._add_parens(self,s)->str
sympy.printing.latex.LatexPrinter._add_parens_lspace(self,s)->str
sympy.printing.latex.LatexPrinter._deal_with_super_sub(self,string:str,style='plain')->str
sympy.printing.latex.LatexPrinter._do_exponent(self,expr:str,exp)
sympy.printing.latex.LatexPrinter._helper_print_standard_power(self,expr,template:str)->str
sympy.printing.latex.LatexPrinter._hprint_BesselBase(self,expr,exp,sym:str)->str
sympy.printing.latex.LatexPrinter._hprint_Function(self,func:str)->str
sympy.printing.latex.LatexPrinter._hprint_airy(self,expr,exp=None,notation='')->str
sympy.printing.latex.LatexPrinter._hprint_airy_prime(self,expr,exp=None,notation='')->str
sympy.printing.latex.LatexPrinter._hprint_one_arg_func(self,expr,exp=None)->str
sympy.printing.latex.LatexPrinter._hprint_variadic_function(self,expr,exp=None)->str
sympy.printing.latex.LatexPrinter._hprint_vec(self,vec)->str
sympy.printing.latex.LatexPrinter._mul_is_clean(self,expr)->bool
sympy.printing.latex.LatexPrinter._needs_add_brackets(self,expr)->bool
sympy.printing.latex.LatexPrinter._needs_brackets(self,expr)->bool
sympy.printing.latex.LatexPrinter._needs_function_brackets(self,expr)->bool
sympy.printing.latex.LatexPrinter._needs_mul_brackets(self,expr,first=False,last=False)->bool
sympy.printing.latex.LatexPrinter._pow_is_clean(self,expr)->bool
sympy.printing.latex.LatexPrinter._print_Abs(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_AccumulationBounds(self,i)
sympy.printing.latex.LatexPrinter._print_Add(self,expr,order=None)
sympy.printing.latex.LatexPrinter._print_Adjoint(self,expr)
sympy.printing.latex.LatexPrinter._print_AlgebraicNumber(self,expr)
sympy.printing.latex.LatexPrinter._print_And(self,e)
sympy.printing.latex.LatexPrinter._print_AppliedPermutation(self,expr)
sympy.printing.latex.LatexPrinter._print_AppliedPredicate(self,expr)
sympy.printing.latex.LatexPrinter._print_ArrayElement(self,expr)
sympy.printing.latex.LatexPrinter._print_ArraySymbol(self,expr)
sympy.printing.latex.LatexPrinter._print_BaseScalarField(self,field)
sympy.printing.latex.LatexPrinter._print_BaseVectorField(self,field)
sympy.printing.latex.LatexPrinter._print_Basic(self,expr)
sympy.printing.latex.LatexPrinter._print_BasisDependent(self,expr:'BasisDependent')
sympy.printing.latex.LatexPrinter._print_BlockMatrix(self,expr)
sympy.printing.latex.LatexPrinter._print_Category(self,morphism)
sympy.printing.latex.LatexPrinter._print_Chi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Complement(self,u)
sympy.printing.latex.LatexPrinter._print_ComplexField(self,expr)
sympy.printing.latex.LatexPrinter._print_ComplexRegion(self,s)
sympy.printing.latex.LatexPrinter._print_ComplexRootOf(self,root)
sympy.printing.latex.LatexPrinter._print_Complexes(self,i)
sympy.printing.latex.LatexPrinter._print_CompositeMorphism(self,morphism)
sympy.printing.latex.LatexPrinter._print_ConditionSet(self,s)
sympy.printing.latex.LatexPrinter._print_Contains(self,e)
sympy.printing.latex.LatexPrinter._print_CoordSystem(self,coordsys)
sympy.printing.latex.LatexPrinter._print_CosineTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_CovarDerivativeOp(self,cvd)
sympy.printing.latex.LatexPrinter._print_Covariance(self,expr)
sympy.printing.latex.LatexPrinter._print_Cross(self,expr)
sympy.printing.latex.LatexPrinter._print_Curl(self,expr)
sympy.printing.latex.LatexPrinter._print_Cycle(self,expr)
sympy.printing.latex.LatexPrinter._print_DFT(self,expr)
sympy.printing.latex.LatexPrinter._print_DMF(self,p)
sympy.printing.latex.LatexPrinter._print_DMP(self,p)
sympy.printing.latex.LatexPrinter._print_Derivative(self,expr)
sympy.printing.latex.LatexPrinter._print_Determinant(self,expr)
sympy.printing.latex.LatexPrinter._print_Diagram(self,diagram)
sympy.printing.latex.LatexPrinter._print_DiagramGrid(self,grid)
sympy.printing.latex.LatexPrinter._print_Dict(self,expr)
sympy.printing.latex.LatexPrinter._print_Differential(self,diff)
sympy.printing.latex.LatexPrinter._print_DiracDelta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Divergence(self,expr)
sympy.printing.latex.LatexPrinter._print_Dot(self,expr)
sympy.printing.latex.LatexPrinter._print_ElementwiseApplyFunction(self,expr)
sympy.printing.latex.LatexPrinter._print_EmptySet(self,e)
sympy.printing.latex.LatexPrinter._print_Equivalent(self,e,altchar=None)
sympy.printing.latex.LatexPrinter._print_Exp1(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_ExpBase(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Expectation(self,expr)
sympy.printing.latex.LatexPrinter._print_FallingFactorial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Feedback(self,expr)
sympy.printing.latex.LatexPrinter._print_FiniteField(self,expr)
sympy.printing.latex.LatexPrinter._print_FiniteSet(self,s)
sympy.printing.latex.LatexPrinter._print_Float(self,expr)
sympy.printing.latex.LatexPrinter._print_FormalPowerSeries(self,s)
sympy.printing.latex.LatexPrinter._print_FourierSeries(self,s)
sympy.printing.latex.LatexPrinter._print_FourierTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_FracElement(self,frac)
sympy.printing.latex.LatexPrinter._print_FractionField(self,expr)
sympy.printing.latex.LatexPrinter._print_FreeModule(self,M)
sympy.printing.latex.LatexPrinter._print_FreeModuleElement(self,m)
sympy.printing.latex.LatexPrinter._print_Function(self,expr:Function,exp=None)->str
sympy.printing.latex.LatexPrinter._print_FunctionClass(self,expr)
sympy.printing.latex.LatexPrinter._print_Gradient(self,expr)
sympy.printing.latex.LatexPrinter._print_HadamardPower(self,expr)
sympy.printing.latex.LatexPrinter._print_HadamardProduct(self,expr)
sympy.printing.latex.LatexPrinter._print_Heaviside(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Identity(self,I)
sympy.printing.latex.LatexPrinter._print_IdentityFunction(self,expr)
sympy.printing.latex.LatexPrinter._print_IdentityMorphism(self,morphism)
sympy.printing.latex.LatexPrinter._print_Idx(self,expr)
sympy.printing.latex.LatexPrinter._print_ImageSet(self,s)
sympy.printing.latex.LatexPrinter._print_Implies(self,e,altchar=None)
sympy.printing.latex.LatexPrinter._print_Indexed(self,expr)
sympy.printing.latex.LatexPrinter._print_IndexedBase(self,expr)
sympy.printing.latex.LatexPrinter._print_IntegerRing(self,expr)
sympy.printing.latex.LatexPrinter._print_Integers(self,i)
sympy.printing.latex.LatexPrinter._print_Integral(self,expr)
sympy.printing.latex.LatexPrinter._print_Intersection(self,u)
sympy.printing.latex.LatexPrinter._print_Interval(self,i)
sympy.printing.latex.LatexPrinter._print_InverseCosineTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_InverseFourierTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_InverseLaplaceTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_InverseMellinTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_InverseSineTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_KroneckerDelta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_KroneckerProduct(self,expr)
sympy.printing.latex.LatexPrinter._print_Lambda(self,expr)
sympy.printing.latex.LatexPrinter._print_LambertW(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_LaplaceTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_Laplacian(self,expr)
sympy.printing.latex.LatexPrinter._print_LeviCivita(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Limit(self,expr)
sympy.printing.latex.LatexPrinter._print_LogOp(self,args,char)
sympy.printing.latex.LatexPrinter._print_MIMOFeedback(self,expr)
sympy.printing.latex.LatexPrinter._print_MIMOParallel(self,expr)
sympy.printing.latex.LatexPrinter._print_MIMOSeries(self,expr)
sympy.printing.latex.LatexPrinter._print_Manifold(self,manifold)
sympy.printing.latex.LatexPrinter._print_MatMul(self,expr)
sympy.printing.latex.LatexPrinter._print_MatPow(self,expr)
sympy.printing.latex.LatexPrinter._print_MatrixBase(self,expr)
sympy.printing.latex.LatexPrinter._print_MatrixElement(self,expr)
sympy.printing.latex.LatexPrinter._print_MatrixHomomorphism(self,h)
sympy.printing.latex.LatexPrinter._print_MatrixSlice(self,expr)
sympy.printing.latex.LatexPrinter._print_MatrixSymbol(self,expr)
sympy.printing.latex.LatexPrinter._print_MellinTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_Mod(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_ModuleImplementedIdeal(self,m)
sympy.printing.latex.LatexPrinter._print_Morphism(self,morphism)
sympy.printing.latex.LatexPrinter._print_Mul(self,expr:Expr)
sympy.printing.latex.LatexPrinter._print_NDimArray(self,expr:NDimArray)
sympy.printing.latex.LatexPrinter._print_NamedMorphism(self,morphism)
sympy.printing.latex.LatexPrinter._print_Naturals(self,n)
sympy.printing.latex.LatexPrinter._print_Naturals0(self,n)
sympy.printing.latex.LatexPrinter._print_NoneType(self,e)
sympy.printing.latex.LatexPrinter._print_Not(self,e)
sympy.printing.latex.LatexPrinter._print_Object(self,object)
sympy.printing.latex.LatexPrinter._print_OmegaPower(self,expr)
sympy.printing.latex.LatexPrinter._print_OneMatrix(self,O)
sympy.printing.latex.LatexPrinter._print_Or(self,e)
sympy.printing.latex.LatexPrinter._print_Order(self,expr)
sympy.printing.latex.LatexPrinter._print_Ordinal(self,expr)
sympy.printing.latex.LatexPrinter._print_OrdinalOmega(self,expr)
sympy.printing.latex.LatexPrinter._print_Parallel(self,expr)
sympy.printing.latex.LatexPrinter._print_PartialDerivative(self,expr)
sympy.printing.latex.LatexPrinter._print_Patch(self,patch)
sympy.printing.latex.LatexPrinter._print_Permutation(self,expr)
sympy.printing.latex.LatexPrinter._print_PermutationMatrix(self,P)
sympy.printing.latex.LatexPrinter._print_Piecewise(self,expr)
sympy.printing.latex.LatexPrinter._print_Poly(self,poly)
sympy.printing.latex.LatexPrinter._print_PolyElement(self,poly)
sympy.printing.latex.LatexPrinter._print_PolynomialRing(self,expr)
sympy.printing.latex.LatexPrinter._print_PolynomialRingBase(self,expr)
sympy.printing.latex.LatexPrinter._print_Pow(self,expr:Pow)
sympy.printing.latex.LatexPrinter._print_PowerSet(self,expr)
sympy.printing.latex.LatexPrinter._print_Predicate(self,expr)
sympy.printing.latex.LatexPrinter._print_PrimeIdeal(self,expr)
sympy.printing.latex.LatexPrinter._print_Probability(self,expr)
sympy.printing.latex.LatexPrinter._print_Product(self,expr)
sympy.printing.latex.LatexPrinter._print_ProductSet(self,p)
sympy.printing.latex.LatexPrinter._print_Quaternion(self,expr)
sympy.printing.latex.LatexPrinter._print_QuotientModule(self,M)
sympy.printing.latex.LatexPrinter._print_QuotientModuleElement(self,m)
sympy.printing.latex.LatexPrinter._print_QuotientRing(self,R)
sympy.printing.latex.LatexPrinter._print_QuotientRingElement(self,x)
sympy.printing.latex.LatexPrinter._print_RandomDomain(self,d)
sympy.printing.latex.LatexPrinter._print_Range(self,s)
sympy.printing.latex.LatexPrinter._print_Rational(self,expr)
sympy.printing.latex.LatexPrinter._print_RationalField(self,expr)
sympy.printing.latex.LatexPrinter._print_Rationals(self,i)
sympy.printing.latex.LatexPrinter._print_RealField(self,expr)
sympy.printing.latex.LatexPrinter._print_Reals(self,i)
sympy.printing.latex.LatexPrinter._print_Relational(self,expr)
sympy.printing.latex.LatexPrinter._print_RisingFactorial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_RootSum(self,expr)
sympy.printing.latex.LatexPrinter._print_SeqFormula(self,s)
sympy.printing.latex.LatexPrinter._print_Series(self,expr)
sympy.printing.latex.LatexPrinter._print_SineTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_SingularityFunction(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Str(self,s)
sympy.printing.latex.LatexPrinter._print_SubModule(self,m)
sympy.printing.latex.LatexPrinter._print_Subs(self,subs)
sympy.printing.latex.LatexPrinter._print_Sum(self,expr)
sympy.printing.latex.LatexPrinter._print_Symbol(self,expr:Symbol,style='plain')
sympy.printing.latex.LatexPrinter._print_SymmetricDifference(self,u)
sympy.printing.latex.LatexPrinter._print_TensAdd(self,expr)
sympy.printing.latex.LatexPrinter._print_TensMul(self,expr)
sympy.printing.latex.LatexPrinter._print_Tensor(self,expr)
sympy.printing.latex.LatexPrinter._print_TensorElement(self,expr)
sympy.printing.latex.LatexPrinter._print_TensorIndex(self,expr)
sympy.printing.latex.LatexPrinter._print_TensorProduct(self,expr)
sympy.printing.latex.LatexPrinter._print_Tr(self,p)
sympy.printing.latex.LatexPrinter._print_Trace(self,expr)
sympy.printing.latex.LatexPrinter._print_TransferFunction(self,expr)
sympy.printing.latex.LatexPrinter._print_TransferFunctionMatrix(self,expr)
sympy.printing.latex.LatexPrinter._print_Transpose(self,expr)
sympy.printing.latex.LatexPrinter._print_Tuple(self,expr)
sympy.printing.latex.LatexPrinter._print_UndefinedFunction(self,expr)
sympy.printing.latex.LatexPrinter._print_UnevaluatedExpr(self,expr)
sympy.printing.latex.LatexPrinter._print_UnifiedTransform(self,expr,s,inverse=False)
sympy.printing.latex.LatexPrinter._print_Union(self,u)
sympy.printing.latex.LatexPrinter._print_UniversalSet(self,expr)
sympy.printing.latex.LatexPrinter._print_Variance(self,expr)
sympy.printing.latex.LatexPrinter._print_WedgeProduct(self,expr)
sympy.printing.latex.LatexPrinter._print_Xor(self,e)
sympy.printing.latex.LatexPrinter._print_Ynm(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_ZeroMatrix(self,Z)
sympy.printing.latex.LatexPrinter._print_Znm(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_airyai(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_airyaiprime(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_airybi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_airybiprime(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_assoc_laguerre(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_assoc_legendre(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_bell(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_bernoulli(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_besseli(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_besselj(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_besselk(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_bessely(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_beta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_betainc(self,expr,exp=None,operator='B')
sympy.printing.latex.LatexPrinter._print_betainc_regularized(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_binomial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_bool(self,e:bool|BooleanTrue|BooleanFalse)
sympy.printing.latex.LatexPrinter._print_catalan(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_ceiling(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_chebyshevt(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_chebyshevu(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_conjugate(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_dict(self,d)
sympy.printing.latex.LatexPrinter._print_dirichlet_eta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_divisor_sigma(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_elliptic_e(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_elliptic_f(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_elliptic_k(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_elliptic_pi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_euler(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_expint(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_factorial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_factorial2(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_fibonacci(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_float(self,expr)
sympy.printing.latex.LatexPrinter._print_floor(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_frac(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_fresnelc(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_fresnels(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_gegenbauer(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_genocchi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hankel1(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hankel2(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hermite(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hn1(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hn2(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hyper(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_im(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_int(self,expr)
sympy.printing.latex.LatexPrinter._print_jacobi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_jn(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_laguerre(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_legendre(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_lerchphi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_list(self,expr)
sympy.printing.latex.LatexPrinter._print_log(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_lowergamma(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_lucas(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_mathieuc(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_mathieucprime(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_mathieus(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_mathieusprime(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_matrix_contents(self,expr)
sympy.printing.latex.LatexPrinter._print_meijerg(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_mpq(self,expr)
sympy.printing.latex.LatexPrinter._print_mpz(self,expr)
sympy.printing.latex.LatexPrinter._print_polar_lift(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_polylog(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_primenu(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_primeomega(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_re(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_reduced_totient(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_set(self,s)
sympy.printing.latex.LatexPrinter._print_stieltjes(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_subfactorial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_totient(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_tribonacci(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_tuple(self,expr)
sympy.printing.latex.LatexPrinter._print_udivisor_sigma(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_uppergamma(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_yn(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_zeta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._printer_tensor_indices(self,name,indices,index_map:dict)
sympy.printing.latex.LatexPrinter._special_function_classes(self)
sympy.printing.latex.LatexPrinter.doprint(self,expr)->str
sympy.printing.latex.LatexPrinter.emptyPrinter(self,expr)
sympy.printing.latex.LatexPrinter.parenthesize(self,item,level,is_neg=False,strict=False)->str
sympy.printing.latex.LatexPrinter.parenthesize_super(self,s)
sympy.printing.latex.latex(expr,**settings)
sympy.printing.latex.latex_escape(s:str)->str
sympy.printing.latex.multiline_latex(lhs,rhs,terms_per_line=1,environment='align*',use_dots=False,**settings)
sympy.printing.latex.print_latex(expr,**settings)
sympy.printing.latex.translate(s:str)->str


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/conventions.py----------------------------------------
A:sympy.printing.conventions._name_with_digits_p->re.compile('^([^\\W\\d_]+)(\\d+)$', re.U)
A:sympy.printing.conventions.pos_hat->len(text)
A:sympy.printing.conventions.pos_usc->len(text)
A:sympy.printing.conventions.pos_next->min(pos_hat, pos_usc)
A:sympy.printing.conventions.m->re.compile('^([^\\W\\d_]+)(\\d+)$', re.U).match(name)
A:sympy.printing.conventions.(name, sub)->re.compile('^([^\\W\\d_]+)(\\d+)$', re.U).match(name).groups()
sympy.printing.conventions.requires_partial(expr)
sympy.printing.conventions.split_super_sub(text)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/printer.py----------------------------------------
A:sympy.printing.printer.original->printer._context.copy()
A:sympy.printing.printer.settings->self.__print_cls._get_initial_settings()
A:sympy.printing.printer.self._settings->self._get_initial_settings()
A:sympy.printing.printer.i->classes.index(Function)
A:sympy.printing.printer.printmethod->getattr(self, printmethodname, None)
A:sympy.printing.printer.params->list(inspect.signature(f).parameters.values())
A:sympy.printing.printer.cls->type(f'{f.__qualname__}_PrintFunction', (_PrintFunction,), {'__doc__': f.__doc__})
sympy.printing.printer.Printer(self,settings=None)
sympy.printing.printer.Printer._as_ordered_terms(self,expr,order=None)
sympy.printing.printer.Printer._get_initial_settings(cls)
sympy.printing.printer.Printer._print(self,expr,**kwargs)->str
sympy.printing.printer.Printer.doprint(self,expr)
sympy.printing.printer.Printer.emptyPrinter(self,expr)
sympy.printing.printer.Printer.order(self)
sympy.printing.printer.Printer.set_global_settings(cls,**settings)
sympy.printing.printer._PrintFunction(self,f,print_cls:Type[Printer])
sympy.printing.printer._PrintFunction.__reduce__(self)
sympy.printing.printer._PrintFunction.__signature__(self)->inspect.Signature
sympy.printing.printer.print_function(print_cls)
sympy.printing.printer.printer_context(printer,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/rust.py----------------------------------------
A:sympy.printing.rust.self.known_functions->dict(known_functions)
A:sympy.printing.rust.userfuncs->settings.get('user_functions', {})
A:sympy.printing.rust.self._dereference->set(settings.get('dereference', []))
A:sympy.printing.rust.self.reserved_words->set(reserved_words)
A:sympy.printing.rust.expr->type(expr)(Float(expr.base), expr.exp)
A:sympy.printing.rust.ret->super()._print_Integer(expr)
A:sympy.printing.rust.lhs_code->self._print(lhs)
A:sympy.printing.rust.rhs_code->self._print(rhs)
A:sympy.printing.rust.code0->self._print(e)
A:sympy.printing.rust.name->super()._print_Symbol(expr)
A:sympy.printing.rust.code_lines->self.indent_code(code.splitlines(True))
sympy.printing.rust.RustCodePrinter(self,settings={})
sympy.printing.rust.RustCodePrinter._declare_number_const(self,name,value)
sympy.printing.rust.RustCodePrinter._format_code(self,lines)
sympy.printing.rust.RustCodePrinter._get_comment(self,text)
sympy.printing.rust.RustCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.rust.RustCodePrinter._get_statement(self,codestring)
sympy.printing.rust.RustCodePrinter._print_Assignment(self,expr)
sympy.printing.rust.RustCodePrinter._print_BooleanFalse(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_BooleanTrue(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_Dummy(self,expr)
sympy.printing.rust.RustCodePrinter._print_Exp1(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_Float(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_Function(self,expr)
sympy.printing.rust.RustCodePrinter._print_ITE(self,expr)
sympy.printing.rust.RustCodePrinter._print_Idx(self,expr)
sympy.printing.rust.RustCodePrinter._print_Indexed(self,expr)
sympy.printing.rust.RustCodePrinter._print_Infinity(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_Integer(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_MatrixBase(self,A)
sympy.printing.rust.RustCodePrinter._print_MatrixElement(self,expr)
sympy.printing.rust.RustCodePrinter._print_NaN(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_NegativeInfinity(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_Pi(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_Piecewise(self,expr)
sympy.printing.rust.RustCodePrinter._print_Pow(self,expr)
sympy.printing.rust.RustCodePrinter._print_Rational(self,expr)
sympy.printing.rust.RustCodePrinter._print_Relational(self,expr)
sympy.printing.rust.RustCodePrinter._print_SparseRepMatrix(self,mat)
sympy.printing.rust.RustCodePrinter._print_Symbol(self,expr)
sympy.printing.rust.RustCodePrinter._print_bool(self,expr,_type=False)
sympy.printing.rust.RustCodePrinter._print_caller_var(self,expr)
sympy.printing.rust.RustCodePrinter._rate_index_position(self,p)
sympy.printing.rust.RustCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.rust.RustCodePrinter.indent_code(self,code)
sympy.printing.rust.print_rust_code(expr,**settings)
sympy.printing.rust.rust_code(expr,assign_to=None,**settings)
sympy.rust_code(expr,assign_to=None,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/smtlib.py----------------------------------------
A:sympy.printing.smtlib.self._known_types->dict(self._settings['known_types'])
A:sympy.printing.smtlib.self._known_constants->dict(self._settings['known_constants'])
A:sympy.printing.smtlib.self._known_functions->dict(self._settings['known_functions'])
A:sympy.printing.smtlib.args_str->' '.join((a if isinstance(a, str) else self._print(a) for a in args))
A:sympy.printing.smtlib.name->self._known_constants.get(x)
A:sympy.printing.smtlib.symbol_table->_auto_infer_smtlib_types(*expr, symbol_table=symbol_table)
A:sympy.printing.smtlib.p->SMTLibPrinter(settings, symbol_table)
sympy.printing.smtlib.SMTLibPrinter(self,settings:typing.Optional[dict]=None,symbol_table=None)
sympy.printing.smtlib.SMTLibPrinter._is_legal_name(self,s:str)
sympy.printing.smtlib.SMTLibPrinter._print_BooleanFalse(self,x:BooleanFalse)
sympy.printing.smtlib.SMTLibPrinter._print_BooleanFunction(self,e:BooleanFunction)
sympy.printing.smtlib.SMTLibPrinter._print_BooleanTrue(self,x:BooleanTrue)
sympy.printing.smtlib.SMTLibPrinter._print_Exp1(self,x)
sympy.printing.smtlib.SMTLibPrinter._print_Expr(self,e:Expr)
sympy.printing.smtlib.SMTLibPrinter._print_Float(self,x:Float)
sympy.printing.smtlib.SMTLibPrinter._print_Function(self,e)
sympy.printing.smtlib.SMTLibPrinter._print_Integer(self,x:Integer)
sympy.printing.smtlib.SMTLibPrinter._print_Interval(self,e:Interval)
sympy.printing.smtlib.SMTLibPrinter._print_NumberSymbol(self,x)
sympy.printing.smtlib.SMTLibPrinter._print_Piecewise(self,e:Piecewise)
sympy.printing.smtlib.SMTLibPrinter._print_Rational(self,x:Rational)
sympy.printing.smtlib.SMTLibPrinter._print_Relational(self,e:Relational)
sympy.printing.smtlib.SMTLibPrinter._print_Symbol(self,x:Symbol)
sympy.printing.smtlib.SMTLibPrinter._print_UndefinedFunction(self,x)
sympy.printing.smtlib.SMTLibPrinter._print_Unequality(self,e:Unequality)
sympy.printing.smtlib.SMTLibPrinter._print_float(self,x:float)
sympy.printing.smtlib.SMTLibPrinter._print_int(self,x:int)
sympy.printing.smtlib.SMTLibPrinter._s_expr(self,op:str,args:typing.Union[list,tuple])->str
sympy.printing.smtlib.SMTLibPrinter.emptyPrinter(self,expr)
sympy.printing.smtlib._auto_assert_smtlib(e:Expr,p:SMTLibPrinter,log_warn:typing.Callable[[str],None])
sympy.printing.smtlib._auto_declare_smtlib(sym:typing.Union[Symbol,Function],p:SMTLibPrinter,log_warn:typing.Callable[[str],None])
sympy.printing.smtlib._auto_infer_smtlib_types(*exprs:Basic,symbol_table:typing.Optional[dict]=None)->dict
sympy.printing.smtlib.smtlib_code(expr,auto_assert=True,auto_declare=True,precision=None,symbol_table=None,known_types=None,known_constants=None,known_functions=None,prefix_expressions=None,suffix_expressions=None,log_warn=None)
sympy.smtlib_code(expr,auto_assert=True,auto_declare=True,precision=None,symbol_table=None,known_types=None,known_constants=None,known_functions=None,prefix_expressions=None,suffix_expressions=None,log_warn=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/aesaracode.py----------------------------------------
A:sympy.printing.aesaracode.aesara->import_module('aesara')
A:sympy.printing.aesaracode.true_divide->getattr(aet, 'true_divide', None)
A:sympy.printing.aesaracode.self.cache->kwargs.pop('cache', {})
A:sympy.printing.aesaracode.key->self._get_key(s, name, dtype=dtype, broadcastable=broadcastable)
A:sympy.printing.aesaracode.value->aet.tensor(name=name, dtype=dtype, broadcastable=broadcastable)
A:sympy.printing.aesaracode.dtype->kwargs.get('dtypes', {}).get(X)
A:sympy.printing.aesaracode.bc->kwargs.get('broadcastables', {}).get(s)
A:sympy.printing.aesaracode.result->aet.dot(result, children[0])
A:sympy.printing.aesaracode.parent->self._print(expr.parent, **kwargs)
A:sympy.printing.aesaracode.rowslice->self._print(slice(*expr.rowslice), **kwargs)
A:sympy.printing.aesaracode.colslice->self._print(slice(*expr.colslice), **kwargs)
A:sympy.printing.aesaracode.p_cond->self._print(cond, **kwargs)
A:sympy.printing.aesaracode.p_e->self._print(e, **kwargs)
A:sympy.printing.aesaracode.p_remaining->self._print(sympy.Piecewise(*expr.args[1:]), **kwargs)
A:sympy.printing.aesaracode.rv->Rop(rv, var, aet.ones_like(var))
A:sympy.printing.aesaracode.var->self._print(var, **kwargs)
A:sympy.printing.aesaracode.maxdim->max(dims.values())
A:sympy.printing.aesaracode.cache->kwargs.pop('cache', {})
A:sympy.printing.aesaracode.dtypes->kwargs.pop('dtypes', {})
A:sympy.printing.aesaracode.broadcastables->dim_handling(inputs, dim=dim, dims=dims, broadcastables=broadcastables)
A:sympy.printing.aesaracode.code->partial(aesara_code, cache=cache, dtypes=dtypes, broadcastables=broadcastables)
A:sympy.printing.aesaracode.tinputs->list(map(code, inputs))
A:sympy.printing.aesaracode.toutputs->list(map(code, outputs))
A:sympy.printing.aesaracode.func->import_module('aesara').function(tinputs, toutputs, **kwargs)
A:sympy.printing.aesaracode.out->func(*args)
sympy.printing.aesaracode.AesaraPrinter(self,*args,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._get_key(self,s,name=None,dtype=None,broadcastable=None)
sympy.printing.aesaracode.AesaraPrinter._get_or_create(self,s,name=None,dtype=None,broadcastable=None)
sympy.printing.aesaracode.AesaraPrinter._print_AppliedUndef(self,s,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_Basic(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_BlockMatrix(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_DenseMatrix(self,X,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_Derivative(self,deriv,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_Integer(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_MatMul(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_MatPow(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_MatrixSlice(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_MatrixSymbol(self,X,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_Number(self,n,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_Pi(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_Piecewise(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_Rational(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_Symbol(self,s,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_factorial(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter._print_slice(self,expr,**kwargs)
sympy.printing.aesaracode.AesaraPrinter.doprint(self,expr,dtypes=None,broadcastables=None)
sympy.printing.aesaracode.AesaraPrinter.emptyPrinter(self,expr)
sympy.printing.aesaracode.aesara_code(expr,cache=None,**kwargs)
sympy.printing.aesaracode.aesara_function(inputs,outputs,scalar=False,*,dim=None,dims=None,broadcastables=None,**kwargs)
sympy.printing.aesaracode.dim_handling(inputs,dim=None,dims=None,broadcastables=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/numpy.py----------------------------------------
A:sympy.printing.numpy._not_in_numpy->'erf erfc factorial gamma loggamma'.split()
A:sympy.printing.numpy._known_functions_numpy->dict(_in_numpy, **{'acos': 'arccos', 'acosh': 'arccosh', 'asin': 'arcsin', 'asinh': 'arcsinh', 'atan': 'arctan', 'atan2': 'arctan2', 'atanh': 'arctanh', 'exp2': 'exp2', 'sign': 'sign', 'logaddexp': 'logaddexp', 'logaddexp2': 'logaddexp2'})
A:sympy.printing.numpy.self.language->'Python with {}'.format(self._module)
A:sympy.printing.numpy.self.printmethod->'_{}code'.format(self._module)
A:sympy.printing.numpy.lamda->Lambda((i, j), lamda(i, j))
A:sympy.printing.numpy.func->self._module_format(self._module + '.array')
A:sympy.printing.numpy.vect->'{}({})'.format(self._module_format(self._module + '.diag'), self._print(expr.arg))
A:sympy.printing.numpy.exprs->'[{}]'.format(','.join((self._print(arg.expr) for arg in expr.args)))
A:sympy.printing.numpy.conds->'[{}]'.format(','.join((print_cond(arg.cond) for arg in expr.args)))
A:sympy.printing.numpy.lhs->self._print(expr.lhs)
A:sympy.printing.numpy.rhs->self._print(expr.rhs)
A:sympy.printing.numpy.expr->Pow(expr.base, expr.exp.evalf(), evaluate=False)
A:sympy.printing.numpy.betainc->self._module_format('scipy.special.betainc')
A:sympy.printing.numpy.beta->self._module_format('scipy.special.beta')
A:sympy.printing.numpy.(integration_vars, limits)->_unpack_integral_limits(e)
A:sympy.printing.numpy.module_str->self._module_format('scipy.integrate.nquad')
A:sympy.printing.numpy.limit_str->'({})'.format(', '.join(('(%s, %s)' % tuple(map(self._print, l)) for l in limits)))
sympy.printing.numpy.CuPyPrinter(self,settings=None)
sympy.printing.numpy.JaxPrinter(self,settings=None)
sympy.printing.numpy.JaxPrinter._print_And(self,expr)
sympy.printing.numpy.JaxPrinter._print_Or(self,expr)
sympy.printing.numpy.NumPyPrinter(self,settings=None)
sympy.printing.numpy.NumPyPrinter._print_Adjoint(self,expr)
sympy.printing.numpy.NumPyPrinter._print_And(self,expr)
sympy.printing.numpy.NumPyPrinter._print_BlockMatrix(self,expr)
sympy.printing.numpy.NumPyPrinter._print_DiagMatrix(self,expr)
sympy.printing.numpy.NumPyPrinter._print_DiagonalMatrix(self,expr)
sympy.printing.numpy.NumPyPrinter._print_DiagonalOf(self,expr)
sympy.printing.numpy.NumPyPrinter._print_DotProduct(self,expr)
sympy.printing.numpy.NumPyPrinter._print_FunctionMatrix(self,expr)
sympy.printing.numpy.NumPyPrinter._print_HadamardProduct(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Identity(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Inverse(self,expr)
sympy.printing.numpy.NumPyPrinter._print_KroneckerProduct(self,expr)
sympy.printing.numpy.NumPyPrinter._print_MatMul(self,expr)
sympy.printing.numpy.NumPyPrinter._print_MatPow(self,expr)
sympy.printing.numpy.NumPyPrinter._print_MatrixBase(self,expr)
sympy.printing.numpy.NumPyPrinter._print_MatrixSolve(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Max(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Min(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Mod(self,expr)
sympy.printing.numpy.NumPyPrinter._print_NDimArray(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Not(self,expr)
sympy.printing.numpy.NumPyPrinter._print_OneMatrix(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Or(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Piecewise(self,expr)
sympy.printing.numpy.NumPyPrinter._print_Pow(self,expr,rational=False)
sympy.printing.numpy.NumPyPrinter._print_Relational(self,expr)
sympy.printing.numpy.NumPyPrinter._print_ZeroMatrix(self,expr)
sympy.printing.numpy.NumPyPrinter._print_arg(self,expr)
sympy.printing.numpy.NumPyPrinter._print_im(self,expr)
sympy.printing.numpy.NumPyPrinter._print_re(self,expr)
sympy.printing.numpy.NumPyPrinter._print_seq(self,seq)
sympy.printing.numpy.NumPyPrinter._print_sinc(self,expr)
sympy.printing.numpy.SciPyPrinter(self,settings=None)
sympy.printing.numpy.SciPyPrinter._print_Ci(self,expr)
sympy.printing.numpy.SciPyPrinter._print_Integral(self,e)
sympy.printing.numpy.SciPyPrinter._print_Si(self,expr)
sympy.printing.numpy.SciPyPrinter._print_SparseRepMatrix(self,expr)
sympy.printing.numpy.SciPyPrinter._print_airyai(self,expr)
sympy.printing.numpy.SciPyPrinter._print_airyaiprime(self,expr)
sympy.printing.numpy.SciPyPrinter._print_airybi(self,expr)
sympy.printing.numpy.SciPyPrinter._print_airybiprime(self,expr)
sympy.printing.numpy.SciPyPrinter._print_assoc_legendre(self,expr)
sympy.printing.numpy.SciPyPrinter._print_bernoulli(self,expr)
sympy.printing.numpy.SciPyPrinter._print_betainc(self,expr)
sympy.printing.numpy.SciPyPrinter._print_betainc_regularized(self,expr)
sympy.printing.numpy.SciPyPrinter._print_fresnelc(self,expr)
sympy.printing.numpy.SciPyPrinter._print_fresnels(self,expr)
sympy.printing.numpy.SciPyPrinter._print_harmonic(self,expr)
sympy.printing.numpy.SciPyPrinter._print_lowergamma(self,expr)
sympy.printing.numpy.SciPyPrinter._print_uppergamma(self,expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/octave.py----------------------------------------
A:sympy.printing.octave.self.known_functions->dict(zip(known_fcns_src1, known_fcns_src1))
A:sympy.printing.octave.userfuncs->settings.get('user_functions', {})
A:sympy.printing.octave.(var, start, stop)->map(self._print, [i.label, i.lower + 1, i.upper + 1])
A:sympy.printing.octave.prec->precedence(expr)
A:sympy.printing.octave.(c, e)->_keep_coeff(-c, e).as_coeff_Mul()
A:sympy.printing.octave.expr->_keep_coeff(-c, e)
A:sympy.printing.octave.args->sympy.core.Mul.make_args(expr)
A:sympy.printing.octave.lhs_code->self._print(lhs)
A:sympy.printing.octave.rhs_code->self._print(rhs)
A:sympy.printing.octave.PREC->precedence(expr)
A:sympy.printing.octave.temp->Piecewise(*zip(expressions, conditions))
A:sympy.printing.octave.L->A.col_list()
A:sympy.printing.octave.I->Matrix([[k[0] + 1 for k in L]])
A:sympy.printing.octave.J->Matrix([[k[1] + 1 for k in L]])
A:sympy.printing.octave.AIJ->Matrix([[k[2] for k in L]])
A:sympy.printing.octave.lstr->self._print(l)
A:sympy.printing.octave.s->', '.join((self._print(n) for n in shape))
A:sympy.printing.octave.code0->self._print(e)
A:sympy.printing.octave.code_lines->self.indent_code(code.splitlines(True))
sympy.octave_code(expr,assign_to=None,**settings)
sympy.printing.octave.OctaveCodePrinter(self,settings={})
sympy.printing.octave.OctaveCodePrinter._declare_number_const(self,name,value)
sympy.printing.octave.OctaveCodePrinter._format_code(self,lines)
sympy.printing.octave.OctaveCodePrinter._get_comment(self,text)
sympy.printing.octave.OctaveCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.octave.OctaveCodePrinter._get_statement(self,codestring)
sympy.printing.octave.OctaveCodePrinter._nested_binary_math_func(self,expr)
sympy.printing.octave.OctaveCodePrinter._one_or_two_reversed_args(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Assignment(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_BooleanFalse(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_BooleanTrue(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Exp1(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_GoldenRatio(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_HadamardPower(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_HadamardProduct(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Identity(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Idx(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_ImaginaryUnit(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Indexed(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Infinity(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_KroneckerDelta(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_MatPow(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_MatrixBase(self,A)
sympy.printing.octave.OctaveCodePrinter._print_MatrixElement(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_MatrixSlice(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_MatrixSolve(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Mul(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_NaN(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Pi(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Piecewise(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Pow(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Relational(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_SparseRepMatrix(self,A)
sympy.printing.octave.OctaveCodePrinter._print_airyai(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_airyaiprime(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_airybi(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_airybiprime(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_bool(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_expint(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_hankel1(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_hankel2(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_jn(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_list(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_lowergamma(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_sinc(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_uppergamma(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_yn(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_zeta(self,expr)
sympy.printing.octave.OctaveCodePrinter._rate_index_position(self,p)
sympy.printing.octave.OctaveCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.octave.OctaveCodePrinter.indent_code(self,code)
sympy.printing.octave.octave_code(expr,assign_to=None,**settings)
sympy.printing.octave.print_octave_code(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/maple.py----------------------------------------
A:sympy.printing.maple.self.known_functions->dict(known_functions)
A:sympy.printing.maple.userfuncs->settings.get('user_functions', {})
A:sympy.printing.maple.lhs->self._print(expr.lhs)
A:sympy.printing.maple.rhs->self._print(expr.rhs)
A:sympy.printing.maple.PREC->precedence(expr)
A:sympy.printing.maple._inbrace->', '.join(_coup_list)
A:sympy.printing.maple.lhs_code->self.parenthesize(expr.lhs, PREC)
A:sympy.printing.maple.rhs_code->self.parenthesize(expr.rhs, PREC)
A:sympy.printing.maple._strM->'Matrix({list}, storage = {storage})'.format(list=self._print(expr.tolist()), storage='sparse' if sparse else 'rectangular')
A:sympy.printing.maple._fact_list->list(expr.args)
A:sympy.printing.maple._second_arg->'{var}'.format(var=self._print(_var))
sympy.maple_code(expr,assign_to=None,**settings)
sympy.print_maple_code(expr,**settings)
sympy.printing.maple.MapleCodePrinter(self,settings=None)
sympy.printing.maple.MapleCodePrinter._declare_number_const(self,name,value)
sympy.printing.maple.MapleCodePrinter._format_code(self,lines)
sympy.printing.maple.MapleCodePrinter._get_comment(self,text)
sympy.printing.maple.MapleCodePrinter._get_matrix(self,expr,sparse=False)
sympy.printing.maple.MapleCodePrinter._get_statement(self,codestring)
sympy.printing.maple.MapleCodePrinter._print_Assignment(self,expr)
sympy.printing.maple.MapleCodePrinter._print_BooleanFalse(self,expr)
sympy.printing.maple.MapleCodePrinter._print_BooleanTrue(self,expr)
sympy.printing.maple.MapleCodePrinter._print_Derivative(self,expr)
sympy.printing.maple.MapleCodePrinter._print_HadamardProduct(self,expr)
sympy.printing.maple.MapleCodePrinter._print_Identity(self,expr)
sympy.printing.maple.MapleCodePrinter._print_Idx(self,expr)
sympy.printing.maple.MapleCodePrinter._print_Infinity(self,expr)
sympy.printing.maple.MapleCodePrinter._print_MatMul(self,expr)
sympy.printing.maple.MapleCodePrinter._print_MatPow(self,expr)
sympy.printing.maple.MapleCodePrinter._print_MatrixBase(self,expr)
sympy.printing.maple.MapleCodePrinter._print_MatrixElement(self,expr)
sympy.printing.maple.MapleCodePrinter._print_NaN(self,expr)
sympy.printing.maple.MapleCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.maple.MapleCodePrinter._print_NumberSymbol(self,expr)
sympy.printing.maple.MapleCodePrinter._print_Piecewise(self,expr)
sympy.printing.maple.MapleCodePrinter._print_Pow(self,expr,**kwargs)
sympy.printing.maple.MapleCodePrinter._print_Rational(self,expr)
sympy.printing.maple.MapleCodePrinter._print_Relational(self,expr)
sympy.printing.maple.MapleCodePrinter._print_SparseRepMatrix(self,expr)
sympy.printing.maple.MapleCodePrinter._print_Tuple(self,expr)
sympy.printing.maple.MapleCodePrinter._print_bool(self,expr)
sympy.printing.maple.MapleCodePrinter._print_tuple(self,expr)
sympy.printing.maple.maple_code(expr,assign_to=None,**settings)
sympy.printing.maple.print_maple_code(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/jscode.py----------------------------------------
A:sympy.printing.jscode.self.known_functions->dict(known_functions)
A:sympy.printing.jscode.userfuncs->settings.get('user_functions', {})
A:sympy.printing.jscode.PREC->precedence(expr)
A:sympy.printing.jscode.lhs_code->self._print(expr.lhs)
A:sympy.printing.jscode.rhs_code->self._print(expr.rhs)
A:sympy.printing.jscode.code0->self._print(e)
A:sympy.printing.jscode.code_lines->self.indent_code(code.splitlines(True))
sympy.jscode(expr,assign_to=None,**settings)
sympy.print_jscode(expr,**settings)
sympy.printing.jscode.JavascriptCodePrinter(self,settings={})
sympy.printing.jscode.JavascriptCodePrinter._declare_number_const(self,name,value)
sympy.printing.jscode.JavascriptCodePrinter._format_code(self,lines)
sympy.printing.jscode.JavascriptCodePrinter._get_comment(self,text)
sympy.printing.jscode.JavascriptCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.jscode.JavascriptCodePrinter._get_statement(self,codestring)
sympy.printing.jscode.JavascriptCodePrinter._print_Exp1(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Idx(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Indexed(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Infinity(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_MatrixElement(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Mod(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Pi(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Piecewise(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Pow(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Rational(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Relational(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._rate_index_position(self,p)
sympy.printing.jscode.JavascriptCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.jscode.JavascriptCodePrinter.indent_code(self,code)
sympy.printing.jscode.jscode(expr,assign_to=None,**settings)
sympy.printing.jscode.print_jscode(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/pycode.py----------------------------------------
A:sympy.printing.pycode._kf->dict(chain(_known_functions.items(), [(k, 'mpmath.' + v) for (k, v) in _known_functions_mpmath.items()]))
A:sympy.printing.pycode._default_settings->dict(CodePrinter._default_settings, user_functions={}, precision=17, inline=True, fully_qualified_modules=True, contract=False, standard='python3')
A:sympy.printing.pycode.std->'python{}'.format(sys.version_info.major)
A:sympy.printing.pycode.self.module_imports->defaultdict(set)
A:sympy.printing.pycode.self.known_functions->dict(self._kf, **(settings or {}).get('user_functions', {}))
A:sympy.printing.pycode.self.known_constants->dict(self._kc, **(settings or {}).get('user_constants', {}))
A:sympy.printing.pycode.parts->fqn.split('.')
A:sympy.printing.pycode.N->len(args)
A:sympy.printing.pycode.PREC->precedence(expr)
A:sympy.printing.pycode.lhs->self._print(self._arrayify(expr.lhs))
A:sympy.printing.pycode.rhs->self._print(self._arrayify(expr.rhs))
A:sympy.printing.pycode.func->self._module_format(sqrt)
A:sympy.printing.pycode.body->'\n'.join((self._print(arg) for arg in whl.body))
A:sympy.printing.pycode.print_args->'{} % ({})'.format(self._print(prnt.format_string), print_args)
A:sympy.printing.pycode.arg->self.parenthesize(expr.base, PREC, strict=False)
A:sympy.printing.pycode.num->self._print(S.One)
A:sympy.printing.pycode.base_str->self.parenthesize(expr.base, PREC, strict=False)
A:sympy.printing.pycode.exp_str->self.parenthesize(expr.exp, PREC, strict=False)
A:sympy.printing.pycode.letters->self._get_letter_generator_for_einsum()
A:sympy.printing.pycode.l->next(letters)
A:sympy.printing.pycode.contraction_string->','.join([''.join([next(letters) for j in range(i)]) for i in expr.subranks])
A:sympy.printing.pycode.elems->self._print(base)
A:sympy.printing.pycode.(contraction_string, letters_free, letters_dum)->self._get_einsum_string(ranks, contraction_indices)
A:sympy.printing.pycode.diagonal_indices->list(expr.diagonal_indices)
A:sympy.printing.pycode.(diagonal_string, letters_free, letters_dum)->self._get_einsum_string(subranks, diagonal_indices)
A:sympy.printing.pycode.name->super()._print_Symbol(expr)
A:sympy.printing.pycode._not_in_mpmath->'log1p log2'.split()
A:sympy.printing.pycode._known_functions_mpmath->dict(_in_mpmath, **{'beta': 'beta', 'frac': 'frac', 'fresnelc': 'fresnelc', 'fresnels': 'fresnels', 'sign': 'sign', 'loggamma': 'loggamma', 'hyper': 'hyper', 'meijerg': 'meijerg', 'besselj': 'besselj', 'bessely': 'bessely', 'besseli': 'besseli', 'besselk': 'besselk'})
A:sympy.printing.pycode.args->str(tuple(map(int, e._mpf_)))
A:sympy.printing.pycode.(integration_vars, limits)->_unpack_integral_limits(e)
sympy.printing.pycode.AbstractPythonCodePrinter(self,settings=None)
sympy.printing.pycode.AbstractPythonCodePrinter._declare_number_const(self,name,value)
sympy.printing.pycode.AbstractPythonCodePrinter._expand_fold_binary_op(self,op,args)
sympy.printing.pycode.AbstractPythonCodePrinter._expand_reduce_binary_op(self,op,args)
sympy.printing.pycode.AbstractPythonCodePrinter._format_code(self,lines)
sympy.printing.pycode.AbstractPythonCodePrinter._get_comment(self,text)
sympy.printing.pycode.AbstractPythonCodePrinter._get_statement(self,codestring)
sympy.printing.pycode.AbstractPythonCodePrinter._hprint_Pow(self,expr,rational=False,sqrt='math.sqrt')
sympy.printing.pycode.AbstractPythonCodePrinter._indent_codestring(self,codestring)
sympy.printing.pycode.AbstractPythonCodePrinter._module_format(self,fqn,register=True)
sympy.printing.pycode.AbstractPythonCodePrinter._print_ComplexInfinity(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Declaration(self,decl)
sympy.printing.pycode.AbstractPythonCodePrinter._print_FunctionDefinition(self,fd)
sympy.printing.pycode.AbstractPythonCodePrinter._print_ITE(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_ImaginaryUnit(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Infinity(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_KroneckerDelta(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_MatrixBase(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Mod(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_NaN(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_NoneToken(self,arg)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Piecewise(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Print(self,prnt)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Relational(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Return(self,ret)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Stream(self,strm)
sympy.printing.pycode.AbstractPythonCodePrinter._print_Sum(self,expr)
sympy.printing.pycode.AbstractPythonCodePrinter._print_While(self,whl)
sympy.printing.pycode.ArrayPrinter
sympy.printing.pycode.ArrayPrinter._arrayify(self,indexed)
sympy.printing.pycode.ArrayPrinter._get_einsum_string(self,subranks,contraction_indices)
sympy.printing.pycode.ArrayPrinter._get_letter_generator_for_einsum(self)
sympy.printing.pycode.ArrayPrinter._print_ArrayAdd(self,expr)
sympy.printing.pycode.ArrayPrinter._print_ArrayContraction(self,expr)
sympy.printing.pycode.ArrayPrinter._print_ArrayDiagonal(self,expr)
sympy.printing.pycode.ArrayPrinter._print_ArrayTensorProduct(self,expr)
sympy.printing.pycode.ArrayPrinter._print_Assignment(self,expr)
sympy.printing.pycode.ArrayPrinter._print_IndexedBase(self,expr)
sympy.printing.pycode.ArrayPrinter._print_OneArray(self,expr)
sympy.printing.pycode.ArrayPrinter._print_PermuteDims(self,expr)
sympy.printing.pycode.ArrayPrinter._print_ZeroArray(self,expr)
sympy.printing.pycode.MpmathPrinter(PythonCodePrinter)
sympy.printing.pycode.MpmathPrinter._print_Float(self,e)
sympy.printing.pycode.MpmathPrinter._print_Half(self,e)
sympy.printing.pycode.MpmathPrinter._print_Integral(self,e)
sympy.printing.pycode.MpmathPrinter._print_Pow(self,expr,rational=False)
sympy.printing.pycode.MpmathPrinter._print_Rational(self,e)
sympy.printing.pycode.MpmathPrinter._print_log1p(self,e)
sympy.printing.pycode.MpmathPrinter._print_log2(self,e)
sympy.printing.pycode.MpmathPrinter._print_lowergamma(self,e)
sympy.printing.pycode.MpmathPrinter._print_uppergamma(self,e)
sympy.printing.pycode.PythonCodePrinter(AbstractPythonCodePrinter)
sympy.printing.pycode.PythonCodePrinter._print_Half(self,expr)
sympy.printing.pycode.PythonCodePrinter._print_Indexed(self,expr)
sympy.printing.pycode.PythonCodePrinter._print_Not(self,expr)
sympy.printing.pycode.PythonCodePrinter._print_Pow(self,expr,rational=False)
sympy.printing.pycode.PythonCodePrinter._print_Rational(self,expr)
sympy.printing.pycode.PythonCodePrinter._print_Symbol(self,expr)
sympy.printing.pycode.PythonCodePrinter._print_frac(self,expr)
sympy.printing.pycode.PythonCodePrinter._print_sign(self,e)
sympy.printing.pycode.SymPyPrinter(AbstractPythonCodePrinter)
sympy.printing.pycode.SymPyPrinter._print_Function(self,expr)
sympy.printing.pycode.SymPyPrinter._print_Pow(self,expr,rational=False)
sympy.printing.pycode._print_known_const(self,expr)
sympy.printing.pycode._print_known_func(self,expr)
sympy.printing.pycode._unpack_integral_limits(integral_expr)
sympy.printing.pycode.pycode(expr,**settings)
sympy.pycode(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tree.py----------------------------------------
A:sympy.printing.tree.x->s.split('\n')
sympy.print_tree(node,assumptions=True)
sympy.printing.tree.pprint_nodes(subtrees)
sympy.printing.tree.print_node(node,assumptions=True)
sympy.printing.tree.print_tree(node,assumptions=True)
sympy.printing.tree.tree(node,assumptions=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/llvmjitcode.py----------------------------------------
A:sympy.printing.llvmjitcode.llvmlite->import_module('llvmlite')
A:sympy.printing.llvmjitcode.self.func_arg_map->kwargs.pop('func_arg_map', {})
A:sympy.printing.llvmjitcode.self.fp_type->ll.DoubleType()
A:sympy.printing.llvmjitcode.val->LLVMJitCallbackPrinter(self.module, builder, self.fn, func_arg_map=self.param_dict)._print(e)
A:sympy.printing.llvmjitcode.base0->self._print(expr.base)
A:sympy.printing.llvmjitcode.fn->ll.Function(self.module, fn_type, name)
A:sympy.printing.llvmjitcode.fn_type->ll.FunctionType(self.llvm_ret_type, self.llvm_arg_types)
A:sympy.printing.llvmjitcode.exp0->self._print(expr.exp)
A:sympy.printing.llvmjitcode.e->self.builder.fadd(e, node)
A:sympy.printing.llvmjitcode.e0->self._print(expr.args[0])
A:sympy.printing.llvmjitcode.offset->int(expr.indices[0].evalf())
A:sympy.printing.llvmjitcode.array_ptr->self.builder.gep(array, [ll.Constant(ll.IntType(32), idx)])
A:sympy.printing.llvmjitcode.fp_array_ptr->self.builder.bitcast(array_ptr, ll.PointerType(self.fp_type))
A:sympy.printing.llvmjitcode.value->self.builder.load(fp_array_ptr)
A:sympy.printing.llvmjitcode.(array, idx)->self.func_arg_map.get(s, [None, 0])
A:sympy.printing.llvmjitcode.link_names->set()
A:sympy.printing.llvmjitcode.self.module->ll.Module('mod1')
A:sympy.printing.llvmjitcode.self.llvm_ret_type->self._from_ctype(self.signature.ret_type)
A:sympy.printing.llvmjitcode.self.fn->ll.Function(self.module, fn_type, name=self.link_name)
A:sympy.printing.llvmjitcode.self.fn.args[i].name->str(a)
A:sympy.printing.llvmjitcode.bb_entry->self.fn.append_basic_block('entry')
A:sympy.printing.llvmjitcode.builder->ll.IRBuilder(bb_entry)
A:sympy.printing.llvmjitcode.lj->LLVMJitCallbackPrinter(self.module, builder, self.fn, func_arg_map=self.param_dict)
A:sympy.printing.llvmjitcode.ret->self._convert_expr(lj, expr)
A:sympy.printing.llvmjitcode.strmod->LLVMJitCodeCallback(signature)._create_function(expr)
A:sympy.printing.llvmjitcode.void_ptr->ll.PointerType(ll.IntType(32))
A:sympy.printing.llvmjitcode.wrap_type->ll.FunctionType(void_ptr, [self.fp_type])
A:sympy.printing.llvmjitcode.wrap_fn->ll.Function(lj.module, wrap_type, 'PyFloat_FromDouble')
A:sympy.printing.llvmjitcode.tuple_type->ll.FunctionType(void_ptr, tuple_arg_types)
A:sympy.printing.llvmjitcode.tuple_fn->ll.Function(lj.module, tuple_type, 'PyTuple_Pack')
A:sympy.printing.llvmjitcode.final_val->LLVMJitCallbackPrinter(self.module, builder, self.fn, func_arg_map=self.param_dict).builder.call(tuple_fn, tuple_args)
A:sympy.printing.llvmjitcode.llmod->llvm.parse_assembly(strmod)
A:sympy.printing.llvmjitcode.pmb->llvm.create_pass_manager_builder()
A:sympy.printing.llvmjitcode.pass_manager->llvm.create_module_pass_manager()
A:sympy.printing.llvmjitcode.target_machine->llvm.Target.from_default_triple().create_target_machine()
A:sympy.printing.llvmjitcode.exe_eng->llvm.create_mcjit_compiler(llmod, target_machine)
A:sympy.printing.llvmjitcode.fptr->_llvm_jit_code(args, expr, signature, callback_type)
A:sympy.printing.llvmjitcode.output_fp_ptr->ll.IRBuilder(bb_entry).bitcast(self.fn.args[self.signature.ret_arg], ll.PointerType(self.fp_type))
A:sympy.printing.llvmjitcode.index->ll.Constant(ll.IntType(32), i)
A:sympy.printing.llvmjitcode.output_array_ptr->ll.IRBuilder(bb_entry).gep(output_fp_ptr, [index])
A:sympy.printing.llvmjitcode.jit->LLVMJitCodeCallback(signature)
A:sympy.printing.llvmjitcode.signature->CodeSignature(ctypes.py_object)
A:sympy.printing.llvmjitcode.cfunc->FUNCTYPE(signature.ret_type, *arg_ctypes)(fptr)
sympy.printing.llvmjitcode.CodeSignature(self,ret_type)
sympy.printing.llvmjitcode.LLVMJitCallbackPrinter(self,*args,**kwargs)
sympy.printing.llvmjitcode.LLVMJitCallbackPrinter._print_Indexed(self,expr)
sympy.printing.llvmjitcode.LLVMJitCallbackPrinter._print_Symbol(self,s)
sympy.printing.llvmjitcode.LLVMJitCode(self,signature)
sympy.printing.llvmjitcode.LLVMJitCode._compile_function(self,strmod)
sympy.printing.llvmjitcode.LLVMJitCode._convert_expr(self,lj,expr)
sympy.printing.llvmjitcode.LLVMJitCode._create_args(self,func_args)
sympy.printing.llvmjitcode.LLVMJitCode._create_function(self,expr)
sympy.printing.llvmjitcode.LLVMJitCode._create_function_base(self)
sympy.printing.llvmjitcode.LLVMJitCode._create_param_dict(self,func_args)
sympy.printing.llvmjitcode.LLVMJitCode._from_ctype(self,ctype)
sympy.printing.llvmjitcode.LLVMJitCode._wrap_return(self,lj,vals)
sympy.printing.llvmjitcode.LLVMJitCodeCallback(self,signature)
sympy.printing.llvmjitcode.LLVMJitCodeCallback._create_function(self,expr)
sympy.printing.llvmjitcode.LLVMJitCodeCallback._create_param_dict(self,func_args)
sympy.printing.llvmjitcode.LLVMJitPrinter(self,module,builder,fn,*args,**kwargs)
sympy.printing.llvmjitcode.LLVMJitPrinter._add_tmp_var(self,name,value)
sympy.printing.llvmjitcode.LLVMJitPrinter._print_Add(self,expr)
sympy.printing.llvmjitcode.LLVMJitPrinter._print_Function(self,expr)
sympy.printing.llvmjitcode.LLVMJitPrinter._print_Integer(self,expr)
sympy.printing.llvmjitcode.LLVMJitPrinter._print_Mul(self,expr)
sympy.printing.llvmjitcode.LLVMJitPrinter._print_Number(self,n)
sympy.printing.llvmjitcode.LLVMJitPrinter._print_Pow(self,expr)
sympy.printing.llvmjitcode.LLVMJitPrinter._print_Symbol(self,s)
sympy.printing.llvmjitcode.LLVMJitPrinter.emptyPrinter(self,expr)
sympy.printing.llvmjitcode._llvm_jit_code(args,expr,signature,callback_type)
sympy.printing.llvmjitcode.llvm_callable(args,expr,callback_type=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/dot.py----------------------------------------
A:sympy.printing.dot.rv->srepr(x)
A:sympy.printing.dot.sargs->tuple(map(purestr, args))
A:sympy.printing.dot.style->styleof(expr, styles)
A:sympy.printing.dot.label->labelfunc(expr)
A:sympy.printing.dot.expr_str->purestr(expr)
A:sympy.printing.dot.(expr_str, arg_strs)->purestr(expr, with_args=True)
A:sympy.printing.dot.graphstyle->_graphstyle.copy()
sympy.dotprint(expr,styles=default_styles,atom=lambdax:notisinstance(x,Basic),maxdepth=None,repeat=True,labelfunc=str,**kwargs)
sympy.printing.dot.attrprint(d,delimiter=',')
sympy.printing.dot.dotedges(expr,atom=lambdax:notisinstance(x,Basic),pos=(),repeat=True)
sympy.printing.dot.dotnode(expr,styles=default_styles,labelfunc=str,pos=(),repeat=True)
sympy.printing.dot.dotprint(expr,styles=default_styles,atom=lambdax:notisinstance(x,Basic),maxdepth=None,repeat=True,labelfunc=str,**kwargs)
sympy.printing.dot.purestr(x,with_args=False)
sympy.printing.dot.styleof(expr,styles=default_styles)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/python.py----------------------------------------
A:sympy.printing.python.f->getattr(StrPrinter, f_name)
A:sympy.printing.python.symbol->self._str(expr)
A:sympy.printing.python.printer->PythonPrinter(settings)
A:sympy.printing.python.exprp->expr.subs(renamings)
A:sympy.printing.python.newsymbolname->symbolname.replace('{', '').replace('}', '')
A:sympy.printing.python.renamings[sympy.Symbol(symbolname)]->sympy.Symbol(newsymbolname)
A:sympy.printing.python.renamings[sympy.Function(functionname)]->sympy.Function(newfunctionname)
sympy.print_python(expr,**settings)
sympy.printing.python.PythonPrinter(self,settings=None)
sympy.printing.python.PythonPrinter._print_Function(self,expr)
sympy.printing.python.PythonPrinter._print_Symbol(self,expr)
sympy.printing.python.PythonPrinter._print_module(self,expr)
sympy.printing.python.print_python(expr,**settings)
sympy.printing.python.python(expr,**settings)
sympy.python(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/lambdarepr.py----------------------------------------
A:sympy.printing.lambdarepr.nstr->self._numexpr_functions.get(func_name, None)
A:sympy.printing.lambdarepr.evaluate->self._module_format(self.module + '.evaluate')
A:sympy.printing.lambdarepr.expr->expr.func(lhs, NumExprEvaluate(rhs), *args).func(lhs, NumExprEvaluate(rhs), *args)
sympy.printing.lambdarepr.IntervalPrinter(MpmathPrinter,LambdaPrinter)
sympy.printing.lambdarepr.IntervalPrinter._print_Half(self,expr)
sympy.printing.lambdarepr.IntervalPrinter._print_Integer(self,expr)
sympy.printing.lambdarepr.IntervalPrinter._print_Pow(self,expr)
sympy.printing.lambdarepr.IntervalPrinter._print_Rational(self,expr)
sympy.printing.lambdarepr.LambdaPrinter(PythonCodePrinter)
sympy.printing.lambdarepr.LambdaPrinter._print_And(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_BooleanFalse(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_BooleanTrue(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_ITE(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_Not(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_NumberSymbol(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_Or(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_Pow(self,expr,**kwargs)
sympy.printing.lambdarepr.NumExprPrinter(LambdaPrinter)
sympy.printing.lambdarepr.NumExprPrinter._print_Assignment(self,expr)
sympy.printing.lambdarepr.NumExprPrinter._print_CodeBlock(self,expr)
sympy.printing.lambdarepr.NumExprPrinter._print_Function(self,e)
sympy.printing.lambdarepr.NumExprPrinter._print_ITE(self,expr)
sympy.printing.lambdarepr.NumExprPrinter._print_ImaginaryUnit(self,expr)
sympy.printing.lambdarepr.NumExprPrinter._print_NumExprEvaluate(self,expr)
sympy.printing.lambdarepr.NumExprPrinter._print_Piecewise(self,expr)
sympy.printing.lambdarepr.NumExprPrinter._print_Return(self,expr)
sympy.printing.lambdarepr.NumExprPrinter._print_seq(self,seq,delimiter=',')
sympy.printing.lambdarepr.NumExprPrinter.blacklisted(self,expr)
sympy.printing.lambdarepr.NumExprPrinter.doprint(self,expr)
sympy.printing.lambdarepr.lambdarepr(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/preview.py----------------------------------------
A:sympy.printing.preview.img->pyglet.image.load(fname)
A:sympy.printing.preview.config->pyglet.gl.Config(double_buffer=False)
A:sympy.printing.preview.win->pyglet.window.Window(width=img.width + 2 * offset, height=img.height + 2 * offset, caption='SymPy', resizable=False, config=config)
A:sympy.printing.preview.fontsize->'{}pt'.format(fontsize)
A:sympy.printing.preview.path->shutil.which(candidate)
A:sympy.printing.preview.latex_main->_get_latex_main(expr, preamble=preamble, packages=packages, euler=euler, extra_preamble=extra_preamble, fontsize=fontsize, **latex_settings)
A:sympy.printing.preview.cmd_path->shutil.which(cmd_variant)
sympy.preview(expr,output='png',viewer=None,euler=True,packages=(),filename=None,outputbuffer=None,preamble=None,dvioptions=None,outputTexFile=None,extra_preamble=None,fontsize=None,**latex_settings)
sympy.printing.preview._check_output_no_window(*args,**kwargs)
sympy.printing.preview._get_latex_main(expr,*,preamble=None,packages=(),extra_preamble=None,euler=True,fontsize=None,**latex_settings)
sympy.printing.preview.preview(expr,output='png',viewer=None,euler=True,packages=(),filename=None,outputbuffer=None,preamble=None,dvioptions=None,outputTexFile=None,extra_preamble=None,fontsize=None,**latex_settings)
sympy.printing.preview.pyglet_viewer(fname,fmt)
sympy.printing.preview.system_default_viewer(fname,fmt)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/precedence.py----------------------------------------
A:sympy.printing.precedence.PRECEDENCE_TRADITIONAL->PRECEDENCE.copy()
sympy.printing.precedence.precedence(item)
sympy.printing.precedence.precedence_Float(item)
sympy.printing.precedence.precedence_FracElement(item)
sympy.printing.precedence.precedence_Integer(item)
sympy.printing.precedence.precedence_Mul(item)
sympy.printing.precedence.precedence_PolyElement(item)
sympy.printing.precedence.precedence_Rational(item)
sympy.printing.precedence.precedence_UnevaluatedExpr(item)
sympy.printing.precedence.precedence_traditional(item)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/repr.py----------------------------------------
A:sympy.printing.repr.args->map(self._print, args)
A:sympy.printing.repr.perm_cyclic->self._settings.get('perm_cyclic', True)
A:sympy.printing.repr.last->expr.support().rfind('(')
A:sympy.printing.repr.s->expr.support()
A:sympy.printing.repr.usefull->str(expr.array_form)
A:sympy.printing.repr.r->mlib_to_str(expr._mpf_, repr_dps(expr._prec))
A:sympy.printing.repr.terms->list(poly.terms())
A:sympy.printing.repr.numer_terms->list(frac.numer.terms())
A:sympy.printing.repr.denom_terms->list(frac.denom.terms())
A:sympy.printing.repr.numer->self._print(numer_terms)
A:sympy.printing.repr.denom->self._print(denom_terms)
A:sympy.printing.repr.field->self._print(domain.field)
A:sympy.printing.repr.dom->self._print(p.dom)
A:sympy.printing.repr.gens->', '.join(map(self._print, ring.gens))
A:sympy.printing.repr.order->str(ring.order)
A:sympy.printing.repr.rep->self._print(f.rep)
A:sympy.printing.repr.ext->self._print(f.ext)
sympy.printing.repr.ReprPrinter(Printer)
sympy.printing.repr.ReprPrinter._print_Add(self,expr,order=None)
sympy.printing.repr.ReprPrinter._print_AlgebraicNumber(self,expr)
sympy.printing.repr.ReprPrinter._print_AppliedPredicate(self,expr)
sympy.printing.repr.ReprPrinter._print_AtomicExpr(self,expr)
sympy.printing.repr.ReprPrinter._print_BooleanFalse(self,expr)
sympy.printing.repr.ReprPrinter._print_BooleanTrue(self,expr)
sympy.printing.repr.ReprPrinter._print_Complexes(self,expr)
sympy.printing.repr.ReprPrinter._print_CoordinateSymbol(self,expr)
sympy.printing.repr.ReprPrinter._print_Cycle(self,expr)
sympy.printing.repr.ReprPrinter._print_DMP(self,p)
sympy.printing.repr.ReprPrinter._print_EmptySequence(self,expr)
sympy.printing.repr.ReprPrinter._print_EmptySet(self,expr)
sympy.printing.repr.ReprPrinter._print_ExtensionElement(self,f)
sympy.printing.repr.ReprPrinter._print_Float(self,expr)
sympy.printing.repr.ReprPrinter._print_FracElement(self,frac)
sympy.printing.repr.ReprPrinter._print_FracField(self,field)
sympy.printing.repr.ReprPrinter._print_Fraction(self,expr)
sympy.printing.repr.ReprPrinter._print_FractionField(self,domain)
sympy.printing.repr.ReprPrinter._print_Function(self,expr)
sympy.printing.repr.ReprPrinter._print_FunctionClass(self,expr)
sympy.printing.repr.ReprPrinter._print_Half(self,expr)
sympy.printing.repr.ReprPrinter._print_Heaviside(self,expr)
sympy.printing.repr.ReprPrinter._print_Integer(self,expr)
sympy.printing.repr.ReprPrinter._print_Integers(self,expr)
sympy.printing.repr.ReprPrinter._print_MatrixBase(self,expr)
sympy.printing.repr.ReprPrinter._print_MonogenicFiniteExtension(self,ext)
sympy.printing.repr.ReprPrinter._print_Mul(self,expr,order=None)
sympy.printing.repr.ReprPrinter._print_NaN(self,expr)
sympy.printing.repr.ReprPrinter._print_Naturals(self,expr)
sympy.printing.repr.ReprPrinter._print_Naturals0(self,expr)
sympy.printing.repr.ReprPrinter._print_NumberSymbol(self,expr)
sympy.printing.repr.ReprPrinter._print_Permutation(self,expr)
sympy.printing.repr.ReprPrinter._print_PolyElement(self,poly)
sympy.printing.repr.ReprPrinter._print_PolyRing(self,ring)
sympy.printing.repr.ReprPrinter._print_PolynomialRingBase(self,ring)
sympy.printing.repr.ReprPrinter._print_Predicate(self,expr)
sympy.printing.repr.ReprPrinter._print_PythonRational(self,expr)
sympy.printing.repr.ReprPrinter._print_Rational(self,expr)
sympy.printing.repr.ReprPrinter._print_RationalConstant(self,expr)
sympy.printing.repr.ReprPrinter._print_Rationals(self,expr)
sympy.printing.repr.ReprPrinter._print_Reals(self,expr)
sympy.printing.repr.ReprPrinter._print_Str(self,s)
sympy.printing.repr.ReprPrinter._print_Sum2(self,expr)
sympy.printing.repr.ReprPrinter._print_Symbol(self,expr)
sympy.printing.repr.ReprPrinter._print_UniversalSet(self,expr)
sympy.printing.repr.ReprPrinter._print_WildFunction(self,expr)
sympy.printing.repr.ReprPrinter._print_dict(self,expr)
sympy.printing.repr.ReprPrinter._print_list(self,expr)
sympy.printing.repr.ReprPrinter._print_set(self,expr)
sympy.printing.repr.ReprPrinter._print_str(self,expr)
sympy.printing.repr.ReprPrinter._print_tuple(self,expr)
sympy.printing.repr.ReprPrinter.emptyPrinter(self,expr)
sympy.printing.repr.ReprPrinter.reprify(self,args,sep)
sympy.printing.repr.srepr(expr,**settings)
sympy.srepr(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tensorflow.py----------------------------------------
A:sympy.printing.tensorflow.tensorflow->import_module('tensorflow')
A:sympy.printing.tensorflow._default_settings->dict(AbstractPythonCodePrinter._default_settings, tensorflow_version=None)
A:sympy.printing.tensorflow.op->self._module_format('tensorflow.linalg.matrix_transpose')
A:sympy.printing.tensorflow.printer->TensorflowPrinter(settings)
sympy.printing.tensorflow.TensorflowPrinter(self,settings=None)
sympy.printing.tensorflow.TensorflowPrinter._print_CodeBlock(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_Derivative(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_Function(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_Inverse(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_MatMul(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_MatPow(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_MatrixBase(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_Piecewise(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_Pow(self,expr)
sympy.printing.tensorflow.TensorflowPrinter._print_Transpose(self,expr)
sympy.printing.tensorflow.tensorflow_code(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/mathml.py----------------------------------------
A:sympy.printing.mathml.self.dom->Document()
A:sympy.printing.mathml.r->RawText()
A:sympy.printing.mathml.mathML->sympy.printing.printer.Printer._print(self, expr)
A:sympy.printing.mathml.unistr->sympy.printing.printer.Printer._print(self, expr).toxml()
A:sympy.printing.mathml.xmlbstr->sympy.printing.printer.Printer._print(self, expr).toxml().encode('ascii', 'xmlcharrefreplace')
A:sympy.printing.mathml.res->sympy.printing.printer.Printer._print(self, expr).toxml().encode('ascii', 'xmlcharrefreplace').decode()
A:sympy.printing.mathml.attrs->self._get_attributes()
A:sympy.printing.mathml.a_names->list(attrs.keys())
A:sympy.printing.mathml.x->self.dom.createElement('mrow')
A:sympy.printing.mathml.(numer, denom)->fraction(expr)
A:sympy.printing.mathml.(coeff, terms)->expr.as_coeff_mul()
A:sympy.printing.mathml.terms->sympy.core.mul.Mul._from_args(terms).as_ordered_factors()
A:sympy.printing.mathml.args->list(args)
A:sympy.printing.mathml.lastProcessed->self._print(arg)
A:sympy.printing.mathml.root->self.dom.createElement('piecewise')
A:sympy.printing.mathml.piece->self.dom.createElement('piece')
A:sympy.printing.mathml.x_r->self.dom.createElement('matrixrow')
A:sympy.printing.mathml.xnum->self._print(numer)
A:sympy.printing.mathml.xdenom->self.dom.createElement('cn')
A:sympy.printing.mathml.x_1->self._print(e.args[1])
A:sympy.printing.mathml.x_2->self._print(e.args[2])
A:sympy.printing.mathml.bvar_elem->self.dom.createElement('bvar')
A:sympy.printing.mathml.low_elem->self._print(limits[0][1])
A:sympy.printing.mathml.up_elem->self._print(limits[0][2])
A:sympy.printing.mathml.limits->list(e.limits)
A:sympy.printing.mathml.ci->self.dom.createElement(self.mathml_tag(sym))
A:sympy.printing.mathml.mrow->self.dom.createElement('mrow')
A:sympy.printing.mathml.mo->self.dom.createElement('mo')
A:sympy.printing.mathml.mi->self.dom.createElement('mi')
A:sympy.printing.mathml.(name, supers, subs)->split_super_sub(sym.name)
A:sympy.printing.mathml.name->translate(name)
A:sympy.printing.mathml.mname->self.dom.createElement('mi')
A:sympy.printing.mathml.msub->self.dom.createElement('msub')
A:sympy.printing.mathml.msup->self.dom.createElement('msup')
A:sympy.printing.mathml.msubsup->self.dom.createElement('msubsup')
A:sympy.printing.mathml.xmldeg->self.dom.createElement('degree')
A:sympy.printing.mathml.xmlcn->self.dom.createElement('cn')
A:sympy.printing.mathml.repr_e->mlib_to_str(e._mpf_, repr_dps(e._prec))
A:sympy.printing.mathml.diff_symbol->self.mathml_tag(e)
A:sympy.printing.mathml.degree->self.dom.createElement('degree')
A:sympy.printing.mathml.dom_element->self.dom.createElement(self.mathml_tag(p))
A:sympy.printing.mathml.prec_val->precedence_traditional(item)
A:sympy.printing.mathml.brac->self.dom.createElement('mfenced')
A:sympy.printing.mathml.frac->self.dom.createElement('mfrac')
A:sympy.printing.mathml.xden->self._print(denom)
A:sympy.printing.mathml.y->self.dom.createElement('msub')
A:sympy.printing.mathml.table->self.dom.createElement('mtable')
A:sympy.printing.mathml.munder->self.dom.createElement('munder')
A:sympy.printing.mathml.arrow->self.dom.createElement('mo')
A:sympy.printing.mathml.d->self.mathml_tag(e)
A:sympy.printing.mathml.subsup->self.dom.createElement('munderover')
A:sympy.printing.mathml.summand->self.dom.createElement('mo')
A:sympy.printing.mathml.low->self.dom.createElement('mrow')
A:sympy.printing.mathml.var->self._print(limits[0][0])
A:sympy.printing.mathml.equal->self.dom.createElement('mo')
A:sympy.printing.mathml.fence->self.dom.createElement('mfenced')
A:sympy.printing.mathml.enc->self.dom.createElement('menclose')
A:sympy.printing.mathml.row->self.dom.createElement('mrow')
A:sympy.printing.mathml.top->self.dom.createElement('mfrac')
A:sympy.printing.mathml.m->self.dom.createElement('msub')
A:sympy.printing.mathml.xx->self.dom.createElement('mo')
A:sympy.printing.mathml.mnum->self.dom.createElement('mrow')
A:sympy.printing.mathml.dps->prec_to_dps(expr._prec)
A:sympy.printing.mathml.str_real->mlib_to_str(expr._mpf_, dps, strip_zeros=True)
A:sympy.printing.mathml.(mant, exp)->mlib_to_str(expr._mpf_, dps, strip_zeros=True).split('e')
A:sympy.printing.mathml.mn->self.dom.createElement('mn')
A:sympy.printing.mathml.items->expr.separate().items()
A:sympy.printing.mathml.inneritems->list(vect.components.items())
A:sympy.printing.mathml.mbrac->self.dom.createElement('mfenced')
A:sympy.printing.mathml.it->iter(s)
A:sympy.printing.mathml.printset->tuple(s)
A:sympy.printing.mathml.mover->self.dom.createElement('mover')
A:sympy.printing.mathml.sub->self.dom.createElement('msub')
A:sympy.printing.mathml.sup->self.dom.createElement('msup')
A:sympy.printing.mathml.symbols->self._print(symbols)
A:sympy.printing.mathml.s->MathMLContentPrinter(settings)
A:sympy.printing.mathml.xml->MathMLContentPrinter(settings)._print(sympify(expr))
A:sympy.printing.mathml.pretty_xml->MathMLContentPrinter(settings)._print(sympify(expr)).toprettyxml()
sympy.mathml(expr,printer='content',**settings)
sympy.print_mathml(expr,printer='content',**settings)
sympy.printing.mathml.MathMLContentPrinter(MathMLPrinterBase)
sympy.printing.mathml.MathMLContentPrinter._print_Add(self,expr,order=None)
sympy.printing.mathml.MathMLContentPrinter._print_AssocOp(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Basic(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_BooleanFalse(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_BooleanTrue(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Complement(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Derivative(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_EmptySet(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_EulerGamma(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Exp1(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_FiniteSet(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Float(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Function(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_GoldenRatio(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_ImaginaryUnit(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Infinity(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Integral(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Limit(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_MatrixBase(self,m)
sympy.printing.mathml.MathMLContentPrinter._print_Mul(self,expr)
sympy.printing.mathml.MathMLContentPrinter._print_NaN(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_NegativeInfinity(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Number(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Pi(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Piecewise(self,expr)
sympy.printing.mathml.MathMLContentPrinter._print_Pow(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_ProductSet(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Rational(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Relational(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Sum(self,e)
sympy.printing.mathml.MathMLContentPrinter._print_Symbol(self,sym)
sympy.printing.mathml.MathMLContentPrinter._print_int(self,p)
sympy.printing.mathml.MathMLContentPrinter._print_list(self,seq)
sympy.printing.mathml.MathMLContentPrinter.mathml_tag(self,e)
sympy.printing.mathml.MathMLPresentationPrinter(MathMLPrinterBase)
sympy.printing.mathml.MathMLPresentationPrinter._get_printed_Rational(self,e,folded=None)
sympy.printing.mathml.MathMLPresentationPrinter._hprint_variadic_function(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Abs(self,expr,exp=None)
sympy.printing.mathml.MathMLPresentationPrinter._print_AccumulationBounds(self,i)
sympy.printing.mathml.MathMLPresentationPrinter._print_Add(self,expr,order=None)
sympy.printing.mathml.MathMLPresentationPrinter._print_Adjoint(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_And(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_AssocOp(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_BaseScalar(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_BaseVector(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Basic(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_BasisDependent(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Complement(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_ComplexInfinity(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_ComplexSpace(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Complexes(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Contains(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Cross(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Curl(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Dagger(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Derivative(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Divergence(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Dot(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Ei(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_EmptySet(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Equivalent(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_EulerGamma(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Exp1(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_FiniteSet(self,s)
sympy.printing.mathml.MathMLPresentationPrinter._print_Float(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_FockSpace(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Function(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_GoldenRatio(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Gradient(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_HBar(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_HadamardProduct(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_HilbertSpace(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Identity(self,I)
sympy.printing.mathml.MathMLPresentationPrinter._print_ImaginaryUnit(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Implies(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Indexed(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_IndexedBase(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Infinity(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Integers(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Integral(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Intersection(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Interval(self,i)
sympy.printing.mathml.MathMLPresentationPrinter._print_Inverse(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Lambda(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Laplacian(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Limit(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_LogOp(self,args,symbol)
sympy.printing.mathml.MathMLPresentationPrinter._print_MatMul(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_MatPow(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_MatrixBase(self,m)
sympy.printing.mathml.MathMLPresentationPrinter._print_MatrixElement(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_MatrixSymbol(self,sym)
sympy.printing.mathml.MathMLPresentationPrinter._print_Mul(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_NaN(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Naturals(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Naturals0(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_NegativeInfinity(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_NoneType(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Not(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Number(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_OneMatrix(self,Z)
sympy.printing.mathml.MathMLPresentationPrinter._print_Or(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Pi(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Pow(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_ProductSet(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Range(self,s)
sympy.printing.mathml.MathMLPresentationPrinter._print_Rational(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Reals(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Relational(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_SetOp(self,expr,symbol,prec)
sympy.printing.mathml.MathMLPresentationPrinter._print_SingularityFunction(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Sum(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Symbol(self,sym,style='plain')
sympy.printing.mathml.MathMLPresentationPrinter._print_SymmetricDifference(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_Transpose(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_TribonacciConstant(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Tuple(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Union(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_UniversalSet(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_VectorZero(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_Xor(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_ZeroMatrix(self,Z)
sympy.printing.mathml.MathMLPresentationPrinter._print_assoc_laguerre(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_assoc_legendre(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_bernoulli(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_binomial(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_bool(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_catalan(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_ceiling(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_chebyshevt(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_chebyshevu(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_conjugate(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_elliptic_e(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_elliptic_f(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_elliptic_pi(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_euler(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_exp(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_expint(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_factorial(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_factorial2(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_fibonacci(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_floor(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_gegenbauer(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_hermite(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_im(self,expr,exp=None)
sympy.printing.mathml.MathMLPresentationPrinter._print_int(self,p)
sympy.printing.mathml.MathMLPresentationPrinter._print_jacobi(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_laguerre(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_legendre(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_lucas(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_number_function(self,e,name)
sympy.printing.mathml.MathMLPresentationPrinter._print_operator_after(self,op,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_polylog(self,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_re(self,expr,exp=None)
sympy.printing.mathml.MathMLPresentationPrinter._print_re_im(self,c,expr)
sympy.printing.mathml.MathMLPresentationPrinter._print_set(self,s)
sympy.printing.mathml.MathMLPresentationPrinter._print_stieltjes(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_tribonacci(self,e)
sympy.printing.mathml.MathMLPresentationPrinter._print_tuple(self,e)
sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag(self,e)
sympy.printing.mathml.MathMLPresentationPrinter.parenthesize(self,item,level,strict=False)
sympy.printing.mathml.MathMLPrinterBase(self,settings=None)
sympy.printing.mathml.MathMLPrinterBase.apply_patch(self)
sympy.printing.mathml.MathMLPrinterBase.doprint(self,expr)
sympy.printing.mathml.MathMLPrinterBase.restore_patch(self)
sympy.printing.mathml.mathml(expr,printer='content',**settings)
sympy.printing.mathml.print_mathml(expr,printer='content',**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_mathematica.py----------------------------------------
A:sympy.printing.tests.test_mathematica.(x, y, z, w)->symbols('x,y,z,w')
A:sympy.printing.tests.test_mathematica.f->Function('f')
A:sympy.printing.tests.test_mathematica.(A, B, C, D)->symbols('A B C D', commutative=False)
A:sympy.printing.tests.test_mathematica.A->MutableDenseMatrix([[1, -1, 0, 0], [0, 1, -1, 0], [0, 0, 1, -1], [0, 0, 0, 1]])
A:sympy.printing.tests.test_mathematica.B->MutableSparseMatrix(A)
A:sympy.printing.tests.test_mathematica.C->ImmutableDenseMatrix(A)
A:sympy.printing.tests.test_mathematica.D->ImmutableSparseMatrix(A)
A:sympy.printing.tests.test_mathematica.example->ImmutableSparseNDimArray(example)
A:sympy.printing.tests.test_mathematica.some_function->symbols('some_function', cls=Function)
sympy.printing.tests.test_mathematica.test_Derivative()
sympy.printing.tests.test_mathematica.test_Function()
sympy.printing.tests.test_mathematica.test_Integer()
sympy.printing.tests.test_mathematica.test_Integral()
sympy.printing.tests.test_mathematica.test_Mul()
sympy.printing.tests.test_mathematica.test_NDArray()
sympy.printing.tests.test_mathematica.test_Pow()
sympy.printing.tests.test_mathematica.test_Rational()
sympy.printing.tests.test_mathematica.test_Relational()
sympy.printing.tests.test_mathematica.test_Sum()
sympy.printing.tests.test_mathematica.test_comment()
sympy.printing.tests.test_mathematica.test_constants()
sympy.printing.tests.test_mathematica.test_containers()
sympy.printing.tests.test_mathematica.test_matrices()
sympy.printing.tests.test_mathematica.test_special_polynomials()
sympy.printing.tests.test_mathematica.test_userfuncs()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_maple.py----------------------------------------
A:sympy.printing.tests.test_maple.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_maple.g->implemented_function('g', Lambda(x, 2 * x))
A:sympy.printing.tests.test_maple.I->S('I')
A:sympy.printing.tests.test_maple.A->MatrixSymbol('A', 3, 3)
A:sympy.printing.tests.test_maple.n->Symbol('n', integer=True)
A:sympy.printing.tests.test_maple.B->MatrixSymbol('B', 3, 3)
A:sympy.printing.tests.test_maple.source->maple_code((x + y) / Catalan, assign_to='me', inline=False)
A:sympy.printing.tests.test_maple.C->HadamardProduct(A, B)
A:sympy.printing.tests.test_maple.AA->MatrixSymbol('AA', 1, 3)
A:sympy.printing.tests.test_maple.M->SparseMatrix(5, 6, {})
A:sympy.printing.tests.test_maple.v->MatrixSymbol('v', 3, 1)
A:sympy.printing.tests.test_maple.h->MatrixSymbol('h', 1, 3)
A:sympy.printing.tests.test_maple.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_maple.pw->Piecewise((x, x < 1), (x ** 2, True))
A:sympy.printing.tests.test_maple.f->Function('f')
sympy.printing.tests.test_maple.test_1_over_x_and_sqrt()
sympy.printing.tests.test_maple.test_Function()
sympy.printing.tests.test_maple.test_Integer()
sympy.printing.tests.test_maple.test_Matrices()
sympy.printing.tests.test_maple.test_Matrices_entries_not_hadamard()
sympy.printing.tests.test_maple.test_MatrixElement_printing()
sympy.printing.tests.test_maple.test_MatrixSymbol()
sympy.printing.tests.test_maple.test_Pow()
sympy.printing.tests.test_maple.test_Rational()
sympy.printing.tests.test_maple.test_Relational()
sympy.printing.tests.test_maple.test_SparseMatrices()
sympy.printing.tests.test_maple.test_automatic_rewrites()
sympy.printing.tests.test_maple.test_basic_ops()
sympy.printing.tests.test_maple.test_boolean()
sympy.printing.tests.test_maple.test_constants()
sympy.printing.tests.test_maple.test_constants_other()
sympy.printing.tests.test_maple.test_containers()
sympy.printing.tests.test_maple.test_hadamard()
sympy.printing.tests.test_maple.test_imag()
sympy.printing.tests.test_maple.test_maple_boolean()
sympy.printing.tests.test_maple.test_maple_derivatives()
sympy.printing.tests.test_maple.test_maple_matrix_1x1()
sympy.printing.tests.test_maple.test_maple_matrix_assign_to()
sympy.printing.tests.test_maple.test_maple_matrix_assign_to_more()
sympy.printing.tests.test_maple.test_maple_matrix_elements()
sympy.printing.tests.test_maple.test_maple_noninline()
sympy.printing.tests.test_maple.test_maple_not_supported()
sympy.printing.tests.test_maple.test_maple_piecewise()
sympy.printing.tests.test_maple.test_maple_piecewise_times_const()
sympy.printing.tests.test_maple.test_mix_number_mult_symbols()
sympy.printing.tests.test_maple.test_mix_number_pow_symbols()
sympy.printing.tests.test_maple.test_sparse()
sympy.printing.tests.test_maple.test_specfun()
sympy.printing.tests.test_maple.test_special_matrices()
sympy.printing.tests.test_maple.test_vector_entries_hadamard()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_octave.py----------------------------------------
A:sympy.printing.tests.test_octave.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_octave.g->implemented_function('g', Lambda(x, 2 * x))
A:sympy.printing.tests.test_octave.I->S('I')
A:sympy.printing.tests.test_octave.A->MatrixSymbol('A', 1, 3)
A:sympy.printing.tests.test_octave.n->Symbol('n')
A:sympy.printing.tests.test_octave.B->MatrixSymbol('B', 1, 3)
A:sympy.printing.tests.test_octave.x->MatrixSymbol('x', n, 1)
A:sympy.printing.tests.test_octave.source->mcode((x + y) / Catalan, assign_to='me', inline=False)
A:sympy.printing.tests.test_octave.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_octave.pw->Piecewise((t1, x < 0), (t2, x <= 1), (1, True))
A:sympy.printing.tests.test_octave.C->MatrixSymbol('C', 1, 3)
A:sympy.printing.tests.test_octave.f->Function('f')
A:sympy.printing.tests.test_octave.t1->S('endless')
A:sympy.printing.tests.test_octave.t2->S('elsewhere')
A:sympy.printing.tests.test_octave.v->MatrixSymbol('v', 3, 1)
A:sympy.printing.tests.test_octave.h->MatrixSymbol('h', 1, 3)
A:sympy.printing.tests.test_octave.M->SparseMatrix(5, 6, {})
A:sympy.printing.tests.test_octave.F->C[0, 0].subs(C, A - B)
sympy.printing.tests.test_octave.test_1_over_x_and_sqrt()
sympy.printing.tests.test_octave.test_Function()
sympy.printing.tests.test_octave.test_Function_change_name()
sympy.printing.tests.test_octave.test_Integer()
sympy.printing.tests.test_octave.test_KroneckerDelta()
sympy.printing.tests.test_octave.test_Matrices()
sympy.printing.tests.test_octave.test_Matrices_entries_not_hadamard()
sympy.printing.tests.test_octave.test_MatrixElement_printing()
sympy.printing.tests.test_octave.test_MatrixSolve()
sympy.printing.tests.test_octave.test_MatrixSymbol()
sympy.printing.tests.test_octave.test_Pow()
sympy.printing.tests.test_octave.test_Rational()
sympy.printing.tests.test_octave.test_Relational()
sympy.printing.tests.test_octave.test_automatic_rewrite()
sympy.printing.tests.test_octave.test_basic_ops()
sympy.printing.tests.test_octave.test_boolean()
sympy.printing.tests.test_octave.test_constants()
sympy.printing.tests.test_octave.test_constants_other()
sympy.printing.tests.test_octave.test_containers()
sympy.printing.tests.test_octave.test_hadamard()
sympy.printing.tests.test_octave.test_imag()
sympy.printing.tests.test_octave.test_minmax()
sympy.printing.tests.test_octave.test_mix_number_mult_symbols()
sympy.printing.tests.test_octave.test_mix_number_pow_symbols()
sympy.printing.tests.test_octave.test_octave_boolean()
sympy.printing.tests.test_octave.test_octave_expint()
sympy.printing.tests.test_octave.test_octave_matrix_1x1()
sympy.printing.tests.test_octave.test_octave_matrix_assign_to()
sympy.printing.tests.test_octave.test_octave_matrix_assign_to_more()
sympy.printing.tests.test_octave.test_octave_matrix_elements()
sympy.printing.tests.test_octave.test_octave_noninline()
sympy.printing.tests.test_octave.test_octave_not_supported()
sympy.printing.tests.test_octave.test_octave_not_supported_not_on_whitelist()
sympy.printing.tests.test_octave.test_octave_piecewise()
sympy.printing.tests.test_octave.test_octave_piecewise_times_const()
sympy.printing.tests.test_octave.test_sinc()
sympy.printing.tests.test_octave.test_sparse()
sympy.printing.tests.test_octave.test_specfun()
sympy.printing.tests.test_octave.test_special_matrices()
sympy.printing.tests.test_octave.test_trick_indent_with_end_else_words()
sympy.printing.tests.test_octave.test_trigfun()
sympy.printing.tests.test_octave.test_vector_entries_hadamard()
sympy.printing.tests.test_octave.test_zeta_printing_issue_14820()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_tableform.py----------------------------------------
A:sympy.printing.tests.test_tableform.s->latex(TableForm([['a', x ** 3], ['c', S.One / 4], [sqrt(x), sin(x ** 2)]]))
sympy.printing.tests.test_tableform.test_TableForm()
sympy.printing.tests.test_tableform.test_TableForm_latex()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_numpy.py----------------------------------------
A:sympy.printing.tests.test_numpy.np->import_module('numpy')
A:sympy.printing.tests.test_numpy.deafult_float_info->import_module('numpy').finfo(np.array([]).dtype)
A:sympy.printing.tests.test_numpy.printer->NumPyPrinter()
A:sympy.printing.tests.test_numpy.p->Piecewise((1, x < 0), (0, True))
A:sympy.printing.tests.test_numpy.lae->logaddexp(a, b)
A:sympy.printing.tests.test_numpy.lae2->logaddexp2(a, b)
A:sympy.printing.tests.test_numpy.s->Sum((x + j) * i, (i, a, b), (j, c, d))
A:sympy.printing.tests.test_numpy.f->lambdify(M, M + Identity(2))
A:sympy.printing.tests.test_numpy.x_->import_module('numpy').array([0, 1, 2])
A:sympy.printing.tests.test_numpy.M->MatrixSymbol('M', 2, 2)
A:sympy.printing.tests.test_numpy.N->MatrixSymbol('M', n, n)
A:sympy.printing.tests.test_numpy.cg->ArrayDiagonal(ArrayTensorProduct(M, N), (1, 2))
A:sympy.printing.tests.test_numpy.ma->import_module('numpy').array([[1, 2], [3, 4]])
A:sympy.printing.tests.test_numpy.mb->import_module('numpy').array([[1, -2], [-1, 3]])
A:sympy.printing.tests.test_numpy.P->MatrixSymbol('P', 2, 2)
A:sympy.printing.tests.test_numpy.Q->MatrixSymbol('Q', 2, 2)
A:sympy.printing.tests.test_numpy.mc->import_module('numpy').array([[2, 0], [1, 2]])
A:sympy.printing.tests.test_numpy.md->import_module('numpy').array([[1, -1], [4, 7]])
A:sympy.printing.tests.test_numpy.e->Mod(a, b)
A:sympy.printing.tests.test_numpy.a_->import_module('numpy').array([2, 3, 4, 5])
A:sympy.printing.tests.test_numpy.b_->import_module('numpy').array([2, 3, 4, 5])
A:sympy.printing.tests.test_numpy.expr->Pow(2, -1, evaluate=False)
A:sympy.printing.tests.test_numpy.x->Symbol('x', real=True)
A:sympy.printing.tests.test_numpy.f_matsolve->lambdify((M, x), matsolve_expr)
A:sympy.printing.tests.test_numpy.m0->import_module('numpy').array([[1, 2, 3], [3, 2, 5], [5, 6, 7]])
A:sympy.printing.tests.test_numpy.x0->import_module('numpy').array([3, 4, 5])
A:sympy.printing.tests.test_numpy.a_1->MatrixSymbol('a_1', 10, 3)
A:sympy.printing.tests.test_numpy.a_2->MatrixSymbol('a_2', 10, 3)
A:sympy.printing.tests.test_numpy.a_3->MatrixSymbol('a_3', 10, 3)
A:sympy.printing.tests.test_numpy.a_4->MatrixSymbol('a_4', 10, 3)
A:sympy.printing.tests.test_numpy.A->BlockMatrix([[a_1, a_2], [a_3, a_4]])
A:sympy.printing.tests.test_numpy.mr->import_module('numpy').array([[2, 2], [3, 5]])
A:sympy.printing.tests.test_numpy.n->symbols('n', integer=True)
A:sympy.printing.tests.test_numpy.prntr->SciPyPrinter()
A:sympy.printing.tests.test_numpy.k->Symbol('k', integer=True, nonnegative=True)
sympy.printing.tests.test_numpy.test_16857()
sympy.printing.tests.test_numpy.test_Sqrt()
sympy.printing.tests.test_numpy.test_codegen_einsum()
sympy.printing.tests.test_numpy.test_codegen_extra()
sympy.printing.tests.test_numpy.test_exp2()
sympy.printing.tests.test_numpy.test_expm1()
sympy.printing.tests.test_numpy.test_hypot()
sympy.printing.tests.test_numpy.test_issue_17006()
sympy.printing.tests.test_numpy.test_log10()
sympy.printing.tests.test_numpy.test_log1p()
sympy.printing.tests.test_numpy.test_log2()
sympy.printing.tests.test_numpy.test_matsolve()
sympy.printing.tests.test_numpy.test_mod()
sympy.printing.tests.test_numpy.test_multiple_sums()
sympy.printing.tests.test_numpy.test_numpy_array()
sympy.printing.tests.test_numpy.test_numpy_known_funcs_consts()
sympy.printing.tests.test_numpy.test_numpy_logaddexp()
sympy.printing.tests.test_numpy.test_numpy_piecewise_regression()
sympy.printing.tests.test_numpy.test_numpy_print_methods()
sympy.printing.tests.test_numpy.test_pow()
sympy.printing.tests.test_numpy.test_relational()
sympy.printing.tests.test_numpy.test_scipy_known_funcs_consts()
sympy.printing.tests.test_numpy.test_scipy_print_methods()
sympy.printing.tests.test_numpy.test_sqrt()
sympy.printing.tests.test_numpy.test_sum()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_aesaracode.py----------------------------------------
A:sympy.printing.tests.test_aesaracode.aesaralogger->logging.getLogger('aesara.configdefaults')
A:sympy.printing.tests.test_aesaracode.aesara->import_module('aesara')
A:sympy.printing.tests.test_aesaracode.f_t->sympy.Function('f')(t)
A:sympy.printing.tests.test_aesaracode.outs->list(map(aesara_code_, exprs))
A:sympy.printing.tests.test_aesaracode.ins->list(aesara.graph.basic.graph_inputs(outs))
A:sympy.printing.tests.test_aesaracode.(ins, outs)->import_module('aesara').graph.basic.clone(ins, outs)
A:sympy.printing.tests.test_aesaracode.mode->import_module('aesara').compile.get_default_mode().excluding('fusion')
A:sympy.printing.tests.test_aesaracode.fgraph->fgraph.clone().clone()
A:sympy.printing.tests.test_aesaracode.a_is_num->isinstance(a, numeric_types)
A:sympy.printing.tests.test_aesaracode.b_is_num->isinstance(b, numeric_types)
A:sympy.printing.tests.test_aesaracode.a_is_seq->isinstance(a, (tuple, list))
A:sympy.printing.tests.test_aesaracode.b_is_seq->isinstance(b, (tuple, list))
A:sympy.printing.tests.test_aesaracode.astr->import_module('aesara').printing.debugprint(a, file='str')
A:sympy.printing.tests.test_aesaracode.bstr->import_module('aesara').printing.debugprint(b, file='str')
A:sympy.printing.tests.test_aesaracode.xx->numpy.arange(3).astype('float64')
A:sympy.printing.tests.test_aesaracode.xx2->aesara_code_(x, broadcastables={x: (False,)})
A:sympy.printing.tests.test_aesaracode.XX->aesara_code_(X)
A:sympy.printing.tests.test_aesaracode.ftt->aesara_code_(f_t)
A:sympy.printing.tests.test_aesaracode.comp->aesara_code_(expr)
A:sympy.printing.tests.test_aesaracode.expr_t->aesara_code_(expr)
A:sympy.printing.tests.test_aesaracode.n->sympy.Symbol('n', integer=True)
A:sympy.printing.tests.test_aesaracode.f->aesara_function_(inputs, [output], dtypes=dtypes, cache={})
A:sympy.printing.tests.test_aesaracode.(o1, o2)->f(2, 3)
A:sympy.printing.tests.test_aesaracode.m->sympy.Matrix([[x, y], [z, x + y + z]])
A:sympy.printing.tests.test_aesaracode.expected->aet.switch(aet.and_(xt > 0, xt < 2), 0, aet.switch(aet.or_(xt > 2, xt < 0), xt, np.nan))
A:sympy.printing.tests.test_aesaracode.out_values->f(*in_values)
A:sympy.printing.tests.test_aesaracode.a1->getattr(s1, attr)
A:sympy.printing.tests.test_aesaracode.a2->getattr(s2, attr)
A:sympy.printing.tests.test_aesaracode.X->MatrixType([[sy.cos(t), -sy.sin(t)], [sy.sin(t), sy.cos(t)]])
A:sympy.printing.tests.test_aesaracode.Yt->aesara_code_(Y, dtypes={n: 'int32', k: 'int32'})
A:sympy.printing.tests.test_aesaracode.s->Scalar('int64')
A:sympy.printing.tests.test_aesaracode.k->sympy.Symbol('k')
A:sympy.printing.tests.test_aesaracode.(At, Bt, Ct, Dt)->map(aesara_code_, (A, B, C, D))
A:sympy.printing.tests.test_aesaracode.Block->sympy.BlockMatrix([[A, B], [C, D]])
A:sympy.printing.tests.test_aesaracode.Blockt->aesara_code_(Block)
A:sympy.printing.tests.test_aesaracode.A->sympy.MatrixSymbol('A', n, k)
A:sympy.printing.tests.test_aesaracode.B->sympy.MatrixSymbol('B', n, n)
A:sympy.printing.tests.test_aesaracode.cutoutput->output.subs(dict(zip(inputs, cutinputs)))
A:sympy.printing.tests.test_aesaracode.dtypes->dict(zip(inputs, [dtype] * len(inputs)))
A:sympy.printing.tests.test_aesaracode.fblocked->aesara_function_(inputs, [sy.block_collapse(cutoutput)], dtypes=dtypes, cache={})
A:sympy.printing.tests.test_aesaracode.t->sympy.Symbol('theta')
A:sympy.printing.tests.test_aesaracode.tX->aesara_code_(X)
A:sympy.printing.tests.test_aesaracode.st->aesara_code_(s, cache=cache)
A:sympy.printing.tests.test_aesaracode.backup->dict(global_cache)
A:sympy.printing.tests.test_aesaracode.expr->sympy.Piecewise((0, sy.And(x > 0, x < 2)), (x, sy.Or(x > 2, x < 0)))
A:sympy.printing.tests.test_aesaracode.seen->set()
A:sympy.printing.tests.test_aesaracode.result->aesara_code_(expr)
A:sympy.printing.tests.test_aesaracode.tf->aesara_function([], [1 + 1j])
sympy.printing.tests.test_aesaracode.aesara_code_(expr,**kwargs)
sympy.printing.tests.test_aesaracode.aesara_function_(inputs,outputs,**kwargs)
sympy.printing.tests.test_aesaracode.aesara_simplify(fgraph)
sympy.printing.tests.test_aesaracode.fgraph_of(*exprs)
sympy.printing.tests.test_aesaracode.test_AppliedUndef()
sympy.printing.tests.test_aesaracode.test_BlockMatrix()
sympy.printing.tests.test_aesaracode.test_BlockMatrix_Inverse_execution()
sympy.printing.tests.test_aesaracode.test_DenseMatrix()
sympy.printing.tests.test_aesaracode.test_Derivative()
sympy.printing.tests.test_aesaracode.test_Integers()
sympy.printing.tests.test_aesaracode.test_MatAdd()
sympy.printing.tests.test_aesaracode.test_MatMul()
sympy.printing.tests.test_aesaracode.test_MatrixSlice()
sympy.printing.tests.test_aesaracode.test_MatrixSymbol()
sympy.printing.tests.test_aesaracode.test_MatrixSymbol_wrong_dims()
sympy.printing.tests.test_aesaracode.test_Piecewise()
sympy.printing.tests.test_aesaracode.test_Rationals()
sympy.printing.tests.test_aesaracode.test_Relationals()
sympy.printing.tests.test_aesaracode.test_Symbol()
sympy.printing.tests.test_aesaracode.test_Transpose()
sympy.printing.tests.test_aesaracode.test_add()
sympy.printing.tests.test_aesaracode.test_aesara_function_bad_kwarg()
sympy.printing.tests.test_aesaracode.test_aesara_function_kwargs()
sympy.printing.tests.test_aesaracode.test_aesara_function_matrix()
sympy.printing.tests.test_aesaracode.test_aesara_function_multi()
sympy.printing.tests.test_aesaracode.test_aesara_function_numpy()
sympy.printing.tests.test_aesaracode.test_aesara_function_scalar()
sympy.printing.tests.test_aesaracode.test_aesara_function_simple()
sympy.printing.tests.test_aesaracode.test_broadcastables()
sympy.printing.tests.test_aesaracode.test_broadcasting()
sympy.printing.tests.test_aesaracode.test_cache_basic()
sympy.printing.tests.test_aesaracode.test_cache_complex()
sympy.printing.tests.test_aesaracode.test_cache_types_distinct()
sympy.printing.tests.test_aesaracode.test_complexfunctions()
sympy.printing.tests.test_aesaracode.test_constantfunctions()
sympy.printing.tests.test_aesaracode.test_dim_handling()
sympy.printing.tests.test_aesaracode.test_dtype()
sympy.printing.tests.test_aesaracode.test_example_symbols()
sympy.printing.tests.test_aesaracode.test_factorial()
sympy.printing.tests.test_aesaracode.test_global_cache()
sympy.printing.tests.test_aesaracode.test_many()
sympy.printing.tests.test_aesaracode.test_slice()
sympy.printing.tests.test_aesaracode.test_symbols_are_created_once()
sympy.printing.tests.test_aesaracode.test_trig()
sympy.printing.tests.test_aesaracode.theq(a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_llvmjit.py----------------------------------------
A:sympy.printing.tests.test_llvmjit.f->sympy.printing.llvmjitcode.llvm_callable([a, b], e3, callback_type='cubature')
A:sympy.printing.tests.test_llvmjit.res->eval_cse(e3, inp)
A:sympy.printing.tests.test_llvmjit.jit_res->f(0.1, 1.5)
A:sympy.printing.tests.test_llvmjit.m->ctypes.c_int(ndim)
A:sympy.printing.tests.test_llvmjit.array->array_type(inp[a], inp[b])
A:sympy.printing.tests.test_llvmjit.out_array->out_array_type()
A:sympy.printing.tests.test_llvmjit.jit_ret->f(m, array, None, fdim, out_array)
A:sympy.printing.tests.test_llvmjit.d->sympy.IndexedBase('d')
A:sympy.printing.tests.test_llvmjit.b_val->e[0][0][1].subs({a: 1.5})
A:sympy.printing.tests.test_llvmjit.f_callback->sympy.printing.llvmjitcode.llvm_callable([a], e, callback_type='scipy.integrate.test')
A:sympy.printing.tests.test_llvmjit.jit_callback_res->f_callback(m, array)
A:sympy.printing.tests.test_llvmjit.e2->tmp_expr.subs(sub_dict)
A:sympy.printing.tests.test_llvmjit.e3->sympy.cse([e1, e2, 4 * e2])
A:sympy.printing.tests.test_llvmjit.fdim->ctypes.c_int(outdim)
sympy.printing.tests.test_llvmjit.eval_cse(e,sub_dict)
sympy.printing.tests.test_llvmjit.isclose(a,b)
sympy.printing.tests.test_llvmjit.test_bad_callback()
sympy.printing.tests.test_llvmjit.test_callback()
sympy.printing.tests.test_llvmjit.test_callback_alt_two()
sympy.printing.tests.test_llvmjit.test_callback_cubature()
sympy.printing.tests.test_llvmjit.test_callback_cubature_multiple()
sympy.printing.tests.test_llvmjit.test_callback_two()
sympy.printing.tests.test_llvmjit.test_cse()
sympy.printing.tests.test_llvmjit.test_cse_multiple()
sympy.printing.tests.test_llvmjit.test_func()
sympy.printing.tests.test_llvmjit.test_multiple_statements()
sympy.printing.tests.test_llvmjit.test_simple_expr()
sympy.printing.tests.test_llvmjit.test_symbol_not_found()
sympy.printing.tests.test_llvmjit.test_two_arg()
sympy.printing.tests.test_llvmjit.test_two_func()
sympy.printing.tests.test_llvmjit.test_two_pow()
sympy.printing.tests.test_llvmjit.test_two_sqrt()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_jscode.py----------------------------------------
A:sympy.printing.tests.test_jscode.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_jscode.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_jscode.(p1, p2)->symbols('p1 p2', positive=True)
A:sympy.printing.tests.test_jscode.x->IndexedBase('x')
A:sympy.printing.tests.test_jscode.A->MatrixSymbol('A', 1, 3)
A:sympy.printing.tests.test_jscode.i->Idx('i', m)
A:sympy.printing.tests.test_jscode.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_jscode.p->JavascriptCodePrinter()
A:sympy.printing.tests.test_jscode.(n, m, o)->symbols('n m o', integer=True)
A:sympy.printing.tests.test_jscode.p._not_c->set()
A:sympy.printing.tests.test_jscode.(n, m)->symbols('n m', integer=True)
A:sympy.printing.tests.test_jscode.y->IndexedBase('y')
A:sympy.printing.tests.test_jscode.j->Idx('j', n)
A:sympy.printing.tests.test_jscode.c->jscode(b[j] * a[i, j] + b[k] * a[i, k] + b[j] * b[k] * c[i, j, k], assign_to=y[i])
A:sympy.printing.tests.test_jscode.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_jscode.code->jscode(x[i], assign_to=y[i])
A:sympy.printing.tests.test_jscode.z->IndexedBase('z')
A:sympy.printing.tests.test_jscode.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.printing.tests.test_jscode.a->IndexedBase('a')
A:sympy.printing.tests.test_jscode.b->IndexedBase('b')
A:sympy.printing.tests.test_jscode.k->Idx('k', o)
A:sympy.printing.tests.test_jscode.l->Idx('l', p)
A:sympy.printing.tests.test_jscode.mat->Matrix([x * y, Piecewise((2 + x, y > 0), (y, True)), sin(z)])
A:sympy.printing.tests.test_jscode.q->MatrixSymbol('q', 5, 1)
A:sympy.printing.tests.test_jscode.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_jscode.m->Matrix([[sin(q[1, 0]), 0, cos(q[2, 0])], [q[1, 0] + q[2, 0], q[3, 0], 5], [2 * q[4, 0] / q[1, 0], sqrt(q[0, 0]) + 4, 0]])
A:sympy.printing.tests.test_jscode.B->MatrixSymbol('B', 1, 3)
A:sympy.printing.tests.test_jscode.C->MatrixSymbol('C', 1, 3)
A:sympy.printing.tests.test_jscode.F->C[0, 0].subs(C, A - B)
sympy.printing.tests.test_jscode.test_MatrixElement_printing()
sympy.printing.tests.test_jscode.test_Matrix_printing()
sympy.printing.tests.test_jscode.test_Mod()
sympy.printing.tests.test_jscode.test_Relational()
sympy.printing.tests.test_jscode.test_dummy_loops()
sympy.printing.tests.test_jscode.test_jscode_Indexed()
sympy.printing.tests.test_jscode.test_jscode_Integer()
sympy.printing.tests.test_jscode.test_jscode_Piecewise()
sympy.printing.tests.test_jscode.test_jscode_Piecewise_deep()
sympy.printing.tests.test_jscode.test_jscode_Pow()
sympy.printing.tests.test_jscode.test_jscode_Rational()
sympy.printing.tests.test_jscode.test_jscode_boolean()
sympy.printing.tests.test_jscode.test_jscode_constants_mathh()
sympy.printing.tests.test_jscode.test_jscode_constants_other()
sympy.printing.tests.test_jscode.test_jscode_exceptions()
sympy.printing.tests.test_jscode.test_jscode_functions()
sympy.printing.tests.test_jscode.test_jscode_inline_function()
sympy.printing.tests.test_jscode.test_jscode_loops_add()
sympy.printing.tests.test_jscode.test_jscode_loops_addfactor()
sympy.printing.tests.test_jscode.test_jscode_loops_matrix_vector()
sympy.printing.tests.test_jscode.test_jscode_loops_multiple_contractions()
sympy.printing.tests.test_jscode.test_jscode_loops_multiple_terms()
sympy.printing.tests.test_jscode.test_jscode_settings()
sympy.printing.tests.test_jscode.test_jscode_sqrt()
sympy.printing.tests.test_jscode.test_printmethod()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_precedence.py----------------------------------------
A:sympy.printing.tests.test_precedence.(x, y)->symbols('x,y')
sympy.printing.tests.test_precedence.test_Add()
sympy.printing.tests.test_precedence.test_And_Or()
sympy.printing.tests.test_precedence.test_Derivative()
sympy.printing.tests.test_precedence.test_Function()
sympy.printing.tests.test_precedence.test_Integral()
sympy.printing.tests.test_precedence.test_Mul()
sympy.printing.tests.test_precedence.test_Number()
sympy.printing.tests.test_precedence.test_Order()
sympy.printing.tests.test_precedence.test_Pow()
sympy.printing.tests.test_precedence.test_Product()
sympy.printing.tests.test_precedence.test_Relational()
sympy.printing.tests.test_precedence.test_Sum()
sympy.printing.tests.test_precedence.test_Symbol()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_glsl.py----------------------------------------
A:sympy.printing.tests.test_glsl.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_glsl.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_glsl.x->IndexedBase('x')
A:sympy.printing.tests.test_glsl.A->Matrix([[x + y * j for x in range(j)] for y in range(i)])
A:sympy.printing.tests.test_glsl.i->Idx('i', m)
A:sympy.printing.tests.test_glsl.expr->Matrix([[(1, 2), (3, 4)], [(5, 6), (7, 8)]])
A:sympy.printing.tests.test_glsl.p->GLSLPrinter()
A:sympy.printing.tests.test_glsl.(n, m, o)->symbols('n m o', integer=True)
A:sympy.printing.tests.test_glsl.p._not_c->set()
A:sympy.printing.tests.test_glsl.m->Matrix([[sin(q[1, 0]), 0, cos(q[2, 0])], [q[1, 0] + q[2, 0], q[3, 0], 5], [2 * q[4, 0] / q[1, 0], sqrt(q[0, 0]) + 4, 0]])
A:sympy.printing.tests.test_glsl.(n, m)->symbols('n m', integer=True)
A:sympy.printing.tests.test_glsl.y->IndexedBase('y')
A:sympy.printing.tests.test_glsl.j->Idx('j', n)
A:sympy.printing.tests.test_glsl.c->glsl_code(b[j] * a[i, j] + b[k] * a[i, k] + b[j] * b[k] * c[i, j, k], assign_to=y[i])
A:sympy.printing.tests.test_glsl.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_glsl.code->glsl_code(x[i], assign_to=y[i])
A:sympy.printing.tests.test_glsl.z->IndexedBase('z')
A:sympy.printing.tests.test_glsl.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.printing.tests.test_glsl.a->IndexedBase('a')
A:sympy.printing.tests.test_glsl.b->IndexedBase('b')
A:sympy.printing.tests.test_glsl.k->Idx('k', o)
A:sympy.printing.tests.test_glsl.l->Idx('l', p)
A:sympy.printing.tests.test_glsl.mat->Matrix([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]])
A:sympy.printing.tests.test_glsl.q->MatrixSymbol('q', 5, 1)
A:sympy.printing.tests.test_glsl.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_glsl.assign_to->MatrixSymbol('X', 4, 4)
A:sympy.printing.tests.test_glsl.(a, b, c, x, y, z)->symbols('a b c x y z')
A:sympy.printing.tests.test_glsl.gl->glsl_code(A)
A:sympy.printing.tests.test_glsl.glTransposed->glsl_code(A, mat_transpose=True)
A:sympy.printing.tests.test_glsl.glNested->glsl_code(A, mat_nested=True)
A:sympy.printing.tests.test_glsl.glNestedTransposed->glsl_code(A, mat_transpose=True, mat_nested=True)
A:sympy.printing.tests.test_glsl.gen->open('test_glsl_generated_matrices.py', 'w')
sympy.printing.tests.test_glsl.test_1xN_vecs()
sympy.printing.tests.test_glsl.test_Matrices_1x7()
sympy.printing.tests.test_glsl.test_Matrices_1x7_array_type_int()
sympy.printing.tests.test_glsl.test_Matrices_1x7_spread_assign_to_symbols()
sympy.printing.tests.test_glsl.test_Matrix_printing()
sympy.printing.tests.test_glsl.test_MxN_mats()
sympy.printing.tests.test_glsl.test_Tuple_array_type_custom()
sympy.printing.tests.test_glsl.test_cannot_assign_to_cause_mismatched_length()
sympy.printing.tests.test_glsl.test_dummy_loops()
sympy.printing.tests.test_glsl.test_glsl_code_Indexed()
sympy.printing.tests.test_glsl.test_glsl_code_Integer()
sympy.printing.tests.test_glsl.test_glsl_code_Piecewise()
sympy.printing.tests.test_glsl.test_glsl_code_Piecewise_deep()
sympy.printing.tests.test_glsl.test_glsl_code_Pow()
sympy.printing.tests.test_glsl.test_glsl_code_Rational()
sympy.printing.tests.test_glsl.test_glsl_code_Relational()
sympy.printing.tests.test_glsl.test_glsl_code_boolean()
sympy.printing.tests.test_glsl.test_glsl_code_constants_mathh()
sympy.printing.tests.test_glsl.test_glsl_code_constants_other()
sympy.printing.tests.test_glsl.test_glsl_code_exceptions()
sympy.printing.tests.test_glsl.test_glsl_code_functions()
sympy.printing.tests.test_glsl.test_glsl_code_inline_function()
sympy.printing.tests.test_glsl.test_glsl_code_list_tuple_Tuple()
sympy.printing.tests.test_glsl.test_glsl_code_loops_add()
sympy.printing.tests.test_glsl.test_glsl_code_loops_addfactor()
sympy.printing.tests.test_glsl.test_glsl_code_loops_matrix_vector()
sympy.printing.tests.test_glsl.test_glsl_code_loops_multiple_contractions()
sympy.printing.tests.test_glsl.test_glsl_code_loops_multiple_terms()
sympy.printing.tests.test_glsl.test_glsl_code_settings()
sympy.printing.tests.test_glsl.test_glsl_code_sqrt()
sympy.printing.tests.test_glsl.test_matrix_4x4_assign()
sympy.printing.tests.test_glsl.test_matrix_of_tuples_spread_assign_to_symbols()
sympy.printing.tests.test_glsl.test_misc_mats()
sympy.printing.tests.test_glsl.test_print_without_operators()
sympy.printing.tests.test_glsl.test_printmethod()
sympy.printing.tests.test_glsl.test_spread_assign_to_deeply_nested_symbols()
sympy.printing.tests.test_glsl.test_spread_assign_to_nested_symbols()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_tensorflow.py----------------------------------------
A:sympy.printing.tests.test_tensorflow.tftensorflow->import_module('tensorflow')
A:sympy.printing.tests.test_tensorflow.M->MatrixSymbol('M', 2, 2)
A:sympy.printing.tests.test_tensorflow.N->MatrixSymbol('N', 2, 2)
A:sympy.printing.tests.test_tensorflow.P->MatrixSymbol('P', 2, 2)
A:sympy.printing.tests.test_tensorflow.Q->MatrixSymbol('Q', 2, 2)
A:sympy.printing.tests.test_tensorflow.(x, y, z, t)->symbols('x y z t')
A:sympy.printing.tests.test_tensorflow.m3x3->tf.constant(llo)
A:sympy.printing.tests.test_tensorflow.m3x3sympy->Matrix(llo)
A:sympy.printing.tests.test_tensorflow.f->lambdify((M, N), cg, 'tensorflow')
A:sympy.printing.tests.test_tensorflow.graph->tf.Graph()
A:sympy.printing.tests.test_tensorflow.session->tf.compat.v1.Session()
A:sympy.printing.tests.test_tensorflow.r->tf.compat.v1.Session().run(f(*tf_rvs))
A:sympy.printing.tests.test_tensorflow.e->Derivative(sin(x), x).subs({k: v for (k, v) in zip(variables, rvs)}).doit()
A:sympy.printing.tests.test_tensorflow.expr->Derivative(sin(x), x)
A:sympy.printing.tests.test_tensorflow.cg->ArrayDiagonal(ArrayTensorProduct(M, N), (1, 2))
A:sympy.printing.tests.test_tensorflow.ma->tf.constant([[1, 2], [3, 4]])
A:sympy.printing.tests.test_tensorflow.mb->tf.constant([[1, -2], [-1, 3]])
A:sympy.printing.tests.test_tensorflow.y->tf.compat.v1.Session().run(f(ma, mb))
A:sympy.printing.tests.test_tensorflow.c->tf.compat.v1.Session().run(tf.einsum('ab,bc->acb', ma, mb))
A:sympy.printing.tests.test_tensorflow.mc->tf.constant([[2, 0], [1, 2]])
A:sympy.printing.tests.test_tensorflow.md->tf.constant([[1, -1], [4, 7]])
A:sympy.printing.tests.test_tensorflow.A->MatrixSymbol('A', 1, 3)
A:sympy.printing.tests.test_tensorflow.B->MatrixSymbol('B', 1, 3)
A:sympy.printing.tests.test_tensorflow.C->MatrixSymbol('C', 1, 3)
A:sympy.printing.tests.test_tensorflow.F->C[0, 0].subs(C, A - B)
sympy.printing.tests.test_tensorflow._compare_tensorflow_matrix(variables,expr,use_float=False)
sympy.printing.tests.test_tensorflow._compare_tensorflow_matrix_inverse(variables,expr,use_float=False)
sympy.printing.tests.test_tensorflow._compare_tensorflow_matrix_scalar(variables,expr)
sympy.printing.tests.test_tensorflow._compare_tensorflow_relational(variables,expr,rng=lambda:random.randint(0,10))
sympy.printing.tests.test_tensorflow._compare_tensorflow_scalar(variables,expr,rng=lambda:random.randint(0,10))
sympy.printing.tests.test_tensorflow.test_MatrixElement_printing()
sympy.printing.tests.test_tensorflow.test_codegen_einsum()
sympy.printing.tests.test_tensorflow.test_codegen_extra()
sympy.printing.tests.test_tensorflow.test_tensorflow_Derivative()
sympy.printing.tests.test_tensorflow.test_tensorflow_complexes()
sympy.printing.tests.test_tensorflow.test_tensorflow_math()
sympy.printing.tests.test_tensorflow.test_tensorflow_matrices()
sympy.printing.tests.test_tensorflow.test_tensorflow_printing()
sympy.printing.tests.test_tensorflow.test_tensorflow_relational()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_codeprinter.py----------------------------------------
A:sympy.printing.tests.test_codeprinter.p->setup_test_printer(reserved_word_suffix='_He_Man')
A:sympy.printing.tests.test_codeprinter.p._not_supported->set()
A:sympy.printing.tests.test_codeprinter.p._number_symbols->set()
A:sympy.printing.tests.test_codeprinter.d->Dummy('d')
A:sympy.printing.tests.test_codeprinter.(x, y)->symbols('x, if')
A:sympy.printing.tests.test_codeprinter.c->CrashingCodePrinter()
sympy.printing.tests.test_codeprinter.setup_test_printer(**kwargs)
sympy.printing.tests.test_codeprinter.test_issue_15791()
sympy.printing.tests.test_codeprinter.test_print_Dummy()
sympy.printing.tests.test_codeprinter.test_print_Symbol()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_rust.py----------------------------------------
A:sympy.printing.tests.test_rust.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_rust.a->IndexedBase('a')
A:sympy.printing.tests.test_rust.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_rust.expr->ITE(x < 1, y, z)
A:sympy.printing.tests.test_rust.(x, y)->symbols('x if')
A:sympy.printing.tests.test_rust.(n, m, o)->symbols('n m o', integer=True)
A:sympy.printing.tests.test_rust.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_rust.x->symbols('x', integer=False)
A:sympy.printing.tests.test_rust.y->IndexedBase('y')
A:sympy.printing.tests.test_rust.i->Idx('i', symbols('n', integer=True))
A:sympy.printing.tests.test_rust.(m, n)->symbols('m n', integer=True)
A:sympy.printing.tests.test_rust.A->IndexedBase('A')
A:sympy.printing.tests.test_rust.z->IndexedBase('z')
A:sympy.printing.tests.test_rust.j->Idx('j', n)
A:sympy.printing.tests.test_rust.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.printing.tests.test_rust.b->IndexedBase('b')
A:sympy.printing.tests.test_rust.k->Idx('k', o)
A:sympy.printing.tests.test_rust.l->Idx('l', p)
A:sympy.printing.tests.test_rust.(m, n, o, p)->symbols('m n o p', integer=True)
A:sympy.printing.tests.test_rust.c->IndexedBase('c')
A:sympy.printing.tests.test_rust.code->rust_code((a[i, j, k, l] + b[i, j, k, l]) * c[j, k, l], assign_to=y[i])
A:sympy.printing.tests.test_rust.n->symbols('n', integer=True)
sympy.printing.tests.test_rust.test_Functions()
sympy.printing.tests.test_rust.test_ITE()
sympy.printing.tests.test_rust.test_Indexed()
sympy.printing.tests.test_rust.test_Integer()
sympy.printing.tests.test_rust.test_Piecewise()
sympy.printing.tests.test_rust.test_Pow()
sympy.printing.tests.test_rust.test_Rational()
sympy.printing.tests.test_rust.test_Relational()
sympy.printing.tests.test_rust.test_basic_ops()
sympy.printing.tests.test_rust.test_boolean()
sympy.printing.tests.test_rust.test_constants()
sympy.printing.tests.test_rust.test_constants_other()
sympy.printing.tests.test_rust.test_dereference_printing()
sympy.printing.tests.test_rust.test_dummy_loops()
sympy.printing.tests.test_rust.test_inline_function()
sympy.printing.tests.test_rust.test_loops()
sympy.printing.tests.test_rust.test_loops_addfactor()
sympy.printing.tests.test_rust.test_loops_multiple_contractions()
sympy.printing.tests.test_rust.test_matrix()
sympy.printing.tests.test_rust.test_printmethod()
sympy.printing.tests.test_rust.test_reserved_words()
sympy.printing.tests.test_rust.test_settings()
sympy.printing.tests.test_rust.test_sign()
sympy.printing.tests.test_rust.test_sparse_matrix()
sympy.printing.tests.test_rust.test_user_functions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_gtk.py----------------------------------------
sympy.printing.tests.test_gtk.test_1()
sympy.printing.tests.test_gtk.test_settings()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_jax.py----------------------------------------
A:sympy.printing.tests.test_jax.jax->import_module('jax')
A:sympy.printing.tests.test_jax.deafult_float_info->import_module('jax').numpy.finfo(jax.numpy.array([]).dtype)
A:sympy.printing.tests.test_jax.printer->JaxPrinter()
A:sympy.printing.tests.test_jax.p->Piecewise((1, x < 0), (0, True))
A:sympy.printing.tests.test_jax.lae->logaddexp(a, b)
A:sympy.printing.tests.test_jax.lae2->logaddexp2(a, b)
A:sympy.printing.tests.test_jax.s->Sum((x + j) * i, (i, a, b), (j, c, d))
A:sympy.printing.tests.test_jax.f->lambdify(M, M + Identity(2), 'jax')
A:sympy.printing.tests.test_jax.x_->import_module('jax').numpy.array([0, 1, 2])
A:sympy.printing.tests.test_jax.M->MatrixSymbol('M', 2, 2)
A:sympy.printing.tests.test_jax.N->MatrixSymbol('M', n, n)
A:sympy.printing.tests.test_jax.cg->ArrayDiagonal(ArrayTensorProduct(M, N), (1, 2))
A:sympy.printing.tests.test_jax.ma->import_module('jax').numpy.array([[1, 2], [3, 4]])
A:sympy.printing.tests.test_jax.mb->import_module('jax').numpy.array([[1, -2], [-1, 3]])
A:sympy.printing.tests.test_jax.P->MatrixSymbol('P', 2, 2)
A:sympy.printing.tests.test_jax.Q->MatrixSymbol('Q', 2, 2)
A:sympy.printing.tests.test_jax.mc->import_module('jax').numpy.array([[2, 0], [1, 2]])
A:sympy.printing.tests.test_jax.md->import_module('jax').numpy.array([[1, -1], [4, 7]])
A:sympy.printing.tests.test_jax.e->Mod(a, b)
A:sympy.printing.tests.test_jax.a_->import_module('jax').numpy.array([2, 3, 4, 5])
A:sympy.printing.tests.test_jax.b_->import_module('jax').numpy.array([2, 3, 4, 5])
A:sympy.printing.tests.test_jax.expr->Pow(2, -1, evaluate=False)
A:sympy.printing.tests.test_jax.x->MatrixSymbol('x', 3, 1)
A:sympy.printing.tests.test_jax.f_matsolve->lambdify((M, x), matsolve_expr, 'jax')
A:sympy.printing.tests.test_jax.m0->import_module('jax').numpy.array([[1, 2, 3], [3, 2, 5], [5, 6, 7]])
A:sympy.printing.tests.test_jax.x0->import_module('jax').numpy.array([3, 4, 5])
A:sympy.printing.tests.test_jax.a_1->MatrixSymbol('a_1', 10, 3)
A:sympy.printing.tests.test_jax.a_2->MatrixSymbol('a_2', 10, 3)
A:sympy.printing.tests.test_jax.a_3->MatrixSymbol('a_3', 10, 3)
A:sympy.printing.tests.test_jax.a_4->MatrixSymbol('a_4', 10, 3)
A:sympy.printing.tests.test_jax.A->BlockMatrix([[a_1, a_2], [a_3, a_4]])
A:sympy.printing.tests.test_jax.mr->import_module('jax').numpy.array([[2, 2], [3, 5]])
A:sympy.printing.tests.test_jax.n->symbols('n', integer=True)
A:sympy.printing.tests.test_jax.prntr->JaxPrinter()
sympy.printing.tests.test_jax.test_16857()
sympy.printing.tests.test_jax.test_issue_17006()
sympy.printing.tests.test_jax.test_jax_Sqrt()
sympy.printing.tests.test_jax.test_jax_array()
sympy.printing.tests.test_jax.test_jax_codegen_einsum()
sympy.printing.tests.test_jax.test_jax_codegen_extra()
sympy.printing.tests.test_jax.test_jax_exp2()
sympy.printing.tests.test_jax.test_jax_expm1()
sympy.printing.tests.test_jax.test_jax_hypot()
sympy.printing.tests.test_jax.test_jax_known_funcs_consts()
sympy.printing.tests.test_jax.test_jax_log10()
sympy.printing.tests.test_jax.test_jax_log1p()
sympy.printing.tests.test_jax.test_jax_log2()
sympy.printing.tests.test_jax.test_jax_logaddexp()
sympy.printing.tests.test_jax.test_jax_matsolve()
sympy.printing.tests.test_jax.test_jax_mod()
sympy.printing.tests.test_jax.test_jax_multiple_sums()
sympy.printing.tests.test_jax.test_jax_piecewise_regression()
sympy.printing.tests.test_jax.test_jax_pow()
sympy.printing.tests.test_jax.test_jax_print_methods()
sympy.printing.tests.test_jax.test_jax_relational()
sympy.printing.tests.test_jax.test_jax_sqrt()
sympy.printing.tests.test_jax.test_jax_sum()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_cxx.py----------------------------------------
A:sympy.printing.tests.test_cxx.(x, y, u, v)->symbols('x y u v')
A:sympy.printing.tests.test_cxx.cxx98printer->CXX98CodePrinter()
A:sympy.printing.tests.test_cxx.cxx11printer->CXX11CodePrinter()
A:sympy.printing.tests.test_cxx.p->CXX11CodePrinter()
A:sympy.printing.tests.test_cxx.myp->MyPrinter()
sympy.printing.tests.test_cxx.test_CXX11CodePrinter()
sympy.printing.tests.test_cxx.test_CXX17CodePrinter()
sympy.printing.tests.test_cxx.test_CXX98CodePrinter()
sympy.printing.tests.test_cxx.test_cxxcode()
sympy.printing.tests.test_cxx.test_cxxcode_nested_minmax()
sympy.printing.tests.test_cxx.test_subclass_print_method()
sympy.printing.tests.test_cxx.test_subclass_print_method__ns()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_python.py----------------------------------------
A:sympy.printing.tests.test_python.(x, y)->symbols('x,y')
A:sympy.printing.tests.test_python.th->Symbol('theta')
A:sympy.printing.tests.test_python.ph->Symbol('phi')
A:sympy.printing.tests.test_python.f->Function('f')
A:sympy.printing.tests.test_python.(a, b)->map(Symbol, 'ab')
A:sympy.printing.tests.test_python.f_1->Integral(log(x), x)
A:sympy.printing.tests.test_python.f_3->Integral(x ** 2 ** x, x)
A:sympy.printing.tests.test_python.f_2->Integral(x ** 2, x)
A:sympy.printing.tests.test_python.f_4->Integral(x ** 2, (x, 1, 2))
A:sympy.printing.tests.test_python.f_5->Integral(x ** 2, (x, Rational(1, 2), 10))
A:sympy.printing.tests.test_python.f_6->Integral(x ** 2 * y ** 2, x, y)
A:sympy.printing.tests.test_python.p->python(Matrix([[x ** 2 + 1, 1], [y, x + y]]))
A:sympy.printing.tests.test_python.a_b->Symbol('a_{b}')
A:sympy.printing.tests.test_python.b->Symbol('b')
sympy.printing.tests.test_python.test_issue_20762()
sympy.printing.tests.test_python.test_python_basic()
sympy.printing.tests.test_python.test_python_derivatives()
sympy.printing.tests.test_python.test_python_functions()
sympy.printing.tests.test_python.test_python_functions_conjugates()
sympy.printing.tests.test_python.test_python_integrals()
sympy.printing.tests.test_python.test_python_keyword_function_name_escaping()
sympy.printing.tests.test_python.test_python_keyword_symbol_name_escaping()
sympy.printing.tests.test_python.test_python_limits()
sympy.printing.tests.test_python.test_python_matrix()
sympy.printing.tests.test_python.test_python_relational()
sympy.printing.tests.test_python.test_settings()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_pycode.py----------------------------------------
A:sympy.printing.tests.test_pycode.(x, y, z)->symbols('x y z')
A:sympy.printing.tests.test_pycode.p->SciPyPrinter()
A:sympy.printing.tests.test_pycode.prntr->TensorflowPrinter()
A:sympy.printing.tests.test_pycode.A->ArraySymbol('A', (4, 4, 6, 6, 6))
A:sympy.printing.tests.test_pycode.B->MatrixSymbol('B', 2, 2)
A:sympy.printing.tests.test_pycode.C->MatrixSymbol('C', 1, 5)
A:sympy.printing.tests.test_pycode.D->MatrixSymbol('D', 3, 4)
A:sympy.printing.tests.test_pycode.u->MatrixSymbol('x', 2, 1)
A:sympy.printing.tests.test_pycode.v->MatrixSymbol('y', 2, 1)
A:sympy.printing.tests.test_pycode.expr->beta(x, y)
A:sympy.printing.tests.test_pycode.numpy->import_module('numpy')
A:sympy.printing.tests.test_pycode.expr1->airyaiprime(x)
A:sympy.printing.tests.test_pycode.func->lambdify(x, expr1, 'numpy')
A:sympy.printing.tests.test_pycode.smat->SparseMatrix(2, 5, {(0, 1): 3})
A:sympy.printing.tests.test_pycode.(s1, s2)->symbols('if else')
A:sympy.printing.tests.test_pycode.py_str->pycode(s1 + s2)
A:sympy.printing.tests.test_pycode.(a_b, b, a_11)->symbols('a_{b} b a_{11}')
A:sympy.printing.tests.test_pycode.obj->CustomPrintedObject()
A:sympy.printing.tests.test_pycode.n->NumPyPrinter()
A:sympy.printing.tests.test_pycode.a->symbols('a')
A:sympy.printing.tests.test_pycode.expr2->airybiprime(x)
A:sympy.printing.tests.test_pycode.single->Integral(exp(-x), (x, 0, oo))
A:sympy.printing.tests.test_pycode.double->Integral(x ** 2 * exp(x * y), (x, -z, z), (y, 0, z))
A:sympy.printing.tests.test_pycode.indefinite->Integral(x ** 2, x)
A:sympy.printing.tests.test_pycode.evaluateat->Integral(x ** 2, (x, 1))
A:sympy.printing.tests.test_pycode.I->IndexedBase('I')
sympy.printing.tests.test_pycode.CustomPrintedObject(Expr)
sympy.printing.tests.test_pycode.CustomPrintedObject._mpmathcode(self,printer)
sympy.printing.tests.test_pycode.CustomPrintedObject._numpycode(self,printer)
sympy.printing.tests.test_pycode.test_Integral()
sympy.printing.tests.test_pycode.test_MpmathPrinter()
sympy.printing.tests.test_pycode.test_NumPyPrinter()
sympy.printing.tests.test_pycode.test_NumPyPrinter_print_seq()
sympy.printing.tests.test_pycode.test_PythonCodePrinter()
sympy.printing.tests.test_pycode.test_PythonCodePrinter_standard()
sympy.printing.tests.test_pycode.test_SciPyPrinter()
sympy.printing.tests.test_pycode.test_airy()
sympy.printing.tests.test_pycode.test_airy_prime()
sympy.printing.tests.test_pycode.test_array_printer()
sympy.printing.tests.test_pycode.test_beta()
sympy.printing.tests.test_pycode.test_codegen_ast_nodes()
sympy.printing.tests.test_pycode.test_frac()
sympy.printing.tests.test_pycode.test_fresnel_integrals()
sympy.printing.tests.test_pycode.test_issue_14283()
sympy.printing.tests.test_pycode.test_issue_16535_16536()
sympy.printing.tests.test_pycode.test_issue_18770()
sympy.printing.tests.test_pycode.test_issue_20762()
sympy.printing.tests.test_pycode.test_numerical_accuracy_functions()
sympy.printing.tests.test_pycode.test_printmethod()
sympy.printing.tests.test_pycode.test_pycode_reserved_words()
sympy.printing.tests.test_pycode.test_sqrt()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_julia.py----------------------------------------
A:sympy.printing.tests.test_julia.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_julia.g->implemented_function('g', Lambda(x, 2 * x))
A:sympy.printing.tests.test_julia.I->S('I')
A:sympy.printing.tests.test_julia.A->MatrixSymbol('A', 1, 3)
A:sympy.printing.tests.test_julia.n->Symbol('n')
A:sympy.printing.tests.test_julia.B->MatrixSymbol('B', 1, 3)
A:sympy.printing.tests.test_julia.source->julia_code((x + y) / Catalan, assign_to='me', inline=False)
A:sympy.printing.tests.test_julia.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_julia.pw->Piecewise((t1, x < 0), (t2, x <= 1), (1, True))
A:sympy.printing.tests.test_julia.C->MatrixSymbol('C', 1, 3)
A:sympy.printing.tests.test_julia.f->Function('f')
A:sympy.printing.tests.test_julia.t1->S('endless')
A:sympy.printing.tests.test_julia.t2->S('elsewhere')
A:sympy.printing.tests.test_julia.v->MatrixSymbol('v', 3, 1)
A:sympy.printing.tests.test_julia.h->MatrixSymbol('h', 1, 3)
A:sympy.printing.tests.test_julia.M->SparseMatrix(5, 6, {})
A:sympy.printing.tests.test_julia.F->C[0, 0].subs(C, A - B)
sympy.printing.tests.test_julia.test_1_over_x_and_sqrt()
sympy.printing.tests.test_julia.test_Function()
sympy.printing.tests.test_julia.test_Integer()
sympy.printing.tests.test_julia.test_Matrices()
sympy.printing.tests.test_julia.test_Matrices_entries_not_hadamard()
sympy.printing.tests.test_julia.test_MatrixElement_printing()
sympy.printing.tests.test_julia.test_MatrixSymbol()
sympy.printing.tests.test_julia.test_Pow()
sympy.printing.tests.test_julia.test_Rational()
sympy.printing.tests.test_julia.test_Relational()
sympy.printing.tests.test_julia.test_basic_ops()
sympy.printing.tests.test_julia.test_boolean()
sympy.printing.tests.test_julia.test_constants()
sympy.printing.tests.test_julia.test_constants_other()
sympy.printing.tests.test_julia.test_containers()
sympy.printing.tests.test_julia.test_haramard()
sympy.printing.tests.test_julia.test_imag()
sympy.printing.tests.test_julia.test_julia_boolean()
sympy.printing.tests.test_julia.test_julia_matrix_1x1()
sympy.printing.tests.test_julia.test_julia_matrix_assign_to()
sympy.printing.tests.test_julia.test_julia_matrix_assign_to_more()
sympy.printing.tests.test_julia.test_julia_matrix_elements()
sympy.printing.tests.test_julia.test_julia_noninline()
sympy.printing.tests.test_julia.test_julia_not_supported()
sympy.printing.tests.test_julia.test_julia_piecewise()
sympy.printing.tests.test_julia.test_julia_piecewise_times_const()
sympy.printing.tests.test_julia.test_mix_number_mult_symbols()
sympy.printing.tests.test_julia.test_mix_number_pow_symbols()
sympy.printing.tests.test_julia.test_sparse()
sympy.printing.tests.test_julia.test_specfun()
sympy.printing.tests.test_julia.test_special_matrices()
sympy.printing.tests.test_julia.test_trick_indent_with_end_else_words()
sympy.printing.tests.test_julia.test_vector_entries_hadamard()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_cupy.py----------------------------------------
A:sympy.printing.tests.test_cupy.cp->import_module('cupy')
A:sympy.printing.tests.test_cupy.prntr->CuPyPrinter()
A:sympy.printing.tests.test_cupy.s->Sum(i * x, (i, a, b))
A:sympy.printing.tests.test_cupy.f->lambdify((a, b, x), s, 'numpy')
A:sympy.printing.tests.test_cupy.x_->import_module('cupy').linspace(-1, +1, 10)
sympy.printing.tests.test_cupy.test_cupy_known_funcs_consts()
sympy.printing.tests.test_cupy.test_cupy_print()
sympy.printing.tests.test_cupy.test_cupy_print_methods()
sympy.printing.tests.test_cupy.test_cupy_sum()
sympy.printing.tests.test_cupy.test_not_cupy_print()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_mathml.py----------------------------------------
A:sympy.printing.tests.test_mathml.(x, y, z, a, b, c, d, e, n)->symbols('x:z a:e n')
A:sympy.printing.tests.test_mathml.mp->MathMLPresentationPrinter({'order': 'rev-lex'})
A:sympy.printing.tests.test_mathml.mpp->MathMLPresentationPrinter()
A:sympy.printing.tests.test_mathml.m->MathMLPrinter()
A:sympy.printing.tests.test_mathml.mml_1->MathMLPresentationPrinter()._print(Eq(x, 1))
A:sympy.printing.tests.test_mathml.mml_2->MathMLPresentationPrinter()._print(Ne(1, x))
A:sympy.printing.tests.test_mathml.mml_3->MathMLPresentationPrinter()._print(Ge(1, x))
A:sympy.printing.tests.test_mathml.mml->MathMLPresentationPrinter({'order': 'rev-lex'})._print(expr)
A:sympy.printing.tests.test_mathml.A->MatrixSymbol('A', i, j)
A:sympy.printing.tests.test_mathml.B->Matrix([[0, 5, 4], [2, 3, 1], [9, 7, 9]])
A:sympy.printing.tests.test_mathml.mll_1->MathMLPresentationPrinter()._print(A)
A:sympy.printing.tests.test_mathml.mll_2->MathMLPresentationPrinter()._print(B)
A:sympy.printing.tests.test_mathml.mml_4->MathMLPresentationPrinter()._print(Lt(1, x))
A:sympy.printing.tests.test_mathml.C->FiniteSet(c)
A:sympy.printing.tests.test_mathml.D->FiniteSet(d)
A:sympy.printing.tests.test_mathml.U1->Union(C, D, evaluate=False)
A:sympy.printing.tests.test_mathml.U2->Union(C, D, evaluate=False)
A:sympy.printing.tests.test_mathml.I1->Intersection(C, D, evaluate=False)
A:sympy.printing.tests.test_mathml.I2->Intersection(C, D, evaluate=False)
A:sympy.printing.tests.test_mathml.C1->Complement(C, D, evaluate=False)
A:sympy.printing.tests.test_mathml.C2->Complement(C, D, evaluate=False)
A:sympy.printing.tests.test_mathml.P1->ProductSet(C, D)
A:sympy.printing.tests.test_mathml.P2->ProductSet(C, D)
A:sympy.printing.tests.test_mathml.f->frozenset({1, 5, 3})
A:sympy.printing.tests.test_mathml.d->Derivative(f(x, y, z), x, z, x, z, z, y)
A:sympy.printing.tests.test_mathml.(z, w)->symbols('z w')
A:sympy.printing.tests.test_mathml.a->Symbol('a', real=True)
A:sympy.printing.tests.test_mathml.doc1->xml.dom.minidom.parseString('<apply><plus/><ci>x</ci><cn>1</cn></apply>')
A:sympy.printing.tests.test_mathml.doc2->xml.dom.minidom.parseString('<mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow>')
A:sympy.printing.tests.test_mathml.prettyxml_old1->xml.dom.minidom.parseString('<apply><plus/><ci>x</ci><cn>1</cn></apply>').toprettyxml()
A:sympy.printing.tests.test_mathml.prettyxml_old2->xml.dom.minidom.parseString('<mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow>').toprettyxml()
A:sympy.printing.tests.test_mathml.expr->Lambda((x, y), x + y)
A:sympy.printing.tests.test_mathml.s->set({1, 2, 3})
A:sympy.printing.tests.test_mathml.f1->FiniteSet(x, 1, 3)
A:sympy.printing.tests.test_mathml.f2->FiniteSet(y, 2, 4)
A:sympy.printing.tests.test_mathml.D1->SymmetricDifference(C, D, evaluate=False)
A:sympy.printing.tests.test_mathml.n->Symbol('n')
A:sympy.printing.tests.test_mathml.X->MatrixSymbol('X', 2, 2)
A:sympy.printing.tests.test_mathml.Y->MatrixSymbol('Y', 2, 2)
A:sympy.printing.tests.test_mathml.R->RandomSymbol(Symbol('R'))
A:sympy.printing.tests.test_mathml.(i, j)->symbols('i j')
A:sympy.printing.tests.test_mathml.ACS->CoordSys3D('A')
A:sympy.printing.tests.test_mathml.x->sympify(0.8975979010256552)
A:sympy.printing.tests.test_mathml.y->float(mp.doprint(x).strip('</cn>'))
sympy.printing.tests.test_mathml.test_content_finite_sets()
sympy.printing.tests.test_mathml.test_content_mathml_Rational()
sympy.printing.tests.test_mathml.test_content_mathml_add()
sympy.printing.tests.test_mathml.test_content_mathml_constants()
sympy.printing.tests.test_mathml.test_content_mathml_core()
sympy.printing.tests.test_mathml.test_content_mathml_functions()
sympy.printing.tests.test_mathml.test_content_mathml_greek()
sympy.printing.tests.test_mathml.test_content_mathml_integrals()
sympy.printing.tests.test_mathml.test_content_mathml_limits()
sympy.printing.tests.test_mathml.test_content_mathml_logic()
sympy.printing.tests.test_mathml.test_content_mathml_matrices()
sympy.printing.tests.test_mathml.test_content_mathml_order()
sympy.printing.tests.test_mathml.test_content_mathml_relational()
sympy.printing.tests.test_mathml.test_content_mathml_sums()
sympy.printing.tests.test_mathml.test_content_mathml_trig()
sympy.printing.tests.test_mathml.test_content_mathml_tuples()
sympy.printing.tests.test_mathml.test_content_printmethod()
sympy.printing.tests.test_mathml.test_content_settings()
sympy.printing.tests.test_mathml.test_content_symbol()
sympy.printing.tests.test_mathml.test_float_roundtrip()
sympy.printing.tests.test_mathml.test_fold_frac_powers_print()
sympy.printing.tests.test_mathml.test_fold_short_frac_print()
sympy.printing.tests.test_mathml.test_issue_17857()
sympy.printing.tests.test_mathml.test_ln_notation_print()
sympy.printing.tests.test_mathml.test_mat_delim_print()
sympy.printing.tests.test_mathml.test_mathml_Range()
sympy.printing.tests.test_mathml.test_mathml_SingularityFunction()
sympy.printing.tests.test_mathml.test_mathml_builtins()
sympy.printing.tests.test_mathml.test_mathml_matrix_functions()
sympy.printing.tests.test_mathml.test_mathml_piecewise()
sympy.printing.tests.test_mathml.test_mathml_presentation_mathieu()
sympy.printing.tests.test_mathml.test_mathml_presentation_numbers()
sympy.printing.tests.test_mathml.test_mathml_presentation_stieltjes()
sympy.printing.tests.test_mathml.test_mathml_printer()
sympy.printing.tests.test_mathml.test_mathml_special_matrices()
sympy.printing.tests.test_mathml.test_mul_symbol_print()
sympy.printing.tests.test_mathml.test_presentation_mathml_Rational()
sympy.printing.tests.test_mathml.test_presentation_mathml_add()
sympy.printing.tests.test_mathml.test_presentation_mathml_constants()
sympy.printing.tests.test_mathml.test_presentation_mathml_core()
sympy.printing.tests.test_mathml.test_presentation_mathml_functions()
sympy.printing.tests.test_mathml.test_presentation_mathml_greek()
sympy.printing.tests.test_mathml.test_presentation_mathml_integrals()
sympy.printing.tests.test_mathml.test_presentation_mathml_limits()
sympy.printing.tests.test_mathml.test_presentation_mathml_matrices()
sympy.printing.tests.test_mathml.test_presentation_mathml_order()
sympy.printing.tests.test_mathml.test_presentation_mathml_relational()
sympy.printing.tests.test_mathml.test_presentation_mathml_sums()
sympy.printing.tests.test_mathml.test_presentation_mathml_trig()
sympy.printing.tests.test_mathml.test_presentation_printmethod()
sympy.printing.tests.test_mathml.test_presentation_settings()
sympy.printing.tests.test_mathml.test_presentation_symbol()
sympy.printing.tests.test_mathml.test_print_Abs()
sympy.printing.tests.test_mathml.test_print_AccumBounds()
sympy.printing.tests.test_mathml.test_print_AssocOp()
sympy.printing.tests.test_mathml.test_print_Contains()
sympy.printing.tests.test_mathml.test_print_Dagger()
sympy.printing.tests.test_mathml.test_print_Determinant()
sympy.printing.tests.test_mathml.test_print_Ei()
sympy.printing.tests.test_mathml.test_print_EmptySet()
sympy.printing.tests.test_mathml.test_print_FiniteSet()
sympy.printing.tests.test_mathml.test_print_Float()
sympy.printing.tests.test_mathml.test_print_Indexed()
sympy.printing.tests.test_mathml.test_print_IndexedBase()
sympy.printing.tests.test_mathml.test_print_Lambda()
sympy.printing.tests.test_mathml.test_print_LambertW()
sympy.printing.tests.test_mathml.test_print_MatrixElement()
sympy.printing.tests.test_mathml.test_print_MinMax()
sympy.printing.tests.test_mathml.test_print_SetOp()
sympy.printing.tests.test_mathml.test_print_UniversalSet()
sympy.printing.tests.test_mathml.test_print_Vector()
sympy.printing.tests.test_mathml.test_print_assoc_laguerre()
sympy.printing.tests.test_mathml.test_print_assoc_legendre()
sympy.printing.tests.test_mathml.test_print_basic()
sympy.printing.tests.test_mathml.test_print_ceiling()
sympy.printing.tests.test_mathml.test_print_chebyshevt()
sympy.printing.tests.test_mathml.test_print_chebyshevu()
sympy.printing.tests.test_mathml.test_print_conjugate()
sympy.printing.tests.test_mathml.test_print_constants()
sympy.printing.tests.test_mathml.test_print_derivative()
sympy.printing.tests.test_mathml.test_print_different_functions()
sympy.printing.tests.test_mathml.test_print_domains()
sympy.printing.tests.test_mathml.test_print_elliptic_e()
sympy.printing.tests.test_mathml.test_print_elliptic_f()
sympy.printing.tests.test_mathml.test_print_elliptic_pi()
sympy.printing.tests.test_mathml.test_print_exp()
sympy.printing.tests.test_mathml.test_print_expint()
sympy.printing.tests.test_mathml.test_print_expression_with_minus()
sympy.printing.tests.test_mathml.test_print_factorials()
sympy.printing.tests.test_mathml.test_print_floor()
sympy.printing.tests.test_mathml.test_print_gegenbauer()
sympy.printing.tests.test_mathml.test_print_hadamard()
sympy.printing.tests.test_mathml.test_print_hermite()
sympy.printing.tests.test_mathml.test_print_intervals()
sympy.printing.tests.test_mathml.test_print_jacobi()
sympy.printing.tests.test_mathml.test_print_laguerre()
sympy.printing.tests.test_mathml.test_print_legendre()
sympy.printing.tests.test_mathml.test_print_lerchphi()
sympy.printing.tests.test_mathml.test_print_logic()
sympy.printing.tests.test_mathml.test_print_matrix_symbol()
sympy.printing.tests.test_mathml.test_print_polylog()
sympy.printing.tests.test_mathml.test_print_random_symbol()
sympy.printing.tests.test_mathml.test_print_re_im()
sympy.printing.tests.test_mathml.test_print_set_frozenset()
sympy.printing.tests.test_mathml.test_print_spaces()
sympy.printing.tests.test_mathml.test_print_tuples()
sympy.printing.tests.test_mathml.test_root_notation_print()
sympy.printing.tests.test_mathml.test_toprettyxml_hooking()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_tree.py----------------------------------------
A:sympy.printing.tests.test_tree.A->MatrixSymbol('A', 3, 3)
A:sympy.printing.tests.test_tree.B->MatrixSymbol('B', 3, 3)
sympy.printing.tests.test_tree.test_print_tree_MatAdd()
sympy.printing.tests.test_tree.test_print_tree_MatAdd_noassumptions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_str.py----------------------------------------
A:sympy.printing.tests.test_str.(x, y, z, w, t)->symbols('x,y,z,w,t')
A:sympy.printing.tests.test_str.d->Dummy('d')
A:sympy.printing.tests.test_str.n->Symbol('n', integer=True)
A:sympy.printing.tests.test_str.f->NamedMorphism(A, B, 'f')
A:sympy.printing.tests.test_str.fx->f(x)
A:sympy.printing.tests.test_str.w->Wild('x')
A:sympy.printing.tests.test_str.ival->Interval(n[i], n[j], l, r)
A:sympy.printing.tests.test_str.a->str(e)
A:sympy.printing.tests.test_str.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_str.cc1->CustomClass1()
A:sympy.printing.tests.test_str.cc2->CustomClass2()
A:sympy.printing.tests.test_str.(Ruv, u, v)->ring('u,v', ZZ)
A:sympy.printing.tests.test_str.(Rxyz, x, y, z)->ring('x,y,z', Ruv)
A:sympy.printing.tests.test_str.(Rx_zzi, xz)->field('x', QQ_I)
A:sympy.printing.tests.test_str.(Fuv, u, v)->field('u,v', ZZ)
A:sympy.printing.tests.test_str.(Fxyzt, x, y, z, t)->field('x,y,z,t', Fuv)
A:sympy.printing.tests.test_str.i->QQ_I(0, 1)
A:sympy.printing.tests.test_str.n1->Rational(1, 4)
A:sympy.printing.tests.test_str.n2->Rational(1, 3)
A:sympy.printing.tests.test_str.n3->Rational(2, 4)
A:sympy.printing.tests.test_str.n4->Rational(2, -4)
A:sympy.printing.tests.test_str.n5->Rational(0)
A:sympy.printing.tests.test_str.n7->Rational(3)
A:sympy.printing.tests.test_str.n8->Rational(-3)
A:sympy.printing.tests.test_str.x->Symbol('x')
A:sympy.printing.tests.test_str.tf1->TransferFunction(x * y ** 2 - z, y ** 3 - t ** 3, y)
A:sympy.printing.tests.test_str.tf2->TransferFunction(x - y, x + y, y)
A:sympy.printing.tests.test_str.tf3->TransferFunction(t * x ** 2 - t ** w * x + w, t - y, y)
A:sympy.printing.tests.test_str.tfm_1->TransferFunctionMatrix([[tf2, tf1], [tf1, tf2]])
A:sympy.printing.tests.test_str.tfm_2->TransferFunctionMatrix([[tf1, tf2], [tf2, tf1]])
A:sympy.printing.tests.test_str.q->Quaternion(x, y, z, x + t)
A:sympy.printing.tests.test_str.matchpy->import_module('matchpy')
A:sympy.printing.tests.test_str.wd->WildDot('w_')
A:sympy.printing.tests.test_str.wp->WildPlus('w__')
A:sympy.printing.tests.test_str.ws->WildStar('w___')
A:sympy.printing.tests.test_str.b->BaseScalarField(rect, 0)
A:sympy.printing.tests.test_str.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.printing.tests.test_str.str_printer->StrPrinter()
A:sympy.printing.tests.test_str.X->MatrixSymbol('X', n, n)
A:sympy.printing.tests.test_str.D->Die('d1', 6)
A:sympy.printing.tests.test_str.A->MatrixSymbol('A', 3, 3)
A:sympy.printing.tests.test_str.B->MatrixSymbol('B', 3, 3)
A:sympy.printing.tests.test_str.F->C[0, 0].subs(C, A - B)
A:sympy.printing.tests.test_str.id_A->IdentityMorphism(A)
A:sympy.printing.tests.test_str.K->Category('K')
A:sympy.printing.tests.test_str.(A, B)->symbols('A B', commutative=False)
A:sympy.printing.tests.test_str.t->Tr(A * B)
A:sympy.printing.tests.test_str.Y->MatrixSymbol('Y', 10, 10)
A:sympy.printing.tests.test_str.Z->MatrixSymbol('Z', 10, 10)
A:sympy.printing.tests.test_str.(a, b)->symbols('a b')
A:sympy.printing.tests.test_str.C->MatrixSymbol('C', 1, 3)
A:sympy.printing.tests.test_str.expr->(n * X).applyfunc(lamda)
A:sympy.printing.tests.test_str.lamda->Lambda(x, 1 / x)
A:sympy.printing.tests.test_str.e->Integral(factorial(x), (x, -oo, oo))
A:sympy.printing.tests.test_str.(x, y)->symbols('x y', real=True)
A:sympy.printing.tests.test_str.m->Manifold('M', 2)
A:sympy.printing.tests.test_str.p->Patch('P', m)
A:sympy.printing.tests.test_str.rect->CoordSystem('rect', p, [x, y])
A:sympy.printing.tests.test_str.N->MatrixSymbol('N', 3, 3)
sympy.printing.tests.test_str.test_Abs()
sympy.printing.tests.test_str.test_AccumBounds()
sympy.printing.tests.test_str.test_Add()
sympy.printing.tests.test_str.test_AppliedBinaryRelation()
sympy.printing.tests.test_str.test_AppliedPredicate()
sympy.printing.tests.test_str.test_CRootOf()
sympy.printing.tests.test_str.test_Catalan()
sympy.printing.tests.test_str.test_Complement()
sympy.printing.tests.test_str.test_ComplexInfinity()
sympy.printing.tests.test_str.test_Derivative()
sympy.printing.tests.test_str.test_Dict()
sympy.printing.tests.test_str.test_Dummy()
sympy.printing.tests.test_str.test_Equivalent()
sympy.printing.tests.test_str.test_EulerGamma()
sympy.printing.tests.test_str.test_Exp()
sympy.printing.tests.test_str.test_Feedback_str()
sympy.printing.tests.test_str.test_FiniteSet()
sympy.printing.tests.test_str.test_Float()
sympy.printing.tests.test_str.test_FracElement()
sympy.printing.tests.test_str.test_FracField()
sympy.printing.tests.test_str.test_Function()
sympy.printing.tests.test_str.test_GaussianInteger()
sympy.printing.tests.test_str.test_GaussianRational()
sympy.printing.tests.test_str.test_Geometry()
sympy.printing.tests.test_str.test_GoldenRatio()
sympy.printing.tests.test_str.test_GroebnerBasis()
sympy.printing.tests.test_str.test_Heaviside()
sympy.printing.tests.test_str.test_ImaginaryUnit()
sympy.printing.tests.test_str.test_Infinity()
sympy.printing.tests.test_str.test_Integer()
sympy.printing.tests.test_str.test_Integral()
sympy.printing.tests.test_str.test_Interval()
sympy.printing.tests.test_str.test_Lambda()
sympy.printing.tests.test_str.test_Limit()
sympy.printing.tests.test_str.test_MIMOFeedback_str()
sympy.printing.tests.test_str.test_MIMOParallel_str()
sympy.printing.tests.test_str.test_MIMOSeries_str()
sympy.printing.tests.test_str.test_MatMul_MatAdd()
sympy.printing.tests.test_str.test_MatrixElement_printing()
sympy.printing.tests.test_str.test_MatrixExpressions()
sympy.printing.tests.test_str.test_MatrixSlice()
sympy.printing.tests.test_str.test_MatrixSymbol_printing()
sympy.printing.tests.test_str.test_Matrix_str()
sympy.printing.tests.test_str.test_Mul()
sympy.printing.tests.test_str.test_NDimArray()
sympy.printing.tests.test_str.test_NaN()
sympy.printing.tests.test_str.test_NegativeInfinity()
sympy.printing.tests.test_str.test_Order()
sympy.printing.tests.test_str.test_Parallel_str()
sympy.printing.tests.test_str.test_Partition()
sympy.printing.tests.test_str.test_Permutation_Cycle()
sympy.printing.tests.test_str.test_Pi()
sympy.printing.tests.test_str.test_Poly()
sympy.printing.tests.test_str.test_PolyElement()
sympy.printing.tests.test_str.test_PolyRing()
sympy.printing.tests.test_str.test_Pow()
sympy.printing.tests.test_str.test_Predicate()
sympy.printing.tests.test_str.test_PrettyPoly()
sympy.printing.tests.test_str.test_Quantity_str()
sympy.printing.tests.test_str.test_Quaternion_str_printer()
sympy.printing.tests.test_str.test_RandomDomain()
sympy.printing.tests.test_str.test_Rational()
sympy.printing.tests.test_str.test_Relational()
sympy.printing.tests.test_str.test_RootSum()
sympy.printing.tests.test_str.test_Series_str()
sympy.printing.tests.test_str.test_SparseMatrix()
sympy.printing.tests.test_str.test_Str()
sympy.printing.tests.test_str.test_Subs_printing()
sympy.printing.tests.test_str.test_Sum()
sympy.printing.tests.test_str.test_Symbol()
sympy.printing.tests.test_str.test_SymmetricDifference()
sympy.printing.tests.test_str.test_Tr()
sympy.printing.tests.test_str.test_TransferFunctionMatrix_str()
sympy.printing.tests.test_str.test_TransferFunction_str()
sympy.printing.tests.test_str.test_TribonacciConstant()
sympy.printing.tests.test_str.test_UnevaluatedExpr()
sympy.printing.tests.test_str.test_UniversalSet()
sympy.printing.tests.test_str.test_Xor()
sympy.printing.tests.test_str.test_categories()
sympy.printing.tests.test_str.test_dict()
sympy.printing.tests.test_str.test_diffgeom()
sympy.printing.tests.test_str.test_empty_printer()
sympy.printing.tests.test_str.test_factorial()
sympy.printing.tests.test_str.test_full_prec()
sympy.printing.tests.test_str.test_infinity()
sympy.printing.tests.test_str.test_issue_14567()
sympy.printing.tests.test_str.test_issue_15716()
sympy.printing.tests.test_str.test_issue_21119_21460()
sympy.printing.tests.test_str.test_issue_21823()
sympy.printing.tests.test_str.test_issue_22689()
sympy.printing.tests.test_str.test_issue_3101()
sympy.printing.tests.test_str.test_issue_3103()
sympy.printing.tests.test_str.test_issue_4021()
sympy.printing.tests.test_str.test_issue_6387()
sympy.printing.tests.test_str.test_list()
sympy.printing.tests.test_str.test_noncommutative()
sympy.printing.tests.test_str.test_printing_str_array_expressions()
sympy.printing.tests.test_str.test_printmethod()
sympy.printing.tests.test_str.test_set()
sympy.printing.tests.test_str.test_settings()
sympy.printing.tests.test_str.test_sqrt()
sympy.printing.tests.test_str.test_sstrrepr()
sympy.printing.tests.test_str.test_str_special_matrices()
sympy.printing.tests.test_str.test_true_false()
sympy.printing.tests.test_str.test_tuple()
sympy.printing.tests.test_str.test_wild_matchpy()
sympy.printing.tests.test_str.test_wild_str()
sympy.printing.tests.test_str.test_zeta()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_latex.py----------------------------------------
A:sympy.printing.tests.test_latex.(x, y, z, t, w, a, b, c, s, p)->symbols('x y z t w a b c s p')
A:sympy.printing.tests.test_latex.(k, m, n)->symbols('k m n', integer=True)
A:sympy.printing.tests.test_latex.x_star->Symbol('x^*')
A:sympy.printing.tests.test_latex.f->NamedMorphism(A, B, 'f')
A:sympy.printing.tests.test_latex.k->Symbol('k')
A:sympy.printing.tests.test_latex.p->Patch('P', m)
A:sympy.printing.tests.test_latex.A->MatrixSymbol('\\nabla_k', 3, 3)
A:sympy.printing.tests.test_latex.(Gamma, lmbda, rho)->symbols('Gamma, lambda, rho')
A:sympy.printing.tests.test_latex.(tau, Tau, TAU, taU)->symbols('tau, Tau, TAU, taU')
A:sympy.printing.tests.test_latex.(rho, mass, volume)->symbols('rho, mass, volume')
A:sympy.printing.tests.test_latex.g->Function('g')
A:sympy.printing.tests.test_latex.h->homomorphism(QQ.old_poly_ring(x).free_module(2), QQ.old_poly_ring(x).free_module(2), [0, 0])
A:sympy.printing.tests.test_latex.Li->Function('Li')
A:sympy.printing.tests.test_latex.mybeta->Function('beta')
A:sympy.printing.tests.test_latex.a_1->Function('a_1')
A:sympy.printing.tests.test_latex.ab->Symbol('ab')
A:sympy.printing.tests.test_latex.omega1->Function('omega1')
A:sympy.printing.tests.test_latex.w->OrdinalOmega()
A:sympy.printing.tests.test_latex.theta->Symbol('theta', real=True)
A:sympy.printing.tests.test_latex.phi->Symbol('phi', real=True)
A:sympy.printing.tests.test_latex.fjlkd->Function('fjlkd')
A:sympy.printing.tests.test_latex.Psi_symbol->Symbol('Psi_0', complex=True, real=False)
A:sympy.printing.tests.test_latex.Psi_indexed->IndexedBase(Symbol('Psi', complex=True, real=False))
A:sympy.printing.tests.test_latex.symbol_latex->latex(Psi_symbol * conjugate(Psi_symbol))
A:sympy.printing.tests.test_latex.indexed_latex->latex(Psi_indexed[0] * conjugate(Psi_indexed[0]))
A:sympy.printing.tests.test_latex.x1->Symbol('x1')
A:sympy.printing.tests.test_latex.x2->Symbol('x^2')
A:sympy.printing.tests.test_latex.n1->Symbol('n1')
A:sympy.printing.tests.test_latex.n2->Symbol('n2')
A:sympy.printing.tests.test_latex.iv->Interval(1, 3)
A:sympy.printing.tests.test_latex.se->SetExpr(iv)
A:sympy.printing.tests.test_latex.(a, b, c)->symbols('a:c')
A:sympy.printing.tests.test_latex.i->sqrt(-1)
A:sympy.printing.tests.test_latex.n->Symbol('n', integer=True)
A:sympy.printing.tests.test_latex.s1->SeqFormula(a ** 2, (0, oo))
A:sympy.printing.tests.test_latex.s2->SeqPer((1, 2))
A:sympy.printing.tests.test_latex.s3->SeqFormula(a ** 2, (0, 2))
A:sympy.printing.tests.test_latex.s4->SeqPer((1, 2), (0, 2))
A:sympy.printing.tests.test_latex.s5->SeqFormula(a ** 2, (-oo, 0))
A:sympy.printing.tests.test_latex.s6->SeqPer((1, 2), (-oo, 0))
A:sympy.printing.tests.test_latex.s7->SeqFormula(a ** 2, (a, 0, x))
A:sympy.printing.tests.test_latex.b->BaseScalarField(rect, 0)
A:sympy.printing.tests.test_latex.s8->SeqFormula(b * a ** 2, (a, 0, 2))
A:sympy.printing.tests.test_latex.a->Symbol('a')
A:sympy.printing.tests.test_latex.B->MatrixSymbol('B', 3, 3)
A:sympy.printing.tests.test_latex.comm->Commutator(B, A)
A:sympy.printing.tests.test_latex.line->Interval(0, 1)
A:sympy.printing.tests.test_latex.bigline->Interval(0, 10)
A:sympy.printing.tests.test_latex.fset->FiniteSet(1, 2, 3)
A:sympy.printing.tests.test_latex.wp->WedgeProduct(R2.dx, R2.dy)
A:sympy.printing.tests.test_latex.(a, b, c, d)->symbols('a:d')
A:sympy.printing.tests.test_latex.C->MatrixSymbol('C', 3, 3)
A:sympy.printing.tests.test_latex.D->Die('d1', 6)
A:sympy.printing.tests.test_latex.U1->Union(A, B, evaluate=False)
A:sympy.printing.tests.test_latex.U2->Union(C, D, evaluate=False)
A:sympy.printing.tests.test_latex.I1->Intersection(A, B, evaluate=False)
A:sympy.printing.tests.test_latex.I2->Intersection(C, D, evaluate=False)
A:sympy.printing.tests.test_latex.C1->Complement(A, B, evaluate=False)
A:sympy.printing.tests.test_latex.C2->Complement(C, D, evaluate=False)
A:sympy.printing.tests.test_latex.D1->SymmetricDifference(A, B, evaluate=False)
A:sympy.printing.tests.test_latex.D2->SymmetricDifference(C, D, evaluate=False)
A:sympy.printing.tests.test_latex.P1->ProductSet(A, B)
A:sympy.printing.tests.test_latex.P2->ProductSet(C, D)
A:sympy.printing.tests.test_latex.x->symbols('x')
A:sympy.printing.tests.test_latex.y->symbols('y')
A:sympy.printing.tests.test_latex.imgset->ImageSet(Lambda(((x, y),), x + y), ProductSet({1, 2, 3}, {3, 4}))
A:sympy.printing.tests.test_latex.beta->Symbol('beta')
A:sympy.printing.tests.test_latex.(A, B)->symbols('A B', commutative=False)
A:sympy.printing.tests.test_latex.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_latex.M2->tensorproduct(M1, M)
A:sympy.printing.tests.test_latex.t->Tr(A * B)
A:sympy.printing.tests.test_latex.theta1->symbols('theta1', cls=Function)
A:sympy.printing.tests.test_latex.(x, y, z, w)->symbols('x y z w')
A:sympy.printing.tests.test_latex.M1->ArrayType([1 / x, y, z])
A:sympy.printing.tests.test_latex.M3->tensorproduct(M, M)
A:sympy.printing.tests.test_latex.Mrow->ArrayType([[x, y, 1 / z]])
A:sympy.printing.tests.test_latex.Mcolumn->ArrayType([[x], [y], [1 / z]])
A:sympy.printing.tests.test_latex.Mcol2->ArrayType([Mcolumn.tolist()])
A:sympy.printing.tests.test_latex.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.printing.tests.test_latex.(Ruv, u, v)->ring('u,v', ZZ)
A:sympy.printing.tests.test_latex.(Rxyz, x, y, z)->ring('x,y,z', Ruv)
A:sympy.printing.tests.test_latex.(Fuv, u, v)->field('u,v', ZZ)
A:sympy.printing.tests.test_latex.(Fxyzt, x, y, z, t)->field('x,y,z,t', Fuv)
A:sympy.printing.tests.test_latex.(x, y, z, w, t)->symbols('x y z w t')
A:sympy.printing.tests.test_latex.X->Normal('X', mu, sigma)
A:sympy.printing.tests.test_latex.Y->Normal('Y', mu, sigma)
A:sympy.printing.tests.test_latex.Z->MatrixSymbol('Z', 10, 10)
A:sympy.printing.tests.test_latex.F->C[0, 0].subs(C, A - B)
A:sympy.printing.tests.test_latex.A1->Object('A1')
A:sympy.printing.tests.test_latex.A2->Object('A2')
A:sympy.printing.tests.test_latex.A3->Object('A3')
A:sympy.printing.tests.test_latex.f1->NamedMorphism(A1, A2, 'f1')
A:sympy.printing.tests.test_latex.f2->NamedMorphism(A2, A3, 'f2')
A:sympy.printing.tests.test_latex.id_A1->IdentityMorphism(A1)
A:sympy.printing.tests.test_latex.K1->Category('K1')
A:sympy.printing.tests.test_latex.d->Diagram([f, g])
A:sympy.printing.tests.test_latex.grid->DiagramGrid(d)
A:sympy.printing.tests.test_latex.R->sympy.polys.domains.QQ.old_poly_ring(x, y)
A:sympy.printing.tests.test_latex.I->sympy.polys.domains.QQ.old_poly_ring(x, y).ideal(x ** 2, y)
A:sympy.printing.tests.test_latex.m->Manifold('M', 2)
A:sympy.printing.tests.test_latex.Mx->MatrixSymbol('M^x', 2, 2)
A:sympy.printing.tests.test_latex.expr->PartialDerivative(3 * A(-i), A(-j), A(-n))
A:sympy.printing.tests.test_latex.syms->symbols('a:f')
A:sympy.printing.tests.test_latex.s->Symbol(latexSymbolWithBrace)
A:sympy.printing.tests.test_latex.c->Function('chi')
A:sympy.printing.tests.test_latex.e->parse_expr('-B*A', evaluate=False)
A:sympy.printing.tests.test_latex.(m__1, l__1)->symbols('m__1, l__1')
A:sympy.printing.tests.test_latex.he->UnevaluatedExpr(1 / x)
A:sympy.printing.tests.test_latex.(i, j, k)->symbols('i j k')
A:sympy.printing.tests.test_latex.N->MatrixSymbol('N', 3, 3)
A:sympy.printing.tests.test_latex.tf1->TransferFunction(1, s, s)
A:sympy.printing.tests.test_latex.tf2->TransferFunction(s, s ** 2 - 1, s)
A:sympy.printing.tests.test_latex.tf3->TransferFunction(s, s - 1, s)
A:sympy.printing.tests.test_latex.M_1->Matrix([[5, 6], [6, 5 / s]])
A:sympy.printing.tests.test_latex.T_1->sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix(M_1, s)
A:sympy.printing.tests.test_latex.M_2->Matrix([[5 / s, 6], [6, 5 / (s - 1)]])
A:sympy.printing.tests.test_latex.T_2->sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix(M_2, s)
A:sympy.printing.tests.test_latex.M_3->Matrix([[6, 5 / (s * (s - 1))], [5, 6]])
A:sympy.printing.tests.test_latex.T_3->sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix(M_3, s)
A:sympy.printing.tests.test_latex.tf4->TransferFunction(s ** 2, s ** 2 - 1, s)
A:sympy.printing.tests.test_latex.tfm_1->TransferFunctionMatrix([[tf1, tf2], [tf3, tf4]])
A:sympy.printing.tests.test_latex.tfm_2->TransferFunctionMatrix([[tf4, tf3], [tf2, tf1]])
A:sympy.printing.tests.test_latex.q->Quaternion(x, y, z, x + t)
A:sympy.printing.tests.test_latex.expr_1->Pow(1, -1, evaluate=False)
A:sympy.printing.tests.test_latex.expr_2->Pow(1, Pow(1, -1, evaluate=False), evaluate=False)
A:sympy.printing.tests.test_latex.expr_3->Pow(3, -2, evaluate=False)
A:sympy.printing.tests.test_latex.expr_4->Pow(1, -2, evaluate=False)
A:sympy.printing.tests.test_latex.L->TensorIndexType('L')
A:sympy.printing.tests.test_latex.(i, j, k, l)->tensor_indices('i j k l', L)
A:sympy.printing.tests.test_latex.i0->tensor_indices('i_0', L)
A:sympy.printing.tests.test_latex.(A, B, C, D)->tensor_heads('A B C D', [L])
A:sympy.printing.tests.test_latex.H->TensorHead('H', [L, L])
A:sympy.printing.tests.test_latex.K->TensorHead('K', [L, L, L, L])
A:sympy.printing.tests.test_latex.(a, b, c, d, e, f)->symbols('a b c d e f')
A:sympy.printing.tests.test_latex.(a, x)->symbols('a x')
A:sympy.printing.tests.test_latex.sol->ConditionSet(Tuple(x, a), Eq(sin(a * x), 0) & Eq(cos(a * x), 0), S.Complexes ** 2)
A:sympy.printing.tests.test_latex.mu->symbols('mu')
A:sympy.printing.tests.test_latex.sigma->symbols('sigma', positive=True)
A:sympy.printing.tests.test_latex.result->UnimplementedExpr(expr)
A:sympy.printing.tests.test_latex.A_k->MatrixSymbol('A_k', 3, 3)
A:sympy.printing.tests.test_latex.(k, n)->symbols('k n')
A:sympy.printing.tests.test_latex.fo->FourierSeries(x, (x, -pi, pi), (0, SeqFormula(0, (k, 1, oo)), SeqFormula(Piecewise((-2 * pi * cos(n * pi) / n + 2 * sin(n * pi) / n ** 2, (n > -oo) & (n < oo) & Ne(n, 0)), (0, True)) * sin(n * x) / pi, (n, 1, oo))))
A:sympy.printing.tests.test_latex.(x, y)->symbols('x y', real=True)
A:sympy.printing.tests.test_latex.rect->CoordSystem('rect', p, [x, y])
A:sympy.printing.tests.test_latex.s_field->g(R2.x, R2.y)
A:sympy.printing.tests.test_latex.(x, y, z, t)->symbols('x y z t')
A:sympy.printing.tests.test_latex.(f, g, h)->symbols('f g h', cls=Function)
A:sympy.printing.tests.test_latex.z->symbols('z')
A:sympy.printing.tests.test_latex.arr->Array(range(11))
sympy.printing.tests.test_latex.lowergamma(sym.lowergamma)
sympy.printing.tests.test_latex.test_Adjoint()
sympy.printing.tests.test_latex.test_AppliedPermutation()
sympy.printing.tests.test_latex.test_Array()
sympy.printing.tests.test_latex.test_Determinant()
sympy.printing.tests.test_latex.test_ElementwiseApplyFunction()
sympy.printing.tests.test_latex.test_Feedback_printing()
sympy.printing.tests.test_latex.test_Hadamard()
sympy.printing.tests.test_latex.test_Identity()
sympy.printing.tests.test_latex.test_KroneckerProduct_printing()
sympy.printing.tests.test_latex.test_MIMOFeedback_printing()
sympy.printing.tests.test_latex.test_MatPow()
sympy.printing.tests.test_latex.test_MatrixElement_printing()
sympy.printing.tests.test_latex.test_MatrixSymbol_bold()
sympy.printing.tests.test_latex.test_MatrixSymbol_printing()
sympy.printing.tests.test_latex.test_Modules()
sympy.printing.tests.test_latex.test_Mul()
sympy.printing.tests.test_latex.test_OneMatrix()
sympy.printing.tests.test_latex.test_Parallel_printing()
sympy.printing.tests.test_latex.test_PermutationMatrix()
sympy.printing.tests.test_latex.test_PolynomialRingBase()
sympy.printing.tests.test_latex.test_Pow()
sympy.printing.tests.test_latex.test_PrettyPoly()
sympy.printing.tests.test_latex.test_Quaternion_latex_printing()
sympy.printing.tests.test_latex.test_QuotientRing()
sympy.printing.tests.test_latex.test_Series_printing()
sympy.printing.tests.test_latex.test_Str()
sympy.printing.tests.test_latex.test_TensorProduct_printing()
sympy.printing.tests.test_latex.test_Tr()
sympy.printing.tests.test_latex.test_TransferFunctionMatrix_printing()
sympy.printing.tests.test_latex.test_TransferFunction_printing()
sympy.printing.tests.test_latex.test_Transpose()
sympy.printing.tests.test_latex.test_WedgeProduct_printing()
sympy.printing.tests.test_latex.test_ZeroMatrix()
sympy.printing.tests.test_latex.test_boolean_args_order()
sympy.printing.tests.test_latex.test_builtin_no_args()
sympy.printing.tests.test_latex.test_builtin_without_args_mismatched_names()
sympy.printing.tests.test_latex.test_builtins_without_args()
sympy.printing.tests.test_latex.test_categories()
sympy.printing.tests.test_latex.test_custom_symbol_names()
sympy.printing.tests.test_latex.test_emptyPrinter()
sympy.printing.tests.test_latex.test_fancyset_symbols()
sympy.printing.tests.test_latex.test_function_subclass_different_name()
sympy.printing.tests.test_latex.test_global_settings()
sympy.printing.tests.test_latex.test_greek_symbols()
sympy.printing.tests.test_latex.test_hyper_printing()
sympy.printing.tests.test_latex.test_imaginary()
sympy.printing.tests.test_latex.test_imaginary_unit()
sympy.printing.tests.test_latex.test_integral_transforms()
sympy.printing.tests.test_latex.test_issue_10489()
sympy.printing.tests.test_latex.test_issue_12886()
sympy.printing.tests.test_latex.test_issue_13559()
sympy.printing.tests.test_latex.test_issue_13651()
sympy.printing.tests.test_latex.test_issue_15353()
sympy.printing.tests.test_latex.test_issue_15439()
sympy.printing.tests.test_latex.test_issue_17092()
sympy.printing.tests.test_latex.test_issue_21758()
sympy.printing.tests.test_latex.test_issue_2934()
sympy.printing.tests.test_latex.test_issue_3568()
sympy.printing.tests.test_latex.test_issue_6853()
sympy.printing.tests.test_latex.test_issue_7180()
sympy.printing.tests.test_latex.test_issue_8409()
sympy.printing.tests.test_latex.test_issue_8470()
sympy.printing.tests.test_latex.test_issue_9216()
sympy.printing.tests.test_latex.test_lamda()
sympy.printing.tests.test_latex.test_latex()
sympy.printing.tests.test_latex.test_latex_AccumuBounds()
sympy.printing.tests.test_latex.test_latex_Complement()
sympy.printing.tests.test_latex.test_latex_ComplexRegion()
sympy.printing.tests.test_latex.test_latex_ComplexRootOf()
sympy.printing.tests.test_latex.test_latex_Complexes()
sympy.printing.tests.test_latex.test_latex_ConditionSet()
sympy.printing.tests.test_latex.test_latex_Contains()
sympy.printing.tests.test_latex.test_latex_DFT_IDFT()
sympy.printing.tests.test_latex.test_latex_DiracDelta()
sympy.printing.tests.test_latex.test_latex_Float()
sympy.printing.tests.test_latex.test_latex_FormalPowerSeries()
sympy.printing.tests.test_latex.test_latex_FourierSeries()
sympy.printing.tests.test_latex.test_latex_FracElement()
sympy.printing.tests.test_latex.test_latex_Heaviside()
sympy.printing.tests.test_latex.test_latex_ImageSet()
sympy.printing.tests.test_latex.test_latex_Integers()
sympy.printing.tests.test_latex.test_latex_KroneckerDelta()
sympy.printing.tests.test_latex.test_latex_Lambda()
sympy.printing.tests.test_latex.test_latex_LeviCivita()
sympy.printing.tests.test_latex.test_latex_Matrix()
sympy.printing.tests.test_latex.test_latex_MatrixSlice()
sympy.printing.tests.test_latex.test_latex_NDimArray()
sympy.printing.tests.test_latex.test_latex_Naturals()
sympy.printing.tests.test_latex.test_latex_Naturals0()
sympy.printing.tests.test_latex.test_latex_NumberSymbols()
sympy.printing.tests.test_latex.test_latex_Piecewise()
sympy.printing.tests.test_latex.test_latex_Poly()
sympy.printing.tests.test_latex.test_latex_PolyElement()
sympy.printing.tests.test_latex.test_latex_Poly_order()
sympy.printing.tests.test_latex.test_latex_RandomDomain()
sympy.printing.tests.test_latex.test_latex_Range()
sympy.printing.tests.test_latex.test_latex_RootSum()
sympy.printing.tests.test_latex.test_latex_SetExpr()
sympy.printing.tests.test_latex.test_latex_SingularityFunction()
sympy.printing.tests.test_latex.test_latex_UnevaluatedExpr()
sympy.printing.tests.test_latex.test_latex_basic()
sympy.printing.tests.test_latex.test_latex_bessel()
sympy.printing.tests.test_latex.test_latex_brackets()
sympy.printing.tests.test_latex.test_latex_builtins()
sympy.printing.tests.test_latex.test_latex_commutator()
sympy.printing.tests.test_latex.test_latex_cycle()
sympy.printing.tests.test_latex.test_latex_decimal_separator()
sympy.printing.tests.test_latex.test_latex_derivatives()
sympy.printing.tests.test_latex.test_latex_dict()
sympy.printing.tests.test_latex.test_latex_diffgeom()
sympy.printing.tests.test_latex.test_latex_emptyset()
sympy.printing.tests.test_latex.test_latex_escape()
sympy.printing.tests.test_latex.test_latex_euler()
sympy.printing.tests.test_latex.test_latex_fresnel()
sympy.printing.tests.test_latex.test_latex_functions()
sympy.printing.tests.test_latex.test_latex_greek_functions()
sympy.printing.tests.test_latex.test_latex_indexed()
sympy.printing.tests.test_latex.test_latex_integrals()
sympy.printing.tests.test_latex.test_latex_intersection()
sympy.printing.tests.test_latex.test_latex_intervals()
sympy.printing.tests.test_latex.test_latex_inverse()
sympy.printing.tests.test_latex.test_latex_issue_4381()
sympy.printing.tests.test_latex.test_latex_issue_4576()
sympy.printing.tests.test_latex.test_latex_limits()
sympy.printing.tests.test_latex.test_latex_list()
sympy.printing.tests.test_latex.test_latex_log()
sympy.printing.tests.test_latex.test_latex_mathieu()
sympy.printing.tests.test_latex.test_latex_matrix_with_functions()
sympy.printing.tests.test_latex.test_latex_mul_symbol()
sympy.printing.tests.test_latex.test_latex_numbers()
sympy.printing.tests.test_latex.test_latex_order()
sympy.printing.tests.test_latex.test_latex_ordinals()
sympy.printing.tests.test_latex.test_latex_permutation()
sympy.printing.tests.test_latex.test_latex_pow_fraction()
sympy.printing.tests.test_latex.test_latex_powerset()
sympy.printing.tests.test_latex.test_latex_printer_tensor()
sympy.printing.tests.test_latex.test_latex_product()
sympy.printing.tests.test_latex.test_latex_productset()
sympy.printing.tests.test_latex.test_latex_rational()
sympy.printing.tests.test_latex.test_latex_sequences()
sympy.printing.tests.test_latex.test_latex_sets()
sympy.printing.tests.test_latex.test_latex_subs()
sympy.printing.tests.test_latex.test_latex_sum()
sympy.printing.tests.test_latex.test_latex_symbolic_probability()
sympy.printing.tests.test_latex.test_latex_symbols()
sympy.printing.tests.test_latex.test_latex_symbols_failing()
sympy.printing.tests.test_latex.test_latex_symmetric_difference()
sympy.printing.tests.test_latex.test_latex_union()
sympy.printing.tests.test_latex.test_latex_universalset()
sympy.printing.tests.test_latex.test_latex_vector_expressions()
sympy.printing.tests.test_latex.test_latex_with_unevaluated()
sympy.printing.tests.test_latex.test_matAdd()
sympy.printing.tests.test_latex.test_matMul()
sympy.printing.tests.test_latex.test_mode()
sympy.printing.tests.test_latex.test_modifiers()
sympy.printing.tests.test_latex.test_multiline_latex()
sympy.printing.tests.test_latex.test_noncommutative()
sympy.printing.tests.test_latex.test_other_symbols()
sympy.printing.tests.test_latex.test_pickleable()
sympy.printing.tests.test_latex.test_print_basic()
sympy.printing.tests.test_latex.test_printing_latex_array_expressions()
sympy.printing.tests.test_latex.test_printmethod()
sympy.printing.tests.test_latex.test_set_operators_parenthesis()
sympy.printing.tests.test_latex.test_settings()
sympy.printing.tests.test_latex.test_text_re_im()
sympy.printing.tests.test_latex.test_trace()
sympy.printing.tests.test_latex.test_translate()
sympy.printing.tests.test_latex.test_unit_printing()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_dot.py----------------------------------------
A:sympy.printing.tests.test_dot.text->dotprint(x + 2, labelfunc=srepr)
A:sympy.printing.tests.test_dot.n->Symbol('n')
A:sympy.printing.tests.test_dot.(x, y)->symbols('x y', commutative=False)
sympy.printing.tests.test_dot.test_Matrix_and_non_basics()
sympy.printing.tests.test_dot.test_attrprint()
sympy.printing.tests.test_dot.test_commutative()
sympy.printing.tests.test_dot.test_dotedges()
sympy.printing.tests.test_dot.test_dotnode()
sympy.printing.tests.test_dot.test_dotprint()
sympy.printing.tests.test_dot.test_dotprint_depth()
sympy.printing.tests.test_dot.test_labelfunc()
sympy.printing.tests.test_dot.test_purestr()
sympy.printing.tests.test_dot.test_styleof()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_smtlib.py----------------------------------------
A:sympy.printing.tests.test_smtlib.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_smtlib.DEFAULTING_TO_FLOAT->re.compile('Could not infer type of `.+`. Defaulting to float.', re.I)
A:sympy.printing.tests.test_smtlib.WILL_NOT_DECLARE->re.compile('Non-Symbol/Function `.+` will not be declared.', re.I)
A:sympy.printing.tests.test_smtlib.WILL_NOT_ASSERT->re.compile('Non-Boolean expression `.+` will not be asserted. Converting to SMTLib verbatim.', re.I)
A:sympy.printing.tests.test_smtlib.my_fun1->Function('f1')
A:sympy.printing.tests.test_smtlib.a->Symbol('a', integer=True)
A:sympy.printing.tests.test_smtlib.b->Symbol('b', real=True)
A:sympy.printing.tests.test_smtlib.c->Symbol('c')
A:sympy.printing.tests.test_smtlib.inst->sympy.logic.boolalg.Boolean.__new__(cls)
A:sympy.printing.tests.test_smtlib.inst._args->tuple(limits + [function])
A:sympy.printing.tests.test_smtlib.f->Function('f')
A:sympy.printing.tests.test_smtlib.g->Function('g')
A:sympy.printing.tests.test_smtlib.h->Function('h')
A:sympy.printing.tests.test_smtlib.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_smtlib.pw->Piecewise((x, x < 1), (x ** 2, True))
sympy.printing.tests.test_smtlib._W(Enum)
sympy.printing.tests.test_smtlib._check_warns(expected:typing.Iterable[_W])
sympy.printing.tests.test_smtlib.test_Function()
sympy.printing.tests.test_smtlib.test_Integer()
sympy.printing.tests.test_smtlib.test_Pow()
sympy.printing.tests.test_smtlib.test_Rational()
sympy.printing.tests.test_smtlib.test_Relational()
sympy.printing.tests.test_smtlib.test_basic_ops()
sympy.printing.tests.test_smtlib.test_boolean()
sympy.printing.tests.test_smtlib.test_mix_number_mult_symbols()
sympy.printing.tests.test_smtlib.test_not_supported()
sympy.printing.tests.test_smtlib.test_quantifier_extensions()
sympy.printing.tests.test_smtlib.test_smtlib_boolean()
sympy.printing.tests.test_smtlib.test_smtlib_piecewise()
sympy.printing.tests.test_smtlib.test_smtlib_piecewise_times_const()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_lambdarepr.py----------------------------------------
A:sympy.printing.tests.test_lambdarepr.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_lambdarepr.(i, a, b)->symbols('i,a,b')
A:sympy.printing.tests.test_lambdarepr.(j, c, d)->symbols('j,c,d')
A:sympy.printing.tests.test_lambdarepr.p->Piecewise((Piecewise((1, x > 0), (2, True)), y > 0), (3, True))
A:sympy.printing.tests.test_lambdarepr.l->lambdarepr(s)
A:sympy.printing.tests.test_lambdarepr.s->Sum(i * x + j, (i, a, b), (j, c, d))
A:sympy.printing.tests.test_lambdarepr.f->lambdify(args, s)
A:sympy.printing.tests.test_lambdarepr.f_ref->Sum(i * x + j, (i, a, b), (j, c, d)).subs(zip(args, vals)).doit()
A:sympy.printing.tests.test_lambdarepr.f_res->f(*vals)
A:sympy.printing.tests.test_lambdarepr.prntr->LambdaPrinter({'standard': 'python3'})
A:sympy.printing.tests.test_lambdarepr.expr->ITE(x > 0, True, False, evaluate=False)
A:sympy.printing.tests.test_lambdarepr.func_def->FunctionDefinition(None, 'foo', [Variable(x)], [Assignment(y, x), Return(y ** 2)])
A:sympy.printing.tests.test_lambdarepr.obj->CustomPrintedObject()
sympy.printing.tests.test_lambdarepr.CustomPrintedObject(Expr)
sympy.printing.tests.test_lambdarepr.CustomPrintedObject._lambdacode(self,printer)
sympy.printing.tests.test_lambdarepr.CustomPrintedObject._mpmathcode(self,printer)
sympy.printing.tests.test_lambdarepr.CustomPrintedObject._numexprcode(self,printer)
sympy.printing.tests.test_lambdarepr.CustomPrintedObject._numpycode(self,printer)
sympy.printing.tests.test_lambdarepr.CustomPrintedObject._tensorflowcode(self,printer)
sympy.printing.tests.test_lambdarepr.test_basic()
sympy.printing.tests.test_lambdarepr.test_matrix()
sympy.printing.tests.test_lambdarepr.test_multiple_sums()
sympy.printing.tests.test_lambdarepr.test_numexpr()
sympy.printing.tests.test_lambdarepr.test_piecewise()
sympy.printing.tests.test_lambdarepr.test_printmethod()
sympy.printing.tests.test_lambdarepr.test_settings()
sympy.printing.tests.test_lambdarepr.test_sqrt()
sympy.printing.tests.test_lambdarepr.test_sum__1()
sympy.printing.tests.test_lambdarepr.test_sum__2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_fortran.py----------------------------------------
A:sympy.printing.tests.test_fortran.(p, q, r)->symbols('p q r', real=True)
A:sympy.printing.tests.test_fortran.q_r->UnevaluatedExpr(q + r)
A:sympy.printing.tests.test_fortran.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_fortran.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_fortran.y_z->UnevaluatedExpr(y + z)
A:sympy.printing.tests.test_fortran.expr2->abs(exp(x + y_z))
A:sympy.printing.tests.test_fortran.x->symbols('x')
A:sympy.printing.tests.test_fortran.y->ArraySymbol('y', shape=(len_y,))
A:sympy.printing.tests.test_fortran.z->symbols('z', complex=True)
A:sympy.printing.tests.test_fortran.(x, y)->symbols('x y')
A:sympy.printing.tests.test_fortran.n->symbols('n', integer=True)
A:sympy.printing.tests.test_fortran.ob->FCodePrinter()
A:sympy.printing.tests.test_fortran.(x, x_, x__, y, X, X_, Y)->symbols('x,x_,x__,y,X,X_,Y')
A:sympy.printing.tests.test_fortran.(n, m)->symbols('n,m', integer=True)
A:sympy.printing.tests.test_fortran.A->MatrixSymbol('A', 1, 3)
A:sympy.printing.tests.test_fortran.i->symbols('i', integer=True)
A:sympy.printing.tests.test_fortran.I->Idx('I', n)
A:sympy.printing.tests.test_fortran.log10_17->log(10).evalf(17)
A:sympy.printing.tests.test_fortran.p->FCodePrinter({'source_format': 'free'})
A:sympy.printing.tests.test_fortran.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_fortran.gamma_f->fcode(gamma(x))
A:sympy.printing.tests.test_fortran.code->fcode(x[i], assign_to=y[i], source_format='free')
A:sympy.printing.tests.test_fortran.a->diff(a, x)
A:sympy.printing.tests.test_fortran.b->diff(b, x)
A:sympy.printing.tests.test_fortran.printer->MyFancyFCodePrinter()
A:sympy.printing.tests.test_fortran.wrapped_lines->MyFancyFCodePrinter()._wrap_fortran(lines)
A:sympy.printing.tests.test_fortran.result->FCodePrinter({'source_format': 'free'}).indent_code(codelines)
A:sympy.printing.tests.test_fortran.j->Idx('j', n)
A:sympy.printing.tests.test_fortran.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_fortran.Dy->ArraySymbol('Dy', shape=(len_y - 1,))
A:sympy.printing.tests.test_fortran.e->Eq(Dy[i], (y[i + 1] - y[i]) / (x[i + 1] - x[i]))
A:sympy.printing.tests.test_fortran.code0->fcode(Assignment(e.lhs, e.rhs))
A:sympy.printing.tests.test_fortran._default_settings->sympy.printing.fortran.FCodePrinter._default_settings.copy()
A:sympy.printing.tests.test_fortran.mat->Matrix([x * y, Piecewise((2 + x, y > 0), (y, True)), sin(z)])
A:sympy.printing.tests.test_fortran.q->MatrixSymbol('q', 5, 1)
A:sympy.printing.tests.test_fortran.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_fortran.m->Matrix([[sin(q[1, 0]), 0, cos(q[2, 0])], [q[1, 0] + q[2, 0], q[3, 0], 5], [2 * q[4, 0] / q[1, 0], sqrt(q[0, 0]) + 4, 0]])
A:sympy.printing.tests.test_fortran.f->For(x, Range(0, 10, 2), [Assignment(y, x * y)])
A:sympy.printing.tests.test_fortran.sol->fcode(f)
A:sympy.printing.tests.test_fortran.var1->sympy.codegen.ast.Variable.deduced(i)
A:sympy.printing.tests.test_fortran.dcl1->Declaration(var1)
A:sympy.printing.tests.test_fortran.var2->Variable(x, float32, value=42, attrs={value_const})
A:sympy.printing.tests.test_fortran.dcl2b->Declaration(var2)
A:sympy.printing.tests.test_fortran.var3->Variable(y, type=bool_)
A:sympy.printing.tests.test_fortran.dcl3->Declaration(var3)
A:sympy.printing.tests.test_fortran.B->MatrixSymbol('B', 1, 3)
A:sympy.printing.tests.test_fortran.C->MatrixSymbol('C', 1, 3)
A:sympy.printing.tests.test_fortran.F->C[0, 0].subs(C, A - B)
A:sympy.printing.tests.test_fortran.vx->Variable(x, type=real)
A:sympy.printing.tests.test_fortran.vn->Variable(n, type=integer)
A:sympy.printing.tests.test_fortran.fp1->FunctionPrototype(real, 'power', [vx, vn])
A:sympy.printing.tests.test_fortran.fd1->FunctionDefinition(real, 'power', [vx, vn], body)
sympy.printing.tests.test_fortran.test_FunctionDefinition_print()
sympy.printing.tests.test_fortran.test_FunctionPrototype_print()
sympy.printing.tests.test_fortran.test_MatrixElement_printing()
sympy.printing.tests.test_fortran.test_Matrix_printing()
sympy.printing.tests.test_fortran.test_UnevaluatedExpr()
sympy.printing.tests.test_fortran.test_While()
sympy.printing.tests.test_fortran.test_assign_to()
sympy.printing.tests.test_fortran.test_aug_assign()
sympy.printing.tests.test_fortran.test_case()
sympy.printing.tests.test_fortran.test_derived_classes()
sympy.printing.tests.test_fortran.test_dummy_loops()
sympy.printing.tests.test_fortran.test_element_like_objects()
sympy.printing.tests.test_fortran.test_fcode_Declaration()
sympy.printing.tests.test_fortran.test_fcode_Float()
sympy.printing.tests.test_fortran.test_fcode_For()
sympy.printing.tests.test_fortran.test_fcode_Indexed_without_looking_for_contraction()
sympy.printing.tests.test_fortran.test_fcode_Integer()
sympy.printing.tests.test_fortran.test_fcode_Logical()
sympy.printing.tests.test_fortran.test_fcode_NumberSymbol()
sympy.printing.tests.test_fortran.test_fcode_Piecewise()
sympy.printing.tests.test_fortran.test_fcode_Pow()
sympy.printing.tests.test_fortran.test_fcode_Rational()
sympy.printing.tests.test_fortran.test_fcode_Relational()
sympy.printing.tests.test_fortran.test_fcode_Xlogical()
sympy.printing.tests.test_fortran.test_fcode_complex()
sympy.printing.tests.test_fortran.test_fcode_functions()
sympy.printing.tests.test_fortran.test_fcode_functions_with_integers()
sympy.printing.tests.test_fortran.test_fcode_precedence()
sympy.printing.tests.test_fortran.test_fcode_sign()
sympy.printing.tests.test_fortran.test_free_form_code_line()
sympy.printing.tests.test_fortran.test_free_form_comment_line()
sympy.printing.tests.test_fortran.test_free_form_continuation_line()
sympy.printing.tests.test_fortran.test_implicit()
sympy.printing.tests.test_fortran.test_indent()
sympy.printing.tests.test_fortran.test_inline_function()
sympy.printing.tests.test_fortran.test_line_wrapping()
sympy.printing.tests.test_fortran.test_loops()
sympy.printing.tests.test_fortran.test_not_fortran()
sympy.printing.tests.test_fortran.test_printmethod()
sympy.printing.tests.test_fortran.test_settings()
sympy.printing.tests.test_fortran.test_user_functions()
sympy.printing.tests.test_fortran.test_wrap_fortran()
sympy.printing.tests.test_fortran.test_wrap_fortran_keep_d0()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_c.py----------------------------------------
A:sympy.printing.tests.test_c.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_c.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_c.big_min->Min(*symbols('a[0:50]'))
A:sympy.printing.tests.test_c.output->ccode(big_min, standard=curr_standard)
A:sympy.printing.tests.test_c.x->IndexedBase('x')
A:sympy.printing.tests.test_c.A->MatrixSymbol('A', 1, 3)
A:sympy.printing.tests.test_c.i->symbols('i', integer=True)
A:sympy.printing.tests.test_c.gamma_c89->ccode(gamma(x), standard='C89', allow_unknown_functions=True)
A:sympy.printing.tests.test_c.(r, s)->symbols('r,s', real=True)
A:sympy.printing.tests.test_c.(p1, p2)->symbols('p1 p2', integer=True, positive=True)
A:sympy.printing.tests.test_c.n->symbols('n', integer=True)
A:sympy.printing.tests.test_c.expr->abs(exp(p + q_r))
A:sympy.printing.tests.test_c.muladd->Function('muladd')
A:sympy.printing.tests.test_c.out->ccode(expr, user_functions={'muladd': 'muladd'})
A:sympy.printing.tests.test_c.p->symbols('p', integer=True, positive=True)
A:sympy.printing.tests.test_c.(s, n, m, o)->symbols('s n m o', integer=True)
A:sympy.printing.tests.test_c.Abase->IndexedBase('A', strides=(s, m, n), offset=o)
A:sympy.printing.tests.test_c.y->IndexedBase('y')
A:sympy.printing.tests.test_c.Dy->IndexedBase('Dy', shape=(len_y - 1,))
A:sympy.printing.tests.test_c.e->Eq(Dy[i], (y[i + 1] - y[i]) / (x[i + 1] - x[i]))
A:sympy.printing.tests.test_c.code0->ccode(e.rhs, assign_to=e.lhs, contract=False)
A:sympy.printing.tests.test_c.(n, m)->symbols('n m', integer=True)
A:sympy.printing.tests.test_c.j->Idx('j', n)
A:sympy.printing.tests.test_c.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_c.z->IndexedBase('z')
A:sympy.printing.tests.test_c.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.printing.tests.test_c.a->IndexedBase('a')
A:sympy.printing.tests.test_c.b->IndexedBase('b')
A:sympy.printing.tests.test_c.k->Idx('k', o)
A:sympy.printing.tests.test_c.l->Idx('l', p)
A:sympy.printing.tests.test_c.c->ccode(b[j] * a[i, j] + b[k] * a[i, k] + b[j] * b[k] * c[i, j, k], assign_to=y[i])
A:sympy.printing.tests.test_c.mat->Matrix([x * y, Piecewise((2 + x, y > 0), (y, True)), sin(z)])
A:sympy.printing.tests.test_c.q->MatrixSymbol('q', 5, 1)
A:sympy.printing.tests.test_c.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_c.m->Matrix([[sin(q[1, 0]), 0, cos(q[2, 0])], [q[1, 0] + q[2, 0], q[3, 0], 5], [2 * q[4, 0] / q[1, 0], sqrt(q[0, 0]) + 4, 0]])
A:sympy.printing.tests.test_c.(x, y)->symbols('x, if')
A:sympy.printing.tests.test_c.f->For(x, Range(0, 10, 2), [aug_assign(y, '*', x)])
A:sympy.printing.tests.test_c.c89printer->C89CodePrinter()
A:sympy.printing.tests.test_c.c99printer->C99CodePrinter()
A:sympy.printing.tests.test_c.f80_printer->C99CodePrinter({'type_aliases': {real: float80}})
A:sympy.printing.tests.test_c.f32_printer->C99CodePrinter({'type_aliases': {real: float32}})
A:sympy.printing.tests.test_c.f64_printer->C99CodePrinter({'type_aliases': {real: float64}})
A:sympy.printing.tests.test_c.macros->get_math_macros()
A:sympy.printing.tests.test_c.var1->Variable(i, type=Type.from_expr(i))
A:sympy.printing.tests.test_c.dcl1->Declaration(var1)
A:sympy.printing.tests.test_c.var2->Variable(x, type=float32, attrs={value_const})
A:sympy.printing.tests.test_c.dcl2a->Declaration(var2)
A:sympy.printing.tests.test_c.dcl2b->Variable(x, type=float32, attrs={value_const}).as_Declaration(value=pi)
A:sympy.printing.tests.test_c.var3->Variable(y, type=Type('bool'))
A:sympy.printing.tests.test_c.dcl3->Declaration(var3)
A:sympy.printing.tests.test_c.printer->C89CodePrinter()
A:sympy.printing.tests.test_c.u->symbols('u', real=True)
A:sympy.printing.tests.test_c.ptr4->sympy.codegen.ast.Pointer.deduced(u, attrs={pointer_const, restrict})
A:sympy.printing.tests.test_c.dcl4->Declaration(ptr4)
A:sympy.printing.tests.test_c.var5->Variable(x, f128, attrs={value_const})
A:sympy.printing.tests.test_c.dcl5a->Declaration(var5)
A:sympy.printing.tests.test_c.var5b->Variable(x, f128, value=Catalan.evalf(38), attrs={value_const})
A:sympy.printing.tests.test_c.dcl5b->Declaration(var5b)
A:sympy.printing.tests.test_c.f128->FloatType('_Float128', float128.nbits, float128.nmant, float128.nexp)
A:sympy.printing.tests.test_c.p128->C99CodePrinter({'type_aliases': {real: f128}, 'type_literal_suffixes': {f128: 'Q'}, 'type_func_suffixes': {f128: 'f128'}, 'type_math_macro_suffixes': {real: 'f128', f128: 'f128'}, 'type_macros': {f128: ('__STDC_WANT_IEC_60559_TYPES_EXT__',)}})
A:sympy.printing.tests.test_c.dcl5c->Declaration(var5b)
A:sympy.printing.tests.test_c.B->MatrixSymbol('B', 1, 3)
A:sympy.printing.tests.test_c.C->MatrixSymbol('C', 1, 3)
A:sympy.printing.tests.test_c.F->C[0, 0].subs(C, A - B)
A:sympy.printing.tests.test_c.inp_x->Declaration(Variable(x, type=real))
A:sympy.printing.tests.test_c.block->CodeBlock(x, Print([x, y], '%d %d'), FunctionCall('pwer', [x]), Return(x))
A:sympy.printing.tests.test_c.w->symbols('w')
A:sympy.printing.tests.test_c.(p, q, r)->symbols('p q r', real=True)
A:sympy.printing.tests.test_c.q_r->UnevaluatedExpr(q + r)
sympy.printing.tests.test_c.test_C89CodePrinter()
sympy.printing.tests.test_c.test_C99CodePrinter()
sympy.printing.tests.test_c.test_C99CodePrinter__precision()
sympy.printing.tests.test_c.test_C99CodePrinter__precision_f80()
sympy.printing.tests.test_c.test_C99CodePrinter_custom_type()
sympy.printing.tests.test_c.test_Element()
sympy.printing.tests.test_c.test_MatrixElement_printing()
sympy.printing.tests.test_c.test_Matrix_printing()
sympy.printing.tests.test_c.test_ccode_Assignment()
sympy.printing.tests.test_c.test_ccode_Declaration()
sympy.printing.tests.test_c.test_ccode_For()
sympy.printing.tests.test_c.test_ccode_ITE()
sympy.printing.tests.test_c.test_ccode_Indexed()
sympy.printing.tests.test_c.test_ccode_Indexed_without_looking_for_contraction()
sympy.printing.tests.test_c.test_ccode_Integer()
sympy.printing.tests.test_c.test_ccode_Max()
sympy.printing.tests.test_c.test_ccode_Max_Min()
sympy.printing.tests.test_c.test_ccode_Min_performance()
sympy.printing.tests.test_c.test_ccode_Piecewise()
sympy.printing.tests.test_c.test_ccode_Piecewise_deep()
sympy.printing.tests.test_c.test_ccode_Pow()
sympy.printing.tests.test_c.test_ccode_Rational()
sympy.printing.tests.test_c.test_ccode_Relational()
sympy.printing.tests.test_c.test_ccode_Type()
sympy.printing.tests.test_c.test_ccode_UnevaluatedExpr()
sympy.printing.tests.test_c.test_ccode_array_like_containers()
sympy.printing.tests.test_c.test_ccode_boolean()
sympy.printing.tests.test_c.test_ccode_codegen_ast()
sympy.printing.tests.test_c.test_ccode_constants_mathh()
sympy.printing.tests.test_c.test_ccode_constants_other()
sympy.printing.tests.test_c.test_ccode_exceptions()
sympy.printing.tests.test_c.test_ccode_functions()
sympy.printing.tests.test_c.test_ccode_functions2()
sympy.printing.tests.test_c.test_ccode_inline_function()
sympy.printing.tests.test_c.test_ccode_loops_add()
sympy.printing.tests.test_c.test_ccode_loops_addfactor()
sympy.printing.tests.test_c.test_ccode_loops_matrix_vector()
sympy.printing.tests.test_c.test_ccode_loops_multiple_contractions()
sympy.printing.tests.test_c.test_ccode_loops_multiple_terms()
sympy.printing.tests.test_c.test_ccode_math_macros()
sympy.printing.tests.test_c.test_ccode_reserved_words()
sympy.printing.tests.test_c.test_ccode_settings()
sympy.printing.tests.test_c.test_ccode_sign()
sympy.printing.tests.test_c.test_ccode_sinc()
sympy.printing.tests.test_c.test_ccode_sqrt()
sympy.printing.tests.test_c.test_ccode_standard()
sympy.printing.tests.test_c.test_ccode_user_functions()
sympy.printing.tests.test_c.test_dereference_printing()
sympy.printing.tests.test_c.test_dummy_loops()
sympy.printing.tests.test_c.test_get_math_macros()
sympy.printing.tests.test_c.test_printmethod()
sympy.printing.tests.test_c.test_sparse_matrix()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_rcode.py----------------------------------------
A:sympy.printing.tests.test_rcode.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_rcode.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_rcode.x->IndexedBase('x')
A:sympy.printing.tests.test_rcode.A->MatrixSymbol('A', 1, 3)
A:sympy.printing.tests.test_rcode.i->Idx('i', m)
A:sympy.printing.tests.test_rcode.res->rcode(expr)
A:sympy.printing.tests.test_rcode.n->symbols('n', integer=True)
A:sympy.printing.tests.test_rcode.expr->sign(cos(x))
A:sympy.printing.tests.test_rcode.tau->Symbol('tau')
A:sympy.printing.tests.test_rcode.p->rcode(expr)
A:sympy.printing.tests.test_rcode.(n, m, o)->symbols('n m o', integer=True)
A:sympy.printing.tests.test_rcode.p._not_r->set()
A:sympy.printing.tests.test_rcode.y->IndexedBase('y')
A:sympy.printing.tests.test_rcode.Dy->IndexedBase('Dy', shape=(len_y - 1,))
A:sympy.printing.tests.test_rcode.e->Eq(Dy[i], (y[i + 1] - y[i]) / (x[i + 1] - x[i]))
A:sympy.printing.tests.test_rcode.code0->rcode(e.rhs, assign_to=e.lhs, contract=False)
A:sympy.printing.tests.test_rcode.(n, m)->symbols('n m', integer=True)
A:sympy.printing.tests.test_rcode.j->Idx('j', n)
A:sympy.printing.tests.test_rcode.c->rcode(b[j] * a[i, j] + b[k] * a[i, k] + b[j] * b[k] * c[i, j, k], assign_to=y[i])
A:sympy.printing.tests.test_rcode.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_rcode.code->rcode(x[i], assign_to=y[i])
A:sympy.printing.tests.test_rcode.z->IndexedBase('z')
A:sympy.printing.tests.test_rcode.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.printing.tests.test_rcode.a->IndexedBase('a')
A:sympy.printing.tests.test_rcode.b->IndexedBase('b')
A:sympy.printing.tests.test_rcode.k->Idx('k', o)
A:sympy.printing.tests.test_rcode.l->Idx('l', p)
A:sympy.printing.tests.test_rcode.mat->Matrix([x * y, Piecewise((2 + x, y > 0), (y, True)), sin(z)])
A:sympy.printing.tests.test_rcode.q->MatrixSymbol('q', 5, 1)
A:sympy.printing.tests.test_rcode.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_rcode.m->Matrix([[sin(q[1, 0]), 0, cos(q[2, 0])], [q[1, 0] + q[2, 0], q[3, 0], 5], [2 * q[4, 0] / q[1, 0], sqrt(q[0, 0]) + 4, 0]])
A:sympy.printing.tests.test_rcode.f->For(x, Range(0, 10, 2), [aug_assign(y, '*', x)])
A:sympy.printing.tests.test_rcode.sol->rcode(f)
A:sympy.printing.tests.test_rcode.B->MatrixSymbol('B', 1, 3)
A:sympy.printing.tests.test_rcode.C->MatrixSymbol('C', 1, 3)
A:sympy.printing.tests.test_rcode.F->C[0, 0].subs(C, A - B)
sympy.printing.tests.test_rcode.test_MatrixElement_printing()
sympy.printing.tests.test_rcode.test_Matrix_printing()
sympy.printing.tests.test_rcode.test_dereference_printing()
sympy.printing.tests.test_rcode.test_dummy_loops()
sympy.printing.tests.test_rcode.test_printmethod()
sympy.printing.tests.test_rcode.test_rcode_Assignment()
sympy.printing.tests.test_rcode.test_rcode_For()
sympy.printing.tests.test_rcode.test_rcode_ITE()
sympy.printing.tests.test_rcode.test_rcode_Indexed()
sympy.printing.tests.test_rcode.test_rcode_Indexed_without_looking_for_contraction()
sympy.printing.tests.test_rcode.test_rcode_Integer()
sympy.printing.tests.test_rcode.test_rcode_Max()
sympy.printing.tests.test_rcode.test_rcode_Piecewise()
sympy.printing.tests.test_rcode.test_rcode_Piecewise_deep()
sympy.printing.tests.test_rcode.test_rcode_Pow()
sympy.printing.tests.test_rcode.test_rcode_Rational()
sympy.printing.tests.test_rcode.test_rcode_Relational()
sympy.printing.tests.test_rcode.test_rcode_boolean()
sympy.printing.tests.test_rcode.test_rcode_constants_mathh()
sympy.printing.tests.test_rcode.test_rcode_constants_other()
sympy.printing.tests.test_rcode.test_rcode_exceptions()
sympy.printing.tests.test_rcode.test_rcode_functions()
sympy.printing.tests.test_rcode.test_rcode_inline_function()
sympy.printing.tests.test_rcode.test_rcode_loops_add()
sympy.printing.tests.test_rcode.test_rcode_loops_addfactor()
sympy.printing.tests.test_rcode.test_rcode_loops_matrix_vector()
sympy.printing.tests.test_rcode.test_rcode_loops_multiple_contractions()
sympy.printing.tests.test_rcode.test_rcode_loops_multiple_terms()
sympy.printing.tests.test_rcode.test_rcode_settings()
sympy.printing.tests.test_rcode.test_rcode_sgn()
sympy.printing.tests.test_rcode.test_rcode_sinc()
sympy.printing.tests.test_rcode.test_rcode_sqrt()
sympy.printing.tests.test_rcode.test_rcode_user_functions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_repr.py----------------------------------------
A:sympy.printing.tests.test_repr.(x, y)->symbols('x,y')
A:sympy.printing.tests.test_repr.ENV2->ENV.copy()
A:sympy.printing.tests.test_repr.expr->op(*symbols('x:256'))
A:sympy.printing.tests.test_repr.x->Symbol('x', negative=0, integer=1)
A:sympy.printing.tests.test_repr.d->symbols('n', integer=True).as_dummy()
A:sympy.printing.tests.test_repr.n->symbols('n', integer=True)
A:sympy.printing.tests.test_repr.a->AlgebraicNumber(root(-2, 3))
A:sympy.printing.tests.test_repr.(R, x, y)->ring('x,y', ZZ)
A:sympy.printing.tests.test_repr.(F, x, y)->field('x,y', ZZ)
A:sympy.printing.tests.test_repr.A->MatrixSymbol('A', n, n)
A:sympy.printing.tests.test_repr.B->MatrixSymbol('B', n, n)
A:sympy.printing.tests.test_repr.s->set()
sympy.printing.tests.test_repr.sT(expr,string,import_stmt=None,**kwargs)
sympy.printing.tests.test_repr.test_Add()
sympy.printing.tests.test_repr.test_AlgebraicNumber()
sympy.printing.tests.test_repr.test_AppliedPredicate()
sympy.printing.tests.test_repr.test_BooleanAtom()
sympy.printing.tests.test_repr.test_Cycle()
sympy.printing.tests.test_repr.test_DMP()
sympy.printing.tests.test_repr.test_Dummy()
sympy.printing.tests.test_repr.test_Dummy_assumption()
sympy.printing.tests.test_repr.test_Dummy_from_Symbol()
sympy.printing.tests.test_repr.test_ExtensionElement()
sympy.printing.tests.test_repr.test_FiniteExtension()
sympy.printing.tests.test_repr.test_Float()
sympy.printing.tests.test_repr.test_FracElement()
sympy.printing.tests.test_repr.test_FracField()
sympy.printing.tests.test_repr.test_FractionField()
sympy.printing.tests.test_repr.test_Function()
sympy.printing.tests.test_repr.test_Geometry()
sympy.printing.tests.test_repr.test_Heaviside()
sympy.printing.tests.test_repr.test_Integer()
sympy.printing.tests.test_repr.test_Integers()
sympy.printing.tests.test_repr.test_Matrix()
sympy.printing.tests.test_repr.test_Mul()
sympy.printing.tests.test_repr.test_Naturals()
sympy.printing.tests.test_repr.test_Naturals0()
sympy.printing.tests.test_repr.test_Permutation()
sympy.printing.tests.test_repr.test_PolyElement()
sympy.printing.tests.test_repr.test_PolyRing()
sympy.printing.tests.test_repr.test_PolynomialRingBase()
sympy.printing.tests.test_repr.test_Predicate()
sympy.printing.tests.test_repr.test_Rational()
sympy.printing.tests.test_repr.test_Reals()
sympy.printing.tests.test_repr.test_Singletons()
sympy.printing.tests.test_repr.test_Symbol()
sympy.printing.tests.test_repr.test_Symbol_no_special_commutative_treatment()
sympy.printing.tests.test_repr.test_Symbol_two_assumptions()
sympy.printing.tests.test_repr.test_Wild()
sympy.printing.tests.test_repr.test_WildFunction()
sympy.printing.tests.test_repr.test_dict()
sympy.printing.tests.test_repr.test_empty_Matrix()
sympy.printing.tests.test_repr.test_list()
sympy.printing.tests.test_repr.test_matrix_expressions()
sympy.printing.tests.test_repr.test_more_than_255_args_issue_10259()
sympy.printing.tests.test_repr.test_printmethod()
sympy.printing.tests.test_repr.test_set()
sympy.printing.tests.test_repr.test_settins()
sympy.printing.tests.test_repr.test_tuple()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_preview.py----------------------------------------
A:sympy.printing.tests.test_preview.x->Symbol('x')
A:sympy.printing.tests.test_preview.obj->BytesIO()
A:sympy.printing.tests.test_preview.a->Symbol('α')
A:sympy.printing.tests.test_preview.pw->Piecewise((1, Eq(x, 0)), (0, True))
sympy.printing.tests.test_preview.test_preview()
sympy.printing.tests.test_preview.test_preview_latex_construct_in_expr()
sympy.printing.tests.test_preview.test_preview_unicode_symbol()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_theanocode.py----------------------------------------
A:sympy.printing.tests.test_theanocode.theanologger->logging.getLogger('theano.configdefaults')
A:sympy.printing.tests.test_theanocode.theano->import_module('theano')
A:sympy.printing.tests.test_theanocode.f_t->sympy.Function('f')(t)
A:sympy.printing.tests.test_theanocode.outs->list(map(theano_code_, exprs))
A:sympy.printing.tests.test_theanocode.ins->import_module('theano').gof.graph.inputs(outs)
A:sympy.printing.tests.test_theanocode.(ins, outs)->import_module('theano').gof.graph.clone(ins, outs)
A:sympy.printing.tests.test_theanocode.mode->import_module('theano').compile.get_default_mode().excluding('fusion')
A:sympy.printing.tests.test_theanocode.fgraph->fgraph.clone().clone()
A:sympy.printing.tests.test_theanocode.a_is_num->isinstance(a, numeric_types)
A:sympy.printing.tests.test_theanocode.b_is_num->isinstance(b, numeric_types)
A:sympy.printing.tests.test_theanocode.a_is_seq->isinstance(a, (tuple, list))
A:sympy.printing.tests.test_theanocode.b_is_seq->isinstance(b, (tuple, list))
A:sympy.printing.tests.test_theanocode.astr->import_module('theano').printing.debugprint(a, file='str')
A:sympy.printing.tests.test_theanocode.bstr->import_module('theano').printing.debugprint(b, file='str')
A:sympy.printing.tests.test_theanocode.xx->numpy.arange(3).astype('float64')
A:sympy.printing.tests.test_theanocode.xx2->theano_code_(x, broadcastables={x: (False,)})
A:sympy.printing.tests.test_theanocode.XX->theano_code_(X)
A:sympy.printing.tests.test_theanocode.ftt->theano_code_(f_t)
A:sympy.printing.tests.test_theanocode.comp->theano_code_(expr)
A:sympy.printing.tests.test_theanocode.expr_t->theano_code_(expr)
A:sympy.printing.tests.test_theanocode.n->sympy.Symbol('n', integer=True)
A:sympy.printing.tests.test_theanocode.f->theano_function_(inputs, [output], dtypes=dtypes, cache={})
A:sympy.printing.tests.test_theanocode.(o1, o2)->f(2, 3)
A:sympy.printing.tests.test_theanocode.m->sympy.Matrix([[x, y], [z, x + y + z]])
A:sympy.printing.tests.test_theanocode.expected->tt.switch(tt.and_(xt > 0, xt < 2), 0, tt.switch(tt.or_(xt > 2, xt < 0), xt, np.nan))
A:sympy.printing.tests.test_theanocode.out_values->f(*in_values)
A:sympy.printing.tests.test_theanocode.a1->getattr(s1, attr)
A:sympy.printing.tests.test_theanocode.a2->getattr(s2, attr)
A:sympy.printing.tests.test_theanocode.X->MatrixType([[sy.cos(t), -sy.sin(t)], [sy.sin(t), sy.cos(t)]])
A:sympy.printing.tests.test_theanocode.Yt->theano_code_(Y, dtypes={n: 'int32', k: 'int32'})
A:sympy.printing.tests.test_theanocode.s->ts.Scalar('int64')
A:sympy.printing.tests.test_theanocode.k->sympy.Symbol('k')
A:sympy.printing.tests.test_theanocode.(At, Bt, Ct, Dt)->map(theano_code_, (A, B, C, D))
A:sympy.printing.tests.test_theanocode.Block->sympy.BlockMatrix([[A, B], [C, D]])
A:sympy.printing.tests.test_theanocode.Blockt->theano_code_(Block)
A:sympy.printing.tests.test_theanocode.A->sympy.MatrixSymbol('A', n, k)
A:sympy.printing.tests.test_theanocode.B->sympy.MatrixSymbol('B', n, n)
A:sympy.printing.tests.test_theanocode.cutoutput->output.subs(dict(zip(inputs, cutinputs)))
A:sympy.printing.tests.test_theanocode.dtypes->dict(zip(inputs, [dtype] * len(inputs)))
A:sympy.printing.tests.test_theanocode.fblocked->theano_function_(inputs, [sy.block_collapse(cutoutput)], dtypes=dtypes, cache={})
A:sympy.printing.tests.test_theanocode.t->sympy.Symbol('theta')
A:sympy.printing.tests.test_theanocode.tX->theano_code_(X)
A:sympy.printing.tests.test_theanocode.st->theano_code_(s, cache=cache)
A:sympy.printing.tests.test_theanocode.backup->dict(global_cache)
A:sympy.printing.tests.test_theanocode.expr->sympy.Piecewise((0, sy.And(x > 0, x < 2)), (x, sy.Or(x > 2, x < 0)))
A:sympy.printing.tests.test_theanocode.seen->set()
A:sympy.printing.tests.test_theanocode.result->theano_code_(expr)
A:sympy.printing.tests.test_theanocode.tf->theano_function_([], [1 + 1j])
A:sympy.printing.tests.test_theanocode.e_a->sympy.exp(1)
A:sympy.printing.tests.test_theanocode.e->theano_code_(e_b)
sympy.printing.tests.test_theanocode.fgraph_of(*exprs)
sympy.printing.tests.test_theanocode.test_AppliedUndef()
sympy.printing.tests.test_theanocode.test_BlockMatrix()
sympy.printing.tests.test_theanocode.test_BlockMatrix_Inverse_execution()
sympy.printing.tests.test_theanocode.test_DenseMatrix()
sympy.printing.tests.test_theanocode.test_Derivative()
sympy.printing.tests.test_theanocode.test_Exp1()
sympy.printing.tests.test_theanocode.test_Integers()
sympy.printing.tests.test_theanocode.test_MatAdd()
sympy.printing.tests.test_theanocode.test_MatMul()
sympy.printing.tests.test_theanocode.test_MatrixSlice()
sympy.printing.tests.test_theanocode.test_MatrixSymbol()
sympy.printing.tests.test_theanocode.test_MatrixSymbol_wrong_dims()
sympy.printing.tests.test_theanocode.test_Piecewise()
sympy.printing.tests.test_theanocode.test_Rationals()
sympy.printing.tests.test_theanocode.test_Relationals()
sympy.printing.tests.test_theanocode.test_Symbol()
sympy.printing.tests.test_theanocode.test_Transpose()
sympy.printing.tests.test_theanocode.test_add()
sympy.printing.tests.test_theanocode.test_broadcastables()
sympy.printing.tests.test_theanocode.test_broadcasting()
sympy.printing.tests.test_theanocode.test_cache_basic()
sympy.printing.tests.test_theanocode.test_cache_complex()
sympy.printing.tests.test_theanocode.test_cache_types_distinct()
sympy.printing.tests.test_theanocode.test_complexfunctions()
sympy.printing.tests.test_theanocode.test_constantfunctions()
sympy.printing.tests.test_theanocode.test_dim_handling()
sympy.printing.tests.test_theanocode.test_dtype()
sympy.printing.tests.test_theanocode.test_example_symbols()
sympy.printing.tests.test_theanocode.test_factorial()
sympy.printing.tests.test_theanocode.test_global_cache()
sympy.printing.tests.test_theanocode.test_many()
sympy.printing.tests.test_theanocode.test_slice()
sympy.printing.tests.test_theanocode.test_symbols_are_created_once()
sympy.printing.tests.test_theanocode.test_theano_function_bad_kwarg()
sympy.printing.tests.test_theanocode.test_theano_function_kwargs()
sympy.printing.tests.test_theanocode.test_theano_function_matrix()
sympy.printing.tests.test_theanocode.test_theano_function_multi()
sympy.printing.tests.test_theanocode.test_theano_function_numpy()
sympy.printing.tests.test_theanocode.test_theano_function_scalar()
sympy.printing.tests.test_theanocode.test_theano_function_simple()
sympy.printing.tests.test_theanocode.test_trig()
sympy.printing.tests.test_theanocode.theano_code_(expr,**kwargs)
sympy.printing.tests.test_theanocode.theano_function_(inputs,outputs,**kwargs)
sympy.printing.tests.test_theanocode.theano_simplify(fgraph)
sympy.printing.tests.test_theanocode.theq(a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/tests/test_conventions.py----------------------------------------
A:sympy.printing.tests.test_conventions.(x, y, z, t, nu)->symbols('x y z t nu')
A:sympy.printing.tests.test_conventions.n->symbols('n', integer=True)
A:sympy.printing.tests.test_conventions.f->symbols('f', cls=Function)
A:sympy.printing.tests.test_conventions.g->sum(f)
A:sympy.printing.tests.test_conventions.(x, y)->symbols('x y')
sympy.printing.tests.test_conventions.test_requires_partial()
sympy.printing.tests.test_conventions.test_requires_partial_unspecified_variables()
sympy.printing.tests.test_conventions.test_super_sub()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/pretty/pretty_symbology.py----------------------------------------
A:sympy.printing.pretty.pretty_symbology.encoding->getattr(sys.stdout, 'encoding', None)
A:sympy.printing.pretty.pretty_symbology.greek_letters->list(greeks)
A:sympy.printing.pretty.pretty_symbology.greek_bold_letters->list(greeks)
A:sympy.printing.pretty.pretty_symbology.sub[l]->LSUB(l)
A:sympy.printing.pretty.pretty_symbology.sup[l]->LSUP(l)
A:sympy.printing.pretty.pretty_symbology.sub[gl]->GSUB(gl)
A:sympy.printing.pretty.pretty_symbology.sub[d]->DSUB(d)
A:sympy.printing.pretty.pretty_symbology.sup[d]->DSUP(d)
A:sympy.printing.pretty.pretty_symbology.sub[s]->SSUB(s)
A:sympy.printing.pretty.pretty_symbology.sup[s]->SSUP(s)
A:sympy.printing.pretty.pretty_symbology.(name, sups, subs)->split_super_sub(symb_name)
A:sympy.printing.pretty.pretty_symbology.gG->greek_unicode.get(s)
A:sympy.printing.pretty.pretty_symbology.name->translate(name, bold_name)
A:sympy.printing.pretty.pretty_symbology.pretty->''.join([mapping[c] for c in s])
A:sympy.printing.pretty.pretty_symbology.pretty_sups->pretty_list(sups, sup)
A:sympy.printing.pretty.pretty_symbology.pretty_subs->pretty_list(subs, sub)
A:sympy.printing.pretty.pretty_symbology.sups_result->' '.join(pretty_sups)
A:sympy.printing.pretty.pretty_symbology.subs_result->' '.join(pretty_subs)
A:sympy.printing.pretty.pretty_symbology._remove_combining->dict.fromkeys(list(range(ord('̀'), ord('ͯ'))) + list(range(ord('⃐'), ord('⃰'))))
sympy.printing.pretty.pretty_symbology.U(name)
sympy.printing.pretty.pretty_symbology.annotated(letter)
sympy.printing.pretty.pretty_symbology.center_accent(string,accent)
sympy.printing.pretty.pretty_symbology.hobj(symb,width)
sympy.printing.pretty.pretty_symbology.is_combining(sym)
sympy.printing.pretty.pretty_symbology.line_width(line)
sympy.printing.pretty.pretty_symbology.pretty_atom(atom_name,default=None,printer=None)
sympy.printing.pretty.pretty_symbology.pretty_symbol(symb_name,bold_name=False)
sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode()
sympy.printing.pretty.pretty_symbology.pretty_use_unicode(flag=None)
sympy.printing.pretty.pretty_symbology.vobj(symb,height)
sympy.printing.pretty.pretty_symbology.xobj(symb,length)
sympy.printing.pretty.pretty_symbology.xstr(*args)
sympy.printing.pretty.pretty_symbology.xsym(sym)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/pretty/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/pretty/pretty.py----------------------------------------
A:sympy.printing.pretty.pretty.pform->prettyForm(*stringPict.next(l, op, r))
A:sympy.printing.pretty.pretty.symb->pretty_symbol(e.name, bold_name)
A:sympy.printing.pretty.pretty.n_pform->self._print(n)
A:sympy.printing.pretty.pretty.k_pform->self._print(k)
A:sympy.printing.pretty.pretty.op->prettyForm(' ' + xsym(e.op) + ' ')
A:sympy.printing.pretty.pretty.l->self._print(e.lhs)
A:sympy.printing.pretty.pretty.r->self._print(e.rhs)
A:sympy.printing.pretty.pretty.args->list(expr.symbols)
A:sympy.printing.pretty.pretty.pform_arg->prettyForm(*pform_arg.below(arg))
A:sympy.printing.pretty.pretty.deriv_symbol->U('PARTIAL DIFFERENTIAL')
A:sympy.printing.pretty.pretty.s->prettyForm(*stringPict.next(K, ': ', V))
A:sympy.printing.pretty.pretty.ds->prettyForm(*s.left(deriv_symbol))
A:sympy.printing.pretty.pretty.x->prettyForm(*x.right(ds))
A:sympy.printing.pretty.pretty.f->prettyForm(*self._print(deriv.expr).parens(), binding=prettyForm.FUNC)
A:sympy.printing.pretty.pretty.cyc->prettyForm(*cyc.right(l))
A:sympy.printing.pretty.pretty.perm_cyclic->self._settings.get('perm_cyclic', True)
A:sympy.printing.pretty.pretty.upper->list(range(len(lower)))
A:sympy.printing.pretty.pretty.result->self.__print_numer_denom(expr.numerator, expr.denominator)
A:sympy.printing.pretty.pretty.s1->self._print(u)
A:sympy.printing.pretty.pretty.s2->self._print(l)
A:sympy.printing.pretty.pretty.col->prettyForm(*col.left(' '))
A:sympy.printing.pretty.pretty.prettyF->prettyForm(*prettySign.right(prettyF))
A:sympy.printing.pretty.pretty.prettyArg->prettyForm(*prettyArg.parens())
A:sympy.printing.pretty.pretty.arg->self._print(e.args[0])
A:sympy.printing.pretty.pretty.h->max(hrequired, 2)
A:sympy.printing.pretty.pretty.vint->vobj('int', H)
A:sympy.printing.pretty.pretty.prettyA->prettyForm(*prettyA.right(' ' * spc))
A:sympy.printing.pretty.pretty.prettyB->prettyForm(*prettyB.left(' ' * spc))
A:sympy.printing.pretty.pretty.spc->max(1, 4 - prettyA.width())
A:sympy.printing.pretty.pretty.pretty_func->prettyForm(*pretty_sign.right(pretty_func))
A:sympy.printing.pretty.pretty.horizontal_chr->xobj('-', 1)
A:sympy.printing.pretty.pretty.corner_chr->xobj('_', 1)
A:sympy.printing.pretty.pretty.vertical_chr->xobj('|', 1)
A:sympy.printing.pretty.pretty.func_height->prettyForm(*pretty_sign.right(pretty_func)).height()
A:sympy.printing.pretty.pretty.(pretty_lower, pretty_upper)->self.__print_SumProduct_Limits(lim)
A:sympy.printing.pretty.pretty.pretty_sign->prettyForm(*pretty_sign.right(padding))
A:sympy.printing.pretty.pretty.max_upper->max(max_upper, prettyUpper.height())
A:sympy.printing.pretty.pretty.sign_height->prettyForm(*prettySign.right(pad)).height()
A:sympy.printing.pretty.pretty.height->prettyForm(*pretty_sign.right(padding)).height()
A:sympy.printing.pretty.pretty.padding->prettyForm(*padding.stack(*[' '] * (height - 1)))
A:sympy.printing.pretty.pretty.prettyUpper->self._print(lim[2])
A:sympy.printing.pretty.pretty.prettyLower->print_start(lim[0], lim[1])
A:sympy.printing.pretty.pretty.vsum->vobj('sum', 4)
A:sympy.printing.pretty.pretty.(prettyLower, prettyUpper)->self.__print_SumProduct_Limits(lim)
A:sympy.printing.pretty.pretty.(d, h, slines, adjustment)->asum(H, prettyLower.width(), prettyUpper.width(), ascii_mode)
A:sympy.printing.pretty.pretty.prettySign->prettyForm(*prettySign.right(pad))
A:sympy.printing.pretty.pretty.pad->prettyForm(*pad.stack(*[' '] * h))
A:sympy.printing.pretty.pretty.E->prettyForm(*E.parens('(', ')'))
A:sympy.printing.pretty.pretty.Lim->prettyForm(*Lim.right(E), binding=prettyForm.MUL)
A:sympy.printing.pretty.pretty.LimArg->prettyForm(*LimArg.right(self._print(dir)))
A:sympy.printing.pretty.pretty.Ms[i, j]->self._print(M[i, j])
A:sympy.printing.pretty.pretty.maxw[j]->max([Ms[i, j].width() for i in range(M.rows)] or [0])
A:sympy.printing.pretty.pretty.D_row->self._hprint_vec(v)
A:sympy.printing.pretty.pretty.D->prettyForm(*F.right(' ', D))
A:sympy.printing.pretty.pretty.prettyFunc->prettyForm('Chi')
A:sympy.printing.pretty.pretty.dag->prettyForm('+')
A:sympy.printing.pretty.pretty.args[i]->prettyForm(*self._print(a).parens())
A:sympy.printing.pretty.pretty.delim->pretty_atom('Ring')
A:sympy.printing.pretty.pretty.circ->self._print(circ)
A:sympy.printing.pretty.pretty.pretty_base->self._print(expr.base)
A:sympy.printing.pretty.pretty.pretty_exp->prettyForm(*pretty_exp.parens())
A:sympy.printing.pretty.pretty.pretty_circ_exp->prettyForm(*stringPict.next(circ, pretty_exp), binding=prettyForm.LINE)
A:sympy.printing.pretty.pretty.res->Mul(num, Pow(den, -1, evaluate=False), evaluate=False)
A:sympy.printing.pretty.pretty.expression->self._print(a)
A:sympy.printing.pretty.pretty.den->Series(*num_arg_list, *den_arg_list)
A:sympy.printing.pretty.pretty.denom->prettyForm(*stringPict.next(denom, self._print(den)))
A:sympy.printing.pretty.pretty.inv_mat->self._print(MIMOSeries(expr.sys2, expr.sys1))
A:sympy.printing.pretty.pretty.plant->self._print(expr.sys1)
A:sympy.printing.pretty.pretty._feedback->prettyForm(*stringPict.next(_feedback, plant))
A:sympy.printing.pretty.pretty.mat->prettyForm(*mat.right(subscript))
A:sympy.printing.pretty.pretty.items->sorted(s, key=default_sort_key)
A:sympy.printing.pretty.pretty.inneritems->list(vect.components.items())
A:sympy.printing.pretty.pretty.tempstr->tempstr.replace(vectstrs[i], '').replace(vectstrs[i], '')
A:sympy.printing.pretty.pretty.index->tempstr.replace(vectstrs[i], '').replace(vectstrs[i], '').rfind('⎠')
A:sympy.printing.pretty.pretty.n_newlines->max([len(x) for x in o1])
A:sympy.printing.pretty.pretty.level_str[back_outer_i][-1]->mat([[level_str[back_outer_i][-1]]])
A:sympy.printing.pretty.pretty.out_expr->mat([out_expr])
A:sympy.printing.pretty.pretty.center->stringPict(*center.right(' ' * indpic.width()))
A:sympy.printing.pretty.pretty.top->stringPict(*b.left(' ' * a.width()))
A:sympy.printing.pretty.pretty.bot->stringPict(*a.right(' ' * b.width()))
A:sympy.printing.pretty.pretty.indpic->prettyForm(*stringPict.next(indpic, self._print(index_map[index])))
A:sympy.printing.pretty.pretty.pict->prettyForm(*pict.below(bot))
A:sympy.printing.pretty.pretty.indices->self._print(ts.expr).expr.get_indices()
A:sympy.printing.pretty.pretty.(sign, args)->self._print(ts.expr)._get_args_for_traditional_printer()
A:sympy.printing.pretty.pretty.P[n, 0]->self._print(ec.expr)
A:sympy.printing.pretty.pretty.P[n, 1]->prettyForm(*prettyForm('for ').right(self._print(ec.cond)))
A:sympy.printing.pretty.pretty.len_args->len(pexpr.args)
A:sympy.printing.pretty.pretty.p->sympy.printing.pretty.stringpict.stringPict.next(pform_neg, p)
A:sympy.printing.pretty.pretty.tmp->self._print_seq((p1, p2), left=left, right=right, delimiter=delimiter)
A:sympy.printing.pretty.pretty.sep->stringPict(vobj('|', tmp.height()), baseline=tmp.baseline)
A:sympy.printing.pretty.pretty.P->prettyForm(*P.left(' '))
A:sympy.printing.pretty.pretty.(sz, t, b, add, img)->annotated('G')
A:sympy.printing.pretty.pretty.F->prettyForm(*F.right(p))
A:sympy.printing.pretty.pretty.vp[idx]->self._hprint_vec(v[idx])
A:sympy.printing.pretty.pretty.maxw->max(vp[0, i].width(), vp[1, i].width())
A:sympy.printing.pretty.pretty.D1->prettyForm(*D1.below(' '))
A:sympy.printing.pretty.pretty.D2->prettyForm(*vp[1, 0].right('  ', vp[1, 1]))
A:sympy.printing.pretty.pretty.pp->PrettyPrinter(settings)
A:sympy.printing.pretty.pretty.pq->self._print(len(e.bq))
A:sympy.printing.pretty.pretty.pm->self._print(len(e.bm))
A:sympy.printing.pretty.pretty.pn->self._print(len(e.an))
A:sympy.printing.pretty.pretty.(pp, pm)->adjust(pp, pm)
A:sympy.printing.pretty.pretty.(pq, pn)->adjust(pq, pn)
A:sympy.printing.pretty.pretty.pu->prettyForm(*pu.below('\n' * ht))
A:sympy.printing.pretty.pretty.pl->prettyForm(*pp.right(', ', pq))
A:sympy.printing.pretty.pretty.base->self._print(ts.base_set)
A:sympy.printing.pretty.pretty.prettyArgs->prettyForm(*self._print_seq([x]).parens())
A:sympy.printing.pretty.pretty.var_form->self._print(sig)
A:sympy.printing.pretty.pretty.shift->self._print(e.args[0] - e.args[1])
A:sympy.printing.pretty.pretty.n->self._print(e.args[2])
A:sympy.printing.pretty.pretty.a->stringPict('d')
A:sympy.printing.pretty.pretty.b->prettyForm(*b.parens())
A:sympy.printing.pretty.pretty.c->prettyForm(*c.parens())
A:sympy.printing.pretty.pretty.pforma0->self._print(e.args[0])
A:sympy.printing.pretty.pretty.pforma1->self._print(e.args[1])
A:sympy.printing.pretty.pretty.pforma2->self._print(e.args[2])
A:sympy.printing.pretty.pretty.pforma->prettyForm(*pforma.left('; '))
A:sympy.printing.pretty.pretty.terms->self._as_ordered_terms(expr, order=order)
A:sympy.printing.pretty.pretty.(coeff, other)->term.as_coeff_mul(rational=False)
A:sympy.printing.pretty.pretty.negterm->Mul(-coeff, *other, evaluate=False)
A:sympy.printing.pretty.pretty.strargs->list(map(self._print, args))
A:sympy.printing.pretty.pretty.strargs[0]->prettyForm('1', 0, 0)
A:sympy.printing.pretty.pretty.obj->prettyForm('-' + obj.s, obj.baseline, obj.binding)
A:sympy.printing.pretty.pretty.bpretty->self._print(base)
A:sympy.printing.pretty.pretty._zZ->xobj('/', 1)
A:sympy.printing.pretty.pretty.rpretty->self._print(root)
A:sympy.printing.pretty.pretty.rootsign->prettyForm(*rootsign.right(diagonal))
A:sympy.printing.pretty.pretty.diagonal->stringPict('\n'.join((' ' * (linelength - i - 1) + _zZ + ' ' * i for i in range(linelength))))
A:sympy.printing.pretty.pretty.rootsign.baseline->max(1, bpretty.baseline)
A:sympy.printing.pretty.pretty.(b, e)->power.as_base_exp()
A:sympy.printing.pretty.pretty.(n, d)->fraction(e)
A:sympy.printing.pretty.pretty.it->iter(s)
A:sympy.printing.pretty.pretty.printset->tuple(s)
A:sympy.printing.pretty.pretty.expr->self._print(ts.expr)
A:sympy.printing.pretty.pretty.S->self._print_seq(pargs[:-1], delimiter='')
A:sympy.printing.pretty.pretty.pargs->tuple((j for (var, setv) in zip(signature, sets) for j in (var, ' ', inn, ' ', setv, ', ')))
A:sympy.printing.pretty.pretty.variables->self._print_seq(ts.variables)
A:sympy.printing.pretty.pretty.as_expr->getattr(ts.condition, 'as_expr', None)
A:sympy.printing.pretty.pretty.cond->prettyForm(*cond.parens())
A:sympy.printing.pretty.pretty.C->self._print_seq((variables, inn, prodsets), delimiter=' ')
A:sympy.printing.pretty.pretty.prodsets->self._print(ts.sets)
A:sympy.printing.pretty.pretty.pretty_set->prettyForm(*self._print(se.set).parens())
A:sympy.printing.pretty.pretty.pretty_name->self._print(component_names)
A:sympy.printing.pretty.pretty.ptuple->prettyForm(*stringPict.next(self._print(t[0]), ','))
A:sympy.printing.pretty.pretty.keys->sorted(d.keys(), key=default_sort_key)
A:sympy.printing.pretty.pretty.K->self._print(k)
A:sympy.printing.pretty.pretty.V->self._print(d[k])
A:sympy.printing.pretty.pretty.pretty->prettyForm(*stringPict.next(type(s).__name__, pretty))
A:sympy.printing.pretty.pretty.order->prettyForm(*prettyForm('order=').right(self._print(basis.order)))
A:sympy.printing.pretty.pretty.exprs->prettyForm(*self.join(', ', exprs).parens(left='[', right=']'))
A:sympy.printing.pretty.pretty.domain->self._print(morphism.domain)
A:sympy.printing.pretty.pretty.rvert->stringPict(vobj('|', h), baseline=pform.baseline)
A:sympy.printing.pretty.pretty.arrow->xsym('-->')
A:sympy.printing.pretty.pretty.codomain->self._print(morphism.codomain)
A:sympy.printing.pretty.pretty.pretty_morphism->self._print_Morphism(morphism)
A:sympy.printing.pretty.pretty.circle->xsym('.')
A:sympy.printing.pretty.pretty.pretty_result->pretty_result.right(results_arrow, pretty_conclusions).right(results_arrow, pretty_conclusions)
A:sympy.printing.pretty.pretty.matrix->self._print(h._sympy_matrix())
A:sympy.printing.pretty.pretty.uflag->pretty_use_unicode(use_unicode)
sympy.pager_print(expr,**settings)
sympy.pretty(expr,**settings)
sympy.pretty_print(expr,**kwargs)
sympy.printing.pretty.pretty.PrettyPrinter(self,settings=None)
sympy.printing.pretty.pretty.PrettyPrinter.__print_Boolean(self,e,char,sort=True)
sympy.printing.pretty.pretty.PrettyPrinter.__print_SumProduct_Limits(self,lim)
sympy.printing.pretty.pretty.PrettyPrinter.__print_numer_denom(self,p,q)
sympy.printing.pretty.pretty.PrettyPrinter._helper_print_function(self,func,args,sort=False,func_name=None,delimiter=',',elementwise=False,left='(',right=')')
sympy.printing.pretty.pretty.PrettyPrinter._hprint_vec(self,v)
sympy.printing.pretty.pretty.PrettyPrinter._hprint_vseparator(self,p1,p2,left=None,right=None,delimiter='',ifascii_nougly=False)
sympy.printing.pretty.pretty.PrettyPrinter._print_Abs(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_AccumulationBounds(self,i)
sympy.printing.pretty.pretty.PrettyPrinter._print_Add(self,expr,order=None)
sympy.printing.pretty.pretty.PrettyPrinter._print_Adjoint(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_AlgebraicNumber(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_And(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_AssignmentBase(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Atom(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_BaseScalarField(self,field)
sympy.printing.pretty.pretty.PrettyPrinter._print_BaseVectorField(self,field)
sympy.printing.pretty.pretty.PrettyPrinter._print_BasisDependent(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_BlockMatrix(self,B)
sympy.printing.pretty.pretty.PrettyPrinter._print_Catalan(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Category(self,category)
sympy.printing.pretty.pretty.PrettyPrinter._print_Chi(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Complement(self,u)
sympy.printing.pretty.pretty.PrettyPrinter._print_ComplexField(self,domain)
sympy.printing.pretty.pretty.PrettyPrinter._print_ComplexRegion(self,ts)
sympy.printing.pretty.pretty.PrettyPrinter._print_ComplexRootOf(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_CompositeMorphism(self,morphism)
sympy.printing.pretty.pretty.PrettyPrinter._print_ConditionSet(self,ts)
sympy.printing.pretty.pretty.PrettyPrinter._print_Contains(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_CoordSystem(self,coords)
sympy.printing.pretty.pretty.PrettyPrinter._print_Covariance(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Cross(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Curl(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Cycle(self,dc)
sympy.printing.pretty.pretty.PrettyPrinter._print_DMF(self,p)
sympy.printing.pretty.pretty.PrettyPrinter._print_DMP(self,p)
sympy.printing.pretty.pretty.PrettyPrinter._print_Derivative(self,deriv)
sympy.printing.pretty.pretty.PrettyPrinter._print_Determinant(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Diagram(self,diagram)
sympy.printing.pretty.pretty.PrettyPrinter._print_DiagramGrid(self,grid)
sympy.printing.pretty.pretty.PrettyPrinter._print_Dict(self,d)
sympy.printing.pretty.pretty.PrettyPrinter._print_Differential(self,diff)
sympy.printing.pretty.pretty.PrettyPrinter._print_DiracDelta(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Divergence(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Dot(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_DotProduct(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_ElementwiseApplyFunction(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Equivalent(self,e,altchar=None)
sympy.printing.pretty.pretty.PrettyPrinter._print_EulerGamma(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Exp1(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_ExpBase(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Expectation(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Feedback(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_FiniteField(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_FiniteSet(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_Float(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_FormalPowerSeries(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_FourierSeries(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_FracElement(self,frac)
sympy.printing.pretty.pretty.PrettyPrinter._print_FracField(self,field)
sympy.printing.pretty.pretty.PrettyPrinter._print_Fraction(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_FractionField(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_FreeGroupElement(self,elm)
sympy.printing.pretty.pretty.PrettyPrinter._print_FreeModule(self,M)
sympy.printing.pretty.pretty.PrettyPrinter._print_FreeModuleElement(self,m)
sympy.printing.pretty.pretty.PrettyPrinter._print_Function(self,e,sort=False,func_name=None,left='(',right=')')
sympy.printing.pretty.pretty.PrettyPrinter._print_FunctionClass(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_FunctionMatrix(self,X)
sympy.printing.pretty.pretty.PrettyPrinter._print_GeometryEntity(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_GoldenRatio(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Gradient(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_GroebnerBasis(self,basis)
sympy.printing.pretty.pretty.PrettyPrinter._print_HadamardPower(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_HadamardProduct(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Heaviside(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_ITE(self,ite)
sympy.printing.pretty.pretty.PrettyPrinter._print_Identity(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_IdentityMorphism(self,morphism)
sympy.printing.pretty.pretty.PrettyPrinter._print_ImageSet(self,ts)
sympy.printing.pretty.pretty.PrettyPrinter._print_Implies(self,e,altchar=None)
sympy.printing.pretty.pretty.PrettyPrinter._print_IntegerRing(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Integral(self,integral)
sympy.printing.pretty.pretty.PrettyPrinter._print_Intersection(self,u)
sympy.printing.pretty.pretty.PrettyPrinter._print_Interval(self,i)
sympy.printing.pretty.pretty.PrettyPrinter._print_KroneckerDelta(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_KroneckerProduct(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Lambda(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_LambertW(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Laplacian(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Limit(self,l)
sympy.printing.pretty.pretty.PrettyPrinter._print_MIMOFeedback(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MIMOParallel(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MIMOSeries(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Manifold(self,manifold)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatAdd(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatMul(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatPow(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixBase(self,e,lparens='[',rparens=']')
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixElement(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixHomomorphism(self,h)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixSlice(self,m)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixSymbol(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Mod(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_ModuleImplementedIdeal(self,M)
sympy.printing.pretty.pretty.PrettyPrinter._print_Morphism(self,morphism)
sympy.printing.pretty.pretty.PrettyPrinter._print_Mul(self,product)
sympy.printing.pretty.pretty.PrettyPrinter._print_NDimArray(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_NamedMorphism(self,morphism)
sympy.printing.pretty.pretty.PrettyPrinter._print_Nand(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Nor(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Not(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Object(self,object)
sympy.printing.pretty.pretty.PrettyPrinter._print_OneMatrix(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Or(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Order(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Parallel(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_PartialDerivative(self,deriv)
sympy.printing.pretty.pretty.PrettyPrinter._print_Patch(self,patch)
sympy.printing.pretty.pretty.PrettyPrinter._print_Permutation(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Piecewise(self,pexpr)
sympy.printing.pretty.pretty.PrettyPrinter._print_PolyElement(self,poly)
sympy.printing.pretty.pretty.PrettyPrinter._print_PolyRing(self,ring)
sympy.printing.pretty.pretty.PrettyPrinter._print_PolynomialRing(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_PolynomialRingBase(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Pow(self,power)
sympy.printing.pretty.pretty.PrettyPrinter._print_Probability(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Product(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_ProductSet(self,p)
sympy.printing.pretty.pretty.PrettyPrinter._print_Quantity(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_QuotientModule(self,M)
sympy.printing.pretty.pretty.PrettyPrinter._print_QuotientModuleElement(self,m)
sympy.printing.pretty.pretty.PrettyPrinter._print_QuotientRing(self,R)
sympy.printing.pretty.pretty.PrettyPrinter._print_QuotientRingElement(self,R)
sympy.printing.pretty.pretty.PrettyPrinter._print_RandomDomain(self,d)
sympy.printing.pretty.pretty.PrettyPrinter._print_Range(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_Rational(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_RationalField(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_RealField(self,domain)
sympy.printing.pretty.pretty.PrettyPrinter._print_Reals(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Relational(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_RootSum(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_SeqFormula(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_Series(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_SetExpr(self,se)
sympy.printing.pretty.pretty.PrettyPrinter._print_SingularityFunction(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Str(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_SubModule(self,M)
sympy.printing.pretty.pretty.PrettyPrinter._print_Subs(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Sum(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Symbol(self,e,bold_name=False)
sympy.printing.pretty.pretty.PrettyPrinter._print_SymmetricDifference(self,u)
sympy.printing.pretty.pretty.PrettyPrinter._print_TensAdd(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_TensMul(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Tensor(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_TensorElement(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_TensorIndex(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_TensorProduct(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Tr(self,p)
sympy.printing.pretty.pretty.PrettyPrinter._print_Trace(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_TransferFunction(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_TransferFunctionMatrix(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Transpose(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Tuple(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_UnevaluatedExpr(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Union(self,u)
sympy.printing.pretty.pretty.PrettyPrinter._print_UniversalSet(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_Variance(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_WedgeProduct(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Xor(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_ZeroMatrix(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_airyai(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_airyaiprime(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_airybi(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_airybiprime(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_atan2(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_basestring(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_bernoulli(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_beta(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_betainc(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_betainc_regularized(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_binomial(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_catalan(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_ceiling(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_conjugate(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_dict(self,d)
sympy.printing.pretty.pretty.PrettyPrinter._print_dirichlet_eta(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_elliptic_e(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_elliptic_f(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_elliptic_k(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_elliptic_pi(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_euler(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_expint(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_factorial(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_factorial2(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_fibonacci(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_floor(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_fresnelc(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_fresnels(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_frozenset(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_gamma(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_hyper(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_lerchphi(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_list(self,l)
sympy.printing.pretty.pretty.PrettyPrinter._print_lowergamma(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_lucas(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_mathieuc(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_mathieucprime(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_mathieus(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_mathieusprime(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_matrix_contents(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_meijerg(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_nth_root(self,base,root)
sympy.printing.pretty.pretty.PrettyPrinter._print_number_function(self,e,name)
sympy.printing.pretty.pretty.PrettyPrinter._print_primenu(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_primeomega(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_seq(self,seq,left=None,right=None,delimiter=',',parenthesize=lambdax:False,ifascii_nougly=True)
sympy.printing.pretty.pretty.PrettyPrinter._print_set(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_stieltjes(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_stringPict(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_subfactorial(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_tribonacci(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_tuple(self,t)
sympy.printing.pretty.pretty.PrettyPrinter._print_uppergamma(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._printer_tensor_indices(self,name,indices,index_map={})
sympy.printing.pretty.pretty.PrettyPrinter._special_function_classes(self)
sympy.printing.pretty.pretty.PrettyPrinter._use_unicode(self)
sympy.printing.pretty.pretty.PrettyPrinter.doprint(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter.emptyPrinter(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter.join(self,delimiter,args)
sympy.printing.pretty.pretty.pager_print(expr,**settings)
sympy.printing.pretty.pretty.pretty(expr,**settings)
sympy.printing.pretty.pretty.pretty_print(expr,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/pretty/stringpict.py----------------------------------------
A:sympy.printing.pretty.stringpict.self.picture->stringPict.equalLengths(s.splitlines())
A:sympy.printing.pretty.stringpict.width->max((line_width(line) for line in lines))
A:sympy.printing.pretty.stringpict.arg->args[0].__pretty__()
A:sympy.printing.pretty.stringpict.newBaseline->max((obj.baseline for obj in objects))
A:sympy.printing.pretty.stringpict.newHeightBelowBaseline->max((obj.height() - obj.baseline for obj in objects))
A:sympy.printing.pretty.stringpict.newWidth->max((obj.width() for obj in objects if obj is not stringPict.LINE))
A:sympy.printing.pretty.stringpict.lineObj->stringPict(hobj('-', newWidth))
A:sympy.printing.pretty.stringpict.(s, baseline)->stringPict.stack(self, *args)
A:sympy.printing.pretty.stringpict.(string, baseline)->stringPict.stack(*args + (self,))
A:sympy.printing.pretty.stringpict.h->ctypes.windll.kernel32.GetStdHandle(-12)
A:sympy.printing.pretty.stringpict.lparen->stringPict(vobj(left, h), baseline=b)
A:sympy.printing.pretty.stringpict.res->ctypes.windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)
A:sympy.printing.pretty.stringpict.rparen->stringPict(vobj(right, h), baseline=b)
A:sympy.printing.pretty.stringpict.slash->stringPict(slash, height - 1)
A:sympy.printing.pretty.stringpict.result->self.above('_' * self.width())
A:sympy.printing.pretty.stringpict.height->self.height()
A:sympy.printing.pretty.stringpict.downline->downline.above(n).above(n)
A:sympy.printing.pretty.stringpict.root->downline.above(n).above(n).right(slash)
A:sympy.printing.pretty.stringpict.ncols->curses.tigetnum('cols')
A:sympy.printing.pretty.stringpict.csbi->create_string_buffer(22)
A:sympy.printing.pretty.stringpict.(bufx, bufy, curx, cury, wattr, left, top, right, bottom, maxx, maxy)->struct.unpack('hhhhHhhhhhh', csbi.raw)
A:sympy.printing.pretty.stringpict.(ATOM, FUNC, DIV, POW, MUL, ADD, NEG, OPEN)->range(8)
A:sympy.printing.pretty.stringpict.num->stringPict(*num.parens())
A:sympy.printing.pretty.stringpict.den->stringPict(*den.parens())
A:sympy.printing.pretty.stringpict.len_res->len(result)
A:sympy.printing.pretty.stringpict.b->stringPict(*b.parens())
A:sympy.printing.pretty.stringpict.a->stringPict(*a.parens())
A:sympy.printing.pretty.stringpict.func->stringPict(*a.prettyFunc.right(b))
A:sympy.printing.pretty.stringpict.top->stringPict(*b.left(' ' * a.width()))
A:sympy.printing.pretty.stringpict.bot->stringPict(*a.right(' ' * b.width()))
A:sympy.printing.pretty.stringpict.argumentList->stringPict(*argumentList.parens())
sympy.printing.pretty.stringpict.prettyForm(self,s,baseline=0,binding=0,unicode=None)
sympy.printing.pretty.stringpict.prettyForm.__add__(self,*others)
sympy.printing.pretty.stringpict.prettyForm.__mul__(self,*others)
sympy.printing.pretty.stringpict.prettyForm.__pow__(self,b)
sympy.printing.pretty.stringpict.prettyForm.__repr__(self)
sympy.printing.pretty.stringpict.prettyForm.__truediv__(self,den,slashed=False)
sympy.printing.pretty.stringpict.prettyForm.apply(function,*args)
sympy.printing.pretty.stringpict.prettyForm.unicode(self)
sympy.printing.pretty.stringpict.stringPict(self,s,baseline=0)
sympy.printing.pretty.stringpict.stringPict.__eq__(self,o)
sympy.printing.pretty.stringpict.stringPict.__getitem__(self,index)
sympy.printing.pretty.stringpict.stringPict.__hash__(self)
sympy.printing.pretty.stringpict.stringPict.__len__(self)
sympy.printing.pretty.stringpict.stringPict.__repr__(self)
sympy.printing.pretty.stringpict.stringPict.__str__(self)
sympy.printing.pretty.stringpict.stringPict.above(self,*args)
sympy.printing.pretty.stringpict.stringPict.below(self,*args)
sympy.printing.pretty.stringpict.stringPict.equalLengths(lines)
sympy.printing.pretty.stringpict.stringPict.height(self)
sympy.printing.pretty.stringpict.stringPict.left(self,*args)
sympy.printing.pretty.stringpict.stringPict.leftslash(self)
sympy.printing.pretty.stringpict.stringPict.next(*args)
sympy.printing.pretty.stringpict.stringPict.parens(self,left='(',right=')',ifascii_nougly=False)
sympy.printing.pretty.stringpict.stringPict.render(self,*args,**kwargs)
sympy.printing.pretty.stringpict.stringPict.right(self,*args)
sympy.printing.pretty.stringpict.stringPict.root(self,n=None)
sympy.printing.pretty.stringpict.stringPict.stack(*args)
sympy.printing.pretty.stringpict.stringPict.terminal_width(self)
sympy.printing.pretty.stringpict.stringPict.width(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/pretty/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/printing/pretty/tests/test_pretty.py----------------------------------------
A:sympy.printing.pretty.tests.test_pretty.(a, b, c, d, x, y, z, k, n, s, p)->symbols('a,b,c,d,x,y,z,k,n,s,p')
A:sympy.printing.pretty.tests.test_pretty.f->Function('f')
A:sympy.printing.pretty.tests.test_pretty.th->Symbol('theta')
A:sympy.printing.pretty.tests.test_pretty.ph->Symbol('phi')
A:sympy.printing.pretty.tests.test_pretty.p1->Permutation(1, 2)(3, 4)
A:sympy.printing.pretty.tests.test_pretty.expr->hadamard_power(A * B.T, 1 + n)
A:sympy.printing.pretty.tests.test_pretty.n->Symbol('n')
A:sympy.printing.pretty.tests.test_pretty.(x, y)->symbols('x y', real=True)
A:sympy.printing.pretty.tests.test_pretty.(n, m, k, l)->symbols('n m k l')
A:sympy.printing.pretty.tests.test_pretty.tf1->TransferFunction(x + y, x - 2 * y, y)
A:sympy.printing.pretty.tests.test_pretty.tf2->TransferFunction(x - y, x + y, y)
A:sympy.printing.pretty.tests.test_pretty.tf3->TransferFunction(y ** 2 - 2 * y + 1, y + 5, y)
A:sympy.printing.pretty.tests.test_pretty.tf4->TransferFunction(y, x ** 2 + x + 1, y)
A:sympy.printing.pretty.tests.test_pretty.tfm1->TransferFunctionMatrix([[tf1, tf2], [tf3, -tf4], [-tf2, -tf1]])
A:sympy.printing.pretty.tests.test_pretty.tfm2->TransferFunctionMatrix([[-tf2, -tf1], [tf4, -tf3], [tf1, tf2]])
A:sympy.printing.pretty.tests.test_pretty.tfm3->TransferFunctionMatrix([[-tf1, tf2], [-tf3, tf4], [tf2, tf1]])
A:sympy.printing.pretty.tests.test_pretty.tfm4->TransferFunctionMatrix([[-tf1, -tf2], [-tf3, -tf4]])
A:sympy.printing.pretty.tests.test_pretty.tfm5->TransferFunctionMatrix([[-tf2, -tf1], [tf4, -tf3], [tf1, tf2]])
A:sympy.printing.pretty.tests.test_pretty.tf->TransferFunction(1, 1, y)
A:sympy.printing.pretty.tests.test_pretty.tf5->TransferFunction(1 - x, x - y, y)
A:sympy.printing.pretty.tests.test_pretty.tf6->TransferFunction(2, 2, y)
A:sympy.printing.pretty.tests.test_pretty.tfm_1->TransferFunctionMatrix([[tf1, tf2], [tf2, tf1]])
A:sympy.printing.pretty.tests.test_pretty.tfm_2->TransferFunctionMatrix([[tf2, tf1], [tf1, tf2]])
A:sympy.printing.pretty.tests.test_pretty.tfm_3->TransferFunctionMatrix([[tf1, tf1], [tf2, tf2]])
A:sympy.printing.pretty.tests.test_pretty.alpha->Symbol('alpha')
A:sympy.printing.pretty.tests.test_pretty.beta->Function('beta')
A:sympy.printing.pretty.tests.test_pretty.(x, y, z, w)->symbols('x, y, z, w')
A:sympy.printing.pretty.tests.test_pretty.M->C[0, 0].subs(C, A - B).submodule([x, y], [1, x ** 2])
A:sympy.printing.pretty.tests.test_pretty.M1->ArrayType([1 / x, y, z])
A:sympy.printing.pretty.tests.test_pretty.M2->tensorproduct(M1, M)
A:sympy.printing.pretty.tests.test_pretty.M3->tensorproduct(M, M)
A:sympy.printing.pretty.tests.test_pretty.Mrow->ArrayType([[x, y, 1 / z]])
A:sympy.printing.pretty.tests.test_pretty.Mcolumn->ArrayType([[x], [y], [1 / z]])
A:sympy.printing.pretty.tests.test_pretty.Mcol2->ArrayType([Mcolumn.tolist()])
A:sympy.printing.pretty.tests.test_pretty.A->MatrixSymbol('A', m, n)
A:sympy.printing.pretty.tests.test_pretty.B->MatrixSymbol('B', m, n)
A:sympy.printing.pretty.tests.test_pretty.wp->WedgeProduct(R2.dx, R2.dy)
A:sympy.printing.pretty.tests.test_pretty.X->Normal('X', mu, sigma)
A:sympy.printing.pretty.tests.test_pretty.Y->Normal('Y', mu, sigma)
A:sympy.printing.pretty.tests.test_pretty.m->Manifold('M', 2)
A:sympy.printing.pretty.tests.test_pretty.(x, y, z, w, t)->symbols('x y z w t')
A:sympy.printing.pretty.tests.test_pretty.Z->MatrixSymbol('Z', 10, 10)
A:sympy.printing.pretty.tests.test_pretty.lamda->Lambda(x, 1 / x)
A:sympy.printing.pretty.tests.test_pretty.C->MatrixSymbol('C', 3, 3)
A:sympy.printing.pretty.tests.test_pretty.D->Die('d1', 6)
A:sympy.printing.pretty.tests.test_pretty.expr_2->Dict({x ** 2: 1})
A:sympy.printing.pretty.tests.test_pretty.b1->Basic()
A:sympy.printing.pretty.tests.test_pretty.b2->Basic(Basic())
A:sympy.printing.pretty.tests.test_pretty.expr2->Dict({b2: b1, b1: b2})
A:sympy.printing.pretty.tests.test_pretty.s2->SeqPer((1, 2))
A:sympy.printing.pretty.tests.test_pretty.iv->Interval(1, 3)
A:sympy.printing.pretty.tests.test_pretty.se->SetExpr(iv)
A:sympy.printing.pretty.tests.test_pretty.imgset->ImageSet(Lambda((x, y), 1 / (x + y) ** 2), S.Naturals, S.Naturals)
A:sympy.printing.pretty.tests.test_pretty.condset->ConditionSet(x, 1 / x ** 2 > 0, S.Reals)
A:sympy.printing.pretty.tests.test_pretty.cregion->ComplexRegion(Interval(0, 1 / a ** 2) * Interval(0, 2 * pi), polar=True)
A:sympy.printing.pretty.tests.test_pretty.s1->SeqFormula(a ** 2, (0, oo))
A:sympy.printing.pretty.tests.test_pretty.s3->SeqFormula(a ** 2, (0, 2))
A:sympy.printing.pretty.tests.test_pretty.s4->SeqPer((1, 2), (0, 2))
A:sympy.printing.pretty.tests.test_pretty.s5->SeqFormula(a ** 2, (-oo, 0))
A:sympy.printing.pretty.tests.test_pretty.s6->SeqPer((1, 2), (-oo, 0))
A:sympy.printing.pretty.tests.test_pretty.s7->SeqFormula(a ** 2, (a, 0, x))
A:sympy.printing.pretty.tests.test_pretty.b->BaseScalarField(rect, 0)
A:sympy.printing.pretty.tests.test_pretty.s8->SeqFormula(b * a ** 2, (a, 0, 2))
A:sympy.printing.pretty.tests.test_pretty.syms->symbols('a:f')
A:sympy.printing.pretty.tests.test_pretty.fd->StringIO()
A:sympy.printing.pretty.tests.test_pretty.mybeta->Function('beta')
A:sympy.printing.pretty.tests.test_pretty.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.printing.pretty.tests.test_pretty.e->pretty((N.x, N.y, N.z))
A:sympy.printing.pretty.tests.test_pretty.F->C[0, 0].subs(C, A - B)
A:sympy.printing.pretty.tests.test_pretty.R->sympy.polys.domains.rationalfield.QQ.old_poly_ring(x)
A:sympy.printing.pretty.tests.test_pretty.A1->Object('A1')
A:sympy.printing.pretty.tests.test_pretty.A2->Object('A2')
A:sympy.printing.pretty.tests.test_pretty.A3->Object('A3')
A:sympy.printing.pretty.tests.test_pretty.f1->NamedMorphism(A1, A2, 'f1')
A:sympy.printing.pretty.tests.test_pretty.f2->NamedMorphism(A2, A3, 'f2')
A:sympy.printing.pretty.tests.test_pretty.id_A1->IdentityMorphism(A1)
A:sympy.printing.pretty.tests.test_pretty.K1->Category('K1')
A:sympy.printing.pretty.tests.test_pretty.d->MatrixSymbol('delta', 3, 1)
A:sympy.printing.pretty.tests.test_pretty.grid->DiagramGrid(d)
A:sympy.printing.pretty.tests.test_pretty.I->sympy.polys.domains.rationalfield.QQ.old_poly_ring(x).ideal(x ** 2, y)
A:sympy.printing.pretty.tests.test_pretty.(A, B)->symbols('A B', commutative=False)
A:sympy.printing.pretty.tests.test_pretty.t->Tr(A * B)
A:sympy.printing.pretty.tests.test_pretty.y->MatrixSymbol('y*', n, n)
A:sympy.printing.pretty.tests.test_pretty.x->Symbol('x')
A:sympy.printing.pretty.tests.test_pretty.phi->Function('phi')
A:sympy.printing.pretty.tests.test_pretty.he->UnevaluatedExpr(1 / x)
A:sympy.printing.pretty.tests.test_pretty.(x, y, t, j)->symbols('x y t j')
A:sympy.printing.pretty.tests.test_pretty.expr3->cos(x * degree + 90 * degree)
A:sympy.printing.pretty.tests.test_pretty.L->TensorIndexType('L')
A:sympy.printing.pretty.tests.test_pretty.(i, j, k)->tensor_indices('i j k', L)
A:sympy.printing.pretty.tests.test_pretty.i0->tensor_indices('i_0', L)
A:sympy.printing.pretty.tests.test_pretty.(A, B, C, D)->tensor_heads('A B C D', [L])
A:sympy.printing.pretty.tests.test_pretty.H->TensorHead('H', [L, L])
A:sympy.printing.pretty.tests.test_pretty.a->Symbol('alpha')
A:sympy.printing.pretty.tests.test_pretty.N->sympy.physics.mechanics.ReferenceFrame('N')
A:sympy.printing.pretty.tests.test_pretty.omega->MatrixSymbol('omeganorm', 3, 3)
A:sympy.printing.pretty.tests.test_pretty.c->MatrixSymbol('c', 3, 1)
A:sympy.printing.pretty.tests.test_pretty.(m, n, p)->symbols('m, n, p', integer=True)
A:sympy.printing.pretty.tests.test_pretty.z->Symbol('x_17')
A:sympy.printing.pretty.tests.test_pretty.mu->symbols('mu')
A:sympy.printing.pretty.tests.test_pretty.sigma->symbols('sigma', positive=True)
A:sympy.printing.pretty.tests.test_pretty.(k, n)->symbols('k n')
A:sympy.printing.pretty.tests.test_pretty.fo->FourierSeries(x, (x, -pi, pi), (0, SeqFormula(0, (k, 1, oo)), SeqFormula(Piecewise((-2 * pi * cos(n * pi) / n + 2 * sin(n * pi) / n ** 2, (n > -oo) & (n < oo) & Ne(n, 0)), (0, True)) * sin(n * x) / pi, (n, 1, oo))))
A:sympy.printing.pretty.tests.test_pretty.p->prettyForm('s', unicode='s')
A:sympy.printing.pretty.tests.test_pretty.rect->CoordSystem('rect', p, [x, y])
sympy.printing.pretty.tests.test_pretty(expr,order=None)
sympy.printing.pretty.tests.test_pretty.lowergamma(sym.lowergamma)
sympy.printing.pretty.tests.test_pretty.pretty(expr,order=None)
sympy.printing.pretty.tests.test_pretty.test_Adjoint()
sympy.printing.pretty.tests.test_pretty.test_Assignment()
sympy.printing.pretty.tests.test_pretty.test_AugmentedAssignment()
sympy.printing.pretty.tests.test_pretty.test_Catalan()
sympy.printing.pretty.tests.test_pretty.test_EulerGamma()
sympy.printing.pretty.tests.test_pretty.test_GoldenRatio()
sympy.printing.pretty.tests.test_pretty.test_GroebnerBasis()
sympy.printing.pretty.tests.test_pretty.test_Homomorphism()
sympy.printing.pretty.tests.test_pretty.test_MatrixElement_printing()
sympy.printing.pretty.tests.test_pretty.test_MatrixExpressions()
sympy.printing.pretty.tests.test_pretty.test_MatrixSlice()
sympy.printing.pretty.tests.test_pretty.test_MatrixSymbol_printing()
sympy.printing.pretty.tests.test_pretty.test_Mul()
sympy.printing.pretty.tests.test_pretty.test_PrettyModules()
sympy.printing.pretty.tests.test_pretty.test_PrettyPoly()
sympy.printing.pretty.tests.test_pretty.test_ProductSet_exponent()
sympy.printing.pretty.tests.test_pretty.test_ProductSet_parenthesis()
sympy.printing.pretty.tests.test_pretty.test_ProductSet_prod_char_issue_10413()
sympy.printing.pretty.tests.test_pretty.test_QuotientRing()
sympy.printing.pretty.tests.test_pretty.test_RandomDomain()
sympy.printing.pretty.tests.test_pretty.test_SingularityFunction()
sympy.printing.pretty.tests.test_pretty.test_Str()
sympy.printing.pretty.tests.test_pretty.test_Tr()
sympy.printing.pretty.tests.test_pretty.test_Transpose()
sympy.printing.pretty.tests.test_pretty.test_any_object_in_sequence()
sympy.printing.pretty.tests.test_pretty.test_beta()
sympy.printing.pretty.tests.test_pretty.test_categories()
sympy.printing.pretty.tests.test_pretty.test_center_accent()
sympy.printing.pretty.tests.test_pretty.test_complicated_symbol_unchanged()
sympy.printing.pretty.tests.test_pretty.test_degree_printing()
sympy.printing.pretty.tests.test_pretty.test_deltas()
sympy.printing.pretty.tests.test_pretty.test_deprecated_prettyForm()
sympy.printing.pretty.tests.test_pretty.test_diffgeom()
sympy.printing.pretty.tests.test_pretty.test_diffgeom_print_WedgeProduct()
sympy.printing.pretty.tests.test_pretty.test_elliptic_functions()
sympy.printing.pretty.tests.test_pretty.test_expint()
sympy.printing.pretty.tests.test_pretty.test_function_subclass_different_name()
sympy.printing.pretty.tests.test_pretty.test_gammas()
sympy.printing.pretty.tests.test_pretty.test_hadamard_power()
sympy.printing.pretty.tests.test_pretty.test_hyper()
sympy.printing.pretty.tests.test_pretty.test_imaginary_unit()
sympy.printing.pretty.tests.test_pretty.test_is_combining()
sympy.printing.pretty.tests.test_pretty.test_issue_10472()
sympy.printing.pretty.tests.test_pretty.test_issue_11801()
sympy.printing.pretty.tests.test_pretty.test_issue_12675()
sympy.printing.pretty.tests.test_pretty.test_issue_13651()
sympy.printing.pretty.tests.test_pretty.test_issue_15560()
sympy.printing.pretty.tests.test_pretty.test_issue_15583()
sympy.printing.pretty.tests.test_pretty.test_issue_17258()
sympy.printing.pretty.tests.test_pretty.test_issue_17616()
sympy.printing.pretty.tests.test_pretty.test_issue_17857()
sympy.printing.pretty.tests.test_pretty.test_issue_18272()
sympy.printing.pretty.tests.test_pretty.test_issue_21758()
sympy.printing.pretty.tests.test_pretty.test_issue_4335()
sympy.printing.pretty.tests.test_pretty.test_issue_5524()
sympy.printing.pretty.tests.test_pretty.test_issue_6134()
sympy.printing.pretty.tests.test_pretty.test_issue_6285()
sympy.printing.pretty.tests.test_pretty.test_issue_6324()
sympy.printing.pretty.tests.test_pretty.test_issue_6359()
sympy.printing.pretty.tests.test_pretty.test_issue_6739()
sympy.printing.pretty.tests.test_pretty.test_issue_7179()
sympy.printing.pretty.tests.test_pretty.test_issue_7180()
sympy.printing.pretty.tests.test_pretty.test_issue_7927()
sympy.printing.pretty.tests.test_pretty.test_issue_8292()
sympy.printing.pretty.tests.test_pretty.test_issue_8344()
sympy.printing.pretty.tests.test_pretty.test_issue_9877()
sympy.printing.pretty.tests.test_pretty.test_matrixSymbolBold()
sympy.printing.pretty.tests.test_pretty.test_meijerg()
sympy.printing.pretty.tests.test_pretty.test_missing_in_2X_issue_9047()
sympy.printing.pretty.tests.test_pretty.test_negative_fractions()
sympy.printing.pretty.tests.test_pretty.test_noncommutative()
sympy.printing.pretty.tests.test_pretty.test_pprint()
sympy.printing.pretty.tests.test_pretty.test_pretty_Add()
sympy.printing.pretty.tests.test_pretty.test_pretty_Boolean()
sympy.printing.pretty.tests.test_pretty.test_pretty_Complement()
sympy.printing.pretty.tests.test_pretty.test_pretty_ComplexRegion()
sympy.printing.pretty.tests.test_pretty.test_pretty_ComplexRootOf()
sympy.printing.pretty.tests.test_pretty.test_pretty_ConditionSet()
sympy.printing.pretty.tests.test_pretty.test_pretty_Contains()
sympy.printing.pretty.tests.test_pretty.test_pretty_Cycle()
sympy.printing.pretty.tests.test_pretty.test_pretty_Determinant()
sympy.printing.pretty.tests.test_pretty.test_pretty_Domain()
sympy.printing.pretty.tests.test_pretty.test_pretty_Feedback()
sympy.printing.pretty.tests.test_pretty.test_pretty_FormalPowerSeries()
sympy.printing.pretty.tests.test_pretty.test_pretty_FourierSeries()
sympy.printing.pretty.tests.test_pretty.test_pretty_ITE()
sympy.printing.pretty.tests.test_pretty.test_pretty_ImageSet()
sympy.printing.pretty.tests.test_pretty.test_pretty_Intersection_issue_10414()
sympy.printing.pretty.tests.test_pretty.test_pretty_KroneckerDelta()
sympy.printing.pretty.tests.test_pretty.test_pretty_Lambda()
sympy.printing.pretty.tests.test_pretty.test_pretty_MIMOFeedback()
sympy.printing.pretty.tests.test_pretty.test_pretty_Mod()
sympy.printing.pretty.tests.test_pretty.test_pretty_Parallel()
sympy.printing.pretty.tests.test_pretty.test_pretty_Permutation()
sympy.printing.pretty.tests.test_pretty.test_pretty_RootSum()
sympy.printing.pretty.tests.test_pretty.test_pretty_Series()
sympy.printing.pretty.tests.test_pretty.test_pretty_SetExpr()
sympy.printing.pretty.tests.test_pretty.test_pretty_Subs()
sympy.printing.pretty.tests.test_pretty.test_pretty_SymmetricDifference()
sympy.printing.pretty.tests.test_pretty.test_pretty_Trace_issue_9044()
sympy.printing.pretty.tests.test_pretty.test_pretty_TransferFunction()
sympy.printing.pretty.tests.test_pretty.test_pretty_TransferFunctionMatrix()
sympy.printing.pretty.tests.test_pretty.test_pretty_UnevaluatedExpr()
sympy.printing.pretty.tests.test_pretty.test_pretty_Union_issue_10414()
sympy.printing.pretty.tests.test_pretty.test_pretty_UniversalSet()
sympy.printing.pretty.tests.test_pretty.test_pretty_ascii_str()
sympy.printing.pretty.tests.test_pretty.test_pretty_basic()
sympy.printing.pretty.tests.test_pretty.test_pretty_class()
sympy.printing.pretty.tests.test_pretty.test_pretty_derivatives()
sympy.printing.pretty.tests.test_pretty.test_pretty_dotproduct()
sympy.printing.pretty.tests.test_pretty.test_pretty_functions()
sympy.printing.pretty.tests.test_pretty.test_pretty_geometry()
sympy.printing.pretty.tests.test_pretty.test_pretty_integrals()
sympy.printing.pretty.tests.test_pretty.test_pretty_limits()
sympy.printing.pretty.tests.test_pretty.test_pretty_matrix()
sympy.printing.pretty.tests.test_pretty.test_pretty_misc_functions()
sympy.printing.pretty.tests.test_pretty.test_pretty_ndim_arrays()
sympy.printing.pretty.tests.test_pretty.test_pretty_no_wrap_line()
sympy.printing.pretty.tests.test_pretty.test_pretty_order()
sympy.printing.pretty.tests.test_pretty.test_pretty_ordering()
sympy.printing.pretty.tests.test_pretty.test_pretty_piecewise()
sympy.printing.pretty.tests.test_pretty.test_pretty_prec()
sympy.printing.pretty.tests.test_pretty.test_pretty_primenu()
sympy.printing.pretty.tests.test_pretty.test_pretty_primeomega()
sympy.printing.pretty.tests.test_pretty.test_pretty_print_tensor_expr()
sympy.printing.pretty.tests.test_pretty.test_pretty_print_tensor_partial_deriv()
sympy.printing.pretty.tests.test_pretty.test_pretty_product()
sympy.printing.pretty.tests.test_pretty.test_pretty_rational()
sympy.printing.pretty.tests.test_pretty.test_pretty_relational()
sympy.printing.pretty.tests.test_pretty.test_pretty_seq()
sympy.printing.pretty.tests.test_pretty.test_pretty_sequences()
sympy.printing.pretty.tests.test_pretty.test_pretty_sets()
sympy.printing.pretty.tests.test_pretty.test_pretty_special_functions()
sympy.printing.pretty.tests.test_pretty.test_pretty_sqrt()
sympy.printing.pretty.tests.test_pretty.test_pretty_sqrt_char_knob()
sympy.printing.pretty.tests.test_pretty.test_pretty_sqrt_longsymbol_no_sqrt_char()
sympy.printing.pretty.tests.test_pretty.test_pretty_sum()
sympy.printing.pretty.tests.test_pretty.test_pretty_unicode_str()
sympy.printing.pretty.tests.test_pretty.test_print_builtin_set()
sympy.printing.pretty.tests.test_pretty.test_print_lerchphi()
sympy.printing.pretty.tests.test_pretty.test_settings()
sympy.printing.pretty.tests.test_pretty.test_str_special_matrices()
sympy.printing.pretty.tests.test_pretty.test_symbolic_probability()
sympy.printing.pretty.tests.test_pretty.test_tensor_TensorProduct()
sympy.printing.pretty.tests.test_pretty.test_units()
sympy.printing.pretty.tests.test_pretty.test_upretty_greek()
sympy.printing.pretty.tests.test_pretty.test_upretty_modifiers()
sympy.printing.pretty.tests.test_pretty.test_upretty_multiindex()
sympy.printing.pretty.tests.test_pretty.test_upretty_sub_super()
sympy.printing.pretty.tests.test_pretty.test_upretty_subs_missing_in_24()
sympy.printing.pretty.tests.test_pretty.test_vector_expr_pretty_printing()
sympy.printing.pretty.tests.test_pretty.upretty(expr,order=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/unify/core.py----------------------------------------
A:sympy.unify.core.is_commutative->fns.get('is_commutative', lambda x: False)
A:sympy.unify.core.is_associative->fns.get('is_associative', lambda x: False)
A:sympy.unify.core.combs->allcombinations(a.args, b.args, 'associative')
A:sympy.unify.core.d->d.copy().copy()
sympy.unify.core.Compound(self,op,args)
sympy.unify.core.Compound.__eq__(self,other)
sympy.unify.core.Compound.__hash__(self)
sympy.unify.core.Compound.__str__(self)
sympy.unify.core.CondVariable(self,arg,valid)
sympy.unify.core.CondVariable.__eq__(self,other)
sympy.unify.core.CondVariable.__hash__(self)
sympy.unify.core.CondVariable.__str__(self)
sympy.unify.core.Variable(self,arg)
sympy.unify.core.Variable.__eq__(self,other)
sympy.unify.core.Variable.__hash__(self)
sympy.unify.core.Variable.__str__(self)
sympy.unify.core.allcombinations(A,B,ordered)
sympy.unify.core.assoc(d,key,val)
sympy.unify.core.index(it,ind)
sympy.unify.core.is_args(x)
sympy.unify.core.occur_check(var,x)
sympy.unify.core.partition(it,part)
sympy.unify.core.unify(x,y,s=None,**fns)
sympy.unify.core.unify_var(var,x,s,**fns)
sympy.unify.core.unpack(x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/unify/rewrite.py----------------------------------------
A:sympy.unify.rewrite.expr2->rebuild(expr2)
sympy.unify.rewrite.rewriterule(source,target,variables=(),condition=None,assume=None)
sympy.unify.rewriterule(source,target,variables=(),condition=None,assume=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/unify/usympy.py----------------------------------------
A:sympy.unify.usympy.ds->sympy.unify.core.unify(decons(x), decons(y), s, is_associative=is_associative, is_commutative=is_commutative, **kwargs)
sympy.unify.rebuild(s)
sympy.unify.unify(x,y,s=None,variables=(),**kwargs)
sympy.unify.usympy.construct(t)
sympy.unify.usympy.deconstruct(s,variables=())
sympy.unify.usympy.is_associative(x)
sympy.unify.usympy.is_commutative(x)
sympy.unify.usympy.mk_matchtype(typ)
sympy.unify.usympy.rebuild(s)
sympy.unify.usympy.sympy_associative(op)
sympy.unify.usympy.sympy_commutative(op)
sympy.unify.usympy.unify(x,y,s=None,variables=(),**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/unify/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/unify/tests/test_unify.py----------------------------------------
A:sympy.unify.tests.test_unify.(w, x, y, z)->map(Variable, 'wxyz')
A:sympy.unify.tests.test_unify.c1->Compound('CAdd', (a, b))
A:sympy.unify.tests.test_unify.c2->Compound('CAdd', (x, y))
A:sympy.unify.tests.test_unify.result->list(unify(c1, c2, {}))
A:sympy.unify.tests.test_unify.expr->C('CAdd', (1, 2))
A:sympy.unify.tests.test_unify.x->Variable('x')
A:sympy.unify.tests.test_unify.y->CondVariable('y', lambda a: a % 2 == 0)
A:sympy.unify.tests.test_unify.z->CondVariable('z', lambda a: a > 3)
A:sympy.unify.tests.test_unify.pattern->C('CAdd', (z, y))
sympy.unify.tests.test_unify._test_combinations_assoc()
sympy.unify.tests.test_unify._test_combinations_comm()
sympy.unify.tests.test_unify.is_associative(x)
sympy.unify.tests.test_unify.is_commutative(x)
sympy.unify.tests.test_unify.test_CondVariable()
sympy.unify.tests.test_unify.test_allcombinations()
sympy.unify.tests.test_unify.test_associative()
sympy.unify.tests.test_unify.test_basic()
sympy.unify.tests.test_unify.test_commutative()
sympy.unify.tests.test_unify.test_commutativity()
sympy.unify.tests.test_unify.test_defaultdict()
sympy.unify.tests.test_unify.test_ops()
sympy.unify.tests.test_unify.unify(a,b,s={})


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/unify/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/unify/tests/test_sympy.py----------------------------------------
A:sympy.unify.tests.test_sympy.expr->FiniteSet(Basic(S(1), x), y, Basic(x, z))
A:sympy.unify.tests.test_sympy.expected->Basic(S(1), S(2), S(3))
A:sympy.unify.tests.test_sympy.cmpd->Compound(Basic, (S(1), Compound(Basic, Tuple(2)), S(3)))
A:sympy.unify.tests.test_sympy.(a, b, c)->map(Symbol, 'abc')
A:sympy.unify.tests.test_sympy.pattern->FiniteSet(a, Basic(x, b))
A:sympy.unify.tests.test_sympy.(a, b)->map(Symbol, 'ab')
A:sympy.unify.tests.test_sympy.a->tuple(a)
A:sympy.unify.tests.test_sympy.b->tuple(b)
A:sympy.unify.tests.test_sympy.result->list(unify(expr, pattern, {}, (a, c)))
A:sympy.unify.tests.test_sympy.(p, q)->map(Symbol, 'pq')
A:sympy.unify.tests.test_sympy.X->MatrixSymbol('X', n, n)
A:sympy.unify.tests.test_sympy.Y->MatrixSymbol('Y', 2, 2)
A:sympy.unify.tests.test_sympy.Z->MatrixSymbol('Z', 2, 3)
A:sympy.unify.tests.test_sympy.rebuilt->construct(deconstruct(expr))
A:sympy.unify.tests.test_sympy.(a, b, c, x, y)->symbols('a,b,c,x,y')
A:sympy.unify.tests.test_sympy.s->FiniteSet(a, b, c)
A:sympy.unify.tests.test_sympy.t->FiniteSet(x, y)
A:sympy.unify.tests.test_sympy.(a, b, c, x, y, z)->symbols('a,b,c,x,y,z')
sympy.unify.tests.test_sympy.iterdicteq(a,b)
sympy.unify.tests.test_sympy.test_FiniteSet_commutivity()
sympy.unify.tests.test_sympy.test_FiniteSet_complex()
sympy.unify.tests.test_sympy.test_Union()
sympy.unify.tests.test_sympy.test_and()
sympy.unify.tests.test_sympy.test_commutative_in_commutative()
sympy.unify.tests.test_sympy.test_construct()
sympy.unify.tests.test_sympy.test_deconstruct()
sympy.unify.tests.test_sympy.test_hard_match()
sympy.unify.tests.test_sympy.test_is_commutative()
sympy.unify.tests.test_sympy.test_matrix()
sympy.unify.tests.test_sympy.test_nested()
sympy.unify.tests.test_sympy.test_non_frankenAdds()
sympy.unify.tests.test_sympy.test_s_input()
sympy.unify.tests.test_sympy.test_unify()
sympy.unify.tests.test_sympy.test_unify_commutative()
sympy.unify.tests.test_sympy.test_unify_iter()
sympy.unify.tests.test_sympy.test_unify_variables()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/unify/tests/test_rewrite.py----------------------------------------
A:sympy.unify.tests.test_rewrite.rl->rewriterule(x + y, x ** y, [x, y], assume=Q.integer(x))
A:sympy.unify.tests.test_rewrite.a->Symbol('a')
A:sympy.unify.tests.test_rewrite.b->Symbol('b', integer=True)
A:sympy.unify.tests.test_rewrite.c->Symbol('c', integer=True)
A:sympy.unify.tests.test_rewrite.d->Symbol('d', integer=True)
A:sympy.unify.tests.test_rewrite.(a, b)->map(Symbol, 'ab')
sympy.unify.tests.test_rewrite.test_Exprs_ok()
sympy.unify.tests.test_rewrite.test_assumptions()
sympy.unify.tests.test_rewrite.test_condition_multiple()
sympy.unify.tests.test_rewrite.test_condition_simple()
sympy.unify.tests.test_rewrite.test_moderate()
sympy.unify.tests.test_rewrite.test_simple()
sympy.unify.tests.test_rewrite.test_simple_variables()
sympy.unify.tests.test_rewrite.test_sincos()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/pytest.py----------------------------------------
A:sympy.testing.pytest.USE_PYTEST->getattr(sys, '_running_pytest', False)
A:sympy.testing.pytest.message->str(e)
A:sympy.testing.pytest.wrapper->functools.update_wrapper(func_wrap, func)
A:sympy.testing.pytest.func_wrapper->functools.update_wrapper(func_wrapper, func)
A:sympy.testing.pytest.msg->f'Failed: Warning has the wrong stacklevel. The warning stacklevel needs to be\nset so that the line of code shown in the warning message is user code that\ncalls the deprecated code (the current stacklevel is showing code from\n{w.filename} (line {w.lineno}), expected {thisfile})'.replace('\n', ' ')
A:sympy.testing.pytest.this_file->pathlib.Path(__file__)
A:sympy.testing.pytest.text->f.read()
sympy.testing.pytest._both_exp_pow(func)
sympy.testing.pytest._running_under_pyodide()
sympy.testing.pytest.skip_under_pyodide(message)
sympy.testing.pytest.warns(warningcls,*,match='',test_stacklevel=True)
sympy.testing.pytest.warns_deprecated_sympy()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/randtest.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/tmpfiles.py----------------------------------------
A:sympy.testing.tmpfiles.tmp_files->set('')
A:sympy.testing.tmpfiles.tmp_folders->set('')
A:sympy.testing.tmpfiles.file->cls.tmp_files.pop()
A:sympy.testing.tmpfiles.folder->cls.tmp_folders.pop()
sympy.testing.tmpfiles.TmpFileManager
sympy.testing.tmpfiles.TmpFileManager.cleanup(cls)
sympy.testing.tmpfiles.TmpFileManager.tmp_file(cls,name='')
sympy.testing.tmpfiles.TmpFileManager.tmp_folder(cls,name='')
sympy.testing.tmpfiles.cleanup_tmp_files(test_func)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/matrices.py----------------------------------------
sympy.testing.matrices.allclose(A,B,rtol=1e-05,atol=1e-08)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/quality_unicode.py----------------------------------------
A:sympy.testing.quality_unicode.encoding_header_re->re.compile('^[ \\t\\f]*#.*?coding[:=][ \\t]*([-_.a-zA-Z0-9]+)')
sympy.testing.quality_unicode._test_this_file_encoding(fname,test_file,unicode_whitelist=unicode_whitelist,unicode_strict_whitelist=unicode_strict_whitelist)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/runtests.py----------------------------------------
A:sympy.testing.runtests.ON_CI->os.getenv('CI', None)
A:sympy.testing.runtests.s->s.encode('raw_unicode_escape').decode('utf8', 'ignore').encode('raw_unicode_escape').decode('utf8', 'ignore')
A:sympy.testing.runtests.rv->os.path.join(*rv.split('/'))
A:sympy.testing.runtests.pos->os.path.join(*rv.split('/')).find(':')
A:sympy.testing.runtests.this_file->os.path.abspath(__file__)
A:sympy.testing.runtests.sympy_dir->os.path.normpath(sympy_dir)
A:sympy.testing.runtests.use_unicode_prev->setup_pprint()
A:sympy.testing.runtests.cwd->get_sympy_dir()
A:sympy.testing.runtests.p->subprocess.Popen([command, '-R', '-c', commandstring], cwd=cwd)
A:sympy.testing.runtests.hash_seed->os.getenv('PYTHONHASHSEED')
A:sympy.testing.runtests.os.environ['PYTHONHASHSEED']->str(random.randrange(2 ** 32))
A:sympy.testing.runtests.ret->run_in_subprocess_with_hash_randomization('_doctest', function_args=paths, function_kwargs=kwargs)
A:sympy.testing.runtests.seed->random.randrange(100000000)
A:sympy.testing.runtests.blacklist->kwargs.get('blacklist', [])
A:sympy.testing.runtests.r->PyTestReporter(verbose, split=split, colors=colors, force_colors=force_colors)
A:sympy.testing.runtests.t->traceback.format_exception(e, val, tb)
A:sympy.testing.runtests.test_files->traceback.format_exception(e, val, tb).get_test_files('sympy')
A:sympy.testing.runtests.paths->convert_to_native_paths(paths)
A:sympy.testing.runtests.basename->os.path.basename(f)
A:sympy.testing.runtests.matched->split_list(matched, split)
A:sympy.testing.runtests.normal->kwargs.get('normal', False)
A:sympy.testing.runtests.verbose->kwargs.get('verbose', False)
A:sympy.testing.runtests.colors->kwargs.get('colors', True)
A:sympy.testing.runtests.force_colors->kwargs.get('force_colors', False)
A:sympy.testing.runtests.split->kwargs.get('split', None)
A:sympy.testing.runtests.test_files_rst->traceback.format_exception(e, val, tb).get_test_files('doc/src', '*.rst', init_only=False)
A:sympy.testing.runtests.test_files_md->traceback.format_exception(e, val, tb).get_test_files('doc/src', '*.md', init_only=False)
A:sympy.testing.runtests.out->sympytestfile(rst_file, module_relative=False, encoding='utf-8', optionflags=pdoctest.ELLIPSIS | pdoctest.NORMALIZE_WHITESPACE | pdoctest.IGNORE_EXCEPTION_DETAIL)
A:sympy.testing.runtests.sp->re.compile('([0-9]+)/([1-9][0-9]*)')
A:sympy.testing.runtests.m->re.compile('([0-9]+)/([1-9][0-9]*)').match(split)
A:sympy.testing.runtests.(i, t)->map(int, m.groups())
A:sympy.testing.runtests.tot->sum(density)
A:sympy.testing.runtests.lower_frac->density_inv((i - 1) / t)
A:sympy.testing.runtests.higher_frac->density_inv(i / t)
A:sympy.testing.runtests.SymPyTestResults->namedtuple('SymPyTestResults', 'failed attempted')
A:sympy.testing.runtests.(text, filename)->doctest._load_testfile(filename, package, module_relative, encoding)
A:sympy.testing.runtests.name->os.path.basename(filename)
A:sympy.testing.runtests.globs->globs.copy().copy()
A:sympy.testing.runtests.runner->SymPyDocTestRunner(verbose=self._reporter._verbose == 2, optionflags=pdoctest.ELLIPSIS | pdoctest.NORMALIZE_WHITESPACE | pdoctest.IGNORE_EXCEPTION_DETAIL)
A:sympy.testing.runtests.runner._checker->SymPyOutputChecker()
A:sympy.testing.runtests.test->self._get_test(obj, name, module, globs, source_lines)
A:sympy.testing.runtests.self._root_dir->get_sympy_dir()
A:sympy.testing.runtests.self._fast_threshold->float(fast_threshold)
A:sympy.testing.runtests.self._slow_threshold->float(slow_threshold)
A:sympy.testing.runtests.target->Tuple(names_store, Store())
A:sympy.testing.runtests.value->Tuple(values, Load())
A:sympy.testing.runtests.assign->Assign([target], value)
A:sympy.testing.runtests.new_compare->Compare(names_load[0], compare.ops, names_load[1:])
A:sympy.testing.runtests.msg->BinOp(Str(msg_format), Mod(), Tuple(names_load, Load()))
A:sympy.testing.runtests.tree->parse(source)
A:sympy.testing.runtests.new_tree->Transform().visit(tree)
A:sympy.testing.runtests.source->self._enhance_asserts(source)
A:sympy.testing.runtests.code->compile(source, filename, 'exec', flags=0, dont_inherit=True)
A:sympy.testing.runtests.disabled->gl.get('disabled', False)
A:sympy.testing.runtests.f->funcs.pop(i)
A:sympy.testing.runtests.start->time.time()
A:sympy.testing.runtests.(t, v, tr)->sys.exc_info()
A:sympy.testing.runtests.filename->getattr(module, '__file__', module.__name__)
A:sympy.testing.runtests.dir->os.path.join(self._root_dir, convert_to_native_paths([dir])[0])
A:sympy.testing.runtests.(dirname, file)->os.path.split(filename)
A:sympy.testing.runtests.module->doctest._normalize_module(module)
A:sympy.testing.runtests.tests->SymPyDocTestFinder().find(module)
A:sympy.testing.runtests.(f, t)->SymPyDocTestRunner(verbose=self._reporter._verbose == 2, optionflags=pdoctest.ELLIPSIS | pdoctest.NORMALIZE_WHITESPACE | pdoctest.IGNORE_EXCEPTION_DETAIL).run(test, out=new.write, clear_globs=False)
A:sympy.testing.runtests.init_py->os.path.join(os.path.dirname(x), '__init__.py')
A:sympy.testing.runtests.matplotlib->import_module('matplotlib', import_kwargs={'fromlist': ['pyplot', 'cm', 'collections']}, min_module_version='1.0.0', catch=(RuntimeError,))
A:sympy.testing.runtests.tempdir->tempfile.mkdtemp()
A:sympy.testing.runtests.val->getattr(obj, valname)
A:sympy.testing.runtests.matches->self.num_want_rgx.finditer(want)
A:sympy.testing.runtests.lineno->self._find_lineno(tobj, source_lines)
A:sympy.testing.runtests.docstring->str(docstring)
A:sympy.testing.runtests.obj->unwrap(obj)
A:sympy.testing.runtests.globs['_doctest_depends_on']->getattr(obj, '_doctest_depends_on', {})
A:sympy.testing.runtests.example.want->example.want.replace('```\n', '')
A:sympy.testing.runtests.compileflags->doctest._extract_future_flags(test.globs)
A:sympy.testing.runtests.self.debugger->doctest._OutputRedirectingPdb(save_stdout)
A:sympy.testing.runtests.self.num_got_rgx->re.compile('(%s|%s)' % (fbeg, fmidend))
A:sympy.testing.runtests.self.num_want_rgx->re.compile('(%s|%s)' % (fbeg, fmidend))
A:sympy.testing.runtests.got->' '.join(got.split())
A:sympy.testing.runtests.want->' '.join(want.split())
A:sympy.testing.runtests.h->ctypes.windll.kernel32.GetStdHandle(-12)
A:sympy.testing.runtests.csbi->create_string_buffer(22)
A:sympy.testing.runtests.res->ctypes.windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)
A:sympy.testing.runtests.(_, _, _, _, _, left, _, right, _, _, _)->struct.unpack('hhhhHhhhhhh', csbi.raw)
A:sympy.testing.runtests.process->subprocess.Popen(['stty', '-a'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:sympy.testing.runtests.(stdout, stderr)->subprocess.Popen(['stty', '-a'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
A:sympy.testing.runtests.stdout->stdout.decode('utf-8').decode('utf-8')
A:sympy.testing.runtests.match->re.search(regex, stdout)
A:sympy.testing.runtests.columns->re.search(regex, stdout).group('columns')
A:sympy.testing.runtests.width->findout_terminal_width()
A:sympy.testing.runtests.text->text.encode(sys.stdout.encoding, 'backslashreplace').decode(sys.stdout.encoding).encode(sys.stdout.encoding, 'backslashreplace').decode(sys.stdout.encoding)
A:sympy.testing.runtests.l->text.encode(sys.stdout.encoding, 'backslashreplace').decode(sys.stdout.encoding).encode(sys.stdout.encoding, 'backslashreplace').decode(sys.stdout.encoding).rfind('\n')
A:sympy.testing.runtests.v->tuple(sys.version_info)
A:sympy.testing.runtests.implementation->platform.python_implementation()
A:sympy.testing.runtests.version->gmpy2.version()
A:sympy.testing.runtests.numpy->import_module('numpy')
A:sympy.testing.runtests.self._t_start->clock()
A:sympy.testing.runtests.self._t_end->clock()
A:sympy.testing.runtests.linelen->len(text)
A:sympy.testing.runtests.sorted_slow->sorted(self.slow_test_functions, key=lambda r: r[1])
A:sympy.testing.runtests.sorted_fast->sorted(self.fast_test_functions, key=lambda r: r[1])
A:sympy.testing.runtests.message->str(v)
A:sympy.testing.runtests.error_msg->'\n'.join(error_msg.split('\n')[1:])
sympy.testing.doctest(*paths,subprocess=True,rerun=0,**kwargs)
sympy.testing.runtests.DependencyError(Exception)
sympy.testing.runtests.PyTestReporter(self,verbose=False,tb='short',colors=True,force_colors=False,split=None)
sympy.testing.runtests.PyTestReporter.doctest_fail(self,name,error_msg)
sympy.testing.runtests.PyTestReporter.entering_filename(self,filename,n)
sympy.testing.runtests.PyTestReporter.entering_test(self,f)
sympy.testing.runtests.PyTestReporter.finish(self)
sympy.testing.runtests.PyTestReporter.import_error(self,filename,exc_info)
sympy.testing.runtests.PyTestReporter.leaving_filename(self)
sympy.testing.runtests.PyTestReporter.root_dir(self,dir)
sympy.testing.runtests.PyTestReporter.start(self,seed=None,msg='testprocessstarts')
sympy.testing.runtests.PyTestReporter.terminal_width(self)
sympy.testing.runtests.PyTestReporter.test_exception(self,exc_info)
sympy.testing.runtests.PyTestReporter.test_fail(self,exc_info)
sympy.testing.runtests.PyTestReporter.test_pass(self,char='.')
sympy.testing.runtests.PyTestReporter.test_skip(self,v=None)
sympy.testing.runtests.PyTestReporter.test_xfail(self)
sympy.testing.runtests.PyTestReporter.test_xpass(self,v)
sympy.testing.runtests.PyTestReporter.write(self,text,color='',align='left',width=None,force_colors=False)
sympy.testing.runtests.PyTestReporter.write_center(self,text,delim='=')
sympy.testing.runtests.PyTestReporter.write_exception(self,e,val,tb)
sympy.testing.runtests.Reporter
sympy.testing.runtests.Skipped(Exception)
sympy.testing.runtests.SymPyDocTestFinder(DocTestFinder)
sympy.testing.runtests.SymPyDocTestFinder._find(self,tests,obj,name,module,source_lines,globs,seen)
sympy.testing.runtests.SymPyDocTestFinder._get_test(self,obj,name,module,globs,source_lines)
sympy.testing.runtests.SymPyDocTestRunner(DocTestRunner)
sympy.testing.runtests.SymPyDocTestRunner.run(self,test,compileflags=None,out=None,clear_globs=True)
sympy.testing.runtests.SymPyDocTests(self,reporter,normal)
sympy.testing.runtests.SymPyDocTests._check_dependencies(self,executables=(),modules=(),disable_viewers=(),python_version=(3,5))
sympy.testing.runtests.SymPyDocTests.get_test_files(self,dir,pat='*.py',init_only=True)
sympy.testing.runtests.SymPyDocTests.test(self)
sympy.testing.runtests.SymPyDocTests.test_file(self,filename)
sympy.testing.runtests.SymPyOutputChecker(self)
sympy.testing.runtests.SymPyOutputChecker.check_output(self,want,got,optionflags)
sympy.testing.runtests.SymPyTests(self,reporter,kw='',post_mortem=False,seed=None,fast_threshold=None,slow_threshold=None)
sympy.testing.runtests.SymPyTests._enhance_asserts(self,source)
sympy.testing.runtests.SymPyTests._timeout(self,function,timeout,fail_on_timeout)
sympy.testing.runtests.SymPyTests.get_test_files(self,dir,pat='test_*.py')
sympy.testing.runtests.SymPyTests.matches(self,x)
sympy.testing.runtests.SymPyTests.test(self,sort=False,timeout=False,slow=False,enhance_asserts=False,fail_on_timeout=False)
sympy.testing.runtests.SymPyTests.test_file(self,filename,sort=True,timeout=False,slow=False,enhance_asserts=False,fail_on_timeout=False)
sympy.testing.runtests.TimeOutError(Exception)
sympy.testing.runtests._doctest(*paths,**kwargs)
sympy.testing.runtests._get_doctest_blacklist()
sympy.testing.runtests._indent(s,indent=4)
sympy.testing.runtests._report_failure(self,out,test,example,got)
sympy.testing.runtests._test(*paths,verbose=False,tb='short',kw=None,pdb=False,colors=True,force_colors=False,sort=True,seed=None,timeout=False,fail_on_timeout=False,slow=False,enhance_asserts=False,split=None,time_balance=True,blacklist=(),fast_threshold=None,slow_threshold=None)
sympy.testing.runtests.convert_to_native_paths(lst)
sympy.testing.runtests.doctest(*paths,subprocess=True,rerun=0,**kwargs)
sympy.testing.runtests.get_sympy_dir()
sympy.testing.runtests.raise_on_deprecated()
sympy.testing.runtests.run_all_tests(test_args=(),test_kwargs=None,doctest_args=(),doctest_kwargs=None,examples_args=(),examples_kwargs=None)
sympy.testing.runtests.run_in_subprocess_with_hash_randomization(function,function_args=(),function_kwargs=None,command=sys.executable,module='sympy.testing.runtests',force=False)
sympy.testing.runtests.setup_pprint()
sympy.testing.runtests.split_list(l,split,density=None)
sympy.testing.runtests.sympytestfile(filename,module_relative=True,name=None,package=None,globs=None,verbose=None,report=True,optionflags=0,extraglobs=None,raise_on_error=False,parser=pdoctest.DocTestParser(),encoding=None)
sympy.testing.runtests.test(*paths,subprocess=True,rerun=0,**kwargs)
sympy.testing.test(*paths,subprocess=True,rerun=0,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/tests/test_deprecated.py----------------------------------------
sympy.testing.tests.test_deprecated.test_deprecated_testing_randtest()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/tests/diagnose_imports.py----------------------------------------
A:sympy.testing.tests.diagnose_imports.this_file->abspath(__file__)
A:sympy.testing.tests.diagnose_imports.sympy_dir->normpath(sympy_dir)
A:sympy.testing.tests.diagnose_imports.option_parser->optparse.OptionParser(usage='Usage: %prog option [options]\n\nImport analysis for imports between SymPy modules.')
A:sympy.testing.tests.diagnose_imports.option_group->optparse.OptionGroup(option_parser, 'Sort options', 'These options define the sort order for output lines. At most one of these options is allowed. Unsorted output will reflect the order in which imports happened.')
A:sympy.testing.tests.diagnose_imports.(options, args)->optparse.OptionParser(usage='Usage: %prog option [options]\n\nImport analysis for imports between SymPy modules.').parse_args()
A:sympy.testing.tests.diagnose_imports.caller_frame->inspect.getframeinfo(sys._getframe(1))
A:sympy.testing.tests.diagnose_imports.result->builtin_import(module, globals, locals, fromlist, level)
A:sympy.testing.tests.diagnose_imports.definition->Definition(symbol, result.__dict__[symbol], importer_module)
A:sympy.testing.tests.diagnose_imports.symbol_list->builtin_import(module, globals, locals, fromlist, level).__dict__.iterkeys()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/tests/test_pytest.py----------------------------------------
sympy.testing.tests.test_pytest._warn_sympy_deprecation(stacklevel=3)
sympy.testing.tests.test_pytest.test_expected_exception_is_silent_callable()
sympy.testing.tests.test_pytest.test_expected_exception_is_silent_with()
sympy.testing.tests.test_pytest.test_ignore_allows_other_warnings()
sympy.testing.tests.test_pytest.test_ignore_continues_after_warning()
sympy.testing.tests.test_pytest.test_ignore_does_not_raise_without_warning()
sympy.testing.tests.test_pytest.test_ignore_ignores_warning()
sympy.testing.tests.test_pytest.test_ignore_many_warnings()
sympy.testing.tests.test_pytest.test_lack_of_exception_triggers_AssertionError_callable()
sympy.testing.tests.test_pytest.test_lack_of_exception_triggers_AssertionError_with()
sympy.testing.tests.test_pytest.test_second_argument_should_be_callable_or_string()
sympy.testing.tests.test_pytest.test_unexpected_exception_is_passed_through_callable()
sympy.testing.tests.test_pytest.test_unexpected_exception_is_passed_through_with()
sympy.testing.tests.test_pytest.test_warns_catches_warning()
sympy.testing.tests.test_pytest.test_warns_continues_after_warning()
sympy.testing.tests.test_pytest.test_warns_deprecated_sympy_catches_warning()
sympy.testing.tests.test_pytest.test_warns_deprecated_sympy_continues_after_warning()
sympy.testing.tests.test_pytest.test_warns_deprecated_sympy_doesnt_hide_other_warnings()
sympy.testing.tests.test_pytest.test_warns_deprecated_sympy_raises_without_warning()
sympy.testing.tests.test_pytest.test_warns_deprecated_sympy_wrong_stacklevel()
sympy.testing.tests.test_pytest.test_warns_hides_other_warnings()
sympy.testing.tests.test_pytest.test_warns_many_warnings()
sympy.testing.tests.test_pytest.test_warns_match_matching()
sympy.testing.tests.test_pytest.test_warns_match_non_matching()
sympy.testing.tests.test_pytest.test_warns_raises_without_warning()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/tests/test_code_quality.py----------------------------------------
A:sympy.testing.tests.test_code_quality.SYMPY_PATH->abspath(join(split(__file__)[0], pardir, pardir))
A:sympy.testing.tests.test_code_quality.TOP_PATH->abspath(join(SYMPY_PATH, pardir))
A:sympy.testing.tests.test_code_quality.BIN_PATH->join(TOP_PATH, 'bin')
A:sympy.testing.tests.test_code_quality.EXAMPLES_PATH->join(TOP_PATH, 'examples')
A:sympy.testing.tests.test_code_quality.implicit_test_re->re.compile('^\\s*(>>> )?(\\.\\.\\. )?from .* import .*\\*')
A:sympy.testing.tests.test_code_quality.str_raise_re->re.compile('^\\s*(>>> )?(\\.\\.\\. )?raise(\\s+(\\\'|\\")|\\s*(\\(\\s*)+(\\\'|\\"))')
A:sympy.testing.tests.test_code_quality.gen_raise_re->re.compile('^\\s*(>>> )?(\\.\\.\\. )?raise(\\s+Exception|\\s*(\\(\\s*)+Exception)')
A:sympy.testing.tests.test_code_quality.old_raise_re->re.compile('^\\s*(>>> )?(\\.\\.\\. )?raise((\\s*\\(\\s*)|\\s+)\\w+\\s*,')
A:sympy.testing.tests.test_code_quality.test_suite_def_re->re.compile('^def\\s+(?!(_|test))[^(]*\\(\\s*\\)\\s*:$')
A:sympy.testing.tests.test_code_quality.test_ok_def_re->re.compile('^def\\s+test_.*:$')
A:sympy.testing.tests.test_code_quality.test_file_re->re.compile('.*[/\\\\]test_.*\\.py$')
A:sympy.testing.tests.test_code_quality.func_is_re->re.compile('\\.\\s*func\\s+is')
A:sympy.testing.tests.test_code_quality.BareExpr->_Visit()
A:sympy.testing.tests.test_code_quality.tree->ast.parse(code)
A:sympy.testing.tests.test_code_quality.code->test_file.read()
A:sympy.testing.tests.test_code_quality.idx->line_with_bare_expr(code)
A:sympy.testing.tests.test_code_quality.test_set->set()
A:sympy.testing.tests.test_code_quality.result->re.compile('^\\s*(>>> )?(\\.\\.\\. )?raise((\\s*\\(\\s*)|\\s+)\\w+\\s*,').search(line)
sympy.testing.tests.test_code_quality._Visit(ast.NodeVisitor)
sympy.testing.tests.test_code_quality._Visit.visit_Expr(self,node)
sympy.testing.tests.test_code_quality._Visit.visit_With(self,node)
sympy.testing.tests.test_code_quality._with_space(c)
sympy.testing.tests.test_code_quality.check_directory_tree(base_path,file_check,exclusions=set(),pattern='*.py')
sympy.testing.tests.test_code_quality.check_files(files,file_check,exclusions=set(),pattern=None)
sympy.testing.tests.test_code_quality.find_self_assignments(s)
sympy.testing.tests.test_code_quality.line_with_bare_expr(code)
sympy.testing.tests.test_code_quality.tab_in_leading(s)
sympy.testing.tests.test_code_quality.test_files()
sympy.testing.tests.test_code_quality.test_find_self_assignments()
sympy.testing.tests.test_code_quality.test_implicit_imports_regular_expression()
sympy.testing.tests.test_code_quality.test_raise_statement_regular_expression()
sympy.testing.tests.test_code_quality.test_test_duplicate_defs()
sympy.testing.tests.test_code_quality.test_test_suite_defs()
sympy.testing.tests.test_code_quality.test_test_unicode_encoding()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/testing/tests/test_module_imports.py----------------------------------------
A:sympy.testing.tests.test_module_imports.my_filename->abspath(inspect.getfile(inspect.currentframe()))
A:sympy.testing.tests.test_module_imports.my_dirname->dirname(my_filename)
A:sympy.testing.tests.test_module_imports.diagnose_imports_filename->normpath(diagnose_imports_filename)
A:sympy.testing.tests.test_module_imports.process->subprocess.Popen([sys.executable, normpath(diagnose_imports_filename), '--problems', '--by-importer'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=-1)
A:sympy.testing.tests.test_module_imports.(output, _)->subprocess.Popen([sys.executable, normpath(diagnose_imports_filename), '--problems', '--by-importer'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=-1).communicate()
sympy.testing.tests.test_module_imports.test_module_imports_are_direct()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/discrete/convolutions.py----------------------------------------
A:sympy.discrete.convolutions.c->as_int(cycle)
A:sympy.discrete.convolutions.ls->convolution_fft(a, b, dps=dps)
A:sympy.discrete.convolutions.n->max(len(a), len(b))
A:sympy.discrete.convolutions.a->inverse_mobius_transform(a, subset=False)
sympy.convolution(a,b,cycle=0,dps=None,prime=None,dyadic=None,subset=None)
sympy.covering_product(a,b)
sympy.discrete.convolutions.convolution(a,b,cycle=0,dps=None,prime=None,dyadic=None,subset=None)
sympy.discrete.convolutions.convolution_fft(a,b,dps=None)
sympy.discrete.convolutions.convolution_fwht(a,b)
sympy.discrete.convolutions.convolution_ntt(a,b,prime)
sympy.discrete.convolutions.convolution_subset(a,b)
sympy.discrete.convolutions.covering_product(a,b)
sympy.discrete.convolutions.intersecting_product(a,b)
sympy.intersecting_product(a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/discrete/recurrences.py----------------------------------------
A:sympy.discrete.recurrences.n->as_int(n)
A:sympy.discrete.recurrences.k->len(c)
sympy.discrete.recurrences.linrec(coeffs,init,n)
sympy.discrete.recurrences.linrec_coeffs(c,n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/discrete/transforms.py----------------------------------------
A:sympy.discrete.transforms.n->len(a)
A:sympy.discrete.transforms.j->int(ibin(i, b, str=True)[::-1], 2)
A:sympy.discrete.transforms.ang->ang.evalf(dps + 2).evalf(dps + 2)
A:sympy.discrete.transforms.p->as_int(prime)
A:sympy.discrete.transforms.pr->primitive_root(p)
A:sympy.discrete.transforms.rt->pow(rt, p - 2, p)
A:sympy.discrete.transforms.rv->pow(n, p - 2, p)
sympy.discrete.transforms._fourier_transform(seq,dps,inverse=False)
sympy.discrete.transforms._mobius_transform(seq,sgn,subset)
sympy.discrete.transforms._number_theoretic_transform(seq,prime,inverse=False)
sympy.discrete.transforms._walsh_hadamard_transform(seq,inverse=False)
sympy.discrete.transforms.fft(seq,dps=None)
sympy.discrete.transforms.fwht(seq)
sympy.discrete.transforms.ifft(seq,dps=None)
sympy.discrete.transforms.ifwht(seq)
sympy.discrete.transforms.intt(seq,prime)
sympy.discrete.transforms.inverse_mobius_transform(seq,subset=True)
sympy.discrete.transforms.mobius_transform(seq,subset=True)
sympy.discrete.transforms.ntt(seq,prime)
sympy.fft(seq,dps=None)
sympy.fwht(seq)
sympy.ifft(seq,dps=None)
sympy.ifwht(seq)
sympy.intt(seq,prime)
sympy.inverse_mobius_transform(seq,subset=True)
sympy.mobius_transform(seq,subset=True)
sympy.ntt(seq,prime)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/discrete/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/discrete/tests/test_recurrences.py----------------------------------------
A:sympy.discrete.tests.test_recurrences.(x, y, z)->symbols('x y z')
sympy.discrete.tests.test_recurrences.test_linrec()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/discrete/tests/test_convolutions.py----------------------------------------
A:sympy.discrete.tests.test_convolutions.(u, v, w, x, y)->symbols('u v w x y')
A:sympy.discrete.tests.test_convolutions.(p, q, r, s, t)->symbols('p q r s t')
A:sympy.discrete.tests.test_convolutions.(u, v, w, x, y, z)->symbols('u v w x y z')
sympy.discrete.tests.test_convolutions.test_convolution()
sympy.discrete.tests.test_convolutions.test_convolution_fft()
sympy.discrete.tests.test_convolutions.test_convolution_fwht()
sympy.discrete.tests.test_convolutions.test_convolution_ntt()
sympy.discrete.tests.test_convolutions.test_convolution_subset()
sympy.discrete.tests.test_convolutions.test_covering_product()
sympy.discrete.tests.test_convolutions.test_cyclic_convolution()
sympy.discrete.tests.test_convolutions.test_intersecting_product()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/discrete/tests/test_transforms.py----------------------------------------
A:sympy.discrete.tests.test_transforms.ls->list(range(6))
A:sympy.discrete.tests.test_transforms.x->Symbol('x', integer=True)
A:sympy.discrete.tests.test_transforms.(x, y)->symbols('x y')
A:sympy.discrete.tests.test_transforms.(w, x, y, z)->symbols('w x y z')
sympy.discrete.tests.test_transforms.test_fft_ifft()
sympy.discrete.tests.test_transforms.test_fwht_ifwht()
sympy.discrete.tests.test_transforms.test_mobius_transform()
sympy.discrete.tests.test_transforms.test_ntt_intt()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/discrete/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/paulialgebra.py----------------------------------------
A:sympy.physics.paulialgebra.obj->sympy.core.symbol.Symbol.__new__(cls, '%s%d' % (label, i), commutative=False, hermitian=True)
A:sympy.physics.paulialgebra.tmp->start.as_coeff_mul()
sympy.physics.paulialgebra.Pauli(cls,i,label='sigma')
sympy.physics.paulialgebra.Pauli.__getnewargs_ex__(self)
sympy.physics.paulialgebra.Pauli.__mul__(self,other)
sympy.physics.paulialgebra.Pauli._eval_power(b,e)
sympy.physics.paulialgebra.Pauli._hashable_content(self)
sympy.physics.paulialgebra.delta(i,j)
sympy.physics.paulialgebra.epsilon(i,j,k)
sympy.physics.paulialgebra.evaluate_pauli_product(arg)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/pring.py----------------------------------------
sympy.physics.pring.energy(n,m,r)
sympy.physics.pring.wavefunction(n,x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/secondquant.py----------------------------------------
A:sympy.physics.secondquant.arg->arg.expand().expand()
A:sympy.physics.secondquant.r->type(self[i]).eval(arg)
A:sympy.physics.secondquant.obj->sympy.core.basic.Basic.__new__(cls, i, j)
A:sympy.physics.secondquant.dagger->getattr(arg, '_dagger_', None)
A:sympy.physics.secondquant.(upper, signu)->_sort_anticommuting_fermions(upper, key=cls._sortkey)
A:sympy.physics.secondquant.(lower, signl)->_sort_anticommuting_fermions(lower, key=cls._sortkey)
A:sympy.physics.secondquant.symbol->sympify(symbol)
A:sympy.physics.secondquant.upper->Tuple(*upper)
A:sympy.physics.secondquant.lower->Tuple(*lower)
A:sympy.physics.secondquant.h->hash(self)
A:sympy.physics.secondquant.label->str(self.args[0])
A:sympy.physics.secondquant.amp->sqrt(state[element] + 1)
A:sympy.physics.secondquant.(c_part, nc_part)->m.args_cnc()
A:sympy.physics.secondquant.occupations->list(map(sympify, occupations))
A:sympy.physics.secondquant.i->iter(belows)
A:sympy.physics.secondquant.new_occs->list(self.args[0])
A:sympy.physics.secondquant.(occupations, sign)->_sort_anticommuting_fermions(occupations, key=hash)
A:sympy.physics.secondquant.hole->Dummy('i', below_fermi=True)
A:sympy.physics.secondquant.particle->Dummy('a', above_fermi=True)
A:sympy.physics.secondquant.pos->list(self.args[0]).index(i)
A:sympy.physics.secondquant.n_nc->len(nc_part)
A:sympy.physics.secondquant.result->evaluate_deltas(result)
A:sympy.physics.secondquant.e->e.expand().expand()
A:sympy.physics.secondquant.muls->e.expand().expand().atoms(Mul)
A:sympy.physics.secondquant.sbra->repr(self.bra)
A:sympy.physics.secondquant.sket->repr(self.ket)
A:sympy.physics.secondquant.a->iter(aboves)
A:sympy.physics.secondquant.a[i, j]->apply_operators(Dagger(basis[i]) * op * basis[j])
A:sympy.physics.secondquant.self.n_basis->len(self.basis)
A:sympy.physics.secondquant.b->b.doit(**hints).doit(**hints)
A:sympy.physics.secondquant.(ca, nca)->iter(aboves).args_cnc()
A:sympy.physics.secondquant.(cb, ncb)->b.doit(**hints).doit(**hints).args_cnc()
A:sympy.physics.secondquant.(c_part, seq)->arg.expand().expand().args_cnc()
A:sympy.physics.secondquant.coeff->Mul(*c_part)
A:sympy.physics.secondquant.(newseq, sign)->_sort_anticommuting_fermions(seq)
A:sympy.physics.secondquant.below->Dummy('i', **assume)
A:sympy.physics.secondquant.above->Dummy('a', **assume)
A:sympy.physics.secondquant.cls->type(self[i])
A:sympy.physics.secondquant.indices->iter(belows).indices(len(self))
A:sympy.physics.secondquant.iter->range(0, len(ops))
A:sympy.physics.secondquant.mul->arg0._new_rawargs(*arg0.args[:i] + arg0.args[i + 1:])
A:sympy.physics.secondquant.rng->list(range(len(string1) - 1))
A:sympy.physics.secondquant.rev->list(range(len(string1) - 3, -1, -1))
A:sympy.physics.secondquant.keys->list(map(key, string1))
A:sympy.physics.secondquant.key_val->dict(list(zip(keys, string1)))
A:sympy.physics.secondquant.letters_above->pretty_indices.get('above', '')
A:sympy.physics.secondquant.letters_below->pretty_indices.get('below', '')
A:sympy.physics.secondquant.letters_general->pretty_indices.get('general', '')
A:sympy.physics.secondquant.len_above->len(letters_above)
A:sympy.physics.secondquant.len_below->len(letters_below)
A:sympy.physics.secondquant.len_general->len(letters_general)
A:sympy.physics.secondquant.dummies->sorted(dummies, key=default_sort_key)
A:sympy.physics.secondquant.sym->_p(p)
A:sympy.physics.secondquant.expr->expr.expand().expand()
A:sympy.physics.secondquant.terms->set(expr.args)
A:sympy.physics.secondquant.p->KeyPrinter()
A:sympy.physics.secondquant.ordered->_get_ordered_dummies(term)
A:sympy.physics.secondquant.subsdict[d]->next(p)
A:sympy.physics.secondquant.x->Dummy('x')
A:sympy.physics.secondquant.args->sympy.core.mul.Mul.make_args(mul)
A:sympy.physics.secondquant.all_dums->set().union(*fac_dum.values())
A:sympy.physics.secondquant.other_dums->fac_dum[fac].copy()
A:sympy.physics.secondquant.masked_facs->dict(list(zip(dumstruct, masked_facs)))
A:sympy.physics.secondquant.keydict->dict(list(zip(dumstruct, all_masked)))
A:sympy.physics.secondquant.facpos->masked_facs[fac].find(dum_repr[d], facpos + 1)
A:sympy.physics.secondquant.dumkey->dict(list(zip(all_dums, list(map(_key, all_dums)))))
A:sympy.physics.secondquant.unordered->defaultdict(set)
A:sympy.physics.secondquant.all_ambiguous->set()
A:sympy.physics.secondquant.nondum->_SymbolFactory('_]"]_')._next()
A:sympy.physics.secondquant.newterm->terms.pop().subs(subslist)
A:sympy.physics.secondquant.neworder->_get_ordered_dummies(newterm)
A:sympy.physics.secondquant.s->Symbol('%s%i' % (self._label, self._counterVar))
A:sympy.physics.secondquant._symbol_factory->_SymbolFactory('_]"]_')
A:sympy.physics.secondquant.c->contraction(string1[i], string1[j])
A:sympy.physics.secondquant.n->len(string1)
A:sympy.physics.secondquant.string1->tuple(string1)
A:sympy.physics.secondquant.(i, j)->sorted(map(sympify, (i, j)), key=default_sort_key)
A:sympy.physics.secondquant.tmp->Dummy()
A:sympy.physics.secondquant.new_terms->set()
A:sympy.physics.secondquant.on_hold->set()
A:sympy.physics.secondquant.term->set(expr.args).pop()
A:sympy.physics.secondquant.permuted->substitute_dummies(permuted)
A:sympy.physics.secondquant.keep->_choose_one_to_keep(term, permuted, P.args)
sympy.physics.secondquant.AnnihilateBoson(BosonicOperator,Annihilator)
sympy.physics.secondquant.AnnihilateBoson.__repr__(self)
sympy.physics.secondquant.AnnihilateBoson._dagger_(self)
sympy.physics.secondquant.AnnihilateBoson._latex(self,printer)
sympy.physics.secondquant.AnnihilateBoson.apply_operator(self,state)
sympy.physics.secondquant.AnnihilateFermion(FermionicOperator,Annihilator)
sympy.physics.secondquant.AnnihilateFermion.__repr__(self)
sympy.physics.secondquant.AnnihilateFermion._dagger_(self)
sympy.physics.secondquant.AnnihilateFermion._latex(self,printer)
sympy.physics.secondquant.AnnihilateFermion.apply_operator(self,state)
sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator(self)
sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator(self)
sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator(self)
sympy.physics.secondquant.AnnihilateFermion.is_q_creator(self)
sympy.physics.secondquant.Annihilator(SqOperator)
sympy.physics.secondquant.AntiSymmetricTensor(cls,symbol,upper,lower)
sympy.physics.secondquant.AntiSymmetricTensor.__str__(self)
sympy.physics.secondquant.AntiSymmetricTensor._latex(self,printer)
sympy.physics.secondquant.AntiSymmetricTensor._sortkey(cls,index)
sympy.physics.secondquant.AntiSymmetricTensor.lower(self)
sympy.physics.secondquant.AntiSymmetricTensor.symbol(self)
sympy.physics.secondquant.AntiSymmetricTensor.upper(self)
sympy.physics.secondquant.AppliesOnlyToSymbolicIndex(SecondQuantizationError)
sympy.physics.secondquant.BosonState(FockState)
sympy.physics.secondquant.BosonState.down(self,i)
sympy.physics.secondquant.BosonState.up(self,i)
sympy.physics.secondquant.BosonicBasis
sympy.physics.secondquant.BosonicOperator(SqOperator)
sympy.physics.secondquant.Commutator(Function)
sympy.physics.secondquant.Commutator.__repr__(self)
sympy.physics.secondquant.Commutator.__str__(self)
sympy.physics.secondquant.Commutator._latex(self,printer)
sympy.physics.secondquant.Commutator.doit(self,**hints)
sympy.physics.secondquant.Commutator.eval(cls,a,b)
sympy.physics.secondquant.ContractionAppliesOnlyToFermions(SecondQuantizationError)
sympy.physics.secondquant.CreateBoson(BosonicOperator,Creator)
sympy.physics.secondquant.CreateBoson.__repr__(self)
sympy.physics.secondquant.CreateBoson._dagger_(self)
sympy.physics.secondquant.CreateBoson._latex(self,printer)
sympy.physics.secondquant.CreateBoson.apply_operator(self,state)
sympy.physics.secondquant.CreateFermion(FermionicOperator,Creator)
sympy.physics.secondquant.CreateFermion.__repr__(self)
sympy.physics.secondquant.CreateFermion._dagger_(self)
sympy.physics.secondquant.CreateFermion._latex(self,printer)
sympy.physics.secondquant.CreateFermion.apply_operator(self,state)
sympy.physics.secondquant.CreateFermion.is_only_q_annihilator(self)
sympy.physics.secondquant.CreateFermion.is_only_q_creator(self)
sympy.physics.secondquant.CreateFermion.is_q_annihilator(self)
sympy.physics.secondquant.CreateFermion.is_q_creator(self)
sympy.physics.secondquant.Creator(SqOperator)
sympy.physics.secondquant.Dagger(cls,arg)
sympy.physics.secondquant.Dagger._dagger_(self)
sympy.physics.secondquant.Dagger.eval(cls,arg)
sympy.physics.secondquant.FermionState(cls,occupations,fermi_level=0)
sympy.physics.secondquant.FermionState.__repr__(self)
sympy.physics.secondquant.FermionState._add_orbit(self,i)
sympy.physics.secondquant.FermionState._count_holes(cls,list)
sympy.physics.secondquant.FermionState._labels(self)
sympy.physics.secondquant.FermionState._negate_holes(self,list)
sympy.physics.secondquant.FermionState._only_above_fermi(cls,i)
sympy.physics.secondquant.FermionState._only_below_fermi(cls,i)
sympy.physics.secondquant.FermionState._remove_orbit(self,i)
sympy.physics.secondquant.FermionState.down(self,i)
sympy.physics.secondquant.FermionState.up(self,i)
sympy.physics.secondquant.FermionicOperator(SqOperator)
sympy.physics.secondquant.FermionicOperator._sortkey(self)
sympy.physics.secondquant.FermionicOperator.is_above_fermi(self)
sympy.physics.secondquant.FermionicOperator.is_below_fermi(self)
sympy.physics.secondquant.FermionicOperator.is_only_above_fermi(self)
sympy.physics.secondquant.FermionicOperator.is_only_below_fermi(self)
sympy.physics.secondquant.FermionicOperator.is_restricted(self)
sympy.physics.secondquant.FixedBosonicBasis(self,n_particles,n_levels)
sympy.physics.secondquant.FixedBosonicBasis.__getitem__(self,i)
sympy.physics.secondquant.FixedBosonicBasis.__len__(self)
sympy.physics.secondquant.FixedBosonicBasis.__repr__(self)
sympy.physics.secondquant.FixedBosonicBasis._build_particle_locations(self)
sympy.physics.secondquant.FixedBosonicBasis._build_states(self)
sympy.physics.secondquant.FixedBosonicBasis.index(self,state)
sympy.physics.secondquant.FixedBosonicBasis.state(self,i)
sympy.physics.secondquant.FockState(cls,occupations)
sympy.physics.secondquant.FockState.__getitem__(self,i)
sympy.physics.secondquant.FockState.__len__(self)
sympy.physics.secondquant.FockState.__repr__(self)
sympy.physics.secondquant.FockState.__str__(self)
sympy.physics.secondquant.FockState._labels(self)
sympy.physics.secondquant.FockState._latex(self,printer)
sympy.physics.secondquant.FockStateBosonBra(BosonState,FockStateBra)
sympy.physics.secondquant.FockStateBosonBra._dagger_(self)
sympy.physics.secondquant.FockStateBosonKet(BosonState,FockStateKet)
sympy.physics.secondquant.FockStateBosonKet._dagger_(self)
sympy.physics.secondquant.FockStateBra(FockState)
sympy.physics.secondquant.FockStateBra.__mul__(self,other)
sympy.physics.secondquant.FockStateFermionBra(FermionState,FockStateBra)
sympy.physics.secondquant.FockStateFermionBra._dagger_(self)
sympy.physics.secondquant.FockStateFermionKet(FermionState,FockStateKet)
sympy.physics.secondquant.FockStateFermionKet._dagger_(self)
sympy.physics.secondquant.FockStateKet(FockState)
sympy.physics.secondquant.InnerProduct(cls,bra,ket)
sympy.physics.secondquant.InnerProduct.__repr__(self)
sympy.physics.secondquant.InnerProduct.__str__(self)
sympy.physics.secondquant.InnerProduct.bra(self)
sympy.physics.secondquant.InnerProduct.eval(cls,bra,ket)
sympy.physics.secondquant.InnerProduct.ket(self)
sympy.physics.secondquant.KeyPrinter(StrPrinter)
sympy.physics.secondquant.KeyPrinter._print_Dummy(self,expr)
sympy.physics.secondquant.NO(cls,arg)
sympy.physics.secondquant.NO.__getitem__(self,i)
sympy.physics.secondquant.NO.__len__(self)
sympy.physics.secondquant.NO.__repr__(self)
sympy.physics.secondquant.NO.__str__(self)
sympy.physics.secondquant.NO._expand_operators(self)
sympy.physics.secondquant.NO._latex(self,printer)
sympy.physics.secondquant.NO._remove_brackets(self)
sympy.physics.secondquant.NO.doit(self,**hints)
sympy.physics.secondquant.NO.get_subNO(self,i)
sympy.physics.secondquant.NO.has_q_annihilators(self)
sympy.physics.secondquant.NO.has_q_creators(self)
sympy.physics.secondquant.NO.iter_q_annihilators(self)
sympy.physics.secondquant.NO.iter_q_creators(self)
sympy.physics.secondquant.PermutationOperator(cls,i,j)
sympy.physics.secondquant.PermutationOperator._latex(self,printer)
sympy.physics.secondquant.PermutationOperator.get_permuted(self,expr)
sympy.physics.secondquant.SecondQuantizationError(Exception)
sympy.physics.secondquant.SqOperator(cls,k)
sympy.physics.secondquant.SqOperator.__repr__(self)
sympy.physics.secondquant.SqOperator.__str__(self)
sympy.physics.secondquant.SqOperator.apply_operator(self,state)
sympy.physics.secondquant.SqOperator.is_symbolic(self)
sympy.physics.secondquant.SqOperator.state(self)
sympy.physics.secondquant.SubstitutionOfAmbigousOperatorFailed(SecondQuantizationError)
sympy.physics.secondquant.TensorSymbol(Expr)
sympy.physics.secondquant.VarBosonicBasis(self,n_max)
sympy.physics.secondquant.VarBosonicBasis.__getitem__(self,i)
sympy.physics.secondquant.VarBosonicBasis.__len__(self)
sympy.physics.secondquant.VarBosonicBasis.__repr__(self)
sympy.physics.secondquant.VarBosonicBasis._build_states(self)
sympy.physics.secondquant.VarBosonicBasis.index(self,state)
sympy.physics.secondquant.VarBosonicBasis.state(self,i)
sympy.physics.secondquant.ViolationOfPauliPrinciple(SecondQuantizationError)
sympy.physics.secondquant.WicksTheoremDoesNotApply(SecondQuantizationError)
sympy.physics.secondquant._SymbolFactory(self,label)
sympy.physics.secondquant._SymbolFactory._counter(self)
sympy.physics.secondquant._SymbolFactory._next(self)
sympy.physics.secondquant._SymbolFactory._set_counter(self,value)
sympy.physics.secondquant.__kprint(expr)
sympy.physics.secondquant._apply_Mul(m)
sympy.physics.secondquant._determine_ambiguous(term,ordered,ambiguous_groups)
sympy.physics.secondquant._get_contractions(string1,keep_only_fully_contracted=False)
sympy.physics.secondquant._get_ordered_dummies(mul,verbose=False)
sympy.physics.secondquant._sort_anticommuting_fermions(string1,key=_sqkey)
sympy.physics.secondquant._sqkey(sq_operator)
sympy.physics.secondquant.apply_operators(e)
sympy.physics.secondquant.contraction(a,b)
sympy.physics.secondquant.evaluate_deltas(e)
sympy.physics.secondquant.matrix_rep(op,basis)
sympy.physics.secondquant.simplify_index_permutations(expr,permutation_operators)
sympy.physics.secondquant.substitute_dummies(expr,new_indices=False,pretty_indices={})
sympy.physics.secondquant.wicks(e,**kw_args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/qho_1d.py----------------------------------------
A:sympy.physics.qho_1d.(n, x, m, omega)->map(S, [n, x, m, omega])
sympy.physics.qho_1d.E_n(n,omega)
sympy.physics.qho_1d.coherent_state(n,alpha)
sympy.physics.qho_1d.psi_n(n,x,m,omega)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/matrices.py----------------------------------------
A:sympy.physics.matrices.m->Matrix(mat)
A:sympy.physics.matrices.minkowski_tensor->Matrix(((1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0, 0, 0, -1)))
sympy.physics.matrices.mdft(n)
sympy.physics.matrices.mgamma(mu,lower=False)
sympy.physics.matrices.msigma(i)
sympy.physics.matrices.pat_matrix(m,dx,dy,dz)
sympy.physics.mdft(n)
sympy.physics.mgamma(mu,lower=False)
sympy.physics.msigma(i)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/hydrogen.py----------------------------------------
A:sympy.physics.hydrogen.(n, l, r, Z)->map(S, [n, l, r, Z])
A:sympy.physics.hydrogen.C->sqrt((S(2) / (n * a)) ** 3 * factorial(n_r) / (2 * n * factorial(n + l)))
A:sympy.physics.hydrogen.(n, l, m, r, phi, theta, Z)->map(S, [n, l, m, r, phi, theta, Z])
A:sympy.physics.hydrogen.(n, l, Z, c)->map(S, [n, l, Z, c])
A:sympy.physics.hydrogen.beta->sqrt(skappa ** 2 - Z ** 2 / c ** 2)
sympy.physics.hydrogen.E_nl(n,Z=1)
sympy.physics.hydrogen.E_nl_dirac(n,l,spin_up=True,Z=1,c=Float('137.035999037'))
sympy.physics.hydrogen.Psi_nlm(n,l,m,r,phi,theta,Z=1)
sympy.physics.hydrogen.R_nl(n,l,r,Z=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/wigner.py----------------------------------------
A:sympy.physics.wigner.prefid->Integer((-1) ** int(j_1 - j_2 - m_3))
A:sympy.physics.wigner.maxfact->max(imax + 1, aa + bb + cc + dd, aa + dd + ee + ff, bb + cc + ee + ff)
A:sympy.physics.wigner.ressqrt->sqrt((2 * l_1 + 1) * (2 * l_2 + 1) * (2 * l_3 + 1) * _Factlist[l_1 - m_1] * _Factlist[l_1 + m_1] * _Factlist[l_2 - m_2] * _Factlist[l_2 + m_2] * _Factlist[l_3 - m_3] * _Factlist[l_3 + m_3] / (4 * pi))
A:sympy.physics.wigner.imin->max(-l_3 + l_1 + m_2, -l_3 + l_2 - m_1, 0)
A:sympy.physics.wigner.imax->min(l_2 + m_2, l_1 - m_1, l_1 + l_2 - l_3)
A:sympy.physics.wigner.(bigL, remL)->divmod(l_1 + l_2 + l_3, 2)
A:sympy.physics.wigner.res->res.n(prec).n(prec)
A:sympy.physics.wigner.lmin->max(abs(l_2 - l_3), min(abs(m_2 + m_3), abs(m_2 - m_3)))
A:sympy.physics.wigner.U1->C(i, m_1)
A:sympy.physics.wigner.U2->C(j, m_2)
A:sympy.physics.wigner.U3->C(-i - j, m_3)
A:sympy.physics.wigner.ugnt->ugnt.n(prec).n(prec)
A:sympy.physics.wigner.j->sympify(j)
A:sympy.physics.wigner.p->sympify(p)
A:sympy.physics.wigner.l->sympify(l)
A:sympy.physics.wigner.m->sympify(m)
A:sympy.physics.wigner.theta->sympify(theta)
A:sympy.physics.wigner.phi->sympify(phi)
A:sympy.physics.wigner.k->Dummy('k')
A:sympy.physics.wigner.d->wigner_d_small(J, beta)
A:sympy.physics.wigner.sigmamax->max([-Mi - Mj, J - Mj])
A:sympy.physics.wigner.sigmamin->min([0, J - Mi])
A:sympy.physics.wigner.dij->sqrt(factorial(J + Mi) * factorial(J - Mi) / factorial(J + Mj) / factorial(J - Mj))
sympy.physics.wigner.Wigner3j(Function)
sympy.physics.wigner.Wigner3j.doit(self,**hints)
sympy.physics.wigner._big_delta_coeff(aa,bb,cc,prec=None)
sympy.physics.wigner._calc_factlist(nn)
sympy.physics.wigner.clebsch_gordan(j_1,j_2,j_3,m_1,m_2,m_3)
sympy.physics.wigner.dot_rot_grad_Ynm(j,p,l,m,theta,phi)
sympy.physics.wigner.gaunt(l_1,l_2,l_3,m_1,m_2,m_3,prec=None)
sympy.physics.wigner.racah(aa,bb,cc,dd,ee,ff,prec=None)
sympy.physics.wigner.real_gaunt(l_1,l_2,l_3,m_1,m_2,m_3,prec=None)
sympy.physics.wigner.wigner_3j(j_1,j_2,j_3,m_1,m_2,m_3)
sympy.physics.wigner.wigner_6j(j_1,j_2,j_3,j_4,j_5,j_6,prec=None)
sympy.physics.wigner.wigner_9j(j_1,j_2,j_3,j_4,j_5,j_6,j_7,j_8,j_9,prec=None)
sympy.physics.wigner.wigner_d(J,alpha,beta,gamma)
sympy.physics.wigner.wigner_d_small(J,beta)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/sho.py----------------------------------------
A:sympy.physics.sho.(n, l, nu, r)->map(S, [n, l, nu, r])
A:sympy.physics.sho.C->sqrt((2 * nu) ** (l + Rational(3, 2)) * 2 ** (n + l + 1) * factorial(n - 1) / (sqrt(pi) * factorial2(2 * n + 2 * l - 1)))
sympy.physics.sho.E_nl(n,l,hw)
sympy.physics.sho.R_nl(n,l,nu,r)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/test_physics_matrices.py----------------------------------------
A:sympy.physics.tests.test_physics_matrices.mat1->Matrix(((2, -1, -1), (-1, 2, -1), (-1, -1, 2)))
A:sympy.physics.tests.test_physics_matrices.mat2->Matrix(((0, 0, 0), (0, 1, 0), (0, 0, 1)))
A:sympy.physics.tests.test_physics_matrices.mat3->Matrix(((1, 0, 0), (0, 0, 0), (0, 0, 1)))
A:sympy.physics.tests.test_physics_matrices.mat4->Matrix(((1, 0, 0), (0, 1, 0), (0, 0, 0)))
A:sympy.physics.tests.test_physics_matrices.sigma1->msigma(1)
A:sympy.physics.tests.test_physics_matrices.sigma2->msigma(2)
A:sympy.physics.tests.test_physics_matrices.sigma3->msigma(3)
A:sympy.physics.tests.test_physics_matrices.gamma0->mgamma(0)
A:sympy.physics.tests.test_physics_matrices.gamma1->mgamma(1)
A:sympy.physics.tests.test_physics_matrices.gamma2->mgamma(2)
A:sympy.physics.tests.test_physics_matrices.gamma3->mgamma(3)
A:sympy.physics.tests.test_physics_matrices.gamma5->mgamma(5)
sympy.physics.tests.test_physics_matrices.test_Dirac()
sympy.physics.tests.test_physics_matrices.test_Pauli()
sympy.physics.tests.test_physics_matrices.test_mdft()
sympy.physics.tests.test_physics_matrices.test_parallel_axis_theorem()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/test_hydrogen.py----------------------------------------
A:sympy.physics.tests.test_hydrogen.(n, r, Z)->symbols('n r Z')
A:sympy.physics.tests.test_hydrogen.a->float(a)
A:sympy.physics.tests.test_hydrogen.b->float(b)
A:sympy.physics.tests.test_hydrogen.relative_error->abs((a - b) / a)
A:sympy.physics.tests.test_hydrogen.r->S('r')
A:sympy.physics.tests.test_hydrogen.phi->S('phi')
A:sympy.physics.tests.test_hydrogen.theta->S('theta')
sympy.physics.tests.test_hydrogen.feq(a,b,max_relative_error=1e-12,max_absolute_error=1e-12)
sympy.physics.tests.test_hydrogen.test_hydrogen_energies()
sympy.physics.tests.test_hydrogen.test_hydrogen_energies_relat()
sympy.physics.tests.test_hydrogen.test_norm()
sympy.physics.tests.test_hydrogen.test_psi_nlm()
sympy.physics.tests.test_hydrogen.test_wavefunction()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/test_qho_1d.py----------------------------------------
A:sympy.physics.tests.test_qho_1d.alpha->Symbol('alpha')
sympy.physics.tests.test_qho_1d.test_coherent_state(n=10)
sympy.physics.tests.test_qho_1d.test_energies(n=1)
sympy.physics.tests.test_qho_1d.test_norm(n=1)
sympy.physics.tests.test_qho_1d.test_orthogonality(n=1)
sympy.physics.tests.test_qho_1d.test_wavefunction()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/test_secondquant.py----------------------------------------
A:sympy.physics.tests.test_secondquant.(p, q, r, s)->symbols('p q r s', cls=Dummy)
A:sympy.physics.tests.test_secondquant.(f, g, h, i)->map(Function, 'fghi')
A:sympy.physics.tests.test_secondquant.(a, b, c, d)->symbols('a b c d', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(f, g)->map(Function, 'fg')
A:sympy.physics.tests.test_secondquant.result->simplify_index_permutations(expr, [P(a, b)])
A:sympy.physics.tests.test_secondquant.(i, j, n, m)->symbols('i,j,n,m')
A:sympy.physics.tests.test_secondquant.(i, j)->symbols('i j', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.o->B(0)
A:sympy.physics.tests.test_secondquant.s->BosonState([n, m])
A:sympy.physics.tests.test_secondquant.n->symbols('n')
A:sympy.physics.tests.test_secondquant.(n, m)->symbols('n,m', above_fermi=True)
A:sympy.physics.tests.test_secondquant.e->simplify(apply_operators(c * BKet([n, m])))
A:sympy.physics.tests.test_secondquant.(i, j, k, l)->symbols('i j k l', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.s1->BBra([n])
A:sympy.physics.tests.test_secondquant.s2->BKet([m])
A:sympy.physics.tests.test_secondquant.r->InnerProduct(s1, s2)
A:sympy.physics.tests.test_secondquant.b->FixedBosonicBasis(2, 6)
A:sympy.physics.tests.test_secondquant.m->matrix_rep(o, b)
A:sympy.physics.tests.test_secondquant.state->FixedBosonicBasis(2, 6).state(1)
A:sympy.physics.tests.test_secondquant.H->Sum(h_n, (n, 0, 5))
A:sympy.physics.tests.test_secondquant.c->Commutator(Fd(a) * F(i), Fd(b) * F(j))
A:sympy.physics.tests.test_secondquant.(X, Y, Z)->symbols('X,Y,Z', commutative=False)
A:sympy.physics.tests.test_secondquant.c1->Commutator(F(a), Fd(a))
A:sympy.physics.tests.test_secondquant.vacuum->FKet([], fermi_level=4)
A:sympy.physics.tests.test_secondquant.nstr->wicks(str)
A:sympy.physics.tests.test_secondquant.fasit->NO(KroneckerDelta(p, q) * KroneckerDelta(r, s) + KroneckerDelta(p, q) * AnnihilateFermion(r) * CreateFermion(s) + KroneckerDelta(r, s) * AnnihilateFermion(p) * CreateFermion(q) - KroneckerDelta(p, s) * AnnihilateFermion(r) * CreateFermion(q) - AnnihilateFermion(p) * AnnihilateFermion(r) * CreateFermion(q) * CreateFermion(s))
A:sympy.physics.tests.test_secondquant.expr->template.subs(subslist)
A:sympy.physics.tests.test_secondquant.no->NO(Fd(a) * Fd(i))
A:sympy.physics.tests.test_secondquant.l1->list(no.iter_q_creators())
A:sympy.physics.tests.test_secondquant.l2->list(no.iter_q_annihilators())
A:sympy.physics.tests.test_secondquant.(a, b)->symbols('a b', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(p, q)->symbols('p q', cls=Dummy)
A:sympy.physics.tests.test_secondquant.restr->evaluate_deltas(contraction(F(p), Fd(q)))
A:sympy.physics.tests.test_secondquant.(i, j, k)->symbols('i,j,k')
A:sympy.physics.tests.test_secondquant.tabij->AT('t', (a, b), (i, j))
A:sympy.physics.tests.test_secondquant.Fai->wicks(NO(Fd(i) * F(a)) * Fock, keep_only_fully_contracted=True, simplify_kronecker_deltas=True)
A:sympy.physics.tests.test_secondquant.Vabij->wicks(NO(Fd(i) * Fd(j) * F(b) * F(a)) * V, keep_only_fully_contracted=True, simplify_kronecker_deltas=True)
A:sympy.physics.tests.test_secondquant.f->Function('f')
A:sympy.physics.tests.test_secondquant.ii->symbols('i', below_fermi=True)
A:sympy.physics.tests.test_secondquant.aa->symbols('a', above_fermi=True)
A:sympy.physics.tests.test_secondquant.(k, l)->symbols(('k', 'l'), below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(c, d)->symbols(('c', 'd'), above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.v->symbols('v')
A:sympy.physics.tests.test_secondquant.t->Function('t')
A:sympy.physics.tests.test_secondquant.(ii, jj)->symbols('i j')
A:sympy.physics.tests.test_secondquant.(aa, bb)->symbols('a b')
A:sympy.physics.tests.test_secondquant.(p, q, r)->symbols('p,q,r')
A:sympy.physics.tests.test_secondquant.(i, j, k, l, m, n)->symbols('i j k l m n', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(a, b, c, d, e, f)->symbols('a b c d e f', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(p1, p2, p3, p4)->symbols('p1 p2 p3 p4', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(h1, h2, h3, h4)->symbols('h1 h2 h3 h4', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.permutator->variations([a, b, c, d], 4)
A:sympy.physics.tests.test_secondquant.base->template.subs(zip([p1, p2, p3, p4], next(permutator)))
A:sympy.physics.tests.test_secondquant.subslist->zip([p1, p2, p3, p4], permut)
A:sympy.physics.tests.test_secondquant.(k, l, m)->symbols('k l m', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.A->Function('A')
A:sympy.physics.tests.test_secondquant.B->Function('B')
A:sympy.physics.tests.test_secondquant.C->Function('C')
A:sympy.physics.tests.test_secondquant.(i, j, k, l, m)->symbols('i j k l m', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(a, b, c, d, e)->symbols('a b c d e', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(p5, p6, p7, p8)->symbols('p5 p6 p7 p8', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(h5, h6, h7, h8)->symbols('h5 h6 h7 h8', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.a->Symbol('0')
sympy.physics.tests.test_secondquant.att(*args)
sympy.physics.tests.test_secondquant.atv(*args)
sympy.physics.tests.test_secondquant.test_NO()
sympy.physics.tests.test_secondquant.test_PermutationOperator()
sympy.physics.tests.test_secondquant.test_Tensors()
sympy.physics.tests.test_secondquant.test_annihilate()
sympy.physics.tests.test_secondquant.test_annihilate_b()
sympy.physics.tests.test_secondquant.test_annihilate_f()
sympy.physics.tests.test_secondquant.test_basic_apply()
sympy.physics.tests.test_secondquant.test_basic_state()
sympy.physics.tests.test_secondquant.test_canonical_ordering_AntiSymmetricTensor()
sympy.physics.tests.test_secondquant.test_commutation()
sympy.physics.tests.test_secondquant.test_complex_apply()
sympy.physics.tests.test_secondquant.test_contraction()
sympy.physics.tests.test_secondquant.test_create()
sympy.physics.tests.test_secondquant.test_create_b()
sympy.physics.tests.test_secondquant.test_create_f()
sympy.physics.tests.test_secondquant.test_dagger()
sympy.physics.tests.test_secondquant.test_dummy_order_ambiguous()
sympy.physics.tests.test_secondquant.test_dummy_order_inner_outer_lines_VT1T1T1()
sympy.physics.tests.test_secondquant.test_dummy_order_inner_outer_lines_VT1T1T1T1()
sympy.physics.tests.test_secondquant.test_dummy_order_inner_outer_lines_VT1T1T1T1_AT()
sympy.physics.tests.test_secondquant.test_dummy_order_inner_outer_lines_VT1T1T1_AT()
sympy.physics.tests.test_secondquant.test_dummy_order_well_defined()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT1T1()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT1T1_AT()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2_AT()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2conjT2()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2conjT2_AT()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2conjT2_ambiguous_order()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2conjT2_ambiguous_order_AT()
sympy.physics.tests.test_secondquant.test_evaluate_deltas()
sympy.physics.tests.test_secondquant.test_fixed_bosonic_basis()
sympy.physics.tests.test_secondquant.test_fully_contracted()
sympy.physics.tests.test_secondquant.test_get_subNO()
sympy.physics.tests.test_secondquant.test_index_permutations_with_dummies()
sympy.physics.tests.test_secondquant.test_inner_product()
sympy.physics.tests.test_secondquant.test_internal_external_VT2T2()
sympy.physics.tests.test_secondquant.test_internal_external_VT2T2_AT()
sympy.physics.tests.test_secondquant.test_internal_external_pqrs()
sympy.physics.tests.test_secondquant.test_internal_external_pqrs_AT()
sympy.physics.tests.test_secondquant.test_issue_19661()
sympy.physics.tests.test_secondquant.test_matrix_elements()
sympy.physics.tests.test_secondquant.test_number_operator()
sympy.physics.tests.test_secondquant.test_operator()
sympy.physics.tests.test_secondquant.test_sho()
sympy.physics.tests.test_secondquant.test_sorting()
sympy.physics.tests.test_secondquant.test_substitute_dummies_NO_operator()
sympy.physics.tests.test_secondquant.test_substitute_dummies_SQ_operator()
sympy.physics.tests.test_secondquant.test_substitute_dummies_new_indices()
sympy.physics.tests.test_secondquant.test_substitute_dummies_substitution_order()
sympy.physics.tests.test_secondquant.test_substitute_dummies_without_dummies()
sympy.physics.tests.test_secondquant.test_symbolic_matrix_elements()
sympy.physics.tests.test_secondquant.test_wicks()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/test_pring.py----------------------------------------
sympy.physics.tests.test_pring.test_energy(n=1)
sympy.physics.tests.test_pring.test_norm(n=1)
sympy.physics.tests.test_pring.test_orthogonality(n=1)
sympy.physics.tests.test_pring.test_wavefunction()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/test_paulialgebra.py----------------------------------------
A:sympy.physics.tests.test_paulialgebra.sigma1->Pauli(1)
A:sympy.physics.tests.test_paulialgebra.sigma2->Pauli(2)
A:sympy.physics.tests.test_paulialgebra.sigma3->Pauli(3)
A:sympy.physics.tests.test_paulialgebra.tau1->symbols('tau1', commutative=False)
sympy.physics.tests.test_paulialgebra.test_Pauli()
sympy.physics.tests.test_paulialgebra.test_Pauli_should_work()
sympy.physics.tests.test_paulialgebra.test_evaluate_pauli_product()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/test_clebsch_gordan.py----------------------------------------
A:sympy.physics.tests.test_clebsch_gordan.l->Rational(3, 2)
A:sympy.physics.tests.test_clebsch_gordan.i->Rational(-1, 2)
A:sympy.physics.tests.test_clebsch_gordan.n->Rational(7, 2)
A:sympy.physics.tests.test_clebsch_gordan.p->Rational(5, 2)
A:sympy.physics.tests.test_clebsch_gordan.g->gaunt(*args)
A:sympy.physics.tests.test_clebsch_gordan.g0->gaunt_ref(*args)
A:sympy.physics.tests.test_clebsch_gordan.x->symbols('x', integer=True)
A:sympy.physics.tests.test_clebsch_gordan.(theta, phi)->symbols('theta phi')
A:sympy.physics.tests.test_clebsch_gordan.(alpha, beta, gamma)->symbols('alpha, beta, gamma', real=True)
A:sympy.physics.tests.test_clebsch_gordan.d->wigner_d_small(half, beta).subs({beta: pi / 2})
A:sympy.physics.tests.test_clebsch_gordan.D->wigner_d(half, alpha, beta, gamma)
sympy.physics.tests.test_clebsch_gordan.test_clebsch_gordan()
sympy.physics.tests.test_clebsch_gordan.test_clebsch_gordan_docs()
sympy.physics.tests.test_clebsch_gordan.test_dot_rota_grad_SH()
sympy.physics.tests.test_clebsch_gordan.test_gaunt()
sympy.physics.tests.test_clebsch_gordan.test_racah()
sympy.physics.tests.test_clebsch_gordan.test_realgaunt()
sympy.physics.tests.test_clebsch_gordan.test_wigner()
sympy.physics.tests.test_clebsch_gordan.test_wigner_d()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/tests/test_sho.py----------------------------------------
A:sympy.physics.tests.test_sho.(omega, r)->symbols('omega r')
A:sympy.physics.tests.test_sho.l->symbols('l', integer=True)
A:sympy.physics.tests.test_sho.u->Function('u')
A:sympy.physics.tests.test_sho.result->schreq.subs(u(r), r * R_nl(n, l, omega / 2, r))
A:sympy.physics.tests.test_sho.(n, l, hw)->symbols('n l hw')
sympy.physics.tests.test_sho.test_energy()
sympy.physics.tests.test_sho.test_sho_R_nl()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/medium.py----------------------------------------
A:sympy.physics.optics.medium.c->sympy.physics.units.speed_of_light.convert_to(meter / second)
A:sympy.physics.optics.medium._e0mksa->sympy.physics.units.e0.convert_to(ampere ** 2 * second ** 4 / (kilogram * meter ** 3))
A:sympy.physics.optics.medium._u0mksa->sympy.physics.units.u0.convert_to(meter * kilogram / (ampere ** 2 * second ** 2))
A:sympy.physics.optics.medium.name->Str(name)
A:sympy.physics.optics.medium.obj->super(Medium, cls).__new__(cls, name, permittivity, permeability)
sympy.physics.optics.Medium(cls,name,permittivity=None,permeability=None,n=None)
sympy.physics.optics.medium.Medium(cls,name,permittivity=None,permeability=None,n=None)
sympy.physics.optics.medium.Medium.name(self)
sympy.physics.optics.medium.Medium.refractive_index(self)
sympy.physics.optics.medium.Medium.speed(self)
sympy.physics.optics.medium.MediumN(cls,name,n)
sympy.physics.optics.medium.MediumN.n(self)
sympy.physics.optics.medium.MediumPP(cls,name,permittivity,permeability)
sympy.physics.optics.medium.MediumPP.intrinsic_impedance(self)
sympy.physics.optics.medium.MediumPP.n(self)
sympy.physics.optics.medium.MediumPP.permeability(self)
sympy.physics.optics.medium.MediumPP.permittivity(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/utils.py----------------------------------------
A:sympy.physics.optics.utils.n->sympify(medium)
A:sympy.physics.optics.utils.n1->refractive_index_of_medium(medium1)
A:sympy.physics.optics.utils.n2->refractive_index_of_medium(medium2)
A:sympy.physics.optics.utils.angle_of_incidence->Float(incident)
A:sympy.physics.optics.utils.critical_angle_->critical_angle(medium1, medium2)
A:sympy.physics.optics.utils._incident->Matrix(incident.direction_ratio)
A:sympy.physics.optics.utils._normal->Matrix(plane.normal_vector)
A:sympy.physics.optics.utils.intersection_pt->intersection(incident, normal)
A:sympy.physics.optics.utils.mag_incident->sqrt(sum([i ** 2 for i in _incident]))
A:sympy.physics.optics.utils.mag_normal->sqrt(sum([i ** 2 for i in _normal]))
A:sympy.physics.optics.utils.angle_of_refraction->asin(n1 * sin(angle_of_incidence) / n2)
A:sympy.physics.optics.utils.angle_of_total_internal_reflection_onset->critical_angle(n1, n2)
A:sympy.physics.optics.utils.R_s->cancel((cos(angle_of_incidence) - I * sqrt(sin(angle_of_incidence) ** 2 - n ** 2)) / (cos(angle_of_incidence) + I * sqrt(sin(angle_of_incidence) ** 2 - n ** 2)))
A:sympy.physics.optics.utils.R_p->cancel((n ** 2 * cos(angle_of_incidence) - I * sqrt(sin(angle_of_incidence) ** 2 - n ** 2)) / (n ** 2 * cos(angle_of_incidence) + I * sqrt(sin(angle_of_incidence) ** 2 - n ** 2)))
A:sympy.physics.optics.utils.refracted->Matrix(refracted.direction_ratio)
A:sympy.physics.optics.utils.mag_refracted->sqrt(sum([i ** 2 for i in refracted]))
A:sympy.physics.optics.utils.i->acos(_incident.dot(_normal))
A:sympy.physics.optics.utils.r->acos(refracted.dot(_normal))
A:sympy.physics.optics.utils.n_lens->sympify(n_lens)
A:sympy.physics.optics.utils.n_surr->sympify(n_surr)
A:sympy.physics.optics.utils.d->sympify(d)
A:sympy.physics.optics.utils.focal_length->sympify(focal_length)
A:sympy.physics.optics.utils.u->sympify(u)
A:sympy.physics.optics.utils.v->sympify(v)
A:sympy.physics.optics.utils._u->Symbol('u')
A:sympy.physics.optics.utils._v->Symbol('v')
A:sympy.physics.optics.utils._f->Symbol('f')
A:sympy.physics.optics.utils.f->sympify(f)
A:sympy.physics.optics.utils.N->sympify(N)
A:sympy.physics.optics.utils.c->sympify(c)
A:sympy.physics.optics.utils.si->sympify(si)
A:sympy.physics.optics.utils.so->sympify(so)
sympy.physics.optics.brewster_angle(medium1,medium2)
sympy.physics.optics.critical_angle(medium1,medium2)
sympy.physics.optics.deviation(incident,medium1,medium2,normal=None,plane=None)
sympy.physics.optics.fresnel_coefficients(angle_of_incidence,medium1,medium2)
sympy.physics.optics.hyperfocal_distance(f,N,c)
sympy.physics.optics.lens_formula(focal_length=None,u=None,v=None)
sympy.physics.optics.lens_makers_formula(n_lens,n_surr,r1,r2,d=0)
sympy.physics.optics.mirror_formula(focal_length=None,u=None,v=None)
sympy.physics.optics.refraction_angle(incident,medium1,medium2,normal=None,plane=None)
sympy.physics.optics.transverse_magnification(si,so)
sympy.physics.optics.utils.brewster_angle(medium1,medium2)
sympy.physics.optics.utils.critical_angle(medium1,medium2)
sympy.physics.optics.utils.deviation(incident,medium1,medium2,normal=None,plane=None)
sympy.physics.optics.utils.fresnel_coefficients(angle_of_incidence,medium1,medium2)
sympy.physics.optics.utils.hyperfocal_distance(f,N,c)
sympy.physics.optics.utils.lens_formula(focal_length=None,u=None,v=None)
sympy.physics.optics.utils.lens_makers_formula(n_lens,n_surr,r1,r2,d=0)
sympy.physics.optics.utils.mirror_formula(focal_length=None,u=None,v=None)
sympy.physics.optics.utils.refraction_angle(incident,medium1,medium2,normal=None,plane=None)
sympy.physics.optics.utils.refractive_index_of_medium(medium)
sympy.physics.optics.utils.transverse_magnification(si,so)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/gaussopt.py----------------------------------------
A:sympy.physics.optics.gaussopt.q->(temp[0] / temp[1]).expand(complex=True)
A:sympy.physics.optics.gaussopt.(n1, n2)->map(sympify, (n1, n2))
A:sympy.physics.optics.gaussopt.(R, n1, n2)->map(sympify, (R, n1, n2))
A:sympy.physics.optics.gaussopt.R->sympify(R)
A:sympy.physics.optics.gaussopt.f->sympify(kwargs['f'])
A:sympy.physics.optics.gaussopt.wavelen->sympify(wavelen)
A:sympy.physics.optics.gaussopt.z->waist2rayleigh(waist_in, wavelen)
A:sympy.physics.optics.gaussopt.n->sympify(n)
A:sympy.physics.optics.gaussopt.z_r->waist2rayleigh(sympify(w), wavelen, n)
A:sympy.physics.optics.gaussopt.(w, wavelen)->map(sympify, (w, wavelen))
A:sympy.physics.optics.gaussopt.(z_r, wavelen)->map(sympify, (z_r, wavelen))
A:sympy.physics.optics.gaussopt.(a, b)->map(sympify, (a, b))
A:sympy.physics.optics.gaussopt.(a, f)->map(sympify, (a, f))
A:sympy.physics.optics.gaussopt.(s_in, z_r_in, f)->map(sympify, (s_in, z_r_in, f))
A:sympy.physics.optics.gaussopt.(wavelen, waist_in, waist_out)->map(sympify, (wavelen, waist_in, waist_out))
sympy.physics.optics.BeamParameter(cls,wavelen,z,z_r=None,w=None,n=1)
sympy.physics.optics.CurvedMirror(cls,R)
sympy.physics.optics.CurvedRefraction(cls,R,n1,n2)
sympy.physics.optics.FlatMirror(cls)
sympy.physics.optics.FlatRefraction(cls,n1,n2)
sympy.physics.optics.FreeSpace(cls,d)
sympy.physics.optics.GeometricRay(cls,*args)
sympy.physics.optics.RayTransferMatrix(cls,*args)
sympy.physics.optics.ThinLens(cls,f)
sympy.physics.optics.conjugate_gauss_beams(wavelen,waist_in,waist_out,**kwargs)
sympy.physics.optics.gaussian_conj(s_in,z_r_in,f)
sympy.physics.optics.gaussopt.BeamParameter(cls,wavelen,z,z_r=None,w=None,n=1)
sympy.physics.optics.gaussopt.BeamParameter.divergence(self)
sympy.physics.optics.gaussopt.BeamParameter.gouy(self)
sympy.physics.optics.gaussopt.BeamParameter.n(self)
sympy.physics.optics.gaussopt.BeamParameter.q(self)
sympy.physics.optics.gaussopt.BeamParameter.radius(self)
sympy.physics.optics.gaussopt.BeamParameter.w(self)
sympy.physics.optics.gaussopt.BeamParameter.w_0(self)
sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit(self)
sympy.physics.optics.gaussopt.BeamParameter.wavelen(self)
sympy.physics.optics.gaussopt.BeamParameter.z(self)
sympy.physics.optics.gaussopt.BeamParameter.z_r(self)
sympy.physics.optics.gaussopt.CurvedMirror(cls,R)
sympy.physics.optics.gaussopt.CurvedRefraction(cls,R,n1,n2)
sympy.physics.optics.gaussopt.FlatMirror(cls)
sympy.physics.optics.gaussopt.FlatRefraction(cls,n1,n2)
sympy.physics.optics.gaussopt.FreeSpace(cls,d)
sympy.physics.optics.gaussopt.GeometricRay(cls,*args)
sympy.physics.optics.gaussopt.GeometricRay.angle(self)
sympy.physics.optics.gaussopt.GeometricRay.height(self)
sympy.physics.optics.gaussopt.RayTransferMatrix(cls,*args)
sympy.physics.optics.gaussopt.RayTransferMatrix.A(self)
sympy.physics.optics.gaussopt.RayTransferMatrix.B(self)
sympy.physics.optics.gaussopt.RayTransferMatrix.C(self)
sympy.physics.optics.gaussopt.RayTransferMatrix.D(self)
sympy.physics.optics.gaussopt.RayTransferMatrix.__mul__(self,other)
sympy.physics.optics.gaussopt.ThinLens(cls,f)
sympy.physics.optics.gaussopt.conjugate_gauss_beams(wavelen,waist_in,waist_out,**kwargs)
sympy.physics.optics.gaussopt.gaussian_conj(s_in,z_r_in,f)
sympy.physics.optics.gaussopt.geometric_conj_ab(a,b)
sympy.physics.optics.gaussopt.geometric_conj_af(a,f)
sympy.physics.optics.gaussopt.rayleigh2waist(z_r,wavelen)
sympy.physics.optics.gaussopt.waist2rayleigh(w,wavelen,n=1)
sympy.physics.optics.geometric_conj_ab(a,b)
sympy.physics.optics.geometric_conj_af(a,f)
sympy.physics.optics.rayleigh2waist(z_r,wavelen)
sympy.physics.optics.waist2rayleigh(w,wavelen,n=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/waves.py----------------------------------------
A:sympy.physics.optics.waves.c->sympy.physics.units.speed_of_light.convert_to(meter / second)
A:sympy.physics.optics.waves.time_period->_sympify(time_period)
A:sympy.physics.optics.waves.frequency->_sympify(frequency)
A:sympy.physics.optics.waves.amplitude->_sympify(amplitude)
A:sympy.physics.optics.waves.phase->_sympify(phase)
A:sympy.physics.optics.waves.n->sympify(n)
A:sympy.physics.optics.waves.obj->sympy.core.basic.Basic.__new__(cls, amplitude, frequency, phase, time_period, n)
A:sympy.physics.optics.waves.other->sympify(other)
A:sympy.physics.optics.waves.(mu, epsilon, x, t)->symbols('mu, epsilon, x, t')
A:sympy.physics.optics.waves.E->Function('E')
sympy.physics.optics.TWave(cls,amplitude,frequency=None,phase=S.Zero,time_period=None,n=Symbol('n'))
sympy.physics.optics.waves.TWave(cls,amplitude,frequency=None,phase=S.Zero,time_period=None,n=Symbol('n'))
sympy.physics.optics.waves.TWave.__add__(self,other)
sympy.physics.optics.waves.TWave.__mul__(self,other)
sympy.physics.optics.waves.TWave.__neg__(self)
sympy.physics.optics.waves.TWave.__radd__(self,other)
sympy.physics.optics.waves.TWave.__rmul__(self,other)
sympy.physics.optics.waves.TWave.__rsub__(self,other)
sympy.physics.optics.waves.TWave.__str__(self)
sympy.physics.optics.waves.TWave.__sub__(self,other)
sympy.physics.optics.waves.TWave._eval_rewrite_as_cos(self,*args,**kwargs)
sympy.physics.optics.waves.TWave._eval_rewrite_as_exp(self,*args,**kwargs)
sympy.physics.optics.waves.TWave._eval_rewrite_as_pde(self,*args,**kwargs)
sympy.physics.optics.waves.TWave._eval_rewrite_as_sin(self,*args,**kwargs)
sympy.physics.optics.waves.TWave.amplitude(self)
sympy.physics.optics.waves.TWave.angular_velocity(self)
sympy.physics.optics.waves.TWave.frequency(self)
sympy.physics.optics.waves.TWave.n(self)
sympy.physics.optics.waves.TWave.phase(self)
sympy.physics.optics.waves.TWave.speed(self)
sympy.physics.optics.waves.TWave.time_period(self)
sympy.physics.optics.waves.TWave.wavelength(self)
sympy.physics.optics.waves.TWave.wavenumber(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/polarization.py----------------------------------------
A:sympy.physics.optics.polarization.M->Matrix([[cos(theta) ** 2, sin(theta) * cos(theta)], [sin(theta) * cos(theta), sin(theta) ** 2]])
A:sympy.physics.optics.polarization.R->Matrix([[cos(theta) ** 2 + exp(I * delta) * sin(theta) ** 2, (1 - exp(I * delta)) * cos(theta) * sin(theta)], [(1 - exp(I * delta)) * cos(theta) * sin(theta), sin(theta) ** 2 + exp(I * delta) * cos(theta) ** 2]])
A:sympy.physics.optics.polarization.A->Matrix([[1, 0, 0, 1], [1, 0, 0, -1], [0, 1, 1, 0], [0, -I, I, 0]])
A:sympy.physics.optics.polarization.PBS->Matrix([[sqrt(Tp), 0, I * sqrt(Rp), 0], [0, sqrt(Ts), 0, -I * sqrt(Rs) * exp(I * phia)], [I * sqrt(Rp), 0, sqrt(Tp), 0], [0, -I * sqrt(Rs) * exp(I * phib), 0, sqrt(Ts)]])
sympy.physics.optics.half_wave_retarder(theta)
sympy.physics.optics.jones_2_stokes(e)
sympy.physics.optics.jones_vector(psi,chi)
sympy.physics.optics.linear_polarizer(theta=0)
sympy.physics.optics.mueller_matrix(J)
sympy.physics.optics.phase_retarder(theta=0,delta=0)
sympy.physics.optics.polarization.half_wave_retarder(theta)
sympy.physics.optics.polarization.jones_2_stokes(e)
sympy.physics.optics.polarization.jones_vector(psi,chi)
sympy.physics.optics.polarization.linear_polarizer(theta=0)
sympy.physics.optics.polarization.mueller_matrix(J)
sympy.physics.optics.polarization.phase_retarder(theta=0,delta=0)
sympy.physics.optics.polarization.polarizing_beam_splitter(Tp=1,Rs=1,Ts=0,Rp=0,phia=0,phib=0)
sympy.physics.optics.polarization.quarter_wave_retarder(theta)
sympy.physics.optics.polarization.reflective_filter(R)
sympy.physics.optics.polarization.stokes_vector(psi,chi,p=1,I=1)
sympy.physics.optics.polarization.transmissive_filter(T)
sympy.physics.optics.polarizing_beam_splitter(Tp=1,Rs=1,Ts=0,Rp=0,phia=0,phib=0)
sympy.physics.optics.quarter_wave_retarder(theta)
sympy.physics.optics.reflective_filter(R)
sympy.physics.optics.stokes_vector(psi,chi,p=1,I=1)
sympy.physics.optics.transmissive_filter(T)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/tests/test_polarization.py----------------------------------------
A:sympy.physics.optics.tests.test_polarization.H->jones_vector(0, 0)
A:sympy.physics.optics.tests.test_polarization.V->jones_vector(pi / 2, 0)
A:sympy.physics.optics.tests.test_polarization.D->jones_vector(pi / 4, 0)
A:sympy.physics.optics.tests.test_polarization.A->jones_vector(-pi / 4, 0)
A:sympy.physics.optics.tests.test_polarization.R->jones_vector(0, pi / 4)
A:sympy.physics.optics.tests.test_polarization.L->jones_vector(0, -pi / 4)
A:sympy.physics.optics.tests.test_polarization.delta->symbols('delta', real=True)
A:sympy.physics.optics.tests.test_polarization.res->Matrix([[1, 0, 0, 0], [0, 0, 0, -I], [0, 0, 1, 0], [0, -I, 0, 0]])
sympy.physics.optics.tests.test_polarization.test_polarization()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/tests/test_waves.py----------------------------------------
A:sympy.physics.optics.tests.test_waves.c->sympy.physics.units.speed_of_light.convert_to(m / s)
A:sympy.physics.optics.tests.test_waves.(A1, phi1, A2, phi2, f)->symbols('A1, phi1, A2, phi2, f')
A:sympy.physics.optics.tests.test_waves.n->Symbol('n')
A:sympy.physics.optics.tests.test_waves.t->Symbol('t')
A:sympy.physics.optics.tests.test_waves.x->Symbol('x')
A:sympy.physics.optics.tests.test_waves.E->Function('E')
A:sympy.physics.optics.tests.test_waves.w1->TWave(A1, f, phi1)
A:sympy.physics.optics.tests.test_waves.w2->TWave(A2, f, phi2)
A:sympy.physics.optics.tests.test_waves.w4->TWave(A1, None, 0, 1 / f)
sympy.physics.optics.tests.test_waves.test_twave()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/tests/test_utils.py----------------------------------------
A:sympy.physics.optics.tests.test_utils.(n1, n2)->symbols('n1, n2')
A:sympy.physics.optics.tests.test_utils.m1->Medium('m1', permittivity=e0, n=1)
A:sympy.physics.optics.tests.test_utils.m2->Medium('m2', permittivity=e0, n=1.33)
A:sympy.physics.optics.tests.test_utils.r1->Ray3D(Point3D(-1, -1, 1), Point3D(0, 0, 0))
A:sympy.physics.optics.tests.test_utils.i->Matrix([-1, -1, -1])
A:sympy.physics.optics.tests.test_utils.n->Matrix([0, 0, 1])
A:sympy.physics.optics.tests.test_utils.normal_ray->Ray3D(Point3D(0, 0, 0), Point3D(0, 0, 1))
A:sympy.physics.optics.tests.test_utils.P->Plane(Point3D(0, 0, 0), normal_vector=[0, 0, 1])
A:sympy.physics.optics.tests.test_utils.got->fresnel_coefficients(0.6, m2, m1)
A:sympy.physics.optics.tests.test_utils.(u, v, f)->symbols('u, v, f')
A:sympy.physics.optics.tests.test_utils.(f, N, c)->symbols('f, N, c')
A:sympy.physics.optics.tests.test_utils.(si, so)->symbols('si, so')
sympy.physics.optics.tests.test_utils.test_brewster_angle()
sympy.physics.optics.tests.test_utils.test_critical_angle()
sympy.physics.optics.tests.test_utils.test_deviation()
sympy.physics.optics.tests.test_utils.test_fresnel_coefficients()
sympy.physics.optics.tests.test_utils.test_hyperfocal_distance()
sympy.physics.optics.tests.test_utils.test_lens_formula()
sympy.physics.optics.tests.test_utils.test_lens_makers_formula()
sympy.physics.optics.tests.test_utils.test_lens_makers_formula_plano_lens()
sympy.physics.optics.tests.test_utils.test_lens_makers_formula_thick_lens()
sympy.physics.optics.tests.test_utils.test_mirror_formula()
sympy.physics.optics.tests.test_utils.test_refraction_angle()
sympy.physics.optics.tests.test_utils.test_transverse_magnification()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/tests/test_gaussopt.py----------------------------------------
A:sympy.physics.optics.tests.test_gaussopt.mat->RayTransferMatrix(1, 2, 3, 4)
A:sympy.physics.optics.tests.test_gaussopt.(d, f, h, n1, n2, R)->symbols('d f h n1 n2 R')
A:sympy.physics.optics.tests.test_gaussopt.lens->ThinLens(f)
A:sympy.physics.optics.tests.test_gaussopt.angle->symbols('angle')
A:sympy.physics.optics.tests.test_gaussopt.p->BeamParameter(5.3e-07, 1, w=0.001, n=2)
A:sympy.physics.optics.tests.test_gaussopt.fs->FreeSpace(10)
A:sympy.physics.optics.tests.test_gaussopt.(w, wavelen)->symbols('w wavelen')
A:sympy.physics.optics.tests.test_gaussopt.(z_r, wavelen)->symbols('z_r wavelen')
A:sympy.physics.optics.tests.test_gaussopt.(a, b, f)->symbols('a b f')
A:sympy.physics.optics.tests.test_gaussopt.(s_in, z_r_in, f)->symbols('s_in z_r_in f')
A:sympy.physics.optics.tests.test_gaussopt.(l, w_i, w_o, f)->symbols('l w_i w_o f')
A:sympy.physics.optics.tests.test_gaussopt.(z, l, w_0)->symbols('z l w_0', positive=True)
sympy.physics.optics.tests.test_gaussopt.streq(a,b)
sympy.physics.optics.tests.test_gaussopt.test_gauss_opt()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/tests/test_medium.py----------------------------------------
A:sympy.physics.optics.tests.test_medium.c->sympy.physics.units.speed_of_light.convert_to(m / s)
A:sympy.physics.optics.tests.test_medium.e0->sympy.physics.units.e0.convert_to(A ** 2 * s ** 4 / (kg * m ** 3)).convert_to(A ** 2 * s ** 4 / (kg * m ** 3))
A:sympy.physics.optics.tests.test_medium.u0->sympy.physics.units.u0.convert_to(m * kg / (A ** 2 * s ** 2)).convert_to(m * kg / (A ** 2 * s ** 2))
A:sympy.physics.optics.tests.test_medium.m1->Medium('m1')
A:sympy.physics.optics.tests.test_medium.m2->Medium('m2', epsilon, mu)
A:sympy.physics.optics.tests.test_medium.m3->Medium('m3', 9.0 * 10 ** (-12) * s ** 4 * A ** 2 / (m ** 3 * kg), 1.45 * 10 ** (-6) * kg * m / (A ** 2 * s ** 2))
A:sympy.physics.optics.tests.test_medium.m4->Medium('m4', 7.0 * 10 ** (-12) * s ** 4 * A ** 2 / (m ** 3 * kg), 1.15 * 10 ** (-6) * kg * m / (A ** 2 * s ** 2))
A:sympy.physics.optics.tests.test_medium.m5->Medium('m5', permittivity=710 * 10 ** (-12) * s ** 4 * A ** 2 / (m ** 3 * kg), n=1.33)
A:sympy.physics.optics.tests.test_medium.m6->Medium('m6', None, mu, n)
sympy.physics.optics.tests.test_medium.test_medium()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/optics/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/util.py----------------------------------------
A:sympy.physics.units.util.dimension_system->sympy.physics.units.UnitSystem.get_unit_system(unit_system).get_dimension_system()
A:sympy.physics.units.util.expr_dim->Dimension(unit_system.get_dimensional_expr(expr))
A:sympy.physics.units.util.dim_dependencies->sympy.physics.units.UnitSystem.get_unit_system(unit_system).get_dimension_system().get_dimensional_dependencies(expr_dim, mark_dimensionless=True)
A:sympy.physics.units.util.canon_expr_units->set(dim_dependencies)
A:sympy.physics.units.util.seen->set()
A:sympy.physics.units.util.camat->Matrix([[dimension_system.get_dimensional_dependencies(i, mark_dimensionless=True).get(j, 0) for i in target_dims] for j in canon_dim_units])
A:sympy.physics.units.util.exprmat->Matrix([dim_dependencies.get(k, 0) for k in canon_dim_units])
A:sympy.physics.units.util.res_exponents->Matrix([[dimension_system.get_dimensional_dependencies(i, mark_dimensionless=True).get(j, 0) for i in target_dims] for j in canon_dim_units]).solve(exprmat)
A:sympy.physics.units.util.unit_system->sympy.physics.units.UnitSystem.get_unit_system(unit_system)
A:sympy.physics.units.util.expr->convert_to(expr, target_unit, unit_system)
A:sympy.physics.units.util.target_units->sympify(target_units)
A:sympy.physics.units.util.depmat->_get_conversion_matrix_for_expr(expr, target_units, unit_system)
A:sympy.physics.units.util.expr_scale_factor->get_total_scale_factor(expr)
A:sympy.physics.units.util.p->convert_to(expr, target_unit, unit_system).atoms(Prefix)
A:sympy.physics.units.util.d->sift(expr.atoms(Quantity), lambda i: i.dimension)
A:sympy.physics.units.util.v->list(ordered(d[k]))
A:sympy.physics.units.util.dim_expr->sympy.physics.units.UnitSystem.get_unit_system(unit_system).get_dimensional_expr(expr)
A:sympy.physics.units.util.dim_deps->sympy.physics.units.UnitSystem.get_unit_system(unit_system).get_dimension_system().get_dimensional_dependencies(dim_expr, mark_dimensionless=True)
A:sympy.physics.units.util.target_unit->sympy.physics.units.UnitSystem.get_unit_system(unit_system).derived_units.get(target_dimension)
A:sympy.physics.units.util.adds->convert_to(expr, target_unit, unit_system).atoms(Add)
A:sympy.physics.units.util.deset->set()
A:sympy.physics.units.util.i->Dimension(unit_system.get_dimensional_expr(i))
A:sympy.physics.units.util.dimdict->addDict(dimdict, DIM_OF(i))
A:sympy.physics.units.util.reps[m]->m.func(*[i for i in m.args if not i.is_number])
sympy.physics.units.convert_to(expr,target_units,unit_system='SI')
sympy.physics.units.util._get_conversion_matrix_for_expr(expr,target_units,unit_system)
sympy.physics.units.util.check_dimensions(expr,unit_system='SI')
sympy.physics.units.util.convert_to(expr,target_units,unit_system='SI')
sympy.physics.units.util.quantity_simplify(expr,across_dimensions:bool=False,unit_system=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/quantities.py----------------------------------------
A:sympy.physics.units.quantities.name->Symbol(name)
A:sympy.physics.units.quantities.abbrev->Symbol(abbrev)
A:sympy.physics.units.quantities.obj->sympy.core.expr.AtomicExpr.__new__(cls, name, abbrev)
A:sympy.physics.units.quantities.scale_factor->sympify(scale_factor)
A:sympy.physics.units.quantities.unit_system->sympy.physics.units.UnitSystem.get_default_unit_system()
sympy.physics.units.Quantity(cls,name,abbrev=None,latex_repr=None,pretty_unicode_repr=None,pretty_ascii_repr=None,mathml_presentation_repr=None,is_prefixed=False,**assumptions)
sympy.physics.units.quantities.PhysicalConstant(Quantity)
sympy.physics.units.quantities.Quantity(cls,name,abbrev=None,latex_repr=None,pretty_unicode_repr=None,pretty_ascii_repr=None,mathml_presentation_repr=None,is_prefixed=False,**assumptions)
sympy.physics.units.quantities.Quantity._eval_Abs(self)
sympy.physics.units.quantities.Quantity._eval_is_constant(self)
sympy.physics.units.quantities.Quantity._eval_is_positive(self)
sympy.physics.units.quantities.Quantity._eval_subs(self,old,new)
sympy.physics.units.quantities.Quantity._latex(self,printer)
sympy.physics.units.quantities.Quantity.abbrev(self)
sympy.physics.units.quantities.Quantity.convert_to(self,other,unit_system='SI')
sympy.physics.units.quantities.Quantity.dimension(self)
sympy.physics.units.quantities.Quantity.free_symbols(self)
sympy.physics.units.quantities.Quantity.is_prefixed(self)
sympy.physics.units.quantities.Quantity.name(self)
sympy.physics.units.quantities.Quantity.scale_factor(self)
sympy.physics.units.quantities.Quantity.set_global_dimension(self,dimension)
sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor(self,scale_factor,reference_quantity)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/dimensions.py----------------------------------------
A:sympy.physics.units.dimensions.dimension->Dimension(dimension)
A:sympy.physics.units.dimensions.scale_factor->scale_factor.replace(lambda x: isinstance(x, Quantity), lambda x: self.get_quantity_scale_factor(x)).replace(lambda x: isinstance(x, Quantity), lambda x: self.get_quantity_scale_factor(x))
A:sympy.physics.units.dimensions.name->sympify(name)
A:sympy.physics.units.dimensions.symbol->Symbol(symbol)
A:sympy.physics.units.dimensions.obj->sympy.core.basic.Basic.__new__(cls, base_dims, derived_dims, dimensional_dependencies)
A:sympy.physics.units.dimensions.other->sympify(other)
A:sympy.physics.units.dimensions.dimensional_dependencies->Dict({i: Dict(j) for (i, j) in dimensional_dependencies.items()})
A:sympy.physics.units.dimensions.dim->parse_dim(dim)
A:sympy.physics.units.dimensions.dimensional_dependencies[dim]->Dict({dim: 1})
A:sympy.physics.units.dimensions.base_dims->Tuple(*base_dims)
A:sympy.physics.units.dimensions.derived_dims->Tuple(*derived_dims)
A:sympy.physics.units.dimensions.ret->collections.defaultdict(int)
A:sympy.physics.units.dimensions.dim_base->get_for_name(dimension.name.base)
A:sympy.physics.units.dimensions.dim_exp->get_for_name(dimension.name.exp)
A:sympy.physics.units.dimensions.result->Dimension(dimension).name.func(*args)
A:sympy.physics.units.dimensions.dimdep->self._get_dimensional_dependencies_for_name(name)
A:sympy.physics.units.dimensions.deps1->self.get_dimensional_dependencies(dim1)
A:sympy.physics.units.dimensions.deps2->self.get_dimensional_dependencies(dim2)
A:sympy.physics.units.dimensions.deps->dict(self.dimensional_dependencies)
A:sympy.physics.units.dimensions.new_dim_sys->DimensionSystem(tuple(self.base_dims) + tuple(new_base_dims), tuple(self.derived_dims) + tuple(new_derived_dims), deps)
A:sympy.physics.units.dimensions.dimset->set()
A:sympy.physics.units.dimensions.matrix->reduce(lambda x, y: x.row_join(y), [self.dim_can_vector(d) for d in self.base_dims])
A:sympy.physics.units.dimensions.dims->self.dim_vector(dim)
sympy.physics.units.Dimension(cls,name,symbol=None)
sympy.physics.units.DimensionSystem(cls,base_dims,derived_dims=(),dimensional_dependencies={})
sympy.physics.units.dimensions.Dimension(cls,name,symbol=None)
sympy.physics.units.dimensions.Dimension.__add__(self,other)
sympy.physics.units.dimensions.Dimension.__mul__(self,other)
sympy.physics.units.dimensions.Dimension.__neg__(self)
sympy.physics.units.dimensions.Dimension.__pow__(self,other)
sympy.physics.units.dimensions.Dimension.__radd__(self,other)
sympy.physics.units.dimensions.Dimension.__repr__(self)
sympy.physics.units.dimensions.Dimension.__rmul__(self,other)
sympy.physics.units.dimensions.Dimension.__rsub__(self,other)
sympy.physics.units.dimensions.Dimension.__rtruediv__(self,other)
sympy.physics.units.dimensions.Dimension.__str__(self)
sympy.physics.units.dimensions.Dimension.__sub__(self,other)
sympy.physics.units.dimensions.Dimension.__truediv__(self,other)
sympy.physics.units.dimensions.Dimension._eval_power(self,other)
sympy.physics.units.dimensions.Dimension._from_dimensional_dependencies(cls,dependencies)
sympy.physics.units.dimensions.Dimension.has_integer_powers(self,dim_sys)
sympy.physics.units.dimensions.Dimension.name(self)
sympy.physics.units.dimensions.Dimension.symbol(self)
sympy.physics.units.dimensions.DimensionSystem(cls,base_dims,derived_dims=(),dimensional_dependencies={})
sympy.physics.units.dimensions.DimensionSystem._get_dimensional_dependencies_for_name(self,dimension)
sympy.physics.units.dimensions.DimensionSystem.base_dims(self)
sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix(self)
sympy.physics.units.dimensions.DimensionSystem.derived_dims(self)
sympy.physics.units.dimensions.DimensionSystem.dim(self)
sympy.physics.units.dimensions.DimensionSystem.dim_can_vector(self,dim)
sympy.physics.units.dimensions.DimensionSystem.dim_vector(self,dim)
sympy.physics.units.dimensions.DimensionSystem.dimensional_dependencies(self)
sympy.physics.units.dimensions.DimensionSystem.equivalent_dims(self,dim1,dim2)
sympy.physics.units.dimensions.DimensionSystem.extend(self,new_base_dims,new_derived_dims=(),new_dim_deps=None)
sympy.physics.units.dimensions.DimensionSystem.get_dimensional_dependencies(self,name,mark_dimensionless=False)
sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix(self)
sympy.physics.units.dimensions.DimensionSystem.is_consistent(self)
sympy.physics.units.dimensions.DimensionSystem.is_dimensionless(self,dimension)
sympy.physics.units.dimensions.DimensionSystem.list_can_dims(self)
sympy.physics.units.dimensions.DimensionSystem.print_dim_base(self,dim)
sympy.physics.units.dimensions._QuantityMapper(self,*args,**kwargs)
sympy.physics.units.dimensions._QuantityMapper.get_quantity_dimension(self,unit)
sympy.physics.units.dimensions._QuantityMapper.get_quantity_scale_factor(self,unit)
sympy.physics.units.dimensions._QuantityMapper.set_quantity_dimension(self,quantity,dimension)
sympy.physics.units.dimensions._QuantityMapper.set_quantity_scale_factor(self,quantity,scale_factor)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/__init__.py----------------------------------------
A:sympy.physics.units.__init__.unit_system->unitsystem.UnitSystem.get_unit_system(unit_system)
A:sympy.physics.units.__init__.dim->getattr(u, quantity)
A:sympy.physics.units.__init__.other->getattr(u, i)
sympy.physics.units.__init__.find_unit(quantity,unit_system='SI')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/unitsystem.py----------------------------------------
A:sympy.physics.units.unitsystem.self._units->tuple(set(base_units) | set(units))
A:sympy.physics.units.unitsystem.self._base_units->tuple(base_units)
A:sympy.physics.units.unitsystem.dim->self.get_dimensional_expr(expr.expr)
A:sympy.physics.units.unitsystem.dimension->Dimension(1)
A:sympy.physics.units.unitsystem.(arg_factor, arg_dim)->self._collect_factor_and_dimension(arg)
A:sympy.physics.units.unitsystem.(factor, dim)->self._collect_factor_and_dimension(expr.args[0])
A:sympy.physics.units.unitsystem.(exp_factor, exp_dim)->self._collect_factor_and_dimension(expr.exp)
A:sympy.physics.units.unitsystem.(addend_factor, addend_dim)->self._collect_factor_and_dimension(addend)
A:sympy.physics.units.unitsystem.(ifactor, idim)->self._collect_factor_and_dimension(independent)
sympy.physics.units.UnitSystem(self,base_units,units=(),name='',descr='',dimension_system=None,derived_units:tDict[Dimension,Quantity]={})
sympy.physics.units.unitsystem.UnitSystem(self,base_units,units=(),name='',descr='',dimension_system=None,derived_units:tDict[Dimension,Quantity]={})
sympy.physics.units.unitsystem.UnitSystem.__repr__(self)
sympy.physics.units.unitsystem.UnitSystem.__str__(self)
sympy.physics.units.unitsystem.UnitSystem._collect_factor_and_dimension(self,expr)
sympy.physics.units.unitsystem.UnitSystem.derived_units(self)->tDict[Dimension, Quantity]
sympy.physics.units.unitsystem.UnitSystem.dim(self)
sympy.physics.units.unitsystem.UnitSystem.extend(self,base,units=(),name='',description='',dimension_system=None,derived_units:tDict[Dimension,Quantity]={})
sympy.physics.units.unitsystem.UnitSystem.get_default_unit_system()
sympy.physics.units.unitsystem.UnitSystem.get_dimension_system(self)
sympy.physics.units.unitsystem.UnitSystem.get_dimensional_expr(self,expr)
sympy.physics.units.unitsystem.UnitSystem.get_quantity_dimension(self,unit)
sympy.physics.units.unitsystem.UnitSystem.get_quantity_scale_factor(self,unit)
sympy.physics.units.unitsystem.UnitSystem.get_unit_system(unit_system)
sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed(self)->tSet[Quantity]
sympy.physics.units.unitsystem.UnitSystem.is_consistent(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/prefixes.py----------------------------------------
A:sympy.physics.units.prefixes.name->sympify(name)
A:sympy.physics.units.prefixes.abbrev->sympify(abbrev)
A:sympy.physics.units.prefixes.exponent->sympify(exponent)
A:sympy.physics.units.prefixes.base->sympify(base)
A:sympy.physics.units.prefixes.obj->sympy.core.expr.Expr.__new__(cls, name, abbrev, exponent, base)
A:sympy.physics.units.prefixes.quantity->Quantity('%s%s' % (prefix.name, unit.name), abbrev='%s%s' % (prefix.abbrev, unit.abbrev), is_prefixed=True)
A:sympy.physics.units.prefixes.yotta->Prefix('yotta', 'Y', 24)
A:sympy.physics.units.prefixes.zetta->Prefix('zetta', 'Z', 21)
A:sympy.physics.units.prefixes.exa->Prefix('exa', 'E', 18)
A:sympy.physics.units.prefixes.peta->Prefix('peta', 'P', 15)
A:sympy.physics.units.prefixes.tera->Prefix('tera', 'T', 12)
A:sympy.physics.units.prefixes.giga->Prefix('giga', 'G', 9)
A:sympy.physics.units.prefixes.mega->Prefix('mega', 'M', 6)
A:sympy.physics.units.prefixes.kilo->Prefix('kilo', 'k', 3)
A:sympy.physics.units.prefixes.hecto->Prefix('hecto', 'h', 2)
A:sympy.physics.units.prefixes.deca->Prefix('deca', 'da', 1)
A:sympy.physics.units.prefixes.deci->Prefix('deci', 'd', -1)
A:sympy.physics.units.prefixes.centi->Prefix('centi', 'c', -2)
A:sympy.physics.units.prefixes.milli->Prefix('milli', 'm', -3)
A:sympy.physics.units.prefixes.micro->Prefix('micro', 'mu', -6, latex_repr='\\mu')
A:sympy.physics.units.prefixes.nano->Prefix('nano', 'n', -9)
A:sympy.physics.units.prefixes.pico->Prefix('pico', 'p', -12)
A:sympy.physics.units.prefixes.femto->Prefix('femto', 'f', -15)
A:sympy.physics.units.prefixes.atto->Prefix('atto', 'a', -18)
A:sympy.physics.units.prefixes.zepto->Prefix('zepto', 'z', -21)
A:sympy.physics.units.prefixes.yocto->Prefix('yocto', 'y', -24)
A:sympy.physics.units.prefixes.kibi->Prefix('kibi', 'Y', 10, 2)
A:sympy.physics.units.prefixes.mebi->Prefix('mebi', 'Y', 20, 2)
A:sympy.physics.units.prefixes.gibi->Prefix('gibi', 'Y', 30, 2)
A:sympy.physics.units.prefixes.tebi->Prefix('tebi', 'Y', 40, 2)
A:sympy.physics.units.prefixes.pebi->Prefix('pebi', 'Y', 50, 2)
A:sympy.physics.units.prefixes.exbi->Prefix('exbi', 'Y', 60, 2)
sympy.physics.units.prefixes.Prefix(cls,name,abbrev,exponent,base=sympify(10),latex_repr=None)
sympy.physics.units.prefixes.Prefix.__mul__(self,other)
sympy.physics.units.prefixes.Prefix.__repr__(self)
sympy.physics.units.prefixes.Prefix.__rtruediv__(self,other)
sympy.physics.units.prefixes.Prefix.__str__(self)
sympy.physics.units.prefixes.Prefix.__truediv__(self,other)
sympy.physics.units.prefixes.Prefix._latex(self,printer)
sympy.physics.units.prefixes.Prefix.abbrev(self)
sympy.physics.units.prefixes.Prefix.base(self)
sympy.physics.units.prefixes.Prefix.name(self)
sympy.physics.units.prefixes.Prefix.scale_factor(self)
sympy.physics.units.prefixes.prefix_unit(unit,prefixes)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/definitions/dimension_definitions.py----------------------------------------
A:sympy.physics.units.definitions.dimension_definitions.angle->Dimension(name='angle')
A:sympy.physics.units.definitions.dimension_definitions.length->Dimension(name='length', symbol='L')
A:sympy.physics.units.definitions.dimension_definitions.mass->Dimension(name='mass', symbol='M')
A:sympy.physics.units.definitions.dimension_definitions.time->Dimension(name='time', symbol='T')
A:sympy.physics.units.definitions.dimension_definitions.current->Dimension(name='current', symbol='I')
A:sympy.physics.units.definitions.dimension_definitions.temperature->Dimension('temperature', 'T')
A:sympy.physics.units.definitions.dimension_definitions.amount_of_substance->Dimension('amount_of_substance')
A:sympy.physics.units.definitions.dimension_definitions.luminous_intensity->Dimension('luminous_intensity')
A:sympy.physics.units.definitions.dimension_definitions.velocity->Dimension(name='velocity')
A:sympy.physics.units.definitions.dimension_definitions.acceleration->Dimension(name='acceleration')
A:sympy.physics.units.definitions.dimension_definitions.momentum->Dimension(name='momentum')
A:sympy.physics.units.definitions.dimension_definitions.force->Dimension(name='force', symbol='F')
A:sympy.physics.units.definitions.dimension_definitions.energy->Dimension(name='energy', symbol='E')
A:sympy.physics.units.definitions.dimension_definitions.power->Dimension(name='power')
A:sympy.physics.units.definitions.dimension_definitions.pressure->Dimension(name='pressure')
A:sympy.physics.units.definitions.dimension_definitions.frequency->Dimension(name='frequency', symbol='f')
A:sympy.physics.units.definitions.dimension_definitions.action->Dimension(name='action', symbol='A')
A:sympy.physics.units.definitions.dimension_definitions.area->Dimension('area')
A:sympy.physics.units.definitions.dimension_definitions.volume->Dimension('volume')
A:sympy.physics.units.definitions.dimension_definitions.voltage->Dimension(name='voltage', symbol='U')
A:sympy.physics.units.definitions.dimension_definitions.impedance->Dimension(name='impedance', symbol='Z')
A:sympy.physics.units.definitions.dimension_definitions.conductance->Dimension(name='conductance', symbol='G')
A:sympy.physics.units.definitions.dimension_definitions.capacitance->Dimension(name='capacitance')
A:sympy.physics.units.definitions.dimension_definitions.inductance->Dimension(name='inductance')
A:sympy.physics.units.definitions.dimension_definitions.charge->Dimension(name='charge', symbol='Q')
A:sympy.physics.units.definitions.dimension_definitions.magnetic_density->Dimension(name='magnetic_density', symbol='B')
A:sympy.physics.units.definitions.dimension_definitions.magnetic_flux->Dimension(name='magnetic_flux')
A:sympy.physics.units.definitions.dimension_definitions.information->Dimension(name='information')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/definitions/unit_definitions.py----------------------------------------
A:sympy.physics.units.definitions.unit_definitions.percentpercents->Quantity('percent', latex_repr='\\%')
A:sympy.physics.units.definitions.unit_definitions.permille->Quantity('permille')
A:sympy.physics.units.definitions.unit_definitions.radradianradians->Quantity('radian', abbrev='rad')
A:sympy.physics.units.definitions.unit_definitions.degdegreedegrees->Quantity('degree', abbrev='deg', latex_repr='^\\circ')
A:sympy.physics.units.definitions.unit_definitions.srsteradiansteradians->Quantity('steradian', abbrev='sr')
A:sympy.physics.units.definitions.unit_definitions.milangular_milangular_mils->Quantity('angular_mil', abbrev='mil')
A:sympy.physics.units.definitions.unit_definitions.mmetermeters->Quantity('meter', abbrev='m')
A:sympy.physics.units.definitions.unit_definitions.ggramgrams->Quantity('gram', abbrev='g')
A:sympy.physics.units.definitions.unit_definitions.kgkilogramkilograms->Quantity('kilogram', abbrev='kg')
A:sympy.physics.units.definitions.unit_definitions.ssecondseconds->Quantity('second', abbrev='s')
A:sympy.physics.units.definitions.unit_definitions.Aampereamperes->Quantity('ampere', abbrev='A')
A:sympy.physics.units.definitions.unit_definitions.Kkelvinkelvins->Quantity('kelvin', abbrev='K')
A:sympy.physics.units.definitions.unit_definitions.molmolemoles->Quantity('mole', abbrev='mol')
A:sympy.physics.units.definitions.unit_definitions.cdcandelacandelas->Quantity('candela', abbrev='cd')
A:sympy.physics.units.definitions.unit_definitions.newtonnewtonsN->Quantity('newton', abbrev='N')
A:sympy.physics.units.definitions.unit_definitions.joulejoulesJ->Quantity('joule', abbrev='J')
A:sympy.physics.units.definitions.unit_definitions.wattwattsW->Quantity('watt', abbrev='W')
A:sympy.physics.units.definitions.unit_definitions.pascalpascalsPapa->Quantity('pascal', abbrev='Pa')
A:sympy.physics.units.definitions.unit_definitions.hertzhzHz->Quantity('hertz', abbrev='Hz')
A:sympy.physics.units.definitions.unit_definitions.dyne->Quantity('dyne')
A:sympy.physics.units.definitions.unit_definitions.erg->Quantity('erg')
A:sympy.physics.units.definitions.unit_definitions.coulombcoulombsC->Quantity('coulomb', abbrev='C')
A:sympy.physics.units.definitions.unit_definitions.voltvoltsvV->Quantity('volt', abbrev='V')
A:sympy.physics.units.definitions.unit_definitions.ohmohms->Quantity('ohm', abbrev='ohm', latex_repr='\\Omega')
A:sympy.physics.units.definitions.unit_definitions.siemensSmhomhos->Quantity('siemens', abbrev='S')
A:sympy.physics.units.definitions.unit_definitions.faradfaradsF->Quantity('farad', abbrev='F')
A:sympy.physics.units.definitions.unit_definitions.henryhenrysH->Quantity('henry', abbrev='H')
A:sympy.physics.units.definitions.unit_definitions.teslateslasT->Quantity('tesla', abbrev='T')
A:sympy.physics.units.definitions.unit_definitions.weberwebersWbwb->Quantity('weber', abbrev='Wb')
A:sympy.physics.units.definitions.unit_definitions.statampere->Quantity('statampere')
A:sympy.physics.units.definitions.unit_definitions.statcoulombstatCfranklin->Quantity('statcoulomb', abbrev='statC')
A:sympy.physics.units.definitions.unit_definitions.statvolt->Quantity('statvolt')
A:sympy.physics.units.definitions.unit_definitions.gauss->Quantity('gauss')
A:sympy.physics.units.definitions.unit_definitions.maxwell->Quantity('maxwell')
A:sympy.physics.units.definitions.unit_definitions.debye->Quantity('debye')
A:sympy.physics.units.definitions.unit_definitions.oersted->Quantity('oersted')
A:sympy.physics.units.definitions.unit_definitions.optical_powerdioptrediopterD->Quantity('dioptre')
A:sympy.physics.units.definitions.unit_definitions.luxlx->Quantity('lux', abbrev='lx')
A:sympy.physics.units.definitions.unit_definitions.katalkat->Quantity('katal', abbrev='kat')
A:sympy.physics.units.definitions.unit_definitions.grayGy->Quantity('gray')
A:sympy.physics.units.definitions.unit_definitions.becquerelBq->Quantity('becquerel', abbrev='Bq')
A:sympy.physics.units.definitions.unit_definitions.mgmilligrammilligrams->Quantity('milligram', abbrev='mg')
A:sympy.physics.units.definitions.unit_definitions.ugmicrogrammicrograms->Quantity('microgram', abbrev='ug', latex_repr='\\mu\\text{g}')
A:sympy.physics.units.definitions.unit_definitions.Dadaltonamuamusatomic_mass_unitatomic_mass_constant->PhysicalConstant('atomic_mass_constant')
A:sympy.physics.units.definitions.unit_definitions.tmetric_tontonne->Quantity('tonne', abbrev='t')
A:sympy.physics.units.definitions.unit_definitions.meelectron_rest_mass->Quantity('electron_rest_mass', abbrev='me')
A:sympy.physics.units.definitions.unit_definitions.kmkilometerkilometers->Quantity('kilometer', abbrev='km')
A:sympy.physics.units.definitions.unit_definitions.dmdecimeterdecimeters->Quantity('decimeter', abbrev='dm')
A:sympy.physics.units.definitions.unit_definitions.cmcentimetercentimeters->Quantity('centimeter', abbrev='cm')
A:sympy.physics.units.definitions.unit_definitions.mmmillimetermillimeters->Quantity('millimeter', abbrev='mm')
A:sympy.physics.units.definitions.unit_definitions.ummicrometermicrometersmicronmicrons->Quantity('micrometer', abbrev='um', latex_repr='\\mu\\text{m}')
A:sympy.physics.units.definitions.unit_definitions.nmnanometernanometers->Quantity('nanometer', abbrev='nm')
A:sympy.physics.units.definitions.unit_definitions.pmpicometerpicometers->Quantity('picometer', abbrev='pm')
A:sympy.physics.units.definitions.unit_definitions.ftfootfeet->Quantity('foot', abbrev='ft')
A:sympy.physics.units.definitions.unit_definitions.inchinches->Quantity('inch')
A:sympy.physics.units.definitions.unit_definitions.ydyardyards->Quantity('yard', abbrev='yd')
A:sympy.physics.units.definitions.unit_definitions.mimilemiles->Quantity('mile')
A:sympy.physics.units.definitions.unit_definitions.nminautical_milenautical_miles->Quantity('nautical_mile')
A:sympy.physics.units.definitions.unit_definitions.angstromangstroms->Quantity('angstrom', latex_repr='\\r{A}')
A:sympy.physics.units.definitions.unit_definitions.hahectare->Quantity('hectare', abbrev='ha')
A:sympy.physics.units.definitions.unit_definitions.lLliterliters->Quantity('liter')
A:sympy.physics.units.definitions.unit_definitions.dldLdeciliterdeciliters->Quantity('deciliter')
A:sympy.physics.units.definitions.unit_definitions.clcLcentilitercentiliters->Quantity('centiliter')
A:sympy.physics.units.definitions.unit_definitions.mlmLmillilitermilliliters->Quantity('milliliter')
A:sympy.physics.units.definitions.unit_definitions.msmillisecondmilliseconds->Quantity('millisecond', abbrev='ms')
A:sympy.physics.units.definitions.unit_definitions.usmicrosecondmicroseconds->Quantity('microsecond', abbrev='us', latex_repr='\\mu\\text{s}')
A:sympy.physics.units.definitions.unit_definitions.nsnanosecondnanoseconds->Quantity('nanosecond', abbrev='ns')
A:sympy.physics.units.definitions.unit_definitions.pspicosecondpicoseconds->Quantity('picosecond', abbrev='ps')
A:sympy.physics.units.definitions.unit_definitions.minuteminutes->Quantity('minute')
A:sympy.physics.units.definitions.unit_definitions.hhourhours->Quantity('hour')
A:sympy.physics.units.definitions.unit_definitions.daydays->Quantity('day')
A:sympy.physics.units.definitions.unit_definitions.anomalistic_yearanomalistic_years->Quantity('anomalistic_year')
A:sympy.physics.units.definitions.unit_definitions.sidereal_yearsidereal_years->Quantity('sidereal_year')
A:sympy.physics.units.definitions.unit_definitions.tropical_yeartropical_years->Quantity('tropical_year')
A:sympy.physics.units.definitions.unit_definitions.common_yearcommon_years->Quantity('common_year')
A:sympy.physics.units.definitions.unit_definitions.julian_yearjulian_years->Quantity('julian_year')
A:sympy.physics.units.definitions.unit_definitions.draconic_yeardraconic_years->Quantity('draconic_year')
A:sympy.physics.units.definitions.unit_definitions.gaussian_yeargaussian_years->Quantity('gaussian_year')
A:sympy.physics.units.definitions.unit_definitions.full_moon_cyclefull_moon_cycles->Quantity('full_moon_cycle')
A:sympy.physics.units.definitions.unit_definitions.Ggravitational_constant->PhysicalConstant('gravitational_constant', abbrev='G')
A:sympy.physics.units.definitions.unit_definitions.cspeed_of_light->PhysicalConstant('speed_of_light', abbrev='c')
A:sympy.physics.units.definitions.unit_definitions.elementary_charge->PhysicalConstant('elementary_charge', abbrev='e')
A:sympy.physics.units.definitions.unit_definitions.planck->PhysicalConstant('planck', abbrev='h')
A:sympy.physics.units.definitions.unit_definitions.hbar->PhysicalConstant('hbar', abbrev='hbar')
A:sympy.physics.units.definitions.unit_definitions.eVelectronvoltelectronvolts->PhysicalConstant('electronvolt', abbrev='eV')
A:sympy.physics.units.definitions.unit_definitions.avogadro_number->PhysicalConstant('avogadro_number')
A:sympy.physics.units.definitions.unit_definitions.avogadroavogadro_constant->PhysicalConstant('avogadro_constant')
A:sympy.physics.units.definitions.unit_definitions.boltzmannboltzmann_constant->PhysicalConstant('boltzmann_constant')
A:sympy.physics.units.definitions.unit_definitions.stefanstefan_boltzmann_constant->PhysicalConstant('stefan_boltzmann_constant')
A:sympy.physics.units.definitions.unit_definitions.Rmolar_gas_constant->PhysicalConstant('molar_gas_constant', abbrev='R')
A:sympy.physics.units.definitions.unit_definitions.faraday_constant->PhysicalConstant('faraday_constant')
A:sympy.physics.units.definitions.unit_definitions.josephson_constant->PhysicalConstant('josephson_constant', abbrev='K_j')
A:sympy.physics.units.definitions.unit_definitions.von_klitzing_constant->PhysicalConstant('von_klitzing_constant', abbrev='R_k')
A:sympy.physics.units.definitions.unit_definitions.geegeesacceleration_due_to_gravity->PhysicalConstant('acceleration_due_to_gravity', abbrev='g')
A:sympy.physics.units.definitions.unit_definitions.u0magnetic_constantvacuum_permeability->PhysicalConstant('magnetic_constant')
A:sympy.physics.units.definitions.unit_definitions.e0electric_constantvacuum_permittivity->PhysicalConstant('vacuum_permittivity')
A:sympy.physics.units.definitions.unit_definitions.Z0vacuum_impedance->PhysicalConstant('vacuum_impedance', abbrev='Z_0', latex_repr='Z_{0}')
A:sympy.physics.units.definitions.unit_definitions.coulomb_constantcoulombs_constantelectric_force_constant->PhysicalConstant('coulomb_constant', abbrev='k_e')
A:sympy.physics.units.definitions.unit_definitions.atmosphereatmospheresatm->Quantity('atmosphere', abbrev='atm')
A:sympy.physics.units.definitions.unit_definitions.kPakilopascal->Quantity('kilopascal', abbrev='kPa')
A:sympy.physics.units.definitions.unit_definitions.barbars->Quantity('bar', abbrev='bar')
A:sympy.physics.units.definitions.unit_definitions.poundpounds->Quantity('pound')
A:sympy.physics.units.definitions.unit_definitions.psi->Quantity('psi')
A:sympy.physics.units.definitions.unit_definitions.mmHgtorr->Quantity('mmHg')
A:sympy.physics.units.definitions.unit_definitions.mmummusmilli_mass_unit->Quantity('milli_mass_unit')
A:sympy.physics.units.definitions.unit_definitions.quartquarts->Quantity('quart')
A:sympy.physics.units.definitions.unit_definitions.lylightyearlightyears->Quantity('lightyear', abbrev='ly')
A:sympy.physics.units.definitions.unit_definitions.auastronomical_unitastronomical_units->Quantity('astronomical_unit', abbrev='AU')
A:sympy.physics.units.definitions.unit_definitions.planck_mass->Quantity('planck_mass', abbrev='m_P', latex_repr='m_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_time->Quantity('planck_time', abbrev='t_P', latex_repr='t_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_temperature->Quantity('planck_temperature', abbrev='T_P', latex_repr='T_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_length->Quantity('planck_length', abbrev='l_P', latex_repr='l_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_charge->Quantity('planck_charge', abbrev='q_P', latex_repr='q_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_area->Quantity('planck_area')
A:sympy.physics.units.definitions.unit_definitions.planck_volume->Quantity('planck_volume')
A:sympy.physics.units.definitions.unit_definitions.planck_momentum->Quantity('planck_momentum')
A:sympy.physics.units.definitions.unit_definitions.planck_energy->Quantity('planck_energy', abbrev='E_P', latex_repr='E_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_force->Quantity('planck_force', abbrev='F_P', latex_repr='F_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_power->Quantity('planck_power', abbrev='P_P', latex_repr='P_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_density->Quantity('planck_density', abbrev='rho_P', latex_repr='\\rho_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_energy_density->Quantity('planck_energy_density', abbrev='rho^E_P')
A:sympy.physics.units.definitions.unit_definitions.planck_intensity->Quantity('planck_intensity', abbrev='I_P', latex_repr='I_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_angular_frequency->Quantity('planck_angular_frequency', abbrev='omega_P', latex_repr='\\omega_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_pressure->Quantity('planck_pressure', abbrev='p_P', latex_repr='p_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_current->Quantity('planck_current', abbrev='I_P', latex_repr='I_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_voltage->Quantity('planck_voltage', abbrev='V_P', latex_repr='V_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_impedance->Quantity('planck_impedance', abbrev='Z_P', latex_repr='Z_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.planck_acceleration->Quantity('planck_acceleration', abbrev='a_P', latex_repr='a_\\text{P}')
A:sympy.physics.units.definitions.unit_definitions.bitbits->Quantity('bit')
A:sympy.physics.units.definitions.unit_definitions.bytebytes->Quantity('byte')
A:sympy.physics.units.definitions.unit_definitions.kibibytekibibytes->Quantity('kibibyte')
A:sympy.physics.units.definitions.unit_definitions.mebibytemebibytes->Quantity('mebibyte')
A:sympy.physics.units.definitions.unit_definitions.gibibytegibibytes->Quantity('gibibyte')
A:sympy.physics.units.definitions.unit_definitions.tebibytetebibytes->Quantity('tebibyte')
A:sympy.physics.units.definitions.unit_definitions.pebibytepebibytes->Quantity('pebibyte')
A:sympy.physics.units.definitions.unit_definitions.exbibyteexbibytes->Quantity('exbibyte')
A:sympy.physics.units.definitions.unit_definitions.curieCi->Quantity('curie', abbrev='Ci')
A:sympy.physics.units.definitions.unit_definitions.rutherfordRd->Quantity('rutherford', abbrev='Rd')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/definitions/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/tests/test_unit_system_cgs_gauss.py----------------------------------------
sympy.physics.units.tests.test_unit_system_cgs_gauss.test_cgs_gauss_convert_constants()
sympy.physics.units.tests.test_unit_system_cgs_gauss.test_conversion_to_from_si()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/tests/test_quantities.py----------------------------------------
A:sympy.physics.units.tests.test_quantities.q->Quantity('s10', abbrev='sabbr')
A:sympy.physics.units.tests.test_quantities.conv->convert_to(expr, joule)
A:sympy.physics.units.tests.test_quantities.u->Quantity('u')
A:sympy.physics.units.tests.test_quantities.km->Quantity('km')
A:sympy.physics.units.tests.test_quantities.v->Quantity('v')
A:sympy.physics.units.tests.test_quantities.w->Quantity('w')
A:sympy.physics.units.tests.test_quantities.v_w1->Quantity('v_w1')
A:sympy.physics.units.tests.test_quantities.v_w2->Quantity('v_w2')
A:sympy.physics.units.tests.test_quantities.v_w3->Quantity('v_w3')
A:sympy.physics.units.tests.test_quantities.Dq->Dimension(SI.get_dimensional_expr(q))
A:sympy.physics.units.tests.test_quantities.t->Quantity('t')
A:sympy.physics.units.tests.test_quantities.ut->Quantity('ut')
A:sympy.physics.units.tests.test_quantities.v2->Quantity('v')
A:sympy.physics.units.tests.test_quantities.lp1->Quantity('lp1')
A:sympy.physics.units.tests.test_quantities.u2->Quantity('u2')
A:sympy.physics.units.tests.test_quantities.u3->Quantity('u3')
A:sympy.physics.units.tests.test_quantities.x->Symbol('x')
A:sympy.physics.units.tests.test_quantities.q1->Quantity('q1')
A:sympy.physics.units.tests.test_quantities.q2->Quantity('q2')
A:sympy.physics.units.tests.test_quantities.(x, y)->symbols('x y')
A:sympy.physics.units.tests.test_quantities.cH->Quantity('cH')
A:sympy.physics.units.tests.test_quantities.expr->Abs(v_w1 / 2 - v_w2)
A:sympy.physics.units.tests.test_quantities.l->Quantity('l')
A:sympy.physics.units.tests.test_quantities.t1->Quantity('t1')
A:sympy.physics.units.tests.test_quantities.y->Symbol('y')
A:sympy.physics.units.tests.test_quantities.f->Function('f')
A:sympy.physics.units.tests.test_quantities.dfdx->f(x, y).diff(x, y)
A:sympy.physics.units.tests.test_quantities.dl_dt->f(x, y).diff(x, y).subs({f(x, y): l, x: t, y: t1})
A:sympy.physics.units.tests.test_quantities.good_grade->Quantity('good_grade')
A:sympy.physics.units.tests.test_quantities.kilo_good_grade->Quantity('kilo_good_grade')
A:sympy.physics.units.tests.test_quantities.centi_good_grade->Quantity('centi_good_grade')
A:sympy.physics.units.tests.test_quantities.charity_points->Quantity('charity_points')
A:sympy.physics.units.tests.test_quantities.milli_charity_points->Quantity('milli_charity_points')
A:sympy.physics.units.tests.test_quantities.missions->Quantity('missions')
A:sympy.physics.units.tests.test_quantities.(energy, mass, force)->symbols('energy mass force')
A:sympy.physics.units.tests.test_quantities.p->symbols('p', positive=True)
A:sympy.physics.units.tests.test_quantities.dm->Quantity('dm')
A:sympy.physics.units.tests.test_quantities.bad_exp->Quantity('bad_exp')
A:sympy.physics.units.tests.test_quantities.R->Quantity('R')
A:sympy.physics.units.tests.test_quantities.C->Quantity('C')
A:sympy.physics.units.tests.test_quantities.T->Quantity('T')
A:sympy.physics.units.tests.test_quantities.V1->Quantity('V1')
A:sympy.physics.units.tests.test_quantities.A1->Quantity('A1')
A:sympy.physics.units.tests.test_quantities.T1->Quantity('T1')
A:sympy.physics.units.tests.test_quantities.quantity->getattr(definitions, name)
sympy.physics.units.tests.test_quantities.test_Quantity_definition()
sympy.physics.units.tests.test_quantities.test_Quantity_derivative()
sympy.physics.units.tests.test_quantities.test_Quantity_eq()
sympy.physics.units.tests.test_quantities.test_abbrev()
sympy.physics.units.tests.test_quantities.test_add_sub()
sympy.physics.units.tests.test_quantities.test_binary_information()
sympy.physics.units.tests.test_quantities.test_check_unit_consistency()
sympy.physics.units.tests.test_quantities.test_conversion_with_2_nonstandard_dimensions()
sympy.physics.units.tests.test_quantities.test_convert_to()
sympy.physics.units.tests.test_quantities.test_dimensional_expr_of_derivative()
sympy.physics.units.tests.test_quantities.test_electron_rest_mass()
sympy.physics.units.tests.test_quantities.test_eq()
sympy.physics.units.tests.test_quantities.test_eval_subs()
sympy.physics.units.tests.test_quantities.test_factor_and_dimension()
sympy.physics.units.tests.test_quantities.test_find_unit()
sympy.physics.units.tests.test_quantities.test_get_dimensional_expr_with_function()
sympy.physics.units.tests.test_quantities.test_issue_14547()
sympy.physics.units.tests.test_quantities.test_issue_14932()
sympy.physics.units.tests.test_quantities.test_issue_20288()
sympy.physics.units.tests.test_quantities.test_issue_22164()
sympy.physics.units.tests.test_quantities.test_issue_22819()
sympy.physics.units.tests.test_quantities.test_issue_24062()
sympy.physics.units.tests.test_quantities.test_issue_24211()
sympy.physics.units.tests.test_quantities.test_issue_5565()
sympy.physics.units.tests.test_quantities.test_issue_quart()
sympy.physics.units.tests.test_quantities.test_mul_div()
sympy.physics.units.tests.test_quantities.test_physics_constant()
sympy.physics.units.tests.test_quantities.test_prefixed_property()
sympy.physics.units.tests.test_quantities.test_print()
sympy.physics.units.tests.test_quantities.test_quantity_abs()
sympy.physics.units.tests.test_quantities.test_quantity_postprocessing()
sympy.physics.units.tests.test_quantities.test_str_repr()
sympy.physics.units.tests.test_quantities.test_units()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/tests/test_util.py----------------------------------------
A:sympy.physics.units.tests.test_util.(x, y)->symbols('x y')
A:sympy.physics.units.tests.test_util.x->symbols('x')
sympy.physics.units.tests.test_util.NS(e,n=15,**options)
sympy.physics.units.tests.test_util.test_check_dimensions()
sympy.physics.units.tests.test_util.test_convert_to_quantities()
sympy.physics.units.tests.test_util.test_convert_to_tuples_of_quantities()
sympy.physics.units.tests.test_util.test_dim_simplify_add()
sympy.physics.units.tests.test_util.test_dim_simplify_mul()
sympy.physics.units.tests.test_util.test_dim_simplify_pow()
sympy.physics.units.tests.test_util.test_dim_simplify_rec()
sympy.physics.units.tests.test_util.test_eval_simplify()
sympy.physics.units.tests.test_util.test_quantity_simplify()
sympy.physics.units.tests.test_util.test_quantity_simplify_across_dimensions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/tests/test_dimensions.py----------------------------------------
A:sympy.physics.units.tests.test_dimensions.halflength->sqrt(length)
A:sympy.physics.units.tests.test_dimensions.x->Symbol('x')
A:sympy.physics.units.tests.test_dimensions.a->Symbol('a')
A:sympy.physics.units.tests.test_dimensions.b->Symbol('b')
A:sympy.physics.units.tests.test_dimensions.c->sqrt(a ** 2 + b ** 2)
A:sympy.physics.units.tests.test_dimensions.c_dim->sqrt(a ** 2 + b ** 2).subs({a: length, b: length})
sympy.physics.units.tests.test_dimensions.test_Dimension_add_sub()
sympy.physics.units.tests.test_dimensions.test_Dimension_definition()
sympy.physics.units.tests.test_dimensions.test_Dimension_error_definition()
sympy.physics.units.tests.test_dimensions.test_Dimension_functions()
sympy.physics.units.tests.test_dimensions.test_Dimension_mul_div_exp()
sympy.physics.units.tests.test_dimensions.test_Dimension_properties()
sympy.physics.units.tests.test_dimensions.test_str()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/tests/test_unitsystem.py----------------------------------------
A:sympy.physics.units.tests.test_unitsystem.dm->Quantity('dm')
A:sympy.physics.units.tests.test_unitsystem.ms->UnitSystem((m, s), (c,))
A:sympy.physics.units.tests.test_unitsystem.A->Quantity('A')
A:sympy.physics.units.tests.test_unitsystem.Js->Quantity('Js')
A:sympy.physics.units.tests.test_unitsystem.mksa->UnitSystem((m, kg, s, A), (Js,))
A:sympy.physics.units.tests.test_unitsystem.mks->UnitSystem((m, s), (c,)).extend((kg,), (Js,))
A:sympy.physics.units.tests.test_unitsystem.res->UnitSystem((m, s, kg), (c, Js))
A:sympy.physics.units.tests.test_unitsystem.dimsys->UnitSystem((m, kg, s), (c,))
A:sympy.physics.units.tests.test_unitsystem.dimension_system->DimensionSystem([length, time])
A:sympy.physics.units.tests.test_unitsystem.us->UnitSystem([m, s], dimension_system=dimension_system)
A:sympy.physics.units.tests.test_unitsystem.unit_system->sympy.physics.units.unitsystem.UnitSystem.get_unit_system('SI')
A:sympy.physics.units.tests.test_unitsystem.units->preferred_unit.atoms(Quantity)
sympy.physics.units.tests.test_unitsystem.test_convert_to()
sympy.physics.units.tests.test_unitsystem.test_definition()
sympy.physics.units.tests.test_unitsystem.test_derived_units_must_exist_in_unit_system()
sympy.physics.units.tests.test_unitsystem.test_dim()
sympy.physics.units.tests.test_unitsystem.test_extend()
sympy.physics.units.tests.test_unitsystem.test_get_units_non_prefixed()
sympy.physics.units.tests.test_unitsystem.test_is_consistent()
sympy.physics.units.tests.test_unitsystem.test_str_repr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/tests/test_dimensionsystem.py----------------------------------------
A:sympy.physics.units.tests.test_dimensionsystem.ms->DimensionSystem((length, time), (velocity,))
A:sympy.physics.units.tests.test_dimensionsystem.mks->DimensionSystem((length, time), (velocity,)).extend((mass,), (action,))
A:sympy.physics.units.tests.test_dimensionsystem.res->DimensionSystem((length, time, mass), (velocity, action))
A:sympy.physics.units.tests.test_dimensionsystem.dimsys->DimensionSystem((length, mass, time), (velocity, action), {velocity: {length: 1, time: -1}, action: {mass: 1, length: 2, time: -1}})
A:sympy.physics.units.tests.test_dimensionsystem.mksa->DimensionSystem((length, time, mass, current), (action,), {action: {mass: 1, length: 2, time: -1}})
A:sympy.physics.units.tests.test_dimensionsystem.(L, M, T)->symbols('L M T')
sympy.physics.units.tests.test_dimensionsystem.test_can_transf_matrix()
sympy.physics.units.tests.test_dimensionsystem.test_dim()
sympy.physics.units.tests.test_dimensionsystem.test_dim_can_vector()
sympy.physics.units.tests.test_dimensionsystem.test_extend()
sympy.physics.units.tests.test_dimensionsystem.test_inv_can_transf_matrix()
sympy.physics.units.tests.test_dimensionsystem.test_is_consistent()
sympy.physics.units.tests.test_dimensionsystem.test_list_dims()
sympy.physics.units.tests.test_dimensionsystem.test_print_dim_base()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/tests/test_prefixes.py----------------------------------------
A:sympy.physics.units.tests.test_prefixes.x->Symbol('x')
A:sympy.physics.units.tests.test_prefixes.dodeca->Prefix('dodeca', 'dd', 1, base=12)
A:sympy.physics.units.tests.test_prefixes.m->Quantity('fake_meter', abbrev='m')
A:sympy.physics.units.tests.test_prefixes.q1->Quantity('millifake_meter', abbrev='mm')
A:sympy.physics.units.tests.test_prefixes.q2->Quantity('centifake_meter', abbrev='cm')
A:sympy.physics.units.tests.test_prefixes.q3->Quantity('decifake_meter', abbrev='dm')
A:sympy.physics.units.tests.test_prefixes.prefs->prefix_unit(m, pref)
sympy.physics.units.tests.test_prefixes.test_bases()
sympy.physics.units.tests.test_prefixes.test_prefix_operations()
sympy.physics.units.tests.test_prefixes.test_prefix_unit()
sympy.physics.units.tests.test_prefixes.test_repr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/systems/cgs.py----------------------------------------
A:sympy.physics.units.systems.cgs.dimsys_cgs->sympy.physics.units.systems.mks.dimsys_length_weight_time.extend([], new_dim_deps={'impedance': {'time': 1, 'length': -1}, 'conductance': {'time': -1, 'length': 1}, 'capacitance': {'length': 1}, 'inductance': {'time': 2, 'length': -1}, 'charge': {'mass': S.Half, 'length': S(3) / 2, 'time': -1}, 'current': {'mass': One / 2, 'length': 3 * One / 2, 'time': -2}, 'voltage': {'length': -One / 2, 'mass': One / 2, 'time': -1}, 'magnetic_density': {'length': -One / 2, 'mass': One / 2, 'time': -1}, 'magnetic_flux': {'length': 3 * One / 2, 'mass': One / 2, 'time': -1}})
A:sympy.physics.units.systems.cgs.cgs_gauss->UnitSystem(base_units=[centimeter, gram, second], units=[], name='cgs_gauss', dimension_system=dimsys_cgs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/systems/natural.py----------------------------------------
A:sympy.physics.units.systems.natural._natural_dim->DimensionSystem(base_dims=(action, energy, velocity), derived_dims=(length, mass, time, momentum, force, power, frequency))
A:sympy.physics.units.systems.natural.units->prefix_unit(eV, PREFIXES)
A:sympy.physics.units.systems.natural.natural->UnitSystem(base_units=(hbar, eV, c), units=units, name='Natural system')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/systems/mks.py----------------------------------------
A:sympy.physics.units.systems.mks.MKS->UnitSystem(base_units=(meter, kilogram, second), units=all_units, name='MKS', dimension_system=dimsys_length_weight_time, derived_units={power: watt, time: second, pressure: pascal, length: meter, frequency: hertz, mass: kilogram, force: newton, energy: joule, velocity: meter / second, acceleration: meter / second ** 2})


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/systems/si.py----------------------------------------
A:sympy.physics.units.systems.si.dimsys_SI->sympy.physics.units.systems.mksa.dimsys_MKSA.extend([temperature, amount_of_substance, luminous_intensity])
A:sympy.physics.units.systems.si.dimsys_default->sympy.physics.units.systems.mksa.dimsys_MKSA.extend([temperature, amount_of_substance, luminous_intensity]).extend([information])
A:sympy.physics.units.systems.si.SI->sympy.physics.units.systems.mksa.MKSA.extend(base=(mol, cd, K), units=all_units, name='SI', dimension_system=dimsys_SI, derived_units={power: watt, magnetic_flux: weber, time: second, impedance: ohm, pressure: pascal, current: ampere, voltage: volt, length: meter, frequency: hertz, inductance: henry, temperature: kelvin, amount_of_substance: mole, luminous_intensity: candela, conductance: siemens, mass: kilogram, magnetic_density: tesla, charge: coulomb, force: newton, capacitance: farad, energy: joule, velocity: meter / second})
A:sympy.physics.units.systems.si.dimex->sympy.physics.units.systems.mksa.MKSA.extend(base=(mol, cd, K), units=all_units, name='SI', dimension_system=dimsys_SI, derived_units={power: watt, magnetic_flux: weber, time: second, impedance: ohm, pressure: pascal, current: ampere, voltage: volt, length: meter, frequency: hertz, inductance: henry, temperature: kelvin, amount_of_substance: mole, luminous_intensity: candela, conductance: siemens, mass: kilogram, magnetic_density: tesla, charge: coulomb, force: newton, capacitance: farad, energy: joule, velocity: meter / second}).get_dimensional_expr(_scale_factor)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/systems/mksa.py----------------------------------------
A:sympy.physics.units.systems.mksa.dimsys_MKSA->sympy.physics.units.systems.mks.dimsys_length_weight_time.extend([current], new_dim_deps={'voltage': {'mass': 1, 'length': 2, 'current': -1, 'time': -3}, 'impedance': {'mass': 1, 'length': 2, 'current': -2, 'time': -3}, 'conductance': {'mass': -1, 'length': -2, 'current': 2, 'time': 3}, 'capacitance': {'mass': -1, 'length': -2, 'current': 2, 'time': 4}, 'inductance': {'mass': 1, 'length': 2, 'current': -2, 'time': -2}, 'charge': {'current': 1, 'time': 1}, 'magnetic_density': {'mass': 1, 'current': -1, 'time': -2}, 'magnetic_flux': {'length': 2, 'mass': 1, 'current': -1, 'time': -2}})
A:sympy.physics.units.systems.mksa.MKSA->sympy.physics.units.systems.mks.MKS.extend(base=(ampere,), units=all_units, name='MKSA', dimension_system=dimsys_MKSA, derived_units={magnetic_flux: weber, impedance: ohm, current: ampere, voltage: volt, inductance: henry, conductance: siemens, magnetic_density: tesla, charge: coulomb, capacitance: farad})


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/systems/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/units/systems/length_weight_time.py----------------------------------------
A:sympy.physics.units.systems.length_weight_time.dimsys_length_weight_time->DimensionSystem([length, mass, time], dimensional_dependencies={'velocity': {'length': 1, 'time': -1}, 'acceleration': {'length': 1, 'time': -2}, 'momentum': {'mass': 1, 'length': 1, 'time': -1}, 'force': {'mass': 1, 'length': 1, 'time': -2}, 'energy': {'mass': 1, 'length': 2, 'time': -2}, 'power': {'length': 2, 'mass': 1, 'time': -3}, 'pressure': {'mass': 1, 'length': -1, 'time': -2}, 'frequency': {'time': -1}, 'action': {'length': 2, 'mass': 1, 'time': -1}, 'area': {'length': 2}, 'volume': {'length': 3}})


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/rigidbody.py----------------------------------------
A:sympy.physics.mechanics.rigidbody.self._mass->sympify(m)
A:sympy.physics.mechanics.rigidbody.I_Ss_O->inertia_of_point_mass(self.mass, self.masscenter.pos_from(I[1]), self.frame)
A:sympy.physics.mechanics.rigidbody.w->self.frame.ang_vel_in(frame)
A:sympy.physics.mechanics.rigidbody.r->self.masscenter.pos_from(point)
A:sympy.physics.mechanics.rigidbody.v->self.masscenter.vel(frame)
A:sympy.physics.mechanics.rigidbody.self._pe->sympify(scalar)
sympy.physics.mechanics.RigidBody(self,name,masscenter,frame,mass,inertia)
sympy.physics.mechanics.rigidbody.RigidBody(self,name,masscenter,frame,mass,inertia)
sympy.physics.mechanics.rigidbody.RigidBody.__repr__(self)
sympy.physics.mechanics.rigidbody.RigidBody.__str__(self)
sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum(self,point,frame)
sympy.physics.mechanics.rigidbody.RigidBody.central_inertia(self)
sympy.physics.mechanics.rigidbody.RigidBody.central_inertia(self,I)
sympy.physics.mechanics.rigidbody.RigidBody.frame(self)
sympy.physics.mechanics.rigidbody.RigidBody.frame(self,F)
sympy.physics.mechanics.rigidbody.RigidBody.inertia(self)
sympy.physics.mechanics.rigidbody.RigidBody.inertia(self,I)
sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy(self,frame)
sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum(self,frame)
sympy.physics.mechanics.rigidbody.RigidBody.mass(self)
sympy.physics.mechanics.rigidbody.RigidBody.mass(self,m)
sympy.physics.mechanics.rigidbody.RigidBody.masscenter(self)
sympy.physics.mechanics.rigidbody.RigidBody.masscenter(self,p)
sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis(self,point,frame=None)
sympy.physics.mechanics.rigidbody.RigidBody.potential_energy(self)
sympy.physics.mechanics.rigidbody.RigidBody.potential_energy(self,scalar)
sympy.physics.mechanics.rigidbody.RigidBody.set_potential_energy(self,scalar)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/jointsmethod.py----------------------------------------
A:sympy.physics.mechanics.jointsmethod.self._bodies->self._generate_bodylist()
A:sympy.physics.mechanics.jointsmethod.self._loads->self._generate_loadlist()
A:sympy.physics.mechanics.jointsmethod.self._q->self._generate_q()
A:sympy.physics.mechanics.jointsmethod.self._u->self._generate_u()
A:sympy.physics.mechanics.jointsmethod.self._kdes->self._generate_kdes()
A:sympy.physics.mechanics.jointsmethod.kd_ind->kd_ind.col_join(joint.kdes).col_join(joint.kdes)
A:sympy.physics.mechanics.jointsmethod.rb->RigidBody(body.name, body.masscenter, body.frame, body.mass, (body.central_inertia, body.masscenter))
A:sympy.physics.mechanics.jointsmethod.part->Particle(body.name, body.masscenter, body.mass)
A:sympy.physics.mechanics.jointsmethod.bodylist->self._convert_bodies()
A:sympy.physics.mechanics.jointsmethod.L->Lagrangian(self.frame, *bodylist)
A:sympy.physics.mechanics.jointsmethod.self._method->method(self.frame, q_ind=self.q, u_ind=self.u, kd_eqs=self.kdes, forcelist=self.loads, bodies=bodylist)
A:sympy.physics.mechanics.jointsmethod.soln->self.method._form_eoms()
sympy.physics.mechanics.JointsMethod(self,newtonion,*joints)
sympy.physics.mechanics.jointsmethod.JointsMethod(self,newtonion,*joints)
sympy.physics.mechanics.jointsmethod.JointsMethod._convert_bodies(self)
sympy.physics.mechanics.jointsmethod.JointsMethod._generate_bodylist(self)
sympy.physics.mechanics.jointsmethod.JointsMethod._generate_kdes(self)
sympy.physics.mechanics.jointsmethod.JointsMethod._generate_loadlist(self)
sympy.physics.mechanics.jointsmethod.JointsMethod._generate_q(self)
sympy.physics.mechanics.jointsmethod.JointsMethod._generate_u(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.bodies(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.forcing(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms(self,method=KanesMethod)
sympy.physics.mechanics.jointsmethod.JointsMethod.kdes(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.loads(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.method(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.q(self)
sympy.physics.mechanics.jointsmethod.JointsMethod.rhs(self,inv_method=None)
sympy.physics.mechanics.jointsmethod.JointsMethod.u(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/method.py----------------------------------------
sympy.physics.mechanics.method._Methods(ABC)
sympy.physics.mechanics.method._Methods._form_eoms(self)
sympy.physics.mechanics.method._Methods.bodies(self)
sympy.physics.mechanics.method._Methods.forcing(self)
sympy.physics.mechanics.method._Methods.forcing_full(self)
sympy.physics.mechanics.method._Methods.loads(self)
sympy.physics.mechanics.method._Methods.mass_matrix(self)
sympy.physics.mechanics.method._Methods.mass_matrix_full(self)
sympy.physics.mechanics.method._Methods.q(self)
sympy.physics.mechanics.method._Methods.u(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/functions.py----------------------------------------
A:sympy.physics.mechanics.functions.ixx->sympify(ixx)
A:sympy.physics.mechanics.functions.ixy->sympify(ixy)
A:sympy.physics.mechanics.functions.iyy->sympify(iyy)
A:sympy.physics.mechanics.functions.iyz->sympify(iyz)
A:sympy.physics.mechanics.functions.izx->sympify(izx)
A:sympy.physics.mechanics.functions.izz->sympify(izz)
A:sympy.physics.mechanics.functions.linear_momentum_sys->Vector(0)
A:sympy.physics.mechanics.functions.angular_momentum_sys->Vector(0)
A:sympy.physics.mechanics.functions.point->getattr(e, 'masscenter', None)
A:sympy.physics.mechanics.functions.vec->Vector(0)
A:sympy.physics.mechanics.functions.masscenter->getattr(i, 'masscenter', None)
A:sympy.physics.mechanics.functions.exclude_set->set()
A:sympy.physics.mechanics.functions.expression->expression.to_matrix(reference_frame).to_matrix(reference_frame)
A:sympy.physics.mechanics.functions.sub_dict->dict_merge(*sub_dicts)
A:sympy.physics.mechanics.functions.val->_sub_func(expr, sub_dict)
A:sympy.physics.mechanics.functions.expr->simplify(expr)
A:sympy.physics.mechanics.functions.(num, den)->_fraction_decomp(expr)
A:sympy.physics.mechanics.functions.denom_subbed->_recurser(den, sub_dict)
A:sympy.physics.mechanics.functions.num_subbed->_recurser(num, sub_dict)
A:sympy.physics.mechanics.functions.num->Mul(*num)
A:sympy.physics.mechanics.functions.den->Mul(*den)
A:sympy.physics.mechanics.functions.(vel_list, f_list)->unzip(list(flist_iter()))
A:sympy.physics.mechanics.functions.seen->set()
A:sympy.physics.mechanics.functions.overlap->set(coordinates).intersection(speeds)
sympy.physics.mechanics.Lagrangian(frame,*body)
sympy.physics.mechanics.angular_momentum(point,frame,*body)
sympy.physics.mechanics.find_dynamicsymbols(expression,exclude=None,reference_frame=None)
sympy.physics.mechanics.functions.Lagrangian(frame,*body)
sympy.physics.mechanics.functions._crawl(expr,func,*args,**kwargs)
sympy.physics.mechanics.functions._f_list_parser(fl,ref_frame)
sympy.physics.mechanics.functions._fraction_decomp(expr)
sympy.physics.mechanics.functions._smart_subs(expr,sub_dict)
sympy.physics.mechanics.functions._sub_func(expr,sub_dict)
sympy.physics.mechanics.functions._tan_repl_func(expr)
sympy.physics.mechanics.functions._validate_coordinates(coordinates=None,speeds=None,check_duplicates=True,is_dynamicsymbols=True)
sympy.physics.mechanics.functions.angular_momentum(point,frame,*body)
sympy.physics.mechanics.functions.center_of_mass(point,*bodies)
sympy.physics.mechanics.functions.find_dynamicsymbols(expression,exclude=None,reference_frame=None)
sympy.physics.mechanics.functions.gravity(acceleration,*bodies)
sympy.physics.mechanics.functions.inertia(frame,ixx,iyy,izz,ixy=0,iyz=0,izx=0)
sympy.physics.mechanics.functions.inertia_of_point_mass(mass,pos_vec,frame)
sympy.physics.mechanics.functions.kinetic_energy(frame,*body)
sympy.physics.mechanics.functions.linear_momentum(frame,*body)
sympy.physics.mechanics.functions.mechanics_printing(**kwargs)
sympy.physics.mechanics.functions.msubs(expr,*sub_dicts,smart=False,**kwargs)
sympy.physics.mechanics.functions.potential_energy(*body)
sympy.physics.mechanics.inertia(frame,ixx,iyy,izz,ixy=0,iyz=0,izx=0)
sympy.physics.mechanics.inertia_of_point_mass(mass,pos_vec,frame)
sympy.physics.mechanics.kinetic_energy(frame,*body)
sympy.physics.mechanics.linear_momentum(frame,*body)
sympy.physics.mechanics.mechanics_printing(**kwargs)
sympy.physics.mechanics.msubs(expr,*sub_dicts,smart=False,**kwargs)
sympy.physics.mechanics.potential_energy(*body)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/lagrange.py----------------------------------------
A:sympy.physics.mechanics.lagrange.self._L->Matrix([sympify(Lagrangian)])
A:sympy.physics.mechanics.lagrange.self._m_cd->coneqs.diff(dynamicsymbols._t).jacobian(self._qdoubledots)
A:sympy.physics.mechanics.lagrange.self._m_d->without_lam.jacobian(self._qdoubledots)
A:sympy.physics.mechanics.lagrange.self._f_cd->Matrix()
A:sympy.physics.mechanics.lagrange.self._f_d->Matrix()
A:sympy.physics.mechanics.lagrange.self.lam_coeffs->Matrix()
A:sympy.physics.mechanics.lagrange.self.lam_vec->Matrix(dynamicsymbols('lam1:' + str(m + 1)))
A:sympy.physics.mechanics.lagrange.self._term1->self._L.jacobian(qds)
A:sympy.physics.mechanics.lagrange.self._term2->Matrix()
A:sympy.physics.mechanics.lagrange.self._term3->zeros(n, 1)
A:sympy.physics.mechanics.lagrange.self._term4->zeros(n, 1)
A:sympy.physics.mechanics.lagrange.self._q->Matrix(qs)
A:sympy.physics.mechanics.lagrange.self._qdots->self.q.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.lagrange.self._qdoubledots->self._qdots.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.lagrange.hol_coneqs->mat_build(hol_coneqs)
A:sympy.physics.mechanics.lagrange.nonhol_coneqs->mat_build(nonhol_coneqs)
A:sympy.physics.mechanics.lagrange.self.coneqs->Matrix([hol_coneqs.diff(dynamicsymbols._t), nonhol_coneqs])
A:sympy.physics.mechanics.lagrange.n->len(self.q)
A:sympy.physics.mechanics.lagrange.m->len(self.coneqs)
A:sympy.physics.mechanics.lagrange.diffconeqs->coneqs.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.lagrange.flist->zip(*_f_list_parser(self.forcelist, N))
A:sympy.physics.mechanics.lagrange.self._term4[i]->sum((v.diff(qd, N) & f for (v, f) in flist))
A:sympy.physics.mechanics.lagrange.row1->eye(n).row_join(zeros(n, n + m))
A:sympy.physics.mechanics.lagrange.row2->zeros(n, n).row_join(self.mass_matrix)
A:sympy.physics.mechanics.lagrange.row3->zeros(m, n).row_join(self._m_cd).row_join(zeros(m, m))
A:sympy.physics.mechanics.lagrange.ud->u.diff(t)
A:sympy.physics.mechanics.lagrange.q_i->mat_build(q_ind)
A:sympy.physics.mechanics.lagrange.q_d->mat_build(q_dep)
A:sympy.physics.mechanics.lagrange.u_i->mat_build(qd_ind)
A:sympy.physics.mechanics.lagrange.u_d->mat_build(qd_dep)
A:sympy.physics.mechanics.lagrange.f_a->f_v.diff(t)
A:sympy.physics.mechanics.lagrange.insyms->set(Matrix([q, u, ud, lams]))
A:sympy.physics.mechanics.lagrange.r->list(find_dynamicsymbols(f_3, insyms))
A:sympy.physics.mechanics.lagrange.linearizer->self.to_linearizer(q_ind, qd_ind, q_dep, qd_dep)
A:sympy.physics.mechanics.lagrange.result->self.to_linearizer(q_ind, qd_ind, q_dep, qd_dep).linearize(**kwargs)
A:sympy.physics.mechanics.lagrange.k->len(self.lam_vec)
A:sympy.physics.mechanics.lagrange.mass_matrix->msubs(mass_matrix, op_point_dict)
A:sympy.physics.mechanics.lagrange.force_matrix->msubs(force_matrix, op_point_dict)
A:sympy.physics.mechanics.lagrange.self._rhs->self.mass_matrix_full.LUsolve(self.forcing_full)
sympy.physics.mechanics.LagrangesMethod(self,Lagrangian,qs,forcelist=None,bodies=None,frame=None,hol_coneqs=None,nonhol_coneqs=None)
sympy.physics.mechanics.lagrange.LagrangesMethod(self,Lagrangian,qs,forcelist=None,bodies=None,frame=None,hol_coneqs=None,nonhol_coneqs=None)
sympy.physics.mechanics.lagrange.LagrangesMethod._form_eoms(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.bodies(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.forcelist(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.forcing(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.linearize(self,q_ind=None,qd_ind=None,q_dep=None,qd_dep=None,**kwargs)
sympy.physics.mechanics.lagrange.LagrangesMethod.loads(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.q(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.rhs(self,inv_method=None,**kwargs)
sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers(self,op_point=None,sol_type='dict')
sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer(self,q_ind=None,qd_ind=None,q_dep=None,qd_dep=None)
sympy.physics.mechanics.lagrange.LagrangesMethod.u(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/joint.py----------------------------------------
A:sympy.physics.mechanics.joint.self._coordinates->self._generate_coordinates(coordinates)
A:sympy.physics.mechanics.joint.self._speeds->self._generate_speeds(speeds)
A:sympy.physics.mechanics.joint.self._kdes->self._generate_kdes()
A:sympy.physics.mechanics.joint.self._parent_axis->self._axis(parent_axis, parent.frame)
A:sympy.physics.mechanics.joint.self._child_axis->self._axis(child_axis, child.frame)
A:sympy.physics.mechanics.joint.self._parent_point->self._locate_joint_pos(parent, parent_point)
A:sympy.physics.mechanics.joint.self._child_point->self._locate_joint_pos(child, child_point)
A:sympy.physics.mechanics.joint.self._parent_interframe->self._locate_joint_frame(parent, parent_interframe)
A:sympy.physics.mechanics.joint.self._child_interframe->self._locate_joint_frame(child, child_interframe)
A:sympy.physics.mechanics.joint.components->self.joint_axis.normalize().to_matrix(frame)
A:sympy.physics.mechanics.joint.angle->frame_axis.angle_between(align_axis)
A:sympy.physics.mechanics.joint.rotation_axis->Joint._choose_rotation_axis(frame, align_axis)
A:sympy.physics.mechanics.joint.int_frame->ReferenceFrame(frame_name)
A:sympy.physics.mechanics.joint.joint_pos->body.masscenter.locatenew(point_name, joint_pos)
A:sympy.physics.mechanics.joint.interframe->Joint._create_aligned_interframe(body, interframe, frame_name=f'{self.name}_{body.name}_int_frame')
A:sympy.physics.mechanics.joint.self._joint_axis->self._axis(self.joint_axis, self.parent_interframe)
A:sympy.physics.mechanics.joint.axis->self.joint_axis.normalize()
A:sympy.physics.mechanics.joint.rotation_speed->self._fill_coordinate_list(speeds[0], 1, 'u', number_single=True)
A:sympy.physics.mechanics.joint.planar_speeds->self._fill_coordinate_list(speeds[1], 2, 'u', 1)
A:sympy.physics.mechanics.joint.vel->self.child_interframe.ang_vel_in(self.parent_interframe).xreplace({q.diff(t): u for (q, u) in zip(self.coordinates, self.speeds)})
sympy.physics.mechanics.CylindricalJoint(self,name,parent,child,rotation_coordinate=None,translation_coordinate=None,rotation_speed=None,translation_speed=None,parent_point=None,child_point=None,parent_interframe=None,child_interframe=None,joint_axis=None)
sympy.physics.mechanics.PinJoint(self,name,parent,child,coordinates=None,speeds=None,parent_point=None,child_point=None,parent_axis=None,child_axis=None,parent_interframe=None,child_interframe=None,joint_axis=None,parent_joint_pos=None,child_joint_pos=None)
sympy.physics.mechanics.PlanarJoint(self,name,parent,child,rotation_coordinate=None,planar_coordinates=None,rotation_speed=None,planar_speeds=None,parent_point=None,child_point=None,parent_interframe=None,child_interframe=None)
sympy.physics.mechanics.PrismaticJoint(self,name,parent,child,coordinates=None,speeds=None,parent_point=None,child_point=None,parent_axis=None,child_axis=None,parent_interframe=None,child_interframe=None,joint_axis=None,parent_joint_pos=None,child_joint_pos=None)
sympy.physics.mechanics.SphericalJoint(self,name,parent,child,coordinates=None,speeds=None,parent_point=None,child_point=None,parent_interframe=None,child_interframe=None,rot_type='BODY',amounts=None,rot_order=123)
sympy.physics.mechanics.WeldJoint(self,name,parent,child,parent_point=None,child_point=None,parent_interframe=None,child_interframe=None)
sympy.physics.mechanics.joint.CylindricalJoint(self,name,parent,child,rotation_coordinate=None,translation_coordinate=None,rotation_speed=None,translation_speed=None,parent_point=None,child_point=None,parent_interframe=None,child_interframe=None,joint_axis=None)
sympy.physics.mechanics.joint.CylindricalJoint.__str__(self)
sympy.physics.mechanics.joint.CylindricalJoint._generate_coordinates(self,coordinates)
sympy.physics.mechanics.joint.CylindricalJoint._generate_speeds(self,speeds)
sympy.physics.mechanics.joint.CylindricalJoint._orient_frames(self)
sympy.physics.mechanics.joint.CylindricalJoint._set_angular_velocity(self)
sympy.physics.mechanics.joint.CylindricalJoint._set_linear_velocity(self)
sympy.physics.mechanics.joint.CylindricalJoint.joint_axis(self)
sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate(self)
sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed(self)
sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate(self)
sympy.physics.mechanics.joint.CylindricalJoint.translation_speed(self)
sympy.physics.mechanics.joint.Joint(self,name,parent,child,coordinates=None,speeds=None,parent_point=None,child_point=None,parent_axis=None,child_axis=None,parent_interframe=None,child_interframe=None,parent_joint_pos=None,child_joint_pos=None)
sympy.physics.mechanics.joint.Joint.__repr__(self)
sympy.physics.mechanics.joint.Joint.__str__(self)
sympy.physics.mechanics.joint.Joint._axis(ax,*frames)
sympy.physics.mechanics.joint.Joint._choose_rotation_axis(frame,axis)
sympy.physics.mechanics.joint.Joint._create_aligned_interframe(frame,align_axis,frame_axis=None,frame_name=None)
sympy.physics.mechanics.joint.Joint._fill_coordinate_list(self,coordinates,n_coords,label='q',offset=0,number_single=False)
sympy.physics.mechanics.joint.Joint._generate_coordinates(self,coordinates)
sympy.physics.mechanics.joint.Joint._generate_kdes(self)
sympy.physics.mechanics.joint.Joint._generate_speeds(self,speeds)
sympy.physics.mechanics.joint.Joint._locate_joint_frame(self,body,interframe)
sympy.physics.mechanics.joint.Joint._locate_joint_pos(self,body,joint_pos)
sympy.physics.mechanics.joint.Joint._orient_frames(self)
sympy.physics.mechanics.joint.Joint._set_angular_velocity(self)
sympy.physics.mechanics.joint.Joint._set_linear_velocity(self)
sympy.physics.mechanics.joint.Joint._to_vector(matrix,frame)
sympy.physics.mechanics.joint.Joint.child(self)
sympy.physics.mechanics.joint.Joint.child_axis(self)
sympy.physics.mechanics.joint.Joint.child_interframe(self)
sympy.physics.mechanics.joint.Joint.child_point(self)
sympy.physics.mechanics.joint.Joint.coordinates(self)
sympy.physics.mechanics.joint.Joint.kdes(self)
sympy.physics.mechanics.joint.Joint.name(self)
sympy.physics.mechanics.joint.Joint.parent(self)
sympy.physics.mechanics.joint.Joint.parent_axis(self)
sympy.physics.mechanics.joint.Joint.parent_interframe(self)
sympy.physics.mechanics.joint.Joint.parent_point(self)
sympy.physics.mechanics.joint.Joint.speeds(self)
sympy.physics.mechanics.joint.PinJoint(self,name,parent,child,coordinates=None,speeds=None,parent_point=None,child_point=None,parent_axis=None,child_axis=None,parent_interframe=None,child_interframe=None,joint_axis=None,parent_joint_pos=None,child_joint_pos=None)
sympy.physics.mechanics.joint.PinJoint.__str__(self)
sympy.physics.mechanics.joint.PinJoint._generate_coordinates(self,coordinate)
sympy.physics.mechanics.joint.PinJoint._generate_speeds(self,speed)
sympy.physics.mechanics.joint.PinJoint._orient_frames(self)
sympy.physics.mechanics.joint.PinJoint._set_angular_velocity(self)
sympy.physics.mechanics.joint.PinJoint._set_linear_velocity(self)
sympy.physics.mechanics.joint.PinJoint.joint_axis(self)
sympy.physics.mechanics.joint.PlanarJoint(self,name,parent,child,rotation_coordinate=None,planar_coordinates=None,rotation_speed=None,planar_speeds=None,parent_point=None,child_point=None,parent_interframe=None,child_interframe=None)
sympy.physics.mechanics.joint.PlanarJoint.__str__(self)
sympy.physics.mechanics.joint.PlanarJoint._generate_coordinates(self,coordinates)
sympy.physics.mechanics.joint.PlanarJoint._generate_speeds(self,speeds)
sympy.physics.mechanics.joint.PlanarJoint._orient_frames(self)
sympy.physics.mechanics.joint.PlanarJoint._set_angular_velocity(self)
sympy.physics.mechanics.joint.PlanarJoint._set_linear_velocity(self)
sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates(self)
sympy.physics.mechanics.joint.PlanarJoint.planar_speeds(self)
sympy.physics.mechanics.joint.PlanarJoint.planar_vectors(self)
sympy.physics.mechanics.joint.PlanarJoint.rotation_axis(self)
sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate(self)
sympy.physics.mechanics.joint.PlanarJoint.rotation_speed(self)
sympy.physics.mechanics.joint.PrismaticJoint(self,name,parent,child,coordinates=None,speeds=None,parent_point=None,child_point=None,parent_axis=None,child_axis=None,parent_interframe=None,child_interframe=None,joint_axis=None,parent_joint_pos=None,child_joint_pos=None)
sympy.physics.mechanics.joint.PrismaticJoint.__str__(self)
sympy.physics.mechanics.joint.PrismaticJoint._generate_coordinates(self,coordinate)
sympy.physics.mechanics.joint.PrismaticJoint._generate_speeds(self,speed)
sympy.physics.mechanics.joint.PrismaticJoint._orient_frames(self)
sympy.physics.mechanics.joint.PrismaticJoint._set_angular_velocity(self)
sympy.physics.mechanics.joint.PrismaticJoint._set_linear_velocity(self)
sympy.physics.mechanics.joint.PrismaticJoint.joint_axis(self)
sympy.physics.mechanics.joint.SphericalJoint(self,name,parent,child,coordinates=None,speeds=None,parent_point=None,child_point=None,parent_interframe=None,child_interframe=None,rot_type='BODY',amounts=None,rot_order=123)
sympy.physics.mechanics.joint.SphericalJoint.__str__(self)
sympy.physics.mechanics.joint.SphericalJoint._generate_coordinates(self,coordinates)
sympy.physics.mechanics.joint.SphericalJoint._generate_speeds(self,speeds)
sympy.physics.mechanics.joint.SphericalJoint._orient_frames(self)
sympy.physics.mechanics.joint.SphericalJoint._set_angular_velocity(self)
sympy.physics.mechanics.joint.SphericalJoint._set_linear_velocity(self)
sympy.physics.mechanics.joint.WeldJoint(self,name,parent,child,parent_point=None,child_point=None,parent_interframe=None,child_interframe=None)
sympy.physics.mechanics.joint.WeldJoint.__str__(self)
sympy.physics.mechanics.joint.WeldJoint._generate_coordinates(self,coordinate)
sympy.physics.mechanics.joint.WeldJoint._generate_speeds(self,speed)
sympy.physics.mechanics.joint.WeldJoint._orient_frames(self)
sympy.physics.mechanics.joint.WeldJoint._set_angular_velocity(self)
sympy.physics.mechanics.joint.WeldJoint._set_linear_velocity(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/kane.py----------------------------------------
A:sympy.physics.mechanics.kane.q_dep->none_handler(q_dep)
A:sympy.physics.mechanics.kane.q_ind->Matrix(q_ind)
A:sympy.physics.mechanics.kane.self._q->Matrix([q_ind, q_dep])
A:sympy.physics.mechanics.kane.self._qdot->self.q.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.kane.u_dep->none_handler(u_dep)
A:sympy.physics.mechanics.kane.u_ind->Matrix(u_ind)
A:sympy.physics.mechanics.kane.self._u->Matrix([u_ind, u_dep])
A:sympy.physics.mechanics.kane.self._udot->self.u.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.kane.self._uaux->none_handler(u_aux)
A:sympy.physics.mechanics.kane.o->len(self.u)
A:sympy.physics.mechanics.kane.m->len(self._udep)
A:sympy.physics.mechanics.kane.config->none_handler(config)
A:sympy.physics.mechanics.kane.self._f_h->none_handler(config)
A:sympy.physics.mechanics.kane.vel->zero_uaux(body.point.vel(N))
A:sympy.physics.mechanics.kane.acc->zero_udot_uaux(body.point.acc(N))
A:sympy.physics.mechanics.kane.self._f_nh->Matrix()
A:sympy.physics.mechanics.kane.self._k_nh->Matrix()
A:sympy.physics.mechanics.kane._f_dnh->msubs(_f_dnh, self._qdot_u_map)
A:sympy.physics.mechanics.kane.self._f_dnh->Matrix()
A:sympy.physics.mechanics.kane.self._k_dnh->Matrix()
A:sympy.physics.mechanics.kane.self._Ars->Matrix()
A:sympy.physics.mechanics.kane.kdeqs->Matrix(kdeqs)
A:sympy.physics.mechanics.kane.k_ku->Matrix(kdeqs).jacobian(u)
A:sympy.physics.mechanics.kane.k_kqdot->Matrix(kdeqs).jacobian(qdot)
A:sympy.physics.mechanics.kane.f_k->Matrix(kdeqs).xreplace(u_zero).xreplace(qdot_zero)
A:sympy.physics.mechanics.kane.dy_syms->find_dynamicsymbols(k_ku.row_join(k_kqdot).row_join(f_k))
A:sympy.physics.mechanics.kane.self._f_k_implicit->Matrix(kdeqs).xreplace(u_zero).xreplace(qdot_zero).xreplace(uaux_zero)
A:sympy.physics.mechanics.kane.self._k_ku_implicit->Matrix(kdeqs).jacobian(u).xreplace(uaux_zero)
A:sympy.physics.mechanics.kane.f_k_explicit->Matrix(kdeqs).jacobian(qdot).LUsolve(f_k)
A:sympy.physics.mechanics.kane.k_ku_explicit->Matrix(kdeqs).jacobian(qdot).LUsolve(k_ku)
A:sympy.physics.mechanics.kane.self._qdot_u_map->dict(zip(qdot, -(k_ku_explicit * u + f_k_explicit)))
A:sympy.physics.mechanics.kane.self._f_k->Matrix(kdeqs).jacobian(qdot).LUsolve(f_k).xreplace(uaux_zero)
A:sympy.physics.mechanics.kane.self._k_ku->Matrix(kdeqs).jacobian(qdot).LUsolve(k_ku).xreplace(uaux_zero)
A:sympy.physics.mechanics.kane.self._k_kqdot->eye(len(qdot))
A:sympy.physics.mechanics.kane.self._f_k_implicitself._f_k->Matrix()
A:sympy.physics.mechanics.kane.self._k_ku_implicitself._k_ku->Matrix()
A:sympy.physics.mechanics.kane.self._k_kqdot_implicitself._k_kqdot->Matrix()
A:sympy.physics.mechanics.kane.(vel_list, f_list)->_f_list_parser(fl, N)
A:sympy.physics.mechanics.kane.b->len(f_list)
A:sympy.physics.mechanics.kane.FR->zeros(o, 1)
A:sympy.physics.mechanics.kane.partials->partial_velocity(vel_list, self.u, N)
A:sympy.physics.mechanics.kane.FR[i]->sum((partials[j][i] & f_list[j] for j in range(b)))
A:sympy.physics.mechanics.kane.MM->zero_uaux(msubs(MM, q_ddot_u_map))
A:sympy.physics.mechanics.kane.nonMM->msubs(msubs(nonMM, q_ddot_u_map), udot_zero, uauxdot_zero, uaux_zero)
A:sympy.physics.mechanics.kane.M->zero_uaux(body.mass)
A:sympy.physics.mechanics.kane.I->zero_uaux(body.central_inertia)
A:sympy.physics.mechanics.kane.omega->zero_uaux(body.frame.ang_vel_in(N))
A:sympy.physics.mechanics.kane.inertial_torque->zero_uaux((I.dt(body.frame) & omega) + msubs(I & body.frame.ang_acc_in(N), udot_zero) + (omega ^ I & omega))
A:sympy.physics.mechanics.kane.tmp_vel->zero_uaux(partials[i][0][j])
A:sympy.physics.mechanics.kane.tmp_ang->zero_uaux(I & partials[i][1][j])
A:sympy.physics.mechanics.kane.temp->zero_uaux(partials[i][0][j])
A:sympy.physics.mechanics.kane.f_v->Matrix()
A:sympy.physics.mechanics.kane.f_a->Matrix()
A:sympy.physics.mechanics.kane.f_2->msubs(self._frstar, qd_u_zero)
A:sympy.physics.mechanics.kane.f_4->zeros(len(f_2), 1)
A:sympy.physics.mechanics.kane.uauxdot->uaux.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.kane.sym_list->set(Matrix([q, self._qdot, u, self._udot, uaux, uauxdot]))
A:sympy.physics.mechanics.kane.r->list(find_dynamicsymbols(msubs(self._f_d, uaux_zero), sym_list))
A:sympy.physics.mechanics.kane.linearizer->self.to_linearizer()
A:sympy.physics.mechanics.kane.result->self.to_linearizer().linearize(**kwargs)
A:sympy.physics.mechanics.kane.fr->self._form_fr(loads)
A:sympy.physics.mechanics.kane.frstar->self._form_frstar(bodies)
A:sympy.physics.mechanics.kane.km->KanesMethod(self._inertial, self.q, self._uaux, u_auxiliary=self._uaux, u_dependent=self._udep, velocity_constraints=self._k_nh * self.u + self._f_nh, acceleration_constraints=self._k_dnh * self._udot + self._f_dnh)
A:sympy.physics.mechanics.kane.fraux->KanesMethod(self._inertial, self.q, self._uaux, u_auxiliary=self._uaux, u_dependent=self._udep, velocity_constraints=self._k_nh * self.u + self._f_nh, acceleration_constraints=self._k_dnh * self._udot + self._f_dnh)._form_fr(loads)
A:sympy.physics.mechanics.kane.frstaraux->KanesMethod(self._inertial, self.q, self._uaux, u_auxiliary=self._uaux, u_dependent=self._udep, velocity_constraints=self._k_nh * self.u + self._f_nh, acceleration_constraints=self._k_dnh * self._udot + self._f_dnh)._form_frstar(bodies)
A:sympy.physics.mechanics.kane.self._fr->self._form_fr(loads).col_join(fraux)
A:sympy.physics.mechanics.kane.self._frstar->self._form_frstar(bodies).col_join(frstaraux)
A:sympy.physics.mechanics.kane.(fr, frstar)->self.kanes_equations(self.bodylist, self.forcelist)
A:sympy.physics.mechanics.kane.rhs->zeros(len(self.q) + len(self.u), 1)
A:sympy.physics.mechanics.kane.kdes->self.kindiffdict()
A:sympy.physics.mechanics.kane.rhs[len(self.q):, 0]->self.mass_matrix.LUsolve(self.forcing)
sympy.physics.mechanics.KanesMethod(self,frame,q_ind,u_ind,kd_eqs=None,q_dependent=None,configuration_constraints=None,u_dependent=None,velocity_constraints=None,acceleration_constraints=None,u_auxiliary=None,bodies=None,forcelist=None,explicit_kinematics=True)
sympy.physics.mechanics.kane.KanesMethod(self,frame,q_ind,u_ind,kd_eqs=None,q_dependent=None,configuration_constraints=None,u_dependent=None,velocity_constraints=None,acceleration_constraints=None,u_auxiliary=None,bodies=None,forcelist=None,explicit_kinematics=True)
sympy.physics.mechanics.kane.KanesMethod._form_eoms(self)
sympy.physics.mechanics.kane.KanesMethod._form_fr(self,fl)
sympy.physics.mechanics.kane.KanesMethod._form_frstar(self,bl)
sympy.physics.mechanics.kane.KanesMethod._initialize_constraint_matrices(self,config,vel,acc)
sympy.physics.mechanics.kane.KanesMethod._initialize_kindiffeq_matrices(self,kdeqs)
sympy.physics.mechanics.kane.KanesMethod._initialize_vectors(self,q_ind,q_dep,u_ind,u_dep,u_aux)
sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs(self)
sympy.physics.mechanics.kane.KanesMethod.bodies(self)
sympy.physics.mechanics.kane.KanesMethod.bodylist(self)
sympy.physics.mechanics.kane.KanesMethod.forcelist(self)
sympy.physics.mechanics.kane.KanesMethod.forcing(self)
sympy.physics.mechanics.kane.KanesMethod.forcing_full(self)
sympy.physics.mechanics.kane.KanesMethod.forcing_kin(self)
sympy.physics.mechanics.kane.KanesMethod.kanes_equations(self,bodies=None,loads=None)
sympy.physics.mechanics.kane.KanesMethod.kindiffdict(self)
sympy.physics.mechanics.kane.KanesMethod.linearize(self,*,new_method=None,**kwargs)
sympy.physics.mechanics.kane.KanesMethod.loads(self)
sympy.physics.mechanics.kane.KanesMethod.mass_matrix(self)
sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full(self)
sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin(self)
sympy.physics.mechanics.kane.KanesMethod.q(self)
sympy.physics.mechanics.kane.KanesMethod.rhs(self,inv_method=None)
sympy.physics.mechanics.kane.KanesMethod.to_linearizer(self)
sympy.physics.mechanics.kane.KanesMethod.u(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/system.py----------------------------------------
A:sympy.physics.mechanics.system.self._states->self._coordinates.col_join(self._speeds)
A:sympy.physics.mechanics.system.self._coordinates->Matrix(coord_states)
A:sympy.physics.mechanics.system.self._speeds->Matrix(speeds)
A:sympy.physics.mechanics.system.bodies->tuple(bodies)
A:sympy.physics.mechanics.system.loads->tuple(loads)
A:sympy.physics.mechanics.system.num_kin_eqns->len(self._kin_explicit_rhs)
A:sympy.physics.mechanics.system.num_dyn_eqns->len(self._dyn_implicit_rhs)
A:sympy.physics.mechanics.system.zeros1->zeros(num_kin_eqns, num_dyn_eqns)
A:sympy.physics.mechanics.system.zeros2->zeros(num_dyn_eqns, num_kin_eqns)
A:sympy.physics.mechanics.system.inter1->getattr(self, 'kin_explicit_rhs', None)
A:sympy.physics.mechanics.system.inter2->self._dyn_implicit_mat.LUsolve(self._dyn_implicit_rhs)
A:sympy.physics.mechanics.system.self._comb_implicit_mat->getattr(self, 'kin_explicit_rhs', None).col_join(inter2)
A:sympy.physics.mechanics.system.self._comb_implicit_rhs->kin_inter.col_join(dyn_inter)
A:sympy.physics.mechanics.system.out->self._comb_implicit_mat.LUsolve(self._comb_implicit_rhs)
A:sympy.physics.mechanics.system.functions_of_time->functions_of_time.union(self._states).union(self._states)
A:sympy.physics.mechanics.system.constants->constants.union(expr.free_symbols).union(expr.free_symbols)
sympy.physics.mechanics.SymbolicSystem(self,coord_states,right_hand_side,speeds=None,mass_matrix=None,coordinate_derivatives=None,alg_con=None,output_eqns={},coord_idxs=None,speed_idxs=None,bodies=None,loads=None)
sympy.physics.mechanics.system.SymbolicSystem(self,coord_states,right_hand_side,speeds=None,mass_matrix=None,coordinate_derivatives=None,alg_con=None,output_eqns={},coord_idxs=None,speed_idxs=None,bodies=None,loads=None)
sympy.physics.mechanics.system.SymbolicSystem.alg_con(self)
sympy.physics.mechanics.system.SymbolicSystem.bodies(self)
sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs(self)
sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat(self)
sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs(self)
sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form(self)
sympy.physics.mechanics.system.SymbolicSystem.constant_symbols(self)
sympy.physics.mechanics.system.SymbolicSystem.coordinates(self)
sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat(self)
sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs(self)
sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols(self)
sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs(self)
sympy.physics.mechanics.system.SymbolicSystem.loads(self)
sympy.physics.mechanics.system.SymbolicSystem.speeds(self)
sympy.physics.mechanics.system.SymbolicSystem.states(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/body.py----------------------------------------
A:sympy.physics.mechanics.body.frame->ReferenceFrame(name + '_frame')
A:sympy.physics.mechanics.body.masscenter->Point(name + '_masscenter')
A:sympy.physics.mechanics.body.ixx->Symbol(name + '_ixx')
A:sympy.physics.mechanics.body.iyy->Symbol(name + '_iyy')
A:sympy.physics.mechanics.body.izz->Symbol(name + '_izz')
A:sympy.physics.mechanics.body.izx->Symbol(name + '_izx')
A:sympy.physics.mechanics.body.ixy->Symbol(name + '_ixy')
A:sympy.physics.mechanics.body.iyz->Symbol(name + '_iyz')
A:sympy.physics.mechanics.body._mass->Symbol(name + '_mass')
A:sympy.physics.mechanics.body.self._central_inertia->Dyadic(0)
sympy.physics.mechanics.Body(self,name,masscenter=None,mass=None,frame=None,central_inertia=None)
sympy.physics.mechanics.body.Body(self,name,masscenter=None,mass=None,frame=None,central_inertia=None)
sympy.physics.mechanics.body.Body.ang_vel_in(self,body)
sympy.physics.mechanics.body.Body.apply_force(self,force,point=None,reaction_body=None,reaction_point=None)
sympy.physics.mechanics.body.Body.apply_torque(self,torque,reaction_body=None)
sympy.physics.mechanics.body.Body.clear_loads(self)
sympy.physics.mechanics.body.Body.dcm(self,body)
sympy.physics.mechanics.body.Body.inertia(self)
sympy.physics.mechanics.body.Body.inertia(self,I)
sympy.physics.mechanics.body.Body.is_rigidbody(self)
sympy.physics.mechanics.body.Body.kinetic_energy(self,frame)
sympy.physics.mechanics.body.Body.loads(self)
sympy.physics.mechanics.body.Body.masscenter_vel(self,body)
sympy.physics.mechanics.body.Body.parallel_axis(self,point,frame=None)
sympy.physics.mechanics.body.Body.remove_load(self,about=None)
sympy.physics.mechanics.body.Body.x(self)
sympy.physics.mechanics.body.Body.y(self)
sympy.physics.mechanics.body.Body.z(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/particle.py----------------------------------------
A:sympy.physics.mechanics.particle.self._mass->sympify(value)
A:sympy.physics.mechanics.particle.self._pe->sympify(scalar)
sympy.physics.mechanics.Particle(self,name,point,mass)
sympy.physics.mechanics.particle.Particle(self,name,point,mass)
sympy.physics.mechanics.particle.Particle.__repr__(self)
sympy.physics.mechanics.particle.Particle.__str__(self)
sympy.physics.mechanics.particle.Particle.angular_momentum(self,point,frame)
sympy.physics.mechanics.particle.Particle.kinetic_energy(self,frame)
sympy.physics.mechanics.particle.Particle.linear_momentum(self,frame)
sympy.physics.mechanics.particle.Particle.mass(self)
sympy.physics.mechanics.particle.Particle.mass(self,value)
sympy.physics.mechanics.particle.Particle.parallel_axis(self,point,frame)
sympy.physics.mechanics.particle.Particle.point(self)
sympy.physics.mechanics.particle.Particle.point(self,p)
sympy.physics.mechanics.particle.Particle.potential_energy(self)
sympy.physics.mechanics.particle.Particle.potential_energy(self,scalar)
sympy.physics.mechanics.particle.Particle.set_potential_energy(self,scalar)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/models.py----------------------------------------
A:sympy.physics.mechanics.models.mass->sympy.core.backend.symbols('m:{}'.format(n))
A:sympy.physics.mechanics.models.stiffness->sympy.core.backend.symbols('k:{}'.format(n))
A:sympy.physics.mechanics.models.damping->sympy.core.backend.symbols('c:{}'.format(n))
A:sympy.physics.mechanics.models.acceleration_due_to_gravity->sympy.core.backend.symbols('g')
A:sympy.physics.mechanics.models.coordinates->sympy.physics.mechanics.dynamicsymbols('x:{}'.format(n))
A:sympy.physics.mechanics.models.speeds->sympy.physics.mechanics.dynamicsymbols('v:{}'.format(n))
A:sympy.physics.mechanics.models.specifieds->sympy.physics.mechanics.dynamicsymbols('f:{}'.format(n))
A:sympy.physics.mechanics.models.ceiling->sympy.physics.mechanics.ReferenceFrame('N')
A:sympy.physics.mechanics.models.origin->sympy.physics.mechanics.Point('origin')
A:sympy.physics.mechanics.models.center->points[-1].locatenew('center{}'.format(i), coordinates[i] * ceiling.x)
A:sympy.physics.mechanics.models.block->sympy.physics.mechanics.Particle('block{}'.format(i), center, mass[i])
A:sympy.physics.mechanics.models.kane->sympy.physics.mechanics.KanesMethod(I, q_ind=q, u_ind=u, kd_eqs=kindiffs)
A:sympy.physics.mechanics.models.q->sympy.physics.mechanics.dynamicsymbols('q:{}'.format(n + 1))
A:sympy.physics.mechanics.models.u->sympy.physics.mechanics.dynamicsymbols('u:{}'.format(n + 1))
A:sympy.physics.mechanics.models.T->sympy.physics.mechanics.dynamicsymbols('T1:{}'.format(n + 1))
A:sympy.physics.mechanics.models.m->sympy.core.backend.symbols('m:{}'.format(n + 1))
A:sympy.physics.mechanics.models.l->sympy.core.backend.symbols('l:{}'.format(n))
A:sympy.physics.mechanics.models.(g, t)->sympy.core.backend.symbols('g t')
A:sympy.physics.mechanics.models.I->sympy.physics.mechanics.ReferenceFrame('I')
A:sympy.physics.mechanics.models.O->sympy.physics.mechanics.Point('O')
A:sympy.physics.mechanics.models.P0->sympy.physics.mechanics.Point('P0')
A:sympy.physics.mechanics.models.Pa0->sympy.physics.mechanics.Particle('Pa0', P0, m[0])
A:sympy.physics.mechanics.models.Bi->sympy.physics.mechanics.ReferenceFrame('I').orientnew('B{}'.format(i), 'Axis', [q[i + 1], I.z])
A:sympy.physics.mechanics.models.Pi->points[-1].locatenew('P{}'.format(i + 1), l[i] * Bi.y)
A:sympy.physics.mechanics.models.Pai->sympy.physics.mechanics.Particle('Pa' + str(i + 1), Pi, m[i + 1])
A:sympy.physics.mechanics.models.F->sympy.physics.mechanics.dynamicsymbols('F')
sympy.physics.mechanics.models.multi_mass_spring_damper(n=1,apply_gravity=False,apply_external_forces=False)
sympy.physics.mechanics.models.n_link_pendulum_on_cart(n=1,cart_force=True,joint_torques=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/linearize.py----------------------------------------
A:sympy.physics.mechanics.linearize.self.f_0->Matrix(f_0)
A:sympy.physics.mechanics.linearize.self.f_1->Matrix(f_1)
A:sympy.physics.mechanics.linearize.self.f_2->Matrix(f_2)
A:sympy.physics.mechanics.linearize.self.f_3->Matrix(f_3)
A:sympy.physics.mechanics.linearize.self.f_4->Matrix(f_4)
A:sympy.physics.mechanics.linearize.self.f_c->Matrix(f_c)
A:sympy.physics.mechanics.linearize.self.f_v->Matrix(f_v)
A:sympy.physics.mechanics.linearize.self.f_a->Matrix(f_a)
A:sympy.physics.mechanics.linearize.self.q->Matrix(q)
A:sympy.physics.mechanics.linearize.self.u->Matrix(u)
A:sympy.physics.mechanics.linearize.self.q_i->none_handler(q_i)
A:sympy.physics.mechanics.linearize.self.q_d->none_handler(q_d)
A:sympy.physics.mechanics.linearize.self.u_i->none_handler(u_i)
A:sympy.physics.mechanics.linearize.self.u_d->none_handler(u_d)
A:sympy.physics.mechanics.linearize.self.r->none_handler(r)
A:sympy.physics.mechanics.linearize.self.lams->none_handler(lams)
A:sympy.physics.mechanics.linearize.self._qd->self.q.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.linearize.self._ud->self.u.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.linearize.dup_vars->set(self._qd).intersection(self.u)
A:sympy.physics.mechanics.linearize.self._qd_dup->Matrix([var if var not in dup_vars else Dummy() for var in self._qd])
A:sympy.physics.mechanics.linearize.l->len(self.f_c)
A:sympy.physics.mechanics.linearize.m->len(self.f_v)
A:sympy.physics.mechanics.linearize.n->len(self.q)
A:sympy.physics.mechanics.linearize.o->len(self.u)
A:sympy.physics.mechanics.linearize.s->len(self.r)
A:sympy.physics.mechanics.linearize.k->len(self.lams)
A:sympy.physics.mechanics.linearize.dims->namedtuple('dims', ['l', 'm', 'n', 'o', 's', 'k'])
A:sympy.physics.mechanics.linearize.self._dims->dims(l, m, n, o, s, k)
A:sympy.physics.mechanics.linearize.self._Pq->permutation_matrix(self.q, Matrix([self.q_i, self.q_d]))
A:sympy.physics.mechanics.linearize.self._Pqd->Matrix()
A:sympy.physics.mechanics.linearize.self._Pu->permutation_matrix(self.u, Matrix([self.u_i, self.u_d]))
A:sympy.physics.mechanics.linearize.self._Pud->Matrix()
A:sympy.physics.mechanics.linearize.P_col1->Matrix([self._Pqi, zeros(o + k, n - l)])
A:sympy.physics.mechanics.linearize.P_col2->Matrix([zeros(n, o - m), self._Pui, zeros(k, o - m)])
A:sympy.physics.mechanics.linearize.self.perm_mat->Matrix([self._Pqi, zeros(o + k, n - l)]).row_join(P_col2)
A:sympy.physics.mechanics.linearize.f_c_jac_q->self.f_c.jacobian(self.q)
A:sympy.physics.mechanics.linearize.self._C_0->eye(n)
A:sympy.physics.mechanics.linearize.f_v_jac_u->self.f_v.jacobian(self.u)
A:sympy.physics.mechanics.linearize.f_v_jac_q->self.f_v.jacobian(self.q)
A:sympy.physics.mechanics.linearize.self._C_1->zeros(o, n)
A:sympy.physics.mechanics.linearize.self._C_2->eye(o)
A:sympy.physics.mechanics.linearize.self._M_qq->Matrix()
A:sympy.physics.mechanics.linearize.self._A_qq->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uqc->Matrix()
A:sympy.physics.mechanics.linearize.self._A_uqc->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uqd->Matrix()
A:sympy.physics.mechanics.linearize.self._A_uqd->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uuc->Matrix()
A:sympy.physics.mechanics.linearize.self._A_uuc->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uud->Matrix()
A:sympy.physics.mechanics.linearize.self._A_uud->Matrix()
A:sympy.physics.mechanics.linearize.self._A_qu->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uld->Matrix()
A:sympy.physics.mechanics.linearize.self._B_u->Matrix()
A:sympy.physics.mechanics.linearize.col2->Matrix()
A:sympy.physics.mechanics.linearize.col3->Matrix([zeros(n + m, k), M_uld])
A:sympy.physics.mechanics.linearize.col1->Matrix()
A:sympy.physics.mechanics.linearize.M->Matrix().row_join(col3)
A:sympy.physics.mechanics.linearize.M_eq->msubs(M, op_point_dict)
A:sympy.physics.mechanics.linearize.r2c1->Matrix()
A:sympy.physics.mechanics.linearize.r3c1->Matrix()
A:sympy.physics.mechanics.linearize.r1c2->Matrix()
A:sympy.physics.mechanics.linearize.r2c2->Matrix()
A:sympy.physics.mechanics.linearize.r3c2->Matrix()
A:sympy.physics.mechanics.linearize.Amat->Matrix().row_join(col2)
A:sympy.physics.mechanics.linearize.Amat_eq->msubs(Amat, op_point_dict)
A:sympy.physics.mechanics.linearize.Bmat->zeros(n + m, s).col_join(B_u)
A:sympy.physics.mechanics.linearize.Bmat_eq->Matrix()
A:sympy.physics.mechanics.linearize.orig_vec->flatten(orig_vec)
A:sympy.physics.mechanics.linearize.per_vec->flatten(per_vec)
A:sympy.physics.mechanics.linearize.p_matrix->zeros(len(orig_vec))
sympy.physics.mechanics.Linearizer(self,f_0,f_1,f_2,f_3,f_4,f_c,f_v,f_a,q,u,q_i=None,q_d=None,u_i=None,u_d=None,r=None,lams=None)
sympy.physics.mechanics.linearize.Linearizer(self,f_0,f_1,f_2,f_3,f_4,f_c,f_v,f_a,q,u,q_i=None,q_d=None,u_i=None,u_d=None,r=None,lams=None)
sympy.physics.mechanics.linearize.Linearizer._form_block_matrices(self)
sympy.physics.mechanics.linearize.Linearizer._form_coefficient_matrices(self)
sympy.physics.mechanics.linearize.Linearizer._form_permutation_matrices(self)
sympy.physics.mechanics.linearize.Linearizer._setup(self)
sympy.physics.mechanics.linearize.Linearizer.linearize(self,op_point=None,A_and_B=False,simplify=False)
sympy.physics.mechanics.linearize.permutation_matrix(orig_vec,per_vec)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_kane.py----------------------------------------
A:sympy.physics.mechanics.tests.test_kane.(l, m, g)->symbols('l m g')
A:sympy.physics.mechanics.tests.test_kane.(q, u)->dynamicsymbols('q u')
A:sympy.physics.mechanics.tests.test_kane.P->Point('P')
A:sympy.physics.mechanics.tests.test_kane.(qd, ud)->dynamicsymbols('q u', 1)
A:sympy.physics.mechanics.tests.test_kane.(m, c, k)->symbols('m c k')
A:sympy.physics.mechanics.tests.test_kane.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_kane.pa->Particle('pa', P, m)
A:sympy.physics.mechanics.tests.test_kane.KM->KanesMethod(NED, q_ind, u_ind, q_dependent=q_dep, kd_eqs=kinematic_eqs, configuration_constraints=config_cons, velocity_constraints=[], u_dependent=[], u_auxiliary=[], explicit_kinematics=False)
A:sympy.physics.mechanics.tests.test_kane.(q1, q2, u1, u2)->dynamicsymbols('q1 q2 u1 u2')
A:sympy.physics.mechanics.tests.test_kane.(q1d, q2d, u1d, u2d)->dynamicsymbols('q1 q2 u1 u2', 1)
A:sympy.physics.mechanics.tests.test_kane.(m, c1, c2, k1, k2)->symbols('m c1 c2 k1 k2')
A:sympy.physics.mechanics.tests.test_kane.P1->Point('P1')
A:sympy.physics.mechanics.tests.test_kane.P2->Point('P2')
A:sympy.physics.mechanics.tests.test_kane.pa1->Particle('pa1', P1, m)
A:sympy.physics.mechanics.tests.test_kane.pa2->Particle('pa2', P2, m)
A:sympy.physics.mechanics.tests.test_kane.(m, l, g)->symbols('m l g')
A:sympy.physics.mechanics.tests.test_kane.(q1, q2, q3, u1, u2, u3)->dynamicsymbols('q1 q2 q3 u1 u2 u3')
A:sympy.physics.mechanics.tests.test_kane.(q1d, q2d, q3d, u1d, u2d, u3d)->dynamicsymbols('q1 q2 q3 u1 u2 u3', 1)
A:sympy.physics.mechanics.tests.test_kane.(r, m, g)->symbols('r m g')
A:sympy.physics.mechanics.tests.test_kane.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_kane.L->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x])
A:sympy.physics.mechanics.tests.test_kane.R->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y])
A:sympy.physics.mechanics.tests.test_kane.w_R_N_qd->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y]).ang_vel_in(N)
A:sympy.physics.mechanics.tests.test_kane.C->Point('O').locatenew('C', q1 * N.x)
A:sympy.physics.mechanics.tests.test_kane.Dmc->Point('O').locatenew('C', q1 * N.x).locatenew('Dmc', r * L.z)
A:sympy.physics.mechanics.tests.test_kane.I->inertia(L, m / 4 * r ** 2, m / 2 * r ** 2, m / 4 * r ** 2)
A:sympy.physics.mechanics.tests.test_kane.BodyD->RigidBody('BodyD', Dmc, R, m, (I, Dmc))
A:sympy.physics.mechanics.tests.test_kane.kdd->KanesMethod(NED, q_ind, u_ind, q_dependent=q_dep, kd_eqs=kinematic_eqs, configuration_constraints=config_cons, velocity_constraints=[], u_dependent=[], u_auxiliary=[], explicit_kinematics=False).kindiffdict()
A:sympy.physics.mechanics.tests.test_kane.rhs->rhs.subs(kdd).subs(kdd)
A:sympy.physics.mechanics.tests.test_kane.A_upright->ReferenceFrame('A').subs({r: 1, g: 1, m: 1}).subs({q1: 0, q2: 0, q3: 0, u1: 0, u3: 0})
A:sympy.physics.mechanics.tests.test_kane.(u4, u5, f1, f2)->dynamicsymbols('u4, u5, f1, f2')
A:sympy.physics.mechanics.tests.test_kane.(u4d, u5d)->dynamicsymbols('u4, u5', 1)
A:sympy.physics.mechanics.tests.test_kane.(fr, frstar)->KanesMethod(N, [q1, q2], [u1, u2], kindiffs).kanes_equations(bodyList, forceList)
A:sympy.physics.mechanics.tests.test_kane.fr->fr.subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0}).subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0})
A:sympy.physics.mechanics.tests.test_kane.frstar->frstar.subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0}).subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0})
A:sympy.physics.mechanics.tests.test_kane.KM2->KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3], kd_eqs=kd, u_auxiliary=[u4, u5])
A:sympy.physics.mechanics.tests.test_kane.(fr2, frstar2)->KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3], kd_eqs=kd, u_auxiliary=[u4, u5]).kanes_equations(BodyList, ForceList)
A:sympy.physics.mechanics.tests.test_kane.fr2->fr2.subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0}).subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0})
A:sympy.physics.mechanics.tests.test_kane.frstar2->frstar2.subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0}).subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0})
A:sympy.physics.mechanics.tests.test_kane.gravity->symbols('g')
A:sympy.physics.mechanics.tests.test_kane.(k, ls)->symbols('k ls')
A:sympy.physics.mechanics.tests.test_kane.(a, mA, mC)->symbols('a mA mC')
A:sympy.physics.mechanics.tests.test_kane.F->dynamicsymbols('F')
A:sympy.physics.mechanics.tests.test_kane.(Ix, Iy, Iz)->symbols('Ix Iy Iz')
A:sympy.physics.mechanics.tests.test_kane.(q1, q2)->dynamicsymbols('q1 q2')
A:sympy.physics.mechanics.tests.test_kane.(q1d, q2d)->dynamicsymbols('q1 q2', 1)
A:sympy.physics.mechanics.tests.test_kane.(u1, u2)->dynamicsymbols('u1 u2')
A:sympy.physics.mechanics.tests.test_kane.(u1d, u2d)->dynamicsymbols('u1 u2', 1)
A:sympy.physics.mechanics.tests.test_kane.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_kane.O->Point('O')
A:sympy.physics.mechanics.tests.test_kane.Ao->Point('O').locatenew('C', q1 * N.x).locatenew('Ao', a * A.y)
A:sympy.physics.mechanics.tests.test_kane.Cart->Particle('Cart', C, mC)
A:sympy.physics.mechanics.tests.test_kane.Pendulum->RigidBody('Pendulum', Ao, A, mA, (inertia(A, Ix, Iy, Iz), C))
A:sympy.physics.mechanics.tests.test_kane.km->KanesMethod(N, [q1, q2], [u1, u2], kindiffs)
A:sympy.physics.mechanics.tests.test_kane.NED->ReferenceFrame('NED')
A:sympy.physics.mechanics.tests.test_kane.NED_o->Point('NED_o')
A:sympy.physics.mechanics.tests.test_kane.q_att->dynamicsymbols('lambda_0:4', real=True)
A:sympy.physics.mechanics.tests.test_kane.B->ReferenceFrame('NED').orientnew('B', 'Quaternion', q_att)
A:sympy.physics.mechanics.tests.test_kane.q_pos->dynamicsymbols('B_x:z')
A:sympy.physics.mechanics.tests.test_kane.B_cm->Point('NED_o').locatenew('B_cm', q_pos[0] * B.x + q_pos[1] * B.y + q_pos[2] * B.z)
A:sympy.physics.mechanics.tests.test_kane.B_ang_vel->ReferenceFrame('NED').orientnew('B', 'Quaternion', q_att).ang_vel_in(NED)
A:sympy.physics.mechanics.tests.test_kane.(P, Q, R)->dynamicsymbols('P Q R')
A:sympy.physics.mechanics.tests.test_kane.B_ang_vel_kd->(B.ang_vel_in(NED) - B_ang_vel).simplify()
A:sympy.physics.mechanics.tests.test_kane.B_cm_vel->Point('NED_o').locatenew('B_cm', q_pos[0] * B.x + q_pos[1] * B.y + q_pos[2] * B.z).vel(NED)
A:sympy.physics.mechanics.tests.test_kane.(U, V, W)->dynamicsymbols('U V W')
A:sympy.physics.mechanics.tests.test_kane.q_att_vec->Matrix(q_att)
A:sympy.physics.mechanics.tests.test_kane.M_B->symbols('M_B')
A:sympy.physics.mechanics.tests.test_kane.J_B->J_B.subs({S('J_B_xy'): 0, S('J_B_yz'): 0}).subs({S('J_B_xy'): 0, S('J_B_yz'): 0})
A:sympy.physics.mechanics.tests.test_kane.RB->RigidBody('RB', B_cm, B, M_B, (J_B, B_cm))
A:sympy.physics.mechanics.tests.test_kane.n_ops_implicit->sum([x.count_ops() for x in KM.forcing_full] + [x.count_ops() for x in KM.mass_matrix_full])
A:sympy.physics.mechanics.tests.test_kane.n_ops_explicit->sum([x.count_ops() for x in KM.forcing_full] + [x.count_ops() for x in KM.mass_matrix_full])
A:sympy.physics.mechanics.tests.test_kane.lhs_candidate->simplify(mass_matrix_kin_implicit * qdot_candidate).subs({q_att_vec[0]: lambda_0_sol})
sympy.physics.mechanics.tests.test_kane.test_aux()
sympy.physics.mechanics.tests.test_kane.test_implicit_kinematics()
sympy.physics.mechanics.tests.test_kane.test_input_format()
sympy.physics.mechanics.tests.test_kane.test_invalid_coordinates()
sympy.physics.mechanics.tests.test_kane.test_one_dof()
sympy.physics.mechanics.tests.test_kane.test_parallel_axis()
sympy.physics.mechanics.tests.test_kane.test_pend()
sympy.physics.mechanics.tests.test_kane.test_rolling_disc()
sympy.physics.mechanics.tests.test_kane.test_two_dof()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_method.py----------------------------------------
sympy.physics.mechanics.tests.test_method.test_method()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_jointsmethod.py----------------------------------------
A:sympy.physics.mechanics.tests.test_jointsmethod.P->PinJoint('P', C, b, speeds=q.diff(t), coordinates=q, child_point=-l * b.x, joint_axis=C.z)
A:sympy.physics.mechanics.tests.test_jointsmethod.C->Body('C')
A:sympy.physics.mechanics.tests.test_jointsmethod.Pin->PinJoint('P1', P, C)
A:sympy.physics.mechanics.tests.test_jointsmethod.(C_ixx, g)->symbols('C_ixx g')
A:sympy.physics.mechanics.tests.test_jointsmethod.(q, u)->dynamicsymbols('q u')
A:sympy.physics.mechanics.tests.test_jointsmethod.method->JointsMethod(link1, joint1, joint2, joint3)
A:sympy.physics.mechanics.tests.test_jointsmethod.soln->JointsMethod(link1, joint1, joint2, joint3).form_eoms()
A:sympy.physics.mechanics.tests.test_jointsmethod.T->Body('T')
A:sympy.physics.mechanics.tests.test_jointsmethod.P1->PinJoint('P1', P, C, q, u)
A:sympy.physics.mechanics.tests.test_jointsmethod.P2->PrismaticJoint('P2', C, T, q, u)
A:sympy.physics.mechanics.tests.test_jointsmethod.(q1, q2)->dynamicsymbols('q1 q2')
A:sympy.physics.mechanics.tests.test_jointsmethod.(u1, u2)->dynamicsymbols('u1 u2')
A:sympy.physics.mechanics.tests.test_jointsmethod.(m, l, g)->symbols('m l g')
A:sympy.physics.mechanics.tests.test_jointsmethod.PartP->Body('P', mass=m)
A:sympy.physics.mechanics.tests.test_jointsmethod.PartR->Body('R', mass=m)
A:sympy.physics.mechanics.tests.test_jointsmethod.J1->PinJoint('J1', C, rod, coordinates=theta, speeds=omega, child_point=-lA * rod.z, joint_axis=C.y)
A:sympy.physics.mechanics.tests.test_jointsmethod.J2->PinJoint('J2', rod, plate, coordinates=phi, speeds=alpha, parent_point=(lB - lA) * rod.z, joint_axis=rod.z)
A:sympy.physics.mechanics.tests.test_jointsmethod.(q1, q2, u1, u2)->dynamicsymbols('q1 q2 u1 u2')
A:sympy.physics.mechanics.tests.test_jointsmethod.(m, c1, c2, k1, k2)->symbols('m c1 c2 k1 k2')
A:sympy.physics.mechanics.tests.test_jointsmethod.W->Body('W')
A:sympy.physics.mechanics.tests.test_jointsmethod.B1->Body('B1', mass=m)
A:sympy.physics.mechanics.tests.test_jointsmethod.B2->Body('B2', mass=m)
A:sympy.physics.mechanics.tests.test_jointsmethod.rhs->MM.LUsolve(forcing)
A:sympy.physics.mechanics.tests.test_jointsmethod.(l, m, g)->symbols('l m g')
A:sympy.physics.mechanics.tests.test_jointsmethod.b->Body('b', mass=m)
A:sympy.physics.mechanics.tests.test_jointsmethod.q->Matrix([q1, q2, q3])
A:sympy.physics.mechanics.tests.test_jointsmethod.(mA, mB, lA, lB, IAxx, IBxx, IByy, IBzz, g)->symbols('mA, mB, lA, lB, IAxx, IBxx, IByy, IBzz, g')
A:sympy.physics.mechanics.tests.test_jointsmethod.(theta, phi, omega, alpha)->dynamicsymbols('theta phi omega alpha')
A:sympy.physics.mechanics.tests.test_jointsmethod.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_jointsmethod.B->ReferenceFrame('B')
A:sympy.physics.mechanics.tests.test_jointsmethod.rod->Body('rod', mass=mA, frame=A, central_inertia=inertia(A, IAxx, IAxx, 0))
A:sympy.physics.mechanics.tests.test_jointsmethod.plate->Body('plate', mass=mB, frame=B, central_inertia=inertia(B, IBxx, IByy, IBzz))
A:sympy.physics.mechanics.tests.test_jointsmethod.(q1, q2, q3, u1, u2, u3)->dynamicsymbols('q1:4, u1:4')
A:sympy.physics.mechanics.tests.test_jointsmethod.(l1, l2, l3, l4, rho)->symbols('l1:5, rho')
A:sympy.physics.mechanics.tests.test_jointsmethod.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_jointsmethod.link1->Body('Link1', frame=N, mass=rho * l1, central_inertia=inertias[0])
A:sympy.physics.mechanics.tests.test_jointsmethod.link2->Body('Link2', mass=rho * l2, central_inertia=inertias[1])
A:sympy.physics.mechanics.tests.test_jointsmethod.link3->Body('Link3', mass=rho * l3, central_inertia=inertias[2])
A:sympy.physics.mechanics.tests.test_jointsmethod.link4->Body('Link4', mass=rho * l4, central_inertia=inertias[3])
A:sympy.physics.mechanics.tests.test_jointsmethod.joint1->PinJoint('J1', link1, link2, coordinates=q1, speeds=u1, joint_axis=link1.z, parent_point=l1 / 2 * link1.x, child_point=-l2 / 2 * link2.x)
A:sympy.physics.mechanics.tests.test_jointsmethod.joint2->PinJoint('J2', link2, link3, coordinates=q2, speeds=u2, joint_axis=link2.z, parent_point=l2 / 2 * link2.x, child_point=-l3 / 2 * link3.x)
A:sympy.physics.mechanics.tests.test_jointsmethod.joint3->PinJoint('J3', link3, link4, coordinates=q3, speeds=u3, joint_axis=link3.z, parent_point=l3 / 2 * link3.x, child_point=-l4 / 2 * link4.x)
A:sympy.physics.mechanics.tests.test_jointsmethod.fh->Matrix([loop.dot(link1.x), loop.dot(link1.y)])
A:sympy.physics.mechanics.tests.test_jointsmethod.qdots->solve(method.kdes, [q1.diff(t), q2.diff(t), q3.diff(t)])
A:sympy.physics.mechanics.tests.test_jointsmethod.fhd->Matrix([loop.dot(link1.x), loop.dot(link1.y)]).diff(t).subs(qdots)
A:sympy.physics.mechanics.tests.test_jointsmethod.kane->KanesMethod(method.frame, q_ind=[q1], u_ind=[u1], q_dependent=[q2, q3], u_dependent=[u2, u3], kd_eqs=method.kdes, configuration_constraints=fh, velocity_constraints=fhd, forcelist=method.loads, bodies=method.bodies)
A:sympy.physics.mechanics.tests.test_jointsmethod.(fr, frs)->KanesMethod(method.frame, q_ind=[q1], u_ind=[u1], q_dependent=[q2, q3], u_dependent=[u2, u3], kd_eqs=method.kdes, configuration_constraints=fh, velocity_constraints=fhd, forcelist=method.loads, bodies=method.bodies).kanes_equations()
A:sympy.physics.mechanics.tests.test_jointsmethod.p->Matrix([l1, l2, l3, l4, rho])
A:sympy.physics.mechanics.tests.test_jointsmethod.u->Matrix([u1, u2, u3])
A:sympy.physics.mechanics.tests.test_jointsmethod.eval_m->lambdify((q, p), kane.mass_matrix)
A:sympy.physics.mechanics.tests.test_jointsmethod.eval_f->lambdify((q, u, p), kane.forcing)
A:sympy.physics.mechanics.tests.test_jointsmethod.eval_fhd->lambdify((q, u, p), fhd)
A:sympy.physics.mechanics.tests.test_jointsmethod.mass_check->Matrix([[34.52709815256506, 7.003948798374735, -4.939690970641498], [-2.203792703880936e-14, 0.2071702479957077, 0.2842917573033711], [-0.1300000000000123, -0.008836934896046506, 0.1864891330060847]])
A:sympy.physics.mechanics.tests.test_jointsmethod.forcing_check->Matrix([[-0.031211821321648], [-0.00066022608181], [0.001813559741243]])
sympy.physics.mechanics.tests.test_jointsmethod.test_chaos_pendulum()
sympy.physics.mechanics.tests.test_jointsmethod.test_complete_simple_double_pendulum()
sympy.physics.mechanics.tests.test_jointsmethod.test_four_bar_linkage_with_manual_constraints()
sympy.physics.mechanics.tests.test_jointsmethod.test_jointmethod_duplicate_coordinates_speeds()
sympy.physics.mechanics.tests.test_jointsmethod.test_jointsmethod()
sympy.physics.mechanics.tests.test_jointsmethod.test_simple_pedulum()
sympy.physics.mechanics.tests.test_jointsmethod.test_two_dof_joints()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_body.py----------------------------------------
A:sympy.physics.mechanics.tests.test_body.body->Body('body')
A:sympy.physics.mechanics.tests.test_body.point->Body('rigidbody_body', rigidbody_masscenter, rigidbody_mass, rigidbody_frame, body_inertia).masscenter.locatenew('rigidbody_body_point0', l * rigid_body.frame.x)
A:sympy.physics.mechanics.tests.test_body.(ixx, iyy, izz)->symbols('body_ixx body_iyy body_izz')
A:sympy.physics.mechanics.tests.test_body.(ixy, iyz, izx)->symbols('body_ixy body_iyz body_izx')
A:sympy.physics.mechanics.tests.test_body.rigidbody_masscenter->Point('rigidbody_masscenter')
A:sympy.physics.mechanics.tests.test_body.rigidbody_mass->Symbol('rigidbody_mass')
A:sympy.physics.mechanics.tests.test_body.rigidbody_frame->ReferenceFrame('rigidbody_frame')
A:sympy.physics.mechanics.tests.test_body.body_inertia->inertia(rigidbody_frame, 1, 0, 0)
A:sympy.physics.mechanics.tests.test_body.rigid_body->Body('rigidbody_body', rigidbody_masscenter, rigidbody_mass, rigidbody_frame, body_inertia)
A:sympy.physics.mechanics.tests.test_body.particle_masscenter->Point('particle_masscenter')
A:sympy.physics.mechanics.tests.test_body.particle_mass->Symbol('particle_mass')
A:sympy.physics.mechanics.tests.test_body.particle_frame->ReferenceFrame('particle_frame')
A:sympy.physics.mechanics.tests.test_body.particle_body->Body('particle_body', particle_masscenter, particle_mass, particle_frame)
A:sympy.physics.mechanics.tests.test_body.particle_body.central_inertia->inertia(particle_frame, 1, 1, 1)
A:sympy.physics.mechanics.tests.test_body.a->symbols('a')
A:sympy.physics.mechanics.tests.test_body.l->Symbol('l')
A:sympy.physics.mechanics.tests.test_body.Fa->Symbol('Fa')
A:sympy.physics.mechanics.tests.test_body.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_body.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_body.B->Body('B')
A:sympy.physics.mechanics.tests.test_body.(a, b)->symbols('a b')
A:sympy.physics.mechanics.tests.test_body.P->Body('P', masscenter=o, mass=m, frame=N)
A:sympy.physics.mechanics.tests.test_body.(f, g)->symbols('f g')
A:sympy.physics.mechanics.tests.test_body.(q, x, v1, v2)->dynamicsymbols('q x v1 v2')
A:sympy.physics.mechanics.tests.test_body.P1->Point('P1')
A:sympy.physics.mechanics.tests.test_body.P2->Point('P2')
A:sympy.physics.mechanics.tests.test_body.B1->Body('B1')
A:sympy.physics.mechanics.tests.test_body.B2->Body('B2')
A:sympy.physics.mechanics.tests.test_body.t->symbols('t')
A:sympy.physics.mechanics.tests.test_body.q->dynamicsymbols('q')
A:sympy.physics.mechanics.tests.test_body.W->Body('W')
A:sympy.physics.mechanics.tests.test_body.b->Body('b')
A:sympy.physics.mechanics.tests.test_body.(q1, q2)->dynamicsymbols('q1 q2')
A:sympy.physics.mechanics.tests.test_body.(k, c, g, kT)->symbols('k c g kT')
A:sympy.physics.mechanics.tests.test_body.(F, T)->dynamicsymbols('F T')
A:sympy.physics.mechanics.tests.test_body.(m, Ix, Iy, Iz, a, b)->symbols('m, I_x, I_y, I_z, a, b')
A:sympy.physics.mechanics.tests.test_body.Io->inertia(N, Ix, Iy, Iz)
A:sympy.physics.mechanics.tests.test_body.o->Point('o')
A:sympy.physics.mechanics.tests.test_body.p->Point('o').locatenew('p', a * N.x + b * N.y)
A:sympy.physics.mechanics.tests.test_body.R->Body('R', masscenter=o, frame=N, mass=m, central_inertia=Io)
A:sympy.physics.mechanics.tests.test_body.Ip->Body('P', masscenter=o, mass=m, frame=N).parallel_axis(p, N)
A:sympy.physics.mechanics.tests.test_body.Ip_expected->inertia(N, m * b ** 2, m * a ** 2, m * (a ** 2 + b ** 2), ixy=-m * a * b)
sympy.physics.mechanics.tests.test_body.test_apply_force()
sympy.physics.mechanics.tests.test_body.test_apply_force_multiple_one_point()
sympy.physics.mechanics.tests.test_body.test_apply_loads_on_multi_degree_freedom_holonomic_system()
sympy.physics.mechanics.tests.test_body.test_apply_torque()
sympy.physics.mechanics.tests.test_body.test_body_add_force()
sympy.physics.mechanics.tests.test_body.test_body_add_torque()
sympy.physics.mechanics.tests.test_body.test_body_ang_vel()
sympy.physics.mechanics.tests.test_body.test_body_axis()
sympy.physics.mechanics.tests.test_body.test_body_dcm()
sympy.physics.mechanics.tests.test_body.test_body_masscenter_vel()
sympy.physics.mechanics.tests.test_body.test_clear_load()
sympy.physics.mechanics.tests.test_body.test_custom_rigid_body()
sympy.physics.mechanics.tests.test_body.test_default()
sympy.physics.mechanics.tests.test_body.test_parallel_axis()
sympy.physics.mechanics.tests.test_body.test_particle_body()
sympy.physics.mechanics.tests.test_body.test_particle_body_add_force()
sympy.physics.mechanics.tests.test_body.test_remove_load()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_lagrange.py----------------------------------------
A:sympy.physics.mechanics.tests.test_lagrange.(l, m, g)->symbols('l m g')
A:sympy.physics.mechanics.tests.test_lagrange.q->symbols('q')
A:sympy.physics.mechanics.tests.test_lagrange.P->Point('O').locatenew('P', l * A.x)
A:sympy.physics.mechanics.tests.test_lagrange.L->N.orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x])
A:sympy.physics.mechanics.tests.test_lagrange.(y, theta)->dynamicsymbols('y theta')
A:sympy.physics.mechanics.tests.test_lagrange.(yd, thetad)->dynamicsymbols('y theta', 1)
A:sympy.physics.mechanics.tests.test_lagrange.(m, g, R, l, alpha)->symbols('m g R l alpha')
A:sympy.physics.mechanics.tests.test_lagrange.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_lagrange.A->ReferenceFrame('N').orientnew('A', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_lagrange.B->ReferenceFrame('N').orientnew('B', 'Axis', [q2, N.z])
A:sympy.physics.mechanics.tests.test_lagrange.Do->Point('Do')
A:sympy.physics.mechanics.tests.test_lagrange.D->RigidBody('D', Do, B, m, (I, Do))
A:sympy.physics.mechanics.tests.test_lagrange.m->LagrangesMethod(L, q, hol_coneqs=hol_coneqs)
A:sympy.physics.mechanics.tests.test_lagrange.rhs->LagrangesMethod(L, q, hol_coneqs=hol_coneqs).rhs()
A:sympy.physics.mechanics.tests.test_lagrange.(q, u)->dynamicsymbols('q u')
A:sympy.physics.mechanics.tests.test_lagrange.(qd, ud)->dynamicsymbols('q u ', 1)
A:sympy.physics.mechanics.tests.test_lagrange.O->Point('O')
A:sympy.physics.mechanics.tests.test_lagrange.Pa->Particle('Pa', P, m)
A:sympy.physics.mechanics.tests.test_lagrange.lm->LagrangesMethod(L, [q1, q2], bodies=[ParP, ParR])
A:sympy.physics.mechanics.tests.test_lagrange.RHS->LagrangesMethod(Lag, q).rhs()
A:sympy.physics.mechanics.tests.test_lagrange.(q1, q2)->dynamicsymbols('q1 q2')
A:sympy.physics.mechanics.tests.test_lagrange.(q1d, q2d)->dynamicsymbols('q1 q2', 1)
A:sympy.physics.mechanics.tests.test_lagrange.(L, m, t)->symbols('L, m, t')
A:sympy.physics.mechanics.tests.test_lagrange.pN->Point('N*')
A:sympy.physics.mechanics.tests.test_lagrange.pP->Particle('pP', P, m)
A:sympy.physics.mechanics.tests.test_lagrange.f_c->Matrix([q1 ** 2 + q2 ** 2 - L ** 2])
A:sympy.physics.mechanics.tests.test_lagrange.Lag->Lagrangian(N, BodyD)
A:sympy.physics.mechanics.tests.test_lagrange.LM->LagrangesMethod(Lag, [q1, q2], hol_coneqs=f_c, forcelist=[(P, m * g * N.x)], frame=N)
A:sympy.physics.mechanics.tests.test_lagrange.eom_sol->Matrix([[m * Derivative(q1, t, t) - 9.8 * m + 2 * lam1 * q1], [m * Derivative(q2, t, t) + 2 * lam1 * q2]])
A:sympy.physics.mechanics.tests.test_lagrange.lam_sol->Matrix([(19.6 * q1 + 2 * q1d ** 2 + 2 * q2d ** 2) / (4 * q1 ** 2 / m + 4 * q2 ** 2 / m)])
A:sympy.physics.mechanics.tests.test_lagrange.(q1dd, q2dd)->dynamicsymbols('q1 q2', 2)
A:sympy.physics.mechanics.tests.test_lagrange.(u1, u2)->dynamicsymbols('u1 u2')
A:sympy.physics.mechanics.tests.test_lagrange.(u1d, u2d)->dynamicsymbols('u1 u2', 1)
A:sympy.physics.mechanics.tests.test_lagrange.R->N.orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y])
A:sympy.physics.mechanics.tests.test_lagrange.ParP->Particle('ParP', P, m)
A:sympy.physics.mechanics.tests.test_lagrange.ParR->Particle('ParR', R, m)
A:sympy.physics.mechanics.tests.test_lagrange.(q1, q2, q3)->dynamicsymbols('q1 q2 q3')
A:sympy.physics.mechanics.tests.test_lagrange.(q1d, q2d, q3d)->dynamicsymbols('q1 q2 q3', 1)
A:sympy.physics.mechanics.tests.test_lagrange.(r, m, g)->symbols('r m g')
A:sympy.physics.mechanics.tests.test_lagrange.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_lagrange.C->Point('C')
A:sympy.physics.mechanics.tests.test_lagrange.Dmc->Point('C').locatenew('Dmc', r * L.z)
A:sympy.physics.mechanics.tests.test_lagrange.I->inertia(L, m / 4 * r ** 2, m / 2 * r ** 2, m / 4 * r ** 2)
A:sympy.physics.mechanics.tests.test_lagrange.BodyD->RigidBody('BodyD', Dmc, R, m, (I, Dmc))
A:sympy.physics.mechanics.tests.test_lagrange.q1->Function('q1')
A:sympy.physics.mechanics.tests.test_lagrange.q2->Function('q2')
A:sympy.physics.mechanics.tests.test_lagrange.q3->Function('q3')
A:sympy.physics.mechanics.tests.test_lagrange.l->LagrangesMethod(Lag, q)
A:sympy.physics.mechanics.tests.test_lagrange.t->symbols('t')
sympy.physics.mechanics.tests.test_lagrange.test_disc_on_an_incline_plane()
sympy.physics.mechanics.tests.test_lagrange.test_dub_pen()
sympy.physics.mechanics.tests.test_lagrange.test_invalid_coordinates()
sympy.physics.mechanics.tests.test_lagrange.test_nonminimal_pendulum()
sympy.physics.mechanics.tests.test_lagrange.test_rolling_disc()
sympy.physics.mechanics.tests.test_lagrange.test_simp_pen()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_joint.py----------------------------------------
A:sympy.physics.mechanics.tests.test_joint.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_joint.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_joint.P->Body('P')
A:sympy.physics.mechanics.tests.test_joint.C->Body('C', frame=N)
A:sympy.physics.mechanics.tests.test_joint.parent->Body('parent')
A:sympy.physics.mechanics.tests.test_joint.child->Body('child')
A:sympy.physics.mechanics.tests.test_joint.(q, u, qj, uj)->dynamicsymbols('q u q_J u_J')
A:sympy.physics.mechanics.tests.test_joint.(q0j, q1j, q2j, q3j, u0j, u1j, u2j, u3j)->dynamicsymbols('q0:4_J u0:4_J')
A:sympy.physics.mechanics.tests.test_joint.(q0, q1, q2, q3, u0, u1, u2, u3)->dynamicsymbols('q0:4 u0:4')
A:sympy.physics.mechanics.tests.test_joint.(_, _, P, C)->_generate_body()
A:sympy.physics.mechanics.tests.test_joint.J->PlanarJoint('J', P, C, q0, [q1, q2], u0, [u1, u2], parent_point=l1 * N.z, child_point=-l2 * C.z, parent_interframe=N.z + N.y / sqrt(3), child_interframe=A.z + A.y / sqrt(3))
A:sympy.physics.mechanics.tests.test_joint.(l, m)->symbols('l m')
A:sympy.physics.mechanics.tests.test_joint.(q, u)->dynamicsymbols('q_J, u_J')
A:sympy.physics.mechanics.tests.test_joint.Pj->PinJoint('J', P, C)
A:sympy.physics.mechanics.tests.test_joint.P1->Body('P1')
A:sympy.physics.mechanics.tests.test_joint.C1->Body('C1')
A:sympy.physics.mechanics.tests.test_joint.Pint->ReferenceFrame('P_int')
A:sympy.physics.mechanics.tests.test_joint.J1->PinJoint('J1', C, rod, coordinates=theta, speeds=omega, child_point=lA * A.z, joint_axis=N.y)
A:sympy.physics.mechanics.tests.test_joint.(N, A, P, C, Pint, Cint)->_generate_body(True)
A:sympy.physics.mechanics.tests.test_joint.parent_point->Body('P').masscenter.locatenew('p', N.y + N.z)
A:sympy.physics.mechanics.tests.test_joint.child_point->Point('p')
A:sympy.physics.mechanics.tests.test_joint.(q1, q2)->dynamicsymbols('q1 q2')
A:sympy.physics.mechanics.tests.test_joint.(u1, u2)->dynamicsymbols('u1 u2')
A:sympy.physics.mechanics.tests.test_joint.(m, l)->symbols('m l')
A:sympy.physics.mechanics.tests.test_joint.B->ReferenceFrame('B')
A:sympy.physics.mechanics.tests.test_joint.PartP->Body('P', frame=A, mass=m)
A:sympy.physics.mechanics.tests.test_joint.PartR->Body('R', frame=B, mass=m)
A:sympy.physics.mechanics.tests.test_joint.J2->PinJoint('J2', rod, plate, coordinates=phi, speeds=alpha, parent_point=lC * A.z, joint_axis=A.z)
A:sympy.physics.mechanics.tests.test_joint.(mA, mB, lA, lB, h)->symbols('mA, mB, lA, lB, h')
A:sympy.physics.mechanics.tests.test_joint.(theta, phi, omega, alpha)->dynamicsymbols('theta phi omega alpha')
A:sympy.physics.mechanics.tests.test_joint.rod->Body('rod', frame=A, mass=mA)
A:sympy.physics.mechanics.tests.test_joint.plate->Body('plate', mass=mB, frame=B)
A:sympy.physics.mechanics.tests.test_joint.(N, A, P, C)->_generate_body()
A:sympy.physics.mechanics.tests.test_joint.Cint->ReferenceFrame('Cint')
A:sympy.physics.mechanics.tests.test_joint.pin->PinJoint('J', P, C, parent_joint_pos=N.x + N.y, child_joint_pos=C.y - C.z)
A:sympy.physics.mechanics.tests.test_joint.angle->ReferenceFrame('A').ang_vel_in(N).angle_between(A.x + A.y - A.z)
A:sympy.physics.mechanics.tests.test_joint.(m, n)->symbols('m n')
A:sympy.physics.mechanics.tests.test_joint.f->sympy.physics.mechanics.joint.Joint._create_aligned_interframe(P, -P.x - P.y - P.z, P.x + P.y + P.z)
A:sympy.physics.mechanics.tests.test_joint.N_R_A->Matrix([[-sin(q0) * sin(q2) - sin(q1) * cos(q0) * cos(q2), sin(q0) * sin(q1) * cos(q2) - sin(q2) * cos(q0), cos(q1) * cos(q2)], [-sin(q0) * cos(q2) + sin(q1) * sin(q2) * cos(q0), -sin(q0) * sin(q1) * sin(q2) - cos(q0) * cos(q2), -sin(q2) * cos(q1)], [cos(q0) * cos(q1), -sin(q0) * cos(q1), sin(q1)]])
A:sympy.physics.mechanics.tests.test_joint.joint->PinJoint('J', P, C, parent_interframe=parent_interframe)
A:sympy.physics.mechanics.tests.test_joint.q->dynamicsymbols('q')
A:sympy.physics.mechanics.tests.test_joint.parent_interframe->ReferenceFrame('int_frame')
A:sympy.physics.mechanics.tests.test_joint.child_interframe->ReferenceFrame('int_frame')
A:sympy.physics.mechanics.tests.test_joint.S->SphericalJoint('S', P, C, coordinates=[q0, q1, q2], speeds=[u0, u1, u2], parent_point=N.x + N.z, child_point=-A.x + A.y, parent_interframe=Pint, child_interframe=Cint, rot_type='SPaCe', rot_order='zxy')
A:sympy.physics.mechanics.tests.test_joint.(q0_def, q1_def, u0_def, u1_def)->dynamicsymbols('q0:2_J, u0:2_J')
A:sympy.physics.mechanics.tests.test_joint.Cj->PlanarJoint('J', P, C, rotation_coordinate=q0, planar_coordinates=[q1, q2], planar_speeds=[u1, u2], parent_point=m * N.x, child_point=l * A.y, parent_interframe=Pint, child_interframe=Cint)
A:sympy.physics.mechanics.tests.test_joint.(q0, q1, u0, u1)->dynamicsymbols('q0:2, u0:2')
A:sympy.physics.mechanics.tests.test_joint.(q0_def, q1_def, q2_def)->dynamicsymbols('q0:3_J')
A:sympy.physics.mechanics.tests.test_joint.(u0_def, u1_def, u2_def)->dynamicsymbols('u0:3_J')
A:sympy.physics.mechanics.tests.test_joint.(q0, q1, q2, u0, u1, u2)->dynamicsymbols('q0:3, u0:3')
A:sympy.physics.mechanics.tests.test_joint.(l1, l2)->symbols('l1:3')
A:sympy.physics.mechanics.tests.test_joint.(q0, q1, q2)->dynamicsymbols('q0:3')
A:sympy.physics.mechanics.tests.test_joint.(u0, u1, u2)->dynamicsymbols('q0:3', 1)
A:sympy.physics.mechanics.tests.test_joint.(q0s, q1s, q2s, u0s, u1s, u2s)->dynamicsymbols('q0:3_S, u0:3_S')
A:sympy.physics.mechanics.tests.test_joint.(q0, q1, q2, q3, u0, u1, u2, u4)->dynamicsymbols('q0:4, u0:4')
A:sympy.physics.mechanics.tests.test_joint.N_w_A->Matrix([[u1 * sin(q0) - u2 * cos(q0) * cos(q1)], [u1 * cos(q0) + u2 * sin(q0) * cos(q1)], [u0 - u2 * sin(q1)]])
A:sympy.physics.mechanics.tests.test_joint.N_v_Co->Matrix([[u0 - u2 * sin(q1)], [u0 - u2 * sin(q1)], [sqrt(2) * (-u1 * sin(q0 + pi / 4) + u2 * cos(q0 + pi / 4) * cos(q1))]])
A:sympy.physics.mechanics.tests.test_joint.W->WeldJoint('W', P, C, parent_point=l * P.frame.x, child_point=m * C.frame.y, parent_interframe=Pint)
A:sympy.physics.mechanics.tests.test_joint.slider->PrismaticJoint('J', P, C, parent_joint_pos=N.z + N.y, child_joint_pos=C.y - C.x)
sympy.physics.mechanics.tests.test_joint._generate_body(interframe=False)
sympy.physics.mechanics.tests.test_joint.test_Joint()
sympy.physics.mechanics.tests.test_joint.test_coordinate_generation()
sympy.physics.mechanics.tests.test_joint.test_create_aligned_frame_pi()
sympy.physics.mechanics.tests.test_joint.test_cylindrical_joint()
sympy.physics.mechanics.tests.test_joint.test_deprecated_joint_pos()
sympy.physics.mechanics.tests.test_joint.test_deprecated_parent_child_axis()
sympy.physics.mechanics.tests.test_joint.test_locate_joint_frame()
sympy.physics.mechanics.tests.test_joint.test_locate_joint_pos()
sympy.physics.mechanics.tests.test_joint.test_pin_joint()
sympy.physics.mechanics.tests.test_joint.test_pin_joint_arbitrary_axis()
sympy.physics.mechanics.tests.test_joint.test_pin_joint_axis()
sympy.physics.mechanics.tests.test_joint.test_pin_joint_chaos_pendulum()
sympy.physics.mechanics.tests.test_joint.test_pin_joint_double_pendulum()
sympy.physics.mechanics.tests.test_joint.test_pin_joint_interframe()
sympy.physics.mechanics.tests.test_joint.test_pin_joint_joint_axis()
sympy.physics.mechanics.tests.test_joint.test_planar_joint()
sympy.physics.mechanics.tests.test_joint.test_planar_joint_advanced()
sympy.physics.mechanics.tests.test_joint.test_sliding_joint()
sympy.physics.mechanics.tests.test_joint.test_sliding_joint_arbitrary_axis()
sympy.physics.mechanics.tests.test_joint.test_spherical_joint()
sympy.physics.mechanics.tests.test_joint.test_spherical_joint_coords()
sympy.physics.mechanics.tests.test_joint.test_spherical_joint_orient_body()
sympy.physics.mechanics.tests.test_joint.test_spherical_joint_orient_space()
sympy.physics.mechanics.tests.test_joint.test_spherical_joint_speeds_as_derivative_terms()
sympy.physics.mechanics.tests.test_joint.test_weld_joint()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_kane2.py----------------------------------------
A:sympy.physics.mechanics.tests.test_kane2.(t, r, m, g, I, J)->symbols('t r m g I J')
A:sympy.physics.mechanics.tests.test_kane2.(Fx, Fy, Fz)->symbols('Fx Fy Fz')
A:sympy.physics.mechanics.tests.test_kane2.q->dynamicsymbols('q:5')
A:sympy.physics.mechanics.tests.test_kane2.u->dynamicsymbols('u:5')
A:sympy.physics.mechanics.tests.test_kane2.ud_zero->dict(zip(ud, [0.0] * len(ud)))
A:sympy.physics.mechanics.tests.test_kane2.ua->dynamicsymbols('ua:3')
A:sympy.physics.mechanics.tests.test_kane2.ua_zero->dict(zip(ua, [0.0] * len(ua)))
A:sympy.physics.mechanics.tests.test_kane2.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_kane2.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_kane2.B->A.orientnew('B_prime', 'Axis', [q[0], A.z]).orientnew('B', 'Axis', [pi / 2 - q[1], B_prime.x])
A:sympy.physics.mechanics.tests.test_kane2.C->A.orientnew('B_prime', 'Axis', [q[0], A.z]).orientnew('B', 'Axis', [pi / 2 - q[1], B_prime.x]).orientnew('C', 'Axis', [q[2], B.z])
A:sympy.physics.mechanics.tests.test_kane2.P->ReferenceFrame('F').orientnew('P', 'axis', [-theta, F.y])
A:sympy.physics.mechanics.tests.test_kane2.O->ReferenceFrame('F').orientnew('P', 'axis', [-theta, F.y]).locatenew('O', q[3] * A.z + r * sin(q[1]) * A.y)
A:sympy.physics.mechanics.tests.test_kane2.kindiffs->Matrix([dot(w_c_n_qd - C.ang_vel_in(N), uv) for uv in B] + [dot(v_o_n_qd - O.vel(N), A.z)])
A:sympy.physics.mechanics.tests.test_kane2.qd_kd->solve(kindiffs, qd)
A:sympy.physics.mechanics.tests.test_kane2.steady_conditions->solve(kindiffs.subs({qd[1]: 0, qd[3]: 0}), u)
A:sympy.physics.mechanics.tests.test_kane2.f_c->Matrix([dot(-r * B.z, A.z) - q[3]])
A:sympy.physics.mechanics.tests.test_kane2.f_v->Matrix([dot(O.vel(N) - (P.vel(N) + cross(C.ang_vel_in(N), O.pos_from(P))), ai).expand() for ai in A])
A:sympy.physics.mechanics.tests.test_kane2.v_o_n->cross(C.ang_vel_in(N), O.pos_from(P))
A:sympy.physics.mechanics.tests.test_kane2.f_a->Matrix([dot(O.acc(N) - a_o_n, ai) for ai in A])
A:sympy.physics.mechanics.tests.test_kane2.M_v->zeros(3, 9)
A:sympy.physics.mechanics.tests.test_kane2.M_v[i, j]->f_v[i].diff(ui)
A:sympy.physics.mechanics.tests.test_kane2.M_v_i_aux->M_v_i.row_join(M_v_aux)
A:sympy.physics.mechanics.tests.test_kane2.u_dep_dict->dict(zip(u[3:], u_dep))
A:sympy.physics.mechanics.tests.test_kane2.Fr_u->Matrix([dot(F_O, pv_o) + dot(F_P, pv_p) for (pv_o, pv_p) in zip(partial_v_O, partial_v_P)])
A:sympy.physics.mechanics.tests.test_kane2.I_C_O->inertia(B, I, J, I)
A:sympy.physics.mechanics.tests.test_kane2.Fr_star_u->Matrix([dot(R_star_O, pv) + dot(T_star_C, pav) for (pv, pav) in zip(partial_v_O, partial_w_C)])
A:sympy.physics.mechanics.tests.test_kane2.Fr_star_steady->Fr_star_c.subs(ud_zero).subs(u_dep_dict).subs(steady_conditions).subs({q[3]: -r * cos(q[1])}).expand()
A:sympy.physics.mechanics.tests.test_kane2.disc->RigidBody('disc', O, C, m, iner_tuple)
A:sympy.physics.mechanics.tests.test_kane2.kane->KanesMethod(N, q_ind=q[:3], u_ind=u[:3], kd_eqs=kindiffs, q_dependent=q[3:], configuration_constraints=f_c, u_dependent=u[3:], velocity_constraints=f_v, u_auxiliary=ua)
A:sympy.physics.mechanics.tests.test_kane2.(fr, frstar)->KanesMethod(N, q_ind=q[:3], u_ind=u[:3], kd_eqs=kindiffs, q_dependent=q[3:], configuration_constraints=f_c, u_dependent=u[3:], velocity_constraints=f_v, u_auxiliary=ua).kanes_equations(bodyList, forceList)
A:sympy.physics.mechanics.tests.test_kane2.frstar_steady->frstar.subs(ud_zero).subs(u_dep_dict).subs(steady_conditions).subs({q[3]: -r * cos(q[1])}).expand()
A:sympy.physics.mechanics.tests.test_kane2.kdd->KanesMethod(N, q_ind=q[:3], u_ind=u[:3], kd_eqs=kindiffs, q_dependent=q[3:], configuration_constraints=f_c, u_dependent=u[3:], velocity_constraints=f_v, u_auxiliary=ua).kindiffdict()
A:sympy.physics.mechanics.tests.test_kane2.syms_in_forcing->find_dynamicsymbols(kane.forcing)
A:sympy.physics.mechanics.tests.test_kane2.(q1, q2, q3)->dynamicsymbols('q1:4')
A:sympy.physics.mechanics.tests.test_kane2.(q1d, q2d, q3d)->dynamicsymbols('q1:4', level=1)
A:sympy.physics.mechanics.tests.test_kane2.(u1, u2, u3, u4, u5)->dynamicsymbols('u1:6')
A:sympy.physics.mechanics.tests.test_kane2.(u_prime, R, M, g, e, f, theta)->symbols("u' R, M, g, e, f, theta")
A:sympy.physics.mechanics.tests.test_kane2.(a, b, mA, mB, IA, J, K, t)->symbols('a b mA mB IA J K t')
A:sympy.physics.mechanics.tests.test_kane2.(Q1, Q2, Q3)->symbols('Q1 Q2 Q3')
A:sympy.physics.mechanics.tests.test_kane2.(IA22, IA23, IA33)->symbols('IA22 IA23 IA33')
A:sympy.physics.mechanics.tests.test_kane2.F->ReferenceFrame('F')
A:sympy.physics.mechanics.tests.test_kane2.pD->Point('D')
A:sympy.physics.mechanics.tests.test_kane2.pS_star->Point('D').locatenew('S*', e * A.y)
A:sympy.physics.mechanics.tests.test_kane2.pQ->Point('D').locatenew('Q', f * A.y - R * A.x)
A:sympy.physics.mechanics.tests.test_kane2.pA_star->Point('D').locatenew('A*', a * A.y)
A:sympy.physics.mechanics.tests.test_kane2.pB_star->Point('D').locatenew('B*', b * A.z)
A:sympy.physics.mechanics.tests.test_kane2.pC_star->Point('D').locatenew('C*', -b * A.z)
A:sympy.physics.mechanics.tests.test_kane2.pB_hat->Point('D').locatenew('B*', b * A.z).locatenew('B^', -R * A.x)
A:sympy.physics.mechanics.tests.test_kane2.pC_hat->pO.locatenew('R', q[3] * A.x + q[4] * A.y).locatenew('C^', 0)
A:sympy.physics.mechanics.tests.test_kane2.inertia_A->inertia(A, IA, IA22, IA33, 0, IA23, 0)
A:sympy.physics.mechanics.tests.test_kane2.inertia_B->inertia(B, K, K, J)
A:sympy.physics.mechanics.tests.test_kane2.inertia_C->inertia(C, K, K, J)
A:sympy.physics.mechanics.tests.test_kane2.rbA->RigidBody('rbA', pA_star, A, mA, (inertia_A, pA_star))
A:sympy.physics.mechanics.tests.test_kane2.rbB->RigidBody('rbB', pB_star, B, mB, (inertia_B, pB_star))
A:sympy.physics.mechanics.tests.test_kane2.rbC->RigidBody('rbC', pC_star, C, mB, (inertia_C, pC_star))
A:sympy.physics.mechanics.tests.test_kane2.km->KanesMethod(F, [q1, q2, q3], [u1, u2], kd_eqs=kde, u_auxiliary=[u3])
A:sympy.physics.mechanics.tests.test_kane2.(fr, fr_star)->KanesMethod(F, [q1, q2, q3], [u1, u2], kd_eqs=kde, u_auxiliary=[u3]).kanes_equations(bodies, forces)
A:sympy.physics.mechanics.tests.test_kane2.vc_map->solve(vc, [u4, u5])
A:sympy.physics.mechanics.tests.test_kane2.fr_star_expected->Matrix([-(IA + 2 * J * b ** 2 / R ** 2 + 2 * K + mA * a ** 2 + 2 * mB * b ** 2) * u1.diff(t) - mA * a * u1 * u2, -(mA + 2 * mB + 2 * J / R ** 2) * u2.diff(t) + mA * a * u1 ** 2, 0])
A:sympy.physics.mechanics.tests.test_kane2.t->trigsimp(fr_star2.subs(vc_map).subs({u3: 0})).doit()
A:sympy.physics.mechanics.tests.test_kane2.(fr2, fr_star2)->KanesMethod(F, [q1, q2, q3], [u1, u2], kd_eqs=kde, u_auxiliary=[u3]).kanes_equations(bodies2, forces)
A:sympy.physics.mechanics.tests.test_kane2.(u1, u2, u3)->dynamicsymbols('u1:4')
A:sympy.physics.mechanics.tests.test_kane2.kde_map->solve(kde, [q1d, q2d, q3d])
A:sympy.physics.mechanics.tests.test_kane2.kde_map[k.diff(t)]->v.diff(t)
A:sympy.physics.mechanics.tests.test_kane2.fr_expected->Matrix([f * Q3 + M * g * e * sin(theta) * cos(q1), Q2 + M * g * sin(theta) * sin(q1), e * M * g * cos(theta) - Q1 * f - Q2 * R])
A:sympy.physics.mechanics.tests.test_kane2.(g, m, Px, Py, Pz, R, t)->symbols('g m Px Py Pz R t')
A:sympy.physics.mechanics.tests.test_kane2.qd->dynamicsymbols('q:5', level=1)
A:sympy.physics.mechanics.tests.test_kane2.B_prime->ReferenceFrame('A').orientnew('B_prime', 'Axis', [q[0], A.z])
A:sympy.physics.mechanics.tests.test_kane2.pO->Point('O')
A:sympy.physics.mechanics.tests.test_kane2.pR->Point('O').locatenew('R', q[3] * A.x + q[4] * A.y)
A:sympy.physics.mechanics.tests.test_kane2.pCs->pO.locatenew('R', q[3] * A.x + q[4] * A.y).locatenew('C^', 0).locatenew('C*', R * B.y)
A:sympy.physics.mechanics.tests.test_kane2.km1->KanesMethod(A, q, u, kde)
A:sympy.physics.mechanics.tests.test_kane2.(fr1, _)->KanesMethod(A, q, u, kde).kanes_equations([], forces)
A:sympy.physics.mechanics.tests.test_kane2.u_dep->list(set(u) - set(u_indep))
A:sympy.physics.mechanics.tests.test_kane2.km2->KanesMethod(A, q, u_indep, kde, u_dependent=u_dep, velocity_constraints=vc)
A:sympy.physics.mechanics.tests.test_kane2.(fr2, _)->KanesMethod(A, q, u_indep, kde, u_dependent=u_dep, velocity_constraints=vc).kanes_equations([], forces)
A:sympy.physics.mechanics.tests.test_kane2.fr1_expected->Matrix([-R * g * m * sin(q[1]), -R * (Px * cos(q[0]) + Py * sin(q[0])) * tan(q[1]), R * (Px * cos(q[0]) + Py * sin(q[0])), Px, Py])
A:sympy.physics.mechanics.tests.test_kane2.fr2_expected->Matrix([-R * g * m * sin(q[1]), 0, 0])
sympy.physics.mechanics.tests.test_kane2.test_aux_dep()
sympy.physics.mechanics.tests.test_kane2.test_non_central_inertia()
sympy.physics.mechanics.tests.test_kane2.test_sub_qdot()
sympy.physics.mechanics.tests.test_kane2.test_sub_qdot2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_models.py----------------------------------------
A:sympy.physics.mechanics.tests.test_models.(c0, k0, m0)->symbols('c0 k0 m0')
A:sympy.physics.mechanics.tests.test_models.g->symbols('g')
A:sympy.physics.mechanics.tests.test_models.(v0, x0, f0)->dynamicsymbols('v0 x0 f0')
A:sympy.physics.mechanics.tests.test_models.kane1->sympy.physics.mechanics.models.n_link_pendulum_on_cart(2)
A:sympy.physics.mechanics.tests.test_models.massmatrix1->Matrix([[m0 + m1 + m2, -l0 * m1 * cos(q1) - l0 * m2 * cos(q1), -l1 * m2 * cos(q2)], [-l0 * m1 * cos(q1) - l0 * m2 * cos(q1), l0 ** 2 * m1 + l0 ** 2 * m2, l0 * l1 * m2 * (sin(q1) * sin(q2) + cos(q1) * cos(q2))], [-l1 * m2 * cos(q2), l0 * l1 * m2 * (sin(q1) * sin(q2) + cos(q1) * cos(q2)), l1 ** 2 * m2]])
A:sympy.physics.mechanics.tests.test_models.forcing1->Matrix([[-l0 * m1 * u1 ** 2 * sin(q1) - l0 * m2 * u1 ** 2 * sin(q1) - l1 * m2 * u2 ** 2 * sin(q2) + F], [g * l0 * m1 * sin(q1) + g * l0 * m2 * sin(q1) - l0 * l1 * m2 * (sin(q1) * cos(q2) - sin(q2) * cos(q1)) * u2 ** 2], [g * l1 * m2 * sin(q2) - l0 * l1 * m2 * (-sin(q1) * cos(q2) + sin(q2) * cos(q1)) * u1 ** 2]])
A:sympy.physics.mechanics.tests.test_models.kane2->sympy.physics.mechanics.models.n_link_pendulum_on_cart(1, False)
A:sympy.physics.mechanics.tests.test_models.massmatrix2->Matrix([[m0 + m1, -l0 * m1 * cos(q1)], [-l0 * m1 * cos(q1), l0 ** 2 * m1]])
A:sympy.physics.mechanics.tests.test_models.forcing2->Matrix([[-l0 * m1 * u1 ** 2 * sin(q1)], [g * l0 * m1 * sin(q1)]])
A:sympy.physics.mechanics.tests.test_models.kane3->sympy.physics.mechanics.models.n_link_pendulum_on_cart(1, False, True)
A:sympy.physics.mechanics.tests.test_models.massmatrix3->Matrix([[m0 + m1, -l0 * m1 * cos(q1)], [-l0 * m1 * cos(q1), l0 ** 2 * m1]])
A:sympy.physics.mechanics.tests.test_models.forcing3->Matrix([[-l0 * m1 * u1 ** 2 * sin(q1)], [g * l0 * m1 * sin(q1) + T1]])
A:sympy.physics.mechanics.tests.test_models.kane4->sympy.physics.mechanics.models.n_link_pendulum_on_cart(1, True, False)
A:sympy.physics.mechanics.tests.test_models.massmatrix4->Matrix([[m0 + m1, -l0 * m1 * cos(q1)], [-l0 * m1 * cos(q1), l0 ** 2 * m1]])
A:sympy.physics.mechanics.tests.test_models.forcing4->Matrix([[-l0 * m1 * u1 ** 2 * sin(q1) + F], [g * l0 * m1 * sin(q1)]])
A:sympy.physics.mechanics.tests.test_models.(c1, k1, m1)->symbols('c1 k1 m1')
A:sympy.physics.mechanics.tests.test_models.(c2, k2, m2)->symbols('c2 k2 m2')
A:sympy.physics.mechanics.tests.test_models.(v0, x0)->dynamicsymbols('v0 x0')
A:sympy.physics.mechanics.tests.test_models.(v1, x1)->dynamicsymbols('v1 x1')
A:sympy.physics.mechanics.tests.test_models.(v2, x2)->dynamicsymbols('v2 x2')
A:sympy.physics.mechanics.tests.test_models.(l0, m0)->symbols('l0 m0')
A:sympy.physics.mechanics.tests.test_models.m1->symbols('m1')
A:sympy.physics.mechanics.tests.test_models.(q0, q1, F, T1)->dynamicsymbols('q0 q1 F T1')
A:sympy.physics.mechanics.tests.test_models.(u0, u1)->dynamicsymbols('u0 u1')
A:sympy.physics.mechanics.tests.test_models.(l1, m1)->symbols('l1 m1')
A:sympy.physics.mechanics.tests.test_models.m2->symbols('m2')
A:sympy.physics.mechanics.tests.test_models.(q0, q1, q2)->dynamicsymbols('q0 q1 q2')
A:sympy.physics.mechanics.tests.test_models.(u0, u1, u2)->dynamicsymbols('u0 u1 u2')
A:sympy.physics.mechanics.tests.test_models.(F, T1)->dynamicsymbols('F T1')
sympy.physics.mechanics.tests.test_models.test_multi_mass_spring_damper_higher_order()
sympy.physics.mechanics.tests.test_models.test_multi_mass_spring_damper_inputs()
sympy.physics.mechanics.tests.test_models.test_n_link_pendulum_on_cart_higher_order()
sympy.physics.mechanics.tests.test_models.test_n_link_pendulum_on_cart_inputs()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_functions.py----------------------------------------
A:sympy.physics.mechanics.tests.test_functions.(q1, q2, q3, q4, q5)->symbols('q1 q2 q3 q4 q5')
A:sympy.physics.mechanics.tests.test_functions.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_functions.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_functions.B->RigidBody('B', P, A, M, (I, P))
A:sympy.physics.mechanics.tests.test_functions.C->RigidBody('B', P, A, M, (I, P)).orientnew('C', 'Axis', [q3, B.y])
A:sympy.physics.mechanics.tests.test_functions.(ixx, iyy, izz)->symbols('ixx iyy izz')
A:sympy.physics.mechanics.tests.test_functions.(ixy, iyz, izx)->symbols('ixy iyz izx')
A:sympy.physics.mechanics.tests.test_functions.(r, s, t, m)->symbols('r s t m')
A:sympy.physics.mechanics.tests.test_functions.I->outer(A.x, A.x)
A:sympy.physics.mechanics.tests.test_functions.Ac->Point('O').locatenew('Ac', 2 * N.y)
A:sympy.physics.mechanics.tests.test_functions.P->Point('P')
A:sympy.physics.mechanics.tests.test_functions.Pa->Particle('Pa', P, 1)
A:sympy.physics.mechanics.tests.test_functions.(m, M, l, I)->symbols('m, M, l, I')
A:sympy.physics.mechanics.tests.test_functions.omega->dynamicsymbols('omega')
A:sympy.physics.mechanics.tests.test_functions.a->symbols('a')
A:sympy.physics.mechanics.tests.test_functions.O->Point('O')
A:sympy.physics.mechanics.tests.test_functions.(m, M, l1)->symbols('m M l1')
A:sympy.physics.mechanics.tests.test_functions.(m, M, l1, g, h, H)->symbols('m M l1 g h H')
A:sympy.physics.mechanics.tests.test_functions.(M, m, g, h)->symbols('M m g h')
A:sympy.physics.mechanics.tests.test_functions.(a, b)->symbols('a, b')
A:sympy.physics.mechanics.tests.test_functions.(x, y, z)->dynamicsymbols('x, y, z')
A:sympy.physics.mechanics.tests.test_functions.expr->Matrix([[a * x + b, x * y.diff() + y], [x.diff().diff(), z + sin(z.diff())]])
A:sympy.physics.mechanics.tests.test_functions.sol->Matrix([[a + b, y], [x.diff().diff(), 1]])
A:sympy.physics.mechanics.tests.test_functions.(d, e, f)->dynamicsymbols('d, e, f')
A:sympy.physics.mechanics.tests.test_functions.(m, M, g)->symbols('m M g')
A:sympy.physics.mechanics.tests.test_functions.(F1, F2)->dynamicsymbols('F1 F2')
A:sympy.physics.mechanics.tests.test_functions.po->Point('po')
A:sympy.physics.mechanics.tests.test_functions.pa->Particle('pa', po, m)
A:sympy.physics.mechanics.tests.test_functions.m->symbols('m', real=True)
A:sympy.physics.mechanics.tests.test_functions.p1->Particle('p1', Point('p1_pt'), S.One)
A:sympy.physics.mechanics.tests.test_functions.p2->Particle('p2', Point('p2_pt'), S(2))
A:sympy.physics.mechanics.tests.test_functions.p3->Particle('p3', Point('p3_pt'), S(3))
A:sympy.physics.mechanics.tests.test_functions.p4->Particle('p4', Point('p4_pt'), m)
A:sympy.physics.mechanics.tests.test_functions.b_f->ReferenceFrame('b_f')
A:sympy.physics.mechanics.tests.test_functions.b_cm->Point('b_cm')
A:sympy.physics.mechanics.tests.test_functions.mb->symbols('mb')
A:sympy.physics.mechanics.tests.test_functions.b->RigidBody('b', b_cm, b_f, mb, (outer(b_f.x, b_f.x), b_cm))
A:sympy.physics.mechanics.tests.test_functions.point_o->Point('o')
A:sympy.physics.mechanics.tests.test_functions.(q1, q2, q3, u1, u2, u3)->dynamicsymbols('q1:4 u1:4')
A:sympy.physics.mechanics.tests.test_functions.(s1, s2, s3)->symbols('s1:4')
A:sympy.physics.mechanics.tests.test_functions.(f1, f2)->symbols('f1:3', cls=Function)
sympy.physics.mechanics.tests.test_functions.test_Lagrangian()
sympy.physics.mechanics.tests.test_functions.test_angular_momentum_and_linear_momentum()
sympy.physics.mechanics.tests.test_functions.test_center_of_mass()
sympy.physics.mechanics.tests.test_functions.test_find_dynamicsymbols()
sympy.physics.mechanics.tests.test_functions.test_gravity()
sympy.physics.mechanics.tests.test_functions.test_inertia()
sympy.physics.mechanics.tests.test_functions.test_inertia_of_point_mass()
sympy.physics.mechanics.tests.test_functions.test_kinetic_energy()
sympy.physics.mechanics.tests.test_functions.test_linear_momentum()
sympy.physics.mechanics.tests.test_functions.test_msubs()
sympy.physics.mechanics.tests.test_functions.test_potential_energy()
sympy.physics.mechanics.tests.test_functions.test_validate_coordinates()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_kane4.py----------------------------------------
A:sympy.physics.mechanics.tests.test_kane4.(q1, q2)->dynamicsymbols('q1, q2')
A:sympy.physics.mechanics.tests.test_kane4.(qd1, qd2)->dynamicsymbols('q1, q2', level=1)
A:sympy.physics.mechanics.tests.test_kane4.(u1, u2)->dynamicsymbols('u1, u2')
A:sympy.physics.mechanics.tests.test_kane4.(l, m)->symbols('l, m')
A:sympy.physics.mechanics.tests.test_kane4.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_kane4.A->ReferenceFrame('N').orientnew('A', 'Axis', (q1, N.z))
A:sympy.physics.mechanics.tests.test_kane4.B->ReferenceFrame('N').orientnew('A', 'Axis', (q1, N.z)).orientnew('B', 'Axis', (q2, N.z))
A:sympy.physics.mechanics.tests.test_kane4.O->Point('O')
A:sympy.physics.mechanics.tests.test_kane4.P->Point('O').locatenew('P', l * A.x)
A:sympy.physics.mechanics.tests.test_kane4.Q->Point('O').locatenew('P', l * A.x).locatenew('Q', l * B.x)
A:sympy.physics.mechanics.tests.test_kane4.Ap->Particle('Ap', P, m)
A:sympy.physics.mechanics.tests.test_kane4.Bp->Particle('Bp', Q, m)
A:sympy.physics.mechanics.tests.test_kane4.(sig, delta)->symbols('sigma, delta')
A:sympy.physics.mechanics.tests.test_kane4.KM1->KanesMethod(N, [q1, q2], [u1, u2], kd_eqs=kde1)
A:sympy.physics.mechanics.tests.test_kane4.(fr1, fstar1)->KanesMethod(N, [q1, q2], [u1, u2], kd_eqs=kde1).kanes_equations([Ap, Bp], forces)
A:sympy.physics.mechanics.tests.test_kane4.KM2->KanesMethod(N, [q1, q2], [u1, u2], kd_eqs=kde2)
A:sympy.physics.mechanics.tests.test_kane4.(fr2, fstar2)->KanesMethod(N, [q1, q2], [u1, u2], kd_eqs=kde2).kanes_equations([Ap, Bp], forces)
A:sympy.physics.mechanics.tests.test_kane4.forcing_matrix_expected->Matrix([[m * l ** 2 * sin(q2) * u2 ** 2 + sig * q2 + delta * (u2 - u1)], [m * l ** 2 * sin(q2) * -u1 ** 2 - sig * q2 - delta * (u2 - u1)]])
A:sympy.physics.mechanics.tests.test_kane4.mass_matrix_expected->Matrix([[2 * m * l ** 2, m * l ** 2 * cos(q2)], [m * l ** 2 * cos(q2), m * l ** 2]])
A:sympy.physics.mechanics.tests.test_kane4.fr1_expected->Matrix([0, -(sig * q2 + delta * u2)])
A:sympy.physics.mechanics.tests.test_kane4.fr2_expected->Matrix([sig * q2 + delta * (u2 - u1), -sig * q2 - delta * (u2 - u1)])
A:sympy.physics.mechanics.tests.test_kane4.fr1_cubic_expected->Matrix([0, -(sig * q2 + delta * u2 ** 3)])
A:sympy.physics.mechanics.tests.test_kane4.fr2_cubic_expected->Matrix([sig * q2 + delta * (u2 - u1) ** 3, -sig * q2 - delta * (u2 - u1) ** 3])
sympy.physics.mechanics.tests.test_kane4.test_replace_qdots_in_force()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_kane3.py----------------------------------------
A:sympy.physics.mechanics.tests.test_kane3.(q1, q2, q4, q5)->dynamicsymbols('q1 q2 q4 q5')
A:sympy.physics.mechanics.tests.test_kane3.(q1d, q2d, q4d, q5d)->dynamicsymbols('q1 q2 q4 q5', 1)
A:sympy.physics.mechanics.tests.test_kane3.(u1, u2, u3, u4, u5, u6)->dynamicsymbols('u1 u2 u3 u4 u5 u6')
A:sympy.physics.mechanics.tests.test_kane3.(u1d, u2d, u3d, u4d, u5d, u6d)->dynamicsymbols('u1 u2 u3 u4 u5 u6', 1)
A:sympy.physics.mechanics.tests.test_kane3.(WFrad, WRrad, htangle, forkoffset)->symbols('WFrad WRrad htangle forkoffset')
A:sympy.physics.mechanics.tests.test_kane3.(forklength, framelength, forkcg1)->symbols('forklength framelength forkcg1')
A:sympy.physics.mechanics.tests.test_kane3.(forkcg3, framecg1, framecg3, Iwr11)->symbols('forkcg3 framecg1 framecg3 Iwr11')
A:sympy.physics.mechanics.tests.test_kane3.(Iwr22, Iwf11, Iwf22, Iframe11)->symbols('Iwr22 Iwf11 Iwf22 Iframe11')
A:sympy.physics.mechanics.tests.test_kane3.(Iframe22, Iframe33, Iframe31, Ifork11)->symbols('Iframe22 Iframe33 Iframe31 Ifork11')
A:sympy.physics.mechanics.tests.test_kane3.(Ifork22, Ifork33, Ifork31, g)->symbols('Ifork22 Ifork33 Ifork31 g')
A:sympy.physics.mechanics.tests.test_kane3.(mframe, mfork, mwf, mwr)->symbols('mframe mfork mwf mwr')
A:sympy.physics.mechanics.tests.test_kane3.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_kane3.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_kane3.R->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x])
A:sympy.physics.mechanics.tests.test_kane3.Frame->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x]).orientnew('Frame', 'Axis', [q4 + htangle, R.y])
A:sympy.physics.mechanics.tests.test_kane3.WR->ReferenceFrame('WR')
A:sympy.physics.mechanics.tests.test_kane3.TempFrame->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x]).orientnew('Frame', 'Axis', [q4 + htangle, R.y]).orientnew('TempFrame', 'Axis', [-htangle, Frame.y])
A:sympy.physics.mechanics.tests.test_kane3.Fork->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x]).orientnew('Frame', 'Axis', [q4 + htangle, R.y]).orientnew('Fork', 'Axis', [q5, Frame.x])
A:sympy.physics.mechanics.tests.test_kane3.TempFork->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x]).orientnew('Frame', 'Axis', [q4 + htangle, R.y]).orientnew('Fork', 'Axis', [q5, Frame.x]).orientnew('TempFork', 'Axis', [-htangle, Fork.y])
A:sympy.physics.mechanics.tests.test_kane3.WF->ReferenceFrame('WF')
A:sympy.physics.mechanics.tests.test_kane3.WR_cont->Point('WR_cont')
A:sympy.physics.mechanics.tests.test_kane3.WR_mc->Point('WR_cont').locatenew('WR_mc', WRrad * R.z)
A:sympy.physics.mechanics.tests.test_kane3.Steer->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Steer', framelength * Frame.z)
A:sympy.physics.mechanics.tests.test_kane3.Frame_mc->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Frame_mc', -framecg1 * Frame.x + framecg3 * Frame.z)
A:sympy.physics.mechanics.tests.test_kane3.Fork_mc->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Steer', framelength * Frame.z).locatenew('Fork_mc', -forkcg1 * Fork.x + forkcg3 * Fork.z)
A:sympy.physics.mechanics.tests.test_kane3.WF_mc->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Steer', framelength * Frame.z).locatenew('WF_mc', forklength * Fork.x + forkoffset * Fork.z)
A:sympy.physics.mechanics.tests.test_kane3.WF_cont->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Steer', framelength * Frame.z).locatenew('WF_mc', forklength * Fork.x + forkoffset * Fork.z).locatenew('WF_cont', WFrad * (dot(Fork.y, Y.z) * Fork.y - Y.z).normalize())
A:sympy.physics.mechanics.tests.test_kane3.BodyFrame->RigidBody('BodyFrame', Frame_mc, Frame, mframe, Frame_I)
A:sympy.physics.mechanics.tests.test_kane3.BodyFork->RigidBody('BodyFork', Fork_mc, Fork, mfork, Fork_I)
A:sympy.physics.mechanics.tests.test_kane3.BodyWR->RigidBody('BodyWR', WR_mc, WR, mwr, WR_I)
A:sympy.physics.mechanics.tests.test_kane3.BodyWF->RigidBody('BodyWF', WF_mc, WF, mwf, WF_I)
A:sympy.physics.mechanics.tests.test_kane3.KM->KanesMethod(N, q_ind=[q1, q2, q5], q_dependent=[q4], configuration_constraints=conlist_coord, u_ind=[u2, u3, u5], u_dependent=[u1, u4, u6], velocity_constraints=conlist_speed, kd_eqs=kd)
A:sympy.physics.mechanics.tests.test_kane3.(fr, frstar)->KanesMethod(N, q_ind=[q1, q2, q5], q_dependent=[q4], configuration_constraints=conlist_coord, u_ind=[u2, u3, u5], u_dependent=[u1, u4, u6], velocity_constraints=conlist_speed, kd_eqs=kd).kanes_equations(BL, FL)
A:sympy.physics.mechanics.tests.test_kane3.HTA->sympy.core.evalf.evalf.N(pi / 2 - pi / 10)
A:sympy.physics.mechanics.tests.test_kane3.rake->sympy.core.evalf.evalf.N(-(TrailPaper * sin(HTA) - PaperRadFront * cos(HTA)))
A:sympy.physics.mechanics.tests.test_kane3.FrameLength->sympy.core.evalf.evalf.N(PaperWb * sin(HTA) - (rake - (PaperRadFront - PaperRadRear) * cos(HTA)))
A:sympy.physics.mechanics.tests.test_kane3.FrameCGNorm->sympy.core.evalf.evalf.N((PaperFrameCgZ - PaperRadRear - PaperFrameCgX / sin(HTA) * cos(HTA)) * sin(HTA))
A:sympy.physics.mechanics.tests.test_kane3.FrameCGPar->sympy.core.evalf.evalf.N(PaperFrameCgX / sin(HTA) + (PaperFrameCgZ - PaperRadRear - PaperFrameCgX / sin(HTA) * cos(HTA)) * cos(HTA))
A:sympy.physics.mechanics.tests.test_kane3.tempa->sympy.core.evalf.evalf.N(PaperForkCgZ - PaperRadFront)
A:sympy.physics.mechanics.tests.test_kane3.tempb->sympy.core.evalf.evalf.N(PaperWb - PaperForkCgX)
A:sympy.physics.mechanics.tests.test_kane3.tempc->sympy.core.evalf.evalf.N(sqrt(tempa ** 2 + tempb ** 2))
A:sympy.physics.mechanics.tests.test_kane3.PaperForkL->sympy.core.evalf.evalf.N(PaperWb * cos(HTA) - (PaperRadFront - PaperRadRear) * sin(HTA))
A:sympy.physics.mechanics.tests.test_kane3.ForkCGNorm->sympy.core.evalf.evalf.N(rake + tempc * sin(pi / 2 - HTA - acos(tempa / tempc)))
A:sympy.physics.mechanics.tests.test_kane3.ForkCGPar->sympy.core.evalf.evalf.N(tempc * cos(pi / 2 - HTA - acos(tempa / tempc)) - PaperForkL)
A:sympy.physics.mechanics.tests.test_kane3.v->symbols('v')
A:sympy.physics.mechanics.tests.test_kane3.MM_full_s->MM_full_s.evalf().evalf()
A:sympy.physics.mechanics.tests.test_kane3.forcing_lin_s->forcing_lin_s.evalf().evalf()
A:sympy.physics.mechanics.tests.test_kane3.A->Amat.extract([1, 2, 4, 6], [1, 2, 3, 5])
A:sympy.physics.mechanics.tests.test_kane3.Res->Matrix([[0, 0, 1.0, 0], [0, 0, 0, 1.0], [9.48977444677355, -0.891197738059089 * v ** 2 - 0.571523173729245, -0.105522449805691 * v, -0.330515398992311 * v], [11.7194768719633, -1.97171508499972 * v ** 2 + 30.9087533932407, 3.67680523332152 * v, -3.08486552743311 * v]])
sympy.physics.mechanics.tests.test_kane3.test_bicycle()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_linearize.py----------------------------------------
A:sympy.physics.mechanics.tests.test_linearize.(t, r, m, g, v)->symbols('t r m g v')
A:sympy.physics.mechanics.tests.test_linearize.(q1, q2, q3, q4, q5, q6)q->dynamicsymbols('q1:7')
A:sympy.physics.mechanics.tests.test_linearize.u->dynamicsymbols('u:6')
A:sympy.physics.mechanics.tests.test_linearize.(u1, u2, u3, u4, u5, u6)u->dynamicsymbols('u1:7')
A:sympy.physics.mechanics.tests.test_linearize.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_linearize.NO->Point('NO')
A:sympy.physics.mechanics.tests.test_linearize.A->ReferenceFrame('N').orientnew('A', 'axis', [theta1, N.z])
A:sympy.physics.mechanics.tests.test_linearize.B->ReferenceFrame('N').orientnew('A', 'axis', [theta1, N.z]).orientnew('B', 'Axis', [q2, A.x])
A:sympy.physics.mechanics.tests.test_linearize.C->Point('C')
A:sympy.physics.mechanics.tests.test_linearize.CO->Point('NO').locatenew('CO', q4 * N.x + q5 * N.y + q6 * N.z)
A:sympy.physics.mechanics.tests.test_linearize.w_c_n_qd->Point('C').ang_vel_in(N)
A:sympy.physics.mechanics.tests.test_linearize.w_b_n_qd->ReferenceFrame('N').orientnew('A', 'axis', [theta1, N.z]).orientnew('B', 'Axis', [q2, A.x]).ang_vel_in(N)
A:sympy.physics.mechanics.tests.test_linearize.v_co_n_qd->Point('NO').locatenew('CO', q4 * N.x + q5 * N.y + q6 * N.z).pos_from(NO).dt(N)
A:sympy.physics.mechanics.tests.test_linearize.P->Point('N*').locatenew('P1', q1 * N.x + q2 * N.y)
A:sympy.physics.mechanics.tests.test_linearize.f_c->Matrix([q1 ** 2 + q2 ** 2 - L ** 2])
A:sympy.physics.mechanics.tests.test_linearize.f_v->Matrix([P.vel(N).express(A).dot(A.x)])
A:sympy.physics.mechanics.tests.test_linearize.kindiffs->Matrix([dot(w_c_n_qd - C.ang_vel_in(N), uv) for uv in B] + [dot(v_co_n_qd - CO.vel(N), uv) for uv in N])
A:sympy.physics.mechanics.tests.test_linearize.qdots->solve(kindiffs, qd)
A:sympy.physics.mechanics.tests.test_linearize.I_C_CO->inertia(C, I, J, I)
A:sympy.physics.mechanics.tests.test_linearize.Disc->RigidBody('Disc', CO, C, m, (I_C_CO, CO))
A:sympy.physics.mechanics.tests.test_linearize.KM->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde)
A:sympy.physics.mechanics.tests.test_linearize.(fr, fr_star)->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde).kanes_equations(BL, FL)
A:sympy.physics.mechanics.tests.test_linearize.linearizer->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde).to_linearizer()
A:sympy.physics.mechanics.tests.test_linearize.sol->Matrix([[0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, -6 * q3d, 0], [0, -4 * g / (5 * r), 0, 6 * q3d / 5, 0, 0], [0, 0, 0, 0, 0, 0]])
A:sympy.physics.mechanics.tests.test_linearize.(A, B)->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde).to_linearizer().linearize(op_point=[q_op, u_op, qd_op, ud_op], A_and_B=True, simplify=True)
A:sympy.physics.mechanics.tests.test_linearize.A_sol->Matrix([[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [sin(q1) * q3d, 0, 0, 0, 0, -sin(q1), -cos(q1), 0], [-cos(q1) * q3d, 0, 0, 0, 0, cos(q1), -sin(q1), 0], [0, Rational(4, 5), 0, 0, 0, 0, 0, 6 * q3d / 5], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -2 * q3d, 0, 0]])
A:sympy.physics.mechanics.tests.test_linearize.B_sol->Matrix([])
A:sympy.physics.mechanics.tests.test_linearize.q1->dynamicsymbols('q1')
A:sympy.physics.mechanics.tests.test_linearize.u1->dynamicsymbols('u1')
A:sympy.physics.mechanics.tests.test_linearize.q1d->dynamicsymbols('q1', 1)
A:sympy.physics.mechanics.tests.test_linearize.(L, m, t)->symbols('L, m, t')
A:sympy.physics.mechanics.tests.test_linearize.pN->Point('N*')
A:sympy.physics.mechanics.tests.test_linearize.pP->Particle('pP', P, m)
A:sympy.physics.mechanics.tests.test_linearize.kde->Matrix([q1d - u1, q2d - u2])
A:sympy.physics.mechanics.tests.test_linearize.(fr, frstar)->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde).kanes_equations([pP], [(P, R)])
A:sympy.physics.mechanics.tests.test_linearize.(A, B, inp_vec)->LagrangesMethod(Lag, [q1, q2], hol_coneqs=f_c, forcelist=[(P, m * g * N.x)], frame=N).linearize([q2], [q2d], [q1], [q1d], op_point=op_point, A_and_B=True)
A:sympy.physics.mechanics.tests.test_linearize.(q1, q2)->dynamicsymbols('q1:3')
A:sympy.physics.mechanics.tests.test_linearize.(q1d, q2d)->dynamicsymbols('q1:3', level=1)
A:sympy.physics.mechanics.tests.test_linearize.(u1, u2)->dynamicsymbols('u1:3')
A:sympy.physics.mechanics.tests.test_linearize.(u1d, u2d)->dynamicsymbols('u1:3', level=1)
A:sympy.physics.mechanics.tests.test_linearize.theta1->atan(q2 / q1)
A:sympy.physics.mechanics.tests.test_linearize.dq_dict->solve(kde, [q1d, q2d])
A:sympy.physics.mechanics.tests.test_linearize.f_a->Matrix([P.vel(N).express(A).dot(A.x)]).diff(t)
A:sympy.physics.mechanics.tests.test_linearize.Lag->Lagrangian(N, BodyD)
A:sympy.physics.mechanics.tests.test_linearize.LM->LagrangesMethod(Lag, [q1, q2], hol_coneqs=f_c, forcelist=[(P, m * g * N.x)], frame=N)
A:sympy.physics.mechanics.tests.test_linearize.lam_op->LagrangesMethod(Lag, [q1, q2], hol_coneqs=f_c, forcelist=[(P, m * g * N.x)], frame=N).solve_multipliers(op_point=op_point)
A:sympy.physics.mechanics.tests.test_linearize.(q1, q2, q3)q->dynamicsymbols('q1 q2 q3')
A:sympy.physics.mechanics.tests.test_linearize.(q1d, q2d, q3d)qd->dynamicsymbols('q1 q2 q3', 1)
A:sympy.physics.mechanics.tests.test_linearize.(r, m, g)->symbols('r m g')
A:sympy.physics.mechanics.tests.test_linearize.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_linearize.L->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x])
A:sympy.physics.mechanics.tests.test_linearize.R->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y])
A:sympy.physics.mechanics.tests.test_linearize.Dmc->Point('C').locatenew('Dmc', r * L.z)
A:sympy.physics.mechanics.tests.test_linearize.I->inertia(L, m / 4 * r ** 2, m / 2 * r ** 2, m / 4 * r ** 2)
A:sympy.physics.mechanics.tests.test_linearize.BodyD->RigidBody('BodyD', Dmc, R, m, (I, Dmc))
A:sympy.physics.mechanics.tests.test_linearize.l->LagrangesMethod(Lag, q)
sympy.physics.mechanics.tests.test_linearize.test_linearize_pendulum_kane_minimal()
sympy.physics.mechanics.tests.test_linearize.test_linearize_pendulum_kane_nonminimal()
sympy.physics.mechanics.tests.test_linearize.test_linearize_pendulum_lagrange_minimal()
sympy.physics.mechanics.tests.test_linearize.test_linearize_pendulum_lagrange_nonminimal()
sympy.physics.mechanics.tests.test_linearize.test_linearize_rolling_disc_kane()
sympy.physics.mechanics.tests.test_linearize.test_linearize_rolling_disc_lagrange()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_lagrange2.py----------------------------------------
A:sympy.physics.mechanics.tests.test_lagrange2.(q1, q2)->dynamicsymbols('q1, q2')
A:sympy.physics.mechanics.tests.test_lagrange2.(q1d, q2d)->dynamicsymbols('q1, q2', 1)
A:sympy.physics.mechanics.tests.test_lagrange2.(m, k, nu)->symbols('m, k, nu')
A:sympy.physics.mechanics.tests.test_lagrange2.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_lagrange2.O->Point('O')
A:sympy.physics.mechanics.tests.test_lagrange2.P1->Point('O').locatenew('P1', q1 * N.x)
A:sympy.physics.mechanics.tests.test_lagrange2.P2->Point('O').locatenew('P1', q2 * N.x)
A:sympy.physics.mechanics.tests.test_lagrange2.pP1->Particle('pP1', P1, m)
A:sympy.physics.mechanics.tests.test_lagrange2.pP2->Particle('pP2', P2, m)
A:sympy.physics.mechanics.tests.test_lagrange2.lag->Lagrangian(N, pP1, pP2)
A:sympy.physics.mechanics.tests.test_lagrange2.l_method->LagrangesMethod(lag, (q1, q2), forcelist=forcelist, frame=N)
sympy.physics.mechanics.tests.test_lagrange2.test_lagrange_2forces()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_particle.py----------------------------------------
A:sympy.physics.mechanics.tests.test_particle.(m, m2, v1, v2, v3, r, g, h)->symbols('m m2 v1 v2 v3 r g h')
A:sympy.physics.mechanics.tests.test_particle.P->Point('P')
A:sympy.physics.mechanics.tests.test_particle.P2->Point('P2')
A:sympy.physics.mechanics.tests.test_particle.p->Particle('pa', P, m)
A:sympy.physics.mechanics.tests.test_particle.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_particle.O->Point('O')
A:sympy.physics.mechanics.tests.test_particle.(m, a, b)->symbols('m, a, b')
A:sympy.physics.mechanics.tests.test_particle.o->Point('o')
A:sympy.physics.mechanics.tests.test_particle.Ip->Point('P').parallel_axis(p, N)
A:sympy.physics.mechanics.tests.test_particle.Ip_expected->inertia(N, m * b ** 2, m * a ** 2, m * (a ** 2 + b ** 2), ixy=-m * a * b)
A:sympy.physics.mechanics.tests.test_particle.(m, g, h)->symbols('m g h')
sympy.physics.mechanics.tests.test_particle.test_deprecated_set_potential_energy()
sympy.physics.mechanics.tests.test_particle.test_parallel_axis()
sympy.physics.mechanics.tests.test_particle.test_particle()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_system.py----------------------------------------
A:sympy.physics.mechanics.tests.test_system.(x, y, u, v, lam)->dynamicsymbols('x y u v lambda')
A:sympy.physics.mechanics.tests.test_system.(m, l, g)->symbols('m l g')
A:sympy.physics.mechanics.tests.test_system.dyn_implicit_mat->Matrix([[1, 0, -x / m], [0, 1, -y / m], [0, 0, l ** 2 / m]])
A:sympy.physics.mechanics.tests.test_system.dyn_implicit_rhs->Matrix([0, 0, u ** 2 + v ** 2 - g * y])
A:sympy.physics.mechanics.tests.test_system.comb_implicit_mat->Matrix([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, -x / m], [0, 0, 0, 1, -y / m], [0, 0, 0, 0, l ** 2 / m]])
A:sympy.physics.mechanics.tests.test_system.comb_implicit_rhs->Matrix([u, v, 0, 0, u ** 2 + v ** 2 - g * y])
A:sympy.physics.mechanics.tests.test_system.kin_explicit_rhs->Matrix([u, v])
A:sympy.physics.mechanics.tests.test_system.comb_explicit_rhs->Matrix([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, -x / m], [0, 0, 0, 1, -y / m], [0, 0, 0, 0, l ** 2 / m]]).LUsolve(comb_implicit_rhs)
A:sympy.physics.mechanics.tests.test_system.theta->atan(x / y)
A:sympy.physics.mechanics.tests.test_system.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_system.A->ReferenceFrame('N').orientnew('A', 'Axis', [theta, N.z])
A:sympy.physics.mechanics.tests.test_system.O->Point('O')
A:sympy.physics.mechanics.tests.test_system.P->Point('O').locatenew('P', l * A.x)
A:sympy.physics.mechanics.tests.test_system.Pa->Particle('Pa', P, m)
A:sympy.physics.mechanics.tests.test_system.PE->symbols('PE')
A:sympy.physics.mechanics.tests.test_system.symsystem1->SymbolicSystem(states, comb_explicit_rhs)
A:sympy.physics.mechanics.tests.test_system.symsystem2->SymbolicSystem(coordinates, comb_implicit_rhs, speeds=speeds, mass_matrix=comb_implicit_mat)
A:sympy.physics.mechanics.tests.test_system.symsystem3->SymbolicSystem(states, dyn_implicit_rhs, mass_matrix=dyn_implicit_mat, coordinate_derivatives=kin_explicit_rhs, alg_con=alg_con, coord_idxs=coord_idxs, speed_idxs=speed_idxs, bodies=bodies, loads=loads)
A:sympy.physics.mechanics.tests.test_system.symsystem->SymbolicSystem(states, comb_explicit_rhs, alg_con=alg_con_full, output_eqns=out_eqns, coord_idxs=coord_idxs, speed_idxs=speed_idxs, bodies=bodies, loads=loads)
sympy.physics.mechanics.tests.test_system.test_form_1()
sympy.physics.mechanics.tests.test_system.test_form_2()
sympy.physics.mechanics.tests.test_system.test_form_3()
sympy.physics.mechanics.tests.test_system.test_not_specified_errors()
sympy.physics.mechanics.tests.test_system.test_property_attributes()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/mechanics/tests/test_rigidbody.py----------------------------------------
A:sympy.physics.mechanics.tests.test_rigidbody.(m, m2, v1, v2, v3, omega)->symbols('m m2 v1 v2 v3 omega')
A:sympy.physics.mechanics.tests.test_rigidbody.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_rigidbody.A2->ReferenceFrame('A2')
A:sympy.physics.mechanics.tests.test_rigidbody.P->Point('P')
A:sympy.physics.mechanics.tests.test_rigidbody.P2->Point('P2')
A:sympy.physics.mechanics.tests.test_rigidbody.I->Dyadic(0)
A:sympy.physics.mechanics.tests.test_rigidbody.I2->Dyadic(0)
A:sympy.physics.mechanics.tests.test_rigidbody.B->RigidBody('B', P, A, m, (I, P))
A:sympy.physics.mechanics.tests.test_rigidbody.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_rigidbody.(M, v, r, omega, g, h)->dynamicsymbols('M v r omega g h')
A:sympy.physics.mechanics.tests.test_rigidbody.b->ReferenceFrame('b')
A:sympy.physics.mechanics.tests.test_rigidbody.O->Point('O')
A:sympy.physics.mechanics.tests.test_rigidbody.(q1, q2, q3, q4)->dynamicsymbols('q1:5')
A:sympy.physics.mechanics.tests.test_rigidbody.(p1, p2, p3)->symbols('p1:4')
A:sympy.physics.mechanics.tests.test_rigidbody.m->symbols('m')
A:sympy.physics.mechanics.tests.test_rigidbody.rb1->RigidBody('rb1', P, B, m, (I, P))
A:sympy.physics.mechanics.tests.test_rigidbody.rb2->RigidBody('rb2', P, B, m, (I + inertia_of_point_mass(m, P.pos_from(O), B), O))
A:sympy.physics.mechanics.tests.test_rigidbody.(m, a)->symbols('m, a')
A:sympy.physics.mechanics.tests.test_rigidbody.q->dynamicsymbols('q')
A:sympy.physics.mechanics.tests.test_rigidbody.R->RigidBody('R', o, N, m, (Io, o))
A:sympy.physics.mechanics.tests.test_rigidbody.R1->RigidBody('R', o, N, m, (Io, o)).orientnew('R1', 'Axis', [q, R.z])
A:sympy.physics.mechanics.tests.test_rigidbody.G->Point('O').locatenew('G', a * R1.x)
A:sympy.physics.mechanics.tests.test_rigidbody.S->RigidBody('S', G, R1, m, (I, G))
A:sympy.physics.mechanics.tests.test_rigidbody.(m, Ix, Iy, Iz, a, b)->symbols('m, I_x, I_y, I_z, a, b')
A:sympy.physics.mechanics.tests.test_rigidbody.Io->inertia(N, Ix, Iy, Iz)
A:sympy.physics.mechanics.tests.test_rigidbody.o->Point('o')
A:sympy.physics.mechanics.tests.test_rigidbody.p->Point('o').locatenew('p', a * N.x + b * N.y)
A:sympy.physics.mechanics.tests.test_rigidbody.I_check->inertia(N, Ix - b ** 2 * m, Iy - a ** 2 * m, Iz - m * (a ** 2 + b ** 2), m * a * b)
A:sympy.physics.mechanics.tests.test_rigidbody.Ip->RigidBody('R', o, N, m, (Io, o)).parallel_axis(p)
A:sympy.physics.mechanics.tests.test_rigidbody.Ip_expected->inertia(N, Ix + m * b ** 2, Iy + m * a ** 2, Iz + m * (a ** 2 + b ** 2), ixy=-m * a * b)
A:sympy.physics.mechanics.tests.test_rigidbody.(m, g, h)->symbols('m g h')
sympy.physics.mechanics.tests.test_rigidbody.test_deprecated_set_potential_energy()
sympy.physics.mechanics.tests.test_rigidbody.test_parallel_axis()
sympy.physics.mechanics.tests.test_rigidbody.test_pendulum_angular_momentum()
sympy.physics.mechanics.tests.test_rigidbody.test_rigidbody()
sympy.physics.mechanics.tests.test_rigidbody.test_rigidbody2()
sympy.physics.mechanics.tests.test_rigidbody.test_rigidbody3()
sympy.physics.mechanics.tests.test_rigidbody.test_rigidbody_inertia()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/functions.py----------------------------------------
A:sympy.physics.vector.functions.expr->sympify(expr)
A:sympy.physics.vector.functions.outvec->Vector(outlist)
A:sympy.physics.vector.functions.temp->temp.applyfunc(lambda x: trigsimp(x, method='fu')).applyfunc(lambda x: trigsimp(x, method='fu'))
A:sympy.physics.vector.functions.ol->Dyadic(0)
A:sympy.physics.vector.functions.frame_set->set()
A:sympy.physics.vector.functions.rot_order->translate(str(rot_order), 'XYZxyz', '123123')
A:sympy.physics.vector.functions.rot_type->rot_type.lower().lower()
A:sympy.physics.vector.functions.w->Matrix(speeds + [0])
A:sympy.physics.vector.functions.E->Matrix([[e0, -e3, e2, e1], [e3, e0, -e1, e2], [-e2, e1, e0, e3], [-e1, -e2, -e3, e0]])
A:sympy.physics.vector.functions.edots->Matrix([diff(i, dynamicsymbols._t) for i in [e1, e2, e3, e0]])
A:sympy.physics.vector.functions.condition->express(condition, frame, variables=True)
A:sympy.physics.vector.functions.vectdiff1->express(vectdiff, frame)
A:sympy.physics.vector.functions.vectdiff2->time_derivative(vectdiff, frame)
A:sympy.physics.vector.functions.vectdiff0->Vector(0)
A:sympy.physics.vector.functions.function1->express(vectdiff, frame).dot(dim)
A:sympy.physics.vector.functions.abscissa->dim.dot(condition).subs({variable: ordinate})
A:sympy.physics.vector.functions.kwargs[x]->sympify(kwargs[x])
A:sympy.physics.vector.functions.vel->time_derivative(kwargs['position'], frame)
A:sympy.physics.vector.functions.acc->time_derivative(vel, frame)
A:sympy.physics.vector.functions.esses->symbols(names, cls=Function, **assumptions)
A:sympy.physics.vector.functions.dynamicsymbols._t->Symbol('t')
sympy.physics.vector.cross(vec1,vec2)
sympy.physics.vector.dot(vec1,vec2)
sympy.physics.vector.dynamicsymbols(names,level=0,**assumptions)
sympy.physics.vector.express(expr,frame,frame2=None,variables=False)
sympy.physics.vector.functions.cross(vec1,vec2)
sympy.physics.vector.functions.dot(vec1,vec2)
sympy.physics.vector.functions.dynamicsymbols(names,level=0,**assumptions)
sympy.physics.vector.functions.express(expr,frame,frame2=None,variables=False)
sympy.physics.vector.functions.get_motion_params(frame,**kwargs)
sympy.physics.vector.functions.kinematic_equations(speeds,coords,rot_type,rot_order='')
sympy.physics.vector.functions.outer(vec1,vec2)
sympy.physics.vector.functions.partial_velocity(vel_vecs,gen_speeds,frame)
sympy.physics.vector.functions.time_derivative(expr,frame,order=1)
sympy.physics.vector.get_motion_params(frame,**kwargs)
sympy.physics.vector.kinematic_equations(speeds,coords,rot_type,rot_order='')
sympy.physics.vector.outer(vec1,vec2)
sympy.physics.vector.partial_velocity(vel_vecs,gen_speeds,frame)
sympy.physics.vector.time_derivative(expr,frame,order=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/point.py----------------------------------------
A:sympy.physics.vector.point.templist->v[-1]._pdlist[num].keys()
A:sympy.physics.vector.point.dist->self.pos_from(otherpoint)
A:sympy.physics.vector.point.v->otherpoint.vel(outframe)
A:sympy.physics.vector.point.a1->otherpoint.acc(outframe)
A:sympy.physics.vector.point.a2->self.acc(interframe)
A:sympy.physics.vector.point.omega->fixedframe.ang_vel_in(outframe)
A:sympy.physics.vector.point.alpha->fixedframe.ang_acc_in(outframe)
A:sympy.physics.vector.point.a->otherpoint.acc(outframe)
A:sympy.physics.vector.point.value->_check_vector(value)
A:sympy.physics.vector.point.p->Point(name)
A:sympy.physics.vector.point.outvec->Vector(0)
A:sympy.physics.vector.point.plist->self._pdict_list(otherpoint, 0)
A:sympy.physics.vector.point.v1->self.vel(interframe)
A:sympy.physics.vector.point.v2->otherpoint.vel(outframe)
A:sympy.physics.vector.point.node->queue.pop(0)
sympy.physics.vector.Point(self,name)
sympy.physics.vector.point.Point(self,name)
sympy.physics.vector.point.Point.__str__(self)
sympy.physics.vector.point.Point._check_point(self,other)
sympy.physics.vector.point.Point._pdict_list(self,other,num)
sympy.physics.vector.point.Point.a1pt_theory(self,otherpoint,outframe,interframe)
sympy.physics.vector.point.Point.a2pt_theory(self,otherpoint,outframe,fixedframe)
sympy.physics.vector.point.Point.acc(self,frame)
sympy.physics.vector.point.Point.locatenew(self,name,value)
sympy.physics.vector.point.Point.partial_velocity(self,frame,*gen_speeds)
sympy.physics.vector.point.Point.pos_from(self,otherpoint)
sympy.physics.vector.point.Point.set_acc(self,frame,value)
sympy.physics.vector.point.Point.set_pos(self,otherpoint,value)
sympy.physics.vector.point.Point.set_vel(self,frame,value)
sympy.physics.vector.point.Point.v1pt_theory(self,otherpoint,outframe,interframe)
sympy.physics.vector.point.Point.v2pt_theory(self,otherpoint,outframe,fixedframe)
sympy.physics.vector.point.Point.vel(self,frame)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/fieldfunctions.py----------------------------------------
A:sympy.physics.vector.fieldfunctions.vect->express(vect, frame, variables=True)
A:sympy.physics.vector.fieldfunctions.vectx->express(vect, frame, variables=True).dot(frame.x)
A:sympy.physics.vector.fieldfunctions.vecty->express(vect, frame, variables=True).dot(frame.y)
A:sympy.physics.vector.fieldfunctions.vectz->express(vect, frame, variables=True).dot(frame.z)
A:sympy.physics.vector.fieldfunctions.outvec->Vector(0)
A:sympy.physics.vector.fieldfunctions.scalar->express(scalar, frame, variables=True)
A:sympy.physics.vector.fieldfunctions.field->express(field, frame, variables=True)
A:sympy.physics.vector.fieldfunctions.dimensions->list(frame)
A:sympy.physics.vector.fieldfunctions.temp_function->integrate(field.dot(dimensions[0]), frame[0])
A:sympy.physics.vector.fieldfunctions.partial_diff->diff(temp_function, frame[i + 1])
A:sympy.physics.vector.fieldfunctions.scalar_fn->scalar_potential(field, frame)
A:sympy.physics.vector.fieldfunctions.position1->express(point1.pos_from(origin), frame, variables=True)
A:sympy.physics.vector.fieldfunctions.position2->express(point2.pos_from(origin), frame, variables=True)
A:sympy.physics.vector.fieldfunctions.subs_dict1[frame[i]]->x.dot(position1)
A:sympy.physics.vector.fieldfunctions.subs_dict2[frame[i]]->x.dot(position2)
sympy.physics.vector.curl(vect,frame)
sympy.physics.vector.divergence(vect,frame)
sympy.physics.vector.fieldfunctions.curl(vect,frame)
sympy.physics.vector.fieldfunctions.divergence(vect,frame)
sympy.physics.vector.fieldfunctions.gradient(scalar,frame)
sympy.physics.vector.fieldfunctions.is_conservative(field)
sympy.physics.vector.fieldfunctions.is_solenoidal(field)
sympy.physics.vector.fieldfunctions.scalar_potential(field,frame)
sympy.physics.vector.fieldfunctions.scalar_potential_difference(field,frame,point1,point2,origin)
sympy.physics.vector.gradient(scalar,frame)
sympy.physics.vector.is_conservative(field)
sympy.physics.vector.is_solenoidal(field)
sympy.physics.vector.scalar_potential(field,frame)
sympy.physics.vector.scalar_potential_difference(field,frame,point1,point2,origin)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/frame.py----------------------------------------
A:sympy.physics.vector.frame.obj->super().__xnew__(cls, name, **assumptions)
A:sympy.physics.vector.frame.self._x->Vector([(Matrix([1, 0, 0]), self)])
A:sympy.physics.vector.frame.self._y->Vector([(Matrix([0, 1, 0]), self)])
A:sympy.physics.vector.frame.self._z->Vector([(Matrix([0, 0, 1]), self)])
A:sympy.physics.vector.frame.frames_adjacent_to_last->frame_list[-1]._dlist[num].keys()
A:sympy.physics.vector.frame.dcm2diff->otherframe.dcm(self)
A:sympy.physics.vector.frame.diffed->otherframe.dcm(self).diff(dynamicsymbols._t)
A:sympy.physics.vector.frame.w1->trigsimp(expand(angvelmat[7]), recursive=True)
A:sympy.physics.vector.frame.w2->trigsimp(expand(angvelmat[2]), recursive=True)
A:sympy.physics.vector.frame.w3->trigsimp(expand(angvelmat[3]), recursive=True)
A:sympy.physics.vector.frame.mapping[self.varlist[i]]->trigsimp(vars_matrix[i], method='fu')
A:sympy.physics.vector.frame.flist->self._dict_list(otherframe, 0)
A:sympy.physics.vector.frame.outvec->Vector(0)
A:sympy.physics.vector.frame.outdcm->eye(3)
A:sympy.physics.vector.frame.frames->self._dcm_cache.keys()
A:sympy.physics.vector.frame.queue->list(frames)
A:sympy.physics.vector.frame.node->list(frames).pop(0)
A:sympy.physics.vector.frame.neighbors->list(frames).pop(0)._dcm_dict.keys()
A:sympy.physics.vector.frame.axis->_check_vector(axis)
A:sympy.physics.vector.frame.theta->sympify(angle)
A:sympy.physics.vector.frame.unit_axis->_check_vector(axis).express(parent).normalize()
A:sympy.physics.vector.frame.thetad->sympify(angle).diff(dynamicsymbols._t)
A:sympy.physics.vector.frame.wvec->Vector([(Matrix([w1, w2, w3]), self)])
A:sympy.physics.vector.frame.amounts->list(angles)
A:sympy.physics.vector.frame.amounts[i]->sympify(v)
A:sympy.physics.vector.frame.rot_order->translate(str(rot_order), 'XYZxyz', '123123')
A:sympy.physics.vector.frame.(amounts, rot_order, rot_matrices)->self._parse_consecutive_rotations(angles, rotation_order)
A:sympy.physics.vector.frame.rot_vecs[i][order - 1]->sympify(v).diff(dynamicsymbols._t)
A:sympy.physics.vector.frame.numbers->list(numbers)
A:sympy.physics.vector.frame.numbers[i]->sympify(v)
A:sympy.physics.vector.frame.parent_orient_quaternion->Matrix([[q0 ** 2 + q1 ** 2 - q2 ** 2 - q3 ** 2, 2 * (q1 * q2 - q0 * q3), 2 * (q0 * q2 + q1 * q3)], [2 * (q1 * q2 + q0 * q3), q0 ** 2 - q1 ** 2 + q2 ** 2 - q3 ** 2, 2 * (q2 * q3 - q0 * q1)], [2 * (q1 * q3 - q0 * q2), 2 * (q0 * q1 + q2 * q3), q0 ** 2 - q1 ** 2 - q2 ** 2 + q3 ** 2]])
A:sympy.physics.vector.frame.q0d->diff(q0, t)
A:sympy.physics.vector.frame.q1d->diff(q1, t)
A:sympy.physics.vector.frame.q2d->diff(q2, t)
A:sympy.physics.vector.frame.q3d->diff(q3, t)
A:sympy.physics.vector.frame.rot_type->rot_type.upper().upper()
A:sympy.physics.vector.frame.newframe->self.__class__(newname, variables=variables, indices=indices, latexs=latexs)
A:sympy.physics.vector.frame.value->_check_vector(value)
sympy.physics.vector.CoordinateSym(cls,name,frame,index)
sympy.physics.vector.ReferenceFrame(self,name,indices=None,latexs=None,variables=None)
sympy.physics.vector.frame.CoordinateSym(cls,name,frame,index)
sympy.physics.vector.frame.CoordinateSym.__eq__(self,other)
sympy.physics.vector.frame.CoordinateSym.__hash__(self)
sympy.physics.vector.frame.CoordinateSym.__ne__(self,other)
sympy.physics.vector.frame.CoordinateSym.frame(self)
sympy.physics.vector.frame.ReferenceFrame(self,name,indices=None,latexs=None,variables=None)
sympy.physics.vector.frame.ReferenceFrame.__getitem__(self,ind)
sympy.physics.vector.frame.ReferenceFrame.__iter__(self)
sympy.physics.vector.frame.ReferenceFrame.__str__(self)
sympy.physics.vector.frame.ReferenceFrame._dcm(self,parent,parent_orient)
sympy.physics.vector.frame.ReferenceFrame._dict_list(self,other,num)
sympy.physics.vector.frame.ReferenceFrame._parse_consecutive_rotations(self,angles,rotation_order)
sympy.physics.vector.frame.ReferenceFrame._rot(self,axis,angle)
sympy.physics.vector.frame.ReferenceFrame._w_diff_dcm(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.ang_acc_in(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.ang_vel_in(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.dcm(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.orient(self,parent,rot_type,amounts,rot_order='')
sympy.physics.vector.frame.ReferenceFrame.orient_axis(self,parent,axis,angle)
sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed(self,parent,angles,rotation_order)
sympy.physics.vector.frame.ReferenceFrame.orient_explicit(self,parent,dcm)
sympy.physics.vector.frame.ReferenceFrame.orient_quaternion(self,parent,numbers)
sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed(self,parent,angles,rotation_order)
sympy.physics.vector.frame.ReferenceFrame.orientnew(self,newname,rot_type,amounts,rot_order='',variables=None,indices=None,latexs=None)
sympy.physics.vector.frame.ReferenceFrame.partial_velocity(self,frame,*gen_speeds)
sympy.physics.vector.frame.ReferenceFrame.set_ang_acc(self,otherframe,value)
sympy.physics.vector.frame.ReferenceFrame.set_ang_vel(self,otherframe,value)
sympy.physics.vector.frame.ReferenceFrame.variable_map(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.x(self)
sympy.physics.vector.frame.ReferenceFrame.y(self)
sympy.physics.vector.frame.ReferenceFrame.z(self)
sympy.physics.vector.frame._check_frame(other)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/dyadic.py----------------------------------------
A:sympy.physics.vector.dyadic.other->_check_vector(other)
A:sympy.physics.vector.dyadic.ol->Dyadic(0)
A:sympy.physics.vector.dyadic.newlist->list(self.args)
A:sympy.physics.vector.dyadic.arg_str->printer._print(ar[i][0])
A:sympy.physics.vector.dyadic.outstr->''.join(ol)
A:sympy.physics.vector.dyadic.out->Dyadic(0)
A:sympy.physics.vector.dyadic.dps->prec_to_dps(prec)
A:sympy.physics.vector.dyadic.new_inlist->list(inlist)
A:sympy.physics.vector.dyadic.new_inlist[0]->new_inlist[0].xreplace(rule).xreplace(rule)
sympy.physics.vector.Dyadic(self,inlist)
sympy.physics.vector.dyadic.Dyadic(self,inlist)
sympy.physics.vector.dyadic.Dyadic.__add__(self,other)
sympy.physics.vector.dyadic.Dyadic.__and__(self,other)
sympy.physics.vector.dyadic.Dyadic.__eq__(self,other)
sympy.physics.vector.dyadic.Dyadic.__mul__(self,other)
sympy.physics.vector.dyadic.Dyadic.__ne__(self,other)
sympy.physics.vector.dyadic.Dyadic.__neg__(self)
sympy.physics.vector.dyadic.Dyadic.__rand__(self,other)
sympy.physics.vector.dyadic.Dyadic.__rsub__(self,other)
sympy.physics.vector.dyadic.Dyadic.__rxor__(self,other)
sympy.physics.vector.dyadic.Dyadic.__sub__(self,other)
sympy.physics.vector.dyadic.Dyadic.__truediv__(self,other)
sympy.physics.vector.dyadic.Dyadic.__xor__(self,other)
sympy.physics.vector.dyadic.Dyadic._eval_evalf(self,prec)
sympy.physics.vector.dyadic.Dyadic._latex(self,printer)
sympy.physics.vector.dyadic.Dyadic._pretty(self,printer)
sympy.physics.vector.dyadic.Dyadic._sympystr(self,printer)
sympy.physics.vector.dyadic.Dyadic.applyfunc(self,f)
sympy.physics.vector.dyadic.Dyadic.doit(self,**hints)
sympy.physics.vector.dyadic.Dyadic.dt(self,frame)
sympy.physics.vector.dyadic.Dyadic.express(self,frame1,frame2=None)
sympy.physics.vector.dyadic.Dyadic.func(self)
sympy.physics.vector.dyadic.Dyadic.simplify(self)
sympy.physics.vector.dyadic.Dyadic.subs(self,*args,**kwargs)
sympy.physics.vector.dyadic.Dyadic.to_matrix(self,reference_frame,second_reference_frame=None)
sympy.physics.vector.dyadic.Dyadic.xreplace(self,rule)
sympy.physics.vector.dyadic._check_dyadic(other)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/vector.py----------------------------------------
A:sympy.physics.vector.vector.other->_check_vector(other)
A:sympy.physics.vector.vector.newlist->list(self.args)
A:sympy.physics.vector.vector.ol->Dyadic(0)
A:sympy.physics.vector.vector.arg_str->printer._print(ar[i][0][j])
A:sympy.physics.vector.vector.outstr->''.join(ol)
A:sympy.physics.vector.vector.pform->sympy.printing.pretty.stringpict.prettyForm.__add__(*pforms)
A:sympy.physics.vector.vector.tmp->sympy.printing.pretty.stringpict.prettyForm.__add__(*pforms).parens()
A:sympy.physics.vector.vector.kwargs['wrap_line']->kwargs.get('wrap_line')
A:sympy.physics.vector.vector.kwargs['num_columns']->kwargs.get('num_columns')
A:sympy.physics.vector.vector.out_str->sympy.printing.pretty.stringpict.prettyForm.__add__(*pforms).render(*args, **kwargs)
A:sympy.physics.vector.vector.ar->list(self.args)
A:sympy.physics.vector.vector.keys->sorted(d.keys(), key=lambda x: x.index)
A:sympy.physics.vector.vector.components[x[1]]->Vector([x])
A:sympy.physics.vector.vector.var->sympify(var)
A:sympy.physics.vector.vector.reexp_vec_comp->Vector([vector_component]).express(frame)
A:sympy.physics.vector.vector.deriv->Vector([vector_component]).express(frame).args[0][0].diff(var)
A:sympy.physics.vector.vector.d[v[1]]->v[0].applyfunc(f)
A:sympy.physics.vector.vector.vec1->self.normalize()
A:sympy.physics.vector.vector.vec2->vec.normalize()
A:sympy.physics.vector.vector.angle->acos(vec1.dot(vec2))
A:sympy.physics.vector.vector.dps->prec_to_dps(prec)
A:sympy.physics.vector.vector.mat->mat.xreplace(rule).xreplace(rule)
A:sympy.physics.vector.vector.msg->filldedent("Expected an instance of %s, but received object '%s' of %s." % (type(want), other, type(other)))
sympy.physics.vector.Vector(self,inlist)
sympy.physics.vector.vector.Vector(self,inlist)
sympy.physics.vector.vector.Vector.__add__(self,other)
sympy.physics.vector.vector.Vector.__and__(self,other)
sympy.physics.vector.vector.Vector.__eq__(self,other)
sympy.physics.vector.vector.Vector.__hash__(self)
sympy.physics.vector.vector.Vector.__mul__(self,other)
sympy.physics.vector.vector.Vector.__neg__(self)
sympy.physics.vector.vector.Vector.__or__(self,other)
sympy.physics.vector.vector.Vector.__ror__(self,other)
sympy.physics.vector.vector.Vector.__rsub__(self,other)
sympy.physics.vector.vector.Vector.__sub__(self,other)
sympy.physics.vector.vector.Vector.__truediv__(self,other)
sympy.physics.vector.vector.Vector.__xor__(self,other)
sympy.physics.vector.vector.Vector._eval_evalf(self,prec)
sympy.physics.vector.vector.Vector._latex(self,printer)
sympy.physics.vector.vector.Vector._pretty(self,printer)
sympy.physics.vector.vector.Vector._sympystr(self,printer,order=True)
sympy.physics.vector.vector.Vector.angle_between(self,vec)
sympy.physics.vector.vector.Vector.applyfunc(self,f)
sympy.physics.vector.vector.Vector.cross(self,other)
sympy.physics.vector.vector.Vector.diff(self,var,frame,var_in_dcm=True)
sympy.physics.vector.vector.Vector.doit(self,**hints)
sympy.physics.vector.vector.Vector.dot(self,other)
sympy.physics.vector.vector.Vector.dt(self,otherframe)
sympy.physics.vector.vector.Vector.express(self,otherframe,variables=False)
sympy.physics.vector.vector.Vector.free_dynamicsymbols(self,reference_frame)
sympy.physics.vector.vector.Vector.free_symbols(self,reference_frame)
sympy.physics.vector.vector.Vector.func(self)
sympy.physics.vector.vector.Vector.magnitude(self)
sympy.physics.vector.vector.Vector.normalize(self)
sympy.physics.vector.vector.Vector.outer(self,other)
sympy.physics.vector.vector.Vector.separate(self)
sympy.physics.vector.vector.Vector.simplify(self)
sympy.physics.vector.vector.Vector.subs(self,*args,**kwargs)
sympy.physics.vector.vector.Vector.to_matrix(self,reference_frame)
sympy.physics.vector.vector.Vector.xreplace(self,rule)
sympy.physics.vector.vector.VectorTypeError(self,other,want)
sympy.physics.vector.vector._check_vector(other)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/printing.py----------------------------------------
A:sympy.physics.vector.printing.ol->str(e.args[0].func)
A:sympy.physics.vector.printing.expr->Symbol(func)
A:sympy.physics.vector.printing.base->self._print_Function(expr)
A:sympy.physics.vector.printing.der_expr->der_expr.doit().doit()
A:sympy.physics.vector.printing.red->Symbol(func).atoms(AppliedUndef)
A:sympy.physics.vector.printing.dots->len(syms)
A:sympy.physics.vector.printing.base_split->self._print_Function(expr).split('_', 1)
A:sympy.physics.vector.printing.syms->list(reversed(deriv.variables))
A:sympy.physics.vector.printing.pform->self._print_Symbol(Symbol(func_name))
A:sympy.physics.vector.printing.outstr->vsprint(expr, **settings)
A:sympy.physics.vector.printing.p->VectorStrReprPrinter(settings)
A:sympy.physics.vector.printing.string_printer->VectorStrPrinter(settings)
A:sympy.physics.vector.printing.pp->VectorPrettyPrinter(settings)
A:sympy.physics.vector.printing.uflag->pretty_use_unicode(use_unicode)
A:sympy.physics.vector.printing.latex_printer->VectorLatexPrinter(settings)
A:sympy.physics.vector.printing.init_vprinting.__doc__->init_vprinting.__doc__.format(params)
sympy.physics.vector.init_vprinting(**kwargs)
sympy.physics.vector.printing.VectorLatexPrinter(LatexPrinter)
sympy.physics.vector.printing.VectorLatexPrinter._print_Derivative(self,der_expr)
sympy.physics.vector.printing.VectorLatexPrinter._print_Function(self,expr,exp=None)
sympy.physics.vector.printing.VectorPrettyPrinter(PrettyPrinter)
sympy.physics.vector.printing.VectorPrettyPrinter._print_Derivative(self,deriv)
sympy.physics.vector.printing.VectorPrettyPrinter._print_Function(self,e)
sympy.physics.vector.printing.VectorStrPrinter(StrPrinter)
sympy.physics.vector.printing.VectorStrPrinter._print_Derivative(self,e)
sympy.physics.vector.printing.VectorStrPrinter._print_Function(self,e)
sympy.physics.vector.printing.VectorStrReprPrinter(VectorStrPrinter)
sympy.physics.vector.printing.VectorStrReprPrinter._print_str(self,s)
sympy.physics.vector.printing.init_vprinting(**kwargs)
sympy.physics.vector.printing.vlatex(expr,**settings)
sympy.physics.vector.printing.vpprint(expr,**settings)
sympy.physics.vector.printing.vprint(expr,**settings)
sympy.physics.vector.printing.vsprint(expr,**settings)
sympy.physics.vector.printing.vsstrrepr(expr,**settings)
sympy.physics.vector.vlatex(expr,**settings)
sympy.physics.vector.vpprint(expr,**settings)
sympy.physics.vector.vprint(expr,**settings)
sympy.physics.vector.vsprint(expr,**settings)
sympy.physics.vector.vsstrrepr(expr,**settings)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/test_dyadic.py----------------------------------------
A:sympy.physics.vector.tests.test_dyadic.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_dyadic.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_dyadic.qd->dynamicsymbols('q', 1)
A:sympy.physics.vector.tests.test_dyadic.B->ReferenceFrame('A').orientnew('B', 'Axis', [q, A.z])
A:sympy.physics.vector.tests.test_dyadic.(a, b, c, d, e, f)->symbols('a, b, c, d, e, f')
A:sympy.physics.vector.tests.test_dyadic.d4->v1.outer(v2)
A:sympy.physics.vector.tests.test_dyadic.d5->v1.outer(v1)
A:sympy.physics.vector.tests.test_dyadic.C->ReferenceFrame('A').orientnew('C', 'Axis', [q, A.x])
A:sympy.physics.vector.tests.test_dyadic.(x, y, z, k, n, m, w, f, s, A)->symbols('x, y, z, k, n, m, w, f, s, A')
A:sympy.physics.vector.tests.test_dyadic.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_dyadic.test1->test1.simplify().simplify()
A:sympy.physics.vector.tests.test_dyadic.test2->test2.simplify().simplify()
A:sympy.physics.vector.tests.test_dyadic.test3->test3.simplify().simplify()
A:sympy.physics.vector.tests.test_dyadic.test4->test4.simplify().simplify()
A:sympy.physics.vector.tests.test_dyadic.s->symbols('s')
A:sympy.physics.vector.tests.test_dyadic.(x, y, z)->symbols('x y z')
A:sympy.physics.vector.tests.test_dyadic.D->outer(N.x, N.x)
sympy.physics.vector.tests.test_dyadic.test_check_dyadic()
sympy.physics.vector.tests.test_dyadic.test_dyadic()
sympy.physics.vector.tests.test_dyadic.test_dyadic_evalf()
sympy.physics.vector.tests.test_dyadic.test_dyadic_simplify()
sympy.physics.vector.tests.test_dyadic.test_dyadic_subs()
sympy.physics.vector.tests.test_dyadic.test_dyadic_xreplace()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/test_printing.py----------------------------------------
A:sympy.physics.vector.tests.test_printing.(a, b, c)->symbols('a, b, c')
A:sympy.physics.vector.tests.test_printing.(alpha, omega, beta)->dynamicsymbols('alpha, omega, beta')
A:sympy.physics.vector.tests.test_printing.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_printing.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_printing.r->Function('r')('t')
A:sympy.physics.vector.tests.test_printing.r2->Function('r^2')('t')
A:sympy.physics.vector.tests.test_printing.ra->Function('r__a')('t')
A:sympy.physics.vector.tests.test_printing.(a, b, c, d, omega)->symbols('a, b, c, d, omega')
A:sympy.physics.vector.tests.test_printing.(theta, omega, alpha, q)->dynamicsymbols('theta, omega, alpha, q')
A:sympy.physics.vector.tests.test_printing.(phi1, phi2, phi3)->dynamicsymbols('phi1, phi2, phi3')
A:sympy.physics.vector.tests.test_printing.(theta1, theta2, theta3)->symbols('theta1, theta2, theta3')
A:sympy.physics.vector.tests.test_printing.(omega, alpha)->dynamicsymbols('omega, alpha')
A:sympy.physics.vector.tests.test_printing.x->symbols('x')
A:sympy.physics.vector.tests.test_printing.J->symbols('J')
A:sympy.physics.vector.tests.test_printing.f->Function('f')
A:sympy.physics.vector.tests.test_printing.g->Function('g')
A:sympy.physics.vector.tests.test_printing.h->Function('h')
A:sympy.physics.vector.tests.test_printing.A_frame->sympy.physics.mechanics.ReferenceFrame('A')
A:sympy.physics.vector.tests.test_printing.(thetad, phid)->sympy.physics.mechanics.dynamicsymbols('theta, phi', 1)
A:sympy.physics.vector.tests.test_printing.L->symbols('L')
sympy.physics.vector.tests.test_printing.ascii_vpretty(expr)
sympy.physics.vector.tests.test_printing.test_dyadic_latex()
sympy.physics.vector.tests.test_printing.test_dyadic_pretty_print()
sympy.physics.vector.tests.test_printing.test_dyadic_str()
sympy.physics.vector.tests.test_printing.test_issue_13354()
sympy.physics.vector.tests.test_printing.test_issue_14041()
sympy.physics.vector.tests.test_printing.test_latex_printer()
sympy.physics.vector.tests.test_printing.test_vector_derivative_printing()
sympy.physics.vector.tests.test_printing.test_vector_latex()
sympy.physics.vector.tests.test_printing.test_vector_latex_arguments()
sympy.physics.vector.tests.test_printing.test_vector_latex_with_functions()
sympy.physics.vector.tests.test_printing.test_vector_pretty_print()
sympy.physics.vector.tests.test_printing.test_vector_str_arguments()
sympy.physics.vector.tests.test_printing.test_vector_str_printing()
sympy.physics.vector.tests.test_printing.test_vlatex()
sympy.physics.vector.tests.test_printing.unicode_vpretty(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/test_vector.py----------------------------------------
A:sympy.physics.vector.tests.test_vector.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_vector.(A, B, C, D)->symbols('A, B, C, D', cls=ReferenceFrame)
A:sympy.physics.vector.tests.test_vector.(a, b, c, d, e, f)->dynamicsymbols('a, b, c, d, e, f')
A:sympy.physics.vector.tests.test_vector.q->symbols('q')
A:sympy.physics.vector.tests.test_vector.B->ReferenceFrame('B')
A:sympy.physics.vector.tests.test_vector.(q1, q2, q3, q4)->dynamicsymbols('q1 q2 q3 q4')
A:sympy.physics.vector.tests.test_vector.(q1d, q2d, q3d, q4d)->dynamicsymbols('q1 q2 q3 q4', 1)
A:sympy.physics.vector.tests.test_vector.(q1dd, q2dd, q3dd, q4dd)->dynamicsymbols('q1 q2 q3 q4', 2)
A:sympy.physics.vector.tests.test_vector.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_vector.v3->v1.dt(B)
A:sympy.physics.vector.tests.test_vector.v4->v2.dt(B)
A:sympy.physics.vector.tests.test_vector.b_measx->(q2 ** 2 * B.y).dot(N.x).diff(q2)
A:sympy.physics.vector.tests.test_vector.b_measy->(q2 ** 2 * B.y).dot(N.y).diff(q2)
A:sympy.physics.vector.tests.test_vector.b_measz->(q2 ** 2 * B.y).dot(N.z).diff(q2)
A:sympy.physics.vector.tests.test_vector.(u1, u2, u3, u4)->dynamicsymbols('u1 u2 u3 u4')
A:sympy.physics.vector.tests.test_vector.(x, y, z, k, n, m, w, f, s, A)->symbols('x, y, z, k, n, m, w, f, s, A')
A:sympy.physics.vector.tests.test_vector.test1->test1.simplify().simplify()
A:sympy.physics.vector.tests.test_vector.test2->test2.simplify().simplify()
A:sympy.physics.vector.tests.test_vector.test3->test3.simplify().simplify()
A:sympy.physics.vector.tests.test_vector.test4->test4.simplify().simplify()
A:sympy.physics.vector.tests.test_vector.(a, b)->symbols('a b')
A:sympy.physics.vector.tests.test_vector.(x, y, z)->symbols('x y z')
A:sympy.physics.vector.tests.test_vector.u1->dynamicsymbols('u1')
sympy.physics.vector.tests.test_vector.test_Vector()
sympy.physics.vector.tests.test_vector.test_Vector_diffs()
sympy.physics.vector.tests.test_vector.test_free_dynamicsymbols()
sympy.physics.vector.tests.test_vector.test_issue_23366()
sympy.physics.vector.tests.test_vector.test_vector_angle()
sympy.physics.vector.tests.test_vector.test_vector_evalf()
sympy.physics.vector.tests.test_vector.test_vector_simplify()
sympy.physics.vector.tests.test_vector.test_vector_var_in_dcm()
sympy.physics.vector.tests.test_vector.test_vector_xreplace()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/test_fieldfunctions.py----------------------------------------
A:sympy.physics.vector.tests.test_fieldfunctions.R->ReferenceFrame('R')
A:sympy.physics.vector.tests.test_fieldfunctions.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_fieldfunctions.P->ReferenceFrame('R').orientnew('P', 'Axis', [q, R.z])
A:sympy.physics.vector.tests.test_fieldfunctions.a->Symbol('a')
A:sympy.physics.vector.tests.test_fieldfunctions.grad_field->gradient(scalar_field, R)
A:sympy.physics.vector.tests.test_fieldfunctions.curl_field->curl(vector_field, R)
A:sympy.physics.vector.tests.test_fieldfunctions.origin->Point('O')
A:sympy.physics.vector.tests.test_fieldfunctions.point1->Point('O').locatenew('P1', 1 * R.x + 2 * R.y + 3 * R.z)
A:sympy.physics.vector.tests.test_fieldfunctions.point2->Point('O').locatenew('P2', 4 * R.x + 5 * R.y + 6 * R.z)
A:sympy.physics.vector.tests.test_fieldfunctions.genericpointR->Point('O').locatenew('RP', R[0] * R.x + R[1] * R.y + R[2] * R.z)
A:sympy.physics.vector.tests.test_fieldfunctions.genericpointP->Point('O').locatenew('PP', P[0] * P.x + P[1] * P.y + P[2] * P.z)
sympy.physics.vector.tests.test_fieldfunctions.test_conservative()
sympy.physics.vector.tests.test_fieldfunctions.test_curl()
sympy.physics.vector.tests.test_fieldfunctions.test_divergence()
sympy.physics.vector.tests.test_fieldfunctions.test_gradient()
sympy.physics.vector.tests.test_fieldfunctions.test_scalar_potential()
sympy.physics.vector.tests.test_fieldfunctions.test_scalar_potential_difference()
sympy.physics.vector.tests.test_fieldfunctions.test_solenoidal()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/test_frame.py----------------------------------------
A:sympy.physics.vector.tests.test_frame.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_frame.B->ReferenceFrame('B')
A:sympy.physics.vector.tests.test_frame.C->ReferenceFrame('C')
A:sympy.physics.vector.tests.test_frame.D->ReferenceFrame('D')
A:sympy.physics.vector.tests.test_frame.E->ReferenceFrame('N', ['a', 'b', 'c']).orientnew('E', 'Space', [q1, q2, q3], '123')
A:sympy.physics.vector.tests.test_frame.F->ReferenceFrame('N', ['a', 'b', 'c']).orientnew('F', 'Body', (q1, q2, q3), 313)
A:sympy.physics.vector.tests.test_frame.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_frame.qd->dynamicsymbols('q', 1)
A:sympy.physics.vector.tests.test_frame.N->ReferenceFrame('N', ['a', 'b', 'c'])
A:sympy.physics.vector.tests.test_frame.mapping->ReferenceFrame('A').variable_map(C)
A:sympy.physics.vector.tests.test_frame.(q1, q2, q3, q4)->dynamicsymbols('q1 q2 q3 q4')
A:sympy.physics.vector.tests.test_frame.(q1d, q2d, q3d, q4d)->dynamicsymbols('q1 q2 q3 q4', 1)
A:sympy.physics.vector.tests.test_frame.(u1, u2, u3)->dynamicsymbols('q1:4', 1)
A:sympy.physics.vector.tests.test_frame.A2->ReferenceFrame('A').dcm(B)
A:sympy.physics.vector.tests.test_frame.q0->dynamicsymbols('q0')
A:sympy.physics.vector.tests.test_frame.q0d->dynamicsymbols('q0', 1)
A:sympy.physics.vector.tests.test_frame.G->ReferenceFrame('N', ['a', 'b', 'c']).orientnew('G', 'Axis', (q1, N.x + N.y))
A:sympy.physics.vector.tests.test_frame.(c11, c12, c13)->dynamicsymbols('C11 C12 C13')
A:sympy.physics.vector.tests.test_frame.(c21, c22, c23)->dynamicsymbols('C21 C22 C23')
A:sympy.physics.vector.tests.test_frame.(c31, c32, c33)->dynamicsymbols('C31 C32 C33')
A:sympy.physics.vector.tests.test_frame.(c11d, c12d, c13d)->dynamicsymbols('C11 C12 C13', level=1)
A:sympy.physics.vector.tests.test_frame.(c21d, c22d, c23d)->dynamicsymbols('C21 C22 C23', level=1)
A:sympy.physics.vector.tests.test_frame.(c31d, c32d, c33d)->dynamicsymbols('C31 C32 C33', level=1)
A:sympy.physics.vector.tests.test_frame.DCM->Matrix([[c11, c12, c13], [c21, c22, c23], [c31, c32, c33]])
A:sympy.physics.vector.tests.test_frame.b1a->ReferenceFrame('B').x.express(A)
A:sympy.physics.vector.tests.test_frame.b2a->ReferenceFrame('B').y.express(A)
A:sympy.physics.vector.tests.test_frame.b3a->ReferenceFrame('B').z.express(A)
A:sympy.physics.vector.tests.test_frame.(q1, q2, q3)->dynamicsymbols('q1:4')
A:sympy.physics.vector.tests.test_frame.q1->dynamicsymbols('q1')
A:sympy.physics.vector.tests.test_frame.u->dynamicsymbols('u:3')
A:sympy.physics.vector.tests.test_frame.I->ReferenceFrame('I')
A:sympy.physics.vector.tests.test_frame.(u1, u2)->dynamicsymbols('u1, u2')
A:sympy.physics.vector.tests.test_frame.(q0, q1, q2, q3)->symbols('q0 q1 q2 q3')
A:sympy.physics.vector.tests.test_frame.s1->sin(q1)
A:sympy.physics.vector.tests.test_frame.c1->cos(q1)
A:sympy.physics.vector.tests.test_frame.s2->sin(q2)
A:sympy.physics.vector.tests.test_frame.c2->cos(q2)
A:sympy.physics.vector.tests.test_frame.s3->sin(q3)
A:sympy.physics.vector.tests.test_frame.c3->cos(q3)
A:sympy.physics.vector.tests.test_frame.dcm->Matrix([[c2 * c3, s1 * s2 * c3 - s3 * c1, c1 * s2 * c3 + s3 * s1], [c2 * s3, s1 * s2 * s3 + c3 * c1, c1 * s2 * s3 - c3 * s1], [-s2, s1 * c2, c1 * c2]])
A:sympy.physics.vector.tests.test_frame.AwB->ReferenceFrame('B').ang_vel_in(A)
A:sympy.physics.vector.tests.test_frame.A1->ReferenceFrame('A').dcm(B)
A:sympy.physics.vector.tests.test_frame.A3->ReferenceFrame('A').dcm(B)
A:sympy.physics.vector.tests.test_frame.(c1, c2, c3)->symbols('c1:4')
A:sympy.physics.vector.tests.test_frame.(psi, theta, phi)->dynamicsymbols('psi, theta, varphi')
A:sympy.physics.vector.tests.test_frame.A_w_B->ReferenceFrame('B').ang_vel_in(A)
A:sympy.physics.vector.tests.test_frame.(a, b, c)->symbols('a b c')
sympy.physics.vector.tests.test_frame.test_ang_vel()
sympy.physics.vector.tests.test_frame.test_check_frame()
sympy.physics.vector.tests.test_frame.test_coordinate_vars()
sympy.physics.vector.tests.test_frame.test_dcm()
sympy.physics.vector.tests.test_frame.test_dcm_cache_dict()
sympy.physics.vector.tests.test_frame.test_dcm_diff_16824()
sympy.physics.vector.tests.test_frame.test_dict_list()
sympy.physics.vector.tests.test_frame.test_frame_dict()
sympy.physics.vector.tests.test_frame.test_issue_10348()
sympy.physics.vector.tests.test_frame.test_issue_11498()
sympy.physics.vector.tests.test_frame.test_issue_11503()
sympy.physics.vector.tests.test_frame.test_looped_frame_warning()
sympy.physics.vector.tests.test_frame.test_orient_axis()
sympy.physics.vector.tests.test_frame.test_orient_body()
sympy.physics.vector.tests.test_frame.test_orient_body_advanced()
sympy.physics.vector.tests.test_frame.test_orient_body_simple_ang_vel()
sympy.physics.vector.tests.test_frame.test_orient_explicit()
sympy.physics.vector.tests.test_frame.test_orient_quaternion()
sympy.physics.vector.tests.test_frame.test_orient_space()
sympy.physics.vector.tests.test_frame.test_orient_space_advanced()
sympy.physics.vector.tests.test_frame.test_orientnew_respects_input_indices()
sympy.physics.vector.tests.test_frame.test_orientnew_respects_input_latexs()
sympy.physics.vector.tests.test_frame.test_orientnew_respects_input_variables()
sympy.physics.vector.tests.test_frame.test_orientnew_respects_parent_class()
sympy.physics.vector.tests.test_frame.test_partial_velocity()
sympy.physics.vector.tests.test_frame.test_reference_frame()
sympy.physics.vector.tests.test_frame.test_w_diff_dcm1()
sympy.physics.vector.tests.test_frame.test_w_diff_dcm2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/test_functions.py----------------------------------------
A:sympy.physics.vector.tests.test_functions.(q1, q2, q3, q4, q5)->symbols('q1 q2 q3 q4 q5')
A:sympy.physics.vector.tests.test_functions.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_functions.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_functions.B->ReferenceFrame('B')
A:sympy.physics.vector.tests.test_functions.C->Point('C')
A:sympy.physics.vector.tests.test_functions.zerov->Vector(0)
A:sympy.physics.vector.tests.test_functions.zerod->Dyadic(0)
A:sympy.physics.vector.tests.test_functions.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_functions.qd->dynamicsymbols('q', 1)
A:sympy.physics.vector.tests.test_functions.(q1, q2, q3, q4)->dynamicsymbols('q1 q2 q3 q4')
A:sympy.physics.vector.tests.test_functions.(q1d, q2d, q3d, q4d)->dynamicsymbols('q1 q2 q3 q4', 1)
A:sympy.physics.vector.tests.test_functions.(q1dd, q2dd, q3dd, q4dd)->dynamicsymbols('q1 q2 q3 q4', 2)
A:sympy.physics.vector.tests.test_functions.(s1, s2, s3)->symbols('s1 s2 s3')
A:sympy.physics.vector.tests.test_functions.(S1, S2, S3)->symbols('S1 S2 S3')
A:sympy.physics.vector.tests.test_functions.(S4, S5, S6)->symbols('S4 S5 S6')
A:sympy.physics.vector.tests.test_functions.(t1, t2)->symbols('t1 t2')
A:sympy.physics.vector.tests.test_functions.(a, b, c)->dynamicsymbols('a b c')
A:sympy.physics.vector.tests.test_functions.(ad, bd, cd)->dynamicsymbols('a b c', 1)
A:sympy.physics.vector.tests.test_functions.(a2d, b2d, c2d)->dynamicsymbols('a b c', 2)
A:sympy.physics.vector.tests.test_functions.answer->get_motion_params(N, acceleration=a * N.x, velocity=S1 * N.x, position=S2 * N.x, timevalue1=t1, timevalue2=t2)
A:sympy.physics.vector.tests.test_functions.i1->Integral(a, (t, t2, t))
A:sympy.physics.vector.tests.test_functions.(q0, q1, q2, q3)->dynamicsymbols('q0 q1 q2 q3')
A:sympy.physics.vector.tests.test_functions.(q0d, q1d, q2d, q3d)->dynamicsymbols('q0 q1 q2 q3', 1)
A:sympy.physics.vector.tests.test_functions.(u1, u2, u3)->dynamicsymbols('u1 u2 u3')
A:sympy.physics.vector.tests.test_functions.ke->kinematic_equations([u1, u2, u3], [q1, q2, q3], 'body', 313)
A:sympy.physics.vector.tests.test_functions.kds->kinematic_equations([u1, u2, u3], [q0, q1, q2, q3], 'quaternion')
A:sympy.physics.vector.tests.test_functions.(q1, q2, q3, u1, u2, u3)->dynamicsymbols('q1 q2 q3 u1 u2 u3')
A:sympy.physics.vector.tests.test_functions.(u4, u5)->dynamicsymbols('u4, u5')
A:sympy.physics.vector.tests.test_functions.r->symbols('r')
A:sympy.physics.vector.tests.test_functions.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.vector.tests.test_functions.L->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x])
A:sympy.physics.vector.tests.test_functions.R->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y])
A:sympy.physics.vector.tests.test_functions.Dmc->Point('C').locatenew('Dmc', r * L.z)
A:sympy.physics.vector.tests.test_functions.f1->dynamicsymbols('f1')
A:sympy.physics.vector.tests.test_functions.f2->dynamicsymbols('f2', real=True)
A:sympy.physics.vector.tests.test_functions.f3->dynamicsymbols('f3', positive=True)
A:sympy.physics.vector.tests.test_functions.(f4, f5)->dynamicsymbols('f4,f5', commutative=False)
A:sympy.physics.vector.tests.test_functions.f6->dynamicsymbols('f6', integer=True)
sympy.physics.vector.tests.test_functions.test_cross()
sympy.physics.vector.tests.test_functions.test_cross_different_frames()
sympy.physics.vector.tests.test_functions.test_dot()
sympy.physics.vector.tests.test_functions.test_dot_different_frames()
sympy.physics.vector.tests.test_functions.test_dynamicsymbols()
sympy.physics.vector.tests.test_functions.test_express()
sympy.physics.vector.tests.test_functions.test_get_motion_methods()
sympy.physics.vector.tests.test_functions.test_kin_eqs()
sympy.physics.vector.tests.test_functions.test_operator_match()
sympy.physics.vector.tests.test_functions.test_partial_velocity()
sympy.physics.vector.tests.test_functions.test_time_derivative()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/test_output.py----------------------------------------
A:sympy.physics.vector.tests.test_output.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_output.zerov->Vector(0)
A:sympy.physics.vector.tests.test_output.zerod->Dyadic(0)
sympy.physics.vector.tests.test_output.test_output_type()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/vector/tests/test_point.py----------------------------------------
A:sympy.physics.vector.tests.test_point.(q, q2)->dynamicsymbols('q q2')
A:sympy.physics.vector.tests.test_point.(qd, q2d)->dynamicsymbols('q q2', 1)
A:sympy.physics.vector.tests.test_point.(qdd, q2dd)->dynamicsymbols('q q2', 2)
A:sympy.physics.vector.tests.test_point.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_point.B->ReferenceFrame('B')
A:sympy.physics.vector.tests.test_point.O->Point('O')
A:sympy.physics.vector.tests.test_point.P->Point('P')
A:sympy.physics.vector.tests.test_point.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_point.qd->dynamicsymbols('q', 1)
A:sympy.physics.vector.tests.test_point.qdd->dynamicsymbols('q', 2)
A:sympy.physics.vector.tests.test_point.Q->Point('Q')
A:sympy.physics.vector.tests.test_point.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_point.p->Point('p')
A:sympy.physics.vector.tests.test_point.(u1, u2)->dynamicsymbols('q1:3', 1)
A:sympy.physics.vector.tests.test_point.(q1, q2)->dynamicsymbols('q1:3')
A:sympy.physics.vector.tests.test_point.P1->Point('P1')
A:sympy.physics.vector.tests.test_point.P2->Point('P2')
A:sympy.physics.vector.tests.test_point.P3->Point('P3')
A:sympy.physics.vector.tests.test_point.(q1, q2, u1)->dynamicsymbols('q1, q2, u1')
A:sympy.physics.vector.tests.test_point.S->ReferenceFrame('S')
A:sympy.physics.vector.tests.test_point.(q1, q2, u1, u2)->dynamicsymbols('q1 q2 u1 u2')
A:sympy.physics.vector.tests.test_point.P4->Point('P4')
A:sympy.physics.vector.tests.test_point.O1->Point('O1')
A:sympy.physics.vector.tests.test_point.(q, q1, q2, u)->dynamicsymbols('q q1 q2 u')
A:sympy.physics.vector.tests.test_point.(q, u)->dynamicsymbols('q u')
A:sympy.physics.vector.tests.test_point.R->Point('R')
A:sympy.physics.vector.tests.test_point.C->ReferenceFrame('C')
A:sympy.physics.vector.tests.test_point.Am->Point('Am')
A:sympy.physics.vector.tests.test_point.Bm->Point('Bm')
A:sympy.physics.vector.tests.test_point.Cm->Point('Cm')
A:sympy.physics.vector.tests.test_point.temp->Point('Cm')._vel_dict.copy()
A:sympy.physics.vector.tests.test_point.q1->dynamicsymbols('q1')
A:sympy.physics.vector.tests.test_point.(v1, v2)->dynamicsymbols('q1:3', 2)
sympy.physics.vector.tests.test_point.test_auto_acc_derivative()
sympy.physics.vector.tests.test_point.test_auto_point_acc_compute_vel()
sympy.physics.vector.tests.test_point.test_auto_point_acc_zero_vel()
sympy.physics.vector.tests.test_point.test_auto_point_vel()
sympy.physics.vector.tests.test_point.test_auto_point_vel_connected_frames()
sympy.physics.vector.tests.test_point.test_auto_point_vel_if_tree_has_vel_but_inappropriate_pos_vector()
sympy.physics.vector.tests.test_point.test_auto_point_vel_multiple_paths_warning_arises()
sympy.physics.vector.tests.test_point.test_auto_point_vel_multiple_point_path()
sympy.physics.vector.tests.test_point.test_auto_point_vel_shortest_path()
sympy.physics.vector.tests.test_point.test_auto_vel_cyclic_warning_arises()
sympy.physics.vector.tests.test_point.test_auto_vel_cyclic_warning_msg()
sympy.physics.vector.tests.test_point.test_auto_vel_derivative()
sympy.physics.vector.tests.test_point.test_auto_vel_dont_overwrite()
sympy.physics.vector.tests.test_point.test_auto_vel_multiple_path_warning_msg()
sympy.physics.vector.tests.test_point.test_point_a1pt_theorys()
sympy.physics.vector.tests.test_point.test_point_a2pt_theorys()
sympy.physics.vector.tests.test_point.test_point_funcs()
sympy.physics.vector.tests.test_point.test_point_partial_velocity()
sympy.physics.vector.tests.test_point.test_point_pos()
sympy.physics.vector.tests.test_point.test_point_v1pt_theorys()
sympy.physics.vector.tests.test_point.test_point_v2pt_theorys()
sympy.physics.vector.tests.test_point.test_point_vel()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/continuum_mechanics/beam.py----------------------------------------
A:sympy.physics.continuum_mechanics.beam.numpy->import_module('numpy', import_kwargs={'fromlist': ['arange']})
A:sympy.physics.continuum_mechanics.beam.str_sol->'Beam({}, {}, {})'.format(sstr(self._length), sstr(self._elastic_modulus), sstr(shape_description))
A:sympy.physics.continuum_mechanics.beam.self._length->sympify(l)
A:sympy.physics.continuum_mechanics.beam.self._area->sympify(a)
A:sympy.physics.continuum_mechanics.beam.self._elastic_modulus->sympify(e)
A:sympy.physics.continuum_mechanics.beam.self._second_moment->sympify(i)
A:sympy.physics.continuum_mechanics.beam.new_second_moment->Piecewise((self.second_moment, x <= self.length), (beam.second_moment, x <= new_length))
A:sympy.physics.continuum_mechanics.beam.new_beam->Beam(new_length, E, new_second_moment, x)
A:sympy.physics.continuum_mechanics.beam.loc->sympify(loc)
A:sympy.physics.continuum_mechanics.beam.reaction_load->Symbol('R_' + str(loc))
A:sympy.physics.continuum_mechanics.beam.reaction_moment->Symbol('M_' + str(loc))
A:sympy.physics.continuum_mechanics.beam.value->sympify(value)
A:sympy.physics.continuum_mechanics.beam.start->sympify(start)
A:sympy.physics.continuum_mechanics.beam.order->sympify(order)
A:sympy.physics.continuum_mechanics.beam.h->Symbol('h')
A:sympy.physics.continuum_mechanics.beam.shear_1->integrate(load_1, x)
A:sympy.physics.continuum_mechanics.beam.shear_curve_1->limit(shear_1, x, l)
A:sympy.physics.continuum_mechanics.beam.bending_1->integrate(shear_1, x)
A:sympy.physics.continuum_mechanics.beam.moment_curve_1->limit(bending_1, x, l)
A:sympy.physics.continuum_mechanics.beam.shear_2->integrate(load_2, x)
A:sympy.physics.continuum_mechanics.beam.shear_curve_2->limit(shear_2, x, self.length - l)
A:sympy.physics.continuum_mechanics.beam.bending_2->integrate(shear_2, x)
A:sympy.physics.continuum_mechanics.beam.moment_curve_2->limit(bending_2, x, self.length - l)
A:sympy.physics.continuum_mechanics.beam.C1->Symbol('C1')
A:sympy.physics.continuum_mechanics.beam.C2->Symbol('C2')
A:sympy.physics.continuum_mechanics.beam.C3->Symbol('C3')
A:sympy.physics.continuum_mechanics.beam.C4->Symbol('C4')
A:sympy.physics.continuum_mechanics.beam.constants->list(linsolve([def_z.subs(x, 0), def_z.subs(x, l)], C1, C_i).args[0])
A:sympy.physics.continuum_mechanics.beam.self._reaction_loads->dict(zip(reactions, solution))
A:sympy.physics.continuum_mechanics.beam.self._load->self._load.subs(self._reaction_loads)
A:sympy.physics.continuum_mechanics.beam.slope_1->slope_1.subs({C1: constants[0][0], h: constants[0][4]}).subs(self._reaction_loads).subs({C1: constants[0][0], h: constants[0][4]}).subs(self._reaction_loads)
A:sympy.physics.continuum_mechanics.beam.def_1->def_1.subs({C1: constants[0][0], C2: constants[0][1], h: constants[0][4]}).subs(self._reaction_loads).subs({C1: constants[0][0], C2: constants[0][1], h: constants[0][4]}).subs(self._reaction_loads)
A:sympy.physics.continuum_mechanics.beam.slope_2->slope_2.subs({x: x - l, C3: constants[0][2], h: constants[0][4]}).subs(self._reaction_loads).subs({x: x - l, C3: constants[0][2], h: constants[0][4]}).subs(self._reaction_loads)
A:sympy.physics.continuum_mechanics.beam.def_2->def_2.subs({x: x - l, C3: constants[0][2], C4: constants[0][3], h: constants[0][4]}).subs(self._reaction_loads).subs({x: x - l, C3: constants[0][2], C4: constants[0][3], h: constants[0][4]}).subs(self._reaction_loads)
A:sympy.physics.continuum_mechanics.beam.shear_curve->Piecewise((float('nan'), self.variable <= 0), (self.shear_force()[dir_num], self.variable < self.length), (float('nan'), True))
A:sympy.physics.continuum_mechanics.beam.moment_curve->limit(moment_curves[i], x, l)
A:sympy.physics.continuum_mechanics.beam.solution->list(linsolve([shear_curve, moment_curve] + slope_eqs + deflection_eqs, (C3, C4) + reactions).args[0])
A:sympy.physics.continuum_mechanics.beam.singularity->list(set(singularity))
A:sympy.physics.continuum_mechanics.beam.shear_slope->Piecewise((float('nan'), x <= singularity[i - 1]), (self._load.rewrite(Piecewise), x < s), (float('nan'), True))
A:sympy.physics.continuum_mechanics.beam.points->solve(slope_curve.rewrite(Piecewise), self.variable, domain=S.Reals)
A:sympy.physics.continuum_mechanics.beam.max_shear->max(shear_values)
A:sympy.physics.continuum_mechanics.beam.initial_shear->limit(shear_curve, x, singularity[i - 1], '+')
A:sympy.physics.continuum_mechanics.beam.final_shear->limit(shear_curve, x, s, '-')
A:sympy.physics.continuum_mechanics.beam.shear_values->list(map(abs, shear_values))
A:sympy.physics.continuum_mechanics.beam.maximum_shear->max(shear_values)
A:sympy.physics.continuum_mechanics.beam.bending_curve->self.bending_moment()
A:sympy.physics.continuum_mechanics.beam.moment_slope->Piecewise((float('nan'), x <= singularity[i - 1]), (self.shear_force().rewrite(Piecewise), x < s), (float('nan'), True))
A:sympy.physics.continuum_mechanics.beam.max_moment->max(val)
A:sympy.physics.continuum_mechanics.beam.initial_moment->limit(bending_curve, x, singularity[i - 1], '+')
A:sympy.physics.continuum_mechanics.beam.final_moment->limit(bending_curve, x, s, '-')
A:sympy.physics.continuum_mechanics.beam.moment_values->list(map(abs, moment_values))
A:sympy.physics.continuum_mechanics.beam.maximum_moment->max(moment_values)
A:sympy.physics.continuum_mechanics.beam.prev_slope->slope_value.subs(x, args[i][1].args[1])
A:sympy.physics.continuum_mechanics.beam.slope_curve->Piecewise((float('nan'), self.variable <= 0), (self.slope()[dir_num], self.variable < self.length), (float('nan'), True))
A:sympy.physics.continuum_mechanics.beam.deflection_value->integrate(recent_segment_slope, (x, prev_end, x))
A:sympy.physics.continuum_mechanics.beam.prev_def->integrate(recent_segment_slope, (x, prev_end, x)).subs(x, args[i][1].args[1])
A:sympy.physics.continuum_mechanics.beam.constant->symbols(base_char + '4')
A:sympy.physics.continuum_mechanics.beam.(C3, C4)->symbols(base_char + '3:5')
A:sympy.physics.continuum_mechanics.beam.deflection_curve->self.deflection()
A:sympy.physics.continuum_mechanics.beam.deflections->list(map(abs, deflections))
A:sympy.physics.continuum_mechanics.beam.max_def->max(deflections)
A:sympy.physics.continuum_mechanics.beam.shear_stress->self.shear_stress()
A:sympy.physics.continuum_mechanics.beam.shear_force->self.shear_force()
A:sympy.physics.continuum_mechanics.beam.bending_moment->self.bending_moment()
A:sympy.physics.continuum_mechanics.beam.slope->self.slope()
A:sympy.physics.continuum_mechanics.beam.deflection->self.deflection()
A:sympy.physics.continuum_mechanics.beam.ax1->self._plot_shear_force(dir, subs)
A:sympy.physics.continuum_mechanics.beam.ax2->self._plot_bending_moment(dir, subs)
A:sympy.physics.continuum_mechanics.beam.ax3->self._plot_slope(dir, subs)
A:sympy.physics.continuum_mechanics.beam.ax4->self._plot_deflection(dir, subs)
A:sympy.physics.continuum_mechanics.beam.(shear_force, bending_moment)->self._solve_for_ild_equations()
A:sympy.physics.continuum_mechanics.beam.self._ild_reactions->dict(zip(reactions, solution))
A:sympy.physics.continuum_mechanics.beam.(shear_force, _)->self._solve_for_ild_equations()
A:sympy.physics.continuum_mechanics.beam.shear_curve1->shear_curve1.subs(reaction, self._ild_reactions[reaction]).subs(reaction, self._ild_reactions[reaction])
A:sympy.physics.continuum_mechanics.beam.shear_curve2->shear_curve2.subs(reaction, self._ild_reactions[reaction]).subs(reaction, self._ild_reactions[reaction])
A:sympy.physics.continuum_mechanics.beam.shear_eq->Piecewise((shear_curve1, x < distance), (shear_curve2, x > distance))
A:sympy.physics.continuum_mechanics.beam.(_, moment)->self._solve_for_ild_equations()
A:sympy.physics.continuum_mechanics.beam.moment_curve1->moment_curve1.subs(reaction, self._ild_reactions[reaction]).subs(reaction, self._ild_reactions[reaction])
A:sympy.physics.continuum_mechanics.beam.moment_curve2->moment_curve2.subs(reaction, self._ild_reactions[reaction]).subs(reaction, self._ild_reactions[reaction])
A:sympy.physics.continuum_mechanics.beam.moment_eq->Piecewise((moment_curve1, x < distance), (moment_curve2, x > distance))
A:sympy.physics.continuum_mechanics.beam.l->list(self.length.atoms(Symbol))
A:sympy.physics.continuum_mechanics.beam.length->self.length.subs(l)
A:sympy.physics.continuum_mechanics.beam.(annotations, markers, load_eq, load_eq1, fill)->self._draw_load(pictorial, length, l)
A:sympy.physics.continuum_mechanics.beam.(support_markers, support_rectangles)->self._draw_supports(length, l)
A:sympy.physics.continuum_mechanics.beam.sing_plot->plot(height + load_eq, height + load_eq1, (x, 0, length), xlim=(-height, length + height), ylim=(-length, 1.25 * length), annotations=annotations, markers=markers, rectangles=rectangles, line_color='brown', fill=fill, axis=False, show=False)
A:sympy.physics.continuum_mechanics.beam.loads->list(set(self.applied_loads) - set(self._support_as_loads))
A:sympy.physics.continuum_mechanics.beam.pos->support[0].subs(l)
A:sympy.physics.continuum_mechanics.beam.load_eq->Add(*load_eq)
A:sympy.physics.continuum_mechanics.beam.y1->lambdify(x, expr, 'numpy')
A:sympy.physics.continuum_mechanics.beam.y1_->lambdify(x, expr, 'numpy')
A:sympy.physics.continuum_mechanics.beam.y->import_module('numpy', import_kwargs={'fromlist': ['arange']}).arange(0, float(length), 0.001)
A:sympy.physics.continuum_mechanics.beam.y2->float(height)
A:sympy.physics.continuum_mechanics.beam.height->float(length / 10)
A:sympy.physics.continuum_mechanics.beam.self._shear_modulus->sympify(e)
A:sympy.physics.continuum_mechanics.beam.sol->list(linsolve([shear_curve, moment_curve], react).args[0])
A:sympy.physics.continuum_mechanics.beam.sol_dict->dict(zip(react, sol))
A:sympy.physics.continuum_mechanics.beam.shear->self.shear_force()
A:sympy.physics.continuum_mechanics.beam.pointsList->list(self._torsion_moment)
A:sympy.physics.continuum_mechanics.beam.torque_diagram->Piecewise((sum_moments, x <= pointsList[0]), (0, x >= pointsList[0]))
A:sympy.physics.continuum_mechanics.beam.integrated_torque_diagram->integrate(torque_diagram)
A:sympy.physics.continuum_mechanics.beam.defl->Function('defl')
A:sympy.physics.continuum_mechanics.beam.theta->Function('theta')
A:sympy.physics.continuum_mechanics.beam.def_x->def_x.subs({C1: constants[0], C2: constants[1]}).subs({C1: constants[0], C2: constants[1]})
A:sympy.physics.continuum_mechanics.beam.slope_x->def_x.subs({C1: constants[0], C2: constants[1]}).subs({C1: constants[0], C2: constants[1]}).diff(x)
A:sympy.physics.continuum_mechanics.beam.C_i->Symbol('C_i')
A:sympy.physics.continuum_mechanics.beam.slope_z->slope_z.subs({C1: constants[0], C2: constants[1]}).subs({C1: constants[0], C2: constants[1]})
A:sympy.physics.continuum_mechanics.beam.self._deflection[1]->def_y.subs({C1: constants[0], C_i: constants[1]})
A:sympy.physics.continuum_mechanics.beam.self._slope[2]->slope_z.subs({C1: constants[0], C2: constants[1]}).subs({C1: constants[0], C2: constants[1]}).subs(C_i, constants[1])
A:sympy.physics.continuum_mechanics.beam.slope_y->slope_y.subs({C1: constants[0], C2: constants[1]}).subs({C1: constants[0], C2: constants[1]})
A:sympy.physics.continuum_mechanics.beam.self._deflection[2]->def_z.subs({C1: constants[0], C_i: constants[1]})
A:sympy.physics.continuum_mechanics.beam.self._slope[1]->slope_y.subs({C1: constants[0], C2: constants[1]}).subs({C1: constants[0], C2: constants[1]}).subs(C_i, constants[1])
A:sympy.physics.continuum_mechanics.beam.dir->dir.lower().lower()
A:sympy.physics.continuum_mechanics.beam.Px->self._plot_shear_stress('x', subs)
A:sympy.physics.continuum_mechanics.beam.Py->self._plot_shear_stress('y', subs)
A:sympy.physics.continuum_mechanics.beam.Pz->self._plot_shear_stress('z', subs)
A:sympy.physics.continuum_mechanics.beam.load_curve->Piecewise((float('nan'), self.variable <= 0), (self._load_vector[dir_num], self.variable < self.length), (float('nan'), True))
A:sympy.physics.continuum_mechanics.beam.bending_moments->list(map(abs, bending_moments))
A:sympy.physics.continuum_mechanics.beam.max_bending_moment->max(bending_moments)
sympy.physics.continuum_mechanics.Beam(self,length,elastic_modulus,second_moment,area=Symbol('A'),variable=Symbol('x'),base_char='C')
sympy.physics.continuum_mechanics.beam.Beam(self,length,elastic_modulus,second_moment,area=Symbol('A'),variable=Symbol('x'),base_char='C')
sympy.physics.continuum_mechanics.beam.Beam.__str__(self)
sympy.physics.continuum_mechanics.beam.Beam._draw_load(self,pictorial,length,l)
sympy.physics.continuum_mechanics.beam.Beam._draw_supports(self,length,l)
sympy.physics.continuum_mechanics.beam.Beam._handle_end(self,x,value,start,order,end,type)
sympy.physics.continuum_mechanics.beam.Beam._solve_for_ild_equations(self)
sympy.physics.continuum_mechanics.beam.Beam._solve_hinge_beams(self,*reactions)
sympy.physics.continuum_mechanics.beam.Beam.applied_loads(self)
sympy.physics.continuum_mechanics.beam.Beam.apply_load(self,value,start,order,end=None)
sympy.physics.continuum_mechanics.beam.Beam.apply_support(self,loc,type='fixed')
sympy.physics.continuum_mechanics.beam.Beam.area(self)
sympy.physics.continuum_mechanics.beam.Beam.area(self,a)
sympy.physics.continuum_mechanics.beam.Beam.bc_deflection(self)
sympy.physics.continuum_mechanics.beam.Beam.bc_deflection(self,d_bcs)
sympy.physics.continuum_mechanics.beam.Beam.bc_slope(self)
sympy.physics.continuum_mechanics.beam.Beam.bc_slope(self,s_bcs)
sympy.physics.continuum_mechanics.beam.Beam.bending_moment(self)
sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions(self)
sympy.physics.continuum_mechanics.beam.Beam.cross_section(self)
sympy.physics.continuum_mechanics.beam.Beam.cross_section(self,s)
sympy.physics.continuum_mechanics.beam.Beam.deflection(self)
sympy.physics.continuum_mechanics.beam.Beam.draw(self,pictorial=True)
sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus(self)
sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus(self,e)
sympy.physics.continuum_mechanics.beam.Beam.ild_moment(self)
sympy.physics.continuum_mechanics.beam.Beam.ild_reactions(self)
sympy.physics.continuum_mechanics.beam.Beam.ild_shear(self)
sympy.physics.continuum_mechanics.beam.Beam.join(self,beam,via='fixed')
sympy.physics.continuum_mechanics.beam.Beam.length(self)
sympy.physics.continuum_mechanics.beam.Beam.length(self,l)
sympy.physics.continuum_mechanics.beam.Beam.load(self)
sympy.physics.continuum_mechanics.beam.Beam.max_bmoment(self)
sympy.physics.continuum_mechanics.beam.Beam.max_deflection(self)
sympy.physics.continuum_mechanics.beam.Beam.max_shear_force(self)
sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.plot_deflection(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.plot_slope(self,subs=None)
sympy.physics.continuum_mechanics.beam.Beam.point_cflexure(self)
sympy.physics.continuum_mechanics.beam.Beam.reaction_loads(self)
sympy.physics.continuum_mechanics.beam.Beam.remove_load(self,value,start,order,end=None)
sympy.physics.continuum_mechanics.beam.Beam.second_moment(self)
sympy.physics.continuum_mechanics.beam.Beam.second_moment(self,i)
sympy.physics.continuum_mechanics.beam.Beam.shear_force(self)
sympy.physics.continuum_mechanics.beam.Beam.shear_stress(self)
sympy.physics.continuum_mechanics.beam.Beam.slope(self)
sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment(self,distance,value,*reactions)
sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions(self,value,*reactions)
sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear(self,distance,value,*reactions)
sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads(self,*reactions)
sympy.physics.continuum_mechanics.beam.Beam.variable(self)
sympy.physics.continuum_mechanics.beam.Beam.variable(self,v)
sympy.physics.continuum_mechanics.beam.Beam3D(self,length,elastic_modulus,shear_modulus,second_moment,area,variable=Symbol('x'))
sympy.physics.continuum_mechanics.beam.Beam3D._max_bending_moment(self,dir)
sympy.physics.continuum_mechanics.beam.Beam3D._max_deflection(self,dir)
sympy.physics.continuum_mechanics.beam.Beam3D._max_shear_force(self,dir)
sympy.physics.continuum_mechanics.beam.Beam3D._plot_bending_moment(self,dir,subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D._plot_deflection(self,dir,subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D._plot_shear_force(self,dir,subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D._plot_shear_stress(self,dir,subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D._plot_slope(self,dir,subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection(self)
sympy.physics.continuum_mechanics.beam.Beam3D.apply_load(self,value,start,order,dir='y')
sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load(self,value,start,order,dir='y')
sympy.physics.continuum_mechanics.beam.Beam3D.apply_support(self,loc,type='fixed')
sympy.physics.continuum_mechanics.beam.Beam3D.area(self)
sympy.physics.continuum_mechanics.beam.Beam3D.area(self,a)
sympy.physics.continuum_mechanics.beam.Beam3D.axial_force(self)
sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress(self)
sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment(self)
sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions(self)
sympy.physics.continuum_mechanics.beam.Beam3D.deflection(self)
sympy.physics.continuum_mechanics.beam.Beam3D.load_vector(self)
sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment(self)
sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection(self)
sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force(self)
sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector(self)
sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment(self,dir='all',subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection(self,dir='all',subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results(self,dir='x',subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force(self,dir='all',subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress(self,dir='all',subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope(self,dir='all',subs=None)
sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment(self)
sympy.physics.continuum_mechanics.beam.Beam3D.second_moment(self)
sympy.physics.continuum_mechanics.beam.Beam3D.second_moment(self,i)
sympy.physics.continuum_mechanics.beam.Beam3D.shear_force(self)
sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus(self)
sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus(self,e)
sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress(self)
sympy.physics.continuum_mechanics.beam.Beam3D.slope(self)
sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads(self,*reaction)
sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion(self)
sympy.physics.continuum_mechanics.beam.Beam3D.solve_slope_deflection(self)
sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/continuum_mechanics/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/continuum_mechanics/truss.py----------------------------------------
A:sympy.physics.continuum_mechanics.truss.x->sympify(x)
A:sympy.physics.continuum_mechanics.truss.y->sympify(y)
A:sympy.physics.continuum_mechanics.truss.members_duplicate->list(self._members).copy()
A:sympy.physics.continuum_mechanics.truss.magnitude->sympify(magnitude)
A:sympy.physics.continuum_mechanics.truss.direction->sympify(direction)
A:sympy.physics.continuum_mechanics.truss.load_matrix->zeros(2 * len(self.nodes), 1)
A:sympy.physics.continuum_mechanics.truss.length->sqrt((self._node_coordinates[start][0] - self._node_coordinates[end][0]) ** 2 + (self._node_coordinates[start][1] - self._node_coordinates[end][1]) ** 2)
A:sympy.physics.continuum_mechanics.truss.start_index->self._node_labels.index(start)
A:sympy.physics.continuum_mechanics.truss.end_index->self._node_labels.index(end)
A:sympy.physics.continuum_mechanics.truss.min_load->min(min_load, load[0])
sympy.physics.continuum_mechanics.Truss(self)
sympy.physics.continuum_mechanics.truss.Truss(self)
sympy.physics.continuum_mechanics.truss.Truss.add_member(self,label,start,end)
sympy.physics.continuum_mechanics.truss.Truss.add_node(self,label,x,y)
sympy.physics.continuum_mechanics.truss.Truss.apply_load(self,location,magnitude,direction)
sympy.physics.continuum_mechanics.truss.Truss.apply_support(self,location,type)
sympy.physics.continuum_mechanics.truss.Truss.change_member_label(self,label,new_label)
sympy.physics.continuum_mechanics.truss.Truss.change_node_label(self,label,new_label)
sympy.physics.continuum_mechanics.truss.Truss.internal_forces(self)
sympy.physics.continuum_mechanics.truss.Truss.loads(self)
sympy.physics.continuum_mechanics.truss.Truss.member_labels(self)
sympy.physics.continuum_mechanics.truss.Truss.members(self)
sympy.physics.continuum_mechanics.truss.Truss.node_labels(self)
sympy.physics.continuum_mechanics.truss.Truss.node_positions(self)
sympy.physics.continuum_mechanics.truss.Truss.nodes(self)
sympy.physics.continuum_mechanics.truss.Truss.reaction_loads(self)
sympy.physics.continuum_mechanics.truss.Truss.remove_load(self,location,magnitude,direction)
sympy.physics.continuum_mechanics.truss.Truss.remove_member(self,label)
sympy.physics.continuum_mechanics.truss.Truss.remove_node(self,label)
sympy.physics.continuum_mechanics.truss.Truss.remove_support(self,location)
sympy.physics.continuum_mechanics.truss.Truss.solve(self)
sympy.physics.continuum_mechanics.truss.Truss.supports(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/continuum_mechanics/tests/test_beam.py----------------------------------------
A:sympy.physics.continuum_mechanics.tests.test_beam.x->symbols('x')
A:sympy.physics.continuum_mechanics.tests.test_beam.y->Symbol('y')
A:sympy.physics.continuum_mechanics.tests.test_beam.(R1, R2)->symbols('R1, R2')
A:sympy.physics.continuum_mechanics.tests.test_beam.E->Symbol('E')
A:sympy.physics.continuum_mechanics.tests.test_beam.E_1->Symbol('E_1')
A:sympy.physics.continuum_mechanics.tests.test_beam.I->Symbol('I')
A:sympy.physics.continuum_mechanics.tests.test_beam.I_1->Symbol('I_1')
A:sympy.physics.continuum_mechanics.tests.test_beam.A->Symbol('A')
A:sympy.physics.continuum_mechanics.tests.test_beam.b->Beam3D(20, 40, 21, 100, 25)
A:sympy.physics.continuum_mechanics.tests.test_beam.b1->Beam(50, E, Circle((0, 0), r))
A:sympy.physics.continuum_mechanics.tests.test_beam.p->sympify('-10 + 10*sqrt(10793)/43')
A:sympy.physics.continuum_mechanics.tests.test_beam.l->Symbol('l')
A:sympy.physics.continuum_mechanics.tests.test_beam.w0->Symbol('w0')
A:sympy.physics.continuum_mechanics.tests.test_beam.w2->Symbol('w2')
A:sympy.physics.continuum_mechanics.tests.test_beam.a1->Symbol('a1')
A:sympy.physics.continuum_mechanics.tests.test_beam.c->sympify('495/14')
A:sympy.physics.continuum_mechanics.tests.test_beam.c1->Symbol('c1')
A:sympy.physics.continuum_mechanics.tests.test_beam.d->Symbol('d')
A:sympy.physics.continuum_mechanics.tests.test_beam.e->Symbol('e')
A:sympy.physics.continuum_mechanics.tests.test_beam.f->Symbol('f')
A:sympy.physics.continuum_mechanics.tests.test_beam.b2->Beam(20, E, Polygon((0, 0), (a, 0), (a, c), (0, c)))
A:sympy.physics.continuum_mechanics.tests.test_beam.b3->Beam(15, E, Triangle((0, 0), (g, 0), (g / 2, h)))
A:sympy.physics.continuum_mechanics.tests.test_beam.C3->symbols('C3')
A:sympy.physics.continuum_mechanics.tests.test_beam.C4->symbols('C4')
A:sympy.physics.continuum_mechanics.tests.test_beam.b4->Beam(4, E, I, 3)
A:sympy.physics.continuum_mechanics.tests.test_beam.L->Symbol('L', positive=True)
A:sympy.physics.continuum_mechanics.tests.test_beam.(E, I, P, a3, a4)->symbols('E I P a3 a4')
A:sympy.physics.continuum_mechanics.tests.test_beam.(M1, M2)->symbols('M1, M2')
A:sympy.physics.continuum_mechanics.tests.test_beam.F->Symbol('F')
A:sympy.physics.continuum_mechanics.tests.test_beam.b5->Beam(l, E, I)
A:sympy.physics.continuum_mechanics.tests.test_beam.(R, M)->symbols('R, M')
A:sympy.physics.continuum_mechanics.tests.test_beam.(R1, M1, R2, R3, P)->symbols('R1 M1 R2 R3 P')
A:sympy.physics.continuum_mechanics.tests.test_beam.(M_0, R_0)->symbols('M_0, R_0')
A:sympy.physics.continuum_mechanics.tests.test_beam.(R_10, R_30)->symbols('R_10, R_30')
A:sympy.physics.continuum_mechanics.tests.test_beam.P->Symbol('P')
A:sympy.physics.continuum_mechanics.tests.test_beam.(R_0, R_L, M_0, M_L)->symbols('R_0, R_L, M_0, M_L')
A:sympy.physics.continuum_mechanics.tests.test_beam.(l, P)->symbols('l, P', positive=True)
A:sympy.physics.continuum_mechanics.tests.test_beam.(E, I, l, F)->symbols('E, I, l, F', positive=True)
A:sympy.physics.continuum_mechanics.tests.test_beam.(l, E, G, I, A)->symbols('l, E, G, I, A')
A:sympy.physics.continuum_mechanics.tests.test_beam.(R1, R2, R3, R4)->symbols('R1, R2, R3, R4')
A:sympy.physics.continuum_mechanics.tests.test_beam.(m, q)->symbols('m, q')
A:sympy.physics.continuum_mechanics.tests.test_beam.(dx, dy, dz)->Beam(20, E, Polygon((0, 0), (a, 0), (a, c), (0, c))).deflection()
A:sympy.physics.continuum_mechanics.tests.test_beam.(l, E, G, A, I1, I2)->symbols('l, E, G, A, I1, I2')
A:sympy.physics.continuum_mechanics.tests.test_beam.(E, I, L)->symbols('E, I, L', positive=True, real=True)
A:sympy.physics.continuum_mechanics.tests.test_beam.(R, M, P)->symbols('R, M, P', real=True)
A:sympy.physics.continuum_mechanics.tests.test_beam.beam->Beam(2 * L, E, I)
A:sympy.physics.continuum_mechanics.tests.test_beam.loading->Beam(2 * L, E, I).load.xreplace({L: 10, E: 20, I: 30, P: 40})
A:sympy.physics.continuum_mechanics.tests.test_beam.(C3, C4)->symbols('C3, C4')
A:sympy.physics.continuum_mechanics.tests.test_beam.(a, c, g, h, r, n)->symbols('a, c, g, h, r, n')
A:sympy.physics.continuum_mechanics.tests.test_beam.b0->Beam(l, E, I)
A:sympy.physics.continuum_mechanics.tests.test_beam.b0.cross_section->Circle((0, 0), 5)
A:sympy.physics.continuum_mechanics.tests.test_beam.b0.second_moment->Circle((0, 0), 5)
A:sympy.physics.continuum_mechanics.tests.test_beam.q->sympify('(10 - 10*sqrt(10793)/43)**3/160 - 20/7 + (10 - 10*sqrt(10793)/43)**4/6400 + 20*sqrt(10793)/301 + 27*(10 - 10*sqrt(10793)/43)**2/560')
sympy.physics.continuum_mechanics.tests.test_beam.test_Beam()
sympy.physics.continuum_mechanics.tests.test_beam.test_Beam3D()
sympy.physics.continuum_mechanics.tests.test_beam.test_apply_support()
sympy.physics.continuum_mechanics.tests.test_beam.test_beam_units()
sympy.physics.continuum_mechanics.tests.test_beam.test_composite_beam()
sympy.physics.continuum_mechanics.tests.test_beam.test_cross_section()
sympy.physics.continuum_mechanics.tests.test_beam.test_insufficient_bconditions()
sympy.physics.continuum_mechanics.tests.test_beam.test_max_bending_moment_Beam3D()
sympy.physics.continuum_mechanics.tests.test_beam.test_max_bmoment()
sympy.physics.continuum_mechanics.tests.test_beam.test_max_deflection()
sympy.physics.continuum_mechanics.tests.test_beam.test_max_deflection_Beam3D()
sympy.physics.continuum_mechanics.tests.test_beam.test_max_shear_force()
sympy.physics.continuum_mechanics.tests.test_beam.test_max_shear_force_Beam3D()
sympy.physics.continuum_mechanics.tests.test_beam.test_parabolic_loads()
sympy.physics.continuum_mechanics.tests.test_beam.test_point_cflexure()
sympy.physics.continuum_mechanics.tests.test_beam.test_polar_moment_Beam3D()
sympy.physics.continuum_mechanics.tests.test_beam.test_remove_load()
sympy.physics.continuum_mechanics.tests.test_beam.test_statically_indeterminate()
sympy.physics.continuum_mechanics.tests.test_beam.test_torsion_Beam3D()
sympy.physics.continuum_mechanics.tests.test_beam.test_variable_moment()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/continuum_mechanics/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/continuum_mechanics/tests/test_truss.py----------------------------------------
A:sympy.physics.continuum_mechanics.tests.test_truss.A->Symbol('A')
A:sympy.physics.continuum_mechanics.tests.test_truss.B->Symbol('B')
A:sympy.physics.continuum_mechanics.tests.test_truss.C->Symbol('C')
A:sympy.physics.continuum_mechanics.tests.test_truss.(AB, BC, AC)->symbols('AB, BC, AC')
A:sympy.physics.continuum_mechanics.tests.test_truss.P->Symbol('P')
A:sympy.physics.continuum_mechanics.tests.test_truss.t->Truss()
A:sympy.physics.continuum_mechanics.tests.test_truss.(D, CD)->symbols('D, CD')
sympy.physics.continuum_mechanics.tests.test_truss.test_truss()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/control/control_plots.py----------------------------------------
A:sympy.physics.control.control_plots.matplotlib->import_module('matplotlib', import_kwargs={'fromlist': ['pyplot']}, catch=(RuntimeError,))
A:sympy.physics.control.control_plots.numpy->import_module('numpy')
A:sympy.physics.control.control_plots.sys->system.doit().to_expr()
A:sympy.physics.control.control_plots.len_free_symbols->len(sys.free_symbols)
A:sympy.physics.control.control_plots.system->system.doit().doit()
A:sympy.physics.control.control_plots.num_poly->np.array(num_poly, dtype=np.complex128)
A:sympy.physics.control.control_plots.den_poly->np.array(den_poly, dtype=np.complex128)
A:sympy.physics.control.control_plots.zeros->np.roots(num_poly)
A:sympy.physics.control.control_plots.poles->np.roots(den_poly)
A:sympy.physics.control.control_plots.(zeros, poles)->pole_zero_numerical_data(system)
A:sympy.physics.control.control_plots.zero_real->np.real(zeros)
A:sympy.physics.control.control_plots.zero_imag->np.imag(zeros)
A:sympy.physics.control.control_plots.pole_real->np.real(poles)
A:sympy.physics.control.control_plots.pole_imag->np.imag(poles)
A:sympy.physics.control.control_plots._x->Dummy('x')
A:sympy.physics.control.control_plots.expr->system.doit().doit().to_expr()
A:sympy.physics.control.control_plots._y->_fast_inverse_laplace(expr, system.var, _x).evalf(prec)
A:sympy.physics.control.control_plots.(x, y)->bode_phase_numerical_data(system, initial_exp=initial_exp, final_exp=final_exp, freq_unit=freq_unit, phase_unit=phase_unit)
A:sympy.physics.control.control_plots._w->Dummy('w', real=True)
A:sympy.physics.control.control_plots.w_expr->system.doit().doit().to_expr().subs({system.var: repl})
A:sympy.physics.control.control_plots.phase->arg(w_expr)
A:sympy.physics.control.control_plots.mag->bode_magnitude_plot(system, initial_exp=initial_exp, final_exp=final_exp, show=False, grid=grid, show_axes=show_axes, freq_unit=freq_unit, **kwargs)
sympy.physics.control.bode_magnitude_numerical_data(system,initial_exp=-5,final_exp=5,freq_unit='rad/sec',**kwargs)
sympy.physics.control.bode_magnitude_plot(system,initial_exp=-5,final_exp=5,color='b',show_axes=False,grid=True,show=True,freq_unit='rad/sec',**kwargs)
sympy.physics.control.bode_phase_numerical_data(system,initial_exp=-5,final_exp=5,freq_unit='rad/sec',phase_unit='rad',**kwargs)
sympy.physics.control.bode_phase_plot(system,initial_exp=-5,final_exp=5,color='b',show_axes=False,grid=True,show=True,freq_unit='rad/sec',phase_unit='rad',**kwargs)
sympy.physics.control.bode_plot(system,initial_exp=-5,final_exp=5,grid=True,show_axes=False,show=True,freq_unit='rad/sec',phase_unit='rad',**kwargs)
sympy.physics.control.control_plots._check_system(system)
sympy.physics.control.control_plots.bode_magnitude_numerical_data(system,initial_exp=-5,final_exp=5,freq_unit='rad/sec',**kwargs)
sympy.physics.control.control_plots.bode_magnitude_plot(system,initial_exp=-5,final_exp=5,color='b',show_axes=False,grid=True,show=True,freq_unit='rad/sec',**kwargs)
sympy.physics.control.control_plots.bode_phase_numerical_data(system,initial_exp=-5,final_exp=5,freq_unit='rad/sec',phase_unit='rad',**kwargs)
sympy.physics.control.control_plots.bode_phase_plot(system,initial_exp=-5,final_exp=5,color='b',show_axes=False,grid=True,show=True,freq_unit='rad/sec',phase_unit='rad',**kwargs)
sympy.physics.control.control_plots.bode_plot(system,initial_exp=-5,final_exp=5,grid=True,show_axes=False,show=True,freq_unit='rad/sec',phase_unit='rad',**kwargs)
sympy.physics.control.control_plots.impulse_response_numerical_data(system,prec=8,lower_limit=0,upper_limit=10,**kwargs)
sympy.physics.control.control_plots.impulse_response_plot(system,color='b',prec=8,lower_limit=0,upper_limit=10,show_axes=False,grid=True,show=True,**kwargs)
sympy.physics.control.control_plots.pole_zero_numerical_data(system)
sympy.physics.control.control_plots.pole_zero_plot(system,pole_color='blue',pole_markersize=10,zero_color='orange',zero_markersize=7,grid=True,show_axes=True,show=True,**kwargs)
sympy.physics.control.control_plots.ramp_response_numerical_data(system,slope=1,prec=8,lower_limit=0,upper_limit=10,**kwargs)
sympy.physics.control.control_plots.ramp_response_plot(system,slope=1,color='b',prec=8,lower_limit=0,upper_limit=10,show_axes=False,grid=True,show=True,**kwargs)
sympy.physics.control.control_plots.step_response_numerical_data(system,prec=8,lower_limit=0,upper_limit=10,**kwargs)
sympy.physics.control.control_plots.step_response_plot(system,color='b',prec=8,lower_limit=0,upper_limit=10,show_axes=False,grid=True,show=True,**kwargs)
sympy.physics.control.impulse_response_numerical_data(system,prec=8,lower_limit=0,upper_limit=10,**kwargs)
sympy.physics.control.impulse_response_plot(system,color='b',prec=8,lower_limit=0,upper_limit=10,show_axes=False,grid=True,show=True,**kwargs)
sympy.physics.control.pole_zero_numerical_data(system)
sympy.physics.control.pole_zero_plot(system,pole_color='blue',pole_markersize=10,zero_color='orange',zero_markersize=7,grid=True,show_axes=True,show=True,**kwargs)
sympy.physics.control.ramp_response_numerical_data(system,slope=1,prec=8,lower_limit=0,upper_limit=10,**kwargs)
sympy.physics.control.ramp_response_plot(system,slope=1,color='b',prec=8,lower_limit=0,upper_limit=10,show_axes=False,grid=True,show=True,**kwargs)
sympy.physics.control.step_response_numerical_data(system,prec=8,lower_limit=0,upper_limit=10,**kwargs)
sympy.physics.control.step_response_plot(system,color='b',prec=8,lower_limit=0,upper_limit=10,show_axes=False,grid=True,show=True,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/control/lti.py----------------------------------------
A:sympy.physics.control.lti.r->roots(poly, var, multiple=True)
A:sympy.physics.control.lti.n->degree(poly)
A:sympy.physics.control.lti.np->cancel(Mul(self.num, 1 / self.den, evaluate=False), expand=False).as_numer_denom().num.as_poly(s).all_coeffs()
A:sympy.physics.control.lti.dp->cancel(Mul(self.num, 1 / self.den, evaluate=False), expand=False).as_numer_denom().den.as_poly(s).all_coeffs()
A:sympy.physics.control.lti.num->Add(*[T ** (N - i) * c * (z - 1) ** i * z ** (N - i) for (c, i) in zip(np[::-1], range(len(np)))])
A:sympy.physics.control.lti.den->Add(*[T ** (N - i) * c * (z - 1) ** i * z ** (N - i) for (c, i) in zip(dp[::-1], range(len(dp)))])
A:sympy.physics.control.lti.num_coefs->Add(*[T ** (N - i) * c * (z - 1) ** i * z ** (N - i) for (c, i) in zip(np[::-1], range(len(np)))]).as_poly(z).all_coeffs()
A:sympy.physics.control.lti.den_coefs->Add(*[T ** (N - i) * c * (z - 1) ** i * z ** (N - i) for (c, i) in zip(dp[::-1], range(len(dp)))]).as_poly(z).all_coeffs()
A:sympy.physics.control.lti.obj->super(TransferFunctionMatrix, cls).__new__(cls, arg)
A:sympy.physics.control.lti.expr->_sympify(expr)
A:sympy.physics.control.lti._len_free_symbols->len(_free_symbols)
A:sympy.physics.control.lti.(_num, _den)->_sympify(expr).as_numer_denom()
A:sympy.physics.control.lti.arg_num->self.num.subs(old, new)
A:sympy.physics.control.lti.arg_den->self.den.subs(old, new)
A:sympy.physics.control.lti.argnew->TransferFunction(arg_num, arg_den, self.var)
A:sympy.physics.control.lti.tf->cancel(Mul(self.num, 1 / self.den, evaluate=False), expand=False).as_numer_denom()
A:sympy.physics.control.lti.m->Mul(self.num, Pow(self.den, -1, evaluate=False), evaluate=False)
A:sympy.physics.control.lti.arg_list->list(other.args)
A:sympy.physics.control.lti.p->abs(p)
A:sympy.physics.control.lti._s->Dummy()
A:sympy.physics.control.lti.dummy_arg->Tuple(*(Tuple(*r, sympify=False) for r in arg), sympify=False).subs({var: _s})
A:sympy.physics.control.lti.args->_flatten_args(args, MIMOParallel)
A:sympy.physics.control.lti.res_num->Mul(*_num_arg, evaluate=True)
A:sympy.physics.control.lti.res_den->Mul(*_den_arg, evaluate=True)
A:sympy.physics.control.lti.self_arg_list->list(self.args)
A:sympy.physics.control.lti.other_arg_list->list(other.args)
A:sympy.physics.control.lti.res->MatAdd(*_arg, evaluate=True)
A:sympy.physics.control.lti.(_dummy_args, _dummy_dict)->_dummify_args(_arg, self.var)
A:sympy.physics.control.lti.temp_tfm->TransferFunctionMatrix.from_Matrix(res, self.var)
A:sympy.physics.control.lti.sys2->TransferFunction(1, 1, sys1.var)
A:sympy.physics.control.lti.F_d->Parallel(unit, -Series(self.sys2, *arg_list)).doit()
A:sympy.physics.control.lti._resultant_tf->_resultant_tf.expand().expand()
A:sympy.physics.control.lti._det->_mat.det()
A:sympy.physics.control.lti._resultant_tfm->_resultant_tfm.expand().expand()
A:sympy.physics.control.lti.arg->Tuple(*(Tuple(*r, sympify=False) for r in arg), sympify=False)
A:sympy.physics.control.lti.obj._expr_mat->ImmutableMatrix(expr_mat_arg)
A:sympy.physics.control.lti.trunc->self._expr_mat.__getitem__(key)
A:sympy.physics.control.lti.transposed_mat->self._expr_mat.transpose()
A:sympy.physics.control.lti.dps->prec_to_dps(prec)
A:sympy.physics.control.lti.mat->self._expr_mat.applyfunc(lambda a: a.evalf(n=dps))
A:sympy.physics.control.lti.simp_mat->self._expr_mat.applyfunc(lambda a: cancel(a, expand=False))
A:sympy.physics.control.lti.expand_mat->self._expr_mat.expand(**hints)
sympy.physics.control.Feedback(cls,sys1,sys2=None,sign=-1)
sympy.physics.control.MIMOFeedback(cls,sys1,sys2,sign=-1)
sympy.physics.control.MIMOParallel(cls,*args,evaluate=False)
sympy.physics.control.MIMOSeries(cls,*args,evaluate=False)
sympy.physics.control.Parallel(cls,*args,evaluate=False)
sympy.physics.control.Series(cls,*args,evaluate=False)
sympy.physics.control.TransferFunction(cls,num,den,var)
sympy.physics.control.TransferFunctionMatrix(cls,arg)
sympy.physics.control.backward_diff(tf,sample_per)
sympy.physics.control.bilinear(tf,sample_per)
sympy.physics.control.lti.Feedback(cls,sys1,sys2=None,sign=-1)
sympy.physics.control.lti.Feedback.__neg__(self)
sympy.physics.control.lti.Feedback._eval_rewrite_as_TransferFunction(self,num,den,sign,**kwargs)
sympy.physics.control.lti.Feedback.doit(self,cancel=False,expand=False,**hints)
sympy.physics.control.lti.Feedback.sensitivity(self)
sympy.physics.control.lti.Feedback.sign(self)
sympy.physics.control.lti.Feedback.sys1(self)
sympy.physics.control.lti.Feedback.sys2(self)
sympy.physics.control.lti.Feedback.var(self)
sympy.physics.control.lti.LinearTimeInvariant(cls,*system,**kwargs)
sympy.physics.control.lti.LinearTimeInvariant._check_args(cls,args)
sympy.physics.control.lti.LinearTimeInvariant.is_SISO(self)
sympy.physics.control.lti.MIMOFeedback(cls,sys1,sys2,sign=-1)
sympy.physics.control.lti.MIMOFeedback.__neg__(self)
sympy.physics.control.lti.MIMOFeedback._eval_rewrite_as_TransferFunctionMatrix(self,sys1,sys2,sign,**kwargs)
sympy.physics.control.lti.MIMOFeedback.doit(self,cancel=True,expand=False,**hints)
sympy.physics.control.lti.MIMOFeedback.sensitivity(self)
sympy.physics.control.lti.MIMOFeedback.sign(self)
sympy.physics.control.lti.MIMOFeedback.sys1(self)
sympy.physics.control.lti.MIMOFeedback.sys2(self)
sympy.physics.control.lti.MIMOFeedback.var(self)
sympy.physics.control.lti.MIMOLinearTimeInvariant(LinearTimeInvariant)
sympy.physics.control.lti.MIMOParallel(cls,*args,evaluate=False)
sympy.physics.control.lti.MIMOParallel.__add__(self,other)
sympy.physics.control.lti.MIMOParallel.__mul__(self,other)
sympy.physics.control.lti.MIMOParallel.__neg__(self)
sympy.physics.control.lti.MIMOParallel.__rsub__(self,other)
sympy.physics.control.lti.MIMOParallel.__sub__(self,other)
sympy.physics.control.lti.MIMOParallel._eval_rewrite_as_TransferFunctionMatrix(self,*args,**kwargs)
sympy.physics.control.lti.MIMOParallel.doit(self,**hints)
sympy.physics.control.lti.MIMOParallel.num_inputs(self)
sympy.physics.control.lti.MIMOParallel.num_outputs(self)
sympy.physics.control.lti.MIMOParallel.shape(self)
sympy.physics.control.lti.MIMOParallel.var(self)
sympy.physics.control.lti.MIMOSeries(cls,*args,evaluate=False)
sympy.physics.control.lti.MIMOSeries.__add__(self,other)
sympy.physics.control.lti.MIMOSeries.__mul__(self,other)
sympy.physics.control.lti.MIMOSeries.__neg__(self)
sympy.physics.control.lti.MIMOSeries.__rsub__(self,other)
sympy.physics.control.lti.MIMOSeries.__sub__(self,other)
sympy.physics.control.lti.MIMOSeries._eval_rewrite_as_TransferFunctionMatrix(self,*args,**kwargs)
sympy.physics.control.lti.MIMOSeries.doit(self,cancel=False,**kwargs)
sympy.physics.control.lti.MIMOSeries.num_inputs(self)
sympy.physics.control.lti.MIMOSeries.num_outputs(self)
sympy.physics.control.lti.MIMOSeries.shape(self)
sympy.physics.control.lti.MIMOSeries.var(self)
sympy.physics.control.lti.Parallel(cls,*args,evaluate=False)
sympy.physics.control.lti.Parallel.__add__(self,other)
sympy.physics.control.lti.Parallel.__mul__(self,other)
sympy.physics.control.lti.Parallel.__neg__(self)
sympy.physics.control.lti.Parallel.__rsub__(self,other)
sympy.physics.control.lti.Parallel.__sub__(self,other)
sympy.physics.control.lti.Parallel._eval_rewrite_as_TransferFunction(self,*args,**kwargs)
sympy.physics.control.lti.Parallel.doit(self,**hints)
sympy.physics.control.lti.Parallel.is_biproper(self)
sympy.physics.control.lti.Parallel.is_proper(self)
sympy.physics.control.lti.Parallel.is_strictly_proper(self)
sympy.physics.control.lti.Parallel.to_expr(self)
sympy.physics.control.lti.Parallel.var(self)
sympy.physics.control.lti.SISOLinearTimeInvariant(LinearTimeInvariant)
sympy.physics.control.lti.Series(cls,*args,evaluate=False)
sympy.physics.control.lti.Series.__add__(self,other)
sympy.physics.control.lti.Series.__mul__(self,other)
sympy.physics.control.lti.Series.__neg__(self)
sympy.physics.control.lti.Series.__rsub__(self,other)
sympy.physics.control.lti.Series.__sub__(self,other)
sympy.physics.control.lti.Series.__truediv__(self,other)
sympy.physics.control.lti.Series._eval_rewrite_as_TransferFunction(self,*args,**kwargs)
sympy.physics.control.lti.Series.doit(self,**hints)
sympy.physics.control.lti.Series.is_biproper(self)
sympy.physics.control.lti.Series.is_proper(self)
sympy.physics.control.lti.Series.is_strictly_proper(self)
sympy.physics.control.lti.Series.to_expr(self)
sympy.physics.control.lti.Series.var(self)
sympy.physics.control.lti.TransferFunction(cls,num,den,var)
sympy.physics.control.lti.TransferFunction.__add__(self,other)
sympy.physics.control.lti.TransferFunction.__mul__(self,other)
sympy.physics.control.lti.TransferFunction.__neg__(self)
sympy.physics.control.lti.TransferFunction.__pow__(self,p)
sympy.physics.control.lti.TransferFunction.__radd__(self,other)
sympy.physics.control.lti.TransferFunction.__rsub__(self,other)
sympy.physics.control.lti.TransferFunction.__sub__(self,other)
sympy.physics.control.lti.TransferFunction.__truediv__(self,other)
sympy.physics.control.lti.TransferFunction._eval_evalf(self,prec)
sympy.physics.control.lti.TransferFunction._eval_simplify(self,**kwargs)
sympy.physics.control.lti.TransferFunction._eval_subs(self,old,new)
sympy.physics.control.lti.TransferFunction.dc_gain(self)
sympy.physics.control.lti.TransferFunction.den(self)
sympy.physics.control.lti.TransferFunction.expand(self)
sympy.physics.control.lti.TransferFunction.from_rational_expression(cls,expr,var=None)
sympy.physics.control.lti.TransferFunction.is_biproper(self)
sympy.physics.control.lti.TransferFunction.is_proper(self)
sympy.physics.control.lti.TransferFunction.is_stable(self)
sympy.physics.control.lti.TransferFunction.is_strictly_proper(self)
sympy.physics.control.lti.TransferFunction.num(self)
sympy.physics.control.lti.TransferFunction.poles(self)
sympy.physics.control.lti.TransferFunction.to_expr(self)
sympy.physics.control.lti.TransferFunction.var(self)
sympy.physics.control.lti.TransferFunction.zeros(self)
sympy.physics.control.lti.TransferFunctionMatrix(cls,arg)
sympy.physics.control.lti.TransferFunctionMatrix.__add__(self,other)
sympy.physics.control.lti.TransferFunctionMatrix.__getitem__(self,key)
sympy.physics.control.lti.TransferFunctionMatrix.__mul__(self,other)
sympy.physics.control.lti.TransferFunctionMatrix.__neg__(self)
sympy.physics.control.lti.TransferFunctionMatrix.__sub__(self,other)
sympy.physics.control.lti.TransferFunctionMatrix._eval_evalf(self,prec)
sympy.physics.control.lti.TransferFunctionMatrix._eval_simplify(self,**kwargs)
sympy.physics.control.lti.TransferFunctionMatrix._flat(self)
sympy.physics.control.lti.TransferFunctionMatrix.elem_poles(self)
sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros(self)
sympy.physics.control.lti.TransferFunctionMatrix.expand(self,**hints)
sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix(cls,matrix,var)
sympy.physics.control.lti.TransferFunctionMatrix.num_inputs(self)
sympy.physics.control.lti.TransferFunctionMatrix.num_outputs(self)
sympy.physics.control.lti.TransferFunctionMatrix.shape(self)
sympy.physics.control.lti.TransferFunctionMatrix.transpose(self)
sympy.physics.control.lti.TransferFunctionMatrix.var(self)
sympy.physics.control.lti._check_other_MIMO(func)
sympy.physics.control.lti._check_other_SISO(func)
sympy.physics.control.lti._dummify_args(_arg,var)
sympy.physics.control.lti._flatten_args(args,_cls)
sympy.physics.control.lti._is_invertible(a,b,sign)
sympy.physics.control.lti._mat_mul_compatible(*args)
sympy.physics.control.lti._roots(poly,var)
sympy.physics.control.lti._to_TFM(mat,var)
sympy.physics.control.lti.backward_diff(tf,sample_per)
sympy.physics.control.lti.bilinear(tf,sample_per)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/control/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/control/tests/test_lti.py----------------------------------------
A:sympy.physics.control.tests.test_lti.(a, x, b, s, g, d, p, k, a0, a1, a2, b0, b1, b2, tau, zeta, wn, T)->symbols('a, x, b, s, g, d, p, k,    a0:3, b0:3, tau, zeta, wn, T')
A:sympy.physics.control.tests.test_lti.TF1->TransferFunction(1, s ** 2 + 2 * zeta * wn * s + wn ** 2, s)
A:sympy.physics.control.tests.test_lti.TF2->TransferFunction(k, 1, s)
A:sympy.physics.control.tests.test_lti.TF3->TransferFunction(a2 * p - s, a2 * s + p, s)
A:sympy.physics.control.tests.test_lti.tf->TransferFunction(1, a * s + b, s)
A:sympy.physics.control.tests.test_lti.tf1->TransferFunction(1, s, s)
A:sympy.physics.control.tests.test_lti.tf2->TransferFunction(s, s - 1, s)
A:sympy.physics.control.tests.test_lti.tf3->TransferFunction(1, 1, s)
A:sympy.physics.control.tests.test_lti.tf4->TransferFunction(a0 * p + p ** a1 - s, p, p)
A:sympy.physics.control.tests.test_lti.tf4_->TransferFunction(-out, 1, s)
A:sympy.physics.control.tests.test_lti.tf5->TransferFunction(a1 * s ** 2 + a2 * s - a0, s + a0, s)
A:sympy.physics.control.tests.test_lti.tf5_->TransferFunction(s - 1, s - 1, s)
A:sympy.physics.control.tests.test_lti.tf6->TransferFunction(-1, s - 1, s)
A:sympy.physics.control.tests.test_lti.tf6_->TransferFunction(1 / 2, 4, s)
A:sympy.physics.control.tests.test_lti.tf7->TransferFunction(a0 * s ** p + a1 * p ** s, a2 * p - s, s)
A:sympy.physics.control.tests.test_lti.tf8->TransferFunction(a0 * s ** 5 + 5 * s ** 2 + 3, s ** 6 - 3, s)
A:sympy.physics.control.tests.test_lti.tf7_->TransferFunction(a0 * s + a1 * s ** 2 + a2 * s ** 3, b0 * p - b1 * s, s)
A:sympy.physics.control.tests.test_lti.tf8_->TransferFunction(a0 * s + a1 * s ** 2 + a2 * s ** 3, b0 * p - b1 * s, s)
A:sympy.physics.control.tests.test_lti.tf9->TransferFunction(5 + s, (5 + s) * (6 + s), s)
A:sympy.physics.control.tests.test_lti.tf10->TransferFunction(0, 1, s)
A:sympy.physics.control.tests.test_lti.tf10_->TransferFunction(p ** 3 + d, g * s ** 2 + d * s + a, p)
A:sympy.physics.control.tests.test_lti.tf11->TransferFunction(1, 1, s)
A:sympy.physics.control.tests.test_lti.tf12->TransferFunction(0, p ** 2 - p + 1, p)
A:sympy.physics.control.tests.test_lti.tf13->TransferFunction(0, 1, s)
A:sympy.physics.control.tests.test_lti.tf14->TransferFunction(a0 * s ** 0.5 + a2 * s ** 0.6 - a1, a1 * p ** (-8.7), s)
A:sympy.physics.control.tests.test_lti.tf15->TransferFunction(a2 ** 2 * p ** (1 / 4) + a1 * s ** (-4 / 5), a0 * s - p, p)
A:sympy.physics.control.tests.test_lti.(omega_o, k_p, k_o, k_i)->symbols('omega_o, k_p, k_o, k_i')
A:sympy.physics.control.tests.test_lti.tf18->TransferFunction(k_p + k_o * s + k_i / s, s ** 2 + 2 * omega_o * s + omega_o ** 2, s)
A:sympy.physics.control.tests.test_lti.expr_1->Mul(0, Pow(s, -1, evaluate=False), evaluate=False)
A:sympy.physics.control.tests.test_lti.delay->exp(-s / tau)
A:sympy.physics.control.tests.test_lti.H1->sympy.physics.control.TransferFunction.from_rational_expression(expr_7, s)
A:sympy.physics.control.tests.test_lti.H2->TransferFunction(s + 1, (s ** 2 + 2) * exp(s / tau), s)
A:sympy.physics.control.tests.test_lti.expr_8->Add(2, 3 * s / (s ** 2 + 1), evaluate=False)
A:sympy.physics.control.tests.test_lti.tf0->TransferFunction(s ** 5 + s ** 3 + s, s - s ** 2, s)
A:sympy.physics.control.tests.test_lti.a->TransferFunction(-(s ** 4 + s ** 2 + 1), s - 1, s)
A:sympy.physics.control.tests.test_lti.b->TransferFunction(p + 3, p + 5, p)
A:sympy.physics.control.tests.test_lti.G1->TransferFunction(omega_o ** 2, s ** 2 + p * omega_o * zeta * s + omega_o ** 2, omega_o)
A:sympy.physics.control.tests.test_lti.G2->TransferFunction(tau - s ** 3, tau + p ** 4, tau)
A:sympy.physics.control.tests.test_lti.G3->TransferFunction(a * b * s ** 3 + s ** 2 - a * p + s, b - s * p ** 2, p)
A:sympy.physics.control.tests.test_lti.G4->TransferFunction(b * s ** 2 + p ** 2 - a * p + s, b - p ** 2, s)
A:sympy.physics.control.tests.test_lti.SP1->TransferFunction(p1, p2, s)
A:sympy.physics.control.tests.test_lti.expect1->TransferFunction((p + 4) ** 2, (p - 3) ** 2, p)
A:sympy.physics.control.tests.test_lti.expect1_->TransferFunction(2 * s + 1, 5 * s ** 2 + 4 * s + 3, s)
A:sympy.physics.control.tests.test_lti.(c1, d0, d1, d2)->symbols('c1, d0:3')
A:sympy.physics.control.tests.test_lti.SP2->TransferFunction(p3, p4, p)
A:sympy.physics.control.tests.test_lti.expect2->TransferFunction((s ** 2 + 1) ** 3, (1 - s) ** 3, s)
A:sympy.physics.control.tests.test_lti.expect2_->TransferFunction(2 * p, 5 * p ** 3 + 2 * p ** 2 - 3, p)
A:sympy.physics.control.tests.test_lti.SP3->TransferFunction(a0 * p ** 3 + a1 * s ** 2 - b0 * s + b1, a1 * s + p, s)
A:sympy.physics.control.tests.test_lti.expect3->TransferFunction(2.0 * p ** 3 + 4.0 * s ** 2 - s + 5.0, p + 4.0 * s, s)
A:sympy.physics.control.tests.test_lti.expect3_->TransferFunction(2 * p ** 3 + 4 * s ** 2 - s + 5, p + 4 * s, s)
A:sympy.physics.control.tests.test_lti.SP4->TransferFunction(s - a1 * p ** 3, a0 * s + p, p)
A:sympy.physics.control.tests.test_lti.expect4->TransferFunction(7.0 * p ** 3 + s, p - s, p)
A:sympy.physics.control.tests.test_lti.expect4_->TransferFunction(7 * p ** 3 + s, p - s, p)
A:sympy.physics.control.tests.test_lti.tf_->TransferFunction(x ** 3 - k, k, x)
A:sympy.physics.control.tests.test_lti._tf->TransferFunction(k, x ** 4 - k, x)
A:sympy.physics.control.tests.test_lti.TF_->TransferFunction(s ** 2 + a0 - a1 * p, q * s - r, s)
A:sympy.physics.control.tests.test_lti._TF->TransferFunction(x ** 10 + x + x ** 2, x ** 2, x)
A:sympy.physics.control.tests.test_lti.(q, r)->symbols('q, r', negative=True)
A:sympy.physics.control.tests.test_lti.t->symbols('t', positive=True)
A:sympy.physics.control.tests.test_lti.stable_tf->TransferFunction(s ** 2 + a0 - a1 * p, q * s - 1, s)
A:sympy.physics.control.tests.test_lti.stable_tf_->TransferFunction(s ** 2 + a0 - a1 * p, q * s - t, s)
A:sympy.physics.control.tests.test_lti.c->symbols('c', commutative=False)
A:sympy.physics.control.tests.test_lti.G5->TransferFunction(s + 6, s - 5, s)
A:sympy.physics.control.tests.test_lti.G6->TransferFunction(s + 3, s + 1, s)
A:sympy.physics.control.tests.test_lti.G7->TransferFunction(1, 1, s)
A:sympy.physics.control.tests.test_lti.(omega_o, zeta, tau)->symbols('omega_o, zeta, tau')
A:sympy.physics.control.tests.test_lti.(tau, omega_o, zeta)->symbols('tau, omega_o, zeta')
A:sympy.physics.control.tests.test_lti.inp->Function('X_d')(s)
A:sympy.physics.control.tests.test_lti.out->Function('X')(s)
A:sympy.physics.control.tests.test_lti.s0->Series(tf, tf2)
A:sympy.physics.control.tests.test_lti.s1->Series(Parallel(tf, -tf2), tf2)
A:sympy.physics.control.tests.test_lti.tf3_->TransferFunction(inp, 1, s)
A:sympy.physics.control.tests.test_lti.s2->Series(tf, Parallel(tf3_, tf4_), tf2)
A:sympy.physics.control.tests.test_lti.s3->Series(tf, tf2, tf4)
A:sympy.physics.control.tests.test_lti.s4->Series(tf3_, tf4_)
A:sympy.physics.control.tests.test_lti.s6->Series(tf2, tf4, Parallel(tf2, -tf), tf4)
A:sympy.physics.control.tests.test_lti.s7->Series(tf, tf2)
A:sympy.physics.control.tests.test_lti.tf_1->TransferFunction(a0 * s ** 3 + a1 * s ** 2 - a2 * s, b0 * p ** 4 + b1 * p ** 3 - b2 * s * p, s)
A:sympy.physics.control.tests.test_lti.tf_2->TransferFunction(a2 * p - s, a2 * s + p, s)
A:sympy.physics.control.tests.test_lti.tf_3->TransferFunction(1, s ** 2 + 2 * zeta * wn * s + wn ** 2, s)
A:sympy.physics.control.tests.test_lti.tfm_1->sympy.physics.control.TransferFunctionMatrix.from_Matrix(eye(2), var=s)
A:sympy.physics.control.tests.test_lti.tfm_2->TransferFunctionMatrix([[tf1, tf3], [tf3, tf3]])
A:sympy.physics.control.tests.test_lti.tfm_3->TransferFunctionMatrix([[-tf2, tf2], [tf2, tf4]])
A:sympy.physics.control.tests.test_lti.tfm_4->TransferFunctionMatrix([[tf1, tf2], [-tf2, tf1]])
A:sympy.physics.control.tests.test_lti.tfm_5->TransferFunctionMatrix([[-tf3, tf3], [tf3, tf6]])
A:sympy.physics.control.tests.test_lti.s8->MIMOSeries(tfm_2, tfm_1)
A:sympy.physics.control.tests.test_lti.s9->MIMOSeries(tfm_3, tfm_2, tfm_1)
A:sympy.physics.control.tests.test_lti.s11->MIMOSeries(tfm_3, MIMOParallel(-tfm_2, -tfm_4), tfm_1)
A:sympy.physics.control.tests.test_lti.S1->Series(Parallel(tf1, tf2), Parallel(tf2, -tf3))
A:sympy.physics.control.tests.test_lti.S2->Series(tf1, tf2, tf3)
A:sympy.physics.control.tests.test_lti.S3->Series(tf1, -tf2, Parallel(tf1, -tf3))
A:sympy.physics.control.tests.test_lti.tfm1->TransferFunctionMatrix([[TF1], [TF2]])
A:sympy.physics.control.tests.test_lti.tfm2->TransferFunctionMatrix([[TF1, TF2, TF3], [tf5, -TF1, -TF3]])
A:sympy.physics.control.tests.test_lti.tfm3->TransferFunctionMatrix([[tf5], [-tf5], [TF2]])
A:sympy.physics.control.tests.test_lti.tfm4->TransferFunctionMatrix([[TF2, -tf5], [TF1, tf5]])
A:sympy.physics.control.tests.test_lti.tfm5->TransferFunctionMatrix([[TF1, -TF2], [TF3, tf5]])
A:sympy.physics.control.tests.test_lti.tfm6->TransferFunctionMatrix([[-TF2]])
A:sympy.physics.control.tests.test_lti.tfm7->TransferFunctionMatrix([[TF1, TF2], [TF3, -tf5], [-tf5, TF2]])
A:sympy.physics.control.tests.test_lti.mat_1->ImmutableMatrix([[s * (s + 1) * (s - 3) / (s ** 4 + 1), 2], [p, p * (s + 1) / (s * (s ** 1 + 1))]])
A:sympy.physics.control.tests.test_lti.mat_2->ImmutableMatrix([[(2 * s + 1) / (s ** 2 - 9)]])
A:sympy.physics.control.tests.test_lti.p0->Parallel(tf, tf2)
A:sympy.physics.control.tests.test_lti.p1->Parallel(Series(tf, -tf2), tf2)
A:sympy.physics.control.tests.test_lti.p2->Parallel(tf, Series(tf3_, -tf4_), tf2)
A:sympy.physics.control.tests.test_lti.p3->Parallel(tf, tf2, tf4)
A:sympy.physics.control.tests.test_lti.p4->Parallel(tf3_, tf4_)
A:sympy.physics.control.tests.test_lti.p5->Parallel(tf, tf2)
A:sympy.physics.control.tests.test_lti.p6->Parallel(tf2, tf4, Series(tf2, -tf4))
A:sympy.physics.control.tests.test_lti.p7->Parallel(tf2, tf4, Series(tf2, -tf), tf4)
A:sympy.physics.control.tests.test_lti.p8->MIMOParallel(tfm1, tfm2)
A:sympy.physics.control.tests.test_lti.p9->MIMOParallel(MIMOSeries(tfm3, tfm1), tfm2)
A:sympy.physics.control.tests.test_lti.p10->MIMOParallel(tfm1, MIMOSeries(tfm3, tfm4), tfm2)
A:sympy.physics.control.tests.test_lti.p11->MIMOParallel(tfm2, tfm1, tfm4)
A:sympy.physics.control.tests.test_lti.p12->MIMOParallel(tfm6, tfm5)
A:sympy.physics.control.tests.test_lti.p13->MIMOParallel(tfm2, tfm4, MIMOSeries(-tfm3, tfm4), -tfm4)
A:sympy.physics.control.tests.test_lti.P1->Parallel(Series(tf1, tf2), Series(tf2, tf3))
A:sympy.physics.control.tests.test_lti.P2->Parallel(tf1, -tf2, -tf3)
A:sympy.physics.control.tests.test_lti.P3->Parallel(tf1, -tf2, Series(tf1, tf3))
A:sympy.physics.control.tests.test_lti.f1->MIMOFeedback(tfm_1, tfm_2)
A:sympy.physics.control.tests.test_lti.f2->MIMOFeedback(tfm_2, tfm_1, 1)
A:sympy.physics.control.tests.test_lti.f3->MIMOFeedback(tfm_1, MIMOSeries(tfm_3, tfm_2))
A:sympy.physics.control.tests.test_lti.f4->MIMOFeedback(sys1, controller)
A:sympy.physics.control.tests.test_lti.f5->Feedback(tf5, TransferFunction(1, 1, s))
A:sympy.physics.control.tests.test_lti.f6->Feedback(TransferFunction(1, 1, p), tf4)
A:sympy.physics.control.tests.test_lti.mat->Matrix([[1, 1 / s], [0, 1]])
A:sympy.physics.control.tests.test_lti.sys1controller->sympy.physics.control.TransferFunctionMatrix.from_Matrix(mat, s)
A:sympy.physics.control.tests.test_lti.tfm_6->TransferFunctionMatrix([[-tf3]])
A:sympy.physics.control.tests.test_lti.tfm_7->TransferFunctionMatrix([[tf3, tf4]])
A:sympy.physics.control.tests.test_lti.tfm_8->sympy.physics.control.TransferFunctionMatrix.from_Matrix(eye(2), var=p)
A:sympy.physics.control.tests.test_lti.F_1->MIMOFeedback(tfm_2, tfm_3)
A:sympy.physics.control.tests.test_lti.F_2->MIMOFeedback(tfm_2, MIMOSeries(tfm_4, -tfm_1), 1)
A:sympy.physics.control.tests.test_lti.tfm3_->TransferFunctionMatrix([[-TF3]])
A:sympy.physics.control.tests.test_lti.mat_3->ImmutableMatrix([[1, 2], [3, 4]])
A:sympy.physics.control.tests.test_lti.H_1->sympy.physics.control.TransferFunctionMatrix.from_Matrix(mat_1, s)
A:sympy.physics.control.tests.test_lti.H_2->TransferFunctionMatrix([[TransferFunction(a * p * s, k * s ** 2, s), TransferFunction(p * s, k * (s ** 2 - a), s)]])
A:sympy.physics.control.tests.test_lti.H_3->TransferFunctionMatrix([[Series(TransferFunction(1, s ** 3 - 3, s), TransferFunction(s ** 2 - 2 * s + 5, 1, s), TransferFunction(1, s, s))]])
A:sympy.physics.control.tests.test_lti.H_4->TransferFunctionMatrix([[Parallel(TransferFunction(s ** 3 - 3, 4 * s ** 4 - s ** 2 - 2 * s + 5, s), TransferFunction(4 - s ** 3, 4 * s ** 4 - s ** 2 - 2 * s + 5, s))]])
A:sympy.physics.control.tests.test_lti.H_5->TransferFunctionMatrix([[TransferFunction(s ** 5 + s ** 3 + s, s - s ** 2, s), TransferFunction((s + 3) * (s - 1), (s - 1) * (s + 5), s)]])
A:sympy.physics.control.tests.test_lti.(numZ, denZ)->backward_diff(tf, T)
A:sympy.physics.control.tests.test_lti.tf_test_bilinear->TransferFunction(s * numZ[0] + numZ[1], s * denZ[0] + denZ[1], s)
A:sympy.physics.control.tests.test_lti.tf_test_manual->TransferFunction(s * T, s * (T * b + a) - a, s)
sympy.physics.control.tests.test_lti.test_Feedback_construction()
sympy.physics.control.tests.test_lti.test_Feedback_functions()
sympy.physics.control.tests.test_lti.test_MIMOFeedback_construction()
sympy.physics.control.tests.test_lti.test_MIMOFeedback_errors()
sympy.physics.control.tests.test_lti.test_MIMOFeedback_functions()
sympy.physics.control.tests.test_lti.test_MIMOParallel_construction()
sympy.physics.control.tests.test_lti.test_MIMOParallel_functions()
sympy.physics.control.tests.test_lti.test_MIMOSeries_construction()
sympy.physics.control.tests.test_lti.test_MIMOSeries_functions()
sympy.physics.control.tests.test_lti.test_Parallel_construction()
sympy.physics.control.tests.test_lti.test_Parallel_functions()
sympy.physics.control.tests.test_lti.test_Series_construction()
sympy.physics.control.tests.test_lti.test_Series_functions()
sympy.physics.control.tests.test_lti.test_TransferFunctionMatrix_construction()
sympy.physics.control.tests.test_lti.test_TransferFunctionMatrix_functions()
sympy.physics.control.tests.test_lti.test_TransferFunction_addition_and_subtraction()
sympy.physics.control.tests.test_lti.test_TransferFunction_backward_diff()
sympy.physics.control.tests.test_lti.test_TransferFunction_bilinear()
sympy.physics.control.tests.test_lti.test_TransferFunction_construction()
sympy.physics.control.tests.test_lti.test_TransferFunction_functions()
sympy.physics.control.tests.test_lti.test_TransferFunction_is_biproper()
sympy.physics.control.tests.test_lti.test_TransferFunction_is_proper()
sympy.physics.control.tests.test_lti.test_TransferFunction_is_strictly_proper()
sympy.physics.control.tests.test_lti.test_TransferFunction_multiplication_and_division()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/control/tests/test_control_plots.py----------------------------------------
A:sympy.physics.control.tests.test_control_plots.matplotlib->import_module('matplotlib', import_kwargs={'fromlist': ['pyplot']}, catch=(RuntimeError,))
A:sympy.physics.control.tests.test_control_plots.numpy->import_module('numpy')
A:sympy.physics.control.tests.test_control_plots.tf1->TransferFunction(1, p ** 2 + 0.5 * p + 2, p)
A:sympy.physics.control.tests.test_control_plots.tf2->TransferFunction(p, 6 * p ** 2 + 3 * p + 1, p)
A:sympy.physics.control.tests.test_control_plots.tf3->TransferFunction(p, p ** 3 - 1, p)
A:sympy.physics.control.tests.test_control_plots.tf4->TransferFunction(10, p ** 3, p)
A:sympy.physics.control.tests.test_control_plots.tf5->TransferFunction(5, s ** 2 + 2 * s + 10, s)
A:sympy.physics.control.tests.test_control_plots.tf6->TransferFunction(1, 1, s)
A:sympy.physics.control.tests.test_control_plots.tf7->TransferFunction(4 * s * 3 + 9 * s ** 2 + 0.1 * s + 11, 8 * s ** 6 + 9 * s ** 4 + 11, s)
A:sympy.physics.control.tests.test_control_plots.tf8->TransferFunction(5, s ** 2 + (2 + I) * s + 10, s)
A:sympy.physics.control.tests.test_control_plots.ser1->Series(tf4, TransferFunction(1, p - 5, p))
A:sympy.physics.control.tests.test_control_plots.ser2->Series(tf3, TransferFunction(p, p + 2, p))
A:sympy.physics.control.tests.test_control_plots.par1->Parallel(tf1, tf2)
A:sympy.physics.control.tests.test_control_plots.par2->Parallel(tf1, tf2, tf3)
A:sympy.physics.control.tests.test_control_plots.(a, b)->_to_tuple(a, b)
A:sympy.physics.control.tests.test_control_plots.(x, y)->_to_tuple(*ramp_response_numerical_data(sys, slope=slope, adaptive=False, nb_of_points=num_points))
A:sympy.physics.control.tests.test_control_plots.y_exp->tuple((evalf_func(system, x_i) for x_i in x))
A:sympy.physics.control.tests.test_control_plots.tfm->TransferFunctionMatrix([[tf6, tf5], [tf5, tf6]])
A:sympy.physics.control.tests.test_control_plots.tf_a->TransferFunction(a, s + 1, s)
A:sympy.physics.control.tests.test_control_plots.(z, p)->pole_zero_numerical_data(sys)
A:sympy.physics.control.tests.test_control_plots.z_check->import_module('numpy').allclose(z, expected_value[0])
A:sympy.physics.control.tests.test_control_plots.p_check->import_module('numpy').allclose(p, expected_value[1])
A:sympy.physics.control.tests.test_control_plots.expr->system.to_expr()
A:sympy.physics.control.tests.test_control_plots._w->Dummy('w', real=True)
A:sympy.physics.control.tests.test_control_plots.w_expr->system.to_expr().subs({system.var: I * _w})
A:sympy.physics.control.tests.test_control_plots.x_check->check_point_accuracy(x, expected_value[0])
A:sympy.physics.control.tests.test_control_plots.y_check->check_point_accuracy(y, expected_value[1])
sympy.physics.control.tests.test_control_plots._to_tuple(a,b)
sympy.physics.control.tests.test_control_plots._trim_tuple(a,b)
sympy.physics.control.tests.test_control_plots.check_point_accuracy(a,b)
sympy.physics.control.tests.test_control_plots.test_bode()
sympy.physics.control.tests.test_control_plots.test_errors()
sympy.physics.control.tests.test_control_plots.test_impulse_response()
sympy.physics.control.tests.test_control_plots.test_pole_zero()
sympy.physics.control.tests.test_control_plots.test_ramp_response()
sympy.physics.control.tests.test_control_plots.test_step_response()
sympy.physics.control.tests.test_control_plots.y_coordinate_equality(plot_data_func,evalf_func,system)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/control/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/operatorset.py----------------------------------------
A:sympy.physics.quantum.operatorset.ops->frozenset(operators)
A:sympy.physics.quantum.operatorset.ret->_make_default(op_classes)
A:sympy.physics.quantum.operatorset.classes->frozenset(tmp)
A:sympy.physics.quantum.operatorset.op_instance->operators()
A:sympy.physics.quantum.operatorset.state_inst->_make_default(state)
sympy.physics.quantum.operatorset._get_ops(state_inst,op_classes,**options)
sympy.physics.quantum.operatorset._get_state(state_class,ops,**options)
sympy.physics.quantum.operatorset._make_default(expr)
sympy.physics.quantum.operatorset._make_set(ops)
sympy.physics.quantum.operatorset.operators_to_state(operators,**options)
sympy.physics.quantum.operatorset.state_to_operators(state,**options)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/shor.py----------------------------------------
A:sympy.physics.quantum.shor.out->int(self.a ** k % self.N)
A:sympy.physics.quantum.shor.outarray->list(qubits.args[0][:self.t])
A:sympy.physics.quantum.shor.r->period_find(a, N)
A:sympy.physics.quantum.shor.fraction->continued_fraction(x, y)
A:sympy.physics.quantum.shor.total->ratioize(fraction, N)
A:sympy.physics.quantum.shor.t->int(2 * math.ceil(log(N, 2)))
A:sympy.physics.quantum.shor.circuit->measure_partial_oneshot(circuit, i + t)
A:sympy.physics.quantum.shor.g->getr(answer, 2 ** t, N)
sympy.physics.quantum.shor.CMod(Gate)
sympy.physics.quantum.shor.CMod.N(self)
sympy.physics.quantum.shor.CMod._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.shor.CMod._eval_args(cls,args)
sympy.physics.quantum.shor.CMod.a(self)
sympy.physics.quantum.shor.CMod.t(self)
sympy.physics.quantum.shor.OrderFindingException(QuantumError)
sympy.physics.quantum.shor.getr(x,y,N)
sympy.physics.quantum.shor.period_find(a,N)
sympy.physics.quantum.shor.ratioize(list,N)
sympy.physics.quantum.shor.shor(N)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/spin.py----------------------------------------
A:sympy.physics.quantum.spin.j->Add(*label[2])
A:sympy.physics.quantum.spin.a->expr.subs(state, _uncouple(state, jn, jcoupling_list)).atoms(SpinState)
A:sympy.physics.quantum.spin.b->prettyForm('2')
A:sympy.physics.quantum.spin.(size, mvals)->m_values(j)
A:sympy.physics.quantum.spin.result->zeros(self.hilbert_space.dimension, 1)
A:sympy.physics.quantum.spin.me->self.matrix_element(j, mvals[p], j, mvals[q])
A:sympy.physics.quantum.spin.state->TensorProduct(*[evect(j, m) for (j, m) in zip(jn, mvals)])
A:sympy.physics.quantum.spin.ret->qapply(self * state)
A:sympy.physics.quantum.spin.new_func->qapply(self * s.function)
A:sympy.physics.quantum.spin.jp->JplusOp(self.name)._represent_JzOp(basis, **options)
A:sympy.physics.quantum.spin.jm->JminusOp(self.name)._represent_JzOp(basis, **options)
A:sympy.physics.quantum.spin.args->prettyForm(*args.parens())
A:sympy.physics.quantum.spin.evaluate->hints.get('evaluate', False)
A:sympy.physics.quantum.spin.result[p, q]->self.matrix_element(j, mvals[p], j, mvals[q]).doit()
A:sympy.physics.quantum.spin.size->m_values(j)
A:sympy.physics.quantum.spin.r->simplify(r)
A:sympy.physics.quantum.spin.z->simplify(r).doit()
A:sympy.physics.quantum.spin.mp->symbols('mp')
A:sympy.physics.quantum.spin.top->prettyForm(*top.right(' ' * (pad - top.width())))
A:sympy.physics.quantum.spin.bot->prettyForm(*bot.right(' ' * (pad - bot.width())))
A:sympy.physics.quantum.spin.pad->max(top.width(), bot.width())
A:sympy.physics.quantum.spin.s->prettyForm(*s.right(args))
A:sympy.physics.quantum.spin.Jx->JxOp('J')
A:sympy.physics.quantum.spin.Jy->JyOp('J')
A:sympy.physics.quantum.spin.Jz->JzOp('J')
A:sympy.physics.quantum.spin.J2->J2Op('J')
A:sympy.physics.quantum.spin.Jplus->JplusOp('J')
A:sympy.physics.quantum.spin.Jminus->JminusOp('J')
A:sympy.physics.quantum.spin.m->sympify(m)
A:sympy.physics.quantum.spin.alpha->sympify(options.get('alpha', 0))
A:sympy.physics.quantum.spin.beta->sympify(options.get('beta', 0))
A:sympy.physics.quantum.spin.gamma->sympify(options.get('gamma', 0))
A:sympy.physics.quantum.spin.result[p, 0]->Rotation.D(self.j, mval, self.m, alpha, beta, gamma)
A:sympy.physics.quantum.spin.vect->represent(self, basis=basis, **options)
A:sympy.physics.quantum.spin.mi->symbols('mi%d' % i)
A:sympy.physics.quantum.spin.lt->Rotation.D(j, mi, self.m, *angles)
A:sympy.physics.quantum.spin.n_sort->sorted(n_list[n1 - 1] + n_list[n2 - 1])
A:sympy.physics.quantum.spin.jn->Tuple(*[sympify(ji) for ji in jn])
A:sympy.physics.quantum.spin.jcoupling->Tuple(*[Tuple(sympify(n1), sympify(n2), sympify(ji)) for (n1, n2, ji) in jcoupling])
A:sympy.physics.quantum.spin.(coupled_n, coupled_jn)->_build_coupled(jcoupling_list, len(jn))
A:sympy.physics.quantum.spin.jvals->list(jn)
A:sympy.physics.quantum.spin.symb->prettyForm('j' + n + '=')
A:sympy.physics.quantum.spin.item->prettyForm(*symb.right(printer._print(jn)))
A:sympy.physics.quantum.spin.n->len(jn)
A:sympy.physics.quantum.spin.evect->TensorProduct(*[evect(j, m) for (j, m) in zip(jn, mvals)]).uncoupled_class()
A:sympy.physics.quantum.spin.result[start:start + 2 * self.j + 1, 0]->evect(self.j, self.m)._represent_base(**options)
A:sympy.physics.quantum.spin.expr->expr.subs(state, _uncouple(state, jn, jcoupling_list)).subs(state, _uncouple(state, jn, jcoupling_list))
A:sympy.physics.quantum.spin.coupled_evect->states[0].coupled_class()
A:sympy.physics.quantum.spin.j1_n->list(n_list[n1 - 1])
A:sympy.physics.quantum.spin.j2_n->list(n_list[n2 - 1])
A:sympy.physics.quantum.spin.n_list[min(n1, n2) - 1]->sorted(j1_n + j2_n)
A:sympy.physics.quantum.spin.tot->binomial(diff + n - 1, diff)
A:sympy.physics.quantum.spin.diff_list->_confignum_to_difflist(config_num, diff, n)
A:sympy.physics.quantum.spin.coupled_j->list(jn)
A:sympy.physics.quantum.spin.m1->Add(*[jn[x - 1] - diff_list[x - 1] for x in j1_n])
A:sympy.physics.quantum.spin.m2->Add(*[jn[x - 1] - diff_list[x - 1] for x in j2_n])
A:sympy.physics.quantum.spin.coeff->Mul(*[CG(*term).doit() for term in cg_terms])
A:sympy.physics.quantum.spin.j3->symbols(j3_name)
A:sympy.physics.quantum.spin.j_list->list(jn)
A:sympy.physics.quantum.spin.mvals->symbols(m_str)
A:sympy.physics.quantum.spin.cg_coeff->Mul(*[CG(*cg_term) for cg_term in cg_terms])
A:sympy.physics.quantum.spin.rem_configs->binomial(diff + rem_spots - 1, diff)
sympy.physics.quantum.spin.CoupledSpinState(cls,j,m,jn,*jcoupling)
sympy.physics.quantum.spin.CoupledSpinState._eval_hilbert_space(cls,label)
sympy.physics.quantum.spin.CoupledSpinState._eval_rewrite_as_Jx(self,*args,**options)
sympy.physics.quantum.spin.CoupledSpinState._eval_rewrite_as_Jy(self,*args,**options)
sympy.physics.quantum.spin.CoupledSpinState._eval_rewrite_as_Jz(self,*args,**options)
sympy.physics.quantum.spin.CoupledSpinState._print_label(self,printer,*args)
sympy.physics.quantum.spin.CoupledSpinState._print_label_latex(self,printer,*args)
sympy.physics.quantum.spin.CoupledSpinState._print_label_pretty(self,printer,*args)
sympy.physics.quantum.spin.CoupledSpinState._represent_coupled_base(self,**options)
sympy.physics.quantum.spin.CoupledSpinState.coupled_jn(self)
sympy.physics.quantum.spin.CoupledSpinState.coupled_n(self)
sympy.physics.quantum.spin.CoupledSpinState.coupling(self)
sympy.physics.quantum.spin.CoupledSpinState.jn(self)
sympy.physics.quantum.spin.J2Op(SpinOpBase,HermitianOperator)
sympy.physics.quantum.spin.J2Op._apply_operator_JxKet(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JxKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JyKet(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JyKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.J2Op._eval_commutator_JminusOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_commutator_JplusOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_commutator_JxOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_commutator_JyOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_commutator_JzOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_rewrite_as_plusminus(self,*args,**kwargs)
sympy.physics.quantum.spin.J2Op._eval_rewrite_as_xyz(self,*args,**kwargs)
sympy.physics.quantum.spin.J2Op._print_contents_latex(self,printer,*args)
sympy.physics.quantum.spin.J2Op._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.spin.J2Op._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.J2Op._represent_default_basis(self,**options)
sympy.physics.quantum.spin.J2Op.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.JminusOp(SpinOpBase,Operator)
sympy.physics.quantum.spin.JminusOp._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.JminusOp._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.JminusOp._eval_rewrite_as_xyz(self,*args,**kwargs)
sympy.physics.quantum.spin.JminusOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JminusOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JminusOp.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.JplusOp(SpinOpBase,Operator)
sympy.physics.quantum.spin.JplusOp._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.JplusOp._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.JplusOp._eval_commutator_JminusOp(self,other)
sympy.physics.quantum.spin.JplusOp._eval_rewrite_as_xyz(self,*args,**kwargs)
sympy.physics.quantum.spin.JplusOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JplusOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JplusOp.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.JxBra(SpinState,Bra)
sympy.physics.quantum.spin.JxBra.coupled_class(self)
sympy.physics.quantum.spin.JxBra.dual_class(self)
sympy.physics.quantum.spin.JxBraCoupled(CoupledSpinState,Bra)
sympy.physics.quantum.spin.JxBraCoupled.dual_class(self)
sympy.physics.quantum.spin.JxBraCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JxKet(SpinState,Ket)
sympy.physics.quantum.spin.JxKet._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JxKet._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JxKet._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JxKet._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JxKet.coupled_class(self)
sympy.physics.quantum.spin.JxKet.dual_class(self)
sympy.physics.quantum.spin.JxKetCoupled(CoupledSpinState,Ket)
sympy.physics.quantum.spin.JxKetCoupled._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JxKetCoupled._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JxKetCoupled._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JxKetCoupled._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JxKetCoupled.dual_class(self)
sympy.physics.quantum.spin.JxKetCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JxOp(SpinOpBase,HermitianOperator)
sympy.physics.quantum.spin.JxOp._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.JxOp._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.JxOp._eval_commutator_JyOp(self,other)
sympy.physics.quantum.spin.JxOp._eval_commutator_JzOp(self,other)
sympy.physics.quantum.spin.JxOp._eval_rewrite_as_plusminus(self,*args,**kwargs)
sympy.physics.quantum.spin.JxOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JxOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JyBra(SpinState,Bra)
sympy.physics.quantum.spin.JyBra.coupled_class(self)
sympy.physics.quantum.spin.JyBra.dual_class(self)
sympy.physics.quantum.spin.JyBraCoupled(CoupledSpinState,Bra)
sympy.physics.quantum.spin.JyBraCoupled.dual_class(self)
sympy.physics.quantum.spin.JyBraCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JyKet(SpinState,Ket)
sympy.physics.quantum.spin.JyKet._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JyKet._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JyKet._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JyKet._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JyKet.coupled_class(self)
sympy.physics.quantum.spin.JyKet.dual_class(self)
sympy.physics.quantum.spin.JyKetCoupled(CoupledSpinState,Ket)
sympy.physics.quantum.spin.JyKetCoupled._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JyKetCoupled._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JyKetCoupled._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JyKetCoupled._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JyKetCoupled.dual_class(self)
sympy.physics.quantum.spin.JyKetCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JyOp(SpinOpBase,HermitianOperator)
sympy.physics.quantum.spin.JyOp._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.JyOp._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.JyOp._eval_commutator_JxOp(self,other)
sympy.physics.quantum.spin.JyOp._eval_commutator_JzOp(self,other)
sympy.physics.quantum.spin.JyOp._eval_rewrite_as_plusminus(self,*args,**kwargs)
sympy.physics.quantum.spin.JyOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JyOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JzBra(SpinState,Bra)
sympy.physics.quantum.spin.JzBra.coupled_class(self)
sympy.physics.quantum.spin.JzBra.dual_class(self)
sympy.physics.quantum.spin.JzBraCoupled(CoupledSpinState,Bra)
sympy.physics.quantum.spin.JzBraCoupled.dual_class(self)
sympy.physics.quantum.spin.JzBraCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JzKet(SpinState,Ket)
sympy.physics.quantum.spin.JzKet._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JzKet._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JzKet._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JzKet._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JzKet.coupled_class(self)
sympy.physics.quantum.spin.JzKet.dual_class(self)
sympy.physics.quantum.spin.JzKetCoupled(CoupledSpinState,Ket)
sympy.physics.quantum.spin.JzKetCoupled._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JzKetCoupled._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JzKetCoupled._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JzKetCoupled._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JzKetCoupled.dual_class(self)
sympy.physics.quantum.spin.JzKetCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JzOp(SpinOpBase,HermitianOperator)
sympy.physics.quantum.spin.JzOp._eval_commutator_JminusOp(self,other)
sympy.physics.quantum.spin.JzOp._eval_commutator_JplusOp(self,other)
sympy.physics.quantum.spin.JzOp._eval_commutator_JxOp(self,other)
sympy.physics.quantum.spin.JzOp._eval_commutator_JyOp(self,other)
sympy.physics.quantum.spin.JzOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JzOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JzOp.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.Rotation(UnitaryOperator)
sympy.physics.quantum.spin.Rotation.D(cls,j,m,mp,alpha,beta,gamma)
sympy.physics.quantum.spin.Rotation._apply_operator_JxKet(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JxKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JyKet(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JyKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_coupled(self,state,ket,*,dummy=True,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_uncoupled(self,state,ket,*,dummy=True,**options)
sympy.physics.quantum.spin.Rotation._eval_args(cls,args)
sympy.physics.quantum.spin.Rotation._eval_hilbert_space(cls,label)
sympy.physics.quantum.spin.Rotation._eval_inverse(self)
sympy.physics.quantum.spin.Rotation._print_operator_name(self,printer,*args)
sympy.physics.quantum.spin.Rotation._print_operator_name_latex(self,printer,*args)
sympy.physics.quantum.spin.Rotation._print_operator_name_pretty(self,printer,*args)
sympy.physics.quantum.spin.Rotation._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.Rotation._represent_base(self,basis,**options)
sympy.physics.quantum.spin.Rotation._represent_default_basis(self,**options)
sympy.physics.quantum.spin.Rotation.alpha(self)
sympy.physics.quantum.spin.Rotation.beta(self)
sympy.physics.quantum.spin.Rotation.d(cls,j,m,mp,beta)
sympy.physics.quantum.spin.Rotation.gamma(self)
sympy.physics.quantum.spin.Rotation.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.SpinOpBase
sympy.physics.quantum.spin.SpinOpBase._apply_op(self,ket,orig_basis,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JxKet(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JxKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JyKet(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JyKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_Sum(self,s,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_TensorProduct(self,tp,**options)
sympy.physics.quantum.spin.SpinOpBase._eval_hilbert_space(cls,label)
sympy.physics.quantum.spin.SpinOpBase._eval_trace(self,**options)
sympy.physics.quantum.spin.SpinOpBase._print_contents(self,printer,*args)
sympy.physics.quantum.spin.SpinOpBase._print_contents_latex(self,printer,*args)
sympy.physics.quantum.spin.SpinOpBase._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.spin.SpinOpBase._represent_base(self,basis,**options)
sympy.physics.quantum.spin.SpinOpBase.name(self)
sympy.physics.quantum.spin.SpinState(cls,j,m)
sympy.physics.quantum.spin.SpinState._eval_hilbert_space(cls,label)
sympy.physics.quantum.spin.SpinState._eval_innerproduct_JxBra(self,bra,**hints)
sympy.physics.quantum.spin.SpinState._eval_innerproduct_JyBra(self,bra,**hints)
sympy.physics.quantum.spin.SpinState._eval_innerproduct_JzBra(self,bra,**hints)
sympy.physics.quantum.spin.SpinState._eval_rewrite_as_Jx(self,*args,**options)
sympy.physics.quantum.spin.SpinState._eval_rewrite_as_Jy(self,*args,**options)
sympy.physics.quantum.spin.SpinState._eval_rewrite_as_Jz(self,*args,**options)
sympy.physics.quantum.spin.SpinState._eval_trace(self,bra,**hints)
sympy.physics.quantum.spin.SpinState._represent_base(self,**options)
sympy.physics.quantum.spin.SpinState._rewrite_basis(self,basis,evect,**options)
sympy.physics.quantum.spin.SpinState.j(self)
sympy.physics.quantum.spin.SpinState.m(self)
sympy.physics.quantum.spin.WignerD(cls,*args,**hints)
sympy.physics.quantum.spin.WignerD._eval_wignerd(self)
sympy.physics.quantum.spin.WignerD._latex(self,printer,*args)
sympy.physics.quantum.spin.WignerD._pretty(self,printer,*args)
sympy.physics.quantum.spin.WignerD.alpha(self)
sympy.physics.quantum.spin.WignerD.beta(self)
sympy.physics.quantum.spin.WignerD.doit(self,**hints)
sympy.physics.quantum.spin.WignerD.gamma(self)
sympy.physics.quantum.spin.WignerD.j(self)
sympy.physics.quantum.spin.WignerD.m(self)
sympy.physics.quantum.spin.WignerD.mp(self)
sympy.physics.quantum.spin._build_coupled(jcoupling,length)
sympy.physics.quantum.spin._confignum_to_difflist(config_num,diff,list_len)
sympy.physics.quantum.spin._couple(tp,jcoupling_list)
sympy.physics.quantum.spin._uncouple(state,jn,jcoupling_list)
sympy.physics.quantum.spin.couple(expr,jcoupling_list=None)
sympy.physics.quantum.spin.m_values(j)
sympy.physics.quantum.spin.uncouple(expr,jn=None,jcoupling_list=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/qft.py----------------------------------------
A:sympy.physics.quantum.qft.args->cls._eval_args(args)
A:sympy.physics.quantum.qft.inst->sympy.core.expr.Expr.__new__(cls, *args)
A:sympy.physics.quantum.qft.inst.hilbert_space->cls._eval_hilbert_space(args)
A:sympy.physics.quantum.qft.nqubits->options.get('nqubits', 0)
A:sympy.physics.quantum.qft.matrixFT->matrix_tensor_product(matrixFT, eye(2 ** (nqubits - self.min_qubits)))
sympy.physics.quantum.qft.Fourier(Gate)
sympy.physics.quantum.qft.Fourier._eval_args(self,args)
sympy.physics.quantum.qft.Fourier._represent_ZGate(self,basis,**options)
sympy.physics.quantum.qft.Fourier._represent_default_basis(self,**options)
sympy.physics.quantum.qft.Fourier.min_qubits(self)
sympy.physics.quantum.qft.Fourier.omega(self)
sympy.physics.quantum.qft.Fourier.size(self)
sympy.physics.quantum.qft.Fourier.targets(self)
sympy.physics.quantum.qft.IQFT(Fourier)
sympy.physics.quantum.qft.IQFT._eval_inverse(self)
sympy.physics.quantum.qft.IQFT.decompose(self)
sympy.physics.quantum.qft.IQFT.omega(self)
sympy.physics.quantum.qft.QFT(Fourier)
sympy.physics.quantum.qft.QFT._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.qft.QFT._eval_inverse(self)
sympy.physics.quantum.qft.QFT.decompose(self)
sympy.physics.quantum.qft.QFT.omega(self)
sympy.physics.quantum.qft.RkGate(cls,*args)
sympy.physics.quantum.qft.RkGate._eval_args(cls,args)
sympy.physics.quantum.qft.RkGate.gate_name_plot(self)
sympy.physics.quantum.qft.RkGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.qft.RkGate.k(self)
sympy.physics.quantum.qft.RkGate.targets(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/matrixutils.py----------------------------------------
A:sympy.physics.quantum.matrixutils.np->import_module('numpy')
A:sympy.physics.quantum.matrixutils.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.matrixutils.dtype->options.get('dtype', 'float64')
A:sympy.physics.quantum.matrixutils.e->_scipy_sparse_matrix_to_zero(e)
A:sympy.physics.quantum.matrixutils.answer->sparse.kron(answer, item)
A:sympy.physics.quantum.matrixutils.format->options.get('format', 'sympy')
A:sympy.physics.quantum.matrixutils.spmatrix->options.get('spmatrix', 'csr')
A:sympy.physics.quantum.matrixutils.test->import_module('numpy').zeros_like(edense)
A:sympy.physics.quantum.matrixutils.edense->_scipy_sparse_matrix_to_zero(e).todense()
sympy.physics.quantum.matrixutils._numpy_eye(n)
sympy.physics.quantum.matrixutils._numpy_matrix_to_zero(e)
sympy.physics.quantum.matrixutils._numpy_tensor_product(*product)
sympy.physics.quantum.matrixutils._numpy_zeros(m,n,**options)
sympy.physics.quantum.matrixutils._scipy_sparse_eye(n)
sympy.physics.quantum.matrixutils._scipy_sparse_matrix_to_zero(e)
sympy.physics.quantum.matrixutils._scipy_sparse_tensor_product(*product)
sympy.physics.quantum.matrixutils._scipy_sparse_zeros(m,n,**options)
sympy.physics.quantum.matrixutils._sympy_tensor_product(*matrices)
sympy.physics.quantum.matrixutils.flatten_scalar(e)
sympy.physics.quantum.matrixutils.matrix_dagger(e)
sympy.physics.quantum.matrixutils.matrix_eye(n,**options)
sympy.physics.quantum.matrixutils.matrix_tensor_product(*product)
sympy.physics.quantum.matrixutils.matrix_to_zero(e)
sympy.physics.quantum.matrixutils.matrix_zeros(m,n,**options)
sympy.physics.quantum.matrixutils.numpy_to_sympy(m,**options)
sympy.physics.quantum.matrixutils.scipy_sparse_to_sympy(m,**options)
sympy.physics.quantum.matrixutils.sympy_to_numpy(m,**options)
sympy.physics.quantum.matrixutils.sympy_to_scipy_sparse(m,**options)
sympy.physics.quantum.matrixutils.to_numpy(m,**options)
sympy.physics.quantum.matrixutils.to_scipy_sparse(m,**options)
sympy.physics.quantum.matrixutils.to_sympy(m,**options)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/grover.py----------------------------------------
A:sympy.physics.quantum.grover.obj->sympy.core.basic.Atom.__new__(cls)
A:sympy.physics.quantum.grover.sub_args->sympy.physics.quantum.operator.UnitaryOperator._eval_args(sub_args)
A:sympy.physics.quantum.grover.function->OracleGateFunction(function)
A:sympy.physics.quantum.grover.matrixOracle->eye(nbasis)
A:sympy.physics.quantum.grover.matrixOracle[i, i]->NegativeOne()
A:sympy.physics.quantum.grover.args->sympy.physics.quantum.operator.UnitaryOperator._eval_args(args)
A:sympy.physics.quantum.grover.basis_states->superposition_basis(self.nqubits)
A:sympy.physics.quantum.grover.wgate->WGate(oracle.nqubits)
A:sympy.physics.quantum.grover.iterations->floor(sqrt(2 ** nqubits) * (pi / 4))
A:sympy.physics.quantum.grover.v->OracleGate(nqubits, oracle)
A:sympy.physics.quantum.grover.iterated->qapply(iterated)
sympy.physics.quantum.grover.OracleGate(Gate)
sympy.physics.quantum.grover.OracleGate._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.grover.OracleGate._eval_args(cls,args)
sympy.physics.quantum.grover.OracleGate._eval_hilbert_space(cls,args)
sympy.physics.quantum.grover.OracleGate._represent_ZGate(self,basis,**options)
sympy.physics.quantum.grover.OracleGate.search_function(self)
sympy.physics.quantum.grover.OracleGate.targets(self)
sympy.physics.quantum.grover.OracleGateFunction(cls,function)
sympy.physics.quantum.grover.OracleGateFunction._hashable_content(self)
sympy.physics.quantum.grover.WGate(Gate)
sympy.physics.quantum.grover.WGate._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.grover.WGate._eval_args(cls,args)
sympy.physics.quantum.grover.WGate.targets(self)
sympy.physics.quantum.grover.apply_grover(oracle,nqubits,iterations=None)
sympy.physics.quantum.grover.grover_iteration(qstate,oracle)
sympy.physics.quantum.grover.superposition_basis(nqubits)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/piab.py----------------------------------------
A:sympy.physics.quantum.piab.m->Symbol('m')
A:sympy.physics.quantum.piab.L->Symbol('L')
A:sympy.physics.quantum.piab.x->Symbol('x')
A:sympy.physics.quantum.piab.n->Symbol('n')
A:sympy.physics.quantum.piab.subs_info->options.get('subs', {})
sympy.physics.quantum.piab.PIABBra(Bra)
sympy.physics.quantum.piab.PIABBra._eval_hilbert_space(cls,label)
sympy.physics.quantum.piab.PIABBra.dual_class(self)
sympy.physics.quantum.piab.PIABHamiltonian(HermitianOperator)
sympy.physics.quantum.piab.PIABHamiltonian._apply_operator_PIABKet(self,ket,**options)
sympy.physics.quantum.piab.PIABHamiltonian._eval_hilbert_space(cls,label)
sympy.physics.quantum.piab.PIABKet(Ket)
sympy.physics.quantum.piab.PIABKet._eval_hilbert_space(cls,args)
sympy.physics.quantum.piab.PIABKet._eval_innerproduct_PIABBra(self,bra)
sympy.physics.quantum.piab.PIABKet._represent_XOp(self,basis,**options)
sympy.physics.quantum.piab.PIABKet._represent_default_basis(self,**options)
sympy.physics.quantum.piab.PIABKet.dual_class(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/qasm.py----------------------------------------
A:sympy.physics.quantum.qasm.nq->len(labels)
A:sympy.physics.quantum.qasm.line->trim(line)
A:sympy.physics.quantum.qasm.words->trim(line).split()
A:sympy.physics.quantum.qasm.rest->' '.join(words[1:])
A:sympy.physics.quantum.qasm.c->c.replace(char, '').replace(char, '')
A:sympy.physics.quantum.qasm.s->s.replace("'", '').replace("'", '')
A:sympy.physics.quantum.qasm.(command, rest)->fullsplit(line)
A:sympy.physics.quantum.qasm.function->getattr(self, command)
A:sympy.physics.quantum.qasm.indices->self.indices(rest)
A:sympy.physics.quantum.qasm.(i1, i2, i3)->self.indices([a1, a2, a3])
A:sympy.physics.quantum.qasm.(fi, fj)->self.indices([a1, a2])
A:sympy.physics.quantum.qasm.ncontrols->int(ncontrols)
A:sympy.physics.quantum.qasm.command->fixcommand(name)
A:sympy.physics.quantum.qasm.symbol->stripquotes(symbol)
A:sympy.physics.quantum.qasm.self.defs[command]->CreateOneQubitGate(symbol)
sympy.physics.quantum.qasm.Qasm(self,*args,**kwargs)
sympy.physics.quantum.qasm.Qasm.add(self,*lines)
sympy.physics.quantum.qasm.Qasm.cnot(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.cphase(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.cx(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.cz(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.defbox(self,*args)
sympy.physics.quantum.qasm.Qasm.get_circuit(self)
sympy.physics.quantum.qasm.Qasm.get_labels(self)
sympy.physics.quantum.qasm.Qasm.h(self,arg)
sympy.physics.quantum.qasm.Qasm.index(self,arg)
sympy.physics.quantum.qasm.Qasm.indices(self,args)
sympy.physics.quantum.qasm.Qasm.measure(self,arg)
sympy.physics.quantum.qasm.Qasm.nop(self,*args)
sympy.physics.quantum.qasm.Qasm.plot(self)
sympy.physics.quantum.qasm.Qasm.qdef(self,name,ncontrols,symbol)
sympy.physics.quantum.qasm.Qasm.qubit(self,arg,init=None)
sympy.physics.quantum.qasm.Qasm.s(self,arg)
sympy.physics.quantum.qasm.Qasm.swap(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.t(self,arg)
sympy.physics.quantum.qasm.Qasm.toffoli(self,a1,a2,a3)
sympy.physics.quantum.qasm.Qasm.x(self,arg)
sympy.physics.quantum.qasm.Qasm.z(self,arg)
sympy.physics.quantum.qasm.fixcommand(c)
sympy.physics.quantum.qasm.flip_index(i,n)
sympy.physics.quantum.qasm.fullsplit(line)
sympy.physics.quantum.qasm.get_index(target,labels)
sympy.physics.quantum.qasm.get_indices(targets,labels)
sympy.physics.quantum.qasm.nonblank(args)
sympy.physics.quantum.qasm.read_qasm(lines)
sympy.physics.quantum.qasm.read_qasm_file(filename)
sympy.physics.quantum.qasm.stripquotes(s)
sympy.physics.quantum.qasm.trim(line)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tensorproduct.py----------------------------------------
A:sympy.physics.quantum.tensorproduct.(c_part, new_args)->cls.flatten(sympify(args))
A:sympy.physics.quantum.tensorproduct.c_part->Mul(*c_part)
A:sympy.physics.quantum.tensorproduct.tp->TensorProduct(*args[:i] + (aa,) + args[i + 1:])
A:sympy.physics.quantum.tensorproduct.(cp, ncp)->arg.args_cnc()
A:sympy.physics.quantum.tensorproduct.length->len(self.args)
A:sympy.physics.quantum.tensorproduct.pform->prettyForm(*pform.right('x' + ' '))
A:sympy.physics.quantum.tensorproduct.next_pform->prettyForm(*next_pform.parens(left='(', right=')'))
A:sympy.physics.quantum.tensorproduct.length_i->len(self.args[i].args)
A:sympy.physics.quantum.tensorproduct.part_pform->printer._print(self.args[i].args[j], *args)
A:sympy.physics.quantum.tensorproduct.s->', '.join([_label_wrap(arg._print_label_latex(printer, *args), len(arg.args)) for arg in self.args])
A:sympy.physics.quantum.tensorproduct.(c_part, nc_part)->e.args_cnc()
A:sympy.physics.quantum.tensorproduct.indices->kwargs.get('indices', None)
A:sympy.physics.quantum.tensorproduct.exp->tensor_product_simp(self)
A:sympy.physics.quantum.tensorproduct.n_nc->len(nc_part)
A:sympy.physics.quantum.tensorproduct.current->tensor_product_simp_Pow(current)
A:sympy.physics.quantum.tensorproduct.n_terms->len(current.args)
A:sympy.physics.quantum.tensorproduct.new_args->list(current.args)
A:sympy.physics.quantum.tensorproduct.new_tp->tensor_product_simp_Pow(next)
sympy.physics.quantum.TensorProduct(cls,*args)
sympy.physics.quantum.tensor_product_simp(e,**hints)
sympy.physics.quantum.tensorproduct.TensorProduct(cls,*args)
sympy.physics.quantum.tensorproduct.TensorProduct._eval_adjoint(self)
sympy.physics.quantum.tensorproduct.TensorProduct._eval_expand_tensorproduct(self,**hints)
sympy.physics.quantum.tensorproduct.TensorProduct._eval_rewrite(self,rule,args,**hints)
sympy.physics.quantum.tensorproduct.TensorProduct._eval_trace(self,**kwargs)
sympy.physics.quantum.tensorproduct.TensorProduct._latex(self,printer,*args)
sympy.physics.quantum.tensorproduct.TensorProduct._pretty(self,printer,*args)
sympy.physics.quantum.tensorproduct.TensorProduct._sympystr(self,printer,*args)
sympy.physics.quantum.tensorproduct.TensorProduct.doit(self,**hints)
sympy.physics.quantum.tensorproduct.TensorProduct.flatten(cls,args)
sympy.physics.quantum.tensorproduct.combined_tensor_printing(combined)
sympy.physics.quantum.tensorproduct.tensor_product_simp(e,**hints)
sympy.physics.quantum.tensorproduct.tensor_product_simp_Mul(e)
sympy.physics.quantum.tensorproduct.tensor_product_simp_Pow(e)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/hilbert.py----------------------------------------
A:sympy.physics.quantum.hilbert.obj->sympy.core.basic.Basic.__new__(cls, *args)
A:sympy.physics.quantum.hilbert.dimension->sympify(dimension)
A:sympy.physics.quantum.hilbert.r->cls.eval(args)
A:sympy.physics.quantum.hilbert.pform_exp->prettyForm(*pform_exp.left(prettyForm('x')))
A:sympy.physics.quantum.hilbert.pform_base->printer._print(self.base, *args)
A:sympy.physics.quantum.hilbert.interval->printer._print(self.interval, *args)
A:sympy.physics.quantum.hilbert.s->printer._print(arg, *args)
A:sympy.physics.quantum.hilbert.spaces_reprs->self._spaces_printer(printer, *args)
A:sympy.physics.quantum.hilbert.spaces_strs->self._spaces_printer(printer, *args)
A:sympy.physics.quantum.hilbert.length->len(self.args)
A:sympy.physics.quantum.hilbert.pform->prettyForm(*pform.right(' + '))
A:sympy.physics.quantum.hilbert.next_pform->prettyForm(*next_pform.parens(left='(', right=')'))
A:sympy.physics.quantum.hilbert.arg_s->printer._print(self.args[i], *args)
A:sympy.physics.quantum.hilbert.base->printer._print(self.base, *args)
A:sympy.physics.quantum.hilbert.exp->printer._print(self.exp, *args)
sympy.physics.quantum.ComplexSpace(cls,dimension)
sympy.physics.quantum.DirectSumHilbertSpace(cls,*args)
sympy.physics.quantum.FockSpace(cls)
sympy.physics.quantum.HilbertSpace(cls)
sympy.physics.quantum.HilbertSpaceError(QuantumError)
sympy.physics.quantum.L2(cls,interval)
sympy.physics.quantum.TensorPowerHilbertSpace(cls,*args)
sympy.physics.quantum.TensorProductHilbertSpace(cls,*args)
sympy.physics.quantum.hilbert.ComplexSpace(cls,dimension)
sympy.physics.quantum.hilbert.ComplexSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.ComplexSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.ComplexSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.ComplexSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.ComplexSpace.dimension(self)
sympy.physics.quantum.hilbert.ComplexSpace.eval(cls,dimension)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace(cls,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace.dimension(self)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval(cls,args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces(self)
sympy.physics.quantum.hilbert.FockSpace(cls)
sympy.physics.quantum.hilbert.FockSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.FockSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.FockSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.FockSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.FockSpace.dimension(self)
sympy.physics.quantum.hilbert.HilbertSpace(cls)
sympy.physics.quantum.hilbert.HilbertSpace.__add__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace.__contains__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace.__mul__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace.__pow__(self,other,mod=None)
sympy.physics.quantum.hilbert.HilbertSpace.__radd__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace.__rmul__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.HilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.HilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.HilbertSpace.dimension(self)
sympy.physics.quantum.hilbert.HilbertSpaceError(QuantumError)
sympy.physics.quantum.hilbert.L2(cls,interval)
sympy.physics.quantum.hilbert.L2._latex(self,printer,*args)
sympy.physics.quantum.hilbert.L2._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.L2._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.L2._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.L2.dimension(self)
sympy.physics.quantum.hilbert.L2.interval(self)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace(cls,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.base(self)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.dimension(self)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.eval(cls,args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.exp(self)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace(cls,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._spaces_printer(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace.dimension(self)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval(cls,args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/circuitplot.py----------------------------------------
A:sympy.physics.quantum.circuitplot.np->import_module('numpy')
A:sympy.physics.quantum.circuitplot.matplotlib->import_module('matplotlib', import_kwargs={'fromlist': ['pyplot']}, catch=(RuntimeError,))
A:sympy.physics.quantum.circuitplot.self.ngates->len(self.circuit.args)
A:sympy.physics.quantum.circuitplot.wire_grid->import_module('numpy').arange(0.0, self.nqubits * scale, scale, dtype=float)
A:sympy.physics.quantum.circuitplot.gate_grid->import_module('numpy').arange(0.0, self.ngates * scale, scale, dtype=float)
A:sympy.physics.quantum.circuitplot.self._figure->pyplot.figure(figsize=(self.ngates * self.scale, self.nqubits * self.scale), facecolor='w', edgecolor='w')
A:sympy.physics.quantum.circuitplot.ax->self._figure.add_subplot(1, 1, 1, frameon=True)
A:sympy.physics.quantum.circuitplot.line->Line2D(xdata, ydata, color='k', lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.ismeasured->self._measurements()
A:sympy.physics.quantum.circuitplot.c->Circle((x, y), radius, ec='k', fc='w', fill=False, lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.l->Line2D((x, x), (y - radius, y + radius), color='k', lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.l1->Line2D((x - d, x + d), (y - d, y + d), color='k', lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.l2->Line2D((x - d, x + d), (y + d, y - d), color='k', lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.init->inits.get(label)
A:sympy.physics.quantum.circuitplot.onequbitgate->CreateOneQubitGate(name, latexname)
sympy.physics.quantum.circuitplot.CircuitPlot(self,c,nqubits,**kwargs)
sympy.physics.quantum.circuitplot.CircuitPlot._create_figure(self)
sympy.physics.quantum.circuitplot.CircuitPlot._create_grid(self)
sympy.physics.quantum.circuitplot.CircuitPlot._finish(self)
sympy.physics.quantum.circuitplot.CircuitPlot._gates(self)
sympy.physics.quantum.circuitplot.CircuitPlot._measurements(self)
sympy.physics.quantum.circuitplot.CircuitPlot._plot_gates(self)
sympy.physics.quantum.circuitplot.CircuitPlot._plot_measured_wires(self)
sympy.physics.quantum.circuitplot.CircuitPlot._plot_wires(self)
sympy.physics.quantum.circuitplot.CircuitPlot.control_line(self,gate_idx,min_wire,max_wire)
sympy.physics.quantum.circuitplot.CircuitPlot.control_point(self,gate_idx,wire_idx)
sympy.physics.quantum.circuitplot.CircuitPlot.not_point(self,gate_idx,wire_idx)
sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box(self,t,gate_idx,wire_idx)
sympy.physics.quantum.circuitplot.CircuitPlot.swap_point(self,gate_idx,wire_idx)
sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box(self,t,gate_idx,wire_idx)
sympy.physics.quantum.circuitplot.CircuitPlot.update(self,kwargs)
sympy.physics.quantum.circuitplot.CreateCGate(name,latexname=None)
sympy.physics.quantum.circuitplot.CreateOneQubitGate(mcl,name,latexname=None)
sympy.physics.quantum.circuitplot.Mx(OneQubitGate)
sympy.physics.quantum.circuitplot.Mz(OneQubitGate)
sympy.physics.quantum.circuitplot.circuit_plot(c,nqubits,**kwargs)
sympy.physics.quantum.circuitplot.labeller(n,symbol='q')
sympy.physics.quantum.circuitplot.render_label(label,inits={})


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/sho1d.py----------------------------------------
A:sympy.physics.quantum.sho1d.args->sympy.physics.quantum.qexpr.QExpr._eval_args(args)
A:sympy.physics.quantum.sho1d.ndim_info->options.get('ndim', 4)
A:sympy.physics.quantum.sho1d.format->options.get('format', 'sympy')
A:sympy.physics.quantum.sho1d.matrix->matrix.tocsr().tocsr()
A:sympy.physics.quantum.sho1d.value->float(value)
A:sympy.physics.quantum.sho1d.arg0->printer._print(self.args[0], *args)
A:sympy.physics.quantum.sho1d.pform->printer._print(self.args[0], *args)
A:sympy.physics.quantum.sho1d.arg->printer._print(self.args[0])
A:sympy.physics.quantum.sho1d.result->KroneckerDelta(self.n, bra.n)
A:sympy.physics.quantum.sho1d.vector->vector.tocsr().tocsr()
A:sympy.physics.quantum.sho1d.ad->RaisingOp('a')
A:sympy.physics.quantum.sho1d.a->LoweringOp('a')
A:sympy.physics.quantum.sho1d.H->Hamiltonian('H')
A:sympy.physics.quantum.sho1d.N->NumberOp('N')
A:sympy.physics.quantum.sho1d.omega->Symbol('omega')
A:sympy.physics.quantum.sho1d.m->Symbol('m')
sympy.physics.quantum.sho1d.Hamiltonian(SHOOp)
sympy.physics.quantum.sho1d.Hamiltonian._apply_operator_SHOKet(self,ket,**options)
sympy.physics.quantum.sho1d.Hamiltonian._eval_commutator_NumberOp(self,other)
sympy.physics.quantum.sho1d.Hamiltonian._eval_rewrite_as_N(self,*args,**kwargs)
sympy.physics.quantum.sho1d.Hamiltonian._eval_rewrite_as_a(self,*args,**kwargs)
sympy.physics.quantum.sho1d.Hamiltonian._eval_rewrite_as_xp(self,*args,**kwargs)
sympy.physics.quantum.sho1d.Hamiltonian._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.Hamiltonian._represent_XOp(self,basis,**options)
sympy.physics.quantum.sho1d.Hamiltonian._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.LoweringOp(SHOOp)
sympy.physics.quantum.sho1d.LoweringOp._apply_operator_SHOKet(self,ket,**options)
sympy.physics.quantum.sho1d.LoweringOp._eval_adjoint(self)
sympy.physics.quantum.sho1d.LoweringOp._eval_commutator_NumberOp(self,other)
sympy.physics.quantum.sho1d.LoweringOp._eval_commutator_RaisingOp(self,other)
sympy.physics.quantum.sho1d.LoweringOp._eval_rewrite_as_xp(self,*args,**kwargs)
sympy.physics.quantum.sho1d.LoweringOp._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.LoweringOp._represent_XOp(self,basis,**options)
sympy.physics.quantum.sho1d.LoweringOp._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.NumberOp(SHOOp)
sympy.physics.quantum.sho1d.NumberOp._apply_operator_SHOKet(self,ket,**options)
sympy.physics.quantum.sho1d.NumberOp._eval_commutator_Hamiltonian(self,other)
sympy.physics.quantum.sho1d.NumberOp._eval_commutator_LoweringOp(self,other)
sympy.physics.quantum.sho1d.NumberOp._eval_commutator_RaisingOp(self,other)
sympy.physics.quantum.sho1d.NumberOp._eval_rewrite_as_H(self,*args,**kwargs)
sympy.physics.quantum.sho1d.NumberOp._eval_rewrite_as_a(self,*args,**kwargs)
sympy.physics.quantum.sho1d.NumberOp._eval_rewrite_as_xp(self,*args,**kwargs)
sympy.physics.quantum.sho1d.NumberOp._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.NumberOp._represent_XOp(self,basis,**options)
sympy.physics.quantum.sho1d.NumberOp._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.RaisingOp(SHOOp)
sympy.physics.quantum.sho1d.RaisingOp._apply_operator_SHOKet(self,ket,**options)
sympy.physics.quantum.sho1d.RaisingOp._eval_adjoint(self)
sympy.physics.quantum.sho1d.RaisingOp._eval_commutator_LoweringOp(self,other)
sympy.physics.quantum.sho1d.RaisingOp._eval_commutator_NumberOp(self,other)
sympy.physics.quantum.sho1d.RaisingOp._eval_rewrite_as_xp(self,*args,**kwargs)
sympy.physics.quantum.sho1d.RaisingOp._print_contents(self,printer,*args)
sympy.physics.quantum.sho1d.RaisingOp._print_contents_latex(self,printer,*args)
sympy.physics.quantum.sho1d.RaisingOp._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.sho1d.RaisingOp._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.RaisingOp._represent_XOp(self,basis,**options)
sympy.physics.quantum.sho1d.RaisingOp._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.SHOBra(SHOState,Bra)
sympy.physics.quantum.sho1d.SHOBra._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.SHOBra._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.SHOBra.dual_class(self)
sympy.physics.quantum.sho1d.SHOKet(SHOState,Ket)
sympy.physics.quantum.sho1d.SHOKet._eval_innerproduct_SHOBra(self,bra,**hints)
sympy.physics.quantum.sho1d.SHOKet._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.SHOKet._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.SHOKet.dual_class(self)
sympy.physics.quantum.sho1d.SHOOp(Operator)
sympy.physics.quantum.sho1d.SHOOp._eval_args(cls,args)
sympy.physics.quantum.sho1d.SHOOp._eval_hilbert_space(cls,label)
sympy.physics.quantum.sho1d.SHOState(State)
sympy.physics.quantum.sho1d.SHOState._eval_hilbert_space(cls,label)
sympy.physics.quantum.sho1d.SHOState.n(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/qubit.py----------------------------------------
A:sympy.physics.quantum.qubit.args->tuple((_sympify(arg) for arg in args))
A:sympy.physics.quantum.qubit.newargs->list(self.qubit_values)
A:sympy.physics.quantum.qubit.bit->int(self.dimension - i - 1)
A:sympy.physics.quantum.qubit._format->options.get('format', 'sympy')
A:sympy.physics.quantum.qubit.indices->kwargs.get('indices', [])
A:sympy.physics.quantum.qubit.sorted_idx->list(range(0, self.nqubits))
A:sympy.physics.quantum.qubit.new_mat->self._reduced_density(new_mat, int(sorted_idx[i]))
A:sympy.physics.quantum.qubit.old_matrix->represent(matrix, **options)
A:sympy.physics.quantum.qubit.new_matrix->Matrix().zeros(new_size)
A:sympy.physics.quantum.qubit.col->find_index_that_is_projected(j, k, qubit)
A:sympy.physics.quantum.qubit.row->find_index_that_is_projected(i, k, qubit)
A:sympy.physics.quantum.qubit.rvalues->reversed(range(bitcount(abs(args[0]))))
A:sympy.physics.quantum.qubit.need->bitcount(abs(number))
A:sympy.physics.quantum.qubit.label->self._print_label(printer, *args)
A:sympy.physics.quantum.qubit.nqubits->int(math.log(size, 2) + 0.1)
A:sympy.physics.quantum.qubit.element->complex(element)
A:sympy.physics.quantum.qubit.result->result.expand().expand()
A:sympy.physics.quantum.qubit.eigen->mat.eigenvects()
A:sympy.physics.quantum.qubit.m->m.normalized().normalized()
A:sympy.physics.quantum.qubit.size->max(m.shape)
A:sympy.physics.quantum.qubit.possible_outcomes->_get_possible_outcomes(m, bits)
A:sympy.physics.quantum.qubit.next_matrix->matrix_to_qubit(outcome)
A:sympy.physics.quantum.qubit.random_number->random.random()
sympy.physics.quantum.qubit.IntQubit(IntQubitState,Qubit)
sympy.physics.quantum.qubit.IntQubit._eval_innerproduct_IntQubitBra(self,bra,**hints)
sympy.physics.quantum.qubit.IntQubit.dual_class(self)
sympy.physics.quantum.qubit.IntQubitBra(IntQubitState,QubitBra)
sympy.physics.quantum.qubit.IntQubitBra.dual_class(self)
sympy.physics.quantum.qubit.IntQubitState(QubitState)
sympy.physics.quantum.qubit.IntQubitState._eval_args(cls,args,nqubits=None)
sympy.physics.quantum.qubit.IntQubitState._eval_args_with_nqubits(cls,number,nqubits)
sympy.physics.quantum.qubit.IntQubitState._print_label(self,printer,*args)
sympy.physics.quantum.qubit.IntQubitState._print_label_pretty(self,printer,*args)
sympy.physics.quantum.qubit.IntQubitState.as_int(self)
sympy.physics.quantum.qubit.Qubit(QubitState,Ket)
sympy.physics.quantum.qubit.Qubit._eval_innerproduct_QubitBra(self,bra,**hints)
sympy.physics.quantum.qubit.Qubit._eval_trace(self,bra,**kwargs)
sympy.physics.quantum.qubit.Qubit._reduced_density(self,matrix,qubit,**options)
sympy.physics.quantum.qubit.Qubit._represent_ZGate(self,basis,**options)
sympy.physics.quantum.qubit.Qubit._represent_default_basis(self,**options)
sympy.physics.quantum.qubit.Qubit.dual_class(self)
sympy.physics.quantum.qubit.QubitBra(QubitState,Bra)
sympy.physics.quantum.qubit.QubitBra.dual_class(self)
sympy.physics.quantum.qubit.QubitState(State)
sympy.physics.quantum.qubit.QubitState.__getitem__(self,bit)
sympy.physics.quantum.qubit.QubitState.__len__(self)
sympy.physics.quantum.qubit.QubitState._eval_args(cls,args)
sympy.physics.quantum.qubit.QubitState._eval_hilbert_space(cls,args)
sympy.physics.quantum.qubit.QubitState.dimension(self)
sympy.physics.quantum.qubit.QubitState.flip(self,*bits)
sympy.physics.quantum.qubit.QubitState.nqubits(self)
sympy.physics.quantum.qubit.QubitState.qubit_values(self)
sympy.physics.quantum.qubit._get_possible_outcomes(m,bits)
sympy.physics.quantum.qubit.matrix_to_density(mat)
sympy.physics.quantum.qubit.matrix_to_qubit(matrix)
sympy.physics.quantum.qubit.measure_all(qubit,format='sympy',normalize=True)
sympy.physics.quantum.qubit.measure_all_oneshot(qubit,format='sympy')
sympy.physics.quantum.qubit.measure_partial(qubit,bits,format='sympy',normalize=True)
sympy.physics.quantum.qubit.measure_partial_oneshot(qubit,bits,format='sympy')
sympy.physics.quantum.qubit.qubit_to_matrix(qubit,format='sympy')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/cg.py----------------------------------------
A:sympy.physics.quantum.cg.args->map(sympify, (j1, j2, j12, j3, j4, j34, j13, j24, j))
A:sympy.physics.quantum.cg.maxw[j]->max([m[j][i].width() for i in range(3)])
A:sympy.physics.quantum.cg.s->prettyForm(*s.left(' ' * wleft))
A:sympy.physics.quantum.cg.D_row->prettyForm(*D_row.right(s))
A:sympy.physics.quantum.cg.D->prettyForm(*D.parens(left='{', right='}'))
A:sympy.physics.quantum.cg.label->map(printer._print, (self.j1, self.j2, self.j12, self.j3, self.j4, self.j34, self.j13, self.j24, self.j))
A:sympy.physics.quantum.cg.bot->prettyForm(*bot.right(' ' * (pad - bot.width())))
A:sympy.physics.quantum.cg.top->prettyForm(*top.right(' ' * (pad - top.width())))
A:sympy.physics.quantum.cg.pad->max(top.width(), bot.width())
A:sympy.physics.quantum.cg.e->_check_varsh_sum_872_4(e)
A:sympy.physics.quantum.cg.(cg_part, other)->_check_varsh_872_9(cg_part)
A:sympy.physics.quantum.cg.(a, alpha, b, lt)->map(Wild, ('a', 'alpha', 'b', 'lt'))
A:sympy.physics.quantum.cg.(a, alpha, c, lt)->map(Wild, ('a', 'alpha', 'c', 'lt'))
A:sympy.physics.quantum.cg.(a, alpha, alphap, b, beta, betap, c, gamma, lt)->map(Wild, ('a', 'alpha', 'alphap', 'b', 'beta', 'betap', 'c', 'gamma', 'lt'))
A:sympy.physics.quantum.cg.x->abs(a - b)
A:sympy.physics.quantum.cg.y->abs(alpha + beta)
A:sympy.physics.quantum.cg.(term_list, other1)->_check_cg_simp(expr, simp, sign, lt, term_list, (a, alpha, b, beta, c, gamma, lt), (a, alpha, b, beta), build_expr, index_expr)
A:sympy.physics.quantum.cg.(term_list, other2)->_check_cg_simp(expr, simp, sign, lt, term_list, (a, alpha, b, beta, c, gamma, lt), (a, alpha, b, beta), build_expr, index_expr)
A:sympy.physics.quantum.cg.(term_list, other3)->_check_cg_simp(expr, simp, sign, S.One, term_list, (a, alpha, alphap, b, beta, betap, c, gamma), (a, alpha, alphap, b, beta, betap), build_expr, index_expr)
A:sympy.physics.quantum.cg.(term_list, other4)->_check_cg_simp(expr, simp, sign, S.One, term_list, (a, alpha, alphap, b, beta, betap, c, gamma), (a, alpha, alphap, b, beta, betap), build_expr, index_expr)
A:sympy.physics.quantum.cg.sub_1->_check_cg(term_list[i], expr, len(variables))
A:sympy.physics.quantum.cg.sub_2->_check_cg(term_list[j], expr.subs(sub_dep), len(variables) - len(dep_variables), sign=(sign.subs(sub_1), sign.subs(sub_dep)))
A:sympy.physics.quantum.cg.min_lt->min(*[abs(term[2]) for term in cg_index])
A:sympy.physics.quantum.cg.matches->cg_term.match(expr)
A:sympy.physics.quantum.cg.a->Wild('a')
A:sympy.physics.quantum.cg.alpha->symbols('alpha')
A:sympy.physics.quantum.cg.b->Wild('b')
A:sympy.physics.quantum.cg.match->_check_varsh_sum_872_4(e).match(Sum((-1) ** (a - alpha) * CG(a, alpha, a, -alpha, c, 0), (alpha, -a, a)))
A:sympy.physics.quantum.cg.c->Wild('c')
A:sympy.physics.quantum.cg.beta->symbols('beta')
A:sympy.physics.quantum.cg.cp->Wild('cp')
A:sympy.physics.quantum.cg.gamma->Wild('gamma')
A:sympy.physics.quantum.cg.gammap->Wild('gammap')
A:sympy.physics.quantum.cg.cg1->CG(a, alpha, b, beta, c, gamma)
A:sympy.physics.quantum.cg.cg2->CG(a, alpha, b, beta, cp, gammap)
A:sympy.physics.quantum.cg.match1->_check_varsh_sum_872_4(e).match(Sum(cg1 * cg2, (alpha, -a, a), (beta, -b, b)))
A:sympy.physics.quantum.cg.match2->_check_varsh_sum_872_4(e).match(Sum(cg1 ** 2, (alpha, -a, a), (beta, -b, b)))
sympy.physics.quantum.cg.CG(Wigner3j)
sympy.physics.quantum.cg.CG._latex(self,printer,*args)
sympy.physics.quantum.cg.CG._pretty(self,printer,*args)
sympy.physics.quantum.cg.CG.doit(self,**hints)
sympy.physics.quantum.cg.Wigner3j(cls,j1,m1,j2,m2,j3,m3)
sympy.physics.quantum.cg.Wigner3j._latex(self,printer,*args)
sympy.physics.quantum.cg.Wigner3j._pretty(self,printer,*args)
sympy.physics.quantum.cg.Wigner3j.doit(self,**hints)
sympy.physics.quantum.cg.Wigner3j.is_symbolic(self)
sympy.physics.quantum.cg.Wigner3j.j1(self)
sympy.physics.quantum.cg.Wigner3j.j2(self)
sympy.physics.quantum.cg.Wigner3j.j3(self)
sympy.physics.quantum.cg.Wigner3j.m1(self)
sympy.physics.quantum.cg.Wigner3j.m2(self)
sympy.physics.quantum.cg.Wigner3j.m3(self)
sympy.physics.quantum.cg.Wigner6j(cls,j1,j2,j12,j3,j,j23)
sympy.physics.quantum.cg.Wigner6j._latex(self,printer,*args)
sympy.physics.quantum.cg.Wigner6j._pretty(self,printer,*args)
sympy.physics.quantum.cg.Wigner6j.doit(self,**hints)
sympy.physics.quantum.cg.Wigner6j.is_symbolic(self)
sympy.physics.quantum.cg.Wigner6j.j(self)
sympy.physics.quantum.cg.Wigner6j.j1(self)
sympy.physics.quantum.cg.Wigner6j.j12(self)
sympy.physics.quantum.cg.Wigner6j.j2(self)
sympy.physics.quantum.cg.Wigner6j.j23(self)
sympy.physics.quantum.cg.Wigner6j.j3(self)
sympy.physics.quantum.cg.Wigner9j(cls,j1,j2,j12,j3,j4,j34,j13,j24,j)
sympy.physics.quantum.cg.Wigner9j._latex(self,printer,*args)
sympy.physics.quantum.cg.Wigner9j._pretty(self,printer,*args)
sympy.physics.quantum.cg.Wigner9j.doit(self,**hints)
sympy.physics.quantum.cg.Wigner9j.is_symbolic(self)
sympy.physics.quantum.cg.Wigner9j.j(self)
sympy.physics.quantum.cg.Wigner9j.j1(self)
sympy.physics.quantum.cg.Wigner9j.j12(self)
sympy.physics.quantum.cg.Wigner9j.j13(self)
sympy.physics.quantum.cg.Wigner9j.j2(self)
sympy.physics.quantum.cg.Wigner9j.j24(self)
sympy.physics.quantum.cg.Wigner9j.j3(self)
sympy.physics.quantum.cg.Wigner9j.j34(self)
sympy.physics.quantum.cg.Wigner9j.j4(self)
sympy.physics.quantum.cg._cg_list(term)
sympy.physics.quantum.cg._cg_simp_add(e)
sympy.physics.quantum.cg._cg_simp_sum(e)
sympy.physics.quantum.cg._check_cg(cg_term,expr,length,sign=None)
sympy.physics.quantum.cg._check_cg_simp(expr,simp,sign,lt,term_list,variables,dep_variables,build_index_expr,index_expr)
sympy.physics.quantum.cg._check_varsh_871_1(term_list)
sympy.physics.quantum.cg._check_varsh_871_2(term_list)
sympy.physics.quantum.cg._check_varsh_872_9(term_list)
sympy.physics.quantum.cg._check_varsh_sum_871_1(e)
sympy.physics.quantum.cg._check_varsh_sum_871_2(e)
sympy.physics.quantum.cg._check_varsh_sum_872_4(e)
sympy.physics.quantum.cg.cg_simp(e)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/cartesian.py----------------------------------------
A:sympy.physics.quantum.cartesian.states->basis._enumerate_state(2, start_index=index)
A:sympy.physics.quantum.cartesian.d->DifferentialOperator(coord1)
A:sympy.physics.quantum.cartesian.delta->DiracDelta(coord1 - coord2)
A:sympy.physics.quantum.cartesian.X->XOp('X')
A:sympy.physics.quantum.cartesian.Y->YOp('Y')
A:sympy.physics.quantum.cartesian.Z->ZOp('Z')
A:sympy.physics.quantum.cartesian.Px->PxOp('Px')
A:sympy.physics.quantum.cartesian.index_list->list(range(start_index, start_index + num_states))
A:sympy.physics.quantum.cartesian.start_index->options.pop('start_index', 1)
A:sympy.physics.quantum.cartesian.enum_states[i]->state_class(str(label) + '_' + str(ind), **options)
sympy.physics.quantum.cartesian.PositionBra3D(Bra,PositionState3D)
sympy.physics.quantum.cartesian.PositionBra3D.dual_class(self)
sympy.physics.quantum.cartesian.PositionKet3D(Ket,PositionState3D)
sympy.physics.quantum.cartesian.PositionKet3D._eval_innerproduct_PositionBra3D(self,bra,**options)
sympy.physics.quantum.cartesian.PositionKet3D.dual_class(self)
sympy.physics.quantum.cartesian.PositionState3D(State)
sympy.physics.quantum.cartesian.PositionState3D._operators_to_state(self,op,**options)
sympy.physics.quantum.cartesian.PositionState3D._state_to_operators(self,op_class,**options)
sympy.physics.quantum.cartesian.PositionState3D.default_args(self)
sympy.physics.quantum.cartesian.PositionState3D.position_x(self)
sympy.physics.quantum.cartesian.PositionState3D.position_y(self)
sympy.physics.quantum.cartesian.PositionState3D.position_z(self)
sympy.physics.quantum.cartesian.PxBra(Bra)
sympy.physics.quantum.cartesian.PxBra.default_args(self)
sympy.physics.quantum.cartesian.PxBra.dual_class(self)
sympy.physics.quantum.cartesian.PxBra.momentum(self)
sympy.physics.quantum.cartesian.PxKet(Ket)
sympy.physics.quantum.cartesian.PxKet._enumerate_state(self,*args,**options)
sympy.physics.quantum.cartesian.PxKet._eval_innerproduct_PxBra(self,bra,**hints)
sympy.physics.quantum.cartesian.PxKet._eval_innerproduct_XBra(self,bra,**hints)
sympy.physics.quantum.cartesian.PxKet._operators_to_state(self,op,**options)
sympy.physics.quantum.cartesian.PxKet._state_to_operators(self,op_class,**options)
sympy.physics.quantum.cartesian.PxKet.default_args(self)
sympy.physics.quantum.cartesian.PxKet.dual_class(self)
sympy.physics.quantum.cartesian.PxKet.momentum(self)
sympy.physics.quantum.cartesian.PxOp(HermitianOperator)
sympy.physics.quantum.cartesian.PxOp._apply_operator_PxKet(self,ket,**options)
sympy.physics.quantum.cartesian.PxOp._eval_hilbert_space(self,args)
sympy.physics.quantum.cartesian.PxOp._represent_XKet(self,basis,*,index=1,**options)
sympy.physics.quantum.cartesian.PxOp.default_args(self)
sympy.physics.quantum.cartesian.XBra(Bra)
sympy.physics.quantum.cartesian.XBra.default_args(self)
sympy.physics.quantum.cartesian.XBra.dual_class(self)
sympy.physics.quantum.cartesian.XBra.position(self)
sympy.physics.quantum.cartesian.XKet(Ket)
sympy.physics.quantum.cartesian.XKet._enumerate_state(self,num_states,**options)
sympy.physics.quantum.cartesian.XKet._eval_innerproduct_PxBra(self,bra,**hints)
sympy.physics.quantum.cartesian.XKet._eval_innerproduct_XBra(self,bra,**hints)
sympy.physics.quantum.cartesian.XKet._operators_to_state(self,op,**options)
sympy.physics.quantum.cartesian.XKet._state_to_operators(self,op_class,**options)
sympy.physics.quantum.cartesian.XKet.default_args(self)
sympy.physics.quantum.cartesian.XKet.dual_class(self)
sympy.physics.quantum.cartesian.XKet.position(self)
sympy.physics.quantum.cartesian.XOp(HermitianOperator)
sympy.physics.quantum.cartesian.XOp._apply_operator_PositionKet3D(self,ket,**options)
sympy.physics.quantum.cartesian.XOp._apply_operator_XKet(self,ket,**options)
sympy.physics.quantum.cartesian.XOp._eval_commutator_PxOp(self,other)
sympy.physics.quantum.cartesian.XOp._eval_hilbert_space(self,args)
sympy.physics.quantum.cartesian.XOp._represent_PxKet(self,basis,*,index=1,**options)
sympy.physics.quantum.cartesian.XOp.default_args(self)
sympy.physics.quantum.cartesian.YOp(HermitianOperator)
sympy.physics.quantum.cartesian.YOp._apply_operator_PositionKet3D(self,ket,**options)
sympy.physics.quantum.cartesian.YOp._eval_hilbert_space(self,args)
sympy.physics.quantum.cartesian.YOp.default_args(self)
sympy.physics.quantum.cartesian.ZOp(HermitianOperator)
sympy.physics.quantum.cartesian.ZOp._apply_operator_PositionKet3D(self,ket,**options)
sympy.physics.quantum.cartesian.ZOp._eval_hilbert_space(self,args)
sympy.physics.quantum.cartesian.ZOp.default_args(self)
sympy.physics.quantum.cartesian._enumerate_continuous_1D(*args,**options)
sympy.physics.quantum.cartesian._lowercase_labels(ops)
sympy.physics.quantum.cartesian._uppercase_labels(ops)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/operatorordering.py----------------------------------------
A:sympy.physics.quantum.operatorordering.factors->_expand_powers(product)
A:sympy.physics.quantum.operatorordering.c->AntiCommutator(factors[n], factors[n + 1])
A:sympy.physics.quantum.operatorordering.expr->Mul(*new_factors).expand()
A:sympy.physics.quantum.operatorordering.new_term->_normal_order_factor(term, recursive_limit=recursive_limit, _recursive_depth=_recursive_depth)
sympy.physics.quantum.operatorordering._expand_powers(factors)
sympy.physics.quantum.operatorordering._normal_order_factor(product,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering._normal_order_terms(expr,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering._normal_ordered_form_factor(product,independent=False,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering._normal_ordered_form_terms(expr,independent=False,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering.normal_order(expr,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering.normal_ordered_form(expr,independent=False,recursive_limit=10,_recursive_depth=0)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/qapply.py----------------------------------------
A:sympy.physics.quantum.qapply.dagger->options.get('dagger', False)
A:sympy.physics.quantum.qapply.e->e.expand(commutator=True, tensorproduct=True).expand(commutator=True, tensorproduct=True)
A:sympy.physics.quantum.qapply.(c_part, nc_part)->e.expand(commutator=True, tensorproduct=True).expand(commutator=True, tensorproduct=True).args_cnc()
A:sympy.physics.quantum.qapply.c_mul->Mul(*c_part)
A:sympy.physics.quantum.qapply.nc_mul->Mul(*nc_part)
A:sympy.physics.quantum.qapply.ip_doit->options.get('ip_doit', True)
A:sympy.physics.quantum.qapply.args->list(e.args)
A:sympy.physics.quantum.qapply.rhs->list(e.args).pop()
A:sympy.physics.quantum.qapply.lhs->list(e.args).pop()
A:sympy.physics.quantum.qapply.comm->list(e.args).pop().doit()
A:sympy.physics.quantum.qapply.result->result.doit().doit()
sympy.physics.quantum.qapply(e,**options)
sympy.physics.quantum.qapply.qapply(e,**options)
sympy.physics.quantum.qapply.qapply_Mul(e,**options)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/innerproduct.py----------------------------------------
A:sympy.physics.quantum.innerproduct.obj->sympy.core.expr.Expr.__new__(cls, bra, ket)
A:sympy.physics.quantum.innerproduct.sbra->printer._print(self.bra)
A:sympy.physics.quantum.innerproduct.sket->printer._print(self.ket)
A:sympy.physics.quantum.innerproduct.bra->self.bra._print_contents_pretty(printer, *args)
A:sympy.physics.quantum.innerproduct.ket->printer._print(self.ket, *args)
A:sympy.physics.quantum.innerproduct.height->max(bra.height(), ket.height())
A:sympy.physics.quantum.innerproduct.(lbracket, _)->self.bra._pretty_brackets(height, use_unicode)
A:sympy.physics.quantum.innerproduct.(cbracket, rbracket)->self.ket._pretty_brackets(height, use_unicode)
A:sympy.physics.quantum.innerproduct.pform->prettyForm(*pform.right(rbracket))
A:sympy.physics.quantum.innerproduct.bra_label->self.bra._print_contents_latex(printer, *args)
A:sympy.physics.quantum.innerproduct.r->conjugate(self.bra.dual._eval_innerproduct(self.ket.dual, **hints))
sympy.physics.quantum.InnerProduct(cls,bra,ket)
sympy.physics.quantum.innerproduct.InnerProduct(cls,bra,ket)
sympy.physics.quantum.innerproduct.InnerProduct._eval_conjugate(self)
sympy.physics.quantum.innerproduct.InnerProduct._latex(self,printer,*args)
sympy.physics.quantum.innerproduct.InnerProduct._pretty(self,printer,*args)
sympy.physics.quantum.innerproduct.InnerProduct._sympyrepr(self,printer,*args)
sympy.physics.quantum.innerproduct.InnerProduct._sympystr(self,printer,*args)
sympy.physics.quantum.innerproduct.InnerProduct.bra(self)
sympy.physics.quantum.innerproduct.InnerProduct.doit(self,**hints)
sympy.physics.quantum.innerproduct.InnerProduct.ket(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/boson.py----------------------------------------
A:sympy.physics.quantum.boson.args1->tuple((arg for arg in other.args if arg.is_commutative))
A:sympy.physics.quantum.boson.args2->tuple((arg for arg in other.args if not arg.is_commutative))
A:sympy.physics.quantum.boson.pform->printer._print(self.args[0], *args)
sympy.physics.quantum.boson.BosonCoherentBra(cls,alpha)
sympy.physics.quantum.boson.BosonCoherentBra._apply_operator_BosonOp(self,op,**options)
sympy.physics.quantum.boson.BosonCoherentBra.alpha(self)
sympy.physics.quantum.boson.BosonCoherentBra.dual_class(self)
sympy.physics.quantum.boson.BosonCoherentKet(cls,alpha)
sympy.physics.quantum.boson.BosonCoherentKet._apply_from_right_to_BosonOp(self,op,**options)
sympy.physics.quantum.boson.BosonCoherentKet._eval_hilbert_space(cls,label)
sympy.physics.quantum.boson.BosonCoherentKet._eval_innerproduct_BosonCoherentBra(self,bra,**hints)
sympy.physics.quantum.boson.BosonCoherentKet.alpha(self)
sympy.physics.quantum.boson.BosonCoherentKet.dual_class(self)
sympy.physics.quantum.boson.BosonFockBra(cls,n)
sympy.physics.quantum.boson.BosonFockBra._eval_hilbert_space(cls,label)
sympy.physics.quantum.boson.BosonFockBra.dual_class(self)
sympy.physics.quantum.boson.BosonFockBra.n(self)
sympy.physics.quantum.boson.BosonFockKet(cls,n)
sympy.physics.quantum.boson.BosonFockKet._apply_from_right_to_BosonOp(self,op,**options)
sympy.physics.quantum.boson.BosonFockKet._eval_hilbert_space(cls,label)
sympy.physics.quantum.boson.BosonFockKet._eval_innerproduct_BosonFockBra(self,bra,**hints)
sympy.physics.quantum.boson.BosonFockKet.dual_class(self)
sympy.physics.quantum.boson.BosonFockKet.n(self)
sympy.physics.quantum.boson.BosonOp(cls,*args,**hints)
sympy.physics.quantum.boson.BosonOp.__mul__(self,other)
sympy.physics.quantum.boson.BosonOp._eval_adjoint(self)
sympy.physics.quantum.boson.BosonOp._eval_anticommutator_BosonOp(self,other,**hints)
sympy.physics.quantum.boson.BosonOp._eval_commutator_BosonOp(self,other,**hints)
sympy.physics.quantum.boson.BosonOp._eval_commutator_FermionOp(self,other,**hints)
sympy.physics.quantum.boson.BosonOp._print_contents(self,printer,*args)
sympy.physics.quantum.boson.BosonOp._print_contents_latex(self,printer,*args)
sympy.physics.quantum.boson.BosonOp._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.boson.BosonOp.default_args(self)
sympy.physics.quantum.boson.BosonOp.is_annihilation(self)
sympy.physics.quantum.boson.BosonOp.name(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/qexpr.py----------------------------------------
A:sympy.physics.quantum.qexpr.args->cls._eval_args(tuple(cls.default_args()), **kwargs)
A:sympy.physics.quantum.qexpr.inst->sympy.core.expr.Expr.__new__(cls, *args)
A:sympy.physics.quantum.qexpr.inst.hilbert_space->cls._eval_hilbert_space(args)
A:sympy.physics.quantum.qexpr.obj->sympy.core.expr.Expr.__new__(Dagger, self)
A:sympy.physics.quantum.qexpr.pform->self._print_contents_pretty(printer, *args)
A:sympy.physics.quantum.qexpr.top->prettyForm(*b.left(' ' * a.width()))
A:sympy.physics.quantum.qexpr.bot->prettyForm(*a.right(' ' * b.width()))
A:sympy.physics.quantum.qexpr.label->self._print_label_repr(printer, *args)
A:sympy.physics.quantum.qexpr.result->f(arg, **options)
A:sympy.physics.quantum.qexpr.format->options.get('format', 'sympy')
A:sympy.physics.quantum.qexpr.(c_part, nc_part)->e.args_cnc()
A:sympy.physics.quantum.qexpr.c_part->list(c_part)
A:sympy.physics.quantum.qexpr.f->getattr(self, method_name)
sympy.physics.quantum.qexpr.QExpr(cls,*args,**kwargs)
sympy.physics.quantum.qexpr.QExpr._eval_adjoint(self)
sympy.physics.quantum.qexpr.QExpr._eval_args(cls,args)
sympy.physics.quantum.qexpr.QExpr._eval_hilbert_space(cls,args)
sympy.physics.quantum.qexpr.QExpr._format_represent(self,result,format)
sympy.physics.quantum.qexpr.QExpr._latex(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._new_rawargs(cls,hilbert_space,*args,**old_assumptions)
sympy.physics.quantum.qexpr.QExpr._pretty(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_contents(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_contents_latex(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_label(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_label_latex(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_label_pretty(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_label_repr(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_parens_pretty(self,pform,left='(',right=')')
sympy.physics.quantum.qexpr.QExpr._print_sequence(self,seq,sep,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_sequence_pretty(self,seq,sep,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_subscript_pretty(self,a,b)
sympy.physics.quantum.qexpr.QExpr._print_superscript_pretty(self,a,b)
sympy.physics.quantum.qexpr.QExpr._represent(self,*,basis=None,**options)
sympy.physics.quantum.qexpr.QExpr._represent_default_basis(self,**options)
sympy.physics.quantum.qexpr.QExpr._sympyrepr(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._sympystr(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr.default_args(self)
sympy.physics.quantum.qexpr.QExpr.free_symbols(self)
sympy.physics.quantum.qexpr.QExpr.is_symbolic(self)
sympy.physics.quantum.qexpr.QExpr.label(self)
sympy.physics.quantum.qexpr.QuantumError(Exception)
sympy.physics.quantum.qexpr.__qsympify_sequence_helper(seq)
sympy.physics.quantum.qexpr._qsympify_sequence(seq)
sympy.physics.quantum.qexpr.dispatch_method(self,basename,arg,**options)
sympy.physics.quantum.qexpr.split_commutative_parts(e)
sympy.physics.quantum.qexpr.split_qexpr_parts(e)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/identitysearch.py----------------------------------------
A:sympy.physics.quantum.identitysearch.np->import_module('numpy')
A:sympy.physics.quantum.identitysearch.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.identitysearch.matrix->represent(Mul(*circuit), nqubits=nqubits)
A:sympy.physics.quantum.identitysearch.dense_matrix->represent(Mul(*circuit), nqubits=nqubits).todense().getA()
A:sympy.physics.quantum.identitysearch.bool_real->import_module('numpy').logical_and(dense_matrix.real > -eps, dense_matrix.real < eps)
A:sympy.physics.quantum.identitysearch.bool_imag->import_module('numpy').logical_and(dense_matrix.imag > -eps, dense_matrix.imag < eps)
A:sympy.physics.quantum.identitysearch.corrected_real->import_module('numpy').where(bool_real, 0.0, dense_matrix.real)
A:sympy.physics.quantum.identitysearch.corrected_imag->import_module('numpy').where(bool_imag, 0.0, dense_matrix.imag)
A:sympy.physics.quantum.identitysearch.is_diagonal->bool_indices.all()
A:sympy.physics.quantum.identitysearch.trace_of_corrected->(corrected_dense / first_element).trace()
A:sympy.physics.quantum.identitysearch.expected_trace->pow(2, nqubits)
A:sympy.physics.quantum.identitysearch.matrix_trace->represent(Mul(*circuit), nqubits=nqubits).trace()
A:sympy.physics.quantum.identitysearch.ll_gate_is_unitary->is_scalar_matrix((Dagger(ll_gate), ll_gate), _get_min_qubits(ll_gate), True)
A:sympy.physics.quantum.identitysearch.lr_gate_is_unitary->is_scalar_matrix((Dagger(lr_gate), lr_gate), _get_min_qubits(lr_gate), True)
A:sympy.physics.quantum.identitysearch.rl_gate_is_unitary->is_scalar_matrix((Dagger(rl_gate), rl_gate), _get_min_qubits(rl_gate), True)
A:sympy.physics.quantum.identitysearch.rr_gate_is_unitary->is_scalar_matrix((Dagger(rr_gate), rr_gate), _get_min_qubits(rr_gate), True)
A:sympy.physics.quantum.identitysearch.queue->deque([()])
A:sympy.physics.quantum.identitysearch.rules->set()
A:sympy.physics.quantum.identitysearch.max_ops->len(gate_seq)
A:sympy.physics.quantum.identitysearch.(left, right, ops)->deque([()]).popleft()
A:sympy.physics.quantum.identitysearch.new_rule->rr_op(left, right)
A:sympy.physics.quantum.identitysearch.mul_rules->set()
A:sympy.physics.quantum.identitysearch.eq_ids->set(map(convert_to_mul, eq_ids))
A:sympy.physics.quantum.identitysearch.gate_rules->generate_gate_rules(gate_seq)
A:sympy.physics.quantum.identitysearch.obj->sympy.core.basic.Basic.__new__(cls, *args)
A:sympy.physics.quantum.identitysearch.obj._circuit->Mul(*args)
A:sympy.physics.quantum.identitysearch.obj._rules->generate_gate_rules(args)
A:sympy.physics.quantum.identitysearch.obj._eq_ids->generate_equivalent_ids(args)
A:sympy.physics.quantum.identitysearch.max_depth->len(gate_list)
A:sympy.physics.quantum.identitysearch.ids->set()
A:sympy.physics.quantum.identitysearch.current_circuit->deque([()]).popleft()
A:sympy.physics.quantum.identitysearch.circuit_reducible->is_reducible(new_circuit, nqubits, 1, len(new_circuit))
A:sympy.physics.quantum.identitysearch.gate_size->len(gate_list)
A:sympy.physics.quantum.identitysearch.is_scalar->is_scalar_matrix(circuit, nqubits, False)
sympy.physics.quantum.identitysearch.GateIdentity(cls,*args)
sympy.physics.quantum.identitysearch.GateIdentity.__str__(self)
sympy.physics.quantum.identitysearch.GateIdentity.circuit(self)
sympy.physics.quantum.identitysearch.GateIdentity.equivalent_ids(self)
sympy.physics.quantum.identitysearch.GateIdentity.gate_rules(self)
sympy.physics.quantum.identitysearch.GateIdentity.sequence(self)
sympy.physics.quantum.identitysearch._get_min_qubits(a_gate)
sympy.physics.quantum.identitysearch.bfs_identity_search(gate_list,nqubits,max_depth=None,identity_only=False)
sympy.physics.quantum.identitysearch.generate_equivalent_ids(gate_seq,return_as_muls=False)
sympy.physics.quantum.identitysearch.generate_gate_rules(gate_seq,return_as_muls=False)
sympy.physics.quantum.identitysearch.is_degenerate(identity_set,gate_identity)
sympy.physics.quantum.identitysearch.is_reducible(circuit,nqubits,begin,end)
sympy.physics.quantum.identitysearch.is_scalar_nonsparse_matrix(circuit,nqubits,identity_only,eps=None)
sympy.physics.quantum.identitysearch.is_scalar_sparse_matrix(circuit,nqubits,identity_only,eps=1e-11)
sympy.physics.quantum.identitysearch.ll_op(left,right)
sympy.physics.quantum.identitysearch.lr_op(left,right)
sympy.physics.quantum.identitysearch.random_identity_search(gate_list,numgates,nqubits)
sympy.physics.quantum.identitysearch.rl_op(left,right)
sympy.physics.quantum.identitysearch.rr_op(left,right)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/commutator.py----------------------------------------
A:sympy.physics.quantum.commutator.r->cls.eval(A, B)
A:sympy.physics.quantum.commutator.obj->sympy.core.expr.Expr.__new__(cls, A, B)
A:sympy.physics.quantum.commutator.(ca, nca)->a.args_cnc()
A:sympy.physics.quantum.commutator.(cb, ncb)->Mul(*A.args[1:]).args_cnc()
A:sympy.physics.quantum.commutator.comm->A._eval_commutator(B, **hints)
A:sympy.physics.quantum.commutator.b->Mul(*A.args[1:])
A:sympy.physics.quantum.commutator.comm1->comm1._eval_expand_commutator()._eval_expand_commutator()
A:sympy.physics.quantum.commutator.comm2->comm2._eval_expand_commutator()._eval_expand_commutator()
A:sympy.physics.quantum.commutator.first->Mul(comm1, c)
A:sympy.physics.quantum.commutator.second->Mul(b, comm2)
A:sympy.physics.quantum.commutator.c->Mul(*B.args[1:])
A:sympy.physics.quantum.commutator.pform->prettyForm(*pform.parens(left='[', right=']'))
sympy.physics.quantum.Commutator(cls,A,B)
sympy.physics.quantum.commutator.Commutator(cls,A,B)
sympy.physics.quantum.commutator.Commutator._eval_adjoint(self)
sympy.physics.quantum.commutator.Commutator._eval_expand_commutator(self,**hints)
sympy.physics.quantum.commutator.Commutator._expand_pow(self,A,B,sign)
sympy.physics.quantum.commutator.Commutator._latex(self,printer,*args)
sympy.physics.quantum.commutator.Commutator._pretty(self,printer,*args)
sympy.physics.quantum.commutator.Commutator._sympyrepr(self,printer,*args)
sympy.physics.quantum.commutator.Commutator._sympystr(self,printer,*args)
sympy.physics.quantum.commutator.Commutator.doit(self,**hints)
sympy.physics.quantum.commutator.Commutator.eval(cls,a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/pauli.py----------------------------------------
A:sympy.physics.quantum.pauli.format->options.get('format', 'sympy')
A:sympy.physics.quantum.pauli.t->type(e)
A:sympy.physics.quantum.pauli.(c, nc)->e.args_cnc()
A:sympy.physics.quantum.pauli.curr->Mul(*nc1)
A:sympy.physics.quantum.pauli.x->nc.pop(0)
A:sympy.physics.quantum.pauli.y->_qsimplify_pauli_product(curr, x)
A:sympy.physics.quantum.pauli.(c1, nc1)->_qsimplify_pauli_product(curr, x).args_cnc()
sympy.physics.quantum.pauli.SigmaMinus(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaMinus._eval_anticommutator_SigmaPlus(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_anticommutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_anticommutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_anticommutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_commutator_SigmaMinus(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_commutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_commutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_commutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaMinus._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaMinus._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaMinus._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaOpBase(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaOpBase._eval_commutator_BosonOp(self,other,**hints)
sympy.physics.quantum.pauli.SigmaOpBase.default_args(self)
sympy.physics.quantum.pauli.SigmaOpBase.name(self)
sympy.physics.quantum.pauli.SigmaOpBase.use_name(self)
sympy.physics.quantum.pauli.SigmaPlus(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaPlus._eval_anticommutator_SigmaMinus(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_anticommutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_anticommutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_anticommutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_commutator_SigmaMinus(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_commutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_commutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_commutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_mul(self,other)
sympy.physics.quantum.pauli.SigmaPlus._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaPlus._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaPlus._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaPlus._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaX(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaX._eval_anticommutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_anticommutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_commutator_BosonOp(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_commutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_commutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaX._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaX._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaX._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaY(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaY._eval_anticommutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_anticommutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_commutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_commutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaY._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaY._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaY._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaZ(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaZ._eval_anticommutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_anticommutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_commutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_commutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaZ._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaZ._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaZ._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaZBra(cls,n)
sympy.physics.quantum.pauli.SigmaZBra.dual_class(self)
sympy.physics.quantum.pauli.SigmaZBra.n(self)
sympy.physics.quantum.pauli.SigmaZKet(cls,n)
sympy.physics.quantum.pauli.SigmaZKet._apply_from_right_to_SigmaMinus(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._apply_from_right_to_SigmaPlus(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._apply_from_right_to_SigmaX(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._apply_from_right_to_SigmaY(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._apply_from_right_to_SigmaZ(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._eval_hilbert_space(cls,label)
sympy.physics.quantum.pauli.SigmaZKet._eval_innerproduct_SigmaZBra(self,bra,**hints)
sympy.physics.quantum.pauli.SigmaZKet._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaZKet.dual_class(self)
sympy.physics.quantum.pauli.SigmaZKet.n(self)
sympy.physics.quantum.pauli._qsimplify_pauli_product(a,b)
sympy.physics.quantum.pauli.qsimplify_pauli(e)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/gate.py----------------------------------------
A:sympy.physics.quantum.gate.tandc->list(tandc)
A:sympy.physics.quantum.gate.args->Gate._eval_args(args)
A:sympy.physics.quantum.gate.target_matrix->self.get_target_matrix(format)
A:sympy.physics.quantum.gate.new_qubit->new_qubit.flip(target).flip(target)
A:sympy.physics.quantum.gate.format->options.get('format', 'sympy')
A:sympy.physics.quantum.gate.nqubits->int(nqubits)
A:sympy.physics.quantum.gate.m->represent_zbasis(controls, targets, target_matrix, nqubits, format)
A:sympy.physics.quantum.gate.label->self._print_label(printer, *args)
A:sympy.physics.quantum.gate.a->stringPict(self.gate_name)
A:sympy.physics.quantum.gate.b->self._print_label_pretty(printer, *args)
A:sympy.physics.quantum.gate.controls->self._print_sequence(self.controls, ',', printer, *args)
A:sympy.physics.quantum.gate.g1->CNotGate(i, j)
A:sympy.physics.quantum.gate.g2->CNotGate(j, i)
A:sympy.physics.quantum.gate.g3->HadamardGate(t)
A:sympy.physics.quantum.gate.g4->ZGate(t)
A:sympy.physics.quantum.gate.gate->printer._print(self.gate, *args)
A:sympy.physics.quantum.gate.gate_name->stringPict(self.gate_name)
A:sympy.physics.quantum.gate.first->self._print_subscript_pretty(gate_name, controls)
A:sympy.physics.quantum.gate.final->prettyForm(*first.right(gate))
A:sympy.physics.quantum.gate.min_wire->int(_min(self.targets))
A:sympy.physics.quantum.gate.max_wire->int(_max(self.targets))
A:sympy.physics.quantum.gate.targets->self._print_sequence(self.targets, ',', printer, *args)
A:sympy.physics.quantum.gate.mat->_sympify(mat)
A:sympy.physics.quantum.gate.min_target->_min(targets)
A:sympy.physics.quantum.gate.max_target->_max(targets)
A:sympy.physics.quantum.gate.op01->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('op01', format)
A:sympy.physics.quantum.gate.op10->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('op10', format)
A:sympy.physics.quantum.gate.op11->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('op11', format)
A:sympy.physics.quantum.gate.op00->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('op00', format)
A:sympy.physics.quantum.gate.eye2->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('eye2', format)
A:sympy.physics.quantum.gate.new_result->matrix_tensor_product(*product)
A:sympy.physics.quantum.gate.circuit->Mul(*new_args)
A:sympy.physics.quantum.gate.(b, e)->Mul(*new_args).as_base_exp()
A:sympy.physics.quantum.gate.(first_base, first_exp)->circ_array[i].as_base_exp()
A:sympy.physics.quantum.gate.(second_base, second_exp)->circ_array[i + 1].as_base_exp()
A:sympy.physics.quantum.gate.qubit_space->range(nqubits)
A:sympy.physics.quantum.gate.g->g(qubit)
A:sympy.physics.quantum.gate.qubits->random.sample(qubit_space, 2)
A:sympy.physics.quantum.gate.qubit->random.choice(qubit_space)
sympy.physics.quantum.gate.CGate(Gate)
sympy.physics.quantum.gate.CGate._eval_args(cls,args)
sympy.physics.quantum.gate.CGate._eval_dagger(self)
sympy.physics.quantum.gate.CGate._eval_hilbert_space(cls,args)
sympy.physics.quantum.gate.CGate._eval_inverse(self)
sympy.physics.quantum.gate.CGate._eval_power(self,exp)
sympy.physics.quantum.gate.CGate._latex(self,printer,*args)
sympy.physics.quantum.gate.CGate._pretty(self,printer,*args)
sympy.physics.quantum.gate.CGate._print_label(self,printer,*args)
sympy.physics.quantum.gate.CGate.controls(self)
sympy.physics.quantum.gate.CGate.decompose(self,**options)
sympy.physics.quantum.gate.CGate.eval_controls(self,qubit)
sympy.physics.quantum.gate.CGate.gate(self)
sympy.physics.quantum.gate.CGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.CGate.min_qubits(self)
sympy.physics.quantum.gate.CGate.nqubits(self)
sympy.physics.quantum.gate.CGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.CGate.targets(self)
sympy.physics.quantum.gate.CGateS(CGate)
sympy.physics.quantum.gate.CNotGate(HermitianOperator,CGate,TwoQubitGate)
sympy.physics.quantum.gate.CNotGate._eval_args(cls,args)
sympy.physics.quantum.gate.CNotGate._eval_commutator_CNotGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_commutator_PhaseGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_commutator_TGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_commutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_hilbert_space(cls,args)
sympy.physics.quantum.gate.CNotGate._latex(self,printer,*args)
sympy.physics.quantum.gate.CNotGate._pretty(self,printer,*args)
sympy.physics.quantum.gate.CNotGate._print_label(self,printer,*args)
sympy.physics.quantum.gate.CNotGate.controls(self)
sympy.physics.quantum.gate.CNotGate.gate(self)
sympy.physics.quantum.gate.CNotGate.min_qubits(self)
sympy.physics.quantum.gate.CNotGate.targets(self)
sympy.physics.quantum.gate.CPHASE(a,b)
sympy.physics.quantum.gate.Gate(UnitaryOperator)
sympy.physics.quantum.gate.Gate._apply_operator_IntQubit(self,qubits,**options)
sympy.physics.quantum.gate.Gate._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.gate.Gate._eval_args(cls,args)
sympy.physics.quantum.gate.Gate._eval_hilbert_space(cls,args)
sympy.physics.quantum.gate.Gate._latex(self,printer,*args)
sympy.physics.quantum.gate.Gate._pretty(self,printer,*args)
sympy.physics.quantum.gate.Gate._represent_ZGate(self,basis,**options)
sympy.physics.quantum.gate.Gate._represent_default_basis(self,**options)
sympy.physics.quantum.gate.Gate._sympystr(self,printer,*args)
sympy.physics.quantum.gate.Gate.gate_name_plot(self)
sympy.physics.quantum.gate.Gate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.Gate.min_qubits(self)
sympy.physics.quantum.gate.Gate.nqubits(self)
sympy.physics.quantum.gate.Gate.plot_gate(self,axes,gate_idx,gate_grid,wire_grid)
sympy.physics.quantum.gate.Gate.targets(self)
sympy.physics.quantum.gate.HadamardGate(HermitianOperator,OneQubitGate)
sympy.physics.quantum.gate.HadamardGate._eval_anticommutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_anticommutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_anticommutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_commutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_commutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.IdentityGate(OneQubitGate)
sympy.physics.quantum.gate.IdentityGate._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.gate.IdentityGate._eval_anticommutator(self,other,**hints)
sympy.physics.quantum.gate.IdentityGate._eval_commutator(self,other,**hints)
sympy.physics.quantum.gate.IdentityGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.OneQubitGate(Gate)
sympy.physics.quantum.gate.OneQubitGate._eval_anticommutator(self,other,**hints)
sympy.physics.quantum.gate.OneQubitGate._eval_commutator(self,other,**hints)
sympy.physics.quantum.gate.OneQubitGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.PhaseGate(OneQubitGate)
sympy.physics.quantum.gate.PhaseGate._eval_commutator_TGate(self,other,**hints)
sympy.physics.quantum.gate.PhaseGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.PhaseGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.SwapGate(TwoQubitGate)
sympy.physics.quantum.gate.SwapGate._represent_ZGate(self,basis,**options)
sympy.physics.quantum.gate.SwapGate.decompose(self,**options)
sympy.physics.quantum.gate.SwapGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.SwapGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.TGate(OneQubitGate)
sympy.physics.quantum.gate.TGate._eval_commutator_PhaseGate(self,other,**hints)
sympy.physics.quantum.gate.TGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.TGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.TwoQubitGate(Gate)
sympy.physics.quantum.gate.UGate(Gate)
sympy.physics.quantum.gate.UGate._eval_args(cls,args)
sympy.physics.quantum.gate.UGate._eval_hilbert_space(cls,args)
sympy.physics.quantum.gate.UGate._latex(self,printer,*args)
sympy.physics.quantum.gate.UGate._pretty(self,printer,*args)
sympy.physics.quantum.gate.UGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.UGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.UGate.targets(self)
sympy.physics.quantum.gate.XGate(HermitianOperator,OneQubitGate)
sympy.physics.quantum.gate.XGate._eval_anticommutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.XGate._eval_anticommutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.XGate._eval_anticommutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.XGate._eval_commutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.XGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.XGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.XGate.plot_gate_plus(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.YGate(HermitianOperator,OneQubitGate)
sympy.physics.quantum.gate.YGate._eval_anticommutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.YGate._eval_anticommutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.YGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.YGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.ZGate(HermitianOperator,OneQubitGate)
sympy.physics.quantum.gate.ZGate._eval_anticommutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.ZGate._eval_commutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.ZGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate._max(*args,**kwargs)
sympy.physics.quantum.gate._min(*args,**kwargs)
sympy.physics.quantum.gate._validate_targets_controls(tandc)
sympy.physics.quantum.gate.gate_simp(circuit)
sympy.physics.quantum.gate.gate_sort(circuit)
sympy.physics.quantum.gate.normalized(normalize)
sympy.physics.quantum.gate.random_circuit(ngates,nqubits,gate_space=(X,Y,Z,S,T,H,CNOT,SWAP))
sympy.physics.quantum.gate.represent_zbasis(controls,targets,target_matrix,nqubits,format='sympy')
sympy.physics.quantum.gate.zx_basis_transform(self,format='sympy')
sympy.physics.quantum.gate.zy_basis_transform(self,format='sympy')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/operator.py----------------------------------------
A:sympy.physics.quantum.operator.pform->prettyForm(*pform.right(label_pform))
A:sympy.physics.quantum.operator.label_pform->prettyForm(*label_pform.parens(left='(', right=')'))
A:sympy.physics.quantum.operator.format->options.get('format', 'sympy')
A:sympy.physics.quantum.operator.ket_expr->expand(args[0])
A:sympy.physics.quantum.operator.bra_expr->expand(args[1])
A:sympy.physics.quantum.operator.(ket_c, kets)->expand(args[0]).args_cnc()
A:sympy.physics.quantum.operator.(bra_c, bras)->expand(args[1]).args_cnc()
A:sympy.physics.quantum.operator.obj->sympy.core.expr.Expr.__new__(cls, *(kets[0], bras[0]), **old_assumptions)
A:sympy.physics.quantum.operator.k->self.ket._represent(**options)
A:sympy.physics.quantum.operator.b->self.bra._represent(**options)
A:sympy.physics.quantum.operator.new_expr->Derivative(self.expr, symbol)
sympy.physics.quantum.DifferentialOperator(Operator)
sympy.physics.quantum.HermitianOperator(Operator)
sympy.physics.quantum.IdentityOperator(self,*args,**hints)
sympy.physics.quantum.Operator(QExpr)
sympy.physics.quantum.OuterProduct(cls,*args,**old_assumptions)
sympy.physics.quantum.UnitaryOperator(Operator)
sympy.physics.quantum.operator.DifferentialOperator(Operator)
sympy.physics.quantum.operator.DifferentialOperator._apply_operator_Wavefunction(self,func,**options)
sympy.physics.quantum.operator.DifferentialOperator._eval_derivative(self,symbol)
sympy.physics.quantum.operator.DifferentialOperator._print(self,printer,*args)
sympy.physics.quantum.operator.DifferentialOperator._print_pretty(self,printer,*args)
sympy.physics.quantum.operator.DifferentialOperator.expr(self)
sympy.physics.quantum.operator.DifferentialOperator.free_symbols(self)
sympy.physics.quantum.operator.DifferentialOperator.function(self)
sympy.physics.quantum.operator.DifferentialOperator.variables(self)
sympy.physics.quantum.operator.HermitianOperator(Operator)
sympy.physics.quantum.operator.HermitianOperator._eval_inverse(self)
sympy.physics.quantum.operator.HermitianOperator._eval_power(self,exp)
sympy.physics.quantum.operator.IdentityOperator(self,*args,**hints)
sympy.physics.quantum.operator.IdentityOperator.__mul__(self,other)
sympy.physics.quantum.operator.IdentityOperator._apply_from_right_to(self,bra,**options)
sympy.physics.quantum.operator.IdentityOperator._apply_operator(self,ket,**options)
sympy.physics.quantum.operator.IdentityOperator._eval_adjoint(self)
sympy.physics.quantum.operator.IdentityOperator._eval_anticommutator(self,other,**hints)
sympy.physics.quantum.operator.IdentityOperator._eval_commutator(self,other,**hints)
sympy.physics.quantum.operator.IdentityOperator._eval_inverse(self)
sympy.physics.quantum.operator.IdentityOperator._eval_power(self,exp)
sympy.physics.quantum.operator.IdentityOperator._print_contents(self,printer,*args)
sympy.physics.quantum.operator.IdentityOperator._print_contents_latex(self,printer,*args)
sympy.physics.quantum.operator.IdentityOperator._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.operator.IdentityOperator._represent_default_basis(self,**options)
sympy.physics.quantum.operator.IdentityOperator.default_args(self)
sympy.physics.quantum.operator.IdentityOperator.dimension(self)
sympy.physics.quantum.operator.Operator(QExpr)
sympy.physics.quantum.operator.Operator.__mul__(self,other)
sympy.physics.quantum.operator.Operator._apply_operator(self,ket,**options)
sympy.physics.quantum.operator.Operator._eval_anticommutator(self,other,**options)
sympy.physics.quantum.operator.Operator._eval_commutator(self,other,**options)
sympy.physics.quantum.operator.Operator._eval_inverse(self)
sympy.physics.quantum.operator.Operator._print_contents(self,printer,*args)
sympy.physics.quantum.operator.Operator._print_contents_latex(self,printer,*args)
sympy.physics.quantum.operator.Operator._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.operator.Operator._print_operator_name(self,printer,*args)
sympy.physics.quantum.operator.Operator._print_operator_name_pretty(self,printer,*args)
sympy.physics.quantum.operator.Operator.default_args(self)
sympy.physics.quantum.operator.Operator.inverse(self)
sympy.physics.quantum.operator.Operator.matrix_element(self,*args)
sympy.physics.quantum.operator.OuterProduct(cls,*args,**old_assumptions)
sympy.physics.quantum.operator.OuterProduct._eval_adjoint(self)
sympy.physics.quantum.operator.OuterProduct._eval_trace(self,**kwargs)
sympy.physics.quantum.operator.OuterProduct._latex(self,printer,*args)
sympy.physics.quantum.operator.OuterProduct._pretty(self,printer,*args)
sympy.physics.quantum.operator.OuterProduct._represent(self,**options)
sympy.physics.quantum.operator.OuterProduct._sympyrepr(self,printer,*args)
sympy.physics.quantum.operator.OuterProduct._sympystr(self,printer,*args)
sympy.physics.quantum.operator.OuterProduct.bra(self)
sympy.physics.quantum.operator.OuterProduct.ket(self)
sympy.physics.quantum.operator.UnitaryOperator(Operator)
sympy.physics.quantum.operator.UnitaryOperator._eval_adjoint(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/represent.py----------------------------------------
A:sympy.physics.quantum.represent.format->options.get('format', 'sympy')
A:sympy.physics.quantum.represent.temp_basis->get_basis(expr, **options)
A:sympy.physics.quantum.represent.result->integrate(result, (coord, start, end))
A:sympy.physics.quantum.represent.(base, exp)->expr().as_base_exp()
A:sympy.physics.quantum.represent.exp->_sympy_to_scalar(exp)
A:sympy.physics.quantum.represent.base->inv(base.tocsc()).tocsr()
A:sympy.physics.quantum.represent.next_arg->represent(arg, **options)
A:sympy.physics.quantum.represent.basis->options.pop('basis', None)
A:sympy.physics.quantum.represent.basis_kets->enumerate_states(basis_state, options['index'], 2)
A:sympy.physics.quantum.represent.prod->InnerProduct(bra, ket)
A:sympy.physics.quantum.represent.basis_state->get_basis(expr, **options)
A:sympy.physics.quantum.represent.options['basis']->get_basis(orig_expr, **options)
A:sympy.physics.quantum.represent.unities->options.pop('unities', [])
A:sympy.physics.quantum.represent.kets->enumerate_states(basis, unities)
A:sympy.physics.quantum.represent.basis_op->state_to_operators(basis)
A:sympy.physics.quantum.represent.state_inst->operators_to_state(expr)
A:sympy.physics.quantum.represent.state->operators_to_state(basis)
A:sympy.physics.quantum.represent.expr->expr()
A:sympy.physics.quantum.represent.num_states->len(args[1])
A:sympy.physics.quantum.represent.ret->operators_to_state(basis)._enumerate_state(num_states, **options)
sympy.physics.quantum.enumerate_states(*args,**options)
sympy.physics.quantum.get_basis(expr,*,basis=None,replace_none=True,**options)
sympy.physics.quantum.integrate_result(orig_expr,result,**options)
sympy.physics.quantum.rep_expectation(expr,**options)
sympy.physics.quantum.rep_innerproduct(expr,**options)
sympy.physics.quantum.represent(expr,**options)
sympy.physics.quantum.represent._make_default(expr)
sympy.physics.quantum.represent._sympy_to_scalar(e)
sympy.physics.quantum.represent.enumerate_states(*args,**options)
sympy.physics.quantum.represent.get_basis(expr,*,basis=None,replace_none=True,**options)
sympy.physics.quantum.represent.integrate_result(orig_expr,result,**options)
sympy.physics.quantum.represent.rep_expectation(expr,**options)
sympy.physics.quantum.represent.rep_innerproduct(expr,**options)
sympy.physics.quantum.represent.represent(expr,**options)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/constants.py----------------------------------------
A:sympy.physics.quantum.constants.hbar->HBar()
sympy.physics.quantum.HBar(NumberSymbol,metaclass=Singleton)
sympy.physics.quantum.constants.HBar(NumberSymbol,metaclass=Singleton)
sympy.physics.quantum.constants.HBar._as_mpf_val(self,prec)
sympy.physics.quantum.constants.HBar._latex(self,printer,*args)
sympy.physics.quantum.constants.HBar._pretty(self,printer,*args)
sympy.physics.quantum.constants.HBar._sympyrepr(self,printer,*args)
sympy.physics.quantum.constants.HBar._sympystr(self,printer,*args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/circuitutils.py----------------------------------------
A:sympy.physics.quantum.circuitutils.end->len(circuit)
A:sympy.physics.quantum.circuitutils.table->kmp_table(subcircuit)
A:sympy.physics.quantum.circuitutils.loc->randrange(len(circuit) + 1)
A:sympy.physics.quantum.circuitutils.new_map[key]->sympify(mapping[key])
A:sympy.physics.quantum.circuitutils.index_gen->numbered_symbols(prefix='i', start=-1)
A:sympy.physics.quantum.circuitutils.cur_ndx->next(gen)
A:sympy.physics.quantum.circuitutils.ndx_map->_sympify_qubit_map(ndx_map)
A:sympy.physics.quantum.circuitutils.inv_map->create_inverse_map(ndx_map)
A:sympy.physics.quantum.circuitutils.result->convert_to_symbolic_indices(item, qubit_map=ndx_map, start=cur_ndx, gen=index_gen)
A:sympy.physics.quantum.circuitutils.sym_item->item.__class__(*sym_item)
A:sympy.physics.quantum.circuitutils.qubit_map->_sympify_qubit_map(qubit_map)
A:sympy.physics.quantum.circuitutils.real_item->item.__class__(*real_item)
A:sympy.physics.quantum.circuitutils.ids->reduce(collapse, ids, [])
A:sympy.physics.quantum.circuitutils.randrange->_randrange(seed)
A:sympy.physics.quantum.circuitutils.i->randrange(len(ids))
A:sympy.physics.quantum.circuitutils.id->reduce(collapse, ids, []).pop(i)
A:sympy.physics.quantum.circuitutils.circuit->list(circuit)
sympy.physics.quantum.circuitutils._sympify_qubit_map(mapping)
sympy.physics.quantum.circuitutils.convert_to_real_indices(seq,qubit_map)
sympy.physics.quantum.circuitutils.convert_to_symbolic_indices(seq,start=None,gen=None,qubit_map=None)
sympy.physics.quantum.circuitutils.find_subcircuit(circuit,subcircuit,start=0,end=0)
sympy.physics.quantum.circuitutils.flatten_ids(ids)
sympy.physics.quantum.circuitutils.kmp_table(word)
sympy.physics.quantum.circuitutils.random_insert(circuit,choices,seed=None)
sympy.physics.quantum.circuitutils.random_reduce(circuit,gate_ids,seed=None)
sympy.physics.quantum.circuitutils.replace_subcircuit(circuit,subcircuit,replace=None,pos=0)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/anticommutator.py----------------------------------------
A:sympy.physics.quantum.anticommutator.r->cls.eval(A, B)
A:sympy.physics.quantum.anticommutator.obj->sympy.core.expr.Expr.__new__(cls, A, B)
A:sympy.physics.quantum.anticommutator.(ca, nca)->a.args_cnc()
A:sympy.physics.quantum.anticommutator.(cb, ncb)->b.args_cnc()
A:sympy.physics.quantum.anticommutator.comm->B._eval_anticommutator(A, **hints)
A:sympy.physics.quantum.anticommutator.pform->prettyForm(*pform.parens(left='{', right='}'))
sympy.physics.quantum.AntiCommutator(cls,A,B)
sympy.physics.quantum.anticommutator.AntiCommutator(cls,A,B)
sympy.physics.quantum.anticommutator.AntiCommutator._eval_adjoint(self)
sympy.physics.quantum.anticommutator.AntiCommutator._latex(self,printer,*args)
sympy.physics.quantum.anticommutator.AntiCommutator._pretty(self,printer,*args)
sympy.physics.quantum.anticommutator.AntiCommutator._sympyrepr(self,printer,*args)
sympy.physics.quantum.anticommutator.AntiCommutator._sympystr(self,printer,*args)
sympy.physics.quantum.anticommutator.AntiCommutator.doit(self,**hints)
sympy.physics.quantum.anticommutator.AntiCommutator.eval(cls,a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/fermion.py----------------------------------------
A:sympy.physics.quantum.fermion.pform->printer._print(self.args[0], *args)
sympy.physics.quantum.fermion.FermionFockBra(cls,n)
sympy.physics.quantum.fermion.FermionFockBra.dual_class(self)
sympy.physics.quantum.fermion.FermionFockBra.n(self)
sympy.physics.quantum.fermion.FermionFockKet(cls,n)
sympy.physics.quantum.fermion.FermionFockKet._apply_from_right_to_FermionOp(self,op,**options)
sympy.physics.quantum.fermion.FermionFockKet._eval_hilbert_space(cls,label)
sympy.physics.quantum.fermion.FermionFockKet._eval_innerproduct_FermionFockBra(self,bra,**hints)
sympy.physics.quantum.fermion.FermionFockKet.dual_class(self)
sympy.physics.quantum.fermion.FermionFockKet.n(self)
sympy.physics.quantum.fermion.FermionOp(cls,*args,**hints)
sympy.physics.quantum.fermion.FermionOp._eval_adjoint(self)
sympy.physics.quantum.fermion.FermionOp._eval_anticommutator_BosonOp(self,other,**hints)
sympy.physics.quantum.fermion.FermionOp._eval_anticommutator_FermionOp(self,other,**hints)
sympy.physics.quantum.fermion.FermionOp._eval_commutator_BosonOp(self,other,**hints)
sympy.physics.quantum.fermion.FermionOp._eval_commutator_FermionOp(self,other,**hints)
sympy.physics.quantum.fermion.FermionOp._print_contents(self,printer,*args)
sympy.physics.quantum.fermion.FermionOp._print_contents_latex(self,printer,*args)
sympy.physics.quantum.fermion.FermionOp._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.fermion.FermionOp.default_args(self)
sympy.physics.quantum.fermion.FermionOp.is_annihilation(self)
sympy.physics.quantum.fermion.FermionOp.name(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/trace.py----------------------------------------
A:sympy.physics.quantum.trace.e->sympify(e)
A:sympy.physics.quantum.trace.min_item->min(l, key=default_sort_key)
A:sympy.physics.quantum.trace.le->list(l)
A:sympy.physics.quantum.trace.idx->sublist.index(min(sublist))
A:sympy.physics.quantum.trace.x->list(l[-1:])
A:sympy.physics.quantum.trace.indices->Tuple()
A:sympy.physics.quantum.trace.(c_part, nc_part)->expr.args_cnc()
A:sympy.physics.quantum.trace.obj->sympy.core.expr.Expr.__new__(cls, Mul(*nc_part), indices)
A:sympy.physics.quantum.trace.args->_cycle_permute(_rearrange_args(self.args[0].args))
sympy.physics.quantum.trace.Tr(cls,*args)
sympy.physics.quantum.trace.Tr._hashable_content(self)
sympy.physics.quantum.trace.Tr.doit(self,**hints)
sympy.physics.quantum.trace.Tr.is_number(self)
sympy.physics.quantum.trace.Tr.kind(self)
sympy.physics.quantum.trace.Tr.permute(self,pos)
sympy.physics.quantum.trace._cycle_permute(l)
sympy.physics.quantum.trace._is_scalar(e)
sympy.physics.quantum.trace._rearrange_args(l)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/state.py----------------------------------------
A:sympy.physics.quantum.state.contents->self._print_contents_latex(printer, *args)
A:sympy.physics.quantum.state.pform->printer._print(self.time, *args)
A:sympy.physics.quantum.state.(lbracket, rbracket)->self._pretty_brackets(pform.height(), printer._use_unicode)
A:sympy.physics.quantum.state.state->self.dual_class()._operators_to_state(ops, **options)
A:sympy.physics.quantum.state.dual_states->self.dual._enumerate_state(num_states, **options)
A:sympy.physics.quantum.state.label->self._print_sequence(self.label, self._label_separator, printer, *args)
A:sympy.physics.quantum.state.time->self._print_time_latex(printer, *args)
A:sympy.physics.quantum.state.diff->diff.expand().expand()
A:sympy.physics.quantum.state.new_args[ct]->Tuple(*arg)
A:sympy.physics.quantum.state.expr->expr.subs(symbol, val).subs(symbol, val)
A:sympy.physics.quantum.state.deriv->expr.subs(symbol, val).subs(symbol, val)._eval_derivative(symbol)
A:sympy.physics.quantum.state.exp->integrate(exp, (v, curr_limits[0], curr_limits[1]))
sympy.physics.quantum.Bra(State,BraBase)
sympy.physics.quantum.BraBase(StateBase)
sympy.physics.quantum.Ket(State,KetBase)
sympy.physics.quantum.KetBase(StateBase)
sympy.physics.quantum.OrthogonalBra(OrthogonalState,BraBase)
sympy.physics.quantum.OrthogonalKet(OrthogonalState,KetBase)
sympy.physics.quantum.OrthogonalState(State,StateBase)
sympy.physics.quantum.State(StateBase)
sympy.physics.quantum.StateBase(QExpr)
sympy.physics.quantum.TimeDepBra(TimeDepState,BraBase)
sympy.physics.quantum.TimeDepKet(TimeDepState,KetBase)
sympy.physics.quantum.TimeDepState(StateBase)
sympy.physics.quantum.Wavefunction(cls,*args,**options)
sympy.physics.quantum.state.Bra(State,BraBase)
sympy.physics.quantum.state.Bra.dual_class(self)
sympy.physics.quantum.state.BraBase(StateBase)
sympy.physics.quantum.state.BraBase.__mul__(self,other)
sympy.physics.quantum.state.BraBase.__rmul__(self,other)
sympy.physics.quantum.state.BraBase._enumerate_state(self,num_states,**options)
sympy.physics.quantum.state.BraBase._operators_to_state(self,ops,**options)
sympy.physics.quantum.state.BraBase._represent(self,**options)
sympy.physics.quantum.state.BraBase._state_to_operators(self,op_classes,**options)
sympy.physics.quantum.state.BraBase.default_args(self)
sympy.physics.quantum.state.BraBase.dual_class(self)
sympy.physics.quantum.state.Ket(State,KetBase)
sympy.physics.quantum.state.Ket.dual_class(self)
sympy.physics.quantum.state.KetBase(StateBase)
sympy.physics.quantum.state.KetBase.__mul__(self,other)
sympy.physics.quantum.state.KetBase.__rmul__(self,other)
sympy.physics.quantum.state.KetBase._apply_from_right_to(self,op,**options)
sympy.physics.quantum.state.KetBase._eval_innerproduct(self,bra,**hints)
sympy.physics.quantum.state.KetBase.default_args(self)
sympy.physics.quantum.state.KetBase.dual_class(self)
sympy.physics.quantum.state.OrthogonalBra(OrthogonalState,BraBase)
sympy.physics.quantum.state.OrthogonalBra.dual_class(self)
sympy.physics.quantum.state.OrthogonalKet(OrthogonalState,KetBase)
sympy.physics.quantum.state.OrthogonalKet._eval_innerproduct(self,bra,**hints)
sympy.physics.quantum.state.OrthogonalKet.dual_class(self)
sympy.physics.quantum.state.OrthogonalState(State,StateBase)
sympy.physics.quantum.state.State(StateBase)
sympy.physics.quantum.state.StateBase(QExpr)
sympy.physics.quantum.state.StateBase._enumerate_state(self,num_states,**options)
sympy.physics.quantum.state.StateBase._eval_adjoint(self)
sympy.physics.quantum.state.StateBase._latex(self,printer,*args)
sympy.physics.quantum.state.StateBase._operators_to_state(self,ops,**options)
sympy.physics.quantum.state.StateBase._pretty(self,printer,*args)
sympy.physics.quantum.state.StateBase._pretty_brackets(self,height,use_unicode=True)
sympy.physics.quantum.state.StateBase._represent_default_basis(self,**options)
sympy.physics.quantum.state.StateBase._state_to_operators(self,op_classes,**options)
sympy.physics.quantum.state.StateBase._sympystr(self,printer,*args)
sympy.physics.quantum.state.StateBase.dual(self)
sympy.physics.quantum.state.StateBase.dual_class(self)
sympy.physics.quantum.state.StateBase.operators(self)
sympy.physics.quantum.state.TimeDepBra(TimeDepState,BraBase)
sympy.physics.quantum.state.TimeDepBra.dual_class(self)
sympy.physics.quantum.state.TimeDepKet(TimeDepState,KetBase)
sympy.physics.quantum.state.TimeDepKet.dual_class(self)
sympy.physics.quantum.state.TimeDepState(StateBase)
sympy.physics.quantum.state.TimeDepState._print_contents(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_contents_latex(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_label_repr(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_time(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_time_pretty(self,printer,*args)
sympy.physics.quantum.state.TimeDepState.default_args(self)
sympy.physics.quantum.state.TimeDepState.label(self)
sympy.physics.quantum.state.TimeDepState.time(self)
sympy.physics.quantum.state.Wavefunction(cls,*args,**options)
sympy.physics.quantum.state.Wavefunction._eval_conjugate(self)
sympy.physics.quantum.state.Wavefunction._eval_derivative(self,symbol)
sympy.physics.quantum.state.Wavefunction._eval_transpose(self)
sympy.physics.quantum.state.Wavefunction.eval(self,*args)
sympy.physics.quantum.state.Wavefunction.expr(self)
sympy.physics.quantum.state.Wavefunction.free_symbols(self)
sympy.physics.quantum.state.Wavefunction.is_commutative(self)
sympy.physics.quantum.state.Wavefunction.is_normalized(self)
sympy.physics.quantum.state.Wavefunction.limits(self)
sympy.physics.quantum.state.Wavefunction.norm(self)
sympy.physics.quantum.state.Wavefunction.normalize(self)
sympy.physics.quantum.state.Wavefunction.prob(self)
sympy.physics.quantum.state.Wavefunction.variables(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/dagger.py----------------------------------------
A:sympy.physics.quantum.dagger.obj->arg.conjugate().transpose()
sympy.physics.quantum.Dagger(cls,arg)
sympy.physics.quantum.dagger.Dagger(cls,arg)
sympy.physics.quantum.dagger.Dagger.__mul__(self,other)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/matrixcache.py----------------------------------------
A:sympy.physics.quantum.matrixcache.m->to_scipy_sparse(m, dtype=self.dtype)
A:sympy.physics.quantum.matrixcache.sqrt2_inv->Pow(2, Rational(-1, 2), evaluate=False)
A:sympy.physics.quantum.matrixcache.matrix_cache->MatrixCache()
sympy.physics.quantum.matrixcache.MatrixCache(self,dtype='complex')
sympy.physics.quantum.matrixcache.MatrixCache._numpy_matrix(self,name,m)
sympy.physics.quantum.matrixcache.MatrixCache._scipy_sparse_matrix(self,name,m)
sympy.physics.quantum.matrixcache.MatrixCache._store_matrix(self,name,format,m)
sympy.physics.quantum.matrixcache.MatrixCache._sympy_matrix(self,name,m)
sympy.physics.quantum.matrixcache.MatrixCache.cache_matrix(self,name,m)
sympy.physics.quantum.matrixcache.MatrixCache.get_matrix(self,name,format)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/density.py----------------------------------------
A:sympy.physics.quantum.density.args->super()._eval_args(args)
A:sympy.physics.quantum.density.state->state.expand().expand()
A:sympy.physics.quantum.density.(c_part1, nc_part1)->arg1.args_cnc()
A:sympy.physics.quantum.density.(c_part2, nc_part2)->arg2.args_cnc()
A:sympy.physics.quantum.density.op->tensor_product_simp(nc_part1[0] * Dagger(nc_part2[0]))
A:sympy.physics.quantum.density.indices->kwargs.get('indices', [])
A:sympy.physics.quantum.density.density->to_numpy(density)
A:sympy.physics.quantum.density.eigvals->numpy.linalg.eigvals(density)
sympy.physics.quantum.density.Density(HermitianOperator)
sympy.physics.quantum.density.Density._eval_args(cls,args)
sympy.physics.quantum.density.Density._eval_trace(self,**kwargs)
sympy.physics.quantum.density.Density._generate_outer_prod(self,arg1,arg2)
sympy.physics.quantum.density.Density._print_operator_name_latex(self,printer,*args)
sympy.physics.quantum.density.Density._print_operator_name_pretty(self,printer,*args)
sympy.physics.quantum.density.Density._represent(self,**options)
sympy.physics.quantum.density.Density.apply_op(self,op)
sympy.physics.quantum.density.Density.doit(self,**hints)
sympy.physics.quantum.density.Density.entropy(self)
sympy.physics.quantum.density.Density.get_prob(self,index)
sympy.physics.quantum.density.Density.get_state(self,index)
sympy.physics.quantum.density.Density.probs(self)
sympy.physics.quantum.density.Density.states(self)
sympy.physics.quantum.density.entropy(density)
sympy.physics.quantum.density.fidelity(state1,state2)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_state.py----------------------------------------
A:sympy.physics.quantum.tests.test_state.(x, y, t)->symbols('x,y,t')
A:sympy.physics.quantum.tests.test_state.k->Wavefunction(x ** 2, 'x')
A:sympy.physics.quantum.tests.test_state.b->Bra('b')
A:sympy.physics.quantum.tests.test_state.k0->Ket(0)
A:sympy.physics.quantum.tests.test_state.k1->Ket(1)
A:sympy.physics.quantum.tests.test_state.x->symbols('x', complex=True)
A:sympy.physics.quantum.tests.test_state.k2->Ket('k2')
A:sympy.physics.quantum.tests.test_state.(x, y)->symbols('x y', real=True)
A:sympy.physics.quantum.tests.test_state.L->symbols('L', positive=True)
A:sympy.physics.quantum.tests.test_state.n->symbols('n', integer=True, positive=True)
A:sympy.physics.quantum.tests.test_state.f->Wavefunction(x ** 2, x)
A:sympy.physics.quantum.tests.test_state.p->Wavefunction(x ** 2, x).prob()
A:sympy.physics.quantum.tests.test_state.g->Wavefunction(x ** 2 * y + y ** 2 * x, (x, 0, 1), (y, 0, 2))
A:sympy.physics.quantum.tests.test_state.h->Wavefunction(sqrt(5) * x ** 2, (x, 0, 1))
A:sympy.physics.quantum.tests.test_state.piab->Wavefunction(sin(n * pi * x / L), (x, 0, L))
sympy.physics.quantum.tests.test_state.CustomKet(Ket)
sympy.physics.quantum.tests.test_state.CustomKet.default_args(self)
sympy.physics.quantum.tests.test_state.CustomKetMultipleLabels(Ket)
sympy.physics.quantum.tests.test_state.CustomKetMultipleLabels.default_args(self)
sympy.physics.quantum.tests.test_state.CustomTimeDepKet(TimeDepKet)
sympy.physics.quantum.tests.test_state.CustomTimeDepKet.default_args(self)
sympy.physics.quantum.tests.test_state.CustomTimeDepKetMultipleLabels(TimeDepKet)
sympy.physics.quantum.tests.test_state.CustomTimeDepKetMultipleLabels.default_args(self)
sympy.physics.quantum.tests.test_state.test_bra()
sympy.physics.quantum.tests.test_state.test_bra_ket_dagger()
sympy.physics.quantum.tests.test_state.test_ket()
sympy.physics.quantum.tests.test_state.test_ops()
sympy.physics.quantum.tests.test_state.test_orthogonal_states()
sympy.physics.quantum.tests.test_state.test_time_dep_bra()
sympy.physics.quantum.tests.test_state.test_time_dep_ket()
sympy.physics.quantum.tests.test_state.test_wavefunction()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_represent.py----------------------------------------
A:sympy.physics.quantum.tests.test_represent.Amat->Matrix([[1, I], [-I, 1]])
A:sympy.physics.quantum.tests.test_represent.Bmat->Matrix([[1, 2], [3, 4]])
A:sympy.physics.quantum.tests.test_represent.Avec->Matrix([[1], [I]])
A:sympy.physics.quantum.tests.test_represent.k->AKet('a')
A:sympy.physics.quantum.tests.test_represent.b->ABra('a')
A:sympy.physics.quantum.tests.test_represent.A->AOp('A')
A:sympy.physics.quantum.tests.test_represent.B->BOp('B')
A:sympy.physics.quantum.tests.test_represent.lhs->represent(test[0], basis=A, format='scipy.sparse')
A:sympy.physics.quantum.tests.test_represent.rhs->to_scipy_sparse(test[1])
A:sympy.physics.quantum.tests.test_represent.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_represent.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_represent.x_ket->XKet('x')
A:sympy.physics.quantum.tests.test_represent.x_bra->XBra('x')
A:sympy.physics.quantum.tests.test_represent.x_op->XOp('X')
A:sympy.physics.quantum.tests.test_represent.basis_kets->enumerate_states(operators_to_state(x_op), 1, 2)
A:sympy.physics.quantum.tests.test_represent.test->XKet('foo')
sympy.physics.quantum.tests.test_represent.ABra(Bra)
sympy.physics.quantum.tests.test_represent.ABra.dual_class(self)
sympy.physics.quantum.tests.test_represent.AKet(Ket)
sympy.physics.quantum.tests.test_represent.AKet._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_represent.AKet._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_represent.AKet.dual_class(self)
sympy.physics.quantum.tests.test_represent.AOp(Operator)
sympy.physics.quantum.tests.test_represent.AOp._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_represent.AOp._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_represent.BOp(Operator)
sympy.physics.quantum.tests.test_represent.BOp._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_represent.BOp._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_represent.test_enumerate_states()
sympy.physics.quantum.tests.test_represent.test_format_numpy()
sympy.physics.quantum.tests.test_represent.test_format_scipy_sparse()
sympy.physics.quantum.tests.test_represent.test_format_sympy()
sympy.physics.quantum.tests.test_represent.test_innerprod_represent()
sympy.physics.quantum.tests.test_represent.test_operator_represent()
sympy.physics.quantum.tests.test_represent.test_scalar_numpy()
sympy.physics.quantum.tests.test_represent.test_scalar_scipy_sparse()
sympy.physics.quantum.tests.test_represent.test_scalar_sympy()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_operatorset.py----------------------------------------
sympy.physics.quantum.tests.test_operatorset.test_op_to_state()
sympy.physics.quantum.tests.test_operatorset.test_spin()
sympy.physics.quantum.tests.test_operatorset.test_state_to_op()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_qexpr.py----------------------------------------
A:sympy.physics.quantum.tests.test_qexpr.x->Symbol('x')
A:sympy.physics.quantum.tests.test_qexpr.y->Symbol('y')
A:sympy.physics.quantum.tests.test_qexpr.q->sympy.physics.quantum.qexpr.QExpr._new_rawargs(Integer(0), Integer(1), HilbertSpace())
A:sympy.physics.quantum.tests.test_qexpr.q1->QExpr(x, y)
A:sympy.physics.quantum.tests.test_qexpr.q2->QExpr('q2')
sympy.physics.quantum.tests.test_qexpr.test_qexpr_commutative()
sympy.physics.quantum.tests.test_qexpr.test_qexpr_commutative_free_symbols()
sympy.physics.quantum.tests.test_qexpr.test_qexpr_new()
sympy.physics.quantum.tests.test_qexpr.test_qexpr_subs()
sympy.physics.quantum.tests.test_qexpr.test_qsympify()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_hilbert.py----------------------------------------
A:sympy.physics.quantum.tests.test_hilbert.hs->HilbertSpace()
A:sympy.physics.quantum.tests.test_hilbert.c1->ComplexSpace(2)
A:sympy.physics.quantum.tests.test_hilbert.n->Symbol('n')
A:sympy.physics.quantum.tests.test_hilbert.c2->ComplexSpace(n)
A:sympy.physics.quantum.tests.test_hilbert.b1->L2(Interval(-oo, 1))
A:sympy.physics.quantum.tests.test_hilbert.x->Symbol('x', real=True)
A:sympy.physics.quantum.tests.test_hilbert.y->Symbol('y', real=True)
A:sympy.physics.quantum.tests.test_hilbert.b2->L2(Interval(x, y))
A:sympy.physics.quantum.tests.test_hilbert.f1->FockSpace()
A:sympy.physics.quantum.tests.test_hilbert.f2->FockSpace()
A:sympy.physics.quantum.tests.test_hilbert.hs1->ComplexSpace(2)
A:sympy.physics.quantum.tests.test_hilbert.hs2->ComplexSpace(n)
A:sympy.physics.quantum.tests.test_hilbert.f->FockSpace()
sympy.physics.quantum.tests.test_hilbert.test_L2()
sympy.physics.quantum.tests.test_hilbert.test_complex_space()
sympy.physics.quantum.tests.test_hilbert.test_direct_sum()
sympy.physics.quantum.tests.test_hilbert.test_fock_space()
sympy.physics.quantum.tests.test_hilbert.test_hilbert_space()
sympy.physics.quantum.tests.test_hilbert.test_tensor_power()
sympy.physics.quantum.tests.test_hilbert.test_tensor_product()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_fermion.py----------------------------------------
A:sympy.physics.quantum.tests.test_fermion.c->FermionOp('c')
A:sympy.physics.quantum.tests.test_fermion.d->FermionOp('d')
sympy.physics.quantum.tests.test_fermion.test_fermion_states()
sympy.physics.quantum.tests.test_fermion.test_fermionoperator()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_qubit.py----------------------------------------
A:sympy.physics.quantum.tests.test_qubit.(x, y)->symbols('x,y')
A:sympy.physics.quantum.tests.test_qubit.qb->Qubit(0, 0, 0, 0)
A:sympy.physics.quantum.tests.test_qubit.qb_bra->QubitBra(0, 1)
A:sympy.physics.quantum.tests.test_qubit.iqb->IntQubit(4)
A:sympy.physics.quantum.tests.test_qubit.iqb_bra->IntQubitBra(5)
A:sympy.physics.quantum.tests.test_qubit.circuit->Qubit(int(random.random() * 2), int(random.random() * 2), int(random.random() * 2), int(random.random() * 2), int(random.random() * 2), int(random.random() * 2))
A:sympy.physics.quantum.tests.test_qubit.mat->Matrix([[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
A:sympy.physics.quantum.tests.test_qubit.states->states.expand().expand()
A:sympy.physics.quantum.tests.test_qubit.state_rep->state_rep.expand().expand()
A:sympy.physics.quantum.tests.test_qubit.(a, b)->symbols('a b')
A:sympy.physics.quantum.tests.test_qubit.q1->Qubit('10110')
A:sympy.physics.quantum.tests.test_qubit.q2->Qubit('01010')
A:sympy.physics.quantum.tests.test_qubit.d->Density([q, 1.0])
A:sympy.physics.quantum.tests.test_qubit.t->Tr(d, 0)
sympy.physics.quantum.tests.test_qubit.test_IntQubit()
sympy.physics.quantum.tests.test_qubit.test_Qubit()
sympy.physics.quantum.tests.test_qubit.test_QubitBra()
sympy.physics.quantum.tests.test_qubit.test_apply_represent_equality()
sympy.physics.quantum.tests.test_qubit.test_eval_trace()
sympy.physics.quantum.tests.test_qubit.test_matrix_to_density()
sympy.physics.quantum.tests.test_qubit.test_matrix_to_qubits()
sympy.physics.quantum.tests.test_qubit.test_measure_all()
sympy.physics.quantum.tests.test_qubit.test_measure_normalize()
sympy.physics.quantum.tests.test_qubit.test_measure_partial()
sympy.physics.quantum.tests.test_qubit.test_superposition_of_states()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_innerproduct.py----------------------------------------
A:sympy.physics.quantum.tests.test_innerproduct.k->Ket('k')
A:sympy.physics.quantum.tests.test_innerproduct.b->BarBra('bar')
A:sympy.physics.quantum.tests.test_innerproduct.ip->InnerProduct(b, k)
A:sympy.physics.quantum.tests.test_innerproduct.f->FooKet('foo')
sympy.physics.quantum.tests.test_innerproduct.BarBra(Bra,BarState)
sympy.physics.quantum.tests.test_innerproduct.BarBra.dual_class(self)
sympy.physics.quantum.tests.test_innerproduct.BarKet(Ket,BarState)
sympy.physics.quantum.tests.test_innerproduct.BarKet.dual_class(self)
sympy.physics.quantum.tests.test_innerproduct.BarState(StateBase)
sympy.physics.quantum.tests.test_innerproduct.FooBra(Bra,FooState)
sympy.physics.quantum.tests.test_innerproduct.FooBra.dual_class(self)
sympy.physics.quantum.tests.test_innerproduct.FooKet(Ket,FooState)
sympy.physics.quantum.tests.test_innerproduct.FooKet._eval_innerproduct_BarBra(self,bra)
sympy.physics.quantum.tests.test_innerproduct.FooKet._eval_innerproduct_FooBra(self,bra)
sympy.physics.quantum.tests.test_innerproduct.FooKet.dual_class(self)
sympy.physics.quantum.tests.test_innerproduct.FooState(StateBase)
sympy.physics.quantum.tests.test_innerproduct.test_doit()
sympy.physics.quantum.tests.test_innerproduct.test_innerproduct()
sympy.physics.quantum.tests.test_innerproduct.test_innerproduct_dagger()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_spin.py----------------------------------------
A:sympy.physics.quantum.tests.test_spin.(j1, j2, j3, j4, m1, m2, m3, m4)->symbols('j1:5 m1:5')
A:sympy.physics.quantum.tests.test_spin.(j12, j13, j24, j34, j123, j134, mi, mi1, mp)->symbols('j12 j13 j24 j34 j123 j134 mi mi1 mp')
A:sympy.physics.quantum.tests.test_spin.(i, j)->symbols('i j')
A:sympy.physics.quantum.tests.test_spin.(a, b, g)->symbols('a b g')
A:sympy.physics.quantum.tests.test_spin.(j, m)->symbols('j m')
A:sympy.physics.quantum.tests.test_spin.got->qapply(Rotation(0, pi / 2, 0) * state)
sympy.physics.quantum.tests.test_spin.test_couple_2_states()
sympy.physics.quantum.tests.test_spin.test_couple_2_states_numerical()
sympy.physics.quantum.tests.test_spin.test_couple_3_states()
sympy.physics.quantum.tests.test_spin.test_couple_3_states_numerical()
sympy.physics.quantum.tests.test_spin.test_couple_4_states()
sympy.physics.quantum.tests.test_spin.test_couple_4_states_numerical()
sympy.physics.quantum.tests.test_spin.test_couple_symbolic()
sympy.physics.quantum.tests.test_spin.test_innerproduct()
sympy.physics.quantum.tests.test_spin.test_innerproducts_of_rewritten_states()
sympy.physics.quantum.tests.test_spin.test_j2()
sympy.physics.quantum.tests.test_spin.test_jminus()
sympy.physics.quantum.tests.test_spin.test_jplus()
sympy.physics.quantum.tests.test_spin.test_jx()
sympy.physics.quantum.tests.test_spin.test_jy()
sympy.physics.quantum.tests.test_spin.test_jz()
sympy.physics.quantum.tests.test_spin.test_jzket()
sympy.physics.quantum.tests.test_spin.test_jzketcoupled()
sympy.physics.quantum.tests.test_spin.test_represent_coupled_states()
sympy.physics.quantum.tests.test_spin.test_represent_rotation()
sympy.physics.quantum.tests.test_spin.test_represent_spin_operators()
sympy.physics.quantum.tests.test_spin.test_represent_spin_states()
sympy.physics.quantum.tests.test_spin.test_represent_uncoupled_states()
sympy.physics.quantum.tests.test_spin.test_rewrite_Bra()
sympy.physics.quantum.tests.test_spin.test_rewrite_Ket()
sympy.physics.quantum.tests.test_spin.test_rewrite_coupled_state()
sympy.physics.quantum.tests.test_spin.test_rewrite_same()
sympy.physics.quantum.tests.test_spin.test_rewrite_uncoupled_state()
sympy.physics.quantum.tests.test_spin.test_rotation()
sympy.physics.quantum.tests.test_spin.test_rotation_d()
sympy.physics.quantum.tests.test_spin.test_rotation_small_d()
sympy.physics.quantum.tests.test_spin.test_uncouple_2_coupled_states()
sympy.physics.quantum.tests.test_spin.test_uncouple_2_coupled_states_numerical()
sympy.physics.quantum.tests.test_spin.test_uncouple_3_coupled_states()
sympy.physics.quantum.tests.test_spin.test_uncouple_3_coupled_states_numerical()
sympy.physics.quantum.tests.test_spin.test_uncouple_4_coupled_states()
sympy.physics.quantum.tests.test_spin.test_uncouple_4_coupled_states_numerical()
sympy.physics.quantum.tests.test_spin.test_uncouple_symbolic()
sympy.physics.quantum.tests.test_spin.test_wignerD()
sympy.physics.quantum.tests.test_spin.test_wignerd()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_grover.py----------------------------------------
A:sympy.physics.quantum.tests.test_grover.v->OracleGate(numqubits, return_one_on_two)
A:sympy.physics.quantum.tests.test_grover.basis_states->superposition_basis(nqubits)
A:sympy.physics.quantum.tests.test_grover.expected->IntQubit(1, nqubits=numqubits)
A:sympy.physics.quantum.tests.test_grover.iterated->qapply(iterated)
sympy.physics.quantum.tests.test_grover.return_one_on_one(qubits)
sympy.physics.quantum.tests.test_grover.return_one_on_two(qubits)
sympy.physics.quantum.tests.test_grover.test_OracleGate()
sympy.physics.quantum.tests.test_grover.test_WGate()
sympy.physics.quantum.tests.test_grover.test_grover()
sympy.physics.quantum.tests.test_grover.test_grover_iteration_1()
sympy.physics.quantum.tests.test_grover.test_grover_iteration_2()
sympy.physics.quantum.tests.test_grover.test_superposition_basis()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_printing.py----------------------------------------
A:sympy.physics.quantum.tests.test_printing.A->Operator('A')
A:sympy.physics.quantum.tests.test_printing.B->Operator('B')
A:sympy.physics.quantum.tests.test_printing.ac->AntiCommutator(A, B)
A:sympy.physics.quantum.tests.test_printing.ac_tall->AntiCommutator(A ** 2, B)
A:sympy.physics.quantum.tests.test_printing.cg->CG(1, 2, 3, 4, 5, 6)
A:sympy.physics.quantum.tests.test_printing.wigner3j->Wigner3j(1, 2, 3, 4, 5, 6)
A:sympy.physics.quantum.tests.test_printing.wigner6j->Wigner6j(1, 2, 3, 4, 5, 6)
A:sympy.physics.quantum.tests.test_printing.wigner9j->Wigner9j(1, 2, 3, 4, 5, 6, 7, 8, 9)
A:sympy.physics.quantum.tests.test_printing.c->Commutator(A, B)
A:sympy.physics.quantum.tests.test_printing.c_tall->Commutator(A ** 2, B)
A:sympy.physics.quantum.tests.test_printing.x->symbols('x')
A:sympy.physics.quantum.tests.test_printing.expr->Dagger(x)
A:sympy.physics.quantum.tests.test_printing.(a, b, c, d)->symbols('a,b,c,d')
A:sympy.physics.quantum.tests.test_printing.uMat->Matrix([[a, b], [c, d]])
A:sympy.physics.quantum.tests.test_printing.g->UGate((0,), uMat)
A:sympy.physics.quantum.tests.test_printing.q->QExpr('q')
A:sympy.physics.quantum.tests.test_printing.g1->IdentityGate(2)
A:sympy.physics.quantum.tests.test_printing.g2->CGate((3, 0), XGate(1))
A:sympy.physics.quantum.tests.test_printing.g3->CNotGate(1, 0)
A:sympy.physics.quantum.tests.test_printing.g4->UGate((0,), uMat)
A:sympy.physics.quantum.tests.test_printing.h1->HilbertSpace()
A:sympy.physics.quantum.tests.test_printing.h2->ComplexSpace(2)
A:sympy.physics.quantum.tests.test_printing.h3->FockSpace()
A:sympy.physics.quantum.tests.test_printing.h4->L2(Interval(0, oo))
A:sympy.physics.quantum.tests.test_printing.ip1->InnerProduct(Bra(), Ket())
A:sympy.physics.quantum.tests.test_printing.ip2->InnerProduct(TimeDepBra(), TimeDepKet())
A:sympy.physics.quantum.tests.test_printing.ip3->InnerProduct(JzBra(1, 1), JzKet(1, 1))
A:sympy.physics.quantum.tests.test_printing.ip4->InnerProduct(JzBraCoupled(1, 1, (1, 1)), JzKetCoupled(1, 1, (1, 1)))
A:sympy.physics.quantum.tests.test_printing.ip_tall1->InnerProduct(Bra(x / 2), Ket(x / 2))
A:sympy.physics.quantum.tests.test_printing.ip_tall2->InnerProduct(Bra(x), Ket(x / 2))
A:sympy.physics.quantum.tests.test_printing.ip_tall3->InnerProduct(Bra(x / 2), Ket(x))
A:sympy.physics.quantum.tests.test_printing.a->Operator('A')
A:sympy.physics.quantum.tests.test_printing.b->Operator('B', Symbol('t'), S.Half)
A:sympy.physics.quantum.tests.test_printing.inv->Operator('A').inv()
A:sympy.physics.quantum.tests.test_printing.f->Function('f')
A:sympy.physics.quantum.tests.test_printing.d->DifferentialOperator(Derivative(f(x), x), f(x))
A:sympy.physics.quantum.tests.test_printing.op->OuterProduct(Ket(), Bra())
A:sympy.physics.quantum.tests.test_printing.q1->Qubit('0101')
A:sympy.physics.quantum.tests.test_printing.q2->IntQubit(8)
A:sympy.physics.quantum.tests.test_printing.lz->JzOp('L')
A:sympy.physics.quantum.tests.test_printing.ket->Ket()
A:sympy.physics.quantum.tests.test_printing.bra->Bra()
A:sympy.physics.quantum.tests.test_printing.cket->JzKetCoupled(1, 0, (1, 2))
A:sympy.physics.quantum.tests.test_printing.cbra->JzBraCoupled(1, 0, (1, 2))
A:sympy.physics.quantum.tests.test_printing.cket_big->JzKetCoupled(1, 0, (1, 2, 3))
A:sympy.physics.quantum.tests.test_printing.cbra_big->JzBraCoupled(1, 0, (1, 2, 3))
A:sympy.physics.quantum.tests.test_printing.rot->Rotation(1, 2, 3)
A:sympy.physics.quantum.tests.test_printing.bigd->WignerD(1, 2, 3, 4, 5, 6)
A:sympy.physics.quantum.tests.test_printing.smalld->WignerD(1, 2, 3, 0, 4, 0)
A:sympy.physics.quantum.tests.test_printing.bra_tall->Bra(x / 2)
A:sympy.physics.quantum.tests.test_printing.ket_tall->Ket(x / 2)
A:sympy.physics.quantum.tests.test_printing.tbra->TimeDepBra()
A:sympy.physics.quantum.tests.test_printing.tket->TimeDepKet()
A:sympy.physics.quantum.tests.test_printing.tp->TensorProduct(JzKet(1, 1), JzKet(1, 0))
A:sympy.physics.quantum.tests.test_printing.ad->RaisingOp('a')
sympy.physics.quantum.tests.test_pretty(expr)
sympy.physics.quantum.tests.test_printing._test_sho1d()
sympy.physics.quantum.tests.test_printing.pretty(expr)
sympy.physics.quantum.tests.test_printing.sT(expr,string)
sympy.physics.quantum.tests.test_printing.test_anticommutator()
sympy.physics.quantum.tests.test_printing.test_big_expr()
sympy.physics.quantum.tests.test_printing.test_cg()
sympy.physics.quantum.tests.test_printing.test_commutator()
sympy.physics.quantum.tests.test_printing.test_constants()
sympy.physics.quantum.tests.test_printing.test_dagger()
sympy.physics.quantum.tests.test_printing.test_gate()
sympy.physics.quantum.tests.test_printing.test_gate_failing()
sympy.physics.quantum.tests.test_printing.test_hilbert()
sympy.physics.quantum.tests.test_printing.test_innerproduct()
sympy.physics.quantum.tests.test_printing.test_operator()
sympy.physics.quantum.tests.test_printing.test_qexpr()
sympy.physics.quantum.tests.test_printing.test_qubit()
sympy.physics.quantum.tests.test_printing.test_spin()
sympy.physics.quantum.tests.test_printing.test_state()
sympy.physics.quantum.tests.test_printing.test_tensorproduct()
sympy.physics.quantum.tests.test_printing.upretty(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_tensorproduct.py----------------------------------------
A:sympy.physics.quantum.tests.test_tensorproduct.(A, B, C, D)->symbols('A,B,C,D', commutative=False)
A:sympy.physics.quantum.tests.test_tensorproduct.x->symbols('x')
A:sympy.physics.quantum.tests.test_tensorproduct.mat1->Matrix([[1, 2 * I], [1 + I, 3]])
A:sympy.physics.quantum.tests.test_tensorproduct.mat2->Matrix([[2 * I, 3], [4 * I, 2]])
A:sympy.physics.quantum.tests.test_tensorproduct.spm->sympy.matrices.SparseMatrix.diag(1, 0)
A:sympy.physics.quantum.tests.test_tensorproduct.(A, B, C, D, E, F)->symbols('A B C D E F', commutative=False)
A:sympy.physics.quantum.tests.test_tensorproduct.t->Tr(d, [1])
A:sympy.physics.quantum.tests.test_tensorproduct.d->Density([t2 + t3, 1.0])
A:sympy.physics.quantum.tests.test_tensorproduct.tr->Tr(d, [0, 2])
A:sympy.physics.quantum.tests.test_tensorproduct.t2->TensorProduct(A, B)
A:sympy.physics.quantum.tests.test_tensorproduct.t3->TensorProduct(C, D)
sympy.physics.quantum.tests.test_tensorproduct.test_eval_trace()
sympy.physics.quantum.tests.test_tensorproduct.test_issue_5923()
sympy.physics.quantum.tests.test_tensorproduct.test_sparse_matrices()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_abstract()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_commutator()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_dagger()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_expand()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_simp()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_identitysearch.py----------------------------------------
A:sympy.physics.quantum.tests.test_identitysearch.(x, y, z, h)->create_gate_sequence()
A:sympy.physics.quantum.tests.test_identitysearch.ph->PhaseGate(0)
A:sympy.physics.quantum.tests.test_identitysearch.cgate_t->CGate(0, TGate(1))
A:sympy.physics.quantum.tests.test_identitysearch.actual->is_scalar_nonsparse_matrix(hh_circuit, numqubits, id_only)
A:sympy.physics.quantum.tests.test_identitysearch.cgate_y->CGate((1,), y)
A:sympy.physics.quantum.tests.test_identitysearch.cnot->CNOT(1, 0)
A:sympy.physics.quantum.tests.test_identitysearch.cgate_z->CGate((0,), Z(1))
A:sympy.physics.quantum.tests.test_identitysearch.circuit->Mul(*(cnot, h, cgate_z, h))
A:sympy.physics.quantum.tests.test_identitysearch.x0->X(0)
A:sympy.physics.quantum.tests.test_identitysearch.x1->X(1)
A:sympy.physics.quantum.tests.test_identitysearch.y1->Y(1)
A:sympy.physics.quantum.tests.test_identitysearch.z1->Z(1)
A:sympy.physics.quantum.tests.test_identitysearch.h->H(0)
A:sympy.physics.quantum.tests.test_identitysearch.h1->H(1)
A:sympy.physics.quantum.tests.test_identitysearch.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_identitysearch.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_identitysearch.gate_id->GateIdentity(x, y, z)
A:sympy.physics.quantum.tests.test_identitysearch.cgate_x->CGate((1,), x)
A:sympy.physics.quantum.tests.test_identitysearch.s->PhaseGate(0)
A:sympy.physics.quantum.tests.test_identitysearch.t->TGate(0)
sympy.physics.quantum.tests.test_identitysearch.create_gate_sequence(qubit=0)
sympy.physics.quantum.tests.test_identitysearch.test_bfs_identity_search()
sympy.physics.quantum.tests.test_identitysearch.test_bfs_identity_search_xfail()
sympy.physics.quantum.tests.test_identitysearch.test_generate_equivalent_ids_1()
sympy.physics.quantum.tests.test_identitysearch.test_generate_equivalent_ids_2()
sympy.physics.quantum.tests.test_identitysearch.test_generate_gate_rules_1()
sympy.physics.quantum.tests.test_identitysearch.test_generate_gate_rules_2()
sympy.physics.quantum.tests.test_identitysearch.test_is_degenerate()
sympy.physics.quantum.tests.test_identitysearch.test_is_reducible()
sympy.physics.quantum.tests.test_identitysearch.test_is_scalar_nonsparse_matrix()
sympy.physics.quantum.tests.test_identitysearch.test_is_scalar_sparse_matrix()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_density.py----------------------------------------
A:sympy.physics.quantum.tests.test_density.d->Density([k1, 0.5], [k2, 0.5])
A:sympy.physics.quantum.tests.test_density.(x, y)->symbols('x y')
A:sympy.physics.quantum.tests.test_density.(A, B, C, D, E, F)->symbols('A B C D E F', commutative=False)
A:sympy.physics.quantum.tests.test_density.d_with_sym->Density([XKet(x * y), 0.5], [PxKet(x * y), 0.5])
A:sympy.physics.quantum.tests.test_density.t->Tr(d)
A:sympy.physics.quantum.tests.test_density.t2->TensorProduct(A, B)
A:sympy.physics.quantum.tests.test_density.t3->TensorProduct(C, D)
A:sympy.physics.quantum.tests.test_density.tp1->TensorProduct(JzKet(1, 1), JzKet(1, -1))
A:sympy.physics.quantum.tests.test_density.tp2->TensorProduct(JzKet(S.Half, S.Half), JzKet(S.Half, Rational(-1, 2)))
A:sympy.physics.quantum.tests.test_density.states->Density([k1, 0.5], [k2, 0.5]).states()
A:sympy.physics.quantum.tests.test_density.probs->Density([k1, 0.5], [k2, 0.5]).probs()
A:sympy.physics.quantum.tests.test_density.up->JzKet(S.Half, S.Half)
A:sympy.physics.quantum.tests.test_density.down->JzKet(S.Half, Rational(-1, 2))
A:sympy.physics.quantum.tests.test_density.ent->entropy(np_mat)
A:sympy.physics.quantum.tests.test_density.np->import_module('numpy', min_module_version='1.4.0')
A:sympy.physics.quantum.tests.test_density.np_mat->represent(d, format='numpy')
A:sympy.physics.quantum.tests.test_density.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_density.mat->represent(d, format='scipy.sparse')
A:sympy.physics.quantum.tests.test_density.(x, t)->symbols('x t')
A:sympy.physics.quantum.tests.test_density.k1->TestTimeDepKet(0, 0.5)
A:sympy.physics.quantum.tests.test_density.k2->TestTimeDepKet(0, 1)
A:sympy.physics.quantum.tests.test_density.up_dm->Density([up, 1.0])
A:sympy.physics.quantum.tests.test_density.down_dm->Density([down, 1.0])
A:sympy.physics.quantum.tests.test_density.updown_dm->Density([updown, 1.0])
A:sympy.physics.quantum.tests.test_density.d1->Density([state3, 0.7], [state4, 0.3])
A:sympy.physics.quantum.tests.test_density.d2->Density([state3, 0.2], [state4, 0.8])
A:sympy.physics.quantum.tests.test_density.state1->Qubit('0')
A:sympy.physics.quantum.tests.test_density.state2->Qubit('1')
A:sympy.physics.quantum.tests.test_density.state1_dm->Density([state1, 1])
A:sympy.physics.quantum.tests.test_density.state2_dm->Density([state2, 1])
A:sympy.physics.quantum.tests.test_density.state3_dm->Density([state3, 1])
sympy.physics.quantum.tests.test_density.test_apply_op()
sympy.physics.quantum.tests.test_density.test_doit()
sympy.physics.quantum.tests.test_density.test_entropy()
sympy.physics.quantum.tests.test_density.test_eval_args()
sympy.physics.quantum.tests.test_density.test_eval_trace()
sympy.physics.quantum.tests.test_density.test_fidelity()
sympy.physics.quantum.tests.test_density.test_get_prob()
sympy.physics.quantum.tests.test_density.test_get_state()
sympy.physics.quantum.tests.test_density.test_probs()
sympy.physics.quantum.tests.test_density.test_represent()
sympy.physics.quantum.tests.test_density.test_states()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_circuitplot.py----------------------------------------
A:sympy.physics.quantum.tests.test_circuitplot.mpl->import_module('matplotlib')
A:sympy.physics.quantum.tests.test_circuitplot.Qgate->CreateCGate('Q')
A:sympy.physics.quantum.tests.test_circuitplot.c->CircuitPlot(SWAP(0, 2) * H(0) * CGate((0,), S(1)) * H(1) * CGate((0,), T(2)) * CGate((1,), S(2)) * H(2), 3, labels=labeller(3, 'j'))
sympy.physics.quantum.tests.test_circuitplot.test_Mz()
sympy.physics.quantum.tests.test_circuitplot.test_cnot()
sympy.physics.quantum.tests.test_circuitplot.test_create1()
sympy.physics.quantum.tests.test_circuitplot.test_createc()
sympy.physics.quantum.tests.test_circuitplot.test_ex1()
sympy.physics.quantum.tests.test_circuitplot.test_ex4()
sympy.physics.quantum.tests.test_circuitplot.test_labeller()
sympy.physics.quantum.tests.test_circuitplot.test_render_label()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_qapply.py----------------------------------------
A:sympy.physics.quantum.tests.test_qapply.(j, jp, m, mp)->symbols("j j' m m'")
A:sympy.physics.quantum.tests.test_qapply.z->JzKet(1, 0)
A:sympy.physics.quantum.tests.test_qapply.po->JzKet(1, 1)
A:sympy.physics.quantum.tests.test_qapply.mo->JzKet(1, -1)
A:sympy.physics.quantum.tests.test_qapply.A->Ket(x, y)
A:sympy.physics.quantum.tests.test_qapply.a->BosonOp('a')
A:sympy.physics.quantum.tests.test_qapply.b->BosonOp('b')
A:sympy.physics.quantum.tests.test_qapply.ket1->TensorProduct(BosonFockKet(1), BosonFockKet(2))
A:sympy.physics.quantum.tests.test_qapply.ket2->TensorProduct(BosonFockKet(0), BosonFockKet(0))
A:sympy.physics.quantum.tests.test_qapply.ket3->TensorProduct(BosonFockKet(0), BosonFockKet(2))
A:sympy.physics.quantum.tests.test_qapply.bra1->TensorProduct(BosonFockBra(0), BosonFockBra(0))
A:sympy.physics.quantum.tests.test_qapply.bra2->TensorProduct(BosonFockBra(1), BosonFockBra(2))
A:sympy.physics.quantum.tests.test_qapply.(x, y)->symbols('x y', commutative=False)
A:sympy.physics.quantum.tests.test_qapply.B->Operator('B')
A:sympy.physics.quantum.tests.test_qapply.d->Density([Jz * mo, 0.5], [Jz * po, 0.5])
A:sympy.physics.quantum.tests.test_qapply.expr1->TensorProduct(Jz * JzKet(S(2), S.NegativeOne) / sqrt(2), Jz * JzKet(S.Half, S.Half))
A:sympy.physics.quantum.tests.test_qapply.result->Mul(S.NegativeOne, Rational(1, 4), 2 ** S.Half, hbar ** 2)
A:sympy.physics.quantum.tests.test_qapply.P1->qapply(P1, dagger=True)
A:sympy.physics.quantum.tests.test_qapply.P2->qapply(P2, dagger=True)
sympy.physics.quantum.tests.test_qapply.Foo(Operator)
sympy.physics.quantum.tests.test_qapply.Foo._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.tests.test_qapply.test_anticommutator()
sympy.physics.quantum.tests.test_qapply.test_basic()
sympy.physics.quantum.tests.test_qapply.test_commutator()
sympy.physics.quantum.tests.test_qapply.test_dagger()
sympy.physics.quantum.tests.test_qapply.test_density()
sympy.physics.quantum.tests.test_qapply.test_extra()
sympy.physics.quantum.tests.test_qapply.test_innerproduct()
sympy.physics.quantum.tests.test_qapply.test_issue24158_ket_times_op()
sympy.physics.quantum.tests.test_qapply.test_issue3044()
sympy.physics.quantum.tests.test_qapply.test_issue_6073()
sympy.physics.quantum.tests.test_qapply.test_outerproduct()
sympy.physics.quantum.tests.test_qapply.test_tensorproduct()
sympy.physics.quantum.tests.test_qapply.test_zero()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_shor.py----------------------------------------
sympy.physics.quantum.tests.test_shor.test_CMod()
sympy.physics.quantum.tests.test_shor.test_continued_frac()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_qasm.py----------------------------------------
A:sympy.physics.quantum.tests.test_qasm.q->Qasm('def CQ,1,Q', 'qubit q0', 'qubit q1', 'CQ q0,q1')
sympy.physics.quantum.tests.test_qasm.test_qasm_1q()
sympy.physics.quantum.tests.test_qasm.test_qasm_2q()
sympy.physics.quantum.tests.test_qasm.test_qasm_3q()
sympy.physics.quantum.tests.test_qasm.test_qasm_ex1()
sympy.physics.quantum.tests.test_qasm.test_qasm_ex1_methodcalls()
sympy.physics.quantum.tests.test_qasm.test_qasm_ex2()
sympy.physics.quantum.tests.test_qasm.test_qasm_fixcommand()
sympy.physics.quantum.tests.test_qasm.test_qasm_flip_index()
sympy.physics.quantum.tests.test_qasm.test_qasm_fullsplit()
sympy.physics.quantum.tests.test_qasm.test_qasm_get_index()
sympy.physics.quantum.tests.test_qasm.test_qasm_nonblank()
sympy.physics.quantum.tests.test_qasm.test_qasm_qdef()
sympy.physics.quantum.tests.test_qasm.test_qasm_readqasm()
sympy.physics.quantum.tests.test_qasm.test_qasm_stripquotes()
sympy.physics.quantum.tests.test_qasm.test_qasm_swap()
sympy.physics.quantum.tests.test_qasm.test_qasm_trim()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_circuitutils.py----------------------------------------
A:sympy.physics.quantum.tests.test_circuitutils.x->X(0)
A:sympy.physics.quantum.tests.test_circuitutils.y->Y(0)
A:sympy.physics.quantum.tests.test_circuitutils.z->Z(0)
A:sympy.physics.quantum.tests.test_circuitutils.h->H(0)
A:sympy.physics.quantum.tests.test_circuitutils.x1->X(1)
A:sympy.physics.quantum.tests.test_circuitutils.y1->Y(1)
A:sympy.physics.quantum.tests.test_circuitutils.i0->Symbol('i0')
A:sympy.physics.quantum.tests.test_circuitutils.x_i0->X(i0)
A:sympy.physics.quantum.tests.test_circuitutils.y_i0->Y(i0)
A:sympy.physics.quantum.tests.test_circuitutils.z_i0->Z(i0)
A:sympy.physics.quantum.tests.test_circuitutils.h_i0->H(i0)
A:sympy.physics.quantum.tests.test_circuitutils.result->find_subcircuit(circuit, subcircuit)
A:sympy.physics.quantum.tests.test_circuitutils.cnot->CNOT(1, 0)
A:sympy.physics.quantum.tests.test_circuitutils.cgate_z->CGate((0,), Z(1))
A:sympy.physics.quantum.tests.test_circuitutils.actual->random_insert(circuit, eq_ids, seed=[loc, choice])
A:sympy.physics.quantum.tests.test_circuitutils.(x, y, z, h)->create_gate_sequence()
A:sympy.physics.quantum.tests.test_circuitutils.(actual, act_map, sndx, gen)->convert_to_symbolic_indices(args)
A:sympy.physics.quantum.tests.test_circuitutils.(x1, y1, z1, h1)->create_gate_sequence(1)
A:sympy.physics.quantum.tests.test_circuitutils.i1->Symbol('i1')
A:sympy.physics.quantum.tests.test_circuitutils.cnot_10->CNOT(1, 0)
A:sympy.physics.quantum.tests.test_circuitutils.cnot_01->CNOT(0, 1)
A:sympy.physics.quantum.tests.test_circuitutils.cgate_z_10->CGate(1, Z(0))
A:sympy.physics.quantum.tests.test_circuitutils.cgate_z_01->CGate(0, Z(1))
A:sympy.physics.quantum.tests.test_circuitutils.i2->Symbol('i2')
A:sympy.physics.quantum.tests.test_circuitutils.ccgate_z->CGate(i0, CGate(i1, Z(i2)))
A:sympy.physics.quantum.tests.test_circuitutils.ccgate_x->CGate(i1, CGate(i2, X(i0)))
A:sympy.physics.quantum.tests.test_circuitutils.index_gen->numbered_symbols(prefix='i', start=1)
A:sympy.physics.quantum.tests.test_circuitutils.i3->Symbol('i3')
A:sympy.physics.quantum.tests.test_circuitutils.cgate_x0_c321->CGate((3, 2, 1), X(0))
A:sympy.physics.quantum.tests.test_circuitutils.cnot_i1_i0->CNOT(i1, i0)
A:sympy.physics.quantum.tests.test_circuitutils.cnot_i0_i1->CNOT(i0, i1)
A:sympy.physics.quantum.tests.test_circuitutils.cgate_z_i1_i0->CGate(i1, Z(i0))
A:sympy.physics.quantum.tests.test_circuitutils.ids->list(bfs_identity_search(gate_list, 2, max_depth=4))
A:sympy.physics.quantum.tests.test_circuitutils.circuit->Mul(*circuit)
A:sympy.physics.quantum.tests.test_circuitutils.eq_ids->flatten_ids(ids)
sympy.physics.quantum.tests.test_circuitutils.create_gate_sequence(qubit=0)
sympy.physics.quantum.tests.test_circuitutils.test_convert_to_real_indices()
sympy.physics.quantum.tests.test_circuitutils.test_convert_to_symbolic_indices()
sympy.physics.quantum.tests.test_circuitutils.test_find_subcircuit()
sympy.physics.quantum.tests.test_circuitutils.test_kmp_table()
sympy.physics.quantum.tests.test_circuitutils.test_random_insert()
sympy.physics.quantum.tests.test_circuitutils.test_random_reduce()
sympy.physics.quantum.tests.test_circuitutils.test_replace_subcircuit()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_boson.py----------------------------------------
A:sympy.physics.quantum.tests.test_boson.a->BosonOp('a')
A:sympy.physics.quantum.tests.test_boson.b->BosonOp('b')
sympy.physics.quantum.tests.test_boson.test_boson_states()
sympy.physics.quantum.tests.test_boson.test_bosonoperator()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_operator.py----------------------------------------
A:sympy.physics.quantum.tests.test_operator.t_ket->CustomKet()
A:sympy.physics.quantum.tests.test_operator.t_op->CustomOp()
A:sympy.physics.quantum.tests.test_operator.A->Operator('A')
A:sympy.physics.quantum.tests.test_operator.B->Operator('B')
A:sympy.physics.quantum.tests.test_operator.C->Operator('C')
A:sympy.physics.quantum.tests.test_operator.H->HermitianOperator('H')
A:sympy.physics.quantum.tests.test_operator.U->UnitaryOperator('U')
A:sympy.physics.quantum.tests.test_operator.I->IdentityOperator()
A:sympy.physics.quantum.tests.test_operator.O->Operator('O')
A:sympy.physics.quantum.tests.test_operator.x->symbols('x', commutative=True)
A:sympy.physics.quantum.tests.test_operator.k->Ket('k')
A:sympy.physics.quantum.tests.test_operator.b->Bra('b')
A:sympy.physics.quantum.tests.test_operator.op->OuterProduct(k, b)
A:sympy.physics.quantum.tests.test_operator.f->Function('f')
A:sympy.physics.quantum.tests.test_operator.d->DifferentialOperator(1 / r * Derivative(r * Derivative(f(r, th), r), r) + 1 / r ** 2 * Derivative(f(r, th), th, 2), f(r, th))
A:sympy.physics.quantum.tests.test_operator.g->Wavefunction(x ** 3, x)
A:sympy.physics.quantum.tests.test_operator.y->Symbol('y')
A:sympy.physics.quantum.tests.test_operator.w->Wavefunction(r ** 2 * sin(th), r, (th, 0, pi))
A:sympy.physics.quantum.tests.test_operator.(r, th)->symbols('r th')
A:sympy.physics.quantum.tests.test_operator.X->XGate(0)
A:sympy.physics.quantum.tests.test_operator.n->symbols('n', integer=True)
sympy.physics.quantum.tests.test_operator.CustomKet(Ket)
sympy.physics.quantum.tests.test_operator.CustomKet.default_args(self)
sympy.physics.quantum.tests.test_operator.CustomOp(HermitianOperator)
sympy.physics.quantum.tests.test_operator.CustomOp.default_args(self)
sympy.physics.quantum.tests.test_operator.test_differential_operator()
sympy.physics.quantum.tests.test_operator.test_eval_power()
sympy.physics.quantum.tests.test_operator.test_hermitian()
sympy.physics.quantum.tests.test_operator.test_identity()
sympy.physics.quantum.tests.test_operator.test_operator()
sympy.physics.quantum.tests.test_operator.test_operator_dagger()
sympy.physics.quantum.tests.test_operator.test_operator_inv()
sympy.physics.quantum.tests.test_operator.test_outer_product()
sympy.physics.quantum.tests.test_operator.test_unitary()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_operatorordering.py----------------------------------------
A:sympy.physics.quantum.tests.test_operatorordering.a->BosonOp('a')
A:sympy.physics.quantum.tests.test_operatorordering.c->FermionOp('c')
sympy.physics.quantum.tests.test_operatorordering.test_normal_order()
sympy.physics.quantum.tests.test_operatorordering.test_normal_ordered_form()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_qft.py----------------------------------------
A:sympy.physics.quantum.tests.test_qft.x->Symbol('x')
A:sympy.physics.quantum.tests.test_qft.c->QFT(0, 3)
A:sympy.physics.quantum.tests.test_qft.a->represent(c, nqubits=3)
A:sympy.physics.quantum.tests.test_qft.b->represent(c.decompose(), nqubits=3)
sympy.physics.quantum.tests.test_qft.test_RkGate()
sympy.physics.quantum.tests.test_qft.test_qft_represent()
sympy.physics.quantum.tests.test_qft.test_quantum_fourier()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_matrixutils.py----------------------------------------
A:sympy.physics.quantum.tests.test_matrixutils.m->Matrix([[1, 2], [3, 4]])
A:sympy.physics.quantum.tests.test_matrixutils.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_matrixutils.result->sparse.csr_matrix([[1, 2], [3, 4]], dtype='complex')
A:sympy.physics.quantum.tests.test_matrixutils.l1->zeros(4)
A:sympy.physics.quantum.tests.test_matrixutils.l2->zeros(4)
A:sympy.physics.quantum.tests.test_matrixutils.l3->zeros(2)
A:sympy.physics.quantum.tests.test_matrixutils.vec->Matrix([1, 2, 3])
A:sympy.physics.quantum.tests.test_matrixutils.numpyl1->import_module('numpy').array(l1.tolist())
A:sympy.physics.quantum.tests.test_matrixutils.numpyl2->import_module('numpy').array(vec.tolist())
A:sympy.physics.quantum.tests.test_matrixutils.numpy_product->import_module('numpy').kron(l1, np.kron(vec, l2))
A:sympy.physics.quantum.tests.test_matrixutils.sympy_product->matrix_tensor_product(l1, vec, l2)
A:sympy.physics.quantum.tests.test_matrixutils.random_matrix1->import_module('numpy').random.rand(randint(1, 5), randint(1, 5))
A:sympy.physics.quantum.tests.test_matrixutils.random_matrix2->import_module('numpy').random.rand(randint(1, 5), randint(1, 5))
A:sympy.physics.quantum.tests.test_matrixutils.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_matrixutils.sym->matrix_zeros(4, 4, format='sympy')
A:sympy.physics.quantum.tests.test_matrixutils.num->matrix_zeros(4, 4, format='numpy')
A:sympy.physics.quantum.tests.test_matrixutils.sci->matrix_zeros(4, 4, format='scipy.sparse')
sympy.physics.quantum.tests.test_matrixutils.test_matrix_tensor_product()
sympy.physics.quantum.tests.test_matrixutils.test_matrix_to_zero()
sympy.physics.quantum.tests.test_matrixutils.test_matrix_zeros_numpy()
sympy.physics.quantum.tests.test_matrixutils.test_matrix_zeros_scipy()
sympy.physics.quantum.tests.test_matrixutils.test_matrix_zeros_sympy()
sympy.physics.quantum.tests.test_matrixutils.test_sympy_to_sympy()
sympy.physics.quantum.tests.test_matrixutils.test_to_numpy()
sympy.physics.quantum.tests.test_matrixutils.test_to_scipy_sparse()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_sho1d.py----------------------------------------
A:sympy.physics.quantum.tests.test_sho1d.ad->RaisingOp('a')
A:sympy.physics.quantum.tests.test_sho1d.a->LoweringOp('a')
A:sympy.physics.quantum.tests.test_sho1d.k->SHOKet('k')
A:sympy.physics.quantum.tests.test_sho1d.kz->SHOKet(0)
A:sympy.physics.quantum.tests.test_sho1d.kf->SHOKet(1)
A:sympy.physics.quantum.tests.test_sho1d.k3->SHOKet(3)
A:sympy.physics.quantum.tests.test_sho1d.b->SHOBra('b')
A:sympy.physics.quantum.tests.test_sho1d.b3->SHOBra(3)
A:sympy.physics.quantum.tests.test_sho1d.H->Hamiltonian('H')
A:sympy.physics.quantum.tests.test_sho1d.N->NumberOp('N')
A:sympy.physics.quantum.tests.test_sho1d.omega->Symbol('omega')
A:sympy.physics.quantum.tests.test_sho1d.m->Symbol('m')
A:sympy.physics.quantum.tests.test_sho1d.ndim->Integer(4)
A:sympy.physics.quantum.tests.test_sho1d.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_sho1d.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_sho1d.ad_rep_sympy->represent(ad, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.a_rep->represent(a, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.N_rep->represent(N, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.H_rep->represent(H, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.k3_rep->represent(k3, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.b3_rep->represent(b3, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.ad_rep_numpy->represent(ad, basis=N, ndim=4, format='numpy')
A:sympy.physics.quantum.tests.test_sho1d.ad_rep_scipy->represent(ad, basis=N, ndim=4, format='scipy.sparse', spmatrix='lil')
sympy.physics.quantum.tests.test_sho1d.test_Hamiltonian()
sympy.physics.quantum.tests.test_sho1d.test_LoweringOp()
sympy.physics.quantum.tests.test_sho1d.test_NumberOp()
sympy.physics.quantum.tests.test_sho1d.test_RaisingOp()
sympy.physics.quantum.tests.test_sho1d.test_SHOKet()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_anticommutator.py----------------------------------------
A:sympy.physics.quantum.tests.test_anticommutator.(a, b, c)->symbols('a,b,c')
A:sympy.physics.quantum.tests.test_anticommutator.(A, B, C, D)->symbols('A,B,C,D', commutative=False)
A:sympy.physics.quantum.tests.test_anticommutator.ac->AComm(A, B)
A:sympy.physics.quantum.tests.test_anticommutator.F->Foo('F')
A:sympy.physics.quantum.tests.test_anticommutator.B->Bar('B')
A:sympy.physics.quantum.tests.test_anticommutator.T->Tam('T')
sympy.physics.quantum.tests.test_anticommutator.Bar(Operator)
sympy.physics.quantum.tests.test_anticommutator.Foo(Operator)
sympy.physics.quantum.tests.test_anticommutator.Foo._eval_anticommutator_Bar(self,bar)
sympy.physics.quantum.tests.test_anticommutator.Tam(Operator)
sympy.physics.quantum.tests.test_anticommutator.Tam._eval_anticommutator_Foo(self,foo)
sympy.physics.quantum.tests.test_anticommutator.test_anticommutator()
sympy.physics.quantum.tests.test_anticommutator.test_anticommutator_dagger()
sympy.physics.quantum.tests.test_anticommutator.test_commutator_identities()
sympy.physics.quantum.tests.test_anticommutator.test_eval_commutator()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_piab.py----------------------------------------
A:sympy.physics.quantum.tests.test_piab.(i, j, n, x)->symbols('i j n x')
sympy.physics.quantum.tests.test_piab.test_H()
sympy.physics.quantum.tests.test_piab.test_states()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_constants.py----------------------------------------
sympy.physics.quantum.tests.test_constants.test_hbar()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_gate.py----------------------------------------
A:sympy.physics.quantum.tests.test_gate.h->HadamardGate(1)
A:sympy.physics.quantum.tests.test_gate.i0->Wild('i0')
A:sympy.physics.quantum.tests.test_gate.i1->Wild('i1')
A:sympy.physics.quantum.tests.test_gate.h0_w1->HadamardGate(i0)
A:sympy.physics.quantum.tests.test_gate.h0_w2->HadamardGate(i0)
A:sympy.physics.quantum.tests.test_gate.h1_w1->HadamardGate(i1)
A:sympy.physics.quantum.tests.test_gate.cnot_10_w1->CNOT(i1, i0)
A:sympy.physics.quantum.tests.test_gate.cnot_10_w2->CNOT(i1, i0)
A:sympy.physics.quantum.tests.test_gate.cnot_01_w1->CNOT(i0, i1)
A:sympy.physics.quantum.tests.test_gate.(a, b, c, d)->symbols('a,b,c,d')
A:sympy.physics.quantum.tests.test_gate.uMat->Matrix([[a, b], [c, d]])
A:sympy.physics.quantum.tests.test_gate.u1->UGate((0,), uMat)
A:sympy.physics.quantum.tests.test_gate.u2->UGate(0, uMat2)
A:sympy.physics.quantum.tests.test_gate.u2Rep->represent(u2, nqubits=2)
A:sympy.physics.quantum.tests.test_gate.CNOTMatrix->Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]])
A:sympy.physics.quantum.tests.test_gate.ToffoliGate->CGate((3, 0), XGate(1))
A:sympy.physics.quantum.tests.test_gate.CYGate->CGate(1, YGate(0))
A:sympy.physics.quantum.tests.test_gate.CYGate_matrix->Matrix(((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, -I), (0, 0, I, 0)))
A:sympy.physics.quantum.tests.test_gate.CZGate->CGate(0, ZGate(1))
A:sympy.physics.quantum.tests.test_gate.CZGate_matrix->Matrix(((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, -1)))
A:sympy.physics.quantum.tests.test_gate.CPhaseGate->CGate(0, PhaseGate(1))
A:sympy.physics.quantum.tests.test_gate.cMat->Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, a, b], [0, 0, c, d]])
A:sympy.physics.quantum.tests.test_gate.cu1->CGate(1, u1)
A:sympy.physics.quantum.tests.test_gate.(v, w, f, g)->symbols('v w f g')
A:sympy.physics.quantum.tests.test_gate.uMat1->ImmutableMatrix([[v, w], [f, g]])
A:sympy.physics.quantum.tests.test_gate.cMat1->Matrix([[v, w + 1, 0, 0], [f + 1, g, 0, 0], [0, 0, v, w + 1], [0, 0, f + 1, g]])
A:sympy.physics.quantum.tests.test_gate.uMat2->ImmutableMatrix([[1 / sqrt(2), 1 / sqrt(2)], [I / sqrt(2), -I / sqrt(2)]])
A:sympy.physics.quantum.tests.test_gate.cMat2_1->Matrix([[Rational(1, 2) + I / 2, Rational(1, 2) - I / 2], [Rational(1, 2) - I / 2, Rational(1, 2) + I / 2]])
A:sympy.physics.quantum.tests.test_gate.cMat2_2->Matrix([[1, 0], [0, I]])
A:sympy.physics.quantum.tests.test_gate.answer->represent(circuit, nqubits=2)
A:sympy.physics.quantum.tests.test_gate.circuit->CNotGate(1, 0)
A:sympy.physics.quantum.tests.test_gate.e->AntiCommutator(g1(0), g2(1))
A:sympy.physics.quantum.tests.test_gate.swap_gate_matrix->Matrix(((1, 0, 0, 0), (0, 0, 1, 0), (0, 1, 0, 0), (0, 0, 0, 1)))
A:sympy.physics.quantum.tests.test_gate.a->matrix_to_zero(represent(e, nqubits=2, format='sympy'))
A:sympy.physics.quantum.tests.test_gate.b->matrix_to_zero(represent(e.doit(), nqubits=2, format='sympy'))
A:sympy.physics.quantum.tests.test_gate.c->random_circuit(10, 3)
A:sympy.physics.quantum.tests.test_gate.m->represent(c, nqubits=3)
A:sympy.physics.quantum.tests.test_gate.x->XGate(1, 2)
A:sympy.physics.quantum.tests.test_gate.x_dagger->Dagger(x)
A:sympy.physics.quantum.tests.test_gate.y->YGate(1, 2)
A:sympy.physics.quantum.tests.test_gate.y_dagger->Dagger(y)
A:sympy.physics.quantum.tests.test_gate.z->ZGate(1, 2)
A:sympy.physics.quantum.tests.test_gate.z_dagger->Dagger(z)
sympy.physics.quantum.tests.test_gate.test_UGate()
sympy.physics.quantum.tests.test_gate.test_UGate_CGate_combo()
sympy.physics.quantum.tests.test_gate.test_UGate_OneQubitGate_combo()
sympy.physics.quantum.tests.test_gate.test_cgate()
sympy.physics.quantum.tests.test_gate.test_cnot_commutators()
sympy.physics.quantum.tests.test_gate.test_cnot_gate()
sympy.physics.quantum.tests.test_gate.test_compound_gates()
sympy.physics.quantum.tests.test_gate.test_gate()
sympy.physics.quantum.tests.test_gate.test_gate_simp()
sympy.physics.quantum.tests.test_gate.test_gate_sort()
sympy.physics.quantum.tests.test_gate.test_hermitian_XGate()
sympy.physics.quantum.tests.test_gate.test_hermitian_YGate()
sympy.physics.quantum.tests.test_gate.test_hermitian_ZGate()
sympy.physics.quantum.tests.test_gate.test_one_qubit_anticommutators()
sympy.physics.quantum.tests.test_gate.test_one_qubit_commutators()
sympy.physics.quantum.tests.test_gate.test_random_circuit()
sympy.physics.quantum.tests.test_gate.test_represent_hadamard()
sympy.physics.quantum.tests.test_gate.test_represent_phasegate()
sympy.physics.quantum.tests.test_gate.test_represent_tgate()
sympy.physics.quantum.tests.test_gate.test_represent_xgate()
sympy.physics.quantum.tests.test_gate.test_represent_ygate()
sympy.physics.quantum.tests.test_gate.test_represent_zgate()
sympy.physics.quantum.tests.test_gate.test_swap_gate()
sympy.physics.quantum.tests.test_gate.test_unitary_XGate()
sympy.physics.quantum.tests.test_gate.test_unitary_YGate()
sympy.physics.quantum.tests.test_gate.test_unitary_ZGate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_trace.py----------------------------------------
A:sympy.physics.quantum.tests.test_trace.(a, b, c, d, Y)->symbols('a b c d Y')
A:sympy.physics.quantum.tests.test_trace.(A, B, C, D)->symbols('A B C D', commutative=False)
A:sympy.physics.quantum.tests.test_trace.M->Matrix([[1, 1], [2, 2]])
A:sympy.physics.quantum.tests.test_trace.t->Tr((A + B) * (B * B) * C * D)
A:sympy.physics.quantum.tests.test_trace.(a, b, c, d)->symbols('a b c d')
A:sympy.physics.quantum.tests.test_trace.(A, B, C, D, E, F, G)->symbols('A B C D E F G', commutative=False)
A:sympy.physics.quantum.tests.test_trace.t1->Tr(A * B)
A:sympy.physics.quantum.tests.test_trace.t2->Tr(A * B).permute(1)
sympy.physics.quantum.tests.test_trace.test_deprecated_core_trace()
sympy.physics.quantum.tests.test_trace.test_permute()
sympy.physics.quantum.tests.test_trace.test_trace_doit()
sympy.physics.quantum.tests.test_trace.test_trace_new()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_cg.py----------------------------------------
A:sympy.physics.quantum.tests.test_cg.(j, m1, m1p, m2, m2p)->symbols('j m1 m1p m2 m2p')
A:sympy.physics.quantum.tests.test_cg.a->CG(S.Half, S.Half, S.Half, Rational(-1, 2), j, 0)
A:sympy.physics.quantum.tests.test_cg.b->CG(S.Half, Rational(-1, 2), S.Half, S.Half, j, 0)
A:sympy.physics.quantum.tests.test_cg.c->CG(1, 1, 1, -1, j, 0)
A:sympy.physics.quantum.tests.test_cg.d->CG(1, 0, 1, 0, j, 0)
A:sympy.physics.quantum.tests.test_cg.e->CG(1, -1, 1, 1, j, 0)
A:sympy.physics.quantum.tests.test_cg.(x, a, b, c, cp, alpha, beta, gamma, gammap)->symbols('x a b c cp alpha beta gamma gammap')
sympy.physics.quantum.tests.test_cg.test_cg_simp_add()
sympy.physics.quantum.tests.test_cg.test_cg_simp_sum()
sympy.physics.quantum.tests.test_cg.test_doit()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_cartesian.py----------------------------------------
A:sympy.physics.quantum.tests.test_cartesian.(x, y, z, x_1, x_2, x_3, y_1, z_1)->symbols('x,y,z,x_1,x_2,x_3,y_1,z_1')
A:sympy.physics.quantum.tests.test_cartesian.(px, py, px_1, px_2)->symbols('px py px_1 px_2')
A:sympy.physics.quantum.tests.test_cartesian.rep_p->represent(XOp(), basis=PxOp)
A:sympy.physics.quantum.tests.test_cartesian.rep_x->represent(PxOp(), basis=XOp)
A:sympy.physics.quantum.tests.test_cartesian.test_ket->PositionKet3D(x, y, z)
A:sympy.physics.quantum.tests.test_cartesian.other_ket->PositionKet3D(x_1, y_1, z_1)
sympy.physics.quantum.tests.test_cartesian.test_3dpos()
sympy.physics.quantum.tests.test_cartesian.test_p()
sympy.physics.quantum.tests.test_cartesian.test_x()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_commutator.py----------------------------------------
A:sympy.physics.quantum.tests.test_commutator.(a, b, c)->symbols('a,b,c')
A:sympy.physics.quantum.tests.test_commutator.n->symbols('n', integer=True)
A:sympy.physics.quantum.tests.test_commutator.(A, B, C, D)->symbols('A,B,C,D', commutative=False)
A:sympy.physics.quantum.tests.test_commutator.c->Comm(A, B)
A:sympy.physics.quantum.tests.test_commutator.comm->Comm(A * B, C)
A:sympy.physics.quantum.tests.test_commutator.F->Foo('F')
A:sympy.physics.quantum.tests.test_commutator.B->Bar('B')
A:sympy.physics.quantum.tests.test_commutator.T->Tam('T')
sympy.physics.quantum.tests.test_commutator.Bar(Operator)
sympy.physics.quantum.tests.test_commutator.Foo(Operator)
sympy.physics.quantum.tests.test_commutator.Foo._eval_commutator_Bar(self,bar)
sympy.physics.quantum.tests.test_commutator.Tam(Operator)
sympy.physics.quantum.tests.test_commutator.Tam._eval_commutator_Foo(self,foo)
sympy.physics.quantum.tests.test_commutator.test_commutator()
sympy.physics.quantum.tests.test_commutator.test_commutator_dagger()
sympy.physics.quantum.tests.test_commutator.test_commutator_identities()
sympy.physics.quantum.tests.test_commutator.test_eval_commutator()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_pauli.py----------------------------------------
A:sympy.physics.quantum.tests.test_pauli.up->SigmaZBra(0)
A:sympy.physics.quantum.tests.test_pauli.down->SigmaZBra(1)
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_adjoint()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_adjoint_with_labels()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_anticommutator()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_commutator()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_commutator_with_labels()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_multiplication()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_multiplication_with_labels()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_types()
sympy.physics.quantum.tests.test_pauli.test_pauli_states()
sympy.physics.quantum.tests.test_pauli.test_printing()
sympy.physics.quantum.tests.test_pauli.test_represent()
sympy.physics.quantum.tests.test_pauli.test_use_name()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/quantum/tests/test_dagger.py----------------------------------------
A:sympy.physics.quantum.tests.test_dagger.x->symbols('x')
A:sympy.physics.quantum.tests.test_dagger.i->Integer(3)
A:sympy.physics.quantum.tests.test_dagger.p->symbols('p')
A:sympy.physics.quantum.tests.test_dagger.A->symbols('A', commutative=False)
A:sympy.physics.quantum.tests.test_dagger.m->Matrix([[I, x * I], [2, 4]])
A:sympy.physics.quantum.tests.test_dagger.O->Operator('O')
A:sympy.physics.quantum.tests.test_dagger.I->IdentityOperator()
A:sympy.physics.quantum.tests.test_dagger.f->Foo()
A:sympy.physics.quantum.tests.test_dagger.d->Dagger(f)
A:sympy.physics.quantum.tests.test_dagger.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_dagger.a->sparse.csr_matrix([[1.0 + 0j, 2j], [-1j, 2.0 + 0j]])
A:sympy.physics.quantum.tests.test_dagger.adag->sparse.csr_matrix([[1.0 + 0j, 2j], [-1j, 2.0 + 0j]]).copy().transpose().conjugate()
A:sympy.physics.quantum.tests.test_dagger.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
sympy.physics.quantum.tests.test_dagger.Foo(Expr)
sympy.physics.quantum.tests.test_dagger.Foo._eval_adjoint(self)
sympy.physics.quantum.tests.test_dagger.test_dagger_mul()
sympy.physics.quantum.tests.test_dagger.test_eval_adjoint()
sympy.physics.quantum.tests.test_dagger.test_matrix()
sympy.physics.quantum.tests.test_dagger.test_numpy_dagger()
sympy.physics.quantum.tests.test_dagger.test_scalars()
sympy.physics.quantum.tests.test_dagger.test_scipy_sparse_dagger()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/hep/gamma_matrices.py----------------------------------------
A:sympy.physics.hep.gamma_matrices.LorentzIndex->TensorIndexType('LorentzIndex', dim=4, dummy_name='L')
A:sympy.physics.hep.gamma_matrices.GammaMatrix->TensorHead('GammaMatrix', [LorentzIndex], TensorSymmetry.no_symmetry(1), comm=None)
A:sympy.physics.hep.gamma_matrices.(extracted_expr, residual_expr)->extract_type_tens(expression, GammaMatrix)
A:sympy.physics.hep.gamma_matrices.res_expr->_simplify_single_line(extracted_expr)
A:sympy.physics.hep.gamma_matrices.elim->set()
A:sympy.physics.hep.gamma_matrices.ta->ex.sorted_components().split()
A:sympy.physics.hep.gamma_matrices.mu->TensorIndex('mu', LorentzIndex)
A:sympy.physics.hep.gamma_matrices.ex->ex.sorted_components().sorted_components()
A:sympy.physics.hep.gamma_matrices.t->t.expand().expand()
A:sympy.physics.hep.gamma_matrices.res->_trace_single_line(t)
A:sympy.physics.hep.gamma_matrices.(t1, t2)->extract_type_tens(expression, GammaMatrix)
A:sympy.physics.hep.gamma_matrices.t1->_gamma_trace1(*a[i:j])
A:sympy.physics.hep.gamma_matrices.ncomps->len(components)
A:sympy.physics.hep.gamma_matrices.a->t.expand().expand().split()
A:sympy.physics.hep.gamma_matrices.t2->tensor_mul(*a2)
A:sympy.physics.hep.gamma_matrices.t3->t3.contract_metric(g).contract_metric(g)
A:sympy.physics.hep.gamma_matrices.n->len(a)
A:sympy.physics.hep.gamma_matrices.dum->sorted(dum)
A:sympy.physics.hep.gamma_matrices.first_dum_pos->min(map(min, dum))
A:sympy.physics.hep.gamma_matrices.number_of_contractions->len(dum)
A:sympy.physics.hep.gamma_matrices.next_ones->links.pop(pointer)
A:sympy.physics.hep.gamma_matrices.pointer->min(links.keys())
A:sympy.physics.hep.gamma_matrices.expr2->list(reversed(prepend_indices))
sympy.physics.hep.gamma_matrices._gamma_trace1(*a)
sympy.physics.hep.gamma_matrices._simplify_single_line(expression)
sympy.physics.hep.gamma_matrices._trace_single_line(t)
sympy.physics.hep.gamma_matrices.extract_type_tens(expression,component)
sympy.physics.hep.gamma_matrices.gamma_trace(t)
sympy.physics.hep.gamma_matrices.kahane_simplify(expression)
sympy.physics.hep.gamma_matrices.simplify_gamma_expression(expression)
sympy.physics.hep.gamma_matrices.simplify_gpgp(ex,sort=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/hep/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/hep/tests/test_gamma_matrices.py----------------------------------------
A:sympy.physics.hep.tests.test_gamma_matrices.arg1->canon_bp(arg1)
A:sympy.physics.hep.tests.test_gamma_matrices.arg2->canon_bp(arg2)
A:sympy.physics.hep.tests.test_gamma_matrices.(mu, nu, rho, sigma)->tensor_indices('mu, nu, rho, sigma', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(a1, a2, a3, a4, a5, a6)->tensor_indices('a1:7', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52)->tensor_indices('mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(mu61, mu71, mu72)->tensor_indices('mu61, mu71, mu72', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(m0, m1, m2, m3, m4, m5, m6)->tensor_indices('m0:7', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.ts->simplify_gamma_expression(t)
A:sympy.physics.hep.tests.test_gamma_matrices.st->tfunc(t)
A:sympy.physics.hep.tests.test_gamma_matrices.t->G(m0)
A:sympy.physics.hep.tests.test_gamma_matrices.(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15)->tensor_indices('i0:16', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.r->gamma_trace(t)
A:sympy.physics.hep.tests.test_gamma_matrices.(i, j, k)->tensor_indices('i,j,k', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.A->TensorHead('A', [LorentzIndex])
A:sympy.physics.hep.tests.test_gamma_matrices.(n0, n1, n2, n3, n4, n5)->tensor_indices('n0:6', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.t1->gamma_trace(t)
A:sympy.physics.hep.tests.test_gamma_matrices.t2->t2.contract_metric(g).contract_metric(g)
A:sympy.physics.hep.tests.test_gamma_matrices.(p, q)->tensor_heads('p,q', [LorentzIndex])
A:sympy.physics.hep.tests.test_gamma_matrices.(pi, ki, pf)->tensor_heads('pi, ki, pf', [LorentzIndex])
A:sympy.physics.hep.tests.test_gamma_matrices.(i0, i1, i2, i3, i4)->tensor_indices('i0:5', LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.x->Symbol('x')
A:sympy.physics.hep.tests.test_gamma_matrices.ta->gamma_trace(a)
A:sympy.physics.hep.tests.test_gamma_matrices.tb->gamma_trace(b)
A:sympy.physics.hep.tests.test_gamma_matrices.t_a_plus_b->gamma_trace(a + b)
sympy.physics.hep.tests.test_gamma_matrices._is_tensor_eq(arg1,arg2)
sympy.physics.hep.tests.test_gamma_matrices.execute_gamma_simplify_tests_for_function(tfunc,D)
sympy.physics.hep.tests.test_gamma_matrices.test_bug_13636()
sympy.physics.hep.tests.test_gamma_matrices.test_gamma_matrix_class()
sympy.physics.hep.tests.test_gamma_matrices.test_gamma_matrix_trace()
sympy.physics.hep.tests.test_gamma_matrices.test_kahane_algorithm()
sympy.physics.hep.tests.test_gamma_matrices.test_kahane_simplify1()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/physics/hep/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/diffgeom/rn.py----------------------------------------
A:sympy.diffgeom.rn.(x, y)->symbols('x y', real=True)
A:sympy.diffgeom.rn.(r, theta)->symbols('rho theta', nonnegative=True)
A:sympy.diffgeom.rn.(x, y, r, theta)->symbols('x y r theta', cls=Dummy)
A:sympy.diffgeom.rn.(R2.x, R2.y)(R2_origin.x, R2_origin.y)(R2_r.x, R2_r.y)->R2_r.coord_functions()
A:sympy.diffgeom.rn.(R2.r, R2.theta)(R2_origin.r, R2_origin.theta)(R2_p.r, R2_p.theta)->R2_p.coord_functions()
A:sympy.diffgeom.rn.(R2.e_x, R2.e_y)(R2_origin.e_x, R2_origin.e_y)(R2_r.e_x, R2_r.e_y)->R2_r.base_vectors()
A:sympy.diffgeom.rn.(R2.e_r, R2.e_theta)(R2_origin.e_r, R2_origin.e_theta)(R2_p.e_r, R2_p.e_theta)->R2_p.base_vectors()
A:sympy.diffgeom.rn.(R2.dx, R2.dy)(R2_origin.dx, R2_origin.dy)(R2_r.dx, R2_r.dy)->R2_r.base_oneforms()
A:sympy.diffgeom.rn.(R2.dr, R2.dtheta)(R2_origin.dr, R2_origin.dtheta)(R2_p.dr, R2_p.dtheta)->R2_p.base_oneforms()
A:sympy.diffgeom.rn.(x, y, z)->symbols('x y z', real=True)
A:sympy.diffgeom.rn.(rho, psi, r, theta, phi)->symbols('rho psi r theta phi', nonnegative=True)
A:sympy.diffgeom.rn.(x, y, z, rho, psi, r, theta, phi)->symbols('x y z rho psi r theta phi', cls=Dummy)
A:sympy.diffgeom.rn.(R3_r.x, R3_r.y, R3_r.z)->R3_r.coord_functions()
A:sympy.diffgeom.rn.(R3_c.rho, R3_c.psi, R3_c.z)->R3_c.coord_functions()
A:sympy.diffgeom.rn.(R3_s.r, R3_s.theta, R3_s.phi)->R3_s.coord_functions()
A:sympy.diffgeom.rn.(R3_r.e_x, R3_r.e_y, R3_r.e_z)->R3_r.base_vectors()
A:sympy.diffgeom.rn.(R3_c.e_rho, R3_c.e_psi, R3_c.e_z)->R3_c.base_vectors()
A:sympy.diffgeom.rn.(R3_s.e_r, R3_s.e_theta, R3_s.e_phi)->R3_s.base_vectors()
A:sympy.diffgeom.rn.(R3_r.dx, R3_r.dy, R3_r.dz)->R3_r.base_oneforms()
A:sympy.diffgeom.rn.(R3_c.drho, R3_c.dpsi, R3_c.dz)->R3_c.base_oneforms()
A:sympy.diffgeom.rn.(R3_s.dr, R3_s.dtheta, R3_s.dphi)->R3_s.base_oneforms()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/diffgeom/diffgeom.py----------------------------------------
A:sympy.diffgeom.diffgeom.name->Str(name)
A:sympy.diffgeom.diffgeom.dim->_sympify(dim)
A:sympy.diffgeom.diffgeom.obj->super().__new__(cls, wrt, christoffel)
A:sympy.diffgeom.diffgeom.obj.patches->_deprecated_list('\n            Manifold.patches is deprecated. The Manifold object is now\n            immutable. Instead use a separate list to keep track of the\n            patches.\n            ', [])
A:sympy.diffgeom.diffgeom.obj.coord_systems->_deprecated_list('\n            Patch.coord_systms is deprecated. The Patch class is now\n            immutable. Instead use a separate list to keep track of coordinate\n            systems.\n            ', [])
A:sympy.diffgeom.diffgeom.names->kwargs.get('names', None)
A:sympy.diffgeom.diffgeom.symbols->Tuple(*syms)
A:sympy.diffgeom.diffgeom.s1->Str(s1)
A:sympy.diffgeom.diffgeom.s2->Str(s2)
A:sympy.diffgeom.diffgeom.key->Tuple(self.name, sys.name)
A:sympy.diffgeom.diffgeom.relations->Dict(rel_temp)
A:sympy.diffgeom.diffgeom.obj.transforms->_deprecated_dict("\n            CoordSystem.transforms is deprecated. The CoordSystem class is now\n            immutable. Use the 'relations' keyword argument to the\n            CoordSystems() constructor to specify relations.\n            ", {})
A:sympy.diffgeom.diffgeom.obj._dummy->Dummy()
A:sympy.diffgeom.diffgeom.expr->expr.expand().expand()
A:sympy.diffgeom.diffgeom.ret->tuple((ret[s] for s in sym2))
A:sympy.diffgeom.diffgeom.forward->sys1.transform(sys2)
A:sympy.diffgeom.diffgeom.inv_results->cls._solve_inverse(sys1.symbols, sys2.symbols, forward, sys1.name, sys2.name)
A:sympy.diffgeom.diffgeom.signature->tuple(sys1.symbols)
A:sympy.diffgeom.diffgeom.path->cls._dijkstra(sys1, sys2)
A:sympy.diffgeom.diffgeom.sym1->tuple((Dummy() for i in sym2))
A:sympy.diffgeom.diffgeom.exprs->tuple((e.subs(zip(newsyms, exprs)) for e in newexprs))
A:sympy.diffgeom.diffgeom.path_dict[newsys][1]->list(path_dict[sys][1])
A:sympy.diffgeom.diffgeom.(from_coords, to_exprs)->dummyfy(from_coords, to_exprs)
A:sympy.diffgeom.diffgeom.to_sys.transforms[self]->self._inv_transf(from_coords, to_exprs)
A:sympy.diffgeom.diffgeom.transf->self.transformation(sys)
A:sympy.diffgeom.diffgeom.coordinates->Matrix(coordinates)
A:sympy.diffgeom.diffgeom.coords->point.coords(self._coord_sys)
A:sympy.diffgeom.diffgeom.result->result.subs(list(zip(d_funcs, vectors))).subs(list(zip(d_funcs, vectors)))
A:sympy.diffgeom.diffgeom.index->_sympify(index)
A:sympy.diffgeom.diffgeom.base_scalars->list(scalar_field.atoms(BaseScalarField))
A:sympy.diffgeom.diffgeom.d_result->d_result.subs(list(zip(d_funcs, vectors))).subs(list(zip(d_funcs, vectors)))
A:sympy.diffgeom.diffgeom.jac->cs.jacobian(to_sys, cs.coord_functions())
A:sympy.diffgeom.diffgeom.fields->expr.expand().expand().atoms(BaseScalarField, BaseVectorField)
A:sympy.diffgeom.diffgeom.coord_sys->_find_coords(expr).pop()
A:sympy.diffgeom.diffgeom.k->len(vector_fields)
A:sympy.diffgeom.diffgeom.t->f.rcall(*(c,) + v[:i] + v[i + 1:j] + v[j + 1:])
A:sympy.diffgeom.diffgeom.c->Commutator(v[i], v[j])
A:sympy.diffgeom.diffgeom.scalar->Mul(*[m for m in args if covariant_order(m) + contravariant_order(m) == 0])
A:sympy.diffgeom.diffgeom.tot_args->len(fields)
A:sympy.diffgeom.diffgeom.perms->permutations(fields)
A:sympy.diffgeom.diffgeom.tensor_prod->TensorProduct(*self.args)
A:sympy.diffgeom.diffgeom.expr_form_ord->covariant_order(expr)
A:sympy.diffgeom.diffgeom.lead_term->v(expr(*args))
A:sympy.diffgeom.diffgeom.rest->Add(*[Mul(*args[:i] + (Commutator(v, args[i]),) + args[i + 1:]) for i in range(len(args))])
A:sympy.diffgeom.diffgeom.christoffel->ImmutableDenseNDimArray(christoffel)
A:sympy.diffgeom.diffgeom.field->vectors_in_basis(field, self._coord_sys)
A:sympy.diffgeom.diffgeom.wrt_vector->self._coord_sys.base_vector(self._index)
A:sympy.diffgeom.diffgeom.wrt_scalar->self._coord_sys.coord_function(self._index)
A:sympy.diffgeom.diffgeom.vectors->_find_coords(expr).pop().base_vectors()
A:sympy.diffgeom.diffgeom.d->Add(*[self._christoffel[k, wrt_vector._index, v._index] * v._coord_sys.base_vector(k) for k in range(v._coord_sys.dim)])
A:sympy.diffgeom.diffgeom.coord_functions->_find_coords(expr).pop().coord_functions()
A:sympy.diffgeom.diffgeom.arbitrary_p->Point(coord_sys, gammas)
A:sympy.diffgeom.diffgeom.d_args->Matrix([s.as_dummy() for s in args])
A:sympy.diffgeom.diffgeom.reps->dict(zip(args, d_args))
A:sympy.diffgeom.diffgeom.d_exprs->Matrix([_sympify(expr).subs(reps) for expr in exprs])
A:sympy.diffgeom.diffgeom.matrix->matrix.subs(list(zip(s_fields, dums))).inv().subs(list(zip(dums, s_fields))).subs(list(zip(s_fields, dums))).inv().subs(list(zip(dums, s_fields)))
A:sympy.diffgeom.diffgeom.indices->list(range(coord_sys.dim))
A:sympy.diffgeom.diffgeom.ch_1st->metric_to_Christoffel_1st(expr)
A:sympy.diffgeom.diffgeom.s_fields->list(s_fields)
A:sympy.diffgeom.diffgeom.ch_2nd->metric_to_Christoffel_2nd(expr)
A:sympy.diffgeom.diffgeom.riemann->metric_to_Riemann_components(expr)
sympy.diffgeom.BaseCovarDerivativeOp(cls,coord_sys,index,christoffel)
sympy.diffgeom.BaseScalarField(cls,coord_sys,index,**kwargs)
sympy.diffgeom.BaseVectorField(cls,coord_sys,index,**kwargs)
sympy.diffgeom.Commutator(cls,v1,v2)
sympy.diffgeom.CoordSystem(cls,name,patch,symbols=None,relations={},**kwargs)
sympy.diffgeom.CoordinateSymbol(cls,coord_sys,index,**assumptions)
sympy.diffgeom.CovarDerivativeOp(cls,wrt,christoffel)
sympy.diffgeom.Differential(cls,form_field)
sympy.diffgeom.LieDerivative(cls,v_field,expr)
sympy.diffgeom.Manifold(cls,name,dim,**kwargs)
sympy.diffgeom.Patch(cls,name,manifold,**kwargs)
sympy.diffgeom.Point(cls,coord_sys,coords,**kwargs)
sympy.diffgeom.TensorProduct(cls,*args)
sympy.diffgeom.WedgeProduct(self,*fields)
sympy.diffgeom.contravariant_order(expr,_strict=False)
sympy.diffgeom.covariant_order(expr,_strict=False)
sympy.diffgeom.diffgeom.BaseCovarDerivativeOp(cls,coord_sys,index,christoffel)
sympy.diffgeom.diffgeom.BaseCovarDerivativeOp.christoffel(self)
sympy.diffgeom.diffgeom.BaseCovarDerivativeOp.coord_sys(self)
sympy.diffgeom.diffgeom.BaseCovarDerivativeOp.index(self)
sympy.diffgeom.diffgeom.BaseScalarField(cls,coord_sys,index,**kwargs)
sympy.diffgeom.diffgeom.BaseScalarField.coord_sys(self)
sympy.diffgeom.diffgeom.BaseScalarField.dim(self)
sympy.diffgeom.diffgeom.BaseScalarField.index(self)
sympy.diffgeom.diffgeom.BaseScalarField.manifold(self)
sympy.diffgeom.diffgeom.BaseScalarField.patch(self)
sympy.diffgeom.diffgeom.BaseVectorField(cls,coord_sys,index,**kwargs)
sympy.diffgeom.diffgeom.BaseVectorField.coord_sys(self)
sympy.diffgeom.diffgeom.BaseVectorField.dim(self)
sympy.diffgeom.diffgeom.BaseVectorField.index(self)
sympy.diffgeom.diffgeom.BaseVectorField.manifold(self)
sympy.diffgeom.diffgeom.BaseVectorField.patch(self)
sympy.diffgeom.diffgeom.Commutator(cls,v1,v2)
sympy.diffgeom.diffgeom.Commutator.v1(self)
sympy.diffgeom.diffgeom.Commutator.v2(self)
sympy.diffgeom.diffgeom.CoordSystem(cls,name,patch,symbols=None,relations={},**kwargs)
sympy.diffgeom.diffgeom.CoordSystem._dijkstra(sys1,sys2)
sympy.diffgeom.diffgeom.CoordSystem._fill_gaps_in_transformations()
sympy.diffgeom.diffgeom.CoordSystem._indirect_transformation(cls,sys1,sys2)
sympy.diffgeom.diffgeom.CoordSystem._inv_transf(from_coords,to_exprs)
sympy.diffgeom.diffgeom.CoordSystem._inverse_transformation(cls,sys1,sys2)
sympy.diffgeom.diffgeom.CoordSystem._solve_inverse(sym1,sym2,exprs,sys1_name,sys2_name)
sympy.diffgeom.diffgeom.CoordSystem.base_oneform(self,coord_index)
sympy.diffgeom.diffgeom.CoordSystem.base_oneforms(self)
sympy.diffgeom.diffgeom.CoordSystem.base_scalar(self,coord_index)
sympy.diffgeom.diffgeom.CoordSystem.base_scalars(self)
sympy.diffgeom.diffgeom.CoordSystem.base_vector(self,coord_index)
sympy.diffgeom.diffgeom.CoordSystem.base_vectors(self)
sympy.diffgeom.diffgeom.CoordSystem.connect_to(self,to_sys,from_coords,to_exprs,inverse=True,fill_in_gaps=False)
sympy.diffgeom.diffgeom.CoordSystem.coord_tuple_transform_to(self,to_sys,coords)
sympy.diffgeom.diffgeom.CoordSystem.dim(self)
sympy.diffgeom.diffgeom.CoordSystem.jacobian(self,sys,coordinates=None)
sympy.diffgeom.diffgeom.CoordSystem.jacobian_determinant(self,sys,coordinates=None)
sympy.diffgeom.diffgeom.CoordSystem.manifold(self)
sympy.diffgeom.diffgeom.CoordSystem.name(self)
sympy.diffgeom.diffgeom.CoordSystem.patch(self)
sympy.diffgeom.diffgeom.CoordSystem.point(self,coords)
sympy.diffgeom.diffgeom.CoordSystem.point_to_coords(self,point)
sympy.diffgeom.diffgeom.CoordSystem.relations(self)
sympy.diffgeom.diffgeom.CoordSystem.symbols(self)
sympy.diffgeom.diffgeom.CoordSystem.transform(self,sys,coordinates=None)
sympy.diffgeom.diffgeom.CoordSystem.transformation(self,sys)
sympy.diffgeom.diffgeom.CoordinateSymbol(cls,coord_sys,index,**assumptions)
sympy.diffgeom.diffgeom.CoordinateSymbol.__getnewargs__(self)
sympy.diffgeom.diffgeom.CoordinateSymbol._eval_rewrite(self,rule,args,**hints)
sympy.diffgeom.diffgeom.CoordinateSymbol._hashable_content(self)
sympy.diffgeom.diffgeom.CovarDerivativeOp(cls,wrt,christoffel)
sympy.diffgeom.diffgeom.CovarDerivativeOp.christoffel(self)
sympy.diffgeom.diffgeom.CovarDerivativeOp.wrt(self)
sympy.diffgeom.diffgeom.Differential(cls,form_field)
sympy.diffgeom.diffgeom.Differential.form_field(self)
sympy.diffgeom.diffgeom.LieDerivative(cls,v_field,expr)
sympy.diffgeom.diffgeom.LieDerivative.expr(self)
sympy.diffgeom.diffgeom.LieDerivative.v_field(self)
sympy.diffgeom.diffgeom.Manifold(cls,name,dim,**kwargs)
sympy.diffgeom.diffgeom.Manifold.dim(self)
sympy.diffgeom.diffgeom.Manifold.name(self)
sympy.diffgeom.diffgeom.Patch(cls,name,manifold,**kwargs)
sympy.diffgeom.diffgeom.Patch.dim(self)
sympy.diffgeom.diffgeom.Patch.manifold(self)
sympy.diffgeom.diffgeom.Patch.name(self)
sympy.diffgeom.diffgeom.Point(cls,coord_sys,coords,**kwargs)
sympy.diffgeom.diffgeom.Point.coords(self,sys=None)
sympy.diffgeom.diffgeom.Point.dim(self)
sympy.diffgeom.diffgeom.Point.free_symbols(self)
sympy.diffgeom.diffgeom.Point.manifold(self)
sympy.diffgeom.diffgeom.Point.patch(self)
sympy.diffgeom.diffgeom.TensorProduct(cls,*args)
sympy.diffgeom.diffgeom.WedgeProduct(self,*fields)
sympy.diffgeom.diffgeom._deprecated_container(self,message,data)
sympy.diffgeom.diffgeom._deprecated_container.__contains__(self,key)
sympy.diffgeom.diffgeom._deprecated_container.__getitem__(self,key)
sympy.diffgeom.diffgeom._deprecated_container.__iter__(self)
sympy.diffgeom.diffgeom._deprecated_container.warn(self)
sympy.diffgeom.diffgeom._deprecated_dict(_deprecated_container,dict)
sympy.diffgeom.diffgeom._deprecated_list(_deprecated_container,list)
sympy.diffgeom.diffgeom._find_coords(expr)
sympy.diffgeom.diffgeom.contravariant_order(expr,_strict=False)
sympy.diffgeom.diffgeom.covariant_order(expr,_strict=False)
sympy.diffgeom.diffgeom.dummyfy(args,exprs)
sympy.diffgeom.diffgeom.intcurve_diffequ(vector_field,param,start_point,coord_sys=None)
sympy.diffgeom.diffgeom.intcurve_series(vector_field,param,start_point,n=6,coord_sys=None,coeffs=False)
sympy.diffgeom.diffgeom.metric_to_Christoffel_1st(expr)
sympy.diffgeom.diffgeom.metric_to_Christoffel_2nd(expr)
sympy.diffgeom.diffgeom.metric_to_Ricci_components(expr)
sympy.diffgeom.diffgeom.metric_to_Riemann_components(expr)
sympy.diffgeom.diffgeom.twoform_to_matrix(expr)
sympy.diffgeom.diffgeom.vectors_in_basis(expr,to_sys)
sympy.diffgeom.intcurve_diffequ(vector_field,param,start_point,coord_sys=None)
sympy.diffgeom.intcurve_series(vector_field,param,start_point,n=6,coord_sys=None,coeffs=False)
sympy.diffgeom.metric_to_Christoffel_1st(expr)
sympy.diffgeom.metric_to_Christoffel_2nd(expr)
sympy.diffgeom.metric_to_Ricci_components(expr)
sympy.diffgeom.metric_to_Riemann_components(expr)
sympy.diffgeom.twoform_to_matrix(expr)
sympy.diffgeom.vectors_in_basis(expr,to_sys)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/diffgeom/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/diffgeom/tests/test_hyperbolic_space.py----------------------------------------
A:sympy.diffgeom.tests.test_hyperbolic_space.automat->twoform_to_matrix(g)
A:sympy.diffgeom.tests.test_hyperbolic_space.mat->diag(y ** (-2), y ** (-2))
A:sympy.diffgeom.tests.test_hyperbolic_space.gamma1->metric_to_Christoffel_1st(g)
A:sympy.diffgeom.tests.test_hyperbolic_space.gamma2->metric_to_Christoffel_2nd(g)
A:sympy.diffgeom.tests.test_hyperbolic_space.Rm->metric_to_Riemann_components(g)
A:sympy.diffgeom.tests.test_hyperbolic_space.Ric->metric_to_Ricci_components(g)
sympy.diffgeom.tests.test_hyperbolic_space.test_H2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/diffgeom/tests/test_diffgeom.py----------------------------------------
A:sympy.diffgeom.tests.test_diffgeom.(p, q, r, s)->symbols('p q r s')
A:sympy.diffgeom.tests.test_diffgeom.R2_pq->CoordSystem('first', R2_origin, [p, q], rel)
A:sympy.diffgeom.tests.test_diffgeom.R2_rs->CoordSystem('second', R2_origin, [r, s], rel)
A:sympy.diffgeom.tests.test_diffgeom.(a, b)->symbols('a b', positive=True)
A:sympy.diffgeom.tests.test_diffgeom.R2_a->CoordSystem('first', R2_origin, [a], rel)
A:sympy.diffgeom.tests.test_diffgeom.R2_b->CoordSystem('second', R2_origin, [b], rel)
A:sympy.diffgeom.tests.test_diffgeom.(c, d)->symbols('c d')
A:sympy.diffgeom.tests.test_diffgeom.R2_c->CoordSystem('first', R2_origin, [c], rel)
A:sympy.diffgeom.tests.test_diffgeom.R2_d->CoordSystem('second', R2_origin, [d], rel)
A:sympy.diffgeom.tests.test_diffgeom.(a, b, c, d, e, f)->symbols('a, b, c, d, e, f')
A:sympy.diffgeom.tests.test_diffgeom.C1->CoordSystem('C1', R2_origin, (a, b), rel)
A:sympy.diffgeom.tests.test_diffgeom.C2->CoordSystem('C2', R2_origin, (c, d), rel)
A:sympy.diffgeom.tests.test_diffgeom.C3->CoordSystem('C3', R2_origin, (e, f), rel)
A:sympy.diffgeom.tests.test_diffgeom.(x0, y0, r0, theta0)->symbols('x0, y0, r0, theta0', real=True)
A:sympy.diffgeom.tests.test_diffgeom.point_r->sympy.diffgeom.rn.R2_r.point([x0, y0])
A:sympy.diffgeom.tests.test_diffgeom.point_p->sympy.diffgeom.rn.R2_p.point([r0, theta0])
A:sympy.diffgeom.tests.test_diffgeom.m->Manifold('M', 2)
A:sympy.diffgeom.tests.test_diffgeom.(a, b, c)->symbols('a b c', positive=True)
A:sympy.diffgeom.tests.test_diffgeom.(x, y)->sympy.diffgeom.rn.R2_r.coord_functions()
A:sympy.diffgeom.tests.test_diffgeom.p->Patch('P', m)
A:sympy.diffgeom.tests.test_diffgeom.c->CoordSystem('Car2d', p, ['x', 'y'])
A:sympy.diffgeom.tests.test_diffgeom.dxdy->Differential(xdy)
A:sympy.diffgeom.tests.test_diffgeom.ch->metric_to_Christoffel_2nd(TP(R2.dx, R2.dx) + TP(R2.dy, R2.dy))
A:sympy.diffgeom.tests.test_diffgeom.cvd->CovarDerivativeOp(R2.x * R2.e_x, ch)
A:sympy.diffgeom.tests.test_diffgeom.t->symbols('t')
A:sympy.diffgeom.tests.test_diffgeom.start_point->sympy.diffgeom.rn.R2_r.point([1, 0])
A:sympy.diffgeom.tests.test_diffgeom.(equations, init_cond)->intcurve_diffequ(vector_field, t, start_point, R2_p)
A:sympy.diffgeom.tests.test_diffgeom.two_form->Differential(R2.x * R2.dr + R2.r * R2.dx)
A:sympy.diffgeom.tests.test_diffgeom.twoform_not_TP->WedgeProduct(R2.dx, R2.dy)
A:sympy.diffgeom.tests.test_diffgeom.two_vector->TensorProduct(R2.e_x, R2.e_y)
A:sympy.diffgeom.tests.test_diffgeom.three_vector->TensorProduct(R2.e_x, R2.e_y, R2.e_x)
A:sympy.diffgeom.tests.test_diffgeom.two_wp->WedgeProduct(R2.e_x, R2.e_y)
A:sympy.diffgeom.tests.test_diffgeom.a->Symbol('a')
A:sympy.diffgeom.tests.test_diffgeom.(dx, dy)->sympy.diffgeom.rn.R2_r.base_oneforms()
A:sympy.diffgeom.tests.test_diffgeom.(ex, ey)->sympy.diffgeom.rn.R2_r.base_vectors()
sympy.diffgeom.tests.test_diffgeom.test_CoordinateSymbol()
sympy.diffgeom.tests.test_diffgeom.test_R2()
sympy.diffgeom.tests.test_diffgeom.test_R3()
sympy.diffgeom.tests.test_diffgeom.test_commutator()
sympy.diffgeom.tests.test_diffgeom.test_coordsys_transform()
sympy.diffgeom.tests.test_diffgeom.test_correct_arguments()
sympy.diffgeom.tests.test_diffgeom.test_covar_deriv()
sympy.diffgeom.tests.test_diffgeom.test_deprecations()
sympy.diffgeom.tests.test_diffgeom.test_differential()
sympy.diffgeom.tests.test_diffgeom.test_helpers_and_coordinate_dependent()
sympy.diffgeom.tests.test_diffgeom.test_intcurve_diffequ()
sympy.diffgeom.tests.test_diffgeom.test_issue_17917()
sympy.diffgeom.tests.test_diffgeom.test_lie_derivative()
sympy.diffgeom.tests.test_diffgeom.test_point()
sympy.diffgeom.tests.test_diffgeom.test_products()
sympy.diffgeom.tests.test_diffgeom.test_simplify()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/diffgeom/tests/test_class_structure.py----------------------------------------
A:sympy.diffgeom.tests.test_class_structure.m->Manifold('m', 2)
A:sympy.diffgeom.tests.test_class_structure.p->Patch('p', m)
A:sympy.diffgeom.tests.test_class_structure.(a, b)->symbols('a b')
A:sympy.diffgeom.tests.test_class_structure.cs->CoordSystem('cs', p, [a, b])
A:sympy.diffgeom.tests.test_class_structure.(x, y)->symbols('x y')
A:sympy.diffgeom.tests.test_class_structure.f->Function('f')
A:sympy.diffgeom.tests.test_class_structure.(s1, s2)->CoordSystem('cs', p, [a, b]).coord_functions()
A:sympy.diffgeom.tests.test_class_structure.(v1, v2)->CoordSystem('cs', p, [a, b]).base_vectors()
A:sympy.diffgeom.tests.test_class_structure.(f1, f2)->CoordSystem('cs', p, [a, b]).base_oneforms()
A:sympy.diffgeom.tests.test_class_structure.point->Point(cs, [x, y])
A:sympy.diffgeom.tests.test_class_structure.cs_wname->CoordSystem('cs', p, ['a', 'b'])
sympy.diffgeom.tests.test_class_structure.test_deprecated()
sympy.diffgeom.tests.test_class_structure.test_point()
sympy.diffgeom.tests.test_class_structure.test_subs()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/diffgeom/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/diffgeom/tests/test_function_diffgeom_book.py----------------------------------------
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x0, y0, r0, theta0)->symbols('x0, y0, r0, theta0', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x, y)->symbols('x, y', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.f->Function('f')
A:sympy.diffgeom.tests.test_function_diffgeom_book.field->f(R2.x, R2.y)
A:sympy.diffgeom.tests.test_function_diffgeom_book.p1_in_rect->sympy.diffgeom.rn.R2_r.point([x0, y0])
A:sympy.diffgeom.tests.test_function_diffgeom_book.p1_in_polar->sympy.diffgeom.rn.R2_p.point([sqrt(x0 ** 2 + y0 ** 2), atan2(y0, x0)])
A:sympy.diffgeom.tests.test_function_diffgeom_book.p_r->sympy.diffgeom.rn.R2_r.point([x0, y0])
A:sympy.diffgeom.tests.test_function_diffgeom_book.p_p->sympy.diffgeom.rn.R2_p.point([r0, theta0])
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x0, y0)->symbols('x0, y0', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x, y, t)->symbols('x, y, t', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.b1->Function('b1')
A:sympy.diffgeom.tests.test_function_diffgeom_book.b2->Function('b2')
A:sympy.diffgeom.tests.test_function_diffgeom_book.s_field->f(R2.x, R2.y)
A:sympy.diffgeom.tests.test_function_diffgeom_book.series->intcurve_series(circ, t, R2_r.point([1, 0]), coeffs=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(series_x, series_y)->zip(*series)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x0, y0, theta0)->symbols('x0, y0, theta0', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x, y, r, theta)->symbols('x, y, r, theta', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.r0->symbols('r0', positive=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.s_field_r->f(R2.x, R2.y)
A:sympy.diffgeom.tests.test_function_diffgeom_book.df->Differential(s_field_p)
A:sympy.diffgeom.tests.test_function_diffgeom_book.s_field_p->f(R2.r, R2.theta)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(u0, u1, u2, v0, v1, v2, w0, w1, w2)->symbols('u0:3, v0:3, w0:3', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.wp->WedgeProduct(R3_r.dx, R3_r.dy, R3_r.dz)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(a, b, c)->symbols('a, b, c', cls=Function)
A:sympy.diffgeom.tests.test_function_diffgeom_book.a_f->a(R3_r.x, R3_r.y, R3_r.z)
A:sympy.diffgeom.tests.test_function_diffgeom_book.b_f->b(R3_r.x, R3_r.y, R3_r.z)
A:sympy.diffgeom.tests.test_function_diffgeom_book.c_f->c(R3_r.x, R3_r.y, R3_r.z)
A:sympy.diffgeom.tests.test_function_diffgeom_book.dtheta->Differential(theta)
A:sympy.diffgeom.tests.test_function_diffgeom_book.da->Differential(a_f)
A:sympy.diffgeom.tests.test_function_diffgeom_book.db->Differential(b_f)
A:sympy.diffgeom.tests.test_function_diffgeom_book.dc->Differential(c_f)
sympy.diffgeom.tests.test_function_diffgeom_book.test_functional_diffgeom_ch2()
sympy.diffgeom.tests.test_function_diffgeom_book.test_functional_diffgeom_ch3()
sympy.diffgeom.tests.test_function_diffgeom_book.test_functional_diffgeom_ch4()
sympy.diffgeom.tests.test_function_diffgeom_book.test_functional_diffgeom_ch6()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/sympy_parser.py----------------------------------------
A:sympy.parsing.sympy_parser.func->global_dict.get(token[1])
A:sympy.parsing.sympy_parser.length->len(result)
A:sympy.parsing.sympy_parser.stack->stacks.pop()
A:sympy.parsing.sympy_parser.inner->recursor(inner, local_dict, global_dict)
A:sympy.parsing.sympy_parser.result[-1]->AppliedFunction(symbol, tok)
A:sympy.parsing.sympy_parser.char->''.join(chars)
A:sympy.parsing.sympy_parser.split_symbols->split_symbols_custom(_token_splittable)
A:sympy.parsing.sympy_parser.res1->_group_parentheses(convert_equals_signs)(tokens, local_dict, global_dict)
A:sympy.parsing.sympy_parser.res2->_apply_functions(res1, local_dict, global_dict)
A:sympy.parsing.sympy_parser.res3->_transform_equals_sign(res2, local_dict, global_dict)
A:sympy.parsing.sympy_parser.result->_flatten(res3)
A:sympy.parsing.sympy_parser.local_dict[name]->Symbol(name)
A:sympy.parsing.sympy_parser.tokLen->len(tokens)
A:sympy.parsing.sympy_parser.(pre, post)->num[0][1].split('.')
A:sympy.parsing.sympy_parser.pre->pre.replace('_', '').replace('_', '')
A:sympy.parsing.sympy_parser.post->post.replace('_', '').replace('_', '')
A:sympy.parsing.sympy_parser.repetend->repetend.replace('_', '').replace('_', '')
A:sympy.parsing.sympy_parser.input_code->StringIO(s.strip())
A:sympy.parsing.sympy_parser.tokens->transform(tokens, local_dict, global_dict)
A:sympy.parsing.sympy_parser.expr->eval(code, global_dict, local_dict)
A:sympy.parsing.sympy_parser.builtins_dict->vars(builtins)
A:sympy.parsing.sympy_parser.code->compile(evaluateFalse(code), '<string>', 'eval')
A:sympy.parsing.sympy_parser.rv->eval_expr(code, local_dict, global_dict)
A:sympy.parsing.sympy_parser.node->ast.parse(s)
A:sympy.parsing.sympy_parser.transformed_node->ast.Expression(transformed_node.body[0].value)
A:sympy.parsing.sympy_parser.right->ast.Call(func=ast.Name(id='Pow', ctx=ast.Load()), args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
A:sympy.parsing.sympy_parser.left->ast.Call(func=ast.Name(id='Pow', ctx=ast.Load()), args=[left, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)
A:sympy.parsing.sympy_parser.new_node->self.generic_visit(node)
A:sympy.parsing.sympy_parser.new_node.args->self.flatten(new_node.args, sympy_class)
A:sympy.parsing.sympy_parser.transformations->'\n'.join(('%s: %s' % (i, func_name(f)) for (i, f) in _transformation.items()))
A:sympy.parsing.sympy_parser.self.N->len(_transformation)
A:sympy.parsing.sympy_parser.T->_T()
sympy.parse_expr(s:str,local_dict:Optional[DICT]=None,transformations:tUnion[tTuple[TRANS,...],str]=standard_transformations,global_dict:Optional[DICT]=None,evaluate=True)
sympy.parsing.sympy_parser.AppliedFunction(self,function:TOKEN,args:ParenthesisGroup,exponent=None)
sympy.parsing.sympy_parser.AppliedFunction.__getitem__(self,index)
sympy.parsing.sympy_parser.AppliedFunction.__repr__(self)
sympy.parsing.sympy_parser.AppliedFunction.expand(self)->List[TOKEN]
sympy.parsing.sympy_parser.EvaluateFalseTransformer(ast.NodeTransformer)
sympy.parsing.sympy_parser.EvaluateFalseTransformer.flatten(self,args,func)
sympy.parsing.sympy_parser.EvaluateFalseTransformer.visit_BinOp(self,node)
sympy.parsing.sympy_parser.EvaluateFalseTransformer.visit_Call(self,node)
sympy.parsing.sympy_parser.EvaluateFalseTransformer.visit_Compare(self,node)
sympy.parsing.sympy_parser.ParenthesisGroup(List[TOKEN])
sympy.parsing.sympy_parser._T(self)
sympy.parsing.sympy_parser._T.__getitem__(self,t)
sympy.parsing.sympy_parser._T.__str__(self)
sympy.parsing.sympy_parser._add_factorial_tokens(name:str,result:List[TOKEN])->List[TOKEN]
sympy.parsing.sympy_parser._apply_functions(tokens:List[tUnion[TOKEN,ParenthesisGroup]],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser._flatten(result:List[tUnion[TOKEN,AppliedFunction]])
sympy.parsing.sympy_parser._group_parentheses(recursor:TRANS)
sympy.parsing.sympy_parser._implicit_application(tokens:List[tUnion[TOKEN,AppliedFunction]],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser._implicit_multiplication(tokens:List[tUnion[TOKEN,AppliedFunction]],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser._token_callable(token:TOKEN,local_dict:DICT,global_dict:DICT,nextToken=None)
sympy.parsing.sympy_parser._token_splittable(token_name:str)->bool
sympy.parsing.sympy_parser._transform_equals_sign(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.auto_number(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.auto_symbol(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.convert_equals_signs(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)->List[TOKEN]
sympy.parsing.sympy_parser.convert_xor(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.eval_expr(code,local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.evaluateFalse(s:str)
sympy.parsing.sympy_parser.factorial_notation(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.function_exponentiation(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.implicit_application(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)->List[TOKEN]
sympy.parsing.sympy_parser.implicit_multiplication(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)->List[TOKEN]
sympy.parsing.sympy_parser.implicit_multiplication_application(result:List[TOKEN],local_dict:DICT,global_dict:DICT)->List[TOKEN]
sympy.parsing.sympy_parser.lambda_notation(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.parse_expr(s:str,local_dict:Optional[DICT]=None,transformations:tUnion[tTuple[TRANS,...],str]=standard_transformations,global_dict:Optional[DICT]=None,evaluate=True)
sympy.parsing.sympy_parser.rationalize(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.repeated_decimals(tokens:List[TOKEN],local_dict:DICT,global_dict:DICT)
sympy.parsing.sympy_parser.split_symbols_custom(predicate:Callable[[str],bool])
sympy.parsing.sympy_parser.stringify_expr(s:str,local_dict:DICT,global_dict:DICT,transformations:tTuple[TRANS,...])->str


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/mathematica.py----------------------------------------
A:sympy.parsing.mathematica.parser->MathematicaParser()
A:sympy.parsing.mathematica.Slot->Function('Slot')
A:sympy.parsing.mathematica.slots->arg.atoms(Slot)
A:sympy.parsing.mathematica.number_of_arguments->max(numbers)
A:sympy.parsing.mathematica.variables->symbols(f'dummy0:{number_of_arguments}', cls=Dummy)
A:sympy.parsing.mathematica.FM_PATTERN->re.compile('\n                (?:\n                \\A|(?<=[^a-zA-Z])   # at the top or a non-letter\n                )\n                [A-Z][a-zA-Z\\d]*    # Function\n                (?=\\[)              # [ as a character\n                ', re.VERBOSE)
A:sympy.parsing.mathematica.ARG_MTRX_PATTERN->re.compile('\n                \\{.*\\}\n                ', re.VERBOSE)
A:sympy.parsing.mathematica.d->self._compile_dictionary(additional_translations)
A:sympy.parsing.mathematica.fm->pat.search(template).group()
A:sympy.parsing.mathematica.fs->cls._replace(fs, ' ')
A:sympy.parsing.mathematica.m->re.compile(patStr, re.VERBOSE).search(template)
A:sympy.parsing.mathematica.err->"'{f}' function form is invalid.".format(f=s)
A:sympy.parsing.mathematica.fm_name->re.compile(patStr, re.VERBOSE).search(template).group()
A:sympy.parsing.mathematica.(args, end)->self._get_args(m)
A:sympy.parsing.mathematica.key_arg->len(args)
A:sympy.parsing.mathematica.patStr->cls.ARGS_PATTERN_TEMPLATE.format(arguments=xyz)
A:sympy.parsing.mathematica.pat->re.compile(patStr, re.VERBOSE)
A:sympy.parsing.mathematica.bgn->re.compile(patStr, re.VERBOSE).search(template).start()
A:sympy.parsing.mathematica.s->self._apply_rules(s, 'Pi')
A:sympy.parsing.mathematica.d[x]->','.join(args[i:])
A:sympy.parsing.mathematica.x->re.compile(patStr, re.VERBOSE).search(template).group()
A:sympy.parsing.mathematica.xbgn->re.compile(patStr, re.VERBOSE).search(template).start()
A:sympy.parsing.mathematica.cur->re.compile(patStr, re.VERBOSE).search(template).end()
A:sympy.parsing.mathematica.s2->self._from_mathematica_to_tokens(s)
A:sympy.parsing.mathematica.s3->self._from_tokens_to_fullformlist(s2)
A:sympy.parsing.mathematica.s4->self._from_fullformlist_to_sympy(s3)
A:sympy.parsing.mathematica.tokenizer->self._get_tokenizer()
A:sympy.parsing.mathematica.string_start->code.find('"')
A:sympy.parsing.mathematica.match_end->re.search('(?<!\\\\)"', code[string_start + 1:])
A:sympy.parsing.mathematica.pos_comment_start->code_split.find('(*')
A:sympy.parsing.mathematica.pos_comment_end->code_split.find('*)')
A:sympy.parsing.mathematica.stack[-1]->self._parse_after_braces(stack[-1])
A:sympy.parsing.mathematica.ind->self._enclosure_close.index(token)
A:sympy.parsing.mathematica.unmatched_enclosure->SyntaxError('unmatched enclosure')
A:sympy.parsing.mathematica.last_stack->self._parse_after_braces(stack[-1], True)
A:sympy.parsing.mathematica.size->len(tokens)
A:sympy.parsing.mathematica.prev_expr->self._parse_after_braces(tokens[:pointer], inside_enclosure)
A:sympy.parsing.mathematica.arg1->tokens.pop(pointer - 1)
A:sympy.parsing.mathematica.arg2->tokens.pop(pointer + 1)
A:sympy.parsing.mathematica.other_op->tokens.pop(pointer + 1)
A:sympy.parsing.mathematica.node_p[first_index]->op_name(node_p[first_index], arg2)
A:sympy.parsing.mathematica.tokens[pointer]->self._missing_arguments_default[token]()
A:sympy.parsing.mathematica.new_node->op_call(*node)
A:sympy.parsing.mathematica.generator->re.finditer('[\\[\\],]', wmexpr)
A:sympy.parsing.mathematica.position->match.start()
A:sympy.parsing.mathematica.last_expr->wmexpr[last_pos:position].replace(',', '').replace(']', '').replace('[', '').strip()
A:sympy.parsing.mathematica.last_pos->match.end()
A:sympy.parsing.mathematica.head->self._node_conversions.get(expr[0], Function(expr[0]))
A:sympy.parsing.mathematica.expr->expr.replace(Function(mma_form), sympy_node).replace(Function(mma_form), sympy_node)
sympy.parsing.mathematica.MathematicaParser(self,additional_translations=None)
sympy.parsing.mathematica.MathematicaParser._apply_rules(cls,s,bef)
sympy.parsing.mathematica.MathematicaParser._check_input(cls,s)
sympy.parsing.mathematica.MathematicaParser._check_op_compatible(self,op1:str,op2:str)
sympy.parsing.mathematica.MathematicaParser._compile_dictionary(cls,dic)
sympy.parsing.mathematica.MathematicaParser._convert_function(self,s)
sympy.parsing.mathematica.MathematicaParser._convert_one_function(self,s,fm,args,bgn,end)
sympy.parsing.mathematica.MathematicaParser._from_fullform_to_fullformlist(self,wmexpr:str)
sympy.parsing.mathematica.MathematicaParser._from_fullformlist_to_fullformsympy(self,pylist:list)
sympy.parsing.mathematica.MathematicaParser._from_fullformlist_to_sympy(self,full_form_list)
sympy.parsing.mathematica.MathematicaParser._from_fullformsympy_to_sympy(self,mform)
sympy.parsing.mathematica.MathematicaParser._from_mathematica_to_tokens(self,code:str)
sympy.parsing.mathematica.MathematicaParser._from_tokens_to_fullformlist(self,tokens:list)
sympy.parsing.mathematica.MathematicaParser._get_args(cls,m)
sympy.parsing.mathematica.MathematicaParser._get_inv(cls,x)
sympy.parsing.mathematica.MathematicaParser._get_neg(cls,x)
sympy.parsing.mathematica.MathematicaParser._get_tokenizer(self)
sympy.parsing.mathematica.MathematicaParser._initialize_class(cls)
sympy.parsing.mathematica.MathematicaParser._is_op(self,token:str|list)->bool
sympy.parsing.mathematica.MathematicaParser._is_valid_star1(self,token:str|list)->bool
sympy.parsing.mathematica.MathematicaParser._is_valid_star2(self,token:str|list)->bool
sympy.parsing.mathematica.MathematicaParser._parse_after_braces(self,tokens:list,inside_enclosure:bool=False)
sympy.parsing.mathematica.MathematicaParser._parse_old(self,s)
sympy.parsing.mathematica.MathematicaParser._replace(cls,s,bef)
sympy.parsing.mathematica.MathematicaParser._util_add_missing_asterisks(self,tokens:list)
sympy.parsing.mathematica.MathematicaParser._util_remove_newlines(self,lines:list,tokens:list,inside_enclosure:bool)
sympy.parsing.mathematica.MathematicaParser.parse(self,s)
sympy.parsing.mathematica._deco(cls)
sympy.parsing.mathematica._parse_Function(*args)
sympy.parsing.mathematica.mathematica(s,additional_translations=None)
sympy.parsing.mathematica.parse_mathematica(s)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/maxima.py----------------------------------------
A:sympy.parsing.maxima.var_name->re.compile('^\\s*(\\w+)\\s*:')
A:sympy.parsing.maxima.str->str[var_match.end():].strip()
A:sympy.parsing.maxima.var_match->re.compile('^\\s*(\\w+)\\s*:').search(str)
A:sympy.parsing.maxima.assign_var->re.compile('^\\s*(\\w+)\\s*:').search(str).group(1)
A:sympy.parsing.maxima.dct->MaximaHelpers.__dict__.copy()
A:sympy.parsing.maxima.obj->sympify(str, locals=dct)
sympy.parsing.maxima.MaximaHelpers
sympy.parsing.maxima.MaximaHelpers.maxima_csc(expr)
sympy.parsing.maxima.MaximaHelpers.maxima_expand(expr)
sympy.parsing.maxima.MaximaHelpers.maxima_float(expr)
sympy.parsing.maxima.MaximaHelpers.maxima_product(a1,a2,a3,a4)
sympy.parsing.maxima.MaximaHelpers.maxima_sec(expr)
sympy.parsing.maxima.MaximaHelpers.maxima_sum(a1,a2,a3,a4)
sympy.parsing.maxima.MaximaHelpers.maxima_trigexpand(expr)
sympy.parsing.maxima.parse_maxima(str,globals=None,name_dict={})


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/sym_expr.py----------------------------------------
A:sympy.parsing.sym_expr.lfortran->import_module('lfortran')
A:sympy.parsing.sym_expr.cin->import_module('clang.cindex', import_kwargs={'fromlist': ['cindex']})
A:sympy.parsing.sym_expr.self._expr->parse_c(src_code)
sympy.parsing.sym_expr.SymPyExpression(self,source_code=None,mode=None)
sympy.parsing.sym_expr.SymPyExpression.convert_to_c(self)
sympy.parsing.sym_expr.SymPyExpression.convert_to_expr(self,src_code,mode)
sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran(self)
sympy.parsing.sym_expr.SymPyExpression.convert_to_python(self)
sympy.parsing.sym_expr.SymPyExpression.return_expr(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/ast_parser.py----------------------------------------
A:sympy.parsing.ast_parser.body->self.visit(node.body)
A:sympy.parsing.ast_parser.n->Call(func=Name('Lambda', Load()), args=[Tuple(args, Load()), body], keywords=[])
A:sympy.parsing.ast_parser.a->Transform(local_dict, global_dict).visit(a)
A:sympy.parsing.ast_parser.e->compile(a, '<string>', 'eval')
sympy.parsing.ast_parser.Transform(self,local_dict,global_dict)
sympy.parsing.ast_parser.Transform.visit_Constant(self,node)
sympy.parsing.ast_parser.Transform.visit_Lambda(self,node)
sympy.parsing.ast_parser.Transform.visit_Name(self,node)
sympy.parsing.ast_parser.parse_expr(s,local_dict)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_mathematica.py----------------------------------------
A:sympy.parsing.tests.test_mathematica.(d1, d2, d3)->symbols('d1:4', cls=Dummy)
A:sympy.parsing.tests.test_mathematica.parser->MathematicaParser()
A:sympy.parsing.tests.test_mathematica.(Sin, Times, Plus, Power)->symbols('Sin Times Plus Power', cls=Function)
sympy.parsing.tests.test_mathematica.test_mathematica()
sympy.parsing.tests.test_mathematica.test_parser_mathematica_exp_alt()
sympy.parsing.tests.test_mathematica.test_parser_mathematica_tokenizer()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_ast_parser.py----------------------------------------
A:sympy.parsing.tests.test_ast_parser.(a, b)->symbols('a, b')
sympy.parsing.tests.test_ast_parser.test_parse_expr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_maxima.py----------------------------------------
A:sympy.parsing.tests.test_maxima.n->Symbol('n', integer=True)
sympy.parsing.tests.test_maxima.test_injection()
sympy.parsing.tests.test_maxima.test_maxima_functions()
sympy.parsing.tests.test_maxima.test_parser()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_implicit_multiplication_application.py----------------------------------------
A:sympy.parsing.tests.test_implicit_multiplication_application.implicit->parse_expr(case, transformations=transformations2)
A:sympy.parsing.tests.test_implicit_multiplication_application.normal->parse_expr(cases[case], transformations=transformations)
A:sympy.parsing.tests.test_implicit_multiplication_application.u->sympy.Symbol('u')
A:sympy.parsing.tests.test_implicit_multiplication_application.expr->parse_expr('(exp(x) / (1 + exp(2x))).subs(exp(x), u)', transformations=transformations)
sympy.parsing.tests.test_implicit_multiplication_application.test_all_implicit_steps()
sympy.parsing.tests.test_implicit_multiplication_application.test_function_exponentiation()
sympy.parsing.tests.test_implicit_multiplication_application.test_implicit_application()
sympy.parsing.tests.test_implicit_multiplication_application.test_implicit_multiplication()
sympy.parsing.tests.test_implicit_multiplication_application.test_no_methods_implicit_multiplication()
sympy.parsing.tests.test_implicit_multiplication_application.test_symbol_splitting()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_latex_deps.py----------------------------------------
A:sympy.parsing.tests.test_latex_deps.antlr4->import_module('antlr4', warn_not_installed=False)
sympy.parsing.tests.test_latex_deps.test_no_import()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_sympy_parser.py----------------------------------------
A:sympy.parsing.tests.test_sympy_parser.x->Symbol('x')
A:sympy.parsing.tests.test_sympy_parser.w->Symbol('w', real=True)
A:sympy.parsing.tests.test_sympy_parser.y->Symbol('y')
A:sympy.parsing.tests.test_sympy_parser.builtins_dict->vars(builtins)
A:sympy.parsing.tests.test_sympy_parser.obj->parse_expr(name, global_dict=global_dict)
A:sympy.parsing.tests.test_sympy_parser.expr->parse_expr(case, evaluate=False)
A:sympy.parsing.tests.test_sympy_parser.xy->Symbol('xy')
A:sympy.parsing.tests.test_sympy_parser.a->Symbol('a')
A:sympy.parsing.tests.test_sympy_parser.f->Function('f')
A:sympy.parsing.tests.test_sympy_parser.yfcn->Function('y')
A:sympy.parsing.tests.test_sympy_parser.n->Symbol('n')
A:sympy.parsing.tests.test_sympy_parser.expr1->parse_expr('n12n34', transformations=transformations)
A:sympy.parsing.tests.test_sympy_parser.expr2->parse_expr('2**n3**n', transformations=transformations)
A:sympy.parsing.tests.test_sympy_parser.eq->parse_expr('E**x(1+x)', local_dict={'x': x}, transformations=standard_transformations + (implicit_multiplication_application,))
sympy.parsing.tests.test_sympy_parser.test_builtins()
sympy.parsing.tests.test_sympy_parser.test_convert_equals_signs()
sympy.parsing.tests.test_sympy_parser.test_factorial_fail()
sympy.parsing.tests.test_sympy_parser.test_function_evaluate_false()
sympy.parsing.tests.test_sympy_parser.test_functional_exponent()
sympy.parsing.tests.test_sympy_parser.test_global_dict()
sympy.parsing.tests.test_sympy_parser.test_issue_10773()
sympy.parsing.tests.test_sympy_parser.test_issue_19501()
sympy.parsing.tests.test_sympy_parser.test_issue_22822()
sympy.parsing.tests.test_sympy_parser.test_issue_24288()
sympy.parsing.tests.test_sympy_parser.test_issue_2515()
sympy.parsing.tests.test_sympy_parser.test_issue_7663()
sympy.parsing.tests.test_sympy_parser.test_local_dict()
sympy.parsing.tests.test_sympy_parser.test_local_dict_split_implmult()
sympy.parsing.tests.test_sympy_parser.test_local_dict_symbol_to_fcn()
sympy.parsing.tests.test_sympy_parser.test_match_parentheses_implicit_multiplication()
sympy.parsing.tests.test_sympy_parser.test_no_globals()
sympy.parsing.tests.test_sympy_parser.test_parse_function_issue_3539()
sympy.parsing.tests.test_sympy_parser.test_parsing_definitions()
sympy.parsing.tests.test_sympy_parser.test_python3_features()
sympy.parsing.tests.test_sympy_parser.test_rationalize()
sympy.parsing.tests.test_sympy_parser.test_recursive_evaluate_false_10560()
sympy.parsing.tests.test_sympy_parser.test_repeated_dot_only()
sympy.parsing.tests.test_sympy_parser.test_repeated_fail()
sympy.parsing.tests.test_sympy_parser.test_split_symbols()
sympy.parsing.tests.test_sympy_parser.test_split_symbols_function()
sympy.parsing.tests.test_sympy_parser.test_split_symbols_numeric()
sympy.parsing.tests.test_sympy_parser.test_sympy_parser()
sympy.parsing.tests.test_sympy_parser.test_unicode_names()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_c_parser.py----------------------------------------
A:sympy.parsing.tests.test_c_parser.cin->import_module('clang.cindex', import_kwargs={'fromlist': ['cindex']})
A:sympy.parsing.tests.test_c_parser.res1->SymPyExpression(c_src1, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res2->SymPyExpression(c_src2, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res3->SymPyExpression(c_src3, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res4->SymPyExpression(c_src4, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res5->SymPyExpression(c_src5, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res6->SymPyExpression(c_src6, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res_type1->SymPyExpression(c_src_type1, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res_type2->SymPyExpression(c_src_type2, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res_type3->SymPyExpression(c_src_type3, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res_type4->SymPyExpression(c_src_type4, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res_type5->SymPyExpression(c_src_type5, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res_type6->SymPyExpression(c_src_type6, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res_type7->SymPyExpression(c_src_type7, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res_type8->SymPyExpression(c_src_type8, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.f1->open('..a.h', 'w')
A:sympy.parsing.tests.test_c_parser.f2->open('..b.h', 'w')
A:sympy.parsing.tests.test_c_parser.res7->SymPyExpression(c_src7, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res8->SymPyExpression(c_src8, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res9->SymPyExpression(c_src9, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res10->SymPyExpression(c_src10, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res11->SymPyExpression(c_src11, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res12->SymPyExpression(c_src12, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res13->SymPyExpression(c_src13, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res14->SymPyExpression(c_src14, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res15->SymPyExpression(c_src15, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res16->SymPyExpression(c_src16, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res17->SymPyExpression(c_src17, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res18->SymPyExpression(c_src18, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res19->SymPyExpression(c_src19, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res20->SymPyExpression(c_src20, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res21->SymPyExpression(c_src21, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res22->SymPyExpression(c_src22, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res23->SymPyExpression(c_src23, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res24->SymPyExpression(c_src24, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res25->SymPyExpression(c_src25, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res26->SymPyExpression(c_src26, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res27->SymPyExpression(c_src27, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res28->SymPyExpression(c_src28, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res29->SymPyExpression(c_src29, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res30->SymPyExpression(c_src30, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res31->SymPyExpression(c_src31, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res32->SymPyExpression(c_src32, 'c').return_expr()
A:sympy.parsing.tests.test_c_parser.res->SymPyExpression(c_src, 'c').return_expr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_latex.py----------------------------------------
A:sympy.parsing.tests.test_latex.antlr4->import_module('antlr4')
A:sympy.parsing.tests.test_latex.theta->Symbol('theta')
A:sympy.parsing.tests.test_latex.f->Function('f')
sympy.parsing.tests.test_latex._Abs(a)
sympy.parsing.tests.test_latex._Add(a,b)
sympy.parsing.tests.test_latex._Conjugate(a)
sympy.parsing.tests.test_latex._Mul(a,b)
sympy.parsing.tests.test_latex._Pow(a,b)
sympy.parsing.tests.test_latex._Sqrt(a)
sympy.parsing.tests.test_latex._binomial(n,k)
sympy.parsing.tests.test_latex._exp(a)
sympy.parsing.tests.test_latex._factorial(a)
sympy.parsing.tests.test_latex._log(a,b)
sympy.parsing.tests.test_latex.test_failing_not_parseable()
sympy.parsing.tests.test_latex.test_import()
sympy.parsing.tests.test_latex.test_not_parseable()
sympy.parsing.tests.test_latex.test_parseable()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_autolev.py----------------------------------------
A:sympy.parsing.tests.test_autolev.antlr4->import_module('antlr4')
A:sympy.parsing.tests.test_autolev.FILE_DIR->os.path.dirname(os.path.dirname(os.path.abspath(os.path.realpath(__file__))))
A:sympy.parsing.tests.test_autolev.in_file_path->os.path.join(FILE_DIR, 'autolev', 'test-examples', in_filename)
A:sympy.parsing.tests.test_autolev.correct_file_path->os.path.join(FILE_DIR, 'autolev', 'test-examples', out_filename)
A:sympy.parsing.tests.test_autolev.generated_code->parse_autolev(f, include_numeric=True)
A:sympy.parsing.tests.test_autolev.in_filepath->os.path.join('dynamics-online', name, i + '.al')
A:sympy.parsing.tests.test_autolev.out_filepath->os.path.join('dynamics-online', name, i + '.py')
A:sympy.parsing.tests.test_autolev.dir_path->os.path.join(FILE_DIR, 'autolev', 'test-examples', 'dynamics-online')
A:sympy.parsing.tests.test_autolev.sympy_input->parse_autolev(autolev_input)
A:sympy.parsing.tests.test_autolev.w_c_f->l['frame_c'].ang_vel_in(l['frame_f'])
A:sympy.parsing.tests.test_autolev.p_o_e->l['point_e'].pos_from(l['point_o'])
A:sympy.parsing.tests.test_autolev.v_e_f->l['point_e'].vel(l['frame_f'])
A:sympy.parsing.tests.test_autolev.a_e_f->l['point_e'].acc(l['frame_f'])
sympy.parsing.tests.test_autolev._test_examples(in_filename,out_filename,test_name='')
sympy.parsing.tests.test_autolev.test_autolev_tutorial()
sympy.parsing.tests.test_autolev.test_dynamics_online()
sympy.parsing.tests.test_autolev.test_output_01()
sympy.parsing.tests.test_autolev.test_pydy_examples()
sympy.parsing.tests.test_autolev.test_rule_tests()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_sym_expr.py----------------------------------------
A:sympy.parsing.tests.test_sym_expr.lfortran->import_module('lfortran')
A:sympy.parsing.tests.test_sym_expr.cin->import_module('clang.cindex', import_kwargs={'fromlist': ['cindex']})
A:sympy.parsing.tests.test_sym_expr.expr1->SymPyExpression()
A:sympy.parsing.tests.test_sym_expr.ls->SymPyExpression(src, 'f').return_expr()
A:sympy.parsing.tests.test_sym_expr.expr->SymPyExpression(src, 'f')
A:sympy.parsing.tests.test_sym_expr.exp_py->SymPyExpression().convert_to_python()
A:sympy.parsing.tests.test_sym_expr.exp_fort->SymPyExpression().convert_to_fortran()
A:sympy.parsing.tests.test_sym_expr.exp_c->SymPyExpression().convert_to_c()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/test_fortran_parser.py----------------------------------------
A:sympy.parsing.tests.test_fortran_parser.lfortran->import_module('lfortran')
A:sympy.parsing.tests.test_fortran_parser.expr1->SymPyExpression()
A:sympy.parsing.tests.test_fortran_parser.expr2->SymPyExpression()
A:sympy.parsing.tests.test_fortran_parser.expr3->SymPyExpression(src, 'f')
A:sympy.parsing.tests.test_fortran_parser.expr4->SymPyExpression(src1, 'f')
A:sympy.parsing.tests.test_fortran_parser.ls1->SymPyExpression().return_expr()
A:sympy.parsing.tests.test_fortran_parser.ls2->SymPyExpression(src1, 'f').return_expr()
A:sympy.parsing.tests.test_fortran_parser.ls->SymPyExpression().return_expr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/latex/_build_latex_antlr.py----------------------------------------
A:sympy.parsing.latex._build_latex_antlr.here->os.path.dirname(__file__)
A:sympy.parsing.latex._build_latex_antlr.grammar_file->os.path.abspath(os.path.join(here, 'LaTeX.g4'))
A:sympy.parsing.latex._build_latex_antlr.dir_latex_antlr->os.path.join(here, '_antlr')
A:sympy.parsing.latex._build_latex_antlr.new_path->os.path.join(output_dir, os.path.basename(path).lower())
sympy.parsing.latex._build_latex_antlr.build_parser(output_dir=dir_latex_antlr)
sympy.parsing.latex._build_latex_antlr.check_antlr_version()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/latex/errors.py----------------------------------------
sympy.parsing.latex.LaTeXParsingError(Exception)
sympy.parsing.latex.errors.LaTeXParsingError(Exception)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/latex/_parse_latex_antlr.py----------------------------------------
A:sympy.parsing.latex._parse_latex_antlr.ErrorListener->import_module('antlr4.error.ErrorListener', warn_not_installed=True, import_kwargs={'fromlist': ['ErrorListener']})
A:sympy.parsing.latex._parse_latex_antlr.expected->' '.join(expected)
A:sympy.parsing.latex._parse_latex_antlr.antlr4->import_module('antlr4')
A:sympy.parsing.latex._parse_latex_antlr.matherror->MathErrorListener(sympy)
A:sympy.parsing.latex._parse_latex_antlr.stream->ctx.start.getInputStream()
A:sympy.parsing.latex._parse_latex_antlr.lex->LaTeXLexer(stream)
A:sympy.parsing.latex._parse_latex_antlr.tokens->import_module('antlr4').CommonTokenStream(lex)
A:sympy.parsing.latex._parse_latex_antlr.parser->LaTeXParser(tokens)
A:sympy.parsing.latex._parse_latex_antlr.relation->LaTeXParser(tokens).math().relation()
A:sympy.parsing.latex._parse_latex_antlr.expr->convert_expr(func.base)
A:sympy.parsing.latex._parse_latex_antlr.lh->convert_expr(at.equality().expr(0))
A:sympy.parsing.latex._parse_latex_antlr.rh->convert_expr(at.equality().expr(1))
A:sympy.parsing.latex._parse_latex_antlr.mp_left->mp.mp_nofunc(0)
A:sympy.parsing.latex._parse_latex_antlr.mp_right->mp.mp_nofunc(1)
A:sympy.parsing.latex._parse_latex_antlr.nested_unary->unary.unary_nofunc()
A:sympy.parsing.latex._parse_latex_antlr.first->unary.postfix()
A:sympy.parsing.latex._parse_latex_antlr.tail->unary.postfix_nofunc()
A:sympy.parsing.latex._parse_latex_antlr.postfix->unary.postfix()
A:sympy.parsing.latex._parse_latex_antlr.numabs->convert_unary(nested_unary)
A:sympy.parsing.latex._parse_latex_antlr.res->convert_postfix(arr[i])
A:sympy.parsing.latex._parse_latex_antlr.left->convert_postfix(arr[i - 1])
A:sympy.parsing.latex._parse_latex_antlr.right->convert_postfix(arr[i + 1])
A:sympy.parsing.latex._parse_latex_antlr.left_syms->convert_postfix(arr[i - 1]).atoms(sympy.Symbol)
A:sympy.parsing.latex._parse_latex_antlr.right_syms->convert_postfix(arr[i + 1]).atoms(sympy.Symbol)
A:sympy.parsing.latex._parse_latex_antlr.at_expr->convert_expr(at.expr())
A:sympy.parsing.latex._parse_latex_antlr.syms->convert_expr(at.expr()).atoms(sympy.Symbol)
A:sympy.parsing.latex._parse_latex_antlr.sym->next(iter(syms))
A:sympy.parsing.latex._parse_latex_antlr.exp_nested->sympy.Add(at_b, -1 * at_a, evaluate=False).exp_nofunc()
A:sympy.parsing.latex._parse_latex_antlr.exp->sympy.Add(at_b, -1 * at_a, evaluate=False)
A:sympy.parsing.latex._parse_latex_antlr.ev->op.eval_at()
A:sympy.parsing.latex._parse_latex_antlr.at_b->do_subs(exp, ev.eval_at_sup())
A:sympy.parsing.latex._parse_latex_antlr.at_a->do_subs(exp, ev.eval_at_sub())
A:sympy.parsing.latex._parse_latex_antlr.base->convert_atom(func.subexpr().atom())
A:sympy.parsing.latex._parse_latex_antlr.exponent->convert_expr(exp.expr())
A:sympy.parsing.latex._parse_latex_antlr.sname->atom.LETTER().getText()
A:sympy.parsing.latex._parse_latex_antlr.subscript->convert_atom(func.subexpr().atom())
A:sympy.parsing.latex._parse_latex_antlr.subscriptName->StrPrinter().doprint(subscript)
A:sympy.parsing.latex._parse_latex_antlr.s->str(sym)
A:sympy.parsing.latex._parse_latex_antlr.var->sympy.Symbol('x')
A:sympy.parsing.latex._parse_latex_antlr.text->get_differential_var_str(d.getText())
A:sympy.parsing.latex._parse_latex_antlr.val->convert_mp(func.mp())
A:sympy.parsing.latex._parse_latex_antlr.lower_itv->frac.lower.getSourceInterval()
A:sympy.parsing.latex._parse_latex_antlr.wrt->sympy.Symbol(wrt)
A:sympy.parsing.latex._parse_latex_antlr.upper_text->rule2text(frac.upper)
A:sympy.parsing.latex._parse_latex_antlr.expr_top->sympy.Number(frac.upperd.text)
A:sympy.parsing.latex._parse_latex_antlr.expr_bot->sympy.Number(frac.lowerd.text)
A:sympy.parsing.latex._parse_latex_antlr.inverse_denom->sympy.Pow(expr_bot, -1, evaluate=False)
A:sympy.parsing.latex._parse_latex_antlr.expr_n->convert_expr(binom.n)
A:sympy.parsing.latex._parse_latex_antlr.expr_k->convert_expr(binom.k)
A:sympy.parsing.latex._parse_latex_antlr.arg->convert_func_arg(func.func_arg_noparens())
A:sympy.parsing.latex._parse_latex_antlr.func_pow->convert_atom(func.supexpr().atom())
A:sympy.parsing.latex._parse_latex_antlr.fname->str(fname)
A:sympy.parsing.latex._parse_latex_antlr.input_args->input_args.args().args()
A:sympy.parsing.latex._parse_latex_antlr.r->convert_expr(func.root)
A:sympy.parsing.latex._parse_latex_antlr.integrand->integrand.subs(int_sym, 1).subs(int_sym, 1)
A:sympy.parsing.latex._parse_latex_antlr.int_var->sympy.Symbol('x')
A:sympy.parsing.latex._parse_latex_antlr.lower->convert_expr(func.subexpr().expr())
A:sympy.parsing.latex._parse_latex_antlr.upper->convert_expr(func.supexpr().expr())
A:sympy.parsing.latex._parse_latex_antlr.iter_var->convert_expr(func.subeq().equality().expr(0))
A:sympy.parsing.latex._parse_latex_antlr.start->convert_expr(func.subeq().equality().expr(1))
A:sympy.parsing.latex._parse_latex_antlr.end->convert_atom(func.supexpr().atom())
A:sympy.parsing.latex._parse_latex_antlr.sub->func.limit_sub()
A:sympy.parsing.latex._parse_latex_antlr.approaching->convert_expr(sub.expr())
A:sympy.parsing.latex._parse_latex_antlr.content->convert_mp(func.mp())
sympy.parsing.latex._parse_latex_antlr.convert_add(add)
sympy.parsing.latex._parse_latex_antlr.convert_atom(atom)
sympy.parsing.latex._parse_latex_antlr.convert_binom(binom)
sympy.parsing.latex._parse_latex_antlr.convert_ceil(ceil)
sympy.parsing.latex._parse_latex_antlr.convert_comp(comp)
sympy.parsing.latex._parse_latex_antlr.convert_exp(exp)
sympy.parsing.latex._parse_latex_antlr.convert_expr(expr)
sympy.parsing.latex._parse_latex_antlr.convert_floor(floor)
sympy.parsing.latex._parse_latex_antlr.convert_frac(frac)
sympy.parsing.latex._parse_latex_antlr.convert_func(func)
sympy.parsing.latex._parse_latex_antlr.convert_func_arg(arg)
sympy.parsing.latex._parse_latex_antlr.convert_mp(mp)
sympy.parsing.latex._parse_latex_antlr.convert_postfix(postfix)
sympy.parsing.latex._parse_latex_antlr.convert_postfix_list(arr,i=0)
sympy.parsing.latex._parse_latex_antlr.convert_relation(rel)
sympy.parsing.latex._parse_latex_antlr.convert_unary(unary)
sympy.parsing.latex._parse_latex_antlr.do_subs(expr,at)
sympy.parsing.latex._parse_latex_antlr.get_differential_var(d)
sympy.parsing.latex._parse_latex_antlr.get_differential_var_str(text)
sympy.parsing.latex._parse_latex_antlr.handle_integral(func)
sympy.parsing.latex._parse_latex_antlr.handle_limit(func)
sympy.parsing.latex._parse_latex_antlr.handle_sum_or_prod(func,name)
sympy.parsing.latex._parse_latex_antlr.parse_latex(sympy)
sympy.parsing.latex._parse_latex_antlr.rule2text(ctx)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/latex/__init__.py----------------------------------------
A:sympy.parsing.latex.__init__._latex->import_module('sympy.parsing.latex._parse_latex_antlr', import_kwargs={'fromlist': ['X']})
sympy.parsing.latex.__init__.parse_latex(s)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/latex/_antlr/latexparser.py----------------------------------------
A:sympy.parsing.latex._antlr.latexparser.atn->ATNDeserializer().deserialize(serializedATN())
A:sympy.parsing.latex._antlr.latexparser.sharedContextCache->PredictionContextCache()
A:sympy.parsing.latex._antlr.latexparser.self._interp->ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
A:sympy.parsing.latex._antlr.latexparser.localctx->LaTeXParser.SupeqContext(self, self._ctx, self.state)
A:sympy.parsing.latex._antlr.latexparser.self._ctx.stop->self._input.LT(-1)
A:sympy.parsing.latex._antlr.latexparser._alt->self._interp.adaptivePredict(self._input, 25, self._ctx)
A:sympy.parsing.latex._antlr.latexparser._la->self._input.LA(1)
A:sympy.parsing.latex._antlr.latexparser.token->self._input.LA(1)
A:sympy.parsing.latex._antlr.latexparser.la_->self._interp.adaptivePredict(self._input, 56, self._ctx)
A:sympy.parsing.latex._antlr.latexparser.localctx.upperd->self.match(LaTeXParser.DIGIT)
A:sympy.parsing.latex._antlr.latexparser.localctx.upper->self.expr()
A:sympy.parsing.latex._antlr.latexparser.localctx.lowerd->self.match(LaTeXParser.DIGIT)
A:sympy.parsing.latex._antlr.latexparser.localctx.lower->self.expr()
A:sympy.parsing.latex._antlr.latexparser.localctx.n->self.expr()
A:sympy.parsing.latex._antlr.latexparser.localctx.k->self.expr()
A:sympy.parsing.latex._antlr.latexparser.localctx.val->self.expr()
A:sympy.parsing.latex._antlr.latexparser.localctx.root->self.expr()
A:sympy.parsing.latex._antlr.latexparser.localctx.base->self.expr()
A:sympy.parsing.latex._antlr.latexparser.self._predicates->dict()
A:sympy.parsing.latex._antlr.latexparser.pred->self._predicates.get(ruleIndex, None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser(self,input:TokenStream,output:TextIO=sys.stdout)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Abs_groupContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Abs_groupContext.BAR(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Abs_groupContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Abs_groupContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AdditiveContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AdditiveContext.ADD(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AdditiveContext.SUB(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AdditiveContext.additive(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AdditiveContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AdditiveContext.mp(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ArgsContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ArgsContext.args(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ArgsContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ArgsContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.DIFFERENTIAL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.LETTER(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.SINGLE_QUOTES(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.SYMBOL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.binom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.bra(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.frac(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.ket(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.mathit(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.number(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.AtomContext.subexpr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BinomContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BinomContext.CMD_BINOM(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BinomContext.CMD_DBINOM(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BinomContext.CMD_TBINOM(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BinomContext.L_BRACE(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BinomContext.R_BRACE(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BinomContext.expr(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BinomContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BraContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BraContext.BAR(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BraContext.L_ANGLE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BraContext.R_BAR(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BraContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.BraContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CeilContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CeilContext.L_CEIL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CeilContext.R_CEIL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CeilContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CeilContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CompContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CompContext.abs_group(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CompContext.atom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CompContext.ceil(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CompContext.floor(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CompContext.func(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CompContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.CompContext.group(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Comp_nofuncContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Comp_nofuncContext.abs_group(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Comp_nofuncContext.atom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Comp_nofuncContext.ceil(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Comp_nofuncContext.floor(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Comp_nofuncContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Comp_nofuncContext.group(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.EqualityContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.EqualityContext.EQUAL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.EqualityContext.expr(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.EqualityContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_atContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_atContext.BAR(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_atContext.eval_at_sub(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_atContext.eval_at_sup(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_atContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_subContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_subContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_subContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_subContext.UNDERSCORE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_subContext.equality(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_subContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_subContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_supContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_supContext.CARET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_supContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_supContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_supContext.equality(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_supContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Eval_at_supContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.CARET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.atom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.comp(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.exp(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExpContext.subexpr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.CARET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.atom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.comp_nofunc(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.exp_nofunc(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Exp_nofuncContext.subexpr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExprContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExprContext.additive(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ExprContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FloorContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FloorContext.L_FLOOR(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FloorContext.R_FLOOR(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FloorContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FloorContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FracContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FracContext.CMD_FRAC(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FracContext.DIGIT(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FracContext.L_BRACE(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FracContext.R_BRACE(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FracContext.expr(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FracContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.DIFFERENTIAL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.FUNC_INT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.FUNC_LIM(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.FUNC_OVERLINE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.FUNC_PROD(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.FUNC_SQRT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.FUNC_SUM(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.LETTER(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.L_BRACKET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.L_PAREN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.R_BRACKET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.R_PAREN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.SINGLE_QUOTES(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.SYMBOL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.additive(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.args(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.expr(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.frac(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.func_arg(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.func_arg_noparens(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.func_normal(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.limit_sub(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.mp(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.subeq(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.subexpr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.FuncContext.supexpr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_argContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_argContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_argContext.func_arg(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_argContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_arg_noparensContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_arg_noparensContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_arg_noparensContext.mp_nofunc(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARCCOS(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARCCOT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARCCSC(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARCOSH(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARCSEC(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARCSIN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARCTAN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARSINH(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_ARTANH(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_COS(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_COSH(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_COT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_CSC(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_EXP(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_LG(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_LN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_LOG(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_SEC(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_SIN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_SINH(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_TAN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.FUNC_TANH(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Func_normalContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.L_BRACE_LITERAL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.L_BRACKET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.L_PAREN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.R_BRACE_LITERAL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.R_BRACKET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.R_PAREN(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.GroupContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.KetContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.KetContext.BAR(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.KetContext.L_BAR(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.KetContext.R_ANGLE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.KetContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.KetContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.ADD(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.CARET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.LETTER(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.LIM_APPROACH_SYM(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.L_BRACE(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.R_BRACE(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.SUB(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.SYMBOL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.UNDERSCORE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Limit_subContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathContext.relation(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathitContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathitContext.CMD_MATHIT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathitContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathitContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathitContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MathitContext.mathit_text(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mathit_textContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mathit_textContext.LETTER(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mathit_textContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.CMD_CDOT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.CMD_DIV(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.CMD_TIMES(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.COLON(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.DIV(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.MUL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.mp(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.MpContext.unary(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.CMD_CDOT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.CMD_DIV(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.CMD_TIMES(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.COLON(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.DIV(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.MUL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.mp_nofunc(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Mp_nofuncContext.unary_nofunc(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.NumberContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.NumberContext.DIGIT(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.NumberContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.PostfixContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.PostfixContext.exp(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.PostfixContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.PostfixContext.postfix_op(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Postfix_nofuncContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Postfix_nofuncContext.exp_nofunc(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Postfix_nofuncContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Postfix_nofuncContext.postfix_op(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Postfix_opContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Postfix_opContext.BANG(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Postfix_opContext.eval_at(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Postfix_opContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.EQUAL(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.GT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.GTE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.LT(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.LTE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.NEQ(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.RelationContext.relation(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubeqContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubeqContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubeqContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubeqContext.UNDERSCORE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubeqContext.equality(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubeqContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubexprContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubexprContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubexprContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubexprContext.UNDERSCORE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubexprContext.atom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubexprContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SubexprContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupeqContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupeqContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupeqContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupeqContext.UNDERSCORE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupeqContext.equality(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupeqContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupexprContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupexprContext.CARET(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupexprContext.L_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupexprContext.R_BRACE(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupexprContext.atom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupexprContext.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.SupexprContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.UnaryContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.UnaryContext.ADD(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.UnaryContext.SUB(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.UnaryContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.UnaryContext.postfix(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.UnaryContext.unary(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Unary_nofuncContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Unary_nofuncContext.ADD(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Unary_nofuncContext.SUB(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Unary_nofuncContext.getRuleIndex(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Unary_nofuncContext.postfix(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Unary_nofuncContext.postfix_nofunc(self,i:int=None)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.Unary_nofuncContext.unary_nofunc(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.abs_group(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.additive(self,_p:int=0)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.additive_sempred(self,localctx:AdditiveContext,predIndex:int)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.args(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.atom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.binom(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.bra(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ceil(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.comp(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.comp_nofunc(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.equality(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.eval_at(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.eval_at_sub(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.eval_at_sup(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.exp(self,_p:int=0)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.exp_nofunc(self,_p:int=0)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.exp_nofunc_sempred(self,localctx:Exp_nofuncContext,predIndex:int)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.exp_sempred(self,localctx:ExpContext,predIndex:int)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.expr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.floor(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.frac(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.func(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.func_arg(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.func_arg_noparens(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.func_normal(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.group(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.ket(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.limit_sub(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.math(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.mathit(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.mathit_text(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.mp(self,_p:int=0)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.mp_nofunc(self,_p:int=0)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.mp_nofunc_sempred(self,localctx:Mp_nofuncContext,predIndex:int)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.mp_sempred(self,localctx:MpContext,predIndex:int)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.number(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.postfix(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.postfix_nofunc(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.postfix_op(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.relation(self,_p:int=0)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.relation_sempred(self,localctx:RelationContext,predIndex:int)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.sempred(self,localctx:RuleContext,ruleIndex:int,predIndex:int)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.subeq(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.subexpr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.supeq(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.supexpr(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.unary(self)
sympy.parsing.latex._antlr.latexparser.LaTeXParser.unary_nofunc(self)
sympy.parsing.latex._antlr.latexparser.serializedATN()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/latex/_antlr/latexlexer.py----------------------------------------
A:sympy.parsing.latex._antlr.latexlexer.atn->ATNDeserializer().deserialize(serializedATN())
A:sympy.parsing.latex._antlr.latexlexer.self._interp->LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
sympy.parsing.latex._antlr.latexlexer.LaTeXLexer(self,input=None,output:TextIO=sys.stdout)
sympy.parsing.latex._antlr.latexlexer.serializedATN()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/latex/_antlr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/fortran/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/fortran/fortran_parser.py----------------------------------------
A:sympy.parsing.fortran.fortran_parser.lfortran->import_module('lfortran')
A:sympy.parsing.fortran.fortran_parser.new_node->FunctionDefinition(return_type=ret_type, name=fn_name, parameters=fn_args, body=fn_body)
A:sympy.parsing.fortran.fortran_parser.exp_ast->call_visitor(value)
A:sympy.parsing.fortran.fortran_parser.left_value->Symbol(lhs.name)
A:sympy.parsing.fortran.fortran_parser.l_exp_ast->call_visitor(lhs)
A:sympy.parsing.fortran.fortran_parser.right_value->Symbol(rhs.name)
A:sympy.parsing.fortran.fortran_parser.r_exp_ast->call_visitor(rhs)
A:sympy.parsing.fortran.fortran_parser.var_type->FloatBaseType(String('real'))
A:sympy.parsing.fortran.fortran_parser.value->Float(0.0)
A:sympy.parsing.fortran.fortran_parser.fn_ast->call_visitor(i)
A:sympy.parsing.fortran.fortran_parser.decl->call_visitor(node.symtab.symbols[sym])
A:sympy.parsing.fortran.fortran_parser.ret_type->FloatBaseType(String('real'))
A:sympy.parsing.fortran.fortran_parser.v->ASR2PyVisitor()
A:sympy.parsing.fortran.fortran_parser.res_ast->ASR2PyVisitor().ret_ast()
A:sympy.parsing.fortran.fortran_parser.a_ast->src_to_ast(src, translation_unit=False)
A:sympy.parsing.fortran.fortran_parser.a->ast_to_asr(a_ast)
A:sympy.parsing.fortran.fortran_parser.py_src->call_visitor(a)
sympy.parsing.fortran.fortran_parser.call_visitor(fort_node)
sympy.parsing.fortran.fortran_parser.src_to_sympy(src)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/_build_autolev_antlr.py----------------------------------------
A:sympy.parsing.autolev._build_autolev_antlr.here->os.path.dirname(__file__)
A:sympy.parsing.autolev._build_autolev_antlr.grammar_file->os.path.abspath(os.path.join(here, 'Autolev.g4'))
A:sympy.parsing.autolev._build_autolev_antlr.dir_autolev_antlr->os.path.join(here, '_antlr')
A:sympy.parsing.autolev._build_autolev_antlr.new_path->os.path.join(output_dir, os.path.basename(path).lower())
sympy.parsing.autolev._build_autolev_antlr.build_parser(output_dir=dir_autolev_antlr)
sympy.parsing.autolev._build_autolev_antlr.check_antlr_version()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/_parse_autolev_antlr.py----------------------------------------
A:sympy.parsing.autolev._parse_autolev_antlr.autolevparser->import_module('sympy.parsing.autolev._antlr.autolevparser', import_kwargs={'fromlist': ['AutolevParser']})
A:sympy.parsing.autolev._parse_autolev_antlr.autolevlexer->import_module('sympy.parsing.autolev._antlr.autolevlexer', import_kwargs={'fromlist': ['AutolevLexer']})
A:sympy.parsing.autolev._parse_autolev_antlr.autolevlistener->import_module('sympy.parsing.autolev._antlr.autolevlistener', import_kwargs={'fromlist': ['AutolevListener']})
A:sympy.parsing.autolev._parse_autolev_antlr.AutolevParser->getattr(autolevparser, 'AutolevParser', None)
A:sympy.parsing.autolev._parse_autolev_antlr.AutolevLexer->getattr(autolevlexer, 'AutolevLexer', None)
A:sympy.parsing.autolev._parse_autolev_antlr.AutolevListener->getattr(autolevlistener, 'AutolevListener', None)
A:sympy.parsing.autolev._parse_autolev_antlr.antlr4->import_module('antlr4')
A:sympy.parsing.autolev._parse_autolev_antlr.l->autolev_code.readlines()
A:sympy.parsing.autolev._parse_autolev_antlr.input_stream->import_module('antlr4').InputStream(autolev_code)
A:sympy.parsing.autolev._parse_autolev_antlr.lexer->AutolevLexer(input_stream)
A:sympy.parsing.autolev._parse_autolev_antlr.token_stream->import_module('antlr4').CommonTokenStream(lexer)
A:sympy.parsing.autolev._parse_autolev_antlr.parser->AutolevParser(token_stream)
A:sympy.parsing.autolev._parse_autolev_antlr.tree->AutolevParser(token_stream).prog()
A:sympy.parsing.autolev._parse_autolev_antlr.my_listener->MyListener(include_numeric)
A:sympy.parsing.autolev._parse_autolev_antlr.walker->import_module('antlr4').ParseTreeWalker()
sympy.parsing.autolev._parse_autolev_antlr.parse_autolev(autolev_code,include_numeric)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/_listener_autolev_antlr.py----------------------------------------
A:sympy.parsing.autolev._listener_autolev_antlr.autolevparser->import_module('sympy.parsing.autolev._antlr.autolevparser', import_kwargs={'fromlist': ['AutolevParser']})
A:sympy.parsing.autolev._listener_autolev_antlr.autolevlexer->import_module('sympy.parsing.autolev._antlr.autolevlexer', import_kwargs={'fromlist': ['AutolevLexer']})
A:sympy.parsing.autolev._listener_autolev_antlr.autolevlistener->import_module('sympy.parsing.autolev._antlr.autolevlistener', import_kwargs={'fromlist': ['AutolevListener']})
A:sympy.parsing.autolev._listener_autolev_antlr.AutolevParser->getattr(autolevparser, 'AutolevParser', None)
A:sympy.parsing.autolev._listener_autolev_antlr.AutolevLexer->getattr(autolevlexer, 'AutolevLexer', None)
A:sympy.parsing.autolev._listener_autolev_antlr.AutolevListener->getattr(autolevlistener, 'AutolevListener', None)
A:sympy.parsing.autolev._listener_autolev_antlr.name1->ctx.ID().getText().lower()
A:sympy.parsing.autolev._listener_autolev_antlr.name->ctx.vec().ID().getText().lower()
A:sympy.parsing.autolev._listener_autolev_antlr.num1->int(ctx.INT(0).getText())
A:sympy.parsing.autolev._listener_autolev_antlr.num3->int(ctx.INT(2).getText())
A:sympy.parsing.autolev._listener_autolev_antlr.l1->list(filter(lambda x: self.sign[x] == 'o', self.var_list))
A:sympy.parsing.autolev._listener_autolev_antlr.l2->list(filter(lambda x: self.sign[x] == '+', self.var_list))
A:sympy.parsing.autolev._listener_autolev_antlr.l3->list(filter(lambda x: self.sign[x] == '-', self.var_list))
A:sympy.parsing.autolev._listener_autolev_antlr.self.maxDegree->ctx.getText().count("'")
A:sympy.parsing.autolev._listener_autolev_antlr.dash_count->ctx.getText().count("'")
A:sympy.parsing.autolev._listener_autolev_antlr.j->str(i)
A:sympy.parsing.autolev._listener_autolev_antlr.self.symbol_table->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.symbol_table2->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.type->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.type2->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.explicit->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.inputs->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.bodies->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.forces->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.kd_equivalents->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.kd_equivalents2->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.self.inertia_point->collections.OrderedDict()
A:sympy.parsing.autolev._listener_autolev_antlr.(e1, e2)->self.getValue(ctx.functionCall().expr(i)).split('_')
A:sympy.parsing.autolev._listener_autolev_antlr.int_text->str(int(self.getValue(ctx.getChild(2))) - 1)
A:sympy.parsing.autolev._listener_autolev_antlr.floatText->ctx.FLOAT().getText()
A:sympy.parsing.autolev._listener_autolev_antlr.s->s.lstrip('0').lstrip('0')
A:sympy.parsing.autolev._listener_autolev_antlr.ch->ctx.vec()
A:sympy.parsing.autolev._listener_autolev_antlr.func_name->ctx.getChild(0).getText().lower()
A:sympy.parsing.autolev._listener_autolev_antlr.expr->self.getValue(ctx.expr(0))
A:sympy.parsing.autolev._listener_autolev_antlr.exp->self.getValue(ch.expr(0))
A:sympy.parsing.autolev._listener_autolev_antlr.order->self.getValue(ch.expr(1).expr(1))
A:sympy.parsing.autolev._listener_autolev_antlr.child->ctx.matrix().getChild(i)
A:sympy.parsing.autolev._listener_autolev_antlr.n->self.getValue(ch.expr(0))
A:sympy.parsing.autolev._listener_autolev_antlr.m->self.getValue(ch.expr(1))
A:sympy.parsing.autolev._listener_autolev_antlr.x->self.getValue(ch.expr(2))
A:sympy.parsing.autolev._listener_autolev_antlr.v->self.getValue(ch.expr(1))
A:sympy.parsing.autolev._listener_autolev_antlr.v2->ctx.vec().expr(0).getChild(0).ID(0).getText().lower()
A:sympy.parsing.autolev._listener_autolev_antlr.(v1, v2, v3)->ctx.vec().ID().getText().lower().split('_')
A:sympy.parsing.autolev._listener_autolev_antlr.self.u_ind->self.q_ind.copy()
A:sympy.parsing.autolev._listener_autolev_antlr.vec_text->ctx.vec().getText().lower()
A:sympy.parsing.autolev._listener_autolev_antlr.int_text1->str(int(self.getValue(ctx.getChild(2))) - 1)
A:sympy.parsing.autolev._listener_autolev_antlr.int_text2->str(int(self.getValue(ctx.getChild(4))) - 1)
A:sympy.parsing.autolev._listener_autolev_antlr.equals->ctx.equals().getText()
A:sympy.parsing.autolev._listener_autolev_antlr.a->self.getValue(ctx.functionCall().expr(i))
A:sympy.parsing.autolev._listener_autolev_antlr.b->ctx.expr().getText().lower()
A:sympy.parsing.autolev._listener_autolev_antlr.text->ctx.ID().getText().lower()
A:sympy.parsing.autolev._listener_autolev_antlr.num->ctx.vec().ID().getText().count('_')
A:sympy.parsing.autolev._listener_autolev_antlr.(v1, v2)->ctx.vec().ID().getText().lower().split('_')
A:sympy.parsing.autolev._listener_autolev_antlr.matrix_name->self.getValue(ctx.functionCall().expr(0))
A:sympy.parsing.autolev._listener_autolev_antlr.e->self.getValue(ctx.expr().expr(1))
A:sympy.parsing.autolev._listener_autolev_antlr.value->self.getValue(ctx.expr(3))
A:sympy.parsing.autolev._listener_autolev_antlr.vec->ctx.expr(0).getText().lower().replace('>', '').split('_')
A:sympy.parsing.autolev._listener_autolev_antlr.p1->ctx.expr(0).getText().lower()
A:sympy.parsing.autolev._listener_autolev_antlr.mass->self.getValue(ctx.expr())
A:sympy.parsing.autolev._listener_autolev_antlr.a_text->ctx.expr(i).getText().lower()
sympy.parsing.autolev._listener_autolev_antlr.declare_bodies(self,ctx,i,j=None)
sympy.parsing.autolev._listener_autolev_antlr.declare_frames(self,ctx,i,j=None)
sympy.parsing.autolev._listener_autolev_antlr.declare_particles(self,ctx,i,j=None)
sympy.parsing.autolev._listener_autolev_antlr.declare_phy_entities(self,ctx,phy_type,i,j=None)
sympy.parsing.autolev._listener_autolev_antlr.declare_points(self,ctx,i,j=None)
sympy.parsing.autolev._listener_autolev_antlr.inertia_func(self,v1,v2,l,frame)
sympy.parsing.autolev._listener_autolev_antlr.processConstants(self,ctx)
sympy.parsing.autolev._listener_autolev_antlr.processImaginary(self,ctx)
sympy.parsing.autolev._listener_autolev_antlr.processVariables(self,ctx)
sympy.parsing.autolev._listener_autolev_antlr.strfunc(z)
sympy.parsing.autolev._listener_autolev_antlr.writeConstants(self,ctx)
sympy.parsing.autolev._listener_autolev_antlr.writeImaginary(self,ctx)
sympy.parsing.autolev._listener_autolev_antlr.writeVariables(self,ctx)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/__init__.py----------------------------------------
A:sympy.parsing.autolev.__init__._autolev->import_module('sympy.parsing.autolev._parse_autolev_antlr', import_kwargs={'fromlist': ['X']})
sympy.parsing.autolev.__init__.parse_autolev(autolev_code,include_numeric=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest3.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest3.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.ruletest3.frame_b->sympy.physics.mechanics.ReferenceFrame('b')
A:sympy.parsing.autolev.test-examples.ruletest3.frame_n->sympy.physics.mechanics.ReferenceFrame('n')
A:sympy.parsing.autolev.test-examples.ruletest3.(x1, x2, x3)->sympy.physics.mechanics.dynamicsymbols('x1 x2 x3')
A:sympy.parsing.autolev.test-examples.ruletest3.l->sympy.symbols('l', real=True)
A:sympy.parsing.autolev.test-examples.ruletest3.point_c->sympy.physics.mechanics.Point('c')
A:sympy.parsing.autolev.test-examples.ruletest3.point_d->sympy.physics.mechanics.Point('d')
A:sympy.parsing.autolev.test-examples.ruletest3.point_po1->sympy.physics.mechanics.Point('po1')
A:sympy.parsing.autolev.test-examples.ruletest3.point_po2->sympy.physics.mechanics.Point('po2')
A:sympy.parsing.autolev.test-examples.ruletest3.point_po3->sympy.physics.mechanics.Point('po3')
A:sympy.parsing.autolev.test-examples.ruletest3.particle_l->sympy.physics.mechanics.Particle('l', _me.Point('l_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest3.particle_p1->sympy.physics.mechanics.Particle('p1', _me.Point('p1_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest3.particle_p2->sympy.physics.mechanics.Particle('p2', _me.Point('p2_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest3.particle_p3->sympy.physics.mechanics.Particle('p3', _me.Point('p3_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest3.body_s_cm->sympy.physics.mechanics.Point('s_cm')
A:sympy.parsing.autolev.test-examples.ruletest3.body_s_f->sympy.physics.mechanics.ReferenceFrame('s_f')
A:sympy.parsing.autolev.test-examples.ruletest3.body_s->sympy.physics.mechanics.RigidBody('s', body_s_cm, body_s_f, _sm.symbols('m'), (_me.outer(body_s_f.x, body_s_f.x), body_s_cm))
A:sympy.parsing.autolev.test-examples.ruletest3.body_r1_cm->sympy.physics.mechanics.Point('r1_cm')
A:sympy.parsing.autolev.test-examples.ruletest3.body_r1_f->sympy.physics.mechanics.ReferenceFrame('r1_f')
A:sympy.parsing.autolev.test-examples.ruletest3.body_r1->sympy.physics.mechanics.RigidBody('r1', body_r1_cm, body_r1_f, _sm.symbols('m'), (_me.outer(body_r1_f.x, body_r1_f.x), body_r1_cm))
A:sympy.parsing.autolev.test-examples.ruletest3.body_r2_cm->sympy.physics.mechanics.Point('r2_cm')
A:sympy.parsing.autolev.test-examples.ruletest3.body_r2_f->sympy.physics.mechanics.ReferenceFrame('r2_f')
A:sympy.parsing.autolev.test-examples.ruletest3.body_r2->sympy.physics.mechanics.RigidBody('r2', body_r2_cm, body_r2_f, _sm.symbols('m'), (_me.outer(body_r2_f.x, body_r2_f.x), body_r2_cm))


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest1.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest1.f->sympy.S(3)
A:sympy.parsing.autolev.test-examples.ruletest1.g->sympy.S(9.81)
A:sympy.parsing.autolev.test-examples.ruletest1.(a, b)->sympy.symbols('a b', real=True)
A:sympy.parsing.autolev.test-examples.ruletest1.(s, s1)->sympy.symbols('s s1', real=True)
A:sympy.parsing.autolev.test-examples.ruletest1.(s2, s3)->sympy.symbols('s2 s3', real=True, nonnegative=True)
A:sympy.parsing.autolev.test-examples.ruletest1.s4->sympy.symbols('s4', real=True, nonpositive=True)
A:sympy.parsing.autolev.test-examples.ruletest1.(k1, k2, k3, k4, l1, l2, l3, p11, p12, p13, p21, p22, p23)->sympy.symbols('k1 k2 k3 k4 l1 l2 l3 p11 p12 p13 p21 p22 p23', real=True)
A:sympy.parsing.autolev.test-examples.ruletest1.(c11, c12, c13, c21, c22, c23)->sympy.symbols('c11 c12 c13 c21 c22 c23', real=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest6.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest6.(q1, q2)->sympy.physics.mechanics.dynamicsymbols('q1 q2')
A:sympy.parsing.autolev.test-examples.ruletest6.(x, y, z)->sympy.physics.mechanics.dynamicsymbols('x y z')
A:sympy.parsing.autolev.test-examples.ruletest6.a->((x + y) ** 2).expand().subs({q1: x ** 2 + y ** 2, q2: x - y}).subs({x: 2, y: z ** 2})
A:sympy.parsing.autolev.test-examples.ruletest6.e2->sympy.cos(x)
A:sympy.parsing.autolev.test-examples.ruletest6.e3->sympy.cos(x * y)
A:sympy.parsing.autolev.test-examples.ruletest6.b->sympy.cos(x * y).series(x, 0, 2).removeO().series(y, 0, 2).removeO()
A:sympy.parsing.autolev.test-examples.ruletest6.e->((x + y) ** 2).expand()
A:sympy.parsing.autolev.test-examples.ruletest6.bm->sympy.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).reshape(4, 4).col(0)
A:sympy.parsing.autolev.test-examples.ruletest6.(j, k, l)->sympy.symbols('j k l', real=True)
A:sympy.parsing.autolev.test-examples.ruletest6.p1->sympy.Poly(_sm.Matrix([j, k, l]).reshape(1, 3), x)
A:sympy.parsing.autolev.test-examples.ruletest6.p2->sympy.Poly(j * x + k, x)
A:sympy.parsing.autolev.test-examples.ruletest6.m->sympy.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).reshape(4, 4)
A:sympy.parsing.autolev.test-examples.ruletest6.c1->sympy.diag(1, 1, 1, 1)
A:sympy.parsing.autolev.test-examples.ruletest6.c2->sympy.Matrix([2 if i == j else 0 for i in range(3) for j in range(4)]).reshape(3, 4)
A:sympy.parsing.autolev.test-examples.ruletest6.cm->sympy.Matrix([m.T.row(0), m.T.row(1), m.T.row(2), m.T.row(3), m.T.row(2)])
A:sympy.parsing.autolev.test-examples.ruletest6.dm->sympy.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).reshape(4, 4).row(0)
A:sympy.parsing.autolev.test-examples.ruletest6.em->sympy.Matrix([m.row(0), m.row(1), m.row(2), m.row(3), m.row(2)])


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest12.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest12.(x, y)->sympy.physics.mechanics.dynamicsymbols('x y')
A:sympy.parsing.autolev.test-examples.ruletest12.(a, b, r)->sympy.symbols('a b r', real=True)
A:sympy.parsing.autolev.test-examples.ruletest12.eqn->eqn.row_insert(eqn.shape[0], _sm.Matrix([[0]])).row_insert(eqn.shape[0], _sm.Matrix([[0]]))


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest5.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest5.(x, y)->sympy.physics.mechanics.dynamicsymbols('x y')
A:sympy.parsing.autolev.test-examples.ruletest5.(x_d, y_d)->sympy.physics.mechanics.dynamicsymbols('x_ y_', 1)
A:sympy.parsing.autolev.test-examples.ruletest5.m1->sympy.Matrix([e1, e2]).reshape(2, 1)
A:sympy.parsing.autolev.test-examples.ruletest5.m2->sympy.Matrix([(x + y) ** 2, (x - y) ** 2]).reshape(1, 2)
A:sympy.parsing.autolev.test-examples.ruletest5.am->sympy.Matrix([i.expand() for i in m1]).reshape(m1.shape[0], m1.shape[1])
A:sympy.parsing.autolev.test-examples.ruletest5.cm->sympy.Matrix([i.diff(x) for i in m2]).reshape(m2.shape[0], m2.shape[1])
A:sympy.parsing.autolev.test-examples.ruletest5.em->sympy.Matrix([i.expand() for i in m1 + _sm.Matrix([x, y]).reshape(2, 1)]).reshape((m1 + _sm.Matrix([x, y]).reshape(2, 1)).shape[0], (m1 + _sm.Matrix([x, y]).reshape(2, 1)).shape[1])
A:sympy.parsing.autolev.test-examples.ruletest5.f->e1.expand()
A:sympy.parsing.autolev.test-examples.ruletest5.g->e2.expand()
A:sympy.parsing.autolev.test-examples.ruletest5.a->e3.diff(x)
A:sympy.parsing.autolev.test-examples.ruletest5.bm->sympy.Matrix([_sm.factor(i, x) for i in m1]).reshape(m1.shape[0], m1.shape[1])
A:sympy.parsing.autolev.test-examples.ruletest5.b->e3.diff(y)
A:sympy.parsing.autolev.test-examples.ruletest5.dm->sympy.Matrix([i.diff(x) for i in m1 + _sm.Matrix([x, y]).reshape(2, 1)]).reshape((m1 + _sm.Matrix([x, y]).reshape(2, 1)).shape[0], (m1 + _sm.Matrix([x, y]).reshape(2, 1)).shape[1])
A:sympy.parsing.autolev.test-examples.ruletest5.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.ruletest5.frame_b->sympy.physics.mechanics.ReferenceFrame('b')
A:sympy.parsing.autolev.test-examples.ruletest5.e->v1.diff(x, frame_b)
A:sympy.parsing.autolev.test-examples.ruletest5.fm->sympy.Matrix([i.diff(_sm.Symbol('t')) for i in m1]).reshape(m1.shape[0], m1.shape[1])
A:sympy.parsing.autolev.test-examples.ruletest5.gm->sympy.Matrix([i.diff(_sm.Symbol('t')) for i in _sm.Matrix([(x + y) ** 2, (x - y) ** 2]).reshape(1, 2)]).reshape(_sm.Matrix([(x + y) ** 2, (x - y) ** 2]).reshape(1, 2).shape[0], _sm.Matrix([(x + y) ** 2, (x - y) ** 2]).reshape(1, 2).shape[1])
A:sympy.parsing.autolev.test-examples.ruletest5.h->v1.dt(frame_b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest8.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest8.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.ruletest8.(c1, c2, c3)->sympy.symbols('c1 c2 c3', real=True)
A:sympy.parsing.autolev.test-examples.ruletest8.a->sympy.physics.mechanics.Particle('p1', _me.Point('p1_pt'), _sm.Symbol('m')).point.partial_velocity(frame_a, u1)
A:sympy.parsing.autolev.test-examples.ruletest8.particle_p1->sympy.physics.mechanics.Particle('p1', _me.Point('p1_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest8.particle_p2->sympy.physics.mechanics.Particle('p2', _me.Point('p2_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest8.body_r_cm->sympy.physics.mechanics.Point('r_cm')
A:sympy.parsing.autolev.test-examples.ruletest8.body_r_f->sympy.physics.mechanics.ReferenceFrame('r_f')
A:sympy.parsing.autolev.test-examples.ruletest8.body_r->sympy.physics.mechanics.RigidBody('r', body_r_cm, body_r_f, _sm.symbols('m'), (_me.outer(body_r_f.x, body_r_f.x), body_r_cm))
A:sympy.parsing.autolev.test-examples.ruletest8.point_o->sympy.physics.mechanics.Point('o')
A:sympy.parsing.autolev.test-examples.ruletest8.m1->sympy.symbols('m1')
A:sympy.parsing.autolev.test-examples.ruletest8.m2->sympy.symbols('m2')
A:sympy.parsing.autolev.test-examples.ruletest8.mr->sympy.symbols('mr')
A:sympy.parsing.autolev.test-examples.ruletest8.i1->sympy.symbols('i1')
A:sympy.parsing.autolev.test-examples.ruletest8.i2->sympy.symbols('i2')
A:sympy.parsing.autolev.test-examples.ruletest8.i3->sympy.symbols('i3')
A:sympy.parsing.autolev.test-examples.ruletest8.b->sympy.physics.mechanics.functions.center_of_mass(particle_p1.point, particle_p1, particle_p2, body_r)
A:sympy.parsing.autolev.test-examples.ruletest8.(u1, u2, u3)->sympy.physics.mechanics.dynamicsymbols('u1 u2 u3')
A:sympy.parsing.autolev.test-examples.ruletest8.u->(v + c1 * frame_a.x).normalize()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest7.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest7.(x, y)->sympy.physics.mechanics.dynamicsymbols('x y')
A:sympy.parsing.autolev.test-examples.ruletest7.(x_d, y_d)->sympy.physics.mechanics.dynamicsymbols('x_ y_', 1)
A:sympy.parsing.autolev.test-examples.ruletest7.am->dyadic.to_matrix(frame_b)
A:sympy.parsing.autolev.test-examples.ruletest7.b->e1.expand().coeff(x)
A:sympy.parsing.autolev.test-examples.ruletest7.c->sympy.physics.mechanics.cross(v1, v2)
A:sympy.parsing.autolev.test-examples.ruletest7.d1->e1.collect(x).coeff(x, 0)
A:sympy.parsing.autolev.test-examples.ruletest7.d2->e1.collect(x).coeff(x, 1)
A:sympy.parsing.autolev.test-examples.ruletest7.fm->sympy.Matrix([i.collect(x) for i in _sm.Matrix([e1, e2]).reshape(1, 2)]).reshape(_sm.Matrix([e1, e2]).reshape(1, 2).shape[0], _sm.Matrix([e1, e2]).reshape(1, 2).shape[1])
A:sympy.parsing.autolev.test-examples.ruletest7.f->e1.collect(y)
A:sympy.parsing.autolev.test-examples.ruletest7.g->e1.subs({x: 2 * x})
A:sympy.parsing.autolev.test-examples.ruletest7.gm->sympy.Matrix([i.subs({x: 3}) for i in _sm.Matrix([e1, e2]).reshape(2, 1)]).reshape(_sm.Matrix([e1, e2]).reshape(2, 1).shape[0], _sm.Matrix([e1, e2]).reshape(2, 1).shape[1])
A:sympy.parsing.autolev.test-examples.ruletest7.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.ruletest7.frame_b->sympy.physics.mechanics.ReferenceFrame('b')
A:sympy.parsing.autolev.test-examples.ruletest7.theta->sympy.physics.mechanics.dynamicsymbols('theta')
A:sympy.parsing.autolev.test-examples.ruletest7.a->sympy.physics.mechanics.dot(v1, v2)
A:sympy.parsing.autolev.test-examples.ruletest7.bm->sympy.Matrix([_me.dot(v1, v2), _me.dot(v1, 2 * v2)]).reshape(2, 1)
A:sympy.parsing.autolev.test-examples.ruletest7.m->sympy.Matrix([1, 2, 3]).reshape(3, 1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest4.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest4.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.ruletest4.frame_b->sympy.physics.mechanics.ReferenceFrame('b')
A:sympy.parsing.autolev.test-examples.ruletest4.(q1, q2, q3)->sympy.physics.mechanics.dynamicsymbols('q1 q2 q3')
A:sympy.parsing.autolev.test-examples.ruletest4.dcm->sympy.physics.mechanics.ReferenceFrame('a').dcm(frame_b)
A:sympy.parsing.autolev.test-examples.ruletest4.r->sympy.physics.mechanics.dynamicsymbols('r')
A:sympy.parsing.autolev.test-examples.ruletest4.(u, a)->sympy.physics.mechanics.dynamicsymbols('u a')
A:sympy.parsing.autolev.test-examples.ruletest4.(x, y)->sympy.physics.mechanics.dynamicsymbols('x y')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest2.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest2.(x1, x2)->sympy.physics.mechanics.dynamicsymbols('x1 x2')
A:sympy.parsing.autolev.test-examples.ruletest2.(x, y)->sympy.physics.mechanics.dynamicsymbols('x y')
A:sympy.parsing.autolev.test-examples.ruletest2.(x_d, y_d)->sympy.physics.mechanics.dynamicsymbols('x_ y_', 1)
A:sympy.parsing.autolev.test-examples.ruletest2.y_dd->sympy.physics.mechanics.dynamicsymbols('y_', 2)
A:sympy.parsing.autolev.test-examples.ruletest2.(q1, q2, q3, u1, u2)->sympy.physics.mechanics.dynamicsymbols('q1 q2 q3 u1 u2')
A:sympy.parsing.autolev.test-examples.ruletest2.(p1, p2)->sympy.physics.mechanics.dynamicsymbols('p1 p2')
A:sympy.parsing.autolev.test-examples.ruletest2.(p1_d, p2_d)->sympy.physics.mechanics.dynamicsymbols('p1_ p2_', 1)
A:sympy.parsing.autolev.test-examples.ruletest2.(w1, w2, w3, r1, r2)->sympy.physics.mechanics.dynamicsymbols('w1 w2 w3 r1 r2')
A:sympy.parsing.autolev.test-examples.ruletest2.(w1_d, w2_d, w3_d, r1_d, r2_d)->sympy.physics.mechanics.dynamicsymbols('w1_ w2_ w3_ r1_ r2_', 1)
A:sympy.parsing.autolev.test-examples.ruletest2.(r1_dd, r2_dd)->sympy.physics.mechanics.dynamicsymbols('r1_ r2_', 2)
A:sympy.parsing.autolev.test-examples.ruletest2.(c11, c12, c21, c22)->sympy.physics.mechanics.dynamicsymbols('c11 c12 c21 c22')
A:sympy.parsing.autolev.test-examples.ruletest2.(d11, d12, d13)->sympy.physics.mechanics.dynamicsymbols('d11 d12 d13')
A:sympy.parsing.autolev.test-examples.ruletest2.(j1, j2)->sympy.physics.mechanics.dynamicsymbols('j1 j2')
A:sympy.parsing.autolev.test-examples.ruletest2.n->sympy.symbols('n')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest10.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest10.(x, y)->sympy.physics.mechanics.dynamicsymbols('x y')
A:sympy.parsing.autolev.test-examples.ruletest10.(a, b)->sympy.symbols('a b', real=True)
A:sympy.parsing.autolev.test-examples.ruletest10.m->sympy.Matrix([a, b, c, 0]).reshape(2, 2)
A:sympy.parsing.autolev.test-examples.ruletest10.e->sympy.factor(e, x)
A:sympy.parsing.autolev.test-examples.ruletest10.eqn->eqn.row_insert(eqn.shape[0], _sm.Matrix([[0]])).row_insert(eqn.shape[0], _sm.Matrix([[0]]))
A:sympy.parsing.autolev.test-examples.ruletest10.(a, b, c)->sympy.symbols('a b c', real=True)
A:sympy.parsing.autolev.test-examples.ruletest10.m2->sympy.Matrix([i.subs({a: 1, b: 2, c: 3}) for i in m]).reshape(m.shape[0], m.shape[1])
A:sympy.parsing.autolev.test-examples.ruletest10.eigvalue->sympy.Matrix([i.evalf() for i in m2.eigenvals().keys()])
A:sympy.parsing.autolev.test-examples.ruletest10.eigvec->sympy.Matrix([i[2][0].evalf() for i in m2.eigenvects()]).reshape(m2.shape[0], m2.shape[1])
A:sympy.parsing.autolev.test-examples.ruletest10.frame_n->sympy.physics.mechanics.ReferenceFrame('n')
A:sympy.parsing.autolev.test-examples.ruletest10.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.ruletest10.(c1, c2, c3)->sympy.symbols('c1 c2 c3', real=True)
A:sympy.parsing.autolev.test-examples.ruletest10.point_o->sympy.physics.mechanics.Point('o')
A:sympy.parsing.autolev.test-examples.ruletest10.point_p->sympy.physics.mechanics.Point('p')
A:sympy.parsing.autolev.test-examples.ruletest10.v->v.subs({x: 2 * z, y: z}).subs({x: 2 * z, y: z})
A:sympy.parsing.autolev.test-examples.ruletest10.particle_p1->sympy.physics.mechanics.Particle('p1', _me.Point('p1_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest10.particle_p2->sympy.physics.mechanics.Particle('p2', _me.Point('p2_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest10.body_b1_cm->sympy.physics.mechanics.Point('b1_cm')
A:sympy.parsing.autolev.test-examples.ruletest10.body_b1_f->sympy.physics.mechanics.ReferenceFrame('b1_f')
A:sympy.parsing.autolev.test-examples.ruletest10.body_b1->sympy.physics.mechanics.RigidBody('b1', body_b1_cm, body_b1_f, _sm.symbols('m'), (_me.outer(body_b1_f.x, body_b1_f.x), body_b1_cm))
A:sympy.parsing.autolev.test-examples.ruletest10.body_b2_cm->sympy.physics.mechanics.Point('b2_cm')
A:sympy.parsing.autolev.test-examples.ruletest10.body_b2_f->sympy.physics.mechanics.ReferenceFrame('b2_f')
A:sympy.parsing.autolev.test-examples.ruletest10.body_b2->sympy.physics.mechanics.RigidBody('b2', body_b2_cm, body_b2_f, _sm.symbols('m'), (_me.outer(body_b2_f.x, body_b2_f.x), body_b2_cm))
A:sympy.parsing.autolev.test-examples.ruletest10.g->sympy.symbols('g', real=True)
A:sympy.parsing.autolev.test-examples.ruletest10.z->sympy.physics.mechanics.dynamicsymbols('z')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest11.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest11.(x, y)->sympy.physics.mechanics.dynamicsymbols('x y')
A:sympy.parsing.autolev.test-examples.ruletest11.(a11, a12, a21, a22, b1, b2)->sympy.symbols('a11 a12 a21 a22 b1 b2', real=True)
A:sympy.parsing.autolev.test-examples.ruletest11.eqn->eqn.row_insert(eqn.shape[0], _sm.Matrix([[0]])).row_insert(eqn.shape[0], _sm.Matrix([[0]]))


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/ruletest9.py----------------------------------------
A:sympy.parsing.autolev.test-examples.ruletest9.frame_n->sympy.physics.mechanics.ReferenceFrame('n')
A:sympy.parsing.autolev.test-examples.ruletest9.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.ruletest9.d->sympy.physics.mechanics.inertia(frame_a, 1, 1, 1)
A:sympy.parsing.autolev.test-examples.ruletest9.point_po1->sympy.physics.mechanics.Point('po1')
A:sympy.parsing.autolev.test-examples.ruletest9.point_po2->sympy.physics.mechanics.Point('po2')
A:sympy.parsing.autolev.test-examples.ruletest9.particle_p1->sympy.physics.mechanics.Particle('p1', _me.Point('p1_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest9.particle_p2->sympy.physics.mechanics.Particle('p2', _me.Point('p2_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.ruletest9.(c1, c2, c3)->sympy.physics.mechanics.dynamicsymbols('c1 c2 c3')
A:sympy.parsing.autolev.test-examples.ruletest9.(c1_d, c2_d, c3_d)->sympy.physics.mechanics.dynamicsymbols('c1_ c2_ c3_', 1)
A:sympy.parsing.autolev.test-examples.ruletest9.body_r_cm->sympy.physics.mechanics.Point('r_cm')
A:sympy.parsing.autolev.test-examples.ruletest9.body_r_f->sympy.physics.mechanics.ReferenceFrame('r_f')
A:sympy.parsing.autolev.test-examples.ruletest9.body_r->sympy.physics.mechanics.RigidBody('r', body_r_cm, body_r_f, _sm.symbols('m'), (_me.outer(body_r_f.x, body_r_f.x), body_r_cm))
A:sympy.parsing.autolev.test-examples.ruletest9.v_a->sympy.physics.mechanics.cross(body_r_cm.acc(frame_n), particle_p1.point.vel(frame_a))
A:sympy.parsing.autolev.test-examples.ruletest9.(q1, q2, u1, u2)->sympy.physics.mechanics.dynamicsymbols('q1 q2 u1 u2')
A:sympy.parsing.autolev.test-examples.ruletest9.(q1_d, q2_d, u1_d, u2_d)->sympy.physics.mechanics.dynamicsymbols('q1_ q2_ u1_ u2_', 1)
A:sympy.parsing.autolev.test-examples.ruletest9.(x, y)->sympy.physics.mechanics.dynamicsymbols('x y')
A:sympy.parsing.autolev.test-examples.ruletest9.(x_d, y_d)->sympy.physics.mechanics.dynamicsymbols('x_ y_', 1)
A:sympy.parsing.autolev.test-examples.ruletest9.(x_dd, y_dd)->sympy.physics.mechanics.dynamicsymbols('x_ y_', 2)
A:sympy.parsing.autolev.test-examples.ruletest9.yy->sympy.physics.mechanics.dynamicsymbols('yy')
A:sympy.parsing.autolev.test-examples.ruletest9.m->sympy.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape(3, 3)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/pydy-example-repo/chaos_pendulum.py----------------------------------------
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.(g, lb, w, h)->sympy.symbols('g lb w h', real=True)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.(theta, phi, omega, alpha)->sympy.physics.mechanics.dynamicsymbols('theta phi omega alpha')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.(theta_d, phi_d, omega_d, alpha_d)->sympy.physics.mechanics.dynamicsymbols('theta_ phi_ omega_ alpha_', 1)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.(theta_dd, phi_dd)->sympy.physics.mechanics.dynamicsymbols('theta_ phi_', 2)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.frame_n->sympy.physics.mechanics.ReferenceFrame('n')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.body_a_cm->sympy.physics.mechanics.Point('a_cm')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.body_a_f->sympy.physics.mechanics.ReferenceFrame('a_f')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.body_a->sympy.physics.mechanics.RigidBody('a', body_a_cm, body_a_f, _sm.symbols('m'), (_me.outer(body_a_f.x, body_a_f.x), body_a_cm))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.body_b_cm->sympy.physics.mechanics.Point('b_cm')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.body_b_f->sympy.physics.mechanics.ReferenceFrame('b_f')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.body_b->sympy.physics.mechanics.RigidBody('b', body_b_cm, body_b_f, _sm.symbols('m'), (_me.outer(body_b_f.x, body_b_f.x), body_b_cm))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.point_o->sympy.physics.mechanics.Point('o')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.ma->sympy.symbols('ma')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.mb->sympy.symbols('mb')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.kane->sympy.physics.mechanics.KanesMethod(frame_n, q_ind=[theta, phi], u_ind=[omega, alpha], kd_eqs=kd_eqs)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.(fr, frstar)->sympy.physics.mechanics.KanesMethod(frame_n, q_ind=[theta, phi], u_ind=[omega, alpha], kd_eqs=kd_eqs).kanes_equations([body_a, body_b], forceList)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.sys->System(kane, constants={g: 9.81, lb: 0.2, w: 0.2, h: 0.1, ma: 0.01, mb: 0.1}, specifieds={}, initial_conditions={theta: _np.deg2rad(90), phi: _np.deg2rad(0.5), omega: 0, alpha: 0}, times=_np.linspace(0.0, 10, 10 / 0.02))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.chaos_pendulum.y->System(kane, constants={g: 9.81, lb: 0.2, w: 0.2, h: 0.1, ma: 0.01, mb: 0.1}, specifieds={}, initial_conditions={theta: _np.deg2rad(90), phi: _np.deg2rad(0.5), omega: 0, alpha: 0}, times=_np.linspace(0.0, 10, 10 / 0.02)).integrate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/pydy-example-repo/double_pendulum.py----------------------------------------
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.(q1, q2, u1, u2)->sympy.physics.mechanics.dynamicsymbols('q1 q2 u1 u2')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.(q1_d, q2_d, u1_d, u2_d)->sympy.physics.mechanics.dynamicsymbols('q1_ q2_ u1_ u2_', 1)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.(l, m, g)->sympy.symbols('l m g', real=True)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.frame_n->sympy.physics.mechanics.ReferenceFrame('n')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.frame_b->sympy.physics.mechanics.ReferenceFrame('b')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.point_o->sympy.physics.mechanics.Point('o')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.particle_p->sympy.physics.mechanics.Particle('p', _me.Point('p_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.particle_r->sympy.physics.mechanics.Particle('r', _me.Point('r_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.kane->sympy.physics.mechanics.KanesMethod(frame_n, q_ind=[q1, q2], u_ind=[u1, u2], kd_eqs=kd_eqs)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.(fr, frstar)->sympy.physics.mechanics.KanesMethod(frame_n, q_ind=[q1, q2], u_ind=[u1, u2], kd_eqs=kd_eqs).kanes_equations([particle_p, particle_r], forceList)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.sys->System(kane, constants={l: 1, m: 1, g: 9.81}, specifieds={}, initial_conditions={q1: 0.1, q2: 0.2, u1: 0, u2: 0}, times=_np.linspace(0.0, 10, 10 / 0.01))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.double_pendulum.y->System(kane, constants={l: 1, m: 1, g: 9.81}, specifieds={}, initial_conditions={q1: 0.1, q2: 0.2, u1: 0, u2: 0}, times=_np.linspace(0.0, 10, 10 / 0.01)).integrate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/pydy-example-repo/non_min_pendulum.py----------------------------------------
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.(q1, q2)->sympy.physics.mechanics.dynamicsymbols('q1 q2')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.(q1_d, q2_d)->sympy.physics.mechanics.dynamicsymbols('q1_ q2_', 1)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.(q1_dd, q2_dd)->sympy.physics.mechanics.dynamicsymbols('q1_ q2_', 2)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.(l, m, g)->sympy.symbols('l m g', real=True)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.frame_n->sympy.physics.mechanics.ReferenceFrame('n')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.point_pn->sympy.physics.mechanics.Point('pn')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.theta1->sympy.atan(q2 / q1)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.frame_a->sympy.physics.mechanics.ReferenceFrame('a')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.particle_p->sympy.physics.mechanics.Particle('p', _me.Point('p_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.f_v->sympy.physics.mechanics.dot(particle_p.point.vel(frame_n).express(frame_a), frame_a.x)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.dependent->sympy.Matrix([[0]])
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.u_q1_d->sympy.physics.mechanics.dynamicsymbols('u_q1_d')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.u_q2_d->sympy.physics.mechanics.dynamicsymbols('u_q2_d')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.kane->sympy.physics.mechanics.KanesMethod(frame_n, q_ind=[q1, q2], u_ind=[u_q2_d], u_dependent=[u_q1_d], kd_eqs=kd_eqs, velocity_constraints=velocity_constraints)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.(fr, frstar)->sympy.physics.mechanics.KanesMethod(frame_n, q_ind=[q1, q2], u_ind=[u_q2_d], u_dependent=[u_q1_d], kd_eqs=kd_eqs, velocity_constraints=velocity_constraints).kanes_equations([particle_p], forceList)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.config->sympy.Matrix([[0]])
A:sympy.parsing.autolev.test-examples.pydy-example-repo.non_min_pendulum.zero->zero.row_insert(zero.shape[0], _sm.Matrix([[0]])).row_insert(zero.shape[0], _sm.Matrix([[0]]))


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/test-examples/pydy-example-repo/mass_spring_damper.py----------------------------------------
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.(m, k, b, g)->sympy.symbols('m k b g', real=True)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.(position, speed)->sympy.physics.mechanics.dynamicsymbols('position speed')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.(position_d, speed_d)->sympy.physics.mechanics.dynamicsymbols('position_ speed_', 1)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.o->sympy.physics.mechanics.dynamicsymbols('o')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.frame_ceiling->sympy.physics.mechanics.ReferenceFrame('ceiling')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.point_origin->sympy.physics.mechanics.Point('origin')
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.particle_block->sympy.physics.mechanics.Particle('block', _me.Point('block_pt'), _sm.Symbol('m'))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.force_block->(force_magnitude * frame_ceiling.x).subs({position_d: speed})
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.kane->sympy.physics.mechanics.KanesMethod(frame_ceiling, q_ind=[position], u_ind=[speed], kd_eqs=kd_eqs)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.(fr, frstar)->sympy.physics.mechanics.KanesMethod(frame_ceiling, q_ind=[position], u_ind=[speed], kd_eqs=kd_eqs).kanes_equations([particle_block], forceList)
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.sys->System(kane, constants={m: 1.0, k: 1.0, b: 0.2, g: 9.8}, specifieds={_me.dynamicsymbols('t'): lambda x, t: t, o: 2}, initial_conditions={position: 0.1, speed: -1 * 1.0}, times=_np.linspace(0.0, 10.0, 10.0 / 0.01))
A:sympy.parsing.autolev.test-examples.pydy-example-repo.mass_spring_damper.y->System(kane, constants={m: 1.0, k: 1.0, b: 0.2, g: 9.8}, specifieds={_me.dynamicsymbols('t'): lambda x, t: t, o: 2}, initial_conditions={position: 0.1, speed: -1 * 1.0}, times=_np.linspace(0.0, 10.0, 10.0 / 0.01)).integrate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/_antlr/autolevlistener.py----------------------------------------
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener(ParseTreeListener)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterAddSub(self,ctx:AutolevParser.AddSubContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterCodeCommands(self,ctx:AutolevParser.CodeCommandsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterCodegen(self,ctx:AutolevParser.CodegenContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterColon(self,ctx:AutolevParser.ColonContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterCommands(self,ctx:AutolevParser.CommandsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterDiff(self,ctx:AutolevParser.DiffContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterEquals(self,ctx:AutolevParser.EqualsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterExp(self,ctx:AutolevParser.ExpContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterExponent(self,ctx:AutolevParser.ExponentContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterFloat(self,ctx:AutolevParser.FloatContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterFunction(self,ctx:AutolevParser.FunctionContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterFunctionCall(self,ctx:AutolevParser.FunctionCallContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterId(self,ctx:AutolevParser.IdContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterIdEqualsExpr(self,ctx:AutolevParser.IdEqualsExprContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterId_diff(self,ctx:AutolevParser.Id_diffContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterIndex(self,ctx:AutolevParser.IndexContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterIndexAssign(self,ctx:AutolevParser.IndexAssignContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterIndexing(self,ctx:AutolevParser.IndexingContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterInertiaDecl(self,ctx:AutolevParser.InertiaDeclContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterInputs(self,ctx:AutolevParser.InputsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterInputs2(self,ctx:AutolevParser.Inputs2Context)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterInt(self,ctx:AutolevParser.IntContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterMassDecl(self,ctx:AutolevParser.MassDeclContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterMassDecl2(self,ctx:AutolevParser.MassDecl2Context)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterMatrices(self,ctx:AutolevParser.MatricesContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterMatrix(self,ctx:AutolevParser.MatrixContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterMatrixInOutput(self,ctx:AutolevParser.MatrixInOutputContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterMulDiv(self,ctx:AutolevParser.MulDivContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterNegativeOne(self,ctx:AutolevParser.NegativeOneContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterOutputs(self,ctx:AutolevParser.OutputsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterOutputs2(self,ctx:AutolevParser.Outputs2Context)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterParens(self,ctx:AutolevParser.ParensContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterProg(self,ctx:AutolevParser.ProgContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterRanges(self,ctx:AutolevParser.RangesContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterRangess(self,ctx:AutolevParser.RangessContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterRegularAssign(self,ctx:AutolevParser.RegularAssignContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterSettings(self,ctx:AutolevParser.SettingsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterStat(self,ctx:AutolevParser.StatContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterUnits(self,ctx:AutolevParser.UnitsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterVarDecl(self,ctx:AutolevParser.VarDeclContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterVarDecl2(self,ctx:AutolevParser.VarDecl2Context)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterVarType(self,ctx:AutolevParser.VarTypeContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterVec(self,ctx:AutolevParser.VecContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterVecAssign(self,ctx:AutolevParser.VecAssignContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.enterVectorOrDyadic(self,ctx:AutolevParser.VectorOrDyadicContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitAddSub(self,ctx:AutolevParser.AddSubContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitCodeCommands(self,ctx:AutolevParser.CodeCommandsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitCodegen(self,ctx:AutolevParser.CodegenContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitColon(self,ctx:AutolevParser.ColonContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitCommands(self,ctx:AutolevParser.CommandsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitDiff(self,ctx:AutolevParser.DiffContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitEquals(self,ctx:AutolevParser.EqualsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitExp(self,ctx:AutolevParser.ExpContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitExponent(self,ctx:AutolevParser.ExponentContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitFloat(self,ctx:AutolevParser.FloatContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitFunction(self,ctx:AutolevParser.FunctionContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitFunctionCall(self,ctx:AutolevParser.FunctionCallContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitId(self,ctx:AutolevParser.IdContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitIdEqualsExpr(self,ctx:AutolevParser.IdEqualsExprContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitId_diff(self,ctx:AutolevParser.Id_diffContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitIndex(self,ctx:AutolevParser.IndexContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitIndexAssign(self,ctx:AutolevParser.IndexAssignContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitIndexing(self,ctx:AutolevParser.IndexingContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitInertiaDecl(self,ctx:AutolevParser.InertiaDeclContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitInputs(self,ctx:AutolevParser.InputsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitInputs2(self,ctx:AutolevParser.Inputs2Context)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitInt(self,ctx:AutolevParser.IntContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitMassDecl(self,ctx:AutolevParser.MassDeclContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitMassDecl2(self,ctx:AutolevParser.MassDecl2Context)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitMatrices(self,ctx:AutolevParser.MatricesContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitMatrix(self,ctx:AutolevParser.MatrixContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitMatrixInOutput(self,ctx:AutolevParser.MatrixInOutputContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitMulDiv(self,ctx:AutolevParser.MulDivContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitNegativeOne(self,ctx:AutolevParser.NegativeOneContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitOutputs(self,ctx:AutolevParser.OutputsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitOutputs2(self,ctx:AutolevParser.Outputs2Context)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitParens(self,ctx:AutolevParser.ParensContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitProg(self,ctx:AutolevParser.ProgContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitRanges(self,ctx:AutolevParser.RangesContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitRangess(self,ctx:AutolevParser.RangessContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitRegularAssign(self,ctx:AutolevParser.RegularAssignContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitSettings(self,ctx:AutolevParser.SettingsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitStat(self,ctx:AutolevParser.StatContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitUnits(self,ctx:AutolevParser.UnitsContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitVarDecl(self,ctx:AutolevParser.VarDeclContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitVarDecl2(self,ctx:AutolevParser.VarDecl2Context)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitVarType(self,ctx:AutolevParser.VarTypeContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitVec(self,ctx:AutolevParser.VecContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitVecAssign(self,ctx:AutolevParser.VecAssignContext)
sympy.parsing.autolev._antlr.autolevlistener.AutolevListener.exitVectorOrDyadic(self,ctx:AutolevParser.VectorOrDyadicContext)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/_antlr/autolevlexer.py----------------------------------------
A:sympy.parsing.autolev._antlr.autolevlexer.atn->ATNDeserializer().deserialize(serializedATN())
A:sympy.parsing.autolev._antlr.autolevlexer.self._interp->LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
sympy.parsing.autolev._antlr.autolevlexer.AutolevLexer(self,input=None,output:TextIO=sys.stdout)
sympy.parsing.autolev._antlr.autolevlexer.serializedATN()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/_antlr/autolevparser.py----------------------------------------
A:sympy.parsing.autolev._antlr.autolevparser.atn->ATNDeserializer().deserialize(serializedATN())
A:sympy.parsing.autolev._antlr.autolevparser.sharedContextCache->PredictionContextCache()
A:sympy.parsing.autolev._antlr.autolevparser.self._interp->ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
A:sympy.parsing.autolev._antlr.autolevparser.localctx->AutolevParser.ColonContext(self, AutolevParser.ExprContext(self, _parentctx, _parentState))
A:sympy.parsing.autolev._antlr.autolevparser._la->self._input.LA(1)
A:sympy.parsing.autolev._antlr.autolevparser.la_->self._interp.adaptivePredict(self._input, 48, self._ctx)
A:sympy.parsing.autolev._antlr.autolevparser.token->self._input.LA(1)
A:sympy.parsing.autolev._antlr.autolevparser._alt->self._interp.adaptivePredict(self._input, 49, self._ctx)
A:sympy.parsing.autolev._antlr.autolevparser.self._ctx.stop->self._input.LT(-1)
A:sympy.parsing.autolev._antlr.autolevparser.self._predicates->dict()
A:sympy.parsing.autolev._antlr.autolevparser.pred->self._predicates.get(ruleIndex, None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser(self,input:TokenStream,output:TextIO=sys.stdout)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.AddSubContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.AddSubContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.AddSubContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.AddSubContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.AssignmentContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.AssignmentContext.copyFrom(self,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.AssignmentContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext.codegen(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext.commands(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext.inputs(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext.outputs(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodeCommandsContext.units(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodegenContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodegenContext.ID(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodegenContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodegenContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodegenContext.functionCall(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodegenContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CodegenContext.matrixInOutput(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ColonContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ColonContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ColonContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ColonContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CommandsContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CommandsContext.Encode(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CommandsContext.ID(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CommandsContext.Save(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CommandsContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CommandsContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.CommandsContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.DiffContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.DiffContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.DiffContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.DiffContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.EqualsContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.EqualsContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.EqualsContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.EqualsContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExpContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExpContext.EXP(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExpContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExpContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExponentContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExponentContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExponentContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExponentContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExprContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExprContext.copyFrom(self,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ExprContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FloatContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FloatContext.FLOAT(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FloatContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FloatContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionCallContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionCallContext.ID(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionCallContext.Inertia(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionCallContext.Mass(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionCallContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionCallContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionCallContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionCallContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.FunctionContext.functionCall(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IdContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IdContext.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IdContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IdContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IdEqualsExprContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IdEqualsExprContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IdEqualsExprContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IdEqualsExprContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Id_diffContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Id_diffContext.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Id_diffContext.diff(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Id_diffContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Id_diffContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Id_diffContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexAssignContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexAssignContext.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexAssignContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexAssignContext.equals(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexAssignContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexAssignContext.expr(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexAssignContext.index(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexingContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexingContext.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexingContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexingContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IndexingContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InertiaDeclContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InertiaDeclContext.ID(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InertiaDeclContext.Inertia(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InertiaDeclContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InertiaDeclContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InertiaDeclContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InertiaDeclContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Inputs2Context(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Inputs2Context.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Inputs2Context.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Inputs2Context.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Inputs2Context.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Inputs2Context.id_diff(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InputsContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InputsContext.Input(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InputsContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InputsContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InputsContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.InputsContext.inputs2(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IntContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IntContext.INT(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IntContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.IntContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDecl2Context(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDecl2Context.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDecl2Context.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDecl2Context.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDecl2Context.expr(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDecl2Context.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDeclContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDeclContext.Mass(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDeclContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDeclContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDeclContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MassDeclContext.massDecl2(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatricesContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatricesContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatricesContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatricesContext.matrix(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixInOutputContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixInOutputContext.FLOAT(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixInOutputContext.ID(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixInOutputContext.INT(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixInOutputContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixInOutputContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MatrixInOutputContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MulDivContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MulDivContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MulDivContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.MulDivContext.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.NegativeOneContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.NegativeOneContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.NegativeOneContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.NegativeOneContext.expr(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Outputs2Context(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Outputs2Context.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Outputs2Context.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Outputs2Context.expr(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.Outputs2Context.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.OutputsContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.OutputsContext.Output(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.OutputsContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.OutputsContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.OutputsContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.OutputsContext.outputs2(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ParensContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ParensContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ParensContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ParensContext.expr(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ProgContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ProgContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ProgContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ProgContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ProgContext.stat(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangesContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangesContext.INT(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangesContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangesContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangesContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangessContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangessContext.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangessContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangessContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RangessContext.ranges(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RegularAssignContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RegularAssignContext.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RegularAssignContext.diff(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RegularAssignContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RegularAssignContext.equals(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RegularAssignContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.RegularAssignContext.expr(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.SettingsContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.SettingsContext.EXP(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.SettingsContext.FLOAT(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.SettingsContext.ID(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.SettingsContext.INT(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.SettingsContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.SettingsContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.SettingsContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.assignment(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.codeCommands(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.functionCall(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.inertiaDecl(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.massDecl(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.settings(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.StatContext.varDecl(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.UnitsContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.UnitsContext.ID(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.UnitsContext.UnitSystem(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.UnitsContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.UnitsContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.UnitsContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDecl2Context(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDecl2Context.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDecl2Context.INT(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDecl2Context.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDecl2Context.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDecl2Context.expr(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDecl2Context.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDeclContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDeclContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDeclContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDeclContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDeclContext.varDecl2(self,i:int=None)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarDeclContext.varType(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Bodies(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Constants(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Frames(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Imaginary(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.MotionVariables(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Newtonian(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Particles(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Points(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Specifieds(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.Variables(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VarTypeContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecAssignContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecAssignContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecAssignContext.equals(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecAssignContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecAssignContext.expr(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecAssignContext.vec(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecContext(self,parser,parent:ParserRuleContext=None,invokingState:int=-1)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecContext.ID(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VecContext.getRuleIndex(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VectorOrDyadicContext(self,parser,ctx:ParserRuleContext)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VectorOrDyadicContext.enterRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VectorOrDyadicContext.exitRule(self,listener:ParseTreeListener)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.VectorOrDyadicContext.vec(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.assignment(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.codeCommands(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.codegen(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.commands(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.diff(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.equals(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.expr(self,_p:int=0)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.expr_sempred(self,localctx:ExprContext,predIndex:int)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.functionCall(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.id_diff(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.index(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.inertiaDecl(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.inputs(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.inputs2(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.massDecl(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.massDecl2(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.matrix(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.matrixInOutput(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.outputs(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.outputs2(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.prog(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.ranges(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.sempred(self,localctx:RuleContext,ruleIndex:int,predIndex:int)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.settings(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.stat(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.units(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.varDecl(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.varDecl2(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.varType(self)
sympy.parsing.autolev._antlr.autolevparser.AutolevParser.vec(self)
sympy.parsing.autolev._antlr.autolevparser.serializedATN()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/autolev/_antlr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/c/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/parsing/c/c_parser.py----------------------------------------
A:sympy.parsing.c.c_parser.cin->import_module('clang.cindex', import_kwargs={'fromlist': ['cindex']})
A:sympy.parsing.c.c_parser.self.index->import_module('clang.cindex', import_kwargs={'fromlist': ['cindex']}).Index.create()
A:sympy.parsing.c.c_parser.filename->os.path.abspath(filenames)
A:sympy.parsing.c.c_parser.self.tu->self.index.parse(file.name, args=flags, options=cin.TranslationUnit.PARSE_DETAILED_PROCESSING_RECORD)
A:sympy.parsing.c.c_parser.file->tempfile.NamedTemporaryFile(mode='w+', suffix='.cpp')
A:sympy.parsing.c.c_parser.handler->getattr(self, 'transform_%s' % node.kind.name.lower())
A:sympy.parsing.c.c_parser.result->handler(node)
A:sympy.parsing.c.c_parser.children->node.get_children()
A:sympy.parsing.c.c_parser.child->self.transform(next(node.get_children()))
A:sympy.parsing.c.c_parser.val->sympify(bool(lit))
A:sympy.parsing.c.c_parser.value->sympify(bool(val))
A:sympy.parsing.c.c_parser.decl->self.transform(child)
A:sympy.parsing.c.c_parser.function->FunctionDefinition(return_type=ret_type, name=node.spelling, parameters=param, body=body)
A:sympy.parsing.c.c_parser.lit->self.transform(child)
A:sympy.parsing.c.c_parser.param->Variable(node.spelling).as_Declaration(type=type)
A:sympy.parsing.c.c_parser.expr->self.transform(next(children))
A:sympy.parsing.c.c_parser.first_child->self.transform(child)
A:sympy.parsing.c.c_parser.arg->self.transform(child)
A:sympy.parsing.c.c_parser.statement->self.transform(next(children))
A:sympy.parsing.c.c_parser.tokens->list(node.get_tokens())
A:sympy.parsing.c.c_parser.rhs->combined_variables_stack.pop()
A:sympy.parsing.c.c_parser.lhs->combined_variables_stack.pop()
A:sympy.parsing.c.c_parser.operator->operators_stack.pop()
A:sympy.parsing.c.c_parser.lhs_value->self.get_expr_for_operand(lhs)
A:sympy.parsing.c.c_parser.rhs_value->self.get_expr_for_operand(rhs)
A:sympy.parsing.c.c_parser.condition->self.transform(next(children))
A:sympy.parsing.c.c_parser.statements->self.transform(next(children))
A:sympy.parsing.c.c_parser.statement_block->CodeBlock(statements)
A:sympy.parsing.c.c_parser.converter->CCodeConverter()
A:sympy.parsing.c.c_parser.src->CCodeConverter().parse_str(source, flags=[])
sympy.parsing.c.c_parser.parse_c(source)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/util.py----------------------------------------
A:sympy.geometry.util.e->Point(e)
A:sympy.geometry.util.p->list(p)
A:sympy.geometry.util.is_similar1->getattr(e1, 'is_similar', None)
A:sympy.geometry.util.is_similar2->getattr(e2, 'is_similar', None)
A:sympy.geometry.util.c->Point(0, 0)
A:sympy.geometry.util.den->len(args)
A:sympy.geometry.util.best_dist->hypot(p[1].x - p[0].x, p[1].y - p[0].y)
A:sympy.geometry.util.box->deque([0, 1])
A:sympy.geometry.util.d->hypot(h.x - q.x, h.y - q.y)
A:sympy.geometry.util.s->Segment(convexHull[0], convexHull[1])
A:sympy.geometry.util.convexHull->tuple(L + U[1:-1])
A:sympy.geometry.util.(U, L)->convex_hull(*Points, **{'polygon': False})
A:sympy.geometry.util.(h, q)->_ordered_points(pair)
A:sympy.geometry.util.dep->set(y)
A:sympy.geometry.util.dydx->dydx.diff(x).diff(x)
A:sympy.geometry.util.eq->eq.subs(f).subs(f)
A:sympy.geometry.util.deq->eq.subs(f).subs(f).diff(x)
A:sympy.geometry.util.b->eq.subs(f).subs(f).diff(x).xreplace({dydx: S.Zero})
A:sympy.geometry.util.a->(deq - b).xreplace({dydx: S.One})
A:sympy.geometry.util.yp->factor_terms(expand_mul(cancel((-b / a).subs(derivs)), deep=False))
A:sympy.geometry.util.entities->list(entities)
A:sympy.geometry.util.entities[i]->Point(e)
A:sympy.geometry.util.res->entities[0].intersection(entities[1])
sympy.are_similar(e1,e2)
sympy.centroid(*args)
sympy.closest_points(*args)
sympy.convex_hull(*args,polygon=True)
sympy.farthest_points(*args)
sympy.geometry.util._ordered_points(p)
sympy.geometry.util.are_coplanar(*e)
sympy.geometry.util.are_similar(e1,e2)
sympy.geometry.util.centroid(*args)
sympy.geometry.util.closest_points(*args)
sympy.geometry.util.convex_hull(*args,polygon=True)
sympy.geometry.util.farthest_points(*args)
sympy.geometry.util.find(x,equation)
sympy.geometry.util.idiff(eq,y,x,n=1)
sympy.geometry.util.intersection(*entities,pairwise=False,**kwargs)
sympy.idiff(eq,y,x,n=1)
sympy.intersection(*entities,pairwise=False,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/entity.py----------------------------------------
A:sympy.geometry.entity.T->Dummy('entity_dummy', real=True)
A:sympy.geometry.entity.i1->ordering_of_classes.index(cls.__name__)
A:sympy.geometry.entity.i2->ordering_of_classes.index(cls.__name__)
A:sympy.geometry.entity.old->Point(old)
A:sympy.geometry.entity.new->Point(new)
A:sympy.geometry.entity.(xmin, ymin, xmax, ymax)->map(N, bounds)
A:sympy.geometry.entity.widest_part->max([xmax - xmin, ymax - ymin])
A:sympy.geometry.entity.width->min([max([100.0, dx]), 300])
A:sympy.geometry.entity.height->min([max([100.0, dy]), 300])
A:sympy.geometry.entity.svg->self._svg(scale_factor)
A:sympy.geometry.entity.view_box->'{} {} {} {}'.format(xmin, ymin, dx, dy)
A:sympy.geometry.entity.transform->'matrix(1,0,0,-1,0,{})'.format(ymax + ymin)
A:sympy.geometry.entity.svg_top->svg_top.format(view_box, width, height).format(view_box, width, height)
A:sympy.geometry.entity.o->Point(0, 0)
A:sympy.geometry.entity.a->atan(l.slope)
A:sympy.geometry.entity.xf->xf.translate(y=-d).rotate(-a, o).scale(y=-1).rotate(a, o).translate(y=d).translate(y=-d).rotate(-a, o).scale(y=-1).rotate(a, o).translate(y=d)
A:sympy.geometry.entity.pt->Point(pt, dim=2)
A:sympy.geometry.entity.other->Point(other, dim=self.ambient_dimension)
A:sympy.geometry.entity.sol->solve(self.arbitrary_point(T) - other, T, dict=True)
A:sympy.geometry.entity.inter->self.intersection(o)
A:sympy.geometry.entity.points->FiniteSet(*[p for p in inter if isinstance(p, Point)])
A:sympy.geometry.entity.rv->eye(3)
A:sympy.geometry.entity.tr1->translate(*(-pt).args)
A:sympy.geometry.entity.tr2->translate(*pt.args)
A:sympy.geometry.entity.s->sin(th)
sympy.geometry.entity.GeometryEntity(cls,*args,**kwargs)
sympy.geometry.entity.GeometryEntity.__cmp__(self,other)
sympy.geometry.entity.GeometryEntity.__contains__(self,other)
sympy.geometry.entity.GeometryEntity.__getnewargs__(self)
sympy.geometry.entity.GeometryEntity.__ne__(self,o)
sympy.geometry.entity.GeometryEntity.__radd__(self,a)
sympy.geometry.entity.GeometryEntity.__repr__(self)
sympy.geometry.entity.GeometryEntity.__rmul__(self,a)
sympy.geometry.entity.GeometryEntity.__rsub__(self,a)
sympy.geometry.entity.GeometryEntity.__rtruediv__(self,a)
sympy.geometry.entity.GeometryEntity.__str__(self)
sympy.geometry.entity.GeometryEntity._eval_subs(self,old,new)
sympy.geometry.entity.GeometryEntity._repr_svg_(self)
sympy.geometry.entity.GeometryEntity._svg(self,scale_factor=1.0,fill_color='#66cc99')
sympy.geometry.entity.GeometryEntity._sympy_(self)
sympy.geometry.entity.GeometryEntity.ambient_dimension(self)
sympy.geometry.entity.GeometryEntity.bounds(self)
sympy.geometry.entity.GeometryEntity.encloses(self,o)
sympy.geometry.entity.GeometryEntity.equals(self,o)
sympy.geometry.entity.GeometryEntity.intersection(self,o)
sympy.geometry.entity.GeometryEntity.is_similar(self,other)
sympy.geometry.entity.GeometryEntity.parameter_value(self,other,t)
sympy.geometry.entity.GeometryEntity.reflect(self,line)
sympy.geometry.entity.GeometryEntity.rotate(self,angle,pt=None)
sympy.geometry.entity.GeometryEntity.scale(self,x=1,y=1,pt=None)
sympy.geometry.entity.GeometryEntity.translate(self,x=0,y=0)
sympy.geometry.entity.GeometrySet(GeometryEntity,Set)
sympy.geometry.entity.GeometrySet._contains(self,other)
sympy.geometry.entity.intersection_sets(self,o)
sympy.geometry.entity.rotate(th)
sympy.geometry.entity.scale(x,y,pt=None)
sympy.geometry.entity.translate(x,y)
sympy.geometry.entity.union_sets(self,o)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/line.py----------------------------------------
A:sympy.geometry.line.(p1, p2)->point.Point._normalize_dimension(Point(p1), Point(p2))
A:sympy.geometry.line.result->self.contains(other)
A:sympy.geometry.line.t->_symbol(parameter, real=True)
A:sympy.geometry.line.common_points->Intersection(*lines)
A:sympy.geometry.line.st->ray1._span_test(ray2.p1)
A:sympy.geometry.line.seg2->Segment(seg2.p2, seg2.p1)
A:sympy.geometry.line.other->Point(other, dim=self.ambient_dimension)
A:sympy.geometry.line.pts->point.Point._normalize_dimension(self.p1, self.p2, other.p1, other.p2)
A:sympy.geometry.line.rank->point.Point.affine_rank(*pts)
A:sympy.geometry.line.l1->Line(*pts[:2])
A:sympy.geometry.line.l2->Line(p1, p2)
A:sympy.geometry.line.m->Matrix([l1.direction, -l2.direction]).transpose()
A:sympy.geometry.line.v->random.Random(seed).gauss(0, 1)
A:sympy.geometry.line.(m_rref, pivots)->Matrix([l1.direction, -l2.direction]).transpose().col_insert(2, v).rref(simplify=True)
A:sympy.geometry.line.l->self.perpendicular_line(self.midpoint)
A:sympy.geometry.line.p->Point(p, dim=self.ambient_dimension)
A:sympy.geometry.line.(p2,)->Intersection(Line(self.p1, self.p2), l)
A:sympy.geometry.line.projected->projected.func(p2, p1).func(p2, p1)
A:sympy.geometry.line.rng->random.Random(seed)
A:sympy.geometry.line.pt->Point3D(p1.x + direction_ratio[0], p1.y + direction_ratio[1], p1.z + direction_ratio[2])
A:sympy.geometry.line.(_, p1)->point.Point._normalize_dimension(l1.p1, l2.p1, on_morph='ignore')
A:sympy.geometry.line.(_, p2)->point.Point._normalize_dimension(l1.p2, l2.p2, on_morph='ignore')
A:sympy.geometry.line.point->intersection(l1, l2)
A:sympy.geometry.line.bis1->Line(pt, pt + d1 + d2)
A:sympy.geometry.line.bis2->Line(pt, pt + d1 - d2)
A:sympy.geometry.line.missing->uniquely_named_symbol('?', args)
A:sympy.geometry.line.x->Piecewise((-1, left), (Piecewise((0, Eq(m % 1, 0)), (1, True)), True))
A:sympy.geometry.line.y->Piecewise((-tan(c), left), (Piecewise((1, Eq(m, 1)), (-1, Eq(m, 3)), (tan(c), True)), True))
A:sympy.geometry.line.(a, b, c)->linear_coeffs(equation, x, y)
A:sympy.geometry.line.dim->len(p1)
A:sympy.geometry.line.p1->Point(p1, dim=3)
A:sympy.geometry.line.p2->Point(p2, dim=3)
A:sympy.geometry.line.path->'M {} L {}'.format(coords[0], ' L '.join(coords[1:]))
A:sympy.geometry.line.proj->Line(self.p1, self.p2).projection(other)
A:sympy.geometry.line.vert->(1 / self.slope).equals(0)
A:sympy.geometry.line.(p1, pt)->point.Point._normalize_dimension(*p1.args, dim=2)
A:sympy.geometry.line.slope->sympify(slope)
A:sympy.geometry.line.angle->sympify(angle)
A:sympy.geometry.line.c->_pi_coeff(angle)
A:sympy.geometry.line.left->And(1 < m, m < 3)
A:sympy.geometry.line.a1->atan2(*list(reversed(r1.direction.args)))
A:sympy.geometry.line.a2->atan2(*list(reversed(r2.direction.args)))
A:sympy.geometry.line.(d1, d2, d3)->Point(p1, dim=3).direction_ratio(p2)
sympy.Line(cls,*args,**kwargs)
sympy.Line2D(cls,p1,pt=None,slope=None,**kwargs)
sympy.Line3D(cls,p1,pt=None,direction_ratio=(),**kwargs)
sympy.Ray(cls,p1,p2=None,**kwargs)
sympy.Ray2D(cls,p1,pt=None,angle=None,**kwargs)
sympy.Ray3D(cls,p1,pt=None,direction_ratio=(),**kwargs)
sympy.Segment(cls,p1,p2,**kwargs)
sympy.Segment2D(cls,p1,p2,**kwargs)
sympy.Segment3D(cls,p1,p2,**kwargs)
sympy.geometry.line.Line(cls,*args,**kwargs)
sympy.geometry.line.Line.contains(self,other)
sympy.geometry.line.Line.distance(self,other)
sympy.geometry.line.Line.equals(self,other)
sympy.geometry.line.Line.plot_interval(self,parameter='t')
sympy.geometry.line.Line2D(cls,p1,pt=None,slope=None,**kwargs)
sympy.geometry.line.Line2D._svg(self,scale_factor=1.0,fill_color='#66cc99')
sympy.geometry.line.Line2D.coefficients(self)
sympy.geometry.line.Line2D.equation(self,x='x',y='y')
sympy.geometry.line.Line3D(cls,p1,pt=None,direction_ratio=(),**kwargs)
sympy.geometry.line.Line3D.equation(self,x='x',y='y',z='z')
sympy.geometry.line.LinearEntity(cls,p1,p2=None,**kwargs)
sympy.geometry.line.LinearEntity.__contains__(self,other)
sympy.geometry.line.LinearEntity._span_test(self,other)
sympy.geometry.line.LinearEntity.ambient_dimension(self)
sympy.geometry.line.LinearEntity.angle_between(l1,l2)
sympy.geometry.line.LinearEntity.arbitrary_point(self,parameter='t')
sympy.geometry.line.LinearEntity.are_concurrent(*lines)
sympy.geometry.line.LinearEntity.bisectors(self,other)
sympy.geometry.line.LinearEntity.contains(self,other)
sympy.geometry.line.LinearEntity.direction(self)
sympy.geometry.line.LinearEntity.intersection(self,other)
sympy.geometry.line.LinearEntity.is_parallel(l1,l2)
sympy.geometry.line.LinearEntity.is_perpendicular(l1,l2)
sympy.geometry.line.LinearEntity.is_similar(self,other)
sympy.geometry.line.LinearEntity.length(self)
sympy.geometry.line.LinearEntity.p1(self)
sympy.geometry.line.LinearEntity.p2(self)
sympy.geometry.line.LinearEntity.parallel_line(self,p)
sympy.geometry.line.LinearEntity.perpendicular_line(self,p)
sympy.geometry.line.LinearEntity.perpendicular_segment(self,p)
sympy.geometry.line.LinearEntity.points(self)
sympy.geometry.line.LinearEntity.projection(self,other)
sympy.geometry.line.LinearEntity.random_point(self,seed=None)
sympy.geometry.line.LinearEntity.smallest_angle_between(l1,l2)
sympy.geometry.line.LinearEntity2D(LinearEntity)
sympy.geometry.line.LinearEntity2D.bounds(self)
sympy.geometry.line.LinearEntity2D.perpendicular_line(self,p)
sympy.geometry.line.LinearEntity2D.slope(self)
sympy.geometry.line.LinearEntity3D(cls,p1,p2,**kwargs)
sympy.geometry.line.LinearEntity3D.direction_cosine(self)
sympy.geometry.line.LinearEntity3D.direction_ratio(self)
sympy.geometry.line.Ray(cls,p1,p2=None,**kwargs)
sympy.geometry.line.Ray._svg(self,scale_factor=1.0,fill_color='#66cc99')
sympy.geometry.line.Ray.contains(self,other)
sympy.geometry.line.Ray.distance(self,other)
sympy.geometry.line.Ray.equals(self,other)
sympy.geometry.line.Ray.plot_interval(self,parameter='t')
sympy.geometry.line.Ray.source(self)
sympy.geometry.line.Ray2D(cls,p1,pt=None,angle=None,**kwargs)
sympy.geometry.line.Ray2D.closing_angle(r1,r2)
sympy.geometry.line.Ray2D.xdirection(self)
sympy.geometry.line.Ray2D.ydirection(self)
sympy.geometry.line.Ray3D(cls,p1,pt=None,direction_ratio=(),**kwargs)
sympy.geometry.line.Ray3D.xdirection(self)
sympy.geometry.line.Ray3D.ydirection(self)
sympy.geometry.line.Ray3D.zdirection(self)
sympy.geometry.line.Segment(cls,p1,p2,**kwargs)
sympy.geometry.line.Segment.contains(self,other)
sympy.geometry.line.Segment.distance(self,other)
sympy.geometry.line.Segment.equals(self,other)
sympy.geometry.line.Segment.length(self)
sympy.geometry.line.Segment.midpoint(self)
sympy.geometry.line.Segment.perpendicular_bisector(self,p=None)
sympy.geometry.line.Segment.plot_interval(self,parameter='t')
sympy.geometry.line.Segment2D(cls,p1,p2,**kwargs)
sympy.geometry.line.Segment2D._svg(self,scale_factor=1.0,fill_color='#66cc99')
sympy.geometry.line.Segment3D(cls,p1,p2,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/parabola.py----------------------------------------
A:sympy.geometry.parabola.focus->Point(0, 0)
A:sympy.geometry.parabola.directrix->Line(directrix)
A:sympy.geometry.parabola.x->_symbol(x, real=True)
A:sympy.geometry.parabola.y->_symbol(y, real=True)
A:sympy.geometry.parabola.distance->self.directrix.distance(self.focus)
A:sympy.geometry.parabola.(x, y)->symbols('x y', real=True)
A:sympy.geometry.parabola.parabola_eq->self.equation()
A:sympy.geometry.parabola.p->sign(self.focus.x - d.x)
A:sympy.geometry.parabola.d->self.directrix.projection(self.focus)
A:sympy.geometry.parabola.vertex->Point(focus.args[0], focus.args[1] - self.p_parameter)
sympy.Parabola(cls,focus=None,directrix=None,**kwargs)
sympy.geometry.parabola.Parabola(cls,focus=None,directrix=None,**kwargs)
sympy.geometry.parabola.Parabola.ambient_dimension(self)
sympy.geometry.parabola.Parabola.axis_of_symmetry(self)
sympy.geometry.parabola.Parabola.directrix(self)
sympy.geometry.parabola.Parabola.eccentricity(self)
sympy.geometry.parabola.Parabola.equation(self,x='x',y='y')
sympy.geometry.parabola.Parabola.focal_length(self)
sympy.geometry.parabola.Parabola.focus(self)
sympy.geometry.parabola.Parabola.intersection(self,o)
sympy.geometry.parabola.Parabola.p_parameter(self)
sympy.geometry.parabola.Parabola.vertex(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/point.py----------------------------------------
A:sympy.geometry.point.evaluate->kwargs.get('evaluate', global_parameters.evaluate)
A:sympy.geometry.point.on_morph->kwargs.get('on_morph', 'ignore')
A:sympy.geometry.point.coords->coords.xreplace({f: simplify(nsimplify(f, rational=True)) for f in coords.atoms(Float)}).xreplace({f: simplify(nsimplify(f, rational=True)) for f in coords.atoms(Float)})
A:sympy.geometry.point.dim->max((i.ambient_dimension for i in points))
A:sympy.geometry.point.message->'Dimension of {} needs to be changed from {} to {}.'.format(coords, len(coords), dim)
A:sympy.geometry.point.origin->Point([0] * len(self))
A:sympy.geometry.point.(s, o)->Point._normalize_dimension(self, Point(p))
A:sympy.geometry.point.divisor->sympify(divisor)
A:sympy.geometry.point.factor->sympify(factor)
A:sympy.geometry.point.kwargs['on_morph']->kwargs.get('on_morph', 'warn')
A:sympy.geometry.point.points->list(uniq(points))
A:sympy.geometry.point.m->Transpose(matrix)
A:sympy.geometry.point.other->Point(other, dim=3)
A:sympy.geometry.point.(s, p)->Point._normalize_dimension(self, Point(p))
A:sympy.geometry.point.distance->getattr(other, 'distance', None)
A:sympy.geometry.point.p->Point(p)
A:sympy.geometry.point.dps->prec_to_dps(prec)
A:sympy.geometry.point.(p1, p2)->Point._normalize_dimension(self, other)
A:sympy.geometry.point.mat->Matrix([list(i) + [i.dot(i)] for i in points])
A:sympy.geometry.point.(rref, pivots)->Matrix([list(i) + [i.dot(i)] for i in points]).rref()
A:sympy.geometry.point.rv->Point(c * x - s * y, s * x + c * y)
A:sympy.geometry.point.(a, b)->Point._normalize_dimension(Point(a), Point(b))
A:sympy.geometry.point.args->Point(*args, **kwargs)
A:sympy.geometry.point.c->cos(angle)
A:sympy.geometry.point.s->sin(angle)
A:sympy.geometry.point.pt->Point3D(pt)
A:sympy.geometry.point.a->self.direction_ratio(point)
A:sympy.geometry.point.b->sqrt(Add(*(i ** 2 for i in a)))
sympy.Point(cls,*args,**kwargs)
sympy.Point2D(cls,*args,_nocheck=False,**kwargs)
sympy.Point3D(cls,*args,_nocheck=False,**kwargs)
sympy.geometry.point.Point(cls,*args,**kwargs)
sympy.geometry.point.Point.__abs__(self)
sympy.geometry.point.Point.__add__(self,other)
sympy.geometry.point.Point.__contains__(self,item)
sympy.geometry.point.Point.__eq__(self,other)
sympy.geometry.point.Point.__getitem__(self,key)
sympy.geometry.point.Point.__hash__(self)
sympy.geometry.point.Point.__iter__(self)
sympy.geometry.point.Point.__len__(self)
sympy.geometry.point.Point.__mul__(self,factor)
sympy.geometry.point.Point.__neg__(self)
sympy.geometry.point.Point.__rmul__(self,factor)
sympy.geometry.point.Point.__sub__(self,other)
sympy.geometry.point.Point.__truediv__(self,divisor)
sympy.geometry.point.Point._eval_evalf(self,prec=15,**options)
sympy.geometry.point.Point._normalize_dimension(cls,*points,**kwargs)
sympy.geometry.point.Point.affine_rank(*args)
sympy.geometry.point.Point.ambient_dimension(self)
sympy.geometry.point.Point.are_coplanar(cls,*points)
sympy.geometry.point.Point.canberra_distance(self,p)
sympy.geometry.point.Point.distance(self,other)
sympy.geometry.point.Point.dot(self,p)
sympy.geometry.point.Point.equals(self,other)
sympy.geometry.point.Point.intersection(self,other)
sympy.geometry.point.Point.is_collinear(self,*args)
sympy.geometry.point.Point.is_concyclic(self,*args)
sympy.geometry.point.Point.is_nonzero(self)
sympy.geometry.point.Point.is_scalar_multiple(self,p)
sympy.geometry.point.Point.is_zero(self)
sympy.geometry.point.Point.length(self)
sympy.geometry.point.Point.midpoint(self,p)
sympy.geometry.point.Point.origin(self)
sympy.geometry.point.Point.orthogonal_direction(self)
sympy.geometry.point.Point.project(a,b)
sympy.geometry.point.Point.taxicab_distance(self,p)
sympy.geometry.point.Point.unit(self)
sympy.geometry.point.Point2D(cls,*args,_nocheck=False,**kwargs)
sympy.geometry.point.Point2D.__contains__(self,item)
sympy.geometry.point.Point2D.bounds(self)
sympy.geometry.point.Point2D.coordinates(self)
sympy.geometry.point.Point2D.rotate(self,angle,pt=None)
sympy.geometry.point.Point2D.scale(self,x=1,y=1,pt=None)
sympy.geometry.point.Point2D.transform(self,matrix)
sympy.geometry.point.Point2D.translate(self,x=0,y=0)
sympy.geometry.point.Point2D.x(self)
sympy.geometry.point.Point2D.y(self)
sympy.geometry.point.Point3D(cls,*args,_nocheck=False,**kwargs)
sympy.geometry.point.Point3D.__contains__(self,item)
sympy.geometry.point.Point3D.are_collinear(*points)
sympy.geometry.point.Point3D.coordinates(self)
sympy.geometry.point.Point3D.direction_cosine(self,point)
sympy.geometry.point.Point3D.direction_ratio(self,point)
sympy.geometry.point.Point3D.intersection(self,other)
sympy.geometry.point.Point3D.scale(self,x=1,y=1,z=1,pt=None)
sympy.geometry.point.Point3D.transform(self,matrix)
sympy.geometry.point.Point3D.translate(self,x=0,y=0,z=0)
sympy.geometry.point.Point3D.x(self)
sympy.geometry.point.Point3D.y(self)
sympy.geometry.point.Point3D.z(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/curve.py----------------------------------------
A:sympy.geometry.curve.dps->prec_to_dps(prec)
A:sympy.geometry.curve.f->Matrix(1, 3, f)
A:sympy.geometry.curve.tnew->_symbol(parameter, self.parameter, real=True)
A:sympy.geometry.curve.free->free.difference({self.parameter}).difference({self.parameter})
A:sympy.geometry.curve.integrand->sqrt(sum((diff(func, self.limits[0]) ** 2 for func in self.functions)))
A:sympy.geometry.curve.t->_symbol(parameter, self.parameter, real=True)
A:sympy.geometry.curve.pt->Point(pt, dim=2)
A:sympy.geometry.curve.rv->self.func(f[0, :2].tolist()[0], self.limits)
sympy.Curve(cls,function,limits)
sympy.geometry.curve.Curve(cls,function,limits)
sympy.geometry.curve.Curve._eval_evalf(self,prec=15,**options)
sympy.geometry.curve.Curve._eval_subs(self,old,new)
sympy.geometry.curve.Curve.ambient_dimension(self)
sympy.geometry.curve.Curve.arbitrary_point(self,parameter='t')
sympy.geometry.curve.Curve.free_symbols(self)
sympy.geometry.curve.Curve.functions(self)
sympy.geometry.curve.Curve.length(self)
sympy.geometry.curve.Curve.limits(self)
sympy.geometry.curve.Curve.parameter(self)
sympy.geometry.curve.Curve.plot_interval(self,parameter='t')
sympy.geometry.curve.Curve.rotate(self,angle=0,pt=None)
sympy.geometry.curve.Curve.scale(self,x=1,y=1,pt=None)
sympy.geometry.curve.Curve.translate(self,x=0,y=0)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/ellipse.py----------------------------------------
A:sympy.geometry.ellipse.res->self.equation(x, y).subs({x: o.x, y: o.y})
A:sympy.geometry.ellipse.hradius->sympify(hradius)
A:sympy.geometry.ellipse.vradius->sympify(vradius)
A:sympy.geometry.ellipse.center->Point(center, dim=2)
A:sympy.geometry.ellipse.eccentricity->sympify(eccentricity)
A:sympy.geometry.ellipse.c->c.scale(x, y).scale(x, y)
A:sympy.geometry.ellipse.t->Triangle(*args)
A:sympy.geometry.ellipse.p->Point(p, dim=2)
A:sympy.geometry.ellipse.x->_symbol(x, real=True)
A:sympy.geometry.ellipse.y->_symbol(y, real=True)
A:sympy.geometry.ellipse.fd->sqrt(self.major ** 2 - self.minor ** 2)
A:sympy.geometry.ellipse.ellipse_equation->self.equation(x, y)
A:sympy.geometry.ellipse.intersect->self.intersection(segment)
A:sympy.geometry.ellipse.hit->self.intersection(o)
A:sympy.geometry.ellipse.eq->self.equation(x, y)
A:sympy.geometry.ellipse.dydx->idiff(eq, y, x)
A:sympy.geometry.ellipse.xeq->self.equation(x, y).subs(y, yis).as_numer_denom()[0].expand()
A:sympy.geometry.ellipse.xsol->Poly(xeq, x).real_roots()
A:sympy.geometry.ellipse.rng->random.Random(seed)
A:sympy.geometry.ellipse.r->r.evalf(n=dps, **options).evalf(n=dps, **options)
A:sympy.geometry.ellipse.s->sqrt(1 - c ** 2)
A:sympy.geometry.ellipse.expr->self.equation(x, y)
A:sympy.geometry.ellipse.result->self.equation(x, y).subs(zip((x, y), p.args), simultaneous=True)
A:sympy.geometry.ellipse.pt->Point(pt, dim=2)
A:sympy.geometry.ellipse.p2->Point(simplify(p.x + run), simplify(p.y + rise))
A:sympy.geometry.ellipse.tangent_points->solve([slope - dydx, eq], [x, y])
A:sympy.geometry.ellipse.second_moment->self.second_moment_of_area()
A:sympy.geometry.ellipse.point->Point2D(point)
A:sympy.geometry.ellipse.evaluate->kwargs.get('evaluate', global_parameters.evaluate)
A:sympy.geometry.ellipse.equation->args[0].expand()
A:sympy.geometry.ellipse.(a, b, c, d, e)->linear_coeffs(equation, x ** 2, y ** 2, x, y)
A:sympy.geometry.ellipse.dps->prec_to_dps(prec)
sympy.Circle(cls,*args,**kwargs)
sympy.Ellipse(cls,center=None,hradius=None,vradius=None,eccentricity=None,**kwargs)
sympy.geometry.ellipse.Circle(cls,*args,**kwargs)
sympy.geometry.ellipse.Circle._eval_evalf(self,prec=15,**options)
sympy.geometry.ellipse.Circle.circumference(self)
sympy.geometry.ellipse.Circle.equation(self,x='x',y='y')
sympy.geometry.ellipse.Circle.intersection(self,o)
sympy.geometry.ellipse.Circle.radius(self)
sympy.geometry.ellipse.Circle.reflect(self,line)
sympy.geometry.ellipse.Circle.scale(self,x=1,y=1,pt=None)
sympy.geometry.ellipse.Circle.vradius(self)
sympy.geometry.ellipse.Ellipse(cls,center=None,hradius=None,vradius=None,eccentricity=None,**kwargs)
sympy.geometry.ellipse.Ellipse.__contains__(self,o)
sympy.geometry.ellipse.Ellipse.__eq__(self,o)
sympy.geometry.ellipse.Ellipse.__hash__(self)
sympy.geometry.ellipse.Ellipse._svg(self,scale_factor=1.0,fill_color='#66cc99')
sympy.geometry.ellipse.Ellipse.ambient_dimension(self)
sympy.geometry.ellipse.Ellipse.apoapsis(self)
sympy.geometry.ellipse.Ellipse.arbitrary_point(self,parameter='t')
sympy.geometry.ellipse.Ellipse.area(self)
sympy.geometry.ellipse.Ellipse.auxiliary_circle(self)
sympy.geometry.ellipse.Ellipse.bounds(self)
sympy.geometry.ellipse.Ellipse.center(self)
sympy.geometry.ellipse.Ellipse.circumference(self)
sympy.geometry.ellipse.Ellipse.director_circle(self)
sympy.geometry.ellipse.Ellipse.eccentricity(self)
sympy.geometry.ellipse.Ellipse.encloses_point(self,p)
sympy.geometry.ellipse.Ellipse.equation(self,x='x',y='y',_slope=None)
sympy.geometry.ellipse.Ellipse.evolute(self,x='x',y='y')
sympy.geometry.ellipse.Ellipse.foci(self)
sympy.geometry.ellipse.Ellipse.focus_distance(self)
sympy.geometry.ellipse.Ellipse.hradius(self)
sympy.geometry.ellipse.Ellipse.intersection(self,o)
sympy.geometry.ellipse.Ellipse.is_tangent(self,o)
sympy.geometry.ellipse.Ellipse.major(self)
sympy.geometry.ellipse.Ellipse.minor(self)
sympy.geometry.ellipse.Ellipse.normal_lines(self,p,prec=None)
sympy.geometry.ellipse.Ellipse.periapsis(self)
sympy.geometry.ellipse.Ellipse.plot_interval(self,parameter='t')
sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area(self)
sympy.geometry.ellipse.Ellipse.random_point(self,seed=None)
sympy.geometry.ellipse.Ellipse.reflect(self,line)
sympy.geometry.ellipse.Ellipse.rotate(self,angle=0,pt=None)
sympy.geometry.ellipse.Ellipse.scale(self,x=1,y=1,pt=None)
sympy.geometry.ellipse.Ellipse.second_moment_of_area(self,point=None)
sympy.geometry.ellipse.Ellipse.section_modulus(self,point=None)
sympy.geometry.ellipse.Ellipse.semilatus_rectum(self)
sympy.geometry.ellipse.Ellipse.tangent_lines(self,p)
sympy.geometry.ellipse.Ellipse.vradius(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/plane.py----------------------------------------
A:sympy.geometry.plane.p1->Point3D(p1, dim=3)
A:sympy.geometry.plane.p2->Point(a, dim=3)
A:sympy.geometry.plane.p3->Point3D(0, 0, 1)
A:sympy.geometry.plane.a->Matrix(l.normal_vector)
A:sympy.geometry.plane.b->Matrix(self.normal_vector)
A:sympy.geometry.plane.normal_vector->tuple(Matrix(a).cross(Matrix(b)))
A:sympy.geometry.plane.evaluate->kwargs.get('evaluate', True)
A:sympy.geometry.plane.k->self.equation(x, y, z)
A:sympy.geometry.plane.d->self.equation(x, y, z)
A:sympy.geometry.plane.e->Line3D(p1, p2).equation(x, y, z)
A:sympy.geometry.plane.o->Line3D(p1, p2)
A:sympy.geometry.plane.dps->prec_to_dps(prec)
A:sympy.geometry.plane.pt->self.arbitrary_point(u, v)
A:sympy.geometry.plane.tup->tuple([i.evalf(n=dps, **options) for i in tup])
A:sympy.geometry.plane.c->sum([i * j for (i, j) in zip(a, b)])
A:sympy.geometry.plane.u->_symbol(u or 'u', real=True)
A:sympy.geometry.plane.v->_symbol(v or 'v', real=True)
A:sympy.geometry.plane.(x2, y2, z2)->tuple(Matrix((x, y, z)).cross(Matrix((x1, y1, z1))))
A:sympy.geometry.plane.p->Matrix(l.normal_vector).subs(t, c[0])
A:sympy.geometry.plane.planes->list(planes)
A:sympy.geometry.plane.first->list(planes).pop(0)
A:sympy.geometry.plane.sol->solve(pt - other, (u, v), dict=True)
A:sympy.geometry.plane.l->Line3D(p1, p2)
A:sympy.geometry.plane.(pi,)->self.intersection(Line3D(a, b))
A:sympy.geometry.plane.(x, y, z)->map(Dummy, 'xyz')
A:sympy.geometry.plane.result->result.subs(i, 0).subs(i, 0)
A:sympy.geometry.plane.pts->list(pts)
A:sympy.geometry.plane.n->Line3D(p1, direction_ratio=self.normal_vector)
A:sympy.geometry.plane.rv->Point(pt, dim=3)
A:sympy.geometry.plane.rng->random.Random(seed)
A:sympy.geometry.plane.other->Point(other, dim=self.ambient_dimension)
sympy.Plane(cls,p1,a=None,b=None,**kwargs)
sympy.geometry.plane.Plane(cls,p1,a=None,b=None,**kwargs)
sympy.geometry.plane.Plane.__contains__(self,o)
sympy.geometry.plane.Plane._eval_evalf(self,prec=15,**options)
sympy.geometry.plane.Plane.ambient_dimension(self)
sympy.geometry.plane.Plane.angle_between(self,o)
sympy.geometry.plane.Plane.arbitrary_point(self,u=None,v=None)
sympy.geometry.plane.Plane.are_concurrent(*planes)
sympy.geometry.plane.Plane.distance(self,o)
sympy.geometry.plane.Plane.equals(self,o)
sympy.geometry.plane.Plane.equation(self,x=None,y=None,z=None)
sympy.geometry.plane.Plane.intersection(self,o)
sympy.geometry.plane.Plane.is_coplanar(self,o)
sympy.geometry.plane.Plane.is_parallel(self,l)
sympy.geometry.plane.Plane.is_perpendicular(self,l)
sympy.geometry.plane.Plane.normal_vector(self)
sympy.geometry.plane.Plane.p1(self)
sympy.geometry.plane.Plane.parallel_plane(self,pt)
sympy.geometry.plane.Plane.parameter_value(self,other,u,v=None)
sympy.geometry.plane.Plane.perpendicular_line(self,pt)
sympy.geometry.plane.Plane.perpendicular_plane(self,*pts)
sympy.geometry.plane.Plane.projection(self,pt)
sympy.geometry.plane.Plane.projection_line(self,line)
sympy.geometry.plane.Plane.random_point(self,seed=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/polygon.py----------------------------------------
A:sympy.geometry.polygon.args->list(args)
A:sympy.geometry.polygon.vertices->list(filter(lambda x: x is not None, nodup))
A:sympy.geometry.polygon.t_area->simplify(ba.x * ca.y - ca.x * ba.y)
A:sympy.geometry.polygon.cw->Polygon._isright(*pts[:3])
A:sympy.geometry.polygon.ang->Segment(v[0], Line(v[0], c).intersection(s[1])[0]).closing_angle(l2)
A:sympy.geometry.polygon.h_line->Line(point, slope=0)
A:sympy.geometry.polygon.v_line->Line(point, slope=S.Infinity)
A:sympy.geometry.polygon.h_poly->self.cut_section(h_line)
A:sympy.geometry.polygon.v_poly->self.cut_section(v_line)
A:sympy.geometry.polygon.second_moment->self.second_moment_of_area()
A:sympy.geometry.polygon.y->simplify(l.dot(Matrix([vi.y for vi in v])) / p)
A:sympy.geometry.polygon.x->simplify(l.dot(Matrix([vi.x for vi in v])) / p)
A:sympy.geometry.polygon.hit->si.intersection(sj)
A:sympy.geometry.polygon.p->sum(l)
A:sympy.geometry.polygon.poly->Polygon(*lit)
A:sympy.geometry.polygon.indices->list(range(-len(args), 1))
A:sympy.geometry.polygon.t->Symbol(parameter, real=True)
A:sympy.geometry.polygon.pt->Point(pt, dim=2)
A:sympy.geometry.polygon.other->Point(other, dim=self.ambient_dimension)
A:sympy.geometry.polygon.sol->solve(pt - other, T, dict=True)
A:sympy.geometry.polygon.intersection_result->list(uniq(intersection_result))
A:sympy.geometry.polygon.points_in_segments->list(uniq([point for point in points for segment in segments if point in segment]))
A:sympy.geometry.polygon.intersection_points->self.intersection(line)
A:sympy.geometry.polygon.points->list(self.vertices)
A:sympy.geometry.polygon.eq->line.equation(x, y)
A:sympy.geometry.polygon.a->line.equation(x, y).coeff(x)
A:sympy.geometry.polygon.b->line.equation(x, y).coeff(y)
A:sympy.geometry.polygon.edge->Line(point, prev_point)
A:sympy.geometry.polygon.new_point->Line(point, prev_point).intersection(line)
A:sympy.geometry.polygon.upper_polygon->Polygon(*upper_vertices)
A:sympy.geometry.polygon.lower_polygon->Polygon(*lower_vertices)
A:sympy.geometry.polygon.current->side.distance(o)
A:sympy.geometry.polygon.r->abs(self._radius)
A:sympy.geometry.polygon.center_dist->point.Point.distance(e1_center, e2_center)
A:sympy.geometry.polygon.e1_ymax->Point(0, -oo)
A:sympy.geometry.polygon.e2_ymin->Point(0, oo)
A:sympy.geometry.polygon.min_dist->point.Point.distance(e1_ymax, e2_ymin)
A:sympy.geometry.polygon.support_line->Line(e1_current, e1_next)
A:sympy.geometry.polygon.angle1->Line(e1_current, e1_next).angle_between(Line(e2_ymin, point1))
A:sympy.geometry.polygon.angle2->Line(e1_current, e1_next).angle_between(Line(e2_ymin, point2))
A:sympy.geometry.polygon.e1_angle->Line(e1_current, e1_next).angle_between(Line(e1_current, e1_next))
A:sympy.geometry.polygon.e1_segment->Segment(e1_current, e1_next)
A:sympy.geometry.polygon.min_dist_current->min(min1, min2)
A:sympy.geometry.polygon.e2_segment->Segment(e2_current, e2_next)
A:sympy.geometry.polygon.min1->Segment(e1_current, e1_next).distance(e2_next)
A:sympy.geometry.polygon.min2->Segment(e2_current, e2_next).distance(e1_next)
A:sympy.geometry.polygon.verts->map(N, self.vertices)
A:sympy.geometry.polygon.path->'M {} L {} z'.format(coords[0], ' L '.join(coords[1:]))
A:sympy.geometry.polygon.S1->ref_list(self.args)
A:sympy.geometry.polygon.r_nor->rotate_left(S1, least_rotation(S1))
A:sympy.geometry.polygon.S2->ref_list(list(reversed(self.args)))
A:sympy.geometry.polygon.r_rev->rotate_left(S2, least_rotation(S2))
A:sympy.geometry.polygon.pts->list(reversed(pts))
A:sympy.geometry.polygon.i->list(reversed(pts)).index(v)
A:sympy.geometry.polygon.(p1, p2)->point.Point._normalize_dimension(pts[i], pts[i + 1])
A:sympy.geometry.polygon.ray->Ray(ray.p1, ray.p2.n(prec))
A:sympy.geometry.polygon.(r, n, rot)->map(sympify, (r, n, rot))
A:sympy.geometry.polygon.c->Point(c, dim=2, **kwargs)
A:sympy.geometry.polygon.obj->entity.GeometryEntity.__new__(self, c, r, n, **kwargs)
A:sympy.geometry.polygon.dps->prec_to_dps(prec)
A:sympy.geometry.polygon.cc->Point(c, dim=2, **kwargs).reflect(line)
A:sympy.geometry.polygon.vv->v.reflect(line)
A:sympy.geometry.polygon.l1->Segment(v[0], Line(v[0], c).intersection(s[1])[0])
A:sympy.geometry.polygon.l2->Segment(v[1], Line(v[1], c).intersection(s[2])[0])
A:sympy.geometry.polygon.(a, b, c)->sorted([nodup[i], nodup[i + 1], nodup[i + 2]], key=default_sort_key)
A:sympy.geometry.polygon.e1->simplify(u1 / v1)
A:sympy.geometry.polygon.e2->simplify(u2 / v2)
A:sympy.geometry.polygon.e3->simplify(u3 / v3)
A:sympy.geometry.polygon.l3->Segment(v[2], Line(v[2], c).intersection(s[0])[0])
A:sympy.geometry.polygon.l->Matrix([s[i].length for i in [1, 2, 0]])
A:sympy.geometry.polygon.rv->tan(rad(d))
A:sympy.geometry.polygon.c1->Circle((0, 0), l3)
A:sympy.geometry.polygon.c2->Circle((l1, 0), l2)
A:sympy.geometry.polygon.p1->Point(0, 0)
A:sympy.geometry.polygon.p2->Point(l2, 0)
A:sympy.geometry.polygon.p3->Point(cos(rad(d)) * l1, sin(rad(d)) * l1)
sympy.Polygon(cls,*args,n=0,**kwargs)
sympy.RegularPolygon(self,c,r,n,rot=0,**kwargs)
sympy.Triangle(cls,*args,**kwargs)
sympy.deg(r)
sympy.geometry.polygon.Polygon(cls,*args,n=0,**kwargs)
sympy.geometry.polygon.Polygon.__contains__(self,o)
sympy.geometry.polygon.Polygon._do_poly_distance(self,e2)
sympy.geometry.polygon.Polygon._hashable_content(self)
sympy.geometry.polygon.Polygon._isright(a,b,c)
sympy.geometry.polygon.Polygon._svg(self,scale_factor=1.0,fill_color='#66cc99')
sympy.geometry.polygon.Polygon.ambient_dimension(self)
sympy.geometry.polygon.Polygon.angles(self)
sympy.geometry.polygon.Polygon.arbitrary_point(self,parameter='t')
sympy.geometry.polygon.Polygon.area(self)
sympy.geometry.polygon.Polygon.bisectors(p,prec=None)
sympy.geometry.polygon.Polygon.bounds(self)
sympy.geometry.polygon.Polygon.centroid(self)
sympy.geometry.polygon.Polygon.cut_section(self,line)
sympy.geometry.polygon.Polygon.distance(self,o)
sympy.geometry.polygon.Polygon.encloses_point(self,p)
sympy.geometry.polygon.Polygon.first_moment_of_area(self,point=None)
sympy.geometry.polygon.Polygon.intersection(self,o)
sympy.geometry.polygon.Polygon.is_convex(self)
sympy.geometry.polygon.Polygon.parameter_value(self,other,t)
sympy.geometry.polygon.Polygon.perimeter(self)
sympy.geometry.polygon.Polygon.plot_interval(self,parameter='t')
sympy.geometry.polygon.Polygon.polar_second_moment_of_area(self)
sympy.geometry.polygon.Polygon.second_moment_of_area(self,point=None)
sympy.geometry.polygon.Polygon.section_modulus(self,point=None)
sympy.geometry.polygon.Polygon.sides(self)
sympy.geometry.polygon.Polygon.vertices(self)
sympy.geometry.polygon.RegularPolygon(self,c,r,n,rot=0,**kwargs)
sympy.geometry.polygon.RegularPolygon.__eq__(self,o)
sympy.geometry.polygon.RegularPolygon.__hash__(self)
sympy.geometry.polygon.RegularPolygon.__repr__(self)
sympy.geometry.polygon.RegularPolygon.__str__(self)
sympy.geometry.polygon.RegularPolygon._eval_evalf(self,prec=15,**options)
sympy.geometry.polygon.RegularPolygon.angles(self)
sympy.geometry.polygon.RegularPolygon.apothem(self)
sympy.geometry.polygon.RegularPolygon.area(self)
sympy.geometry.polygon.RegularPolygon.args(self)
sympy.geometry.polygon.RegularPolygon.center(self)
sympy.geometry.polygon.RegularPolygon.circumcenter(self)
sympy.geometry.polygon.RegularPolygon.circumcircle(self)
sympy.geometry.polygon.RegularPolygon.circumradius(self)
sympy.geometry.polygon.RegularPolygon.encloses_point(self,p)
sympy.geometry.polygon.RegularPolygon.exterior_angle(self)
sympy.geometry.polygon.RegularPolygon.incircle(self)
sympy.geometry.polygon.RegularPolygon.inradius(self)
sympy.geometry.polygon.RegularPolygon.interior_angle(self)
sympy.geometry.polygon.RegularPolygon.length(self)
sympy.geometry.polygon.RegularPolygon.radius(self)
sympy.geometry.polygon.RegularPolygon.reflect(self,line)
sympy.geometry.polygon.RegularPolygon.rotate(self,angle,pt=None)
sympy.geometry.polygon.RegularPolygon.rotation(self)
sympy.geometry.polygon.RegularPolygon.scale(self,x=1,y=1,pt=None)
sympy.geometry.polygon.RegularPolygon.spin(self,angle)
sympy.geometry.polygon.RegularPolygon.vertices(self)
sympy.geometry.polygon.Triangle(cls,*args,**kwargs)
sympy.geometry.polygon.Triangle.altitudes(self)
sympy.geometry.polygon.Triangle.bisectors(self)
sympy.geometry.polygon.Triangle.circumcenter(self)
sympy.geometry.polygon.Triangle.circumcircle(self)
sympy.geometry.polygon.Triangle.circumradius(self)
sympy.geometry.polygon.Triangle.eulerline(self)
sympy.geometry.polygon.Triangle.excenters(self)
sympy.geometry.polygon.Triangle.exradii(self)
sympy.geometry.polygon.Triangle.incenter(self)
sympy.geometry.polygon.Triangle.incircle(self)
sympy.geometry.polygon.Triangle.inradius(self)
sympy.geometry.polygon.Triangle.is_equilateral(self)
sympy.geometry.polygon.Triangle.is_isosceles(self)
sympy.geometry.polygon.Triangle.is_right(self)
sympy.geometry.polygon.Triangle.is_scalene(self)
sympy.geometry.polygon.Triangle.is_similar(t1,t2)
sympy.geometry.polygon.Triangle.medial(self)
sympy.geometry.polygon.Triangle.medians(self)
sympy.geometry.polygon.Triangle.nine_point_circle(self)
sympy.geometry.polygon.Triangle.orthocenter(self)
sympy.geometry.polygon.Triangle.vertices(self)
sympy.geometry.polygon._asa(d1,l,d2)
sympy.geometry.polygon._sas(l1,d,l2)
sympy.geometry.polygon._slope(d)
sympy.geometry.polygon._sss(l1,l2,l3)
sympy.geometry.polygon.deg(r)
sympy.geometry.polygon.rad(d)
sympy.rad(d)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/exceptions.py----------------------------------------
sympy.GeometryError(ValueError)
sympy.geometry.exceptions.GeometryError(ValueError)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_entity.py----------------------------------------
A:sympy.geometry.tests.test_entity.x->Symbol('x', real=True)
A:sympy.geometry.tests.test_entity.y->Symbol('y', real=True)
A:sympy.geometry.tests.test_entity.c->Circle((x, y), 3)
A:sympy.geometry.tests.test_entity.a->Symbol('a')
A:sympy.geometry.tests.test_entity.b->Symbol('b')
A:sympy.geometry.tests.test_entity.d->Symbol('d')
A:sympy.geometry.tests.test_entity.entity->Circle(Point(0, 0), S.Infinity)
A:sympy.geometry.tests.test_entity.p->Point(x, y)
A:sympy.geometry.tests.test_entity.q->Point(1, 1)
A:sympy.geometry.tests.test_entity.r->Point(x, y).reflect(l)
A:sympy.geometry.tests.test_entity.m->Symbol('m')
A:sympy.geometry.tests.test_entity.l->Line(pent.vertices[1], slope=slope)
A:sympy.geometry.tests.test_entity.cr->Circle((x, y), 3).reflect(l)
A:sympy.geometry.tests.test_entity.pent->RegularPolygon((1, 2), 1, 5)
A:sympy.geometry.tests.test_entity.slope->Rational(*(x._random() / 2).as_real_imag())
A:sympy.geometry.tests.test_entity.rpent->RegularPolygon((1, 2), 1, 5).reflect(l)
A:sympy.geometry.tests.test_entity.t->Symbol('t')
sympy.geometry.tests.test_entity.test_entity()
sympy.geometry.tests.test_entity.test_geometry_EvalfMixin()
sympy.geometry.tests.test_entity.test_reflect_entity_overrides()
sympy.geometry.tests.test_entity.test_subs()
sympy.geometry.tests.test_entity.test_svg()
sympy.geometry.tests.test_entity.test_transform()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_curve.py----------------------------------------
A:sympy.geometry.tests.test_curve.x->Symbol('x', real=True)
A:sympy.geometry.tests.test_curve.s->Symbol('s')
A:sympy.geometry.tests.test_curve.z->Symbol('z')
A:sympy.geometry.tests.test_curve.c->Curve((t, t ** 2), (t, 0, 10))
A:sympy.geometry.tests.test_curve.t->Symbol('t')
A:sympy.geometry.tests.test_curve.(a, b, c, d, e, f, s)->symbols('a:f,s')
A:sympy.geometry.tests.test_curve.y->Symbol('y', real=True)
A:sympy.geometry.tests.test_curve.cout->Curve((2 * x - 4, 3 * x ** 2 - 10), (x, 0, 1))
A:sympy.geometry.tests.test_curve.c1->Curve((t, 0), (t, 0, 1))
A:sympy.geometry.tests.test_curve.c2->Curve((t, t), (t, 0, 1))
A:sympy.geometry.tests.test_curve.c3->Curve((t ** 2, t), (t, 2, 5))
A:sympy.geometry.tests.test_curve.C->Curve([2 * t, t ** 2], (t, 0, 2))
A:sympy.geometry.tests.test_curve.(t, s)->symbols('t s')
A:sympy.geometry.tests.test_curve.p->Curve([2 * s, s ** 2], (s, 0, 2))
sympy.geometry.tests.test_curve.test_curve()
sympy.geometry.tests.test_curve.test_free_symbols()
sympy.geometry.tests.test_curve.test_issue_17997()
sympy.geometry.tests.test_curve.test_length()
sympy.geometry.tests.test_curve.test_parameter_value()
sympy.geometry.tests.test_curve.test_transform()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_plane.py----------------------------------------
A:sympy.geometry.tests.test_plane.(x, y, z, u, v)->symbols('x y z u v', real=True)
A:sympy.geometry.tests.test_plane.p1->Point3D(0, 0, 0)
A:sympy.geometry.tests.test_plane.p2->Plane(Point3D(Rational(402775636372767, 100000000000000), Rational(-97224357654973, 100000000000000), Rational(216793600814789, 100000000000000)), (-S('9.00000087501922'), -S('4.81170658872543e-13'), S('0.0')))
A:sympy.geometry.tests.test_plane.p3->Point3D(1, 2, 3)
A:sympy.geometry.tests.test_plane.pl3->Plane(p1, p2, p3)
A:sympy.geometry.tests.test_plane.pl4->Plane(p1, normal_vector=(1, 1, 1))
A:sympy.geometry.tests.test_plane.pl4b->Plane(p1, p2)
A:sympy.geometry.tests.test_plane.pl5->Plane(p3, normal_vector=(1, 2, 3))
A:sympy.geometry.tests.test_plane.pl6->Plane(Point3D(2, 3, 7), normal_vector=(2, 2, 2))
A:sympy.geometry.tests.test_plane.pl7->Plane(Point3D(1, -5, -6), normal_vector=(1, -2, 1))
A:sympy.geometry.tests.test_plane.pl8->Plane((1, 2, 0), normal_vector=(0, 0, 1))
A:sympy.geometry.tests.test_plane.pl9->Plane(p1, normal_vector=(0, 12, 0))
A:sympy.geometry.tests.test_plane.pl10->Plane(p1, normal_vector=(-2, 0, 0))
A:sympy.geometry.tests.test_plane.pl11->Plane(p2, normal_vector=(0, 0, 1))
A:sympy.geometry.tests.test_plane.l1->Line3D(Point3D(5, 0, 0), Point3D(1, -1, 1))
A:sympy.geometry.tests.test_plane.l2->Line3D(Point3D(Rational(50000004459633, 5000000000000), Rational(-891926590718643, 1000000000000000), Rational(231800966893633, 100000000000000)), Point3D(Rational(50000004459633, 50000000000000), Rational(-222981647679771, 250000000000000), Rational(231800966893633, 100000000000000)))
A:sympy.geometry.tests.test_plane.l3->Line3D(Point3D(0, -1, 0), Point3D(5, -1, 9))
A:sympy.geometry.tests.test_plane.p->Plane(p1, p2, p3)
A:sympy.geometry.tests.test_plane.l->Plane(p1, p2, p3).projection_line(Line(Point(0, 0), Point(1, 1)))
A:sympy.geometry.tests.test_plane.t->Dummy()
A:sympy.geometry.tests.test_plane.r->Ray(Point(2, 3), Point(4, 2))
A:sympy.geometry.tests.test_plane.a->Plane(p1, p2, p3).perpendicular_line(r).arbitrary_point(t)
A:sympy.geometry.tests.test_plane.s->Segment3D(a.subs(t, 1), a.subs(t, 2))
A:sympy.geometry.tests.test_plane.n->Point3D(*Z)
A:sympy.geometry.tests.test_plane.A->Plane(Point3D(1, 1, 2), normal_vector=(1, 1, 1))
A:sympy.geometry.tests.test_plane.b->Point(1, 1)
A:sympy.geometry.tests.test_plane.(t, u, v)->symbols('t, u v')
sympy.geometry.tests.test_plane.test_dimension_normalization()
sympy.geometry.tests.test_plane.test_parameter_value()
sympy.geometry.tests.test_plane.test_plane()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_util.py----------------------------------------
A:sympy.geometry.tests.test_util.x->Symbol('x', positive=True)
A:sympy.geometry.tests.test_util.y->Symbol('y', real=True)
A:sympy.geometry.tests.test_util.t->Symbol('t', real=True)
A:sympy.geometry.tests.test_util.f->Function('f')
A:sympy.geometry.tests.test_util.g->Function('g')
A:sympy.geometry.tests.test_util.p->Segment((0, 0), (2, 0))
A:sympy.geometry.tests.test_util.q->Segment((0, 0), (2, 2))
A:sympy.geometry.tests.test_util.d->Line(Point2D(0, 3), Point2D(1, 5))
A:sympy.geometry.tests.test_util.points->list(points)
A:sympy.geometry.tests.test_util.a->Line3D(Point3D(5, 0, 0), Point3D(1, -1, 1))
A:sympy.geometry.tests.test_util.b->Line3D(Point3D(0, -2, 0), Point3D(3, 1, 1))
A:sympy.geometry.tests.test_util.c->Line3D(Point3D(0, -1, 0), Point3D(5, -1, 9))
sympy.geometry.tests.test_util.test_are_coplanar()
sympy.geometry.tests.test_util.test_centroid()
sympy.geometry.tests.test_util.test_convex_hull()
sympy.geometry.tests.test_util.test_farthest_points_closest_points()
sympy.geometry.tests.test_util.test_idiff()
sympy.geometry.tests.test_util.test_intersection()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_line.py----------------------------------------
A:sympy.geometry.tests.test_line.x->Symbol('x', real=True)
A:sympy.geometry.tests.test_line.y->Symbol('y', real=True)
A:sympy.geometry.tests.test_line.z->Point3D(0, 0, 0)
A:sympy.geometry.tests.test_line.k->Symbol('k', real=True)
A:sympy.geometry.tests.test_line.x1->sqrt(3)
A:sympy.geometry.tests.test_line.y1->Symbol('y1', real=True)
A:sympy.geometry.tests.test_line.t->Symbol('t')
A:sympy.geometry.tests.test_line.(a, b)->symbols('a,b', real=True)
A:sympy.geometry.tests.test_line.m->symbols('m', real=True)
A:sympy.geometry.tests.test_line.t_float->Float('1.0E-10')
A:sympy.geometry.tests.test_line.a->Line3D(Point3D(6, 5, 0), Point3D(6, -6, 0))
A:sympy.geometry.tests.test_line.b->Line3D(Point3D(6, -1, 19 / 10), Point3D(6, -1, 0))
A:sympy.geometry.tests.test_line.l1->Line((0, 0), (1, 1))
A:sympy.geometry.tests.test_line.l2->Segment((-1, 1), (-1 / 2, 1 / 2)).n(2)
A:sympy.geometry.tests.test_line.p1->Point(0, 0)
A:sympy.geometry.tests.test_line.parallel_1->Line3D(Point3D(0, 0, 0), Point3D(1, 0, 0))
A:sympy.geometry.tests.test_line.parallel_2->Line3D(Point3D(0, 1, 0), Point3D(1, 1, 0))
A:sympy.geometry.tests.test_line.doubles2d->subsets(singles2d, 2)
A:sympy.geometry.tests.test_line.l2d->Line(Point2D(1, 2), Point2D(2, 3))
A:sympy.geometry.tests.test_line.doubles3d->subsets(singles3d, 2)
A:sympy.geometry.tests.test_line.l3d->Line(Point3D(1, 2, 3), Point3D(1, 1, 2))
A:sympy.geometry.tests.test_line.doubles4d->subsets(singles4d, 2)
A:sympy.geometry.tests.test_line.l4d->Line(Point(1, 2, 3, 4), Point(2, 2, 2, 2))
A:sympy.geometry.tests.test_line.p2->Point3D(0, 0, 0)
A:sympy.geometry.tests.test_line.p10->Point(2000, 2000)
A:sympy.geometry.tests.test_line.p_r3->Ray(p1, p2).random_point()
A:sympy.geometry.tests.test_line.p_r4->Ray(p2, p1).random_point()
A:sympy.geometry.tests.test_line.l3->Line3D(p2, Point3D(1, 1, 1))
A:sympy.geometry.tests.test_line.l4->Line(p1, Point(1, 0))
A:sympy.geometry.tests.test_line.r1->Ray(Point(0, 1), Point(0.98, 0.79).n(2))
A:sympy.geometry.tests.test_line.r2->Ray(Point(0, 0), Point(0.71, 0.71).n(2))
A:sympy.geometry.tests.test_line.s1->Segment(Point(0, 0), Point(1, 1))
A:sympy.geometry.tests.test_line.p_s1->Segment(Point(0, 0), Point(1, 1)).random_point()
A:sympy.geometry.tests.test_line.r->Ray3D(p1, p2)
A:sympy.geometry.tests.test_line.p3->Point(-x1, x1)
A:sympy.geometry.tests.test_line.p5->Point3D(x1, 1 + x1, 1)
A:sympy.geometry.tests.test_line.r3->Ray3D(p1, Point3D(0, 0, 1))
A:sympy.geometry.tests.test_line.l->Line(p1, p2)
A:sympy.geometry.tests.test_line.(u, v, w, z)->symbols('u, v, w, z')
A:sympy.geometry.tests.test_line.p->Line(p1, p2).perpendicular_line(p3)
A:sympy.geometry.tests.test_line.s2->Segment(Point2D(1, 0), Point2D(2, 1 / 2))
A:sympy.geometry.tests.test_line.p4->Point(y1, y1)
A:sympy.geometry.tests.test_line.r4->Ray(p1, p2)
A:sympy.geometry.tests.test_line.r6->Ray(Point(0, 1), Point(1, 2))
A:sympy.geometry.tests.test_line.r7->Ray(Point(0.5, 0.5), Point(1, 1))
A:sympy.geometry.tests.test_line.s3->Segment(Point(0, 0), Point(3, 4))
A:sympy.geometry.tests.test_line.x0->tan(pi * Rational(13, 45))
A:sympy.geometry.tests.test_line.l2_1->Line(Point(x1, x1), Point(x1, 1 + x1))
A:sympy.geometry.tests.test_line.l1_1->Line(p1, Point(-x1, x1))
A:sympy.geometry.tests.test_line.aline->Line(Point(S.Half, S.Half), Point(Rational(3, 2), Rational(-1, 2)))
A:sympy.geometry.tests.test_line.(d, e)->symbols('a,b', real=True)
A:sympy.geometry.tests.test_line.s->Segment((d, 0), (e, 0))
A:sympy.geometry.tests.test_line.circle->Circle(Point(x, 0), y)
A:sympy.geometry.tests.test_line.line->Line(Point(k, z), slope=0)
A:sympy.geometry.tests.test_line._s->sqrt((y - z) * (y + z))
A:sympy.geometry.tests.test_line.bisections->Ray(Point(0, 1), Point(0.98, 0.79).n(2)).bisectors(r2)
sympy.geometry.tests.test_line.feq(a,b)
sympy.geometry.tests.test_line.test_angle_between()
sympy.geometry.tests.test_line.test_arbitrary_point()
sympy.geometry.tests.test_line.test_are_concurrent_2d()
sympy.geometry.tests.test_line.test_are_concurrent_3d()
sympy.geometry.tests.test_line.test_arguments()
sympy.geometry.tests.test_line.test_basic_properties_2d()
sympy.geometry.tests.test_line.test_basic_properties_3d()
sympy.geometry.tests.test_line.test_bisectors()
sympy.geometry.tests.test_line.test_closing_angle()
sympy.geometry.tests.test_line.test_contains()
sympy.geometry.tests.test_line.test_contains_nonreal_symbols()
sympy.geometry.tests.test_line.test_dimension_normalization()
sympy.geometry.tests.test_line.test_distance_2d()
sympy.geometry.tests.test_line.test_distance_3d()
sympy.geometry.tests.test_line.test_equals()
sympy.geometry.tests.test_line.test_equation()
sympy.geometry.tests.test_line.test_intersection_2d()
sympy.geometry.tests.test_line.test_intersection_3d()
sympy.geometry.tests.test_line.test_is_parallel()
sympy.geometry.tests.test_line.test_is_perpendicular()
sympy.geometry.tests.test_line.test_is_similar()
sympy.geometry.tests.test_line.test_issue_12598()
sympy.geometry.tests.test_line.test_issue_2941()
sympy.geometry.tests.test_line.test_issue_7814()
sympy.geometry.tests.test_line.test_issue_8615()
sympy.geometry.tests.test_line.test_length()
sympy.geometry.tests.test_line.test_line_intersection()
sympy.geometry.tests.test_line.test_object_from_equation()
sympy.geometry.tests.test_line.test_parameter_value()
sympy.geometry.tests.test_line.test_perpendicular_bisector()
sympy.geometry.tests.test_line.test_perpendicular_line()
sympy.geometry.tests.test_line.test_projection()
sympy.geometry.tests.test_line.test_raises()
sympy.geometry.tests.test_line.test_ray_generation()
sympy.geometry.tests.test_line.test_smallest_angle()
sympy.geometry.tests.test_line.test_svg()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_parabola.py----------------------------------------
A:sympy.geometry.tests.test_parabola.(a, b)->symbols('a b')
A:sympy.geometry.tests.test_parabola.p1->Point(0, 0)
A:sympy.geometry.tests.test_parabola.p2->Point(0, -2)
A:sympy.geometry.tests.test_parabola.p3->Point(120, -12)
A:sympy.geometry.tests.test_parabola.p4->Point(6, 0)
A:sympy.geometry.tests.test_parabola.p5->Point(a, a)
A:sympy.geometry.tests.test_parabola.d1->Line(Point(4, 0), Point(4, 9))
A:sympy.geometry.tests.test_parabola.d2->Line(Point(7, 6), Point(3, 6))
A:sympy.geometry.tests.test_parabola.d3->Line(Point(4, 0), slope=oo)
A:sympy.geometry.tests.test_parabola.d4->Line(Point(7, 6), slope=0)
A:sympy.geometry.tests.test_parabola.d5->Line(Point(b, a), slope=oo)
A:sympy.geometry.tests.test_parabola.d6->Line(Point(a, b), slope=0)
A:sympy.geometry.tests.test_parabola.pa1->Parabola(None, d2)
A:sympy.geometry.tests.test_parabola.pa2->Parabola(directrix=d1)
A:sympy.geometry.tests.test_parabola.pa3->Parabola(p1, d1)
A:sympy.geometry.tests.test_parabola.pa4->Parabola(p2, d2)
A:sympy.geometry.tests.test_parabola.pa5->Parabola(p2, d4)
A:sympy.geometry.tests.test_parabola.pa6->Parabola(p3, d2)
A:sympy.geometry.tests.test_parabola.pa7->Parabola(p2, d1)
A:sympy.geometry.tests.test_parabola.pa8->Parabola(p4, d1)
A:sympy.geometry.tests.test_parabola.pa9->Parabola(p4, d3)
A:sympy.geometry.tests.test_parabola.pa10->Parabola(p5, d5)
A:sympy.geometry.tests.test_parabola.pa11->Parabola(p5, d6)
A:sympy.geometry.tests.test_parabola.d->Line(Point(3, 7), Point(2, 9))
A:sympy.geometry.tests.test_parabola.pa12->Parabola(Point(7, 8), d)
A:sympy.geometry.tests.test_parabola.pa12r->Parabola(Point(7, 8).reflect(d), d)
A:sympy.geometry.tests.test_parabola.l1->Line(Point(1, -2), Point(-1, -2))
A:sympy.geometry.tests.test_parabola.l2->Line(Point(1, 2), Point(-1, 2))
A:sympy.geometry.tests.test_parabola.l3->Line(Point(1, 0), Point(-1, 0))
A:sympy.geometry.tests.test_parabola.parabola1->Parabola(p1, l1)
sympy.geometry.tests.test_parabola.test_parabola_geom()
sympy.geometry.tests.test_parabola.test_parabola_intersection()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_ellipse.py----------------------------------------
A:sympy.geometry.tests.test_ellipse.e1->Ellipse(Point(1, 0), 3, 2)
A:sympy.geometry.tests.test_ellipse.e2->Ellipse(Point(2, -2), 7, 7)
A:sympy.geometry.tests.test_ellipse.e3->Ellipse(Point(0, 0), y1, y1)
A:sympy.geometry.tests.test_ellipse.(x, y)->symbols('x, y')
A:sympy.geometry.tests.test_ellipse.x->Symbol('x', real=True)
A:sympy.geometry.tests.test_ellipse.y->Symbol('y', real=True)
A:sympy.geometry.tests.test_ellipse.t->Symbol('t')
A:sympy.geometry.tests.test_ellipse.y1->Symbol('y1', real=True)
A:sympy.geometry.tests.test_ellipse.p1->Point(0, 0)
A:sympy.geometry.tests.test_ellipse.p2->Point(1, 1)
A:sympy.geometry.tests.test_ellipse.p4->Point(0, 1)
A:sympy.geometry.tests.test_ellipse.c1->Circle(Point(2, -2), 7)
A:sympy.geometry.tests.test_ellipse.c2->Circle(Point(-2, 0), Point(0, 2), Point(2, 0))
A:sympy.geometry.tests.test_ellipse.c3->Circle(Point(sqrt(2), sqrt(2)), 1)
A:sympy.geometry.tests.test_ellipse.l1->Line(Point(1, -5), Point(1, 5))
A:sympy.geometry.tests.test_ellipse.ef->Ellipse(Point(0, 0), 4, 2)
A:sympy.geometry.tests.test_ellipse.p1_1->Point(v, v)
A:sympy.geometry.tests.test_ellipse.e->Ellipse(Point(1, 1), 6, 3)
A:sympy.geometry.tests.test_ellipse.p->Point(sqrt(3), S.Half)
A:sympy.geometry.tests.test_ellipse.e4->Ellipse(Point(0, 0), hradius=1, eccentricity=0)
A:sympy.geometry.tests.test_ellipse.l2->Line(Point(-5, -1), Point(5, -1))
A:sympy.geometry.tests.test_ellipse.l3->Line(Point(-1, -1), Point(1, 1))
A:sympy.geometry.tests.test_ellipse.l4->Line(Point(-10, 0), Point(0, 10))
A:sympy.geometry.tests.test_ellipse.csmall->Circle(p1, 3)
A:sympy.geometry.tests.test_ellipse.cbig->Circle(p1, 5)
A:sympy.geometry.tests.test_ellipse.cout->Circle(Point(5, 5), 1)
A:sympy.geometry.tests.test_ellipse.v->sqrt(2)
A:sympy.geometry.tests.test_ellipse.t1->Ellipse(Point(1, 1), 6, 3).second_moment_of_area(Point(6, 5))
A:sympy.geometry.tests.test_ellipse.points->intersection(t1, c1)
A:sympy.geometry.tests.test_ellipse.circ->Circle(Point(0, 0), 5)
A:sympy.geometry.tests.test_ellipse.elip->Ellipse(Point(0, 0), 3, 2)
A:sympy.geometry.tests.test_ellipse.a->Rational(53, 17)
A:sympy.geometry.tests.test_ellipse.c->Circle(Ci, Ri)
A:sympy.geometry.tests.test_ellipse.cir->Circle(Point(1, 0), 1)
A:sympy.geometry.tests.test_ellipse.r->Ellipse(Point(0, 0), y1, y1).random_point(seed=1)
A:sympy.geometry.tests.test_ellipse.b->Symbol('b')
A:sympy.geometry.tests.test_ellipse.m->Symbol('m')
A:sympy.geometry.tests.test_ellipse.l->Line((0, b), slope=m)
A:sympy.geometry.tests.test_ellipse.I_xy->integrate(integrate(y, (y, -Y, Y)) * x, (x, -5, 5))
A:sympy.geometry.tests.test_ellipse.d->Symbol('d', positive=True)
A:sympy.geometry.tests.test_ellipse.(a, b)->symbols('a b')
A:sympy.geometry.tests.test_ellipse.M->Symbol('M')
A:sympy.geometry.tests.test_ellipse.A->Point(0, 0.0578591400998346)
A:sympy.geometry.tests.test_ellipse.u->Circle(Ci, Ri, evaluate=False)
A:sympy.geometry.tests.test_ellipse.(x, y, a, b)->symbols('x y a b')
A:sympy.geometry.tests.test_ellipse.(x, y, h, k)->symbols('x y h k', real=True)
sympy.geometry.tests.test_ellipse.test_auxiliary_circle()
sympy.geometry.tests.test_ellipse.test_bounds()
sympy.geometry.tests.test_ellipse.test_circumference()
sympy.geometry.tests.test_ellipse.test_construction()
sympy.geometry.tests.test_ellipse.test_director_circle()
sympy.geometry.tests.test_ellipse.test_ellipse_equation_using_slope()
sympy.geometry.tests.test_ellipse.test_ellipse_geom()
sympy.geometry.tests.test_ellipse.test_ellipse_random_point()
sympy.geometry.tests.test_ellipse.test_evolute()
sympy.geometry.tests.test_ellipse.test_is_tangent()
sympy.geometry.tests.test_ellipse.test_issue_15259()
sympy.geometry.tests.test_ellipse.test_issue_15797_equals()
sympy.geometry.tests.test_ellipse.test_object_from_equation()
sympy.geometry.tests.test_ellipse.test_parameter_value()
sympy.geometry.tests.test_ellipse.test_reflect()
sympy.geometry.tests.test_ellipse.test_repr()
sympy.geometry.tests.test_ellipse.test_second_moment_of_area()
sympy.geometry.tests.test_ellipse.test_section_modulus_and_polar_second_moment_of_area()
sympy.geometry.tests.test_ellipse.test_svg()
sympy.geometry.tests.test_ellipse.test_transform()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_polygon.py----------------------------------------
A:sympy.geometry.tests.test_polygon.t_float->Float('1.0E-10')
A:sympy.geometry.tests.test_polygon.x->Symbol('x', real=True)
A:sympy.geometry.tests.test_polygon.y->Symbol('y', real=True)
A:sympy.geometry.tests.test_polygon.q->Polygon((0, 0), (2, 1), (2, 4), (4, 0))
A:sympy.geometry.tests.test_polygon.u->Symbol('u', real=True)
A:sympy.geometry.tests.test_polygon.v->Symbol('v', real=True)
A:sympy.geometry.tests.test_polygon.w->Symbol('w', real=True)
A:sympy.geometry.tests.test_polygon.x1->Symbol('x1', real=True)
A:sympy.geometry.tests.test_polygon.t->Symbol('t')
A:sympy.geometry.tests.test_polygon.p1->Polygon(Point(0, 0), Point(5, 0), Point(2, 4))
A:sympy.geometry.tests.test_polygon.p2->Polygon(Point(0, 0), Point(0, 2), Point(4, 0))
A:sympy.geometry.tests.test_polygon.p3->Polygon(Point(0, 0), Point(6, 0), Point(3, sqrt(27)))
A:sympy.geometry.tests.test_polygon.p4->Polygon(Point(1, 1), Point(Rational(6) / 5, 1), Point(1, Rational(6) / 5))
A:sympy.geometry.tests.test_polygon.p5->Polygon(Point(0, 0), Point(4, 4), Point(0, 4))
A:sympy.geometry.tests.test_polygon.p6->Polygon(Point(-11, 1), Point(-9, 6.6), Point(-4, -3), Point(-8.4, -8.7))
A:sympy.geometry.tests.test_polygon.p7->Polygon(Point(x, y), Point(q, u), Point(v, w))
A:sympy.geometry.tests.test_polygon.p8->Polygon(Point(x, y), Point(v, w), Point(q, u))
A:sympy.geometry.tests.test_polygon.p9->Polygon(Point(0, 0), Point(4, 4), Point(3, 0), Point(5, 2))
A:sympy.geometry.tests.test_polygon.p10->Polygon(Point(0, 2), Point(2, 2), Point(0, 0), Point(2, 0))
A:sympy.geometry.tests.test_polygon.p11->Polygon(Point(0, 0), 1, n=3)
A:sympy.geometry.tests.test_polygon.p12->Polygon(Point(0, 0), 1, 0, n=3)
A:sympy.geometry.tests.test_polygon.r->RegularPolygon(Point(0, 0), 5, 3)
A:sympy.geometry.tests.test_polygon.t1->Triangle(p1, p2, p3)
A:sympy.geometry.tests.test_polygon.t2->Triangle(p1, p2, Point(Rational(5, 2), sqrt(Rational(75, 4))))
A:sympy.geometry.tests.test_polygon.t3->Triangle(p1, Point(x1, 0), Point(0, x1))
A:sympy.geometry.tests.test_polygon.bisectors->Triangle(p1, p2, p3).bisectors()
A:sympy.geometry.tests.test_polygon.pt1->Point(half, half)
A:sympy.geometry.tests.test_polygon.pt2->Point(1, 1)
A:sympy.geometry.tests.test_polygon.ch->Polygon(p[0], p[3], p[9], p[10], p[6], p[1])
A:sympy.geometry.tests.test_polygon.ch2->Segment(another_p[0], another_p[1])
A:sympy.geometry.tests.test_polygon.s->Polygon(t1, t2, t3, t4).cut_section(Line((0, 0), slope=1))
A:sympy.geometry.tests.test_polygon.b->Symbol('b')
A:sympy.geometry.tests.test_polygon.m->Symbol('m')
A:sympy.geometry.tests.test_polygon.l->Line((0, 0), (Rational(9, 2), 3))
A:sympy.geometry.tests.test_polygon.p->Polygon(t1, t2, t3, t4)
A:sympy.geometry.tests.test_polygon.poly->Polygon(Point(0, 0), Point(0, 10), Point(5, 10), Point(5, 5), Point(10, 5), Point(10, 0))
A:sympy.geometry.tests.test_polygon.poly1->Triangle(Point(0, 0), Point(1, 0), Point(0, 1))
A:sympy.geometry.tests.test_polygon.poly2->Polygon(Point(0, 1), Point(-5, 0), Point(0, -4), Point(0, Rational(1, 5)), Point(S.Half, -0.1), Point(1, 0), Point(0, 1))
A:sympy.geometry.tests.test_polygon.sq->Polygon((0, 0), (0, 1), (1, 1), (1, 0))
A:sympy.geometry.tests.test_polygon.pt->Polygon(Point(0, 0), Point(0, 10), Point(5, 10), Point(5, 5), Point(10, 5), Point(10, 0)).arbitrary_point(t)
A:sympy.geometry.tests.test_polygon.(x, y)->symbols('x, y')
A:sympy.geometry.tests.test_polygon.I_yy->integrate(x ** 2 * integrate(1, (y, 0, 2)), (x, 0, 4))
A:sympy.geometry.tests.test_polygon.I_xx->integrate(1 * integrate(y ** 2, (y, 0, 2)), (x, 0, 4))
A:sympy.geometry.tests.test_polygon.I_xy->integrate(x * integrate(y, (y, 0, 2)), (x, 0, 4))
A:sympy.geometry.tests.test_polygon.triangle->Polygon(p1, p2, p3)
A:sympy.geometry.tests.test_polygon.rectangle->Polygon((0, b), (0, 0), (a, 0), (a, b))
A:sympy.geometry.tests.test_polygon.(a, b)->symbols('a, b', positive=True)
A:sympy.geometry.tests.test_polygon.convex->RegularPolygon((0, 0), 1, 6)
A:sympy.geometry.tests.test_polygon.concave->Polygon((0, 0), (1, 8), (3, 4), (4, 6), (7, 1))
A:sympy.geometry.tests.test_polygon.(p1, p2)->Polygon(t1, t2, t3, t4).cut_section(Line((0, b), slope=0))
A:sympy.geometry.tests.test_polygon.(p3, p4)->Polygon(t1, t2, t3, t4).cut_section(Line((0, 0), slope=0))
A:sympy.geometry.tests.test_polygon.square1->Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))
A:sympy.geometry.tests.test_polygon.triangle1->Polygon(Point(1, 2), Point(2, 2), Point(2, 1))
A:sympy.geometry.tests.test_polygon.square2->Polygon(Point(1, 0), Point(2, 0), Point(2, 1), Point(1, 1))
A:sympy.geometry.tests.test_polygon.triangle2->Polygon(Point(0, -1), Point(2, -1), Point(S.Half, S.Half))
sympy.geometry.tests.test_polygon.feq(a,b)
sympy.geometry.tests.test_polygon.test_bisectors()
sympy.geometry.tests.test_polygon.test_convex_hull()
sympy.geometry.tests.test_polygon.test_cut_section()
sympy.geometry.tests.test_polygon.test_do_poly_distance()
sympy.geometry.tests.test_polygon.test_encloses()
sympy.geometry.tests.test_polygon.test_eulerline()
sympy.geometry.tests.test_polygon.test_exradii()
sympy.geometry.tests.test_polygon.test_first_moment()
sympy.geometry.tests.test_polygon.test_incenter()
sympy.geometry.tests.test_polygon.test_incircle()
sympy.geometry.tests.test_polygon.test_inradius()
sympy.geometry.tests.test_polygon.test_intersection()
sympy.geometry.tests.test_polygon.test_issue_12966()
sympy.geometry.tests.test_polygon.test_medial()
sympy.geometry.tests.test_polygon.test_medians()
sympy.geometry.tests.test_polygon.test_nine_point_circle()
sympy.geometry.tests.test_polygon.test_parameter_value()
sympy.geometry.tests.test_polygon.test_polygon()
sympy.geometry.tests.test_polygon.test_reflect()
sympy.geometry.tests.test_polygon.test_second_moment_of_area()
sympy.geometry.tests.test_polygon.test_section_modulus_and_polar_second_moment_of_area()
sympy.geometry.tests.test_polygon.test_transform()
sympy.geometry.tests.test_polygon.test_triangle_kwargs()
sympy.geometry.tests.test_polygon.test_type_of_triangle()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_geometrysets.py----------------------------------------
A:sympy.geometry.tests.test_geometrysets.(p1, p2, p3, p4)->map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])
A:sympy.geometry.tests.test_geometrysets.(p5, p6, p7)->map(Point, [(3, 2), (1, -1), (0, 2)])
A:sympy.geometry.tests.test_geometrysets.l1->Line(Point(0, 0), Point(1, 1))
A:sympy.geometry.tests.test_geometrysets.l2->Line(Point(half, half), Point(5, 5))
A:sympy.geometry.tests.test_geometrysets.l3->Line(p2, p3)
A:sympy.geometry.tests.test_geometrysets.l4->Line(p3, p4)
A:sympy.geometry.tests.test_geometrysets.poly1->Polygon(p1, p2, p3, p4)
A:sympy.geometry.tests.test_geometrysets.poly2->Polygon(p5, p6, p7)
A:sympy.geometry.tests.test_geometrysets.poly3->Polygon(p1, p2, p5)
A:sympy.geometry.tests.test_geometrysets.fs->FiniteSet(Point(Rational(1, 3), 1), Point(Rational(2, 3), 0), Point(Rational(9, 5), Rational(1, 5)), Point(Rational(7, 3), 1))
sympy.geometry.tests.test_geometrysets.test_booleans()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/geometry/tests/test_point.py----------------------------------------
A:sympy.geometry.tests.test_point.x->Symbol('x')
A:sympy.geometry.tests.test_point.y->Symbol('y', real=True)
A:sympy.geometry.tests.test_point.x1->Symbol('x1', real=True)
A:sympy.geometry.tests.test_point.x2->Symbol('x2', real=True)
A:sympy.geometry.tests.test_point.y1->Symbol('y1', real=True)
A:sympy.geometry.tests.test_point.y2->Symbol('y2', real=True)
A:sympy.geometry.tests.test_point.p1->Point3D(0, 0, 0)
A:sympy.geometry.tests.test_point.p2->Point3D(1, 1, 1)
A:sympy.geometry.tests.test_point.p3->Point3D(7, 2, 3)
A:sympy.geometry.tests.test_point.p4->Point3D(1, 1, 1)
A:sympy.geometry.tests.test_point.p5->Point3D(0, 1, 2)
A:sympy.geometry.tests.test_point.line->Line(Point(1, 0), slope=1)
A:sympy.geometry.tests.test_point.p1_1->Point3D(x1, x1, x1)
A:sympy.geometry.tests.test_point.p1_2->Point3D(y2, y2, y2)
A:sympy.geometry.tests.test_point.p1_3->Point3D(x1 + 1, x1, x1)
A:sympy.geometry.tests.test_point.x_pos->Symbol('x', positive=True)
A:sympy.geometry.tests.test_point.p2_1->Point(x_pos, 0)
A:sympy.geometry.tests.test_point.p2_2->Point(0, x_pos)
A:sympy.geometry.tests.test_point.p2_3->Point(-x_pos, 0)
A:sympy.geometry.tests.test_point.p2_4->Point(0, -x_pos)
A:sympy.geometry.tests.test_point.p2_5->Point(x_pos, 5)
A:sympy.geometry.tests.test_point.p->Point(1, 1)
A:sympy.geometry.tests.test_point.x3->Symbol('x3', real=True)
A:sympy.geometry.tests.test_point.y3->Symbol('y3', real=True)
A:sympy.geometry.tests.test_point.planar2->Point3D(1, 1, 2)
A:sympy.geometry.tests.test_point.planar3->Point3D(1, 1, 3)
A:sympy.geometry.tests.test_point.plane->Plane((1, 2, 1), (2, 1, 0), (3, 1, 2))
A:sympy.geometry.tests.test_point.identity->Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])
A:sympy.geometry.tests.test_point.trans->Matrix([[1, 0, 0, 1], [0, 1, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1]])
A:sympy.geometry.tests.test_point.p_4d->Point(0, 0, 0, 1)
A:sympy.geometry.tests.test_point.p_4d3d->Point(0, 0, 1, 0)
A:sympy.geometry.tests.test_point.doubles2d->cartes(singles2d, singles2d2)
A:sympy.geometry.tests.test_point.p2d->Point2D(1, 2)
A:sympy.geometry.tests.test_point.doubles3d->subsets(singles3d, 2)
A:sympy.geometry.tests.test_point.p3d->Point3D(1, 2, 3)
A:sympy.geometry.tests.test_point.doubles4d->subsets(singles4d, 2)
A:sympy.geometry.tests.test_point.p4d->Point(1, 2, 3, 4)
A:sympy.geometry.tests.test_point.a->Point(0, 1)
A:sympy.geometry.tests.test_point.u->Point(0.1, 0.2, evaluate=False)
A:sympy.geometry.tests.test_point.u4->Point(u, dim=4, on_morph='ignore')
sympy.geometry.tests.test_point.test_Point2D()
sympy.geometry.tests.test_point.test__normalize_dimension()
sympy.geometry.tests.test_point.test_arguments()
sympy.geometry.tests.test_point.test_concyclic_doctest_bug()
sympy.geometry.tests.test_point.test_direction_cosine()
sympy.geometry.tests.test_point.test_dot()
sympy.geometry.tests.test_point.test_issue_11617()
sympy.geometry.tests.test_point.test_issue_22684()
sympy.geometry.tests.test_point.test_issue_9214()
sympy.geometry.tests.test_point.test_point()
sympy.geometry.tests.test_point.test_point3D()
sympy.geometry.tests.test_point.test_transform()
sympy.geometry.tests.test_point.test_unit()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/bbp_pi.py----------------------------------------
A:sympy.ntheory.bbp_pi.D->_dn(n, prec)
sympy.ntheory.bbp_pi._dn(n,prec)
sympy.ntheory.bbp_pi._series(j,n,prec=14)
sympy.ntheory.bbp_pi.pi_hex_digits(n,prec=14)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/digits.py----------------------------------------
A:sympy.ntheory.digits.b->as_int(b)
A:sympy.ntheory.digits.n->as_int(n)
A:sympy.ntheory.digits.(x, r)->divmod(x, b)
A:sympy.ntheory.digits.rv->defaultdict(int, multiset(digits(n, b)).items())
sympy.ntheory.count_digits(n,b=10)
sympy.ntheory.digits(n,b=10,digits=None)
sympy.ntheory.digits.count_digits(n,b=10)
sympy.ntheory.digits.digits(n,b=10,digits=None)
sympy.ntheory.digits.is_palindromic(n,b=10)
sympy.ntheory.is_palindromic(n,b=10)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/primetest.py----------------------------------------
A:sympy.ntheory.primetest.n->as_int(n)
A:sympy.ntheory.primetest.c->pow(c, 2, n)
A:sympy.ntheory.primetest.b->abs(b)
A:sympy.ntheory.primetest.s->trailing(n + 1)
A:sympy.ntheory.primetest.base->ZZ(base)
A:sympy.ntheory.primetest.g->igcd(D, n)
A:sympy.ntheory.primetest.(D, P, Q)->_lucas_extrastrong_params(n)
A:sympy.ntheory.primetest.(U, V, Qk)->_lucas_sequence(n, P, Q, k)
A:sympy.ntheory.primetest.Qk->pow(Qk, 2, n)
A:sympy.ntheory.primetest.(l, u)->trailing(n + 1).search(n)
A:sympy.ntheory.primetest.num->sympify(num)
A:sympy.ntheory.primetest.(a, b)->sympify(num).as_real_imag()
A:sympy.ntheory.primetest.a->abs(a)
sympy.isprime(n)
sympy.ntheory.is_gaussian_prime(num)
sympy.ntheory.primetest._int_tuple(*i)
sympy.ntheory.primetest._lucas_extrastrong_params(n)
sympy.ntheory.primetest._lucas_selfridge_params(n)
sympy.ntheory.primetest._lucas_sequence(n,P,Q,k)
sympy.ntheory.primetest._test(n,base,s,t)
sympy.ntheory.primetest.is_euler_pseudoprime(n,b)
sympy.ntheory.primetest.is_extra_strong_lucas_prp(n)
sympy.ntheory.primetest.is_gaussian_prime(num)
sympy.ntheory.primetest.is_lucas_prp(n)
sympy.ntheory.primetest.is_square(n,prep=True)
sympy.ntheory.primetest.is_strong_lucas_prp(n)
sympy.ntheory.primetest.isprime(n)
sympy.ntheory.primetest.mr(n,bases)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/egyptian_fraction.py----------------------------------------
A:sympy.ntheory.egyptian_fraction.r->Rational(*r)
A:sympy.ntheory.egyptian_fraction.(x, y)->Rational(*r).as_numer_denom()
A:sympy.ntheory.egyptian_fraction.(prefix, rem)->egypt_harmonic(r)
A:sympy.ntheory.egyptian_fraction.postfix->egypt_golomb(x, y)
A:sympy.ntheory.egyptian_fraction.c->gcd(a, b)
A:sympy.ntheory.egyptian_fraction.xp->sympy.polys.ZZ.invert(int(x), int(y))
sympy.egyptian_fraction(r,algorithm='Greedy')
sympy.ntheory.egyptian_fraction.egypt_golomb(x,y)
sympy.ntheory.egyptian_fraction.egypt_graham_jewett(x,y)
sympy.ntheory.egyptian_fraction.egypt_greedy(x,y)
sympy.ntheory.egyptian_fraction.egypt_harmonic(r)
sympy.ntheory.egyptian_fraction.egypt_takenouchi(x,y)
sympy.ntheory.egyptian_fraction.egyptian_fraction(r,algorithm='Greedy')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/continued_fraction.py----------------------------------------
A:sympy.ntheory.continued_fraction.e->_sympify(a)
A:sympy.ntheory.continued_fraction.(p, d)->_sympify(a).expand().as_numer_denom()
A:sympy.ntheory.continued_fraction.b->Integer(1)
A:sympy.ntheory.continued_fraction.(p, q, d, s)->list(map(as_int, [p, q, d, s]))
A:sympy.ntheory.continued_fraction.sd->sqrt(d)
A:sympy.ntheory.continued_fraction.w->floor(-n)
A:sympy.ntheory.continued_fraction.one_f->continued_fraction(1 - f)
A:sympy.ntheory.continued_fraction.pq[p, q]->len(terms)
A:sympy.ntheory.continued_fraction.x->Dummy('x')
A:sympy.ntheory.continued_fraction.y->Dummy('y')
A:sympy.ntheory.continued_fraction.solns->solve(continued_fraction_reduce(period + [y]) - y, y)
A:sympy.ntheory.continued_fraction.rv->rv.func(*rv.args).func(*rv.args)
A:sympy.ntheory.continued_fraction.i->floor(x)
sympy.continued_fraction(a)->list
sympy.continued_fraction_convergents(cf)
sympy.continued_fraction_iterator(x)
sympy.continued_fraction_periodic(p,q,d=0,s=1)->list
sympy.continued_fraction_reduce(cf)
sympy.ntheory.continued_fraction.continued_fraction(a)->list
sympy.ntheory.continued_fraction.continued_fraction_convergents(cf)
sympy.ntheory.continued_fraction.continued_fraction_iterator(x)
sympy.ntheory.continued_fraction.continued_fraction_periodic(p,q,d=0,s=1)->list
sympy.ntheory.continued_fraction.continued_fraction_reduce(cf)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/ecm.py----------------------------------------
A:sympy.ntheory.ecm.rgen->random.Random()
A:sympy.ntheory.ecm.u->pow(self.x_cord + self.z_cord, 2, self.mod)
A:sympy.ntheory.ecm.v->pow(self.x_cord - self.z_cord, 2, self.mod)
A:sympy.ntheory.ecm.R->Q.mont_ladder(k).mont_ladder(B)
A:sympy.ntheory.ecm.Q->Q.mont_ladder(k).mont_ladder(k)
A:sympy.ntheory.ecm.n->as_int(n)
A:sympy.ntheory.ecm.D->int(sqrt(B2))
A:sympy.ntheory.ecm.sigma->random.Random().randint(6, n - 1)
A:sympy.ntheory.ecm.u_3->pow(u, 3, n)
A:sympy.ntheory.ecm.g->gcd(n, g)
A:sympy.ntheory.ecm.S[1]->Q.mont_ladder(k).mont_ladder(k).double()
A:sympy.ntheory.ecm.S[2]->Q.mont_ladder(k).mont_ladder(k).double().double()
A:sympy.ntheory.ecm.S[d]->S[d - 1].add(S[1], S[d - 2])
A:sympy.ntheory.ecm.T->Q.mont_ladder(k).mont_ladder(k).mont_ladder(B - 2 * D)
A:sympy.ntheory.ecm._factors->set()
A:sympy.ntheory.ecm.factor->_ecm_one_factor(n, B1, B2, max_curve)
A:sympy.ntheory.ecm.factors->set()
sympy.ntheory.ecm(n,B1=10000,B2=100000,max_curve=200,seed=1234)
sympy.ntheory.ecm.Point(self,x_cord,z_cord,a_24,mod)
sympy.ntheory.ecm.Point.__eq__(self,other)
sympy.ntheory.ecm.Point.add(self,Q,diff)
sympy.ntheory.ecm.Point.double(self)
sympy.ntheory.ecm.Point.mont_ladder(self,k)
sympy.ntheory.ecm._ecm_one_factor(n,B1=10000,B2=100000,max_curve=200)
sympy.ntheory.ecm.ecm(n,B1=10000,B2=100000,max_curve=200,seed=1234)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/qs.py----------------------------------------
A:sympy.ntheory.qs.rgen->random.Random()
A:sympy.ntheory.qs.log_p->round(log(prime) * 2 ** 10)
A:sympy.ntheory.qs.rand_p->random.Random().randint(start, end)
A:sympy.ntheory.qs.b->sum(B)
A:sympy.ntheory.qs.g->SievePolynomial([a * a, 2 * a * b, b * b - N], a, b)
A:sympy.ntheory.qs.fb.a_inv->mod_inverse(a, fb.prime)
A:sympy.ntheory.qs.sqrt_n->sqrt(float(N))
A:sympy.ntheory.qs.proper_factor->set()
A:sympy.ntheory.qs.v->sieve_poly.eval(x)
A:sympy.ntheory.qs.(vec, is_smooth)->_check_smoothness(v, factor_base)
A:sympy.ntheory.qs.large_prime_inv->mod_inverse(large_prime, N)
A:sympy.ntheory.qs.matrix->_build_matrix(smooth_relations)
A:sympy.ntheory.qs.row->len(matrix)
A:sympy.ntheory.qs.col->len(matrix[0])
A:sympy.ntheory.qs.(idx_1000, idx_5000, factor_base)->_generate_factor_base(prime_bound, N)
A:sympy.ntheory.qs.(ith_sieve_poly, B_array)->_initialize_first_polynomial(N, M, factor_base, idx_1000, idx_5000)
A:sympy.ntheory.qs.ith_sieve_poly->_initialize_ith_poly(N, factor_base, ith_poly, ith_sieve_poly, B_array)
A:sympy.ntheory.qs.sieve_array->_gen_sieve_array(M, factor_base)
A:sympy.ntheory.qs.(s_rel, p_f)->_trial_division_stage(N, M, factor_base, sieve_array, ith_sieve_poly, partial_relations, ERROR_TERM)
A:sympy.ntheory.qs.(dependent_row, mark, gauss_matrix)->_gauss_mod_2(matrix)
A:sympy.ntheory.qs.factor->_find_factor(dependent_row, mark, gauss_matrix, index, smooth_relations, N)
sympy.ntheory.qs(N,prime_bound,M,ERROR_TERM=25,seed=1234)
sympy.ntheory.qs.FactorBaseElem(self,prime,tmem_p,log_p)
sympy.ntheory.qs.SievePolynomial(self,modified_coeff=(),a=None,b=None)
sympy.ntheory.qs.SievePolynomial.eval(self,x)
sympy.ntheory.qs._build_matrix(smooth_relations)
sympy.ntheory.qs._check_smoothness(num,factor_base)
sympy.ntheory.qs._find_factor(dependent_rows,mark,gauss_matrix,index,smooth_relations,N)
sympy.ntheory.qs._gauss_mod_2(A)
sympy.ntheory.qs._gen_sieve_array(M,factor_base)
sympy.ntheory.qs._generate_factor_base(prime_bound,n)
sympy.ntheory.qs._initialize_first_polynomial(N,M,factor_base,idx_1000,idx_5000,seed=None)
sympy.ntheory.qs._initialize_ith_poly(N,factor_base,i,g,B)
sympy.ntheory.qs._trial_division_stage(N,M,factor_base,sieve_array,sieve_poly,partial_relations,ERROR_TERM)
sympy.ntheory.qs.qs(N,prime_bound,M,ERROR_TERM=25,seed=1234)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/residue_ntheory.py----------------------------------------
A:sympy.ntheory.residue_ntheory.factors->set(factorint(q - 1).keys())
A:sympy.ntheory.residue_ntheory.p->as_int(p)
A:sympy.ntheory.residue_ntheory.f->factorint(order)
A:sympy.ntheory.residue_ntheory.g->primitive_root(p)
A:sympy.ntheory.residue_ntheory.t->discrete_log(p, s1, h)
A:sympy.ntheory.residue_ntheory.m->perfect_power(q)
A:sympy.ntheory.residue_ntheory.s->_nthroot_mod1(s, qx, p, False)
A:sympy.ntheory.residue_ntheory.d->randint(2, p - 1)
A:sympy.ntheory.residue_ntheory.r->_nthroot_mod2(s, q, p)
A:sympy.ntheory.residue_ntheory.A->pow(a, t, p)
A:sympy.ntheory.residue_ntheory.D->pow(d, t, p)
A:sympy.ntheory.residue_ntheory.adm->pow(adm, 2 ** (s - 1 - i), p)
A:sympy.ntheory.residue_ntheory.it->sqrt_mod_iter(a, p)
A:sympy.ntheory.residue_ntheory.inf_iters->tuple((cycle(enumerate(it)) for it in iters))
A:sympy.ntheory.residue_ntheory.num_iters->len(inf_iters)
A:sympy.ntheory.residue_ntheory.(i, cur_val[p])->next(inf_iters[p])
A:sympy.ntheory.residue_ntheory.res->set()
A:sympy.ntheory.residue_ntheory.rx->_sqrt_mod_prime_power(a, px, ex)
A:sympy.ntheory.residue_ntheory.(mm, e, s)->gf_crt1(pv, ZZ)
A:sympy.ntheory.residue_ntheory.sign->pow(a, (p - 1) // 4, p)
A:sympy.ntheory.residue_ntheory.b->as_int(b)
A:sympy.ntheory.residue_ntheory.rv->_sqrt_mod_prime_power(a, p, 1)
A:sympy.ntheory.residue_ntheory.res1->_sqrt_mod_prime_power(a1, p, n - r)
A:sympy.ntheory.residue_ntheory.k->int(f // igcd(f, n))
A:sympy.ntheory.residue_ntheory.c->as_int(c)
A:sympy.ntheory.residue_ntheory.mu->multiplicity(p, a)
A:sympy.ntheory.residue_ntheory.pm->pow(p, mu)
A:sympy.ntheory.residue_ntheory.r1->pow(s, x, p)
A:sympy.ntheory.residue_ntheory.s1->pow(s, f, p)
A:sympy.ntheory.residue_ntheory.h->pow(g, (p - 1) // q, p)
A:sympy.ntheory.residue_ntheory.g2->pow(g, z * t, p)
A:sympy.ntheory.residue_ntheory.tot_roots->set()
A:sympy.ntheory.residue_ntheory.diff->diff_method(root, p)
A:sympy.ntheory.residue_ntheory.m_inv->mod_inverse(diff, p)
A:sympy.ntheory.residue_ntheory.new_roots->set()
A:sympy.ntheory.residue_ntheory.(q, r)->divmod(pa, pb)
A:sympy.ntheory.residue_ntheory.a->as_int(a)
A:sympy.ntheory.residue_ntheory.order->n_order(b, n)
A:sympy.ntheory.residue_ntheory.z->pow(z, m, n)
A:sympy.ntheory.residue_ntheory.randint->_randint(rseed)
A:sympy.ntheory.residue_ntheory.aa->randint(1, order - 1)
A:sympy.ntheory.residue_ntheory.ba->randint(1, order - 1)
A:sympy.ntheory.residue_ntheory.gj->pow(b, l[i], n)
A:sympy.ntheory.residue_ntheory.aj->pow(a * mod_inverse(gj, n), order // pi ** (j + 1), n)
A:sympy.ntheory.residue_ntheory.bj->pow(b, order // pi, n)
A:sympy.ntheory.residue_ntheory.cj->discrete_log(n, aj, bj, pi, True)
A:sympy.ntheory.residue_ntheory.(d, _)->crt([pi ** ri for (pi, ri) in f.items()], l)
A:sympy.ntheory.residue_ntheory.prime_order->isprime(order)
A:sympy.ntheory.residue_ntheory.inv_a->mod_inverse(a, p)
A:sympy.ntheory.residue_ntheory.y->sqrt_mod(b * b - 4 * a * c, 4 * a * p, all_roots=True)
A:sympy.ntheory.residue_ntheory.root->linear_congruence(2 * a, i - b, 4 * a * p)
A:sympy.ntheory.residue_ntheory.rank->len(coefficients)
A:sympy.ntheory.residue_ntheory.polynomial->Poly(expr)
A:sympy.ntheory.residue_ntheory.coefficients->_valid_expr(expr)
sympy.discrete_log(n,a,b,order=None,prime_order=None)
sympy.is_nthpow_residue(a,n,m)
sympy.is_primitive_root(a,p)
sympy.is_quad_residue(a,p)
sympy.jacobi_symbol(m,n)
sympy.legendre_symbol(a,p)
sympy.mobius(Function)
sympy.n_order(a,n)
sympy.ntheory.polynomial_congruence(expr,m)
sympy.ntheory.residue_ntheory._diff_poly(root,coefficients,p)
sympy.ntheory.residue_ntheory._discrete_log_pohlig_hellman(n,a,b,order=None)
sympy.ntheory.residue_ntheory._discrete_log_pollard_rho(n,a,b,order=None,retries=10,rseed=None)
sympy.ntheory.residue_ntheory._discrete_log_shanks_steps(n,a,b,order=None)
sympy.ntheory.residue_ntheory._discrete_log_trial_mul(n,a,b,order=None)
sympy.ntheory.residue_ntheory._help(m,prime_modulo_method,diff_method,expr_val)
sympy.ntheory.residue_ntheory._is_nthpow_residue_bign(a,n,m)
sympy.ntheory.residue_ntheory._is_nthpow_residue_bign_prime_power(a,n,p,k)
sympy.ntheory.residue_ntheory._nthroot_mod1(s,q,p,all_roots)
sympy.ntheory.residue_ntheory._nthroot_mod2(s,q,p)
sympy.ntheory.residue_ntheory._nthroot_mod_composite(a,n,m)
sympy.ntheory.residue_ntheory._polynomial_congruence_prime(coefficients,p)
sympy.ntheory.residue_ntheory._primitive_root_prime_iter(p)
sympy.ntheory.residue_ntheory._product(*iters)
sympy.ntheory.residue_ntheory._sqrt_mod1(a,p,n)
sympy.ntheory.residue_ntheory._sqrt_mod_prime_power(a,p,k)
sympy.ntheory.residue_ntheory._sqrt_mod_tonelli_shanks(a,p)
sympy.ntheory.residue_ntheory._val_poly(root,coefficients,p)
sympy.ntheory.residue_ntheory._valid_expr(expr)
sympy.ntheory.residue_ntheory.discrete_log(n,a,b,order=None,prime_order=None)
sympy.ntheory.residue_ntheory.is_nthpow_residue(a,n,m)
sympy.ntheory.residue_ntheory.is_primitive_root(a,p)
sympy.ntheory.residue_ntheory.is_quad_residue(a,p)
sympy.ntheory.residue_ntheory.jacobi_symbol(m,n)
sympy.ntheory.residue_ntheory.legendre_symbol(a,p)
sympy.ntheory.residue_ntheory.mobius(Function)
sympy.ntheory.residue_ntheory.mobius.eval(cls,n)
sympy.ntheory.residue_ntheory.n_order(a,n)
sympy.ntheory.residue_ntheory.nthroot_mod(a,n,p,all_roots=False)
sympy.ntheory.residue_ntheory.polynomial_congruence(expr,m)
sympy.ntheory.residue_ntheory.primitive_root(p)
sympy.ntheory.residue_ntheory.quadratic_congruence(a,b,c,p)
sympy.ntheory.residue_ntheory.quadratic_residues(p)->list[int]
sympy.ntheory.residue_ntheory.sqrt_mod(a,p,all_roots=False)
sympy.ntheory.residue_ntheory.sqrt_mod_iter(a,p,domain=int)
sympy.nthroot_mod(a,n,p,all_roots=False)
sympy.primitive_root(p)
sympy.quadratic_congruence(a,b,c,p)
sympy.quadratic_residues(p)->list[int]
sympy.sqrt_mod(a,p,all_roots=False)
sympy.sqrt_mod_iter(a,p,domain=int)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/multinomial.py----------------------------------------
A:sympy.ntheory.multinomial.n->as_int(n)
A:sympy.ntheory.multinomial.m->as_int(m)
A:sympy.ntheory.multinomial.mc->multinomial_coefficients(n, n)
A:sympy.ntheory.multinomial.t1->_tuple(t)
A:sympy.ntheory.multinomial.b->_tuple(filter(None, t1))
sympy.binomial_coefficients(n)
sympy.binomial_coefficients_list(n)
sympy.multinomial_coefficients(m,n)
sympy.ntheory.multinomial.binomial_coefficients(n)
sympy.ntheory.multinomial.binomial_coefficients_list(n)
sympy.ntheory.multinomial.multinomial_coefficients(m,n)
sympy.ntheory.multinomial.multinomial_coefficients_iterator(m,n,_tuple=tuple)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/modular.py----------------------------------------
A:sympy.ntheory.modular.m->list(map(as_int, m))
A:sympy.ntheory.modular.v->list(map(as_int, v))
A:sympy.ntheory.modular.result->gf_crt2(v, m, mm, e, s, ZZ)
A:sympy.ntheory.modular.mm->prod(m)
A:sympy.ntheory.modular.g->reduce(igcd, [a, b, c])
A:sympy.ntheory.modular.(inv_a, _, g)->igcdex(a, c)
A:sympy.ntheory.modular.symmetric->hint.get('symmetric', False)
A:sympy.ntheory.modular.(r, m)->list(zip(*rm))
A:sympy.ntheory.modular.rv->combine(rv, rmi)
sympy.ntheory.modular.crt(m,v,symmetric=False,check=True)
sympy.ntheory.modular.crt1(m)
sympy.ntheory.modular.crt2(m,v,mm,e,s,symmetric=False)
sympy.ntheory.modular.solve_congruence(*remainder_modulus_pairs,**hint)
sympy.ntheory.modular.symmetric_residue(a,m)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/generate.py----------------------------------------
A:sympy.ntheory.generate.self._list->_aset(2, 3, 5, 7, 11, 13)
A:sympy.ntheory.generate.self._tlist->_aset(0, 1, 1, 2, 2, 4)
A:sympy.ntheory.generate.self._mlist->_aset(0, 1, -1, -1, 0, -1)
A:sympy.ntheory.generate.n->int(n)
A:sympy.ntheory.generate.newsieve->_arange(begin, n + 1)
A:sympy.ntheory.generate.i->as_int(ith)
A:sympy.ntheory.generate.b->int(n * (log(n) + log(log(n))))
A:sympy.ntheory.generate.a->nextprime(a)
A:sympy.ntheory.generate.test->_as_int_ceiling(n)
A:sympy.ntheory.generate.(a, b)->map(int, (a, b))
A:sympy.ntheory.generate.sieve->Sieve()
A:sympy.ntheory.generate.n_primes->primepi(a - 1)
A:sympy.ntheory.generate.lim->max(lim, 0)
A:sympy.ntheory.generate.lim2->min(lim, i * i - 1)
A:sympy.ntheory.generate.pr->nextprime(pr)
A:sympy.ntheory.generate.(l, u)->Sieve().search(n)
A:sympy.ntheory.generate.p->prevprime(b)
A:sympy.ntheory.generate.nmax->int(nmax or 0)
A:sympy.ntheory.generate.hare->f(hare)
A:sympy.ntheory.generate.tortoise->f(tortoise)
sympy.Sieve(self)
sympy.composite(nth)
sympy.compositepi(n)
sympy.cycle_length(f,x0,nmax=None,values=False)
sympy.nextprime(n,ith=1)
sympy.ntheory.generate.Sieve(self)
sympy.ntheory.generate.Sieve.__contains__(self,n)
sympy.ntheory.generate.Sieve.__getitem__(self,n)
sympy.ntheory.generate.Sieve.__iter__(self)
sympy.ntheory.generate.Sieve.__repr__(self)
sympy.ntheory.generate.Sieve._reset(self,prime=None,totient=None,mobius=None)
sympy.ntheory.generate.Sieve.extend(self,n)
sympy.ntheory.generate.Sieve.extend_to_no(self,i)
sympy.ntheory.generate.Sieve.mobiusrange(self,a,b)
sympy.ntheory.generate.Sieve.primerange(self,a,b=None)
sympy.ntheory.generate.Sieve.search(self,n)
sympy.ntheory.generate.Sieve.totientrange(self,a,b)
sympy.ntheory.generate._arange(a,b)
sympy.ntheory.generate._as_int_ceiling(a)
sympy.ntheory.generate._aset(*v)
sympy.ntheory.generate._azeros(n)
sympy.ntheory.generate.composite(nth)
sympy.ntheory.generate.compositepi(n)
sympy.ntheory.generate.cycle_length(f,x0,nmax=None,values=False)
sympy.ntheory.generate.nextprime(n,ith=1)
sympy.ntheory.generate.prevprime(n)
sympy.ntheory.generate.prime(nth)
sympy.ntheory.generate.primepi(Function)
sympy.ntheory.generate.primepi.eval(cls,n)
sympy.ntheory.generate.primerange(a,b=None)
sympy.ntheory.generate.primorial(n,nth=True)
sympy.ntheory.generate.randprime(a,b)
sympy.prevprime(n)
sympy.prime(nth)
sympy.primepi(Function)
sympy.primerange(a,b=None)
sympy.primorial(n,nth=True)
sympy.randprime(a,b)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/elliptic_curve.py----------------------------------------
A:sympy.ntheory.elliptic_curve.domain->FF(modulus)
A:sympy.ntheory.elliptic_curve.(a1, a2, a3, a4, a6)->map(domain.convert, (a1, a2, a3, a4, a6))
A:sympy.ntheory.elliptic_curve.(x, y, z)->symbols('x y z')
A:sympy.ntheory.elliptic_curve.self._eq->Eq(y ** 2 * z + a1 * x * y * z + a3 * y * z ** 2, x ** 3 + a2 * x ** 2 * z + a4 * x * z ** 2 + a6 * z ** 3)
A:sympy.ntheory.elliptic_curve.all_pt->set()
A:sympy.ntheory.elliptic_curve.congruence_eq->(self._eq.lhs - self._eq.rhs).subs({self.x: x, self.z: 1})
A:sympy.ntheory.elliptic_curve.sol->polynomial_congruence(congruence_eq, char)
A:sympy.ntheory.elliptic_curve.j->int(i ** 0.5)
A:sympy.ntheory.elliptic_curve.p->self(xx, j)
A:sympy.ntheory.elliptic_curve.self.x->dom(x)
A:sympy.ntheory.elliptic_curve.self.y->dom(y)
A:sympy.ntheory.elliptic_curve.self.z->dom(z)
A:sympy.ntheory.elliptic_curve.n->as_int(n)
A:sympy.ntheory.elliptic_curve.r->self.point_at_infinity(self._curve)
sympy.ntheory.elliptic_curve.EllipticCurve(self,a4,a6,a1=0,a2=0,a3=0,modulus=0)
sympy.ntheory.elliptic_curve.EllipticCurve.__contains__(self,point)
sympy.ntheory.elliptic_curve.EllipticCurve.__repr__(self)
sympy.ntheory.elliptic_curve.EllipticCurve.characteristic(self)
sympy.ntheory.elliptic_curve.EllipticCurve.discriminant(self)
sympy.ntheory.elliptic_curve.EllipticCurve.is_singular(self)
sympy.ntheory.elliptic_curve.EllipticCurve.j_invariant(self)
sympy.ntheory.elliptic_curve.EllipticCurve.minimal(self)
sympy.ntheory.elliptic_curve.EllipticCurve.order(self)
sympy.ntheory.elliptic_curve.EllipticCurve.points(self)
sympy.ntheory.elliptic_curve.EllipticCurve.points_x(self,x)
sympy.ntheory.elliptic_curve.EllipticCurve.rank(self)
sympy.ntheory.elliptic_curve.EllipticCurve.torsion_points(self)
sympy.ntheory.elliptic_curve.EllipticCurvePoint(self,x,y,z,curve)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.__add__(self,p)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.__lt__(self,other)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.__mul__(self,n)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.__neg__(self)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.__repr__(self)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.__rmul__(self,n)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.__sub__(self,other)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.order(self)
sympy.ntheory.elliptic_curve.EllipticCurvePoint.point_at_infinity(curve)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/factor_.py----------------------------------------
A:sympy.ntheory.factor_.j->len(PERFECT)
A:sympy.ntheory.factor_.facs->factorint(r, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose)
A:sympy.ntheory.factor_.visual->bool(visual)
A:sympy.ntheory.factor_.dat->flatten(dat)
A:sympy.ntheory.factor_.n->abs(as_int(n))
A:sympy.ntheory.factor_.p->perfect_power(n, factor=False)
A:sympy.ntheory.factor_.like->min(multiplicity(p.p, n.p), multiplicity(p.q, n.q))
A:sympy.ntheory.factor_.cross->min(multiplicity(p.q, n.p), multiplicity(p.p, n.q))
A:sympy.ntheory.factor_.(n, rem)->divmod(n, p)
A:sympy.ntheory.factor_.(nnew, rem)->divmod(n, ppow)
A:sympy.ntheory.factor_.factors->factorint(n)
A:sympy.ntheory.factor_.test->defaultdict(int)
A:sympy.ntheory.factor_.test[v]->max(k, test[v])
A:sympy.ntheory.factor_.keep->set(test.values())
A:sympy.ntheory.factor_.mp->min(mp, mi // factors[i])
A:sympy.ntheory.factor_.(p, q)->abs(as_int(n)).as_numer_denom()
A:sympy.ntheory.factor_.pp->perfect_power(-n)
A:sympy.ntheory.factor_.pq->perfect_power(q, [e])
A:sympy.ntheory.factor_.logn->math.log(n, 2)
A:sympy.ntheory.factor_.candidates->reversed(candidates)
A:sympy.ntheory.factor_.e->factorint(n).pop(key)
A:sympy.ntheory.factor_.(r, ok)->integer_nthroot(n, e)
A:sympy.ntheory.factor_.rv->_antidivisors(n)
A:sympy.ntheory.factor_.(r, exact)->integer_nthroot(n, e)
A:sympy.ntheory.factor_.rE->perfect_power(m, candidates=divisors(e, generator=True))
A:sympy.ntheory.factor_.e0->primefactors(e)
A:sympy.ntheory.factor_.m->trailing(n)
A:sympy.ntheory.factor_.prng->random.Random(seed + B)
A:sympy.ntheory.factor_.U->F(U)
A:sympy.ntheory.factor_.V->random.Random(seed + B).randint(0, n - 1)
A:sympy.ntheory.factor_.g->igcd(aM - 1, n)
A:sympy.ntheory.factor_.a->random.Random(seed + B).randint(2, n - 2)
A:sympy.ntheory.factor_.aM->pow(aM, pow(p, e), n)
A:sympy.ntheory.factor_.factors0->list(factors.keys())
A:sympy.ntheory.factor_.nfactors->len(factors)
A:sympy.ntheory.factor_.mm->multiplicity(d, n)
A:sympy.ntheory.factor_.fac->factorrat(rat, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False, multiple=False)
A:sympy.ntheory.factor_.factorlist->sum(([p] * fac[p] if fac[p] > 0 else [S.One / p] * -fac[p] for (p, _) in sorted(fac.items(), key=lambda elem: elem[0] if elem[1] > 0 else 1 / elem[0])), [])
A:sympy.ntheory.factor_.factordict->factorint(n)
A:sympy.ntheory.factor_.d->factorint(key, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False)
A:sympy.ntheory.factor_.x->as_int(n.args[0])
A:sympy.ntheory.factor_.limit->int(limit)
A:sympy.ntheory.factor_.sn->str(n)
A:sympy.ntheory.factor_.small->min(small, limit or small)
A:sympy.ntheory.factor_.(n, next_p)->_factorint_small(factors, n, small, fail_max)
A:sympy.ntheory.factor_.(b, fermat)->integer_nthroot(b2, 2)
A:sympy.ntheory.factor_.ps->sorted(factordict.keys())
A:sympy.ntheory.factor_.(n, found_trial)->_trial(factors, n, ps, verbose)
A:sympy.ntheory.factor_.high_root->max(int(math.log(high_ ** 0.7)), low, 3)
A:sympy.ntheory.factor_.c->pollard_rho(n, retries=1, max_steps=max_steps, seed=high_)
A:sympy.ntheory.factor_.(n, _)->_trial(factors, n, ps, verbose=False)
A:sympy.ntheory.factor_.factor->_ecm_one_factor(n, B1, B2, num_curves)
A:sympy.ntheory.factor_.f->defaultdict(int, f)
A:sympy.ntheory.factor_.(n, r)->divmod(n, b)
A:sympy.ntheory.factor_.t->as_int(t)
A:sympy.ntheory.factor_.k->sympify(k)
A:sympy.ntheory.factor_.iknow->MERSENNE_PRIME_EXPONENTS.index(43112609)
A:sympy.ntheory.factor_.(r, b)->integer_log(n + 1, 2)
A:sympy.ntheory.factor_.(m, x)->divmod(1 + r, 4)
A:sympy.ntheory.factor_.(e, b)->integer_log(m, 2)
A:sympy.ntheory.factor_.num->abs(as_int(n))
A:sympy.ntheory.factor_.b->as_int(b)
sympy.abundance(n)
sympy.divisor_count(n,modulus=1,proper=False)
sympy.divisor_sigma(Function)
sympy.divisors(n,generator=False,proper=False)
sympy.factorint(n,limit=None,use_trial=True,use_rho=True,use_pm1=True,use_ecm=True,verbose=False,visual=None,multiple=False)
sympy.factorrat(rat,limit=None,use_trial=True,use_rho=True,use_pm1=True,verbose=False,visual=None,multiple=False)
sympy.is_abundant(n)
sympy.is_amicable(m,n)
sympy.is_deficient(n)
sympy.is_mersenne_prime(n)
sympy.is_perfect(n)
sympy.mersenne_prime_exponent(nth)
sympy.multiplicity(p,n)
sympy.ntheory.dra(n,b)
sympy.ntheory.drm(n,b)
sympy.ntheory.factor_._antidivisors(n)
sympy.ntheory.factor_._check_termination(factors,n,limitp1,use_trial,use_rho,use_pm1,verbose)
sympy.ntheory.factor_._divisors(n,proper=False)
sympy.ntheory.factor_._factorint_small(factors,n,limit,fail_max)
sympy.ntheory.factor_._ismersenneprime(n)
sympy.ntheory.factor_._isperfect(n)
sympy.ntheory.factor_._trial(factors,n,candidates,verbose=False)
sympy.ntheory.factor_._udivisors(n)
sympy.ntheory.factor_.abundance(n)
sympy.ntheory.factor_.antidivisor_count(n)
sympy.ntheory.factor_.antidivisors(n,generator=False)
sympy.ntheory.factor_.core(n,t=2)
sympy.ntheory.factor_.divisor_count(n,modulus=1,proper=False)
sympy.ntheory.factor_.divisor_sigma(Function)
sympy.ntheory.factor_.divisor_sigma.eval(cls,n,k=S.One)
sympy.ntheory.factor_.divisors(n,generator=False,proper=False)
sympy.ntheory.factor_.dra(n,b)
sympy.ntheory.factor_.drm(n,b)
sympy.ntheory.factor_.factorint(n,limit=None,use_trial=True,use_rho=True,use_pm1=True,use_ecm=True,verbose=False,visual=None,multiple=False)
sympy.ntheory.factor_.factorrat(rat,limit=None,use_trial=True,use_rho=True,use_pm1=True,verbose=False,visual=None,multiple=False)
sympy.ntheory.factor_.is_abundant(n)
sympy.ntheory.factor_.is_amicable(m,n)
sympy.ntheory.factor_.is_deficient(n)
sympy.ntheory.factor_.is_mersenne_prime(n)
sympy.ntheory.factor_.is_perfect(n)
sympy.ntheory.factor_.mersenne_prime_exponent(nth)
sympy.ntheory.factor_.multiplicity(p,n)
sympy.ntheory.factor_.multiplicity_in_factorial(p,n)
sympy.ntheory.factor_.perfect_power(n,candidates=None,big=True,factor=True)
sympy.ntheory.factor_.pollard_pm1(n,B=10,a=2,retries=0,seed=1234)
sympy.ntheory.factor_.pollard_rho(n,s=2,a=1,retries=5,seed=1234,max_steps=None,F=None)
sympy.ntheory.factor_.primefactors(n,limit=None,verbose=False)
sympy.ntheory.factor_.primenu(Function)
sympy.ntheory.factor_.primenu.eval(cls,n)
sympy.ntheory.factor_.primeomega(Function)
sympy.ntheory.factor_.primeomega.eval(cls,n)
sympy.ntheory.factor_.proper_divisor_count(n,modulus=1)
sympy.ntheory.factor_.proper_divisors(n,generator=False)
sympy.ntheory.factor_.reduced_totient(Function)
sympy.ntheory.factor_.reduced_totient._eval_is_integer(self)
sympy.ntheory.factor_.reduced_totient._from_distinct_primes(self,*args)
sympy.ntheory.factor_.reduced_totient._from_factors(self,factors)
sympy.ntheory.factor_.reduced_totient.eval(cls,n)
sympy.ntheory.factor_.smoothness(n)
sympy.ntheory.factor_.smoothness_p(n,m=-1,power=0,visual=None)
sympy.ntheory.factor_.totient(Function)
sympy.ntheory.factor_.totient._eval_is_integer(self)
sympy.ntheory.factor_.totient._from_distinct_primes(self,*args)
sympy.ntheory.factor_.totient._from_factors(self,factors)
sympy.ntheory.factor_.totient.eval(cls,n)
sympy.ntheory.factor_.trailing(n)
sympy.ntheory.factor_.udivisor_count(n)
sympy.ntheory.factor_.udivisor_sigma(Function)
sympy.ntheory.factor_.udivisor_sigma.eval(cls,n,k=S.One)
sympy.ntheory.factor_.udivisors(n,generator=False)
sympy.ntheory.multiplicity_in_factorial(p,n)
sympy.perfect_power(n,candidates=None,big=True,factor=True)
sympy.pollard_pm1(n,B=10,a=2,retries=0,seed=1234)
sympy.pollard_rho(n,s=2,a=1,retries=5,seed=1234,max_steps=None,F=None)
sympy.primefactors(n,limit=None,verbose=False)
sympy.primenu(Function)
sympy.primeomega(Function)
sympy.proper_divisor_count(n,modulus=1)
sympy.proper_divisors(n,generator=False)
sympy.reduced_totient(Function)
sympy.totient(Function)
sympy.trailing(n)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/partitions_.py----------------------------------------
A:sympy.ntheory.partitions_.pi->mpf_pi(prec)
A:sympy.ntheory.partitions_.arg->mpf_div(mpf_mul(from_int(4 * m), pi, prec), from_int(k), prec)
A:sympy.ntheory.partitions_.j->from_int(j)
A:sympy.ntheory.partitions_.a->_a(n, q, p)
A:sympy.ntheory.partitions_.b->mpf_sub(from_int(n), from_rational(1, 24, prec), prec)
A:sympy.ntheory.partitions_.c->mpf_sqrt(b, prec)
A:sympy.ntheory.partitions_.(ch, sh)->mpf_cosh_sinh(mpf_mul(a, c), prec)
A:sympy.ntheory.partitions_.D->mpf_div(mpf_sqrt(j, prec), mpf_mul(mpf_mul(sqrt8, b), pi), prec)
A:sympy.ntheory.partitions_.E->mpf_sub(mpf_mul(a, ch), mpf_div(sh, c, prec), prec)
A:sympy.ntheory.partitions_.n->int(n)
A:sympy.ntheory.partitions_.precp->int(pbits * 1.1 + 100)
A:sympy.ntheory.partitions_.M->max(6, int(0.24 * n ** 0.5 + 4))
A:sympy.ntheory.partitions_.sq23pi->mpf_mul(mpf_sqrt(from_rational(2, 3, p), p), mpf_pi(p), p)
A:sympy.ntheory.partitions_.sqrt8->mpf_sqrt(from_int(8), p)
A:sympy.ntheory.partitions_.d->_d(n, q, p, sq23pi, sqrt8)
A:sympy.ntheory.partitions_.s->mpf_add(s, mpf_mul(a, d), prec)
sympy.npartitions(n,verbose=False)
sympy.ntheory.partitions_._a(n,k,prec)
sympy.ntheory.partitions_._d(n,j,prec,sq23pi,sqrt8)
sympy.ntheory.partitions_._pre()
sympy.ntheory.partitions_.npartitions(n,verbose=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_elliptic_curve.py----------------------------------------
A:sympy.ntheory.tests.test_elliptic_curve.e3->EllipticCurve(-1, 9)
A:sympy.ntheory.tests.test_elliptic_curve.p->e3(0, 3)
A:sympy.ntheory.tests.test_elliptic_curve.q->e3(-1, 3)
sympy.ntheory.tests.test_elliptic_curve.test_elliptic_curve()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_digits.py----------------------------------------
A:sympy.ntheory.tests.test_digits.n->count_digits(123)
sympy.ntheory.tests.test_digits.test_count_digits()
sympy.ntheory.tests.test_digits.test_digits()
sympy.ntheory.tests.test_digits.test_is_palindromic()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_egyptian_fraction.py----------------------------------------
A:sympy.ntheory.tests.test_egyptian_fraction.r->random_complex_number(a=0, c=1, b=0, d=0, rational=True)
A:sympy.ntheory.tests.test_egyptian_fraction.d->egyptian_fraction(Rational(5, 3))
sympy.ntheory.tests.test_egyptian_fraction.test_egyptian_fraction()
sympy.ntheory.tests.test_egyptian_fraction.test_input()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_factor_.py----------------------------------------
A:sympy.ntheory.tests.test_factor_.seq->iter(seq.items())
A:sympy.ntheory.tests.test_factor_.n->Symbol('n', integer=True)
A:sympy.ntheory.tests.test_factor_.m->fi(d, visual=True)
A:sympy.ntheory.tests.test_factor_.p1->nextprime(2 ** 17)
A:sympy.ntheory.tests.test_factor_.p2->nextprime(2 * p1)
A:sympy.ntheory.tests.test_factor_.p3->nextprime(p2)
A:sympy.ntheory.tests.test_factor_.a->Symbol('a', prime=True)
A:sympy.ntheory.tests.test_factor_.b->Symbol('b', prime=True)
A:sympy.ntheory.tests.test_factor_.S->set(divisors(4)).union(set(divisors(Integer(2))))
A:sympy.ntheory.tests.test_factor_.x->Symbol('x', integer=False)
A:sympy.ntheory.tests.test_factor_.y->Symbol('y', positive=False)
A:sympy.ntheory.tests.test_factor_.z->Symbol('z', positive=True, integer=True)
A:sympy.ntheory.tests.test_factor_.j->Symbol('j', integer=True, positive=True)
A:sympy.ntheory.tests.test_factor_.k->Symbol('k', integer=True)
A:sympy.ntheory.tests.test_factor_.forty2->factorint(42, visual=True)
A:sympy.ntheory.tests.test_factor_.d->fi(n)
A:sympy.ntheory.tests.test_factor_.t->sm(n)
A:sympy.ntheory.tests.test_factor_.s->sm(t)
sympy.ntheory.tests.test_factor_.fac_multiplicity(n,p)
sympy.ntheory.tests.test_factor_.multiproduct(seq=(),start=1)
sympy.ntheory.tests.test_factor_.test_antidivisor_count()
sympy.ntheory.tests.test_factor_.test_antidivisors()
sympy.ntheory.tests.test_factor_.test_core()
sympy.ntheory.tests.test_factor_.test_divisor_count()
sympy.ntheory.tests.test_factor_.test_divisor_sigma()
sympy.ntheory.tests.test_factor_.test_divisors()
sympy.ntheory.tests.test_factor_.test_divisors_and_divisor_count()
sympy.ntheory.tests.test_factor_.test_dra()
sympy.ntheory.tests.test_factor_.test_drm()
sympy.ntheory.tests.test_factor_.test_factorint()
sympy.ntheory.tests.test_factor_.test_factorrat()
sympy.ntheory.tests.test_factor_.test_is_abundant()
sympy.ntheory.tests.test_factor_.test_is_amicable()
sympy.ntheory.tests.test_factor_.test_is_deficient()
sympy.ntheory.tests.test_factor_.test_is_mersenne_prime()
sympy.ntheory.tests.test_factor_.test_is_perfect()
sympy.ntheory.tests.test_factor_.test_issue_4356()
sympy.ntheory.tests.test_factor_.test_issue_6981()
sympy.ntheory.tests.test_factor_.test_mersenne_prime_exponent()
sympy.ntheory.tests.test_factor_.test_multiplicity()
sympy.ntheory.tests.test_factor_.test_multiplicity_in_factorial()
sympy.ntheory.tests.test_factor_.test_perfect_power()
sympy.ntheory.tests.test_factor_.test_primenu()
sympy.ntheory.tests.test_factor_.test_primeomega()
sympy.ntheory.tests.test_factor_.test_proper_divisor_count()
sympy.ntheory.tests.test_factor_.test_proper_divisors()
sympy.ntheory.tests.test_factor_.test_proper_divisors_and_proper_divisor_count()
sympy.ntheory.tests.test_factor_.test_reduced_totient()
sympy.ntheory.tests.test_factor_.test_smoothness_and_smoothness_p()
sympy.ntheory.tests.test_factor_.test_totient()
sympy.ntheory.tests.test_factor_.test_trailing_bitcount()
sympy.ntheory.tests.test_factor_.test_udivisor_sigma()
sympy.ntheory.tests.test_factor_.test_udivisors_and_udivisor_count()
sympy.ntheory.tests.test_factor_.test_visual_factorint()
sympy.ntheory.tests.test_factor_.test_visual_io()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_continued_fraction.py----------------------------------------
A:sympy.ntheory.tests.test_continued_fraction.t->sqrt(2)
sympy.ntheory.tests.test_continued_fraction.test_continued_fraction()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_ecm.py----------------------------------------
A:sympy.ntheory.tests.test_ecm.p1->Point(10, 17, a_24, mod)
A:sympy.ntheory.tests.test_ecm.p2->Point(10, 17, a_24, mod).double()
A:sympy.ntheory.tests.test_ecm.p4->Point(10, 17, a_24, mod).double().double()
A:sympy.ntheory.tests.test_ecm.p8->Point(10, 17, a_24, mod).double().double().double()
A:sympy.ntheory.tests.test_ecm.p16->Point(10, 17, a_24, mod).double().double().double().double()
A:sympy.ntheory.tests.test_ecm.p32->Point(10, 17, a_24, mod).double().double().double().double().double()
A:sympy.ntheory.tests.test_ecm.p3->Point(10, 17, a_24, mod).double().add(p1, p1)
A:sympy.ntheory.tests.test_ecm.p5->Point(10, 17, a_24, mod).double().add(p1, p1).add(p2, p1)
A:sympy.ntheory.tests.test_ecm.p6->Point(10, 17, a_24, mod).double().add(p1, p1).double()
A:sympy.ntheory.tests.test_ecm.p7->Point(10, 17, a_24, mod).double().add(p1, p1).add(p2, p1).add(p2, p3)
A:sympy.ntheory.tests.test_ecm.p9->Point(10, 17, a_24, mod).double().add(p1, p1).add(p2, p1).add(p4, p1)
sympy.ntheory.tests.test_ecm.test_Point()
sympy.ntheory.tests.test_ecm.test_ecm()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_modular.py----------------------------------------
A:sympy.ntheory.tests.test_modular.(mm, e, s)->crt1(m)
sympy.ntheory.tests.test_modular.test_crt()
sympy.ntheory.tests.test_modular.test_modular()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_primetest.py----------------------------------------
A:sympy.ntheory.tests.test_primetest.s->Sieve()
A:sympy.ntheory.tests.test_primetest.ps->set(s.primerange(2, 100001))
sympy.ntheory.tests.test_primetest.test_euler_pseudoprimes()
sympy.ntheory.tests.test_primetest.test_is_extra_strong_lucas_prp()
sympy.ntheory.tests.test_primetest.test_is_gaussianprime()
sympy.ntheory.tests.test_primetest.test_is_square()
sympy.ntheory.tests.test_primetest.test_isprime()
sympy.ntheory.tests.test_primetest.test_prps()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_generate.py----------------------------------------
A:sympy.ntheory.tests.test_generate.n->Symbol('n')
A:sympy.ntheory.tests.test_generate.r->Symbol('r', real=True)
A:sympy.ntheory.tests.test_generate.s->Sieve()
A:sympy.ntheory.tests.test_generate.A->list(s.primerange(i, i + j))
A:sympy.ntheory.tests.test_generate.B->list(primerange(i, i + j))
A:sympy.ntheory.tests.test_generate.p->randprime(a, a + b)
sympy.ntheory.tests.test_generate.test_composite()
sympy.ntheory.tests.test_generate.test_compositepi()
sympy.ntheory.tests.test_generate.test_generate()
sympy.ntheory.tests.test_generate.test_prime()
sympy.ntheory.tests.test_generate.test_primepi()
sympy.ntheory.tests.test_generate.test_primorial()
sympy.ntheory.tests.test_generate.test_randprime()
sympy.ntheory.tests.test_generate.test_search()
sympy.ntheory.tests.test_generate.test_sieve_iter()
sympy.ntheory.tests.test_generate.test_sieve_repr()
sympy.ntheory.tests.test_generate.test_sieve_slice()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_bbp_pi.py----------------------------------------
A:sympy.ntheory.tests.test_bbp_pi.dig->''.join('\n3243f6a8885a308d313198a2e03707344a4093822299f31d0082efa98ec4e6c89452821e638d013\n77be5466cf34e90c6cc0ac29b7c97c50dd3f84d5b5b54709179216d5d98979fb1bd1310ba698dfb5\nac2ffd72dbd01adfb7b8e1afed6a267e96ba7c9045f12c7f9924a19947b3916cf70801f2e2858efc\n16636920d871574e69a458fea3f4933d7e0d95748f728eb658718bcd5882154aee7b54a41dc25a59\nb59c30d5392af26013c5d1b023286085f0ca417918b8db38ef8e79dcb0603a180e6c9e0e8bb01e8a\n3ed71577c1bd314b2778af2fda55605c60e65525f3aa55ab945748986263e8144055ca396a2aab10\nb6b4cc5c341141e8cea15486af7c72e993b3ee1411636fbc2a2ba9c55d741831f6ce5c3e169b8793\n1eafd6ba336c24cf5c7a325381289586773b8f48986b4bb9afc4bfe81b6628219361d809ccfb21a9\n91487cac605dec8032ef845d5de98575b1dc262302eb651b8823893e81d396acc50f6d6ff383f442\n392e0b4482a484200469c8f04a9e1f9b5e21c66842f6e96c9a670c9c61abd388f06a51a0d2d8542f\n68960fa728ab5133a36eef0b6c137a3be4ba3bf0507efb2a98a1f1651d39af017666ca593e82430e\n888cee8619456f9fb47d84a5c33b8b5ebee06f75d885c12073401a449f56c16aa64ed3aa62363f77\n061bfedf72429b023d37d0d724d00a1248db0fead349f1c09b075372c980991b7b25d479d8f6e8de\nf7e3fe501ab6794c3b976ce0bd04c006bac1a94fb6409f60c45e5c9ec2196a246368fb6faf3e6c53\nb51339b2eb3b52ec6f6dfc511f9b30952ccc814544af5ebd09bee3d004de334afd660f2807192e4b\nb3c0cba85745c8740fd20b5f39b9d3fbdb5579c0bd1a60320ad6a100c6402c7279679f25fefb1fa3\ncc8ea5e9f8db3222f83c7516dffd616b152f501ec8ad0552ab323db5fafd23876053317b483e00df\n829e5c57bbca6f8ca01a87562edf1769dbd542a8f6287effc3ac6732c68c4f5573695b27b0bbca58\nc8e1ffa35db8f011a010fa3d98fd2183b84afcb56c2dd1d35b9a53e479b6f84565d28e49bc4bfb97\n90e1ddf2daa4cb7e3362fb1341cee4c6e8ef20cada36774c01d07e9efe2bf11fb495dbda4dae9091\n98eaad8e716b93d5a0d08ed1d0afc725e08e3c5b2f8e7594b78ff6e2fbf2122b648888b812900df0\n1c4fad5ea0688fc31cd1cff191b3a8c1ad2f2f2218be0e1777ea752dfe8b021fa1e5a0cc0fb56f74\ne818acf3d6ce89e299b4a84fe0fd13e0b77cc43b81d2ada8d9165fa2668095770593cc7314211a14\n77e6ad206577b5fa86c75442f5fb9d35cfebcdaf0c7b3e89a0d6411bd3ae1e7e4900250e2d2071b3\n5e226800bb57b8e0af2464369bf009b91e5563911d59dfa6aa78c14389d95a537f207d5ba202e5b9\nc5832603766295cfa911c819684e734a41b3472dca7b14a94a1b5100529a532915d60f573fbc9bc6\ne42b60a47681e6740008ba6fb5571be91ff296ec6b2a0dd915b6636521e7b9f9b6ff34052ec58556\n6453b02d5da99f8fa108ba47996e85076a4b7a70e9b5b32944db75092ec4192623ad6ea6b049a7df\n7d9cee60b88fedb266ecaa8c71699a17ff5664526cc2b19ee1193602a575094c29a0591340e4183a\n3e3f54989a5b429d656b8fe4d699f73fd6a1d29c07efe830f54d2d38e6f0255dc14cdd20868470eb\n266382e9c6021ecc5e09686b3f3ebaefc93c9718146b6a70a1687f358452a0e286b79c5305aa5007\n373e07841c7fdeae5c8e7d44ec5716f2b8b03ada37f0500c0df01c1f040200b3ffae0cf51a3cb574\nb225837a58dc0921bdd19113f97ca92ff69432477322f547013ae5e58137c2dadcc8b576349af3dd\na7a94461460fd0030eecc8c73ea4751e41e238cd993bea0e2f3280bba1183eb3314e548b384f6db9\n086f420d03f60a04bf2cb8129024977c795679b072bcaf89afde9a771fd9930810b38bae12dccf3f\n2e5512721f2e6b7124501adde69f84cd877a5847187408da17bc9f9abce94b7d8cec7aec3adb851d\nfa63094366c464c3d2ef1c18473215d908dd433b3724c2ba1612a14d432a65c45150940002133ae4\ndd71dff89e10314e5581ac77d65f11199b043556f1d7a3c76b3c11183b5924a509f28fe6ed97f1fb\nfa9ebabf2c1e153c6e86e34570eae96fb1860e5e0a5a3e2ab3771fe71c4e3d06fa2965dcb999e71d\n0f803e89d65266c8252e4cc9789c10b36ac6150eba94e2ea78a5fc3c531e0a2df4f2f74ea7361d2b\n3d1939260f19c279605223a708f71312b6ebadfe6eeac31f66e3bc4595a67bc883b17f37d1018cff\n28c332ddefbe6c5aa56558218568ab9802eecea50fdb2f953b2aef7dad5b6e2f841521b628290761\n70ecdd4775619f151013cca830eb61bd960334fe1eaa0363cfb5735c904c70a239d59e9e0bcbaade\n14eecc86bc60622ca79cab5cabb2f3846e648b1eaf19bdf0caa02369b9655abb5040685a323c2ab4\nb3319ee9d5c021b8f79b540b19875fa09995f7997e623d7da8f837889a97e32d7711ed935f166812\n810e358829c7e61fd696dedfa17858ba9957f584a51b2272639b83c3ff1ac24696cdb30aeb532e30\n548fd948e46dbc312858ebf2ef34c6ffeafe28ed61ee7c3c735d4a14d9e864b7e342105d14203e13\ne045eee2b6a3aaabeadb6c4f15facb4fd0c742f442ef6abbb5654f3b1d41cd2105d81e799e86854d\nc7e44b476a3d816250cf62a1f25b8d2646fc8883a0c1c7b6a37f1524c369cb749247848a0b5692b2\n85095bbf00ad19489d1462b17423820e0058428d2a0c55f5ea1dadf43e233f70613372f0928d937e\n41d65fecf16c223bdb7cde3759cbee74604085f2a7ce77326ea607808419f8509ee8efd85561d997\n35a969a7aac50c06c25a04abfc800bcadc9e447a2ec3453484fdd567050e1e9ec9db73dbd3105588\ncd675fda79e3674340c5c43465713e38d83d28f89ef16dff20153e21e78fb03d4ae6e39f2bdb83ad\nf7e93d5a68948140f7f64c261c94692934411520f77602d4f7bcf46b2ed4a20068d40824713320f4\n6a43b7d4b7500061af1e39f62e9724454614214f74bf8b88404d95fc1d96b591af70f4ddd366a02f\n45bfbc09ec03bd97857fac6dd031cb850496eb27b355fd3941da2547e6abca0a9a28507825530429\nf40a2c86dae9b66dfb68dc1462d7486900680ec0a427a18dee4f3ffea2e887ad8cb58ce0067af4d6\nb6aace1e7cd3375fecce78a399406b2a4220fe9e35d9f385b9ee39d7ab3b124e8b1dc9faf74b6d18\n5626a36631eae397b23a6efa74dd5b43326841e7f7ca7820fbfb0af54ed8feb397454056acba4895\n2755533a3a20838d87fe6ba9b7d096954b55a867bca1159a58cca9296399e1db33a62a4a563f3125\nf95ef47e1c9029317cfdf8e80204272f7080bb155c05282ce395c11548e4c66d2248c1133fc70f86\ndc07f9c9ee41041f0f404779a45d886e17325f51ebd59bc0d1f2bcc18f41113564257b7834602a9c\n60dff8e8a31f636c1b0e12b4c202e1329eaf664fd1cad181156b2395e0333e92e13b240b62eebeb9\n2285b2a20ee6ba0d99de720c8c2da2f728d012784595b794fd647d0862e7ccf5f05449a36f877d48\nfac39dfd27f33e8d1e0a476341992eff743a6f6eabf4f8fd37a812dc60a1ebddf8991be14cdb6e6b\n0dc67b55106d672c372765d43bdcd0e804f1290dc7cc00ffa3b5390f92690fed0b667b9ffbcedb7d\n9ca091cf0bd9155ea3bb132f88515bad247b9479bf763bd6eb37392eb3cc1159798026e297f42e31\n2d6842ada7c66a2b3b12754ccc782ef11c6a124237b79251e706a1bbe64bfb63501a6b101811caed\nfa3d25bdd8e2e1c3c9444216590a121386d90cec6ed5abea2a64af674eda86a85fbebfe98864e4c3\nfe9dbc8057f0f7c08660787bf86003604dd1fd8346f6381fb07745ae04d736fccc83426b33f01eab\n71b08041873c005e5f77a057bebde8ae2455464299bf582e614e58f48ff2ddfda2f474ef388789bd\nc25366f9c3c8b38e74b475f25546fcd9b97aeb26618b1ddf84846a0e79915f95e2466e598e20b457\n708cd55591c902de4cb90bace1bb8205d011a862487574a99eb77f19b6e0a9dc09662d09a1c43246\n33e85a1f0209f0be8c4a99a0251d6efe101ab93d1d0ba5a4dfa186f20f2868f169dcb7da83573906\nfea1e2ce9b4fcd7f5250115e01a70683faa002b5c40de6d0279af88c27773f8641c3604c0661a806\nb5f0177a28c0f586e0006058aa30dc7d6211e69ed72338ea6353c2dd94c2c21634bbcbee5690bcb6\ndeebfc7da1ce591d766f05e4094b7c018839720a3d7c927c2486e3725f724d9db91ac15bb4d39eb8\nfced54557808fca5b5d83d7cd34dad0fc41e50ef5eb161e6f8a28514d96c51133c6fd5c7e756e14e\nc4362abfceddc6c837d79a323492638212670efa8e406000e03a39ce37d3faf5cfabc277375ac52d\n1b5cb0679e4fa33742d382274099bc9bbed5118e9dbf0f7315d62d1c7ec700c47bb78c1b6b21a190\n45b26eb1be6a366eb45748ab2fbc946e79c6a376d26549c2c8530ff8ee468dde7dd5730a1d4cd04d\nc62939bbdba9ba4650ac9526e8be5ee304a1fad5f06a2d519a63ef8ce29a86ee22c089c2b843242e\nf6a51e03aa9cf2d0a483c061ba9be96a4d8fe51550ba645bd62826a2f9a73a3ae14ba99586ef5562\ne9c72fefd3f752f7da3f046f6977fa0a5980e4a91587b086019b09e6ad3b3ee593e990fd5a9e34d7\n972cf0b7d9022b8b5196d5ac3a017da67dd1cf3ed67c7d2d281f9f25cfadf2b89b5ad6b4725a88f5\n4ce029ac71e019a5e647b0acfded93fa9be8d3c48d283b57ccf8d5662979132e28785f0191ed7560\n55f7960e44e3d35e8c15056dd488f46dba03a161250564f0bdc3eb9e153c9057a297271aeca93a07\n2a1b3f6d9b1e6321f5f59c66fb26dcf3197533d928b155fdf5035634828aba3cbb28517711c20ad9\nf8abcc5167ccad925f4de817513830dc8e379d58629320f991ea7a90c2fb3e7bce5121ce64774fbe\n32a8b6e37ec3293d4648de53696413e680a2ae0810dd6db22469852dfd09072166b39a460a6445c0\ndd586cdecf1c20c8ae5bbef7dd1b588d40ccd2017f6bb4e3bbdda26a7e3a59ff453e350a44bcb4cd\nd572eacea8fa6484bb8d6612aebf3c6f47d29be463542f5d9eaec2771bf64e6370740e0d8de75b13\n57f8721671af537d5d4040cb084eb4e2cc34d2466a0115af84e1b0042895983a1d06b89fb4ce6ea0\n486f3f3b823520ab82011a1d4b277227f8611560b1e7933fdcbb3a792b344525bda08839e151ce79\n4b2f32c9b7a01fbac9e01cc87ebcc7d1f6cf0111c3a1e8aac71a908749d44fbd9ad0dadecbd50ada\n380339c32ac69136678df9317ce0b12b4ff79e59b743f5bb3af2d519ff27d9459cbf97222c15e6fc\n2a0f91fc719b941525fae59361ceb69cebc2a8645912baa8d1b6c1075ee3056a0c10d25065cb03a4\n42e0ec6e0e1698db3b4c98a0be3278e9649f1f9532e0d392dfd3a0342b8971f21e1b0a74414ba334\n8cc5be7120c37632d8df359f8d9b992f2ee60b6f470fe3f11de54cda541edad891ce6279cfcd3e7e\n6f1618b166fd2c1d05848fd2c5f6fb2299f523f357a632762393a8353156cccd02acf081625a75eb\nb56e16369788d273ccde96629281b949d04c50901b71c65614e6c6c7bd327a140a45e1d006c3f27b\n9ac9aa53fd62a80f00bb25bfe235bdd2f671126905b2040222b6cbcf7ccd769c2b53113ec01640e3\nd338abbd602547adf0ba38209cf746ce7677afa1c52075606085cbfe4e8ae88dd87aaaf9b04cf9aa\n7e1948c25c02fb8a8c01c36ae4d6ebe1f990d4f869a65cdea03f09252dc208e69fb74e6132ce77e2\n5b578fdfe33ac372e6'.split())
A:sympy.ntheory.tests.test_bbp_pi.n->randint(0, len(dig))
A:sympy.ntheory.tests.test_bbp_pi.prec->randint(0, len(dig) - n)
sympy.ntheory.tests.test_bbp_pi.test_hex_pi_nth_digits()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_multinomial.py----------------------------------------
A:sympy.ntheory.tests.test_multinomial.c->binomial_coefficients(n)
A:sympy.ntheory.tests.test_multinomial.mc->multinomial_coefficients(3, 3)
A:sympy.ntheory.tests.test_multinomial.it->multinomial_coefficients_iterator(7, 2)
sympy.ntheory.tests.test_multinomial.test_binomial_coefficients()
sympy.ntheory.tests.test_multinomial.test_binomial_coefficients_list()
sympy.ntheory.tests.test_multinomial.test_multinomial_coefficients()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_qs.py----------------------------------------
A:sympy.ntheory.tests.test_qs.sieve_poly->SievePolynomial([100, 1600, -10009195707], 10, 80)
A:sympy.ntheory.tests.test_qs.(idx_1000, idx_5000, factor_base)->_generate_factor_base(2000, n)
A:sympy.ntheory.tests.test_qs.(g, B)->_initialize_first_polynomial(n, M, factor_base, idx_1000, idx_5000, seed=0)
A:sympy.ntheory.tests.test_qs.g_1->_initialize_ith_poly(n, factor_base, 1, g, B)
A:sympy.ntheory.tests.test_qs.sieve_array->_gen_sieve_array(M, factor_base)
A:sympy.ntheory.tests.test_qs.(smooth_relation, partial_relation)->_trial_division_stage(n, M, factor_base, sieve_array, sieve_poly, partial_relations, ERROR_TERM=25 * 2 ** 10)
A:sympy.ntheory.tests.test_qs.matrix->_build_matrix(smooth_relations)
A:sympy.ntheory.tests.test_qs.(dependent_row, mark, gauss_matrix)->_gauss_mod_2(matrix)
A:sympy.ntheory.tests.test_qs.factor->_find_factor(dependent_row, mark, gauss_matrix, 0, smooth_relations, N)
sympy.ntheory.tests.test_qs.test_qs_1()
sympy.ntheory.tests.test_qs.test_qs_2()->None
sympy.ntheory.tests.test_qs.test_qs_3()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_residue.py----------------------------------------
A:sympy.ntheory.tests.test_residue.it->sqrt_mod_iter(a, p)
A:sympy.ntheory.tests.test_residue.d->defaultdict(list)
A:sympy.ntheory.tests.test_residue.v->sorted(v)
A:sympy.ntheory.tests.test_residue.r->nthroot_mod(a, q, p)
A:sympy.ntheory.tests.test_residue.qv->range(3, p, 4)
A:sympy.ntheory.tests.test_residue.res->nthroot_mod(a, q, p, True)
A:sympy.ntheory.tests.test_residue.p->Symbol('p', integer=True, positive=True, prime=True)
A:sympy.ntheory.tests.test_residue.x->Symbol('x', positive=True)
A:sympy.ntheory.tests.test_residue.i->Symbol('i', integer=True)
sympy.ntheory.tests.test_residue.test_residue()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/ntheory/tests/test_partitions.py----------------------------------------
sympy.ntheory.tests.test_partitions.test_partitions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/polynomials.py----------------------------------------
A:sympy.functions.special.polynomials._x->Dummy('x')
A:sympy.functions.special.polynomials.k->Dummy('k')
A:sympy.functions.special.polynomials._ortho_poly->staticmethod(laguerre_poly)
A:sympy.functions.special.polynomials.P->legendre_poly(n, _x, polys=True).diff((_x, m))
sympy.functions.special.assoc_laguerre(OrthogonalPolynomial)
sympy.functions.special.assoc_legendre(Function)
sympy.functions.special.chebyshevt(OrthogonalPolynomial)
sympy.functions.special.chebyshevt_root(Function)
sympy.functions.special.chebyshevu(OrthogonalPolynomial)
sympy.functions.special.chebyshevu_root(Function)
sympy.functions.special.gegenbauer(OrthogonalPolynomial)
sympy.functions.special.hermite(OrthogonalPolynomial)
sympy.functions.special.hermite_prob(OrthogonalPolynomial)
sympy.functions.special.jacobi(OrthogonalPolynomial)
sympy.functions.special.jacobi_normalized(n,a,b,x)
sympy.functions.special.laguerre(OrthogonalPolynomial)
sympy.functions.special.legendre(OrthogonalPolynomial)
sympy.functions.special.polynomials.OrthogonalPolynomial(Function)
sympy.functions.special.polynomials.OrthogonalPolynomial._eval_at_order(cls,n,x)
sympy.functions.special.polynomials.OrthogonalPolynomial._eval_conjugate(self)
sympy.functions.special.polynomials.assoc_laguerre(OrthogonalPolynomial)
sympy.functions.special.polynomials.assoc_laguerre._eval_conjugate(self)
sympy.functions.special.polynomials.assoc_laguerre._eval_rewrite_as_Sum(self,n,alpha,x,**kwargs)
sympy.functions.special.polynomials.assoc_laguerre._eval_rewrite_as_polynomial(self,n,alpha,x,**kwargs)
sympy.functions.special.polynomials.assoc_laguerre.eval(cls,n,alpha,x)
sympy.functions.special.polynomials.assoc_laguerre.fdiff(self,argindex=3)
sympy.functions.special.polynomials.assoc_legendre(Function)
sympy.functions.special.polynomials.assoc_legendre._eval_at_order(cls,n,m)
sympy.functions.special.polynomials.assoc_legendre._eval_conjugate(self)
sympy.functions.special.polynomials.assoc_legendre._eval_rewrite_as_Sum(self,n,m,x,**kwargs)
sympy.functions.special.polynomials.assoc_legendre._eval_rewrite_as_polynomial(self,n,m,x,**kwargs)
sympy.functions.special.polynomials.assoc_legendre.eval(cls,n,m,x)
sympy.functions.special.polynomials.assoc_legendre.fdiff(self,argindex=3)
sympy.functions.special.polynomials.chebyshevt(OrthogonalPolynomial)
sympy.functions.special.polynomials.chebyshevt._eval_rewrite_as_Sum(self,n,x,**kwargs)
sympy.functions.special.polynomials.chebyshevt._eval_rewrite_as_polynomial(self,n,x,**kwargs)
sympy.functions.special.polynomials.chebyshevt.eval(cls,n,x)
sympy.functions.special.polynomials.chebyshevt.fdiff(self,argindex=2)
sympy.functions.special.polynomials.chebyshevt_root(Function)
sympy.functions.special.polynomials.chebyshevt_root.eval(cls,n,k)
sympy.functions.special.polynomials.chebyshevu(OrthogonalPolynomial)
sympy.functions.special.polynomials.chebyshevu._eval_rewrite_as_Sum(self,n,x,**kwargs)
sympy.functions.special.polynomials.chebyshevu._eval_rewrite_as_polynomial(self,n,x,**kwargs)
sympy.functions.special.polynomials.chebyshevu.eval(cls,n,x)
sympy.functions.special.polynomials.chebyshevu.fdiff(self,argindex=2)
sympy.functions.special.polynomials.chebyshevu_root(Function)
sympy.functions.special.polynomials.chebyshevu_root.eval(cls,n,k)
sympy.functions.special.polynomials.gegenbauer(OrthogonalPolynomial)
sympy.functions.special.polynomials.gegenbauer._eval_conjugate(self)
sympy.functions.special.polynomials.gegenbauer._eval_rewrite_as_Sum(self,n,a,x,**kwargs)
sympy.functions.special.polynomials.gegenbauer._eval_rewrite_as_polynomial(self,n,a,x,**kwargs)
sympy.functions.special.polynomials.gegenbauer.eval(cls,n,a,x)
sympy.functions.special.polynomials.gegenbauer.fdiff(self,argindex=3)
sympy.functions.special.polynomials.hermite(OrthogonalPolynomial)
sympy.functions.special.polynomials.hermite._eval_rewrite_as_Sum(self,n,x,**kwargs)
sympy.functions.special.polynomials.hermite._eval_rewrite_as_hermite_prob(self,n,x,**kwargs)
sympy.functions.special.polynomials.hermite._eval_rewrite_as_polynomial(self,n,x,**kwargs)
sympy.functions.special.polynomials.hermite.eval(cls,n,x)
sympy.functions.special.polynomials.hermite.fdiff(self,argindex=2)
sympy.functions.special.polynomials.hermite_prob(OrthogonalPolynomial)
sympy.functions.special.polynomials.hermite_prob._eval_rewrite_as_Sum(self,n,x,**kwargs)
sympy.functions.special.polynomials.hermite_prob._eval_rewrite_as_hermite(self,n,x,**kwargs)
sympy.functions.special.polynomials.hermite_prob._eval_rewrite_as_polynomial(self,n,x,**kwargs)
sympy.functions.special.polynomials.hermite_prob.eval(cls,n,x)
sympy.functions.special.polynomials.hermite_prob.fdiff(self,argindex=2)
sympy.functions.special.polynomials.jacobi(OrthogonalPolynomial)
sympy.functions.special.polynomials.jacobi._eval_conjugate(self)
sympy.functions.special.polynomials.jacobi._eval_rewrite_as_Sum(self,n,a,b,x,**kwargs)
sympy.functions.special.polynomials.jacobi._eval_rewrite_as_polynomial(self,n,a,b,x,**kwargs)
sympy.functions.special.polynomials.jacobi.eval(cls,n,a,b,x)
sympy.functions.special.polynomials.jacobi.fdiff(self,argindex=4)
sympy.functions.special.polynomials.jacobi_normalized(n,a,b,x)
sympy.functions.special.polynomials.laguerre(OrthogonalPolynomial)
sympy.functions.special.polynomials.laguerre._eval_rewrite_as_Sum(self,n,x,**kwargs)
sympy.functions.special.polynomials.laguerre._eval_rewrite_as_polynomial(self,n,x,**kwargs)
sympy.functions.special.polynomials.laguerre.eval(cls,n,x)
sympy.functions.special.polynomials.laguerre.fdiff(self,argindex=2)
sympy.functions.special.polynomials.legendre(OrthogonalPolynomial)
sympy.functions.special.polynomials.legendre._eval_rewrite_as_Sum(self,n,x,**kwargs)
sympy.functions.special.polynomials.legendre._eval_rewrite_as_polynomial(self,n,x,**kwargs)
sympy.functions.special.polynomials.legendre.eval(cls,n,x)
sympy.functions.special.polynomials.legendre.fdiff(self,argindex=2)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/delta_functions.py----------------------------------------
A:sympy.functions.special.delta_functions.(c, nc)->arg.args_cnc()
A:sympy.functions.special.delta_functions.wrt->free.pop()
A:sympy.functions.special.delta_functions.argroots->roots(self.args[0], wrt)
A:sympy.functions.special.delta_functions.darg->abs(diff(self.args[0], wrt))
A:sympy.functions.special.delta_functions.p->self.args[0].as_poly(x)
A:sympy.functions.special.delta_functions.x->free.pop()
A:sympy.functions.special.delta_functions.pw1->Piecewise(((sign(arg) + 1) / 2, Ne(arg, 0)), (Heaviside(0, H0=H0), True))
A:sympy.functions.special.delta_functions.pw2->Piecewise(((sign(arg) + 1) / 2, Eq(Heaviside(0, H0=H0), S.Half)), (pw1, True))
sympy.functions.special.DiracDelta(Function)
sympy.functions.special.Heaviside(cls,arg,H0=S.Half,**options)
sympy.functions.special.delta_functions.DiracDelta(Function)
sympy.functions.special.delta_functions.DiracDelta._eval_expand_diracdelta(self,**hints)
sympy.functions.special.delta_functions.DiracDelta._eval_rewrite_as_Piecewise(self,*args,**kwargs)
sympy.functions.special.delta_functions.DiracDelta._eval_rewrite_as_SingularityFunction(self,*args,**kwargs)
sympy.functions.special.delta_functions.DiracDelta.eval(cls,arg,k=S.Zero)
sympy.functions.special.delta_functions.DiracDelta.fdiff(self,argindex=1)
sympy.functions.special.delta_functions.DiracDelta.is_simple(self,x)
sympy.functions.special.delta_functions.Heaviside(cls,arg,H0=S.Half,**options)
sympy.functions.special.delta_functions.Heaviside._eval_rewrite_as_Piecewise(self,arg,H0=None,**kwargs)
sympy.functions.special.delta_functions.Heaviside._eval_rewrite_as_SingularityFunction(self,args,H0=S.Half,**kwargs)
sympy.functions.special.delta_functions.Heaviside._eval_rewrite_as_sign(self,arg,H0=S.Half,**kwargs)
sympy.functions.special.delta_functions.Heaviside.eval(cls,arg,H0=S.Half)
sympy.functions.special.delta_functions.Heaviside.fdiff(self,argindex=1)
sympy.functions.special.delta_functions.Heaviside.pargs(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/gamma_functions.py----------------------------------------
A:sympy.functions.special.gamma_functions.x->Dummy('x')
A:sympy.functions.special.gamma_functions.(coeff, tail)->arg.as_coeff_add()
A:sympy.functions.special.gamma_functions.intpart->floor(coeff)
A:sympy.functions.special.gamma_functions.tail->Add(*[Pow(z - i, e) for i in range(1, int(coeff) + 1)])
A:sympy.functions.special.gamma_functions.x0->self.args[0].limit(x, 0)
A:sympy.functions.special.gamma_functions.(nx, n)->self.args[1]._to_mpmath(prec + 12).extract_branch_factor()
A:sympy.functions.special.gamma_functions.nx->unpolarify(z)
A:sympy.functions.special.gamma_functions.a->self.args[0]._to_mpmath(prec)
A:sympy.functions.special.gamma_functions.z->self.args[1]._to_mpmath(prec + 12)
A:sympy.functions.special.gamma_functions.res->mpmath.mp.polygamma(s, z)
A:sympy.functions.special.gamma_functions.args_merom->fuzzy_and([z._eval_is_meromorphic(x, a), s._eval_is_meromorphic(x, a)])
A:sympy.functions.special.gamma_functions.z0->self.args[1]._to_mpmath(prec + 12).subs(x, a)
A:sympy.functions.special.gamma_functions.s0->self.args[0]._to_mpmath(prec + 12).subs(x, a)
A:sympy.functions.special.gamma_functions.sum_expr->sum((z ** k / rf(s, k + 1) for k in range(n - 1)))
A:sympy.functions.special.gamma_functions.o->Order(1 / z ** n, x)
A:sympy.functions.special.gamma_functions.(p, q)->self.args[1]._to_mpmath(prec + 12).as_numer_denom()
A:sympy.functions.special.gamma_functions.nz->unpolarify(z)
A:sympy.functions.special.gamma_functions.is_negative_integer->fuzzy_and([z.is_negative, z.is_integer])
A:sympy.functions.special.gamma_functions.(coeff, z)->self.args[1]._to_mpmath(prec + 12).as_two_terms()
A:sympy.functions.special.gamma_functions.n->floor(1 - z)
A:sympy.functions.special.gamma_functions.s->self.args[0]._to_mpmath(prec + 12)
A:sympy.functions.special.gamma_functions.dzt->mpmath.mp.zeta(s + 1, z, 1)
A:sympy.functions.special.gamma_functions.m->ceiling((n + 1) // 2)
A:sympy.functions.special.gamma_functions.fac->gamma(N)
A:sympy.functions.special.gamma_functions.zt->mpmath.mp.zeta(s + 1, z)
A:sympy.functions.special.gamma_functions.k->Dummy('k')
A:sympy.functions.special.gamma_functions.f->self._eval_rewrite_as_intractable(*self.args)
A:sympy.functions.special.gamma_functions.nprec->prec_to_dps(prec)
A:sympy.functions.special.gamma_functions.as_polygamma->self.rewrite(polygamma)
sympy.functions.special.digamma(Function)
sympy.functions.special.gamma(Function)
sympy.functions.special.gamma_functions.digamma(Function)
sympy.functions.special.gamma_functions.digamma._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.gamma_functions.digamma._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.gamma_functions.digamma._eval_evalf(self,prec)
sympy.functions.special.gamma_functions.digamma._eval_expand_func(self,**hints)
sympy.functions.special.gamma_functions.digamma._eval_is_negative(self)
sympy.functions.special.gamma_functions.digamma._eval_is_positive(self)
sympy.functions.special.gamma_functions.digamma._eval_is_real(self)
sympy.functions.special.gamma_functions.digamma._eval_rewrite_as_harmonic(self,z,**kwargs)
sympy.functions.special.gamma_functions.digamma._eval_rewrite_as_polygamma(self,z,**kwargs)
sympy.functions.special.gamma_functions.digamma.eval(cls,z)
sympy.functions.special.gamma_functions.digamma.fdiff(self,argindex=1)
sympy.functions.special.gamma_functions.gamma(Function)
sympy.functions.special.gamma_functions.gamma._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.gamma_functions.gamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.gamma._eval_expand_func(self,**hints)
sympy.functions.special.gamma_functions.gamma._eval_is_positive(self)
sympy.functions.special.gamma_functions.gamma._eval_is_real(self)
sympy.functions.special.gamma_functions.gamma._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.gamma_functions.gamma._eval_rewrite_as_factorial(self,z,**kwargs)
sympy.functions.special.gamma_functions.gamma._eval_rewrite_as_tractable(self,z,limitvar=None,**kwargs)
sympy.functions.special.gamma_functions.gamma.eval(cls,arg)
sympy.functions.special.gamma_functions.gamma.fdiff(self,argindex=1)
sympy.functions.special.gamma_functions.intlike(n)
sympy.functions.special.gamma_functions.loggamma(Function)
sympy.functions.special.gamma_functions.loggamma._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.gamma_functions.loggamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.loggamma._eval_expand_func(self,**hints)
sympy.functions.special.gamma_functions.loggamma._eval_is_real(self)
sympy.functions.special.gamma_functions.loggamma._eval_nseries(self,x,n,logx=None,cdir=0)
sympy.functions.special.gamma_functions.loggamma._eval_rewrite_as_intractable(self,z,**kwargs)
sympy.functions.special.gamma_functions.loggamma.eval(cls,z)
sympy.functions.special.gamma_functions.loggamma.fdiff(self,argindex=1)
sympy.functions.special.gamma_functions.lowergamma(Function)
sympy.functions.special.gamma_functions.lowergamma._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.gamma_functions.lowergamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.lowergamma._eval_evalf(self,prec)
sympy.functions.special.gamma_functions.lowergamma._eval_is_meromorphic(self,x,a)
sympy.functions.special.gamma_functions.lowergamma._eval_is_zero(self)
sympy.functions.special.gamma_functions.lowergamma._eval_rewrite_as_expint(self,s,x,**kwargs)
sympy.functions.special.gamma_functions.lowergamma._eval_rewrite_as_uppergamma(self,s,x,**kwargs)
sympy.functions.special.gamma_functions.lowergamma.eval(cls,a,x)
sympy.functions.special.gamma_functions.lowergamma.fdiff(self,argindex=2)
sympy.functions.special.gamma_functions.multigamma(Function)
sympy.functions.special.gamma_functions.multigamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.multigamma._eval_is_real(self)
sympy.functions.special.gamma_functions.multigamma.eval(cls,x,p)
sympy.functions.special.gamma_functions.multigamma.fdiff(self,argindex=2)
sympy.functions.special.gamma_functions.polygamma(Function)
sympy.functions.special.gamma_functions.polygamma._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.gamma_functions.polygamma._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.gamma_functions.polygamma._eval_evalf(self,prec)
sympy.functions.special.gamma_functions.polygamma._eval_expand_func(self,**hints)
sympy.functions.special.gamma_functions.polygamma._eval_is_complex(self)
sympy.functions.special.gamma_functions.polygamma._eval_is_negative(self)
sympy.functions.special.gamma_functions.polygamma._eval_is_positive(self)
sympy.functions.special.gamma_functions.polygamma._eval_is_real(self)
sympy.functions.special.gamma_functions.polygamma._eval_rewrite_as_harmonic(self,n,z,**kwargs)
sympy.functions.special.gamma_functions.polygamma._eval_rewrite_as_zeta(self,n,z,**kwargs)
sympy.functions.special.gamma_functions.polygamma.eval(cls,n,z)
sympy.functions.special.gamma_functions.polygamma.fdiff(self,argindex=2)
sympy.functions.special.gamma_functions.trigamma(Function)
sympy.functions.special.gamma_functions.trigamma._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.gamma_functions.trigamma._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.gamma_functions.trigamma._eval_evalf(self,prec)
sympy.functions.special.gamma_functions.trigamma._eval_expand_func(self,**hints)
sympy.functions.special.gamma_functions.trigamma._eval_is_negative(self)
sympy.functions.special.gamma_functions.trigamma._eval_is_positive(self)
sympy.functions.special.gamma_functions.trigamma._eval_is_real(self)
sympy.functions.special.gamma_functions.trigamma._eval_rewrite_as_harmonic(self,z,**kwargs)
sympy.functions.special.gamma_functions.trigamma._eval_rewrite_as_polygamma(self,z,**kwargs)
sympy.functions.special.gamma_functions.trigamma._eval_rewrite_as_zeta(self,z,**kwargs)
sympy.functions.special.gamma_functions.trigamma.eval(cls,z)
sympy.functions.special.gamma_functions.trigamma.fdiff(self,argindex=1)
sympy.functions.special.gamma_functions.uppergamma(Function)
sympy.functions.special.gamma_functions.uppergamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.uppergamma._eval_evalf(self,prec)
sympy.functions.special.gamma_functions.uppergamma._eval_is_meromorphic(self,x,a)
sympy.functions.special.gamma_functions.uppergamma._eval_rewrite_as_expint(self,s,x,**kwargs)
sympy.functions.special.gamma_functions.uppergamma._eval_rewrite_as_lowergamma(self,s,x,**kwargs)
sympy.functions.special.gamma_functions.uppergamma._eval_rewrite_as_tractable(self,s,x,**kwargs)
sympy.functions.special.gamma_functions.uppergamma.eval(cls,a,z)
sympy.functions.special.gamma_functions.uppergamma.fdiff(self,argindex=2)
sympy.functions.special.loggamma(Function)
sympy.functions.special.lowergamma(Function)
sympy.functions.special.multigamma(Function)
sympy.functions.special.polygamma(Function)
sympy.functions.special.trigamma(Function)
sympy.functions.special.uppergamma(Function)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/bessel.py----------------------------------------
A:sympy.functions.special.bessel.z0->symbs.pop().subs(x, a)
A:sympy.functions.special.bessel.newz->unpolarify(z)
A:sympy.functions.special.bessel.(newz, n)->symbs.pop().extract_branch_factor()
A:sympy.functions.special.bessel.nnu->unpolarify(nu)
A:sympy.functions.special.bessel.arg->Add(*[term_one, term_two, term_three]).as_leading_term(x, logx=logx)
A:sympy.functions.special.bessel.(c, e)->Add(*[term_one, term_two, term_three]).as_leading_term(x, logx=logx).as_coeff_exponent(x)
A:sympy.functions.special.bessel.(_, exp)->symbs.pop().leadterm(x)
A:sympy.functions.special.bessel.newn->ceiling(n / exp)
A:sympy.functions.special.bessel.o->Order(x ** n, x)
A:sympy.functions.special.bessel.r->(z / 2)._eval_nseries(x, n, logx, cdir).removeO()
A:sympy.functions.special.bessel.t->(_mexpand(r ** 2) + o).removeO()
A:sympy.functions.special.bessel.term->(_mexpand(term) + o).removeO()
A:sympy.functions.special.bessel.aj->self._eval_rewrite_as_besselj(*self.args)
A:sympy.functions.special.bessel.bn->besseli(nu, z)
A:sympy.functions.special.bessel.a->Pow(z, Rational(3, 2))
A:sympy.functions.special.bessel.p->(_mexpand(p) + o).removeO()
A:sympy.functions.special.bessel.ai->self._eval_rewrite_as_besseli(*self.args)
A:sympy.functions.special.bessel.ay->self._eval_rewrite_as_bessely(*self.args)
A:sympy.functions.special.bessel.(_, e)->Add(*[term_one, term_two, term_three]).as_leading_term(x, logx=logx).as_coeff_exponent(x)
A:sympy.functions.special.bessel.prec->dps_to_prec(dps)
A:sympy.functions.special.bessel.root->solver(f, root + math_pi)
A:sympy.functions.special.bessel.zc->symbs.pop().conjugate()
A:sympy.functions.special.bessel.(re_part, im_part)->self.as_real_imag(deep=deep, **hints)
A:sympy.functions.special.bessel.x->kwargs.get('x', Dummy('x'))
A:sympy.functions.special.bessel.ot->Rational(1, 3)
A:sympy.functions.special.bessel.tt->Rational(2, 3)
A:sympy.functions.special.bessel.z->symbs.pop()
A:sympy.functions.special.bessel.c->Wild('c', exclude=[z])
A:sympy.functions.special.bessel.d->Wild('d', exclude=[z])
A:sympy.functions.special.bessel.m->Wild('m', exclude=[z])
A:sympy.functions.special.bessel.n->Wild('n', exclude=[z])
A:sympy.functions.special.bessel.M->Add(*[term_one, term_two, term_three]).as_leading_term(x, logx=logx).match(c * (d * z ** n) ** m)
A:sympy.functions.special.bessel.b->Pow(a, tt)
A:sympy.functions.special.bessel.res->mpmath.mp.airybi(z, derivative=1)
A:sympy.functions.special.bessel.k->kwargs.get('k', Dummy('k'))
A:sympy.functions.special.bessel.s->sum([besseli(i, a ** 2) for i in range(1, m)])
sympy.functions.special.airyai(AiryBase)
sympy.functions.special.airyaiprime(AiryBase)
sympy.functions.special.airybi(AiryBase)
sympy.functions.special.airybiprime(AiryBase)
sympy.functions.special.bessel.AiryBase(Function)
sympy.functions.special.bessel.AiryBase._eval_conjugate(self)
sympy.functions.special.bessel.AiryBase._eval_expand_complex(self,deep=True,**hints)
sympy.functions.special.bessel.AiryBase._eval_is_extended_real(self)
sympy.functions.special.bessel.AiryBase.as_real_imag(self,deep=True,**hints)
sympy.functions.special.bessel.BesselBase(Function)
sympy.functions.special.bessel.BesselBase._eval_conjugate(self)
sympy.functions.special.bessel.BesselBase._eval_expand_func(self,**hints)
sympy.functions.special.bessel.BesselBase._eval_is_meromorphic(self,x,a)
sympy.functions.special.bessel.BesselBase._eval_simplify(self,**kwargs)
sympy.functions.special.bessel.BesselBase.argument(self)
sympy.functions.special.bessel.BesselBase.eval(cls,nu,z)
sympy.functions.special.bessel.BesselBase.fdiff(self,argindex=2)
sympy.functions.special.bessel.BesselBase.order(self)
sympy.functions.special.bessel.SphericalBesselBase(BesselBase)
sympy.functions.special.bessel.SphericalBesselBase._eval_expand_func(self,**hints)
sympy.functions.special.bessel.SphericalBesselBase._expand(self,**hints)
sympy.functions.special.bessel.SphericalBesselBase.fdiff(self,argindex=2)
sympy.functions.special.bessel.SphericalHankelBase(SphericalBesselBase)
sympy.functions.special.bessel.SphericalHankelBase._eval_evalf(self,prec)
sympy.functions.special.bessel.SphericalHankelBase._eval_expand_func(self,**hints)
sympy.functions.special.bessel.SphericalHankelBase._eval_rewrite_as_besselj(self,nu,z,**kwargs)
sympy.functions.special.bessel.SphericalHankelBase._eval_rewrite_as_bessely(self,nu,z,**kwargs)
sympy.functions.special.bessel.SphericalHankelBase._eval_rewrite_as_jn(self,nu,z,**kwargs)
sympy.functions.special.bessel.SphericalHankelBase._eval_rewrite_as_yn(self,nu,z,**kwargs)
sympy.functions.special.bessel.SphericalHankelBase._expand(self,**hints)
sympy.functions.special.bessel._jn(n,z)
sympy.functions.special.bessel._yn(n,z)
sympy.functions.special.bessel.airyai(AiryBase)
sympy.functions.special.bessel.airyai._eval_expand_func(self,**hints)
sympy.functions.special.bessel.airyai._eval_rewrite_as_besseli(self,z,**kwargs)
sympy.functions.special.bessel.airyai._eval_rewrite_as_besselj(self,z,**kwargs)
sympy.functions.special.bessel.airyai._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.bessel.airyai.eval(cls,arg)
sympy.functions.special.bessel.airyai.fdiff(self,argindex=1)
sympy.functions.special.bessel.airyai.taylor_term(n,x,*previous_terms)
sympy.functions.special.bessel.airyaiprime(AiryBase)
sympy.functions.special.bessel.airyaiprime._eval_evalf(self,prec)
sympy.functions.special.bessel.airyaiprime._eval_expand_func(self,**hints)
sympy.functions.special.bessel.airyaiprime._eval_rewrite_as_besseli(self,z,**kwargs)
sympy.functions.special.bessel.airyaiprime._eval_rewrite_as_besselj(self,z,**kwargs)
sympy.functions.special.bessel.airyaiprime._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.bessel.airyaiprime.eval(cls,arg)
sympy.functions.special.bessel.airyaiprime.fdiff(self,argindex=1)
sympy.functions.special.bessel.airybi(AiryBase)
sympy.functions.special.bessel.airybi._eval_expand_func(self,**hints)
sympy.functions.special.bessel.airybi._eval_rewrite_as_besseli(self,z,**kwargs)
sympy.functions.special.bessel.airybi._eval_rewrite_as_besselj(self,z,**kwargs)
sympy.functions.special.bessel.airybi._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.bessel.airybi.eval(cls,arg)
sympy.functions.special.bessel.airybi.fdiff(self,argindex=1)
sympy.functions.special.bessel.airybi.taylor_term(n,x,*previous_terms)
sympy.functions.special.bessel.airybiprime(AiryBase)
sympy.functions.special.bessel.airybiprime._eval_evalf(self,prec)
sympy.functions.special.bessel.airybiprime._eval_expand_func(self,**hints)
sympy.functions.special.bessel.airybiprime._eval_rewrite_as_besseli(self,z,**kwargs)
sympy.functions.special.bessel.airybiprime._eval_rewrite_as_besselj(self,z,**kwargs)
sympy.functions.special.bessel.airybiprime._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.bessel.airybiprime.eval(cls,arg)
sympy.functions.special.bessel.airybiprime.fdiff(self,argindex=1)
sympy.functions.special.bessel.assume_integer_order(fn)
sympy.functions.special.bessel.besseli(BesselBase)
sympy.functions.special.bessel.besseli._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.bessel.besseli._eval_is_extended_real(self)
sympy.functions.special.bessel.besseli._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.bessel.besseli._eval_rewrite_as_besselj(self,nu,z,**kwargs)
sympy.functions.special.bessel.besseli._eval_rewrite_as_bessely(self,nu,z,**kwargs)
sympy.functions.special.bessel.besseli._eval_rewrite_as_jn(self,nu,z,**kwargs)
sympy.functions.special.bessel.besseli.eval(cls,nu,z)
sympy.functions.special.bessel.besselj(BesselBase)
sympy.functions.special.bessel.besselj._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.bessel.besselj._eval_is_extended_real(self)
sympy.functions.special.bessel.besselj._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.bessel.besselj._eval_rewrite_as_besseli(self,nu,z,**kwargs)
sympy.functions.special.bessel.besselj._eval_rewrite_as_bessely(self,nu,z,**kwargs)
sympy.functions.special.bessel.besselj._eval_rewrite_as_jn(self,nu,z,**kwargs)
sympy.functions.special.bessel.besselj.eval(cls,nu,z)
sympy.functions.special.bessel.besselk(BesselBase)
sympy.functions.special.bessel.besselk._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.bessel.besselk._eval_is_extended_real(self)
sympy.functions.special.bessel.besselk._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.bessel.besselk._eval_rewrite_as_besseli(self,nu,z,**kwargs)
sympy.functions.special.bessel.besselk._eval_rewrite_as_besselj(self,nu,z,**kwargs)
sympy.functions.special.bessel.besselk._eval_rewrite_as_bessely(self,nu,z,**kwargs)
sympy.functions.special.bessel.besselk._eval_rewrite_as_yn(self,nu,z,**kwargs)
sympy.functions.special.bessel.besselk.eval(cls,nu,z)
sympy.functions.special.bessel.bessely(BesselBase)
sympy.functions.special.bessel.bessely._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.bessel.bessely._eval_is_extended_real(self)
sympy.functions.special.bessel.bessely._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.bessel.bessely._eval_rewrite_as_besseli(self,nu,z,**kwargs)
sympy.functions.special.bessel.bessely._eval_rewrite_as_besselj(self,nu,z,**kwargs)
sympy.functions.special.bessel.bessely._eval_rewrite_as_yn(self,nu,z,**kwargs)
sympy.functions.special.bessel.bessely.eval(cls,nu,z)
sympy.functions.special.bessel.hankel1(BesselBase)
sympy.functions.special.bessel.hankel1._eval_conjugate(self)
sympy.functions.special.bessel.hankel2(BesselBase)
sympy.functions.special.bessel.hankel2._eval_conjugate(self)
sympy.functions.special.bessel.hn1(SphericalHankelBase)
sympy.functions.special.bessel.hn1._eval_rewrite_as_hankel1(self,nu,z,**kwargs)
sympy.functions.special.bessel.hn2(SphericalHankelBase)
sympy.functions.special.bessel.hn2._eval_rewrite_as_hankel2(self,nu,z,**kwargs)
sympy.functions.special.bessel.jn(SphericalBesselBase)
sympy.functions.special.bessel.jn._eval_evalf(self,prec)
sympy.functions.special.bessel.jn._eval_rewrite_as_besselj(self,nu,z,**kwargs)
sympy.functions.special.bessel.jn._eval_rewrite_as_bessely(self,nu,z,**kwargs)
sympy.functions.special.bessel.jn._eval_rewrite_as_yn(self,nu,z,**kwargs)
sympy.functions.special.bessel.jn._expand(self,**hints)
sympy.functions.special.bessel.jn.eval(cls,nu,z)
sympy.functions.special.bessel.jn_zeros(n,k,method='sympy',dps=15)
sympy.functions.special.bessel.marcumq(Function)
sympy.functions.special.bessel.marcumq._eval_is_zero(self)
sympy.functions.special.bessel.marcumq._eval_rewrite_as_Integral(self,m,a,b,**kwargs)
sympy.functions.special.bessel.marcumq._eval_rewrite_as_Sum(self,m,a,b,**kwargs)
sympy.functions.special.bessel.marcumq._eval_rewrite_as_besseli(self,m,a,b,**kwargs)
sympy.functions.special.bessel.marcumq.eval(cls,m,a,b)
sympy.functions.special.bessel.marcumq.fdiff(self,argindex=2)
sympy.functions.special.bessel.yn(SphericalBesselBase)
sympy.functions.special.bessel.yn._eval_evalf(self,prec)
sympy.functions.special.bessel.yn._eval_rewrite_as_besselj(self,nu,z,**kwargs)
sympy.functions.special.bessel.yn._eval_rewrite_as_bessely(self,nu,z,**kwargs)
sympy.functions.special.bessel.yn._eval_rewrite_as_jn(self,nu,z,**kwargs)
sympy.functions.special.bessel.yn._expand(self,**hints)
sympy.functions.special.besseli(BesselBase)
sympy.functions.special.besselj(BesselBase)
sympy.functions.special.besselk(BesselBase)
sympy.functions.special.bessely(BesselBase)
sympy.functions.special.hankel1(BesselBase)
sympy.functions.special.hankel2(BesselBase)
sympy.functions.special.hn1(SphericalHankelBase)
sympy.functions.special.hn2(SphericalHankelBase)
sympy.functions.special.jn(SphericalBesselBase)
sympy.functions.special.jn_zeros(n,k,method='sympy',dps=15)
sympy.functions.special.marcumq(Function)
sympy.functions.special.yn(SphericalBesselBase)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/error_functions.py----------------------------------------
A:sympy.functions.special.error_functions.(x, y)->self.args[0].as_real_imag()
A:sympy.functions.special.error_functions.t->point.extract_multiplicatively(I)
A:sympy.functions.special.error_functions.x->sympify(x)
A:sympy.functions.special.error_functions.k->floor((n - 1) / S(2))
A:sympy.functions.special.error_functions.lim->limit(z, limitvar, S.Infinity)
A:sympy.functions.special.error_functions.arg->self.args[0].as_leading_term(x, logx=logx, cdir=cdir)
A:sympy.functions.special.error_functions.arg0->self.args[0].as_leading_term(x, logx=logx, cdir=cdir).limit(x, 0, dir='-' if re(cdir).is_negative else '+')
A:sympy.functions.special.error_functions.(_, ex)->z.leadterm(x)
A:sympy.functions.special.error_functions.newn->ceiling(n / ex)
A:sympy.functions.special.error_functions.nz->newarg.extract_multiplicatively(I)
A:sympy.functions.special.error_functions.sign_x->sympify(x).could_extract_minus_sign()
A:sympy.functions.special.error_functions.sign_y->y.could_extract_minus_sign()
A:sympy.functions.special.error_functions.(nz, n)->z.extract_branch_factor()
A:sympy.functions.special.error_functions.x0->self.args[0].limit(x, 0)
A:sympy.functions.special.error_functions.cdir->self.args[0].as_leading_term(x, logx=logx, cdir=cdir).dir(x, cdir)
A:sympy.functions.special.error_functions.(c, e)->self.args[0].as_leading_term(x, logx=logx, cdir=cdir).as_coeff_exponent(x)
A:sympy.functions.special.error_functions.f->self._eval_rewrite_as_intractable(*self.args)
A:sympy.functions.special.error_functions.nu2->unpolarify(nu)
A:sympy.functions.special.error_functions.(z, n)->z.extract_branch_factor()
A:sympy.functions.special.error_functions.baseseries->baseseries.replace(Pow, lambda t, n: t ** n / n, simultaneous=False).replace(Pow, lambda t, n: t ** n / n, simultaneous=False)
A:sympy.functions.special.error_functions.o->Order(1 / z ** (n + 1), x)
sympy.functions.special.Chi(TrigonometricIntegral)
sympy.functions.special.Ci(TrigonometricIntegral)
sympy.functions.special.E1(z)
sympy.functions.special.Ei(Function)
sympy.functions.special.Li(Function)
sympy.functions.special.Shi(TrigonometricIntegral)
sympy.functions.special.Si(TrigonometricIntegral)
sympy.functions.special.erf(Function)
sympy.functions.special.erf2(Function)
sympy.functions.special.erf2inv(Function)
sympy.functions.special.erfc(Function)
sympy.functions.special.erfcinv(Function)
sympy.functions.special.erfi(Function)
sympy.functions.special.erfinv(Function)
sympy.functions.special.error_functions.Chi(TrigonometricIntegral)
sympy.functions.special.error_functions.Chi._Ifactor(cls,z,sign)
sympy.functions.special.error_functions.Chi._atinf(cls)
sympy.functions.special.error_functions.Chi._atneginf(cls)
sympy.functions.special.error_functions.Chi._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.Chi._eval_rewrite_as_expint(self,z,**kwargs)
sympy.functions.special.error_functions.Chi._minusfactor(cls,z)
sympy.functions.special.error_functions.Ci(TrigonometricIntegral)
sympy.functions.special.error_functions.Ci._Ifactor(cls,z,sign)
sympy.functions.special.error_functions.Ci._atinf(cls)
sympy.functions.special.error_functions.Ci._atneginf(cls)
sympy.functions.special.error_functions.Ci._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.Ci._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.Ci._eval_rewrite_as_expint(self,z,**kwargs)
sympy.functions.special.error_functions.Ci._minusfactor(cls,z)
sympy.functions.special.error_functions.E1(z)
sympy.functions.special.error_functions.Ei(Function)
sympy.functions.special.error_functions.Ei._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.Ei._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.Ei._eval_evalf(self,prec)
sympy.functions.special.error_functions.Ei._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_Si(self,z,**kwargs)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_expint(self,z,**kwargs)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_li(self,z,**kwargs)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_tractable(self,z,limitvar=None,**kwargs)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_uppergamma(self,z,**kwargs)
sympy.functions.special.error_functions.Ei.eval(cls,z)
sympy.functions.special.error_functions.Ei.fdiff(self,argindex=1)
sympy.functions.special.error_functions.FresnelIntegral(Function)
sympy.functions.special.error_functions.FresnelIntegral._eval_conjugate(self)
sympy.functions.special.error_functions.FresnelIntegral._eval_is_extended_real(self)
sympy.functions.special.error_functions.FresnelIntegral._eval_is_zero(self)
sympy.functions.special.error_functions.FresnelIntegral.eval(cls,z)
sympy.functions.special.error_functions.FresnelIntegral.fdiff(self,argindex=1)
sympy.functions.special.error_functions.Li(Function)
sympy.functions.special.error_functions.Li._eval_evalf(self,prec)
sympy.functions.special.error_functions.Li._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.error_functions.Li._eval_rewrite_as_li(self,z,**kwargs)
sympy.functions.special.error_functions.Li._eval_rewrite_as_tractable(self,z,limitvar=None,**kwargs)
sympy.functions.special.error_functions.Li.eval(cls,z)
sympy.functions.special.error_functions.Li.fdiff(self,argindex=1)
sympy.functions.special.error_functions.Shi(TrigonometricIntegral)
sympy.functions.special.error_functions.Shi._Ifactor(cls,z,sign)
sympy.functions.special.error_functions.Shi._atinf(cls)
sympy.functions.special.error_functions.Shi._atneginf(cls)
sympy.functions.special.error_functions.Shi._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.Shi._eval_is_zero(self)
sympy.functions.special.error_functions.Shi._eval_rewrite_as_expint(self,z,**kwargs)
sympy.functions.special.error_functions.Shi._minusfactor(cls,z)
sympy.functions.special.error_functions.Si(TrigonometricIntegral)
sympy.functions.special.error_functions.Si._Ifactor(cls,z,sign)
sympy.functions.special.error_functions.Si._atinf(cls)
sympy.functions.special.error_functions.Si._atneginf(cls)
sympy.functions.special.error_functions.Si._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.Si._eval_is_zero(self)
sympy.functions.special.error_functions.Si._eval_rewrite_as_expint(self,z,**kwargs)
sympy.functions.special.error_functions.Si._eval_rewrite_as_sinc(self,z,**kwargs)
sympy.functions.special.error_functions.Si._minusfactor(cls,z)
sympy.functions.special.error_functions.TrigonometricIntegral(Function)
sympy.functions.special.error_functions.TrigonometricIntegral._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.error_functions.TrigonometricIntegral._eval_rewrite_as_Ei(self,z,**kwargs)
sympy.functions.special.error_functions.TrigonometricIntegral._eval_rewrite_as_uppergamma(self,z,**kwargs)
sympy.functions.special.error_functions.TrigonometricIntegral.eval(cls,z)
sympy.functions.special.error_functions.TrigonometricIntegral.fdiff(self,argindex=1)
sympy.functions.special.error_functions._eis(Function)
sympy.functions.special.error_functions._eis._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions._eis._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions._eis._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.error_functions._eis._eval_rewrite_as_intractable(self,z,**kwargs)
sympy.functions.special.error_functions._eis.fdiff(self,argindex=1)
sympy.functions.special.error_functions._erfs(Function)
sympy.functions.special.error_functions._erfs._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions._erfs._eval_rewrite_as_intractable(self,z,**kwargs)
sympy.functions.special.error_functions._erfs.eval(cls,arg)
sympy.functions.special.error_functions._erfs.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erf(Function)
sympy.functions.special.error_functions.erf._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.erf._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.erf._eval_conjugate(self)
sympy.functions.special.error_functions.erf._eval_is_finite(self)
sympy.functions.special.error_functions.erf._eval_is_real(self)
sympy.functions.special.error_functions.erf._eval_is_zero(self)
sympy.functions.special.error_functions.erf._eval_rewrite_as_erfc(self,z,**kwargs)
sympy.functions.special.error_functions.erf._eval_rewrite_as_erfi(self,z,**kwargs)
sympy.functions.special.error_functions.erf._eval_rewrite_as_expint(self,z,**kwargs)
sympy.functions.special.error_functions.erf._eval_rewrite_as_fresnelc(self,z,**kwargs)
sympy.functions.special.error_functions.erf._eval_rewrite_as_fresnels(self,z,**kwargs)
sympy.functions.special.error_functions.erf._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.error_functions.erf._eval_rewrite_as_meijerg(self,z,**kwargs)
sympy.functions.special.error_functions.erf._eval_rewrite_as_tractable(self,z,limitvar=None,**kwargs)
sympy.functions.special.error_functions.erf._eval_rewrite_as_uppergamma(self,z,**kwargs)
sympy.functions.special.error_functions.erf.eval(cls,arg)
sympy.functions.special.error_functions.erf.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erf.inverse(self,argindex=1)
sympy.functions.special.error_functions.erf.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.erf2(Function)
sympy.functions.special.error_functions.erf2._eval_conjugate(self)
sympy.functions.special.error_functions.erf2._eval_expand_func(self,**hints)
sympy.functions.special.error_functions.erf2._eval_is_extended_real(self)
sympy.functions.special.error_functions.erf2._eval_is_zero(self)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_erf(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_erfc(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_erfi(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_expint(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_fresnelc(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_fresnels(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_hyper(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_meijerg(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_uppergamma(self,x,y,**kwargs)
sympy.functions.special.error_functions.erf2.eval(cls,x,y)
sympy.functions.special.error_functions.erf2.fdiff(self,argindex)
sympy.functions.special.error_functions.erf2inv(Function)
sympy.functions.special.error_functions.erf2inv._eval_is_zero(self)
sympy.functions.special.error_functions.erf2inv.eval(cls,x,y)
sympy.functions.special.error_functions.erf2inv.fdiff(self,argindex)
sympy.functions.special.error_functions.erfc(Function)
sympy.functions.special.error_functions.erfc._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.erfc._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.erfc._eval_conjugate(self)
sympy.functions.special.error_functions.erfc._eval_expand_func(self,**hints)
sympy.functions.special.error_functions.erfc._eval_is_real(self)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_erf(self,z,**kwargs)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_erfi(self,z,**kwargs)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_expint(self,z,**kwargs)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_fresnelc(self,z,**kwargs)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_fresnels(self,z,**kwargs)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_meijerg(self,z,**kwargs)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_tractable(self,z,limitvar=None,**kwargs)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_uppergamma(self,z,**kwargs)
sympy.functions.special.error_functions.erfc.eval(cls,arg)
sympy.functions.special.error_functions.erfc.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erfc.inverse(self,argindex=1)
sympy.functions.special.error_functions.erfc.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.erfcinv(Function)
sympy.functions.special.error_functions.erfcinv._eval_is_infinite(self)
sympy.functions.special.error_functions.erfcinv._eval_is_zero(self)
sympy.functions.special.error_functions.erfcinv._eval_rewrite_as_erfinv(self,z,**kwargs)
sympy.functions.special.error_functions.erfcinv.eval(cls,z)
sympy.functions.special.error_functions.erfcinv.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erfcinv.inverse(self,argindex=1)
sympy.functions.special.error_functions.erfi(Function)
sympy.functions.special.error_functions.erfi._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.erfi._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.erfi._eval_conjugate(self)
sympy.functions.special.error_functions.erfi._eval_expand_func(self,**hints)
sympy.functions.special.error_functions.erfi._eval_is_extended_real(self)
sympy.functions.special.error_functions.erfi._eval_is_zero(self)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_erf(self,z,**kwargs)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_erfc(self,z,**kwargs)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_expint(self,z,**kwargs)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_fresnelc(self,z,**kwargs)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_fresnels(self,z,**kwargs)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_meijerg(self,z,**kwargs)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_tractable(self,z,limitvar=None,**kwargs)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_uppergamma(self,z,**kwargs)
sympy.functions.special.error_functions.erfi.eval(cls,z)
sympy.functions.special.error_functions.erfi.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erfi.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.erfinv(Function)
sympy.functions.special.error_functions.erfinv._eval_is_zero(self)
sympy.functions.special.error_functions.erfinv._eval_rewrite_as_erfcinv(self,z,**kwargs)
sympy.functions.special.error_functions.erfinv.eval(cls,z)
sympy.functions.special.error_functions.erfinv.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erfinv.inverse(self,argindex=1)
sympy.functions.special.error_functions.expint(Function)
sympy.functions.special.error_functions.expint._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.expint._eval_expand_func(self,**hints)
sympy.functions.special.error_functions.expint._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.error_functions.expint._eval_rewrite_as_Ei(self,nu,z,**kwargs)
sympy.functions.special.error_functions.expint._eval_rewrite_as_Si(self,nu,z,**kwargs)
sympy.functions.special.error_functions.expint._eval_rewrite_as_uppergamma(self,nu,z,**kwargs)
sympy.functions.special.error_functions.expint.eval(cls,nu,z)
sympy.functions.special.error_functions.expint.fdiff(self,argindex)
sympy.functions.special.error_functions.fresnelc(FresnelIntegral)
sympy.functions.special.error_functions.fresnelc._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.fresnelc._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.fresnelc._eval_rewrite_as_erf(self,z,**kwargs)
sympy.functions.special.error_functions.fresnelc._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.error_functions.fresnelc._eval_rewrite_as_meijerg(self,z,**kwargs)
sympy.functions.special.error_functions.fresnelc.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.fresnels(FresnelIntegral)
sympy.functions.special.error_functions.fresnels._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.error_functions.fresnels._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.fresnels._eval_rewrite_as_erf(self,z,**kwargs)
sympy.functions.special.error_functions.fresnels._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.error_functions.fresnels._eval_rewrite_as_meijerg(self,z,**kwargs)
sympy.functions.special.error_functions.fresnels.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.li(Function)
sympy.functions.special.error_functions.li._eval_conjugate(self)
sympy.functions.special.error_functions.li._eval_is_zero(self)
sympy.functions.special.error_functions.li._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.error_functions.li._eval_rewrite_as_Ei(self,z,**kwargs)
sympy.functions.special.error_functions.li._eval_rewrite_as_Li(self,z,**kwargs)
sympy.functions.special.error_functions.li._eval_rewrite_as_Shi(self,z,**kwargs)
sympy.functions.special.error_functions.li._eval_rewrite_as_Si(self,z,**kwargs)
sympy.functions.special.error_functions.li._eval_rewrite_as_hyper(self,z,**kwargs)
sympy.functions.special.error_functions.li._eval_rewrite_as_meijerg(self,z,**kwargs)
sympy.functions.special.error_functions.li._eval_rewrite_as_tractable(self,z,limitvar=None,**kwargs)
sympy.functions.special.error_functions.li._eval_rewrite_as_uppergamma(self,z,**kwargs)
sympy.functions.special.error_functions.li.eval(cls,z)
sympy.functions.special.error_functions.li.fdiff(self,argindex=1)
sympy.functions.special.error_functions.real_to_real_as_real_imag(self,deep=True,**hints)
sympy.functions.special.expint(Function)
sympy.functions.special.fresnelc(FresnelIntegral)
sympy.functions.special.fresnels(FresnelIntegral)
sympy.functions.special.li(Function)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/mathieu_functions.py----------------------------------------
sympy.functions.special.mathieu_functions.MathieuBase(Function)
sympy.functions.special.mathieu_functions.MathieuBase._eval_conjugate(self)
sympy.functions.special.mathieu_functions.mathieuc(MathieuBase)
sympy.functions.special.mathieu_functions.mathieuc.eval(cls,a,q,z)
sympy.functions.special.mathieu_functions.mathieuc.fdiff(self,argindex=1)
sympy.functions.special.mathieu_functions.mathieucprime(MathieuBase)
sympy.functions.special.mathieu_functions.mathieucprime.eval(cls,a,q,z)
sympy.functions.special.mathieu_functions.mathieucprime.fdiff(self,argindex=1)
sympy.functions.special.mathieu_functions.mathieus(MathieuBase)
sympy.functions.special.mathieu_functions.mathieus.eval(cls,a,q,z)
sympy.functions.special.mathieu_functions.mathieus.fdiff(self,argindex=1)
sympy.functions.special.mathieu_functions.mathieusprime(MathieuBase)
sympy.functions.special.mathieu_functions.mathieusprime.eval(cls,a,q,z)
sympy.functions.special.mathieu_functions.mathieusprime.fdiff(self,argindex=1)
sympy.functions.special.mathieuc(MathieuBase)
sympy.functions.special.mathieucprime(MathieuBase)
sympy.functions.special.mathieus(MathieuBase)
sympy.functions.special.mathieusprime(MathieuBase)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tensor_functions.py----------------------------------------
A:sympy.functions.special.tensor_functions.n->len(args)
sympy.functions.special.Eijk(*args,**kwargs)
sympy.functions.special.KroneckerDelta(Function)
sympy.functions.special.LeviCivita(Function)
sympy.functions.special.tensor_functions.Eijk(*args,**kwargs)
sympy.functions.special.tensor_functions.KroneckerDelta(Function)
sympy.functions.special.tensor_functions.KroneckerDelta._eval_power(self,expt)
sympy.functions.special.tensor_functions.KroneckerDelta._eval_rewrite_as_Piecewise(self,*args,**kwargs)
sympy.functions.special.tensor_functions.KroneckerDelta._get_preferred_index(self)
sympy.functions.special.tensor_functions.KroneckerDelta.delta_range(self)
sympy.functions.special.tensor_functions.KroneckerDelta.eval(cls,i,j,delta_range=None)
sympy.functions.special.tensor_functions.KroneckerDelta.indices(self)
sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information(self)
sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi(self)
sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi(self)
sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi(self)
sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi(self)
sympy.functions.special.tensor_functions.KroneckerDelta.killable_index(self)
sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index(self)
sympy.functions.special.tensor_functions.LeviCivita(Function)
sympy.functions.special.tensor_functions.LeviCivita.doit(self,**hints)
sympy.functions.special.tensor_functions.LeviCivita.eval(cls,*args)
sympy.functions.special.tensor_functions.eval_levicivita(*args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/elliptic_integrals.py----------------------------------------
A:sympy.functions.special.elliptic_integrals.t->Dummy('t')
A:sympy.functions.special.elliptic_integrals.fm->sqrt(1 - m * sin(z) ** 2)
sympy.functions.special.elliptic_e(Function)
sympy.functions.special.elliptic_f(Function)
sympy.functions.special.elliptic_integrals.elliptic_e(Function)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_conjugate(self)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_rewrite_as_Integral(self,*args)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_rewrite_as_hyper(self,*args,**kwargs)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_rewrite_as_meijerg(self,*args,**kwargs)
sympy.functions.special.elliptic_integrals.elliptic_e.eval(cls,m,z=None)
sympy.functions.special.elliptic_integrals.elliptic_e.fdiff(self,argindex=1)
sympy.functions.special.elliptic_integrals.elliptic_f(Function)
sympy.functions.special.elliptic_integrals.elliptic_f._eval_conjugate(self)
sympy.functions.special.elliptic_integrals.elliptic_f._eval_is_zero(self)
sympy.functions.special.elliptic_integrals.elliptic_f._eval_rewrite_as_Integral(self,*args)
sympy.functions.special.elliptic_integrals.elliptic_f.eval(cls,z,m)
sympy.functions.special.elliptic_integrals.elliptic_f.fdiff(self,argindex=1)
sympy.functions.special.elliptic_integrals.elliptic_k(Function)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_conjugate(self)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_is_zero(self)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_rewrite_as_Integral(self,*args)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_rewrite_as_hyper(self,m,**kwargs)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_rewrite_as_meijerg(self,m,**kwargs)
sympy.functions.special.elliptic_integrals.elliptic_k.eval(cls,m)
sympy.functions.special.elliptic_integrals.elliptic_k.fdiff(self,argindex=1)
sympy.functions.special.elliptic_integrals.elliptic_pi(Function)
sympy.functions.special.elliptic_integrals.elliptic_pi._eval_conjugate(self)
sympy.functions.special.elliptic_integrals.elliptic_pi._eval_rewrite_as_Integral(self,*args)
sympy.functions.special.elliptic_integrals.elliptic_pi.eval(cls,n,m,z=None)
sympy.functions.special.elliptic_integrals.elliptic_pi.fdiff(self,argindex=1)
sympy.functions.special.elliptic_k(Function)
sympy.functions.special.elliptic_pi(Function)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/singularity_functions.py----------------------------------------
A:sympy.functions.special.singularity_functions.shift->(z - a).subs(x, 0)
sympy.functions.special.SingularityFunction(Function)
sympy.functions.special.singularity_functions.SingularityFunction(Function)
sympy.functions.special.singularity_functions.SingularityFunction._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.singularity_functions.SingularityFunction._eval_nseries(self,x,n,logx=None,cdir=0)
sympy.functions.special.singularity_functions.SingularityFunction._eval_rewrite_as_Heaviside(self,*args,**kwargs)
sympy.functions.special.singularity_functions.SingularityFunction._eval_rewrite_as_Piecewise(self,*args,**kwargs)
sympy.functions.special.singularity_functions.SingularityFunction.eval(cls,variable,offset,exponent)
sympy.functions.special.singularity_functions.SingularityFunction.fdiff(self,argindex=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/beta_functions.py----------------------------------------
A:sympy.functions.special.beta_functions.x->x.doit(**hints).doit(**hints)
A:sympy.functions.special.beta_functions.y->y.doit(**hints).doit(**hints)
A:sympy.functions.special.beta_functions.t->Dummy('t')
A:sympy.functions.special.beta_functions.expr->Integral(integrand, (t, x1, x2))
sympy.functions.special.beta(Function)
sympy.functions.special.beta_functions.beta(Function)
sympy.functions.special.beta_functions.beta._eval_conjugate(self)
sympy.functions.special.beta_functions.beta._eval_expand_func(self,**hints)
sympy.functions.special.beta_functions.beta._eval_is_real(self)
sympy.functions.special.beta_functions.beta._eval_rewrite_as_Integral(self,x,y,**kwargs)
sympy.functions.special.beta_functions.beta._eval_rewrite_as_gamma(self,x,y,piecewise=True,**kwargs)
sympy.functions.special.beta_functions.beta.doit(self,**hints)
sympy.functions.special.beta_functions.beta.eval(cls,x,y=None)
sympy.functions.special.beta_functions.beta.fdiff(self,argindex)
sympy.functions.special.beta_functions.betainc(Function)
sympy.functions.special.beta_functions.betainc._eval_conjugate(self)
sympy.functions.special.beta_functions.betainc._eval_is_real(self)
sympy.functions.special.beta_functions.betainc._eval_mpmath(self)
sympy.functions.special.beta_functions.betainc._eval_rewrite_as_Integral(self,a,b,x1,x2,**kwargs)
sympy.functions.special.beta_functions.betainc._eval_rewrite_as_hyper(self,a,b,x1,x2,**kwargs)
sympy.functions.special.beta_functions.betainc.fdiff(self,argindex)
sympy.functions.special.beta_functions.betainc_mpmath_fix(a,b,x1,x2,reg=0)
sympy.functions.special.beta_functions.betainc_regularized(cls,a,b,x1,x2)
sympy.functions.special.beta_functions.betainc_regularized._eval_conjugate(self)
sympy.functions.special.beta_functions.betainc_regularized._eval_is_real(self)
sympy.functions.special.beta_functions.betainc_regularized._eval_mpmath(self)
sympy.functions.special.beta_functions.betainc_regularized._eval_rewrite_as_Integral(self,a,b,x1,x2,**kwargs)
sympy.functions.special.beta_functions.betainc_regularized._eval_rewrite_as_hyper(self,a,b,x1,x2,**kwargs)
sympy.functions.special.beta_functions.betainc_regularized.fdiff(self,argindex)
sympy.functions.special.betainc(Function)
sympy.functions.special.betainc_regularized(cls,a,b,x1,x2)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/hyper.py----------------------------------------
A:sympy.functions.special.hyper.m->self._diffargs[i].diff(s)
A:sympy.functions.special.hyper.nz->unpolarify(z)
A:sympy.functions.special.hyper.nap->Tuple(*[a + 1 for a in self.ap])
A:sympy.functions.special.hyper.nbq->Tuple(*[b + 1 for b in self.bq])
A:sympy.functions.special.hyper.n->Dummy('n', integer=True)
A:sympy.functions.special.hyper.x0->arg.limit(x, 0)
A:sympy.functions.special.hyper.num->Mul(*[RisingFactorial(a, i) for a in ap])
A:sympy.functions.special.hyper.den->Mul(*[RisingFactorial(b, i) for b in bq])
A:sympy.functions.special.hyper.a->list(self.an)
A:sympy.functions.special.hyper.c1->And(re(e) < 0, abs(z) <= 1)
A:sympy.functions.special.hyper.c2->And(0 <= re(e), re(e) < 1, abs(z) <= 1, Ne(z, 1))
A:sympy.functions.special.hyper.c3->And(re(e) >= 1, abs(z) < 1)
A:sympy.functions.special.hyper.G->meijerg(self.an, self.aother, b, self.bother, self.argument)
A:sympy.functions.special.hyper.b->list(self.bm)
A:sympy.functions.special.hyper.an->list(self.an)
A:sympy.functions.special.hyper.ap->list(self.aother)
A:sympy.functions.special.hyper.bm->list(self.bm)
A:sympy.functions.special.hyper.bq->list(self.bother)
A:sympy.functions.special.hyper.x->l1.pop()
A:sympy.functions.special.hyper.beta->compute(self.bm)
A:sympy.functions.special.hyper.alpha->compute(self.an)
A:sympy.functions.special.hyper.znum->self.argument._eval_evalf(prec)
A:sympy.functions.special.hyper.(znum, branch)->self.argument._eval_evalf(prec).as_coeff_mul(exp_polar)
A:sympy.functions.special.hyper.v->mpmath.meijerg(ap, bq, z, r)
A:sympy.functions.special.hyper.(x, n)->self.args[-1].extract_branch_factor(allow_half=True)
A:sympy.functions.special.hyper.small->self._expr_small(*newargs)
A:sympy.functions.special.hyper.big->self._expr_big(*newerargs)
sympy.functions.special.appellf1(Function)
sympy.functions.special.hyper(cls,ap,bq,z,**kwargs)
sympy.functions.special.hyper.HyperRep(Function)
sympy.functions.special.hyper.HyperRep._eval_rewrite_as_nonrep(self,*args,**kwargs)
sympy.functions.special.hyper.HyperRep._eval_rewrite_as_nonrepsmall(self,*args,**kwargs)
sympy.functions.special.hyper.HyperRep._expr_big(cls,x,n)
sympy.functions.special.hyper.HyperRep._expr_big_minus(cls,x,n)
sympy.functions.special.hyper.HyperRep._expr_small(cls,x)
sympy.functions.special.hyper.HyperRep._expr_small_minus(cls,x)
sympy.functions.special.hyper.HyperRep.eval(cls,*args)
sympy.functions.special.hyper.HyperRep_asin1(HyperRep)
sympy.functions.special.hyper.HyperRep_asin1._expr_big(cls,z,n)
sympy.functions.special.hyper.HyperRep_asin1._expr_big_minus(cls,z,n)
sympy.functions.special.hyper.HyperRep_asin1._expr_small(cls,z)
sympy.functions.special.hyper.HyperRep_asin1._expr_small_minus(cls,z)
sympy.functions.special.hyper.HyperRep_asin2(HyperRep)
sympy.functions.special.hyper.HyperRep_asin2._expr_big(cls,z,n)
sympy.functions.special.hyper.HyperRep_asin2._expr_big_minus(cls,z,n)
sympy.functions.special.hyper.HyperRep_asin2._expr_small(cls,z)
sympy.functions.special.hyper.HyperRep_asin2._expr_small_minus(cls,z)
sympy.functions.special.hyper.HyperRep_atanh(HyperRep)
sympy.functions.special.hyper.HyperRep_atanh._expr_big(cls,x,n)
sympy.functions.special.hyper.HyperRep_atanh._expr_big_minus(cls,x,n)
sympy.functions.special.hyper.HyperRep_atanh._expr_small(cls,x)
sympy.functions.special.hyper.HyperRep_atanh._expr_small_minus(cls,x)
sympy.functions.special.hyper.HyperRep_cosasin(HyperRep)
sympy.functions.special.hyper.HyperRep_cosasin._expr_big(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_cosasin._expr_big_minus(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_cosasin._expr_small(cls,a,z)
sympy.functions.special.hyper.HyperRep_cosasin._expr_small_minus(cls,a,z)
sympy.functions.special.hyper.HyperRep_log1(HyperRep)
sympy.functions.special.hyper.HyperRep_log1._expr_big(cls,x,n)
sympy.functions.special.hyper.HyperRep_log1._expr_big_minus(cls,x,n)
sympy.functions.special.hyper.HyperRep_log1._expr_small(cls,x)
sympy.functions.special.hyper.HyperRep_log1._expr_small_minus(cls,x)
sympy.functions.special.hyper.HyperRep_log2(HyperRep)
sympy.functions.special.hyper.HyperRep_log2._expr_big(cls,z,n)
sympy.functions.special.hyper.HyperRep_log2._expr_big_minus(cls,z,n)
sympy.functions.special.hyper.HyperRep_log2._expr_small(cls,z)
sympy.functions.special.hyper.HyperRep_log2._expr_small_minus(cls,z)
sympy.functions.special.hyper.HyperRep_power1(HyperRep)
sympy.functions.special.hyper.HyperRep_power1._expr_big(cls,a,x,n)
sympy.functions.special.hyper.HyperRep_power1._expr_big_minus(cls,a,x,n)
sympy.functions.special.hyper.HyperRep_power1._expr_small(cls,a,x)
sympy.functions.special.hyper.HyperRep_power1._expr_small_minus(cls,a,x)
sympy.functions.special.hyper.HyperRep_power2(HyperRep)
sympy.functions.special.hyper.HyperRep_power2._expr_big(cls,a,x,n)
sympy.functions.special.hyper.HyperRep_power2._expr_big_minus(cls,a,x,n)
sympy.functions.special.hyper.HyperRep_power2._expr_small(cls,a,x)
sympy.functions.special.hyper.HyperRep_power2._expr_small_minus(cls,a,x)
sympy.functions.special.hyper.HyperRep_sinasin(HyperRep)
sympy.functions.special.hyper.HyperRep_sinasin._expr_big(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sinasin._expr_big_minus(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sinasin._expr_small(cls,a,z)
sympy.functions.special.hyper.HyperRep_sinasin._expr_small_minus(cls,a,z)
sympy.functions.special.hyper.HyperRep_sqrts1(HyperRep)
sympy.functions.special.hyper.HyperRep_sqrts1._expr_big(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sqrts1._expr_big_minus(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sqrts1._expr_small(cls,a,z)
sympy.functions.special.hyper.HyperRep_sqrts1._expr_small_minus(cls,a,z)
sympy.functions.special.hyper.HyperRep_sqrts2(HyperRep)
sympy.functions.special.hyper.HyperRep_sqrts2._expr_big(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sqrts2._expr_big_minus(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sqrts2._expr_small(cls,a,z)
sympy.functions.special.hyper.HyperRep_sqrts2._expr_small_minus(cls,a,z)
sympy.functions.special.hyper.TupleArg(Tuple)
sympy.functions.special.hyper.TupleArg.limit(self,x,xlim,dir='+')
sympy.functions.special.hyper.TupleParametersBase(Function)
sympy.functions.special.hyper.TupleParametersBase._eval_derivative(self,s)
sympy.functions.special.hyper._prep_tuple(v)
sympy.functions.special.hyper.appellf1(Function)
sympy.functions.special.hyper.appellf1.eval(cls,a,b1,b2,c,x,y)
sympy.functions.special.hyper.appellf1.fdiff(self,argindex=5)
sympy.functions.special.hyper.hyper(cls,ap,bq,z,**kwargs)
sympy.functions.special.hyper.hyper._diffargs(self)
sympy.functions.special.hyper.hyper._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.hyper.hyper._eval_expand_func(self,**hints)
sympy.functions.special.hyper.hyper._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.hyper.hyper._eval_rewrite_as_Sum(self,ap,bq,z,**kwargs)
sympy.functions.special.hyper.hyper._eval_simplify(self,**kwargs)
sympy.functions.special.hyper.hyper.ap(self)
sympy.functions.special.hyper.hyper.argument(self)
sympy.functions.special.hyper.hyper.bq(self)
sympy.functions.special.hyper.hyper.convergence_statement(self)
sympy.functions.special.hyper.hyper.eta(self)
sympy.functions.special.hyper.hyper.eval(cls,ap,bq,z)
sympy.functions.special.hyper.hyper.fdiff(self,argindex=3)
sympy.functions.special.hyper.hyper.radius_of_convergence(self)
sympy.functions.special.hyper.meijerg(cls,*args,**kwargs)
sympy.functions.special.hyper.meijerg._diff_wrt_parameter(self,idx)
sympy.functions.special.hyper.meijerg._diffargs(self)
sympy.functions.special.hyper.meijerg._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.hyper.meijerg._eval_evalf(self,prec)
sympy.functions.special.hyper.meijerg._eval_expand_func(self,**hints)
sympy.functions.special.hyper.meijerg.an(self)
sympy.functions.special.hyper.meijerg.aother(self)
sympy.functions.special.hyper.meijerg.ap(self)
sympy.functions.special.hyper.meijerg.argument(self)
sympy.functions.special.hyper.meijerg.bm(self)
sympy.functions.special.hyper.meijerg.bother(self)
sympy.functions.special.hyper.meijerg.bq(self)
sympy.functions.special.hyper.meijerg.delta(self)
sympy.functions.special.hyper.meijerg.fdiff(self,argindex=3)
sympy.functions.special.hyper.meijerg.get_period(self)
sympy.functions.special.hyper.meijerg.integrand(self,s)
sympy.functions.special.hyper.meijerg.is_number(self)
sympy.functions.special.hyper.meijerg.nu(self)
sympy.functions.special.meijerg(cls,*args,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/spherical_harmonics.py----------------------------------------
A:sympy.functions.special.spherical_harmonics._x->Dummy('x')
A:sympy.functions.special.spherical_harmonics.term->term.xreplace({Abs(sin(theta)): sin(theta)}).xreplace({Abs(sin(theta)): sin(theta)})
A:sympy.functions.special.spherical_harmonics.n->self.args[0]._to_mpmath(prec)
A:sympy.functions.special.spherical_harmonics.m->self.args[1]._to_mpmath(prec)
A:sympy.functions.special.spherical_harmonics.theta->self.args[2]._to_mpmath(prec)
A:sympy.functions.special.spherical_harmonics.phi->self.args[3]._to_mpmath(prec)
A:sympy.functions.special.spherical_harmonics.res->mpmath.mp.spherharm(n, m, theta, phi)
sympy.functions.special.Ynm(Function)
sympy.functions.special.Ynm_c(n,m,theta,phi)
sympy.functions.special.Znm(Function)
sympy.functions.special.spherical_harmonics.Ynm(Function)
sympy.functions.special.spherical_harmonics.Ynm._eval_conjugate(self)
sympy.functions.special.spherical_harmonics.Ynm._eval_evalf(self,prec)
sympy.functions.special.spherical_harmonics.Ynm._eval_expand_func(self,**hints)
sympy.functions.special.spherical_harmonics.Ynm._eval_rewrite_as_cos(self,n,m,theta,phi,**kwargs)
sympy.functions.special.spherical_harmonics.Ynm._eval_rewrite_as_polynomial(self,n,m,theta,phi,**kwargs)
sympy.functions.special.spherical_harmonics.Ynm._eval_rewrite_as_sin(self,n,m,theta,phi,**kwargs)
sympy.functions.special.spherical_harmonics.Ynm.as_real_imag(self,deep=True,**hints)
sympy.functions.special.spherical_harmonics.Ynm.eval(cls,n,m,theta,phi)
sympy.functions.special.spherical_harmonics.Ynm.fdiff(self,argindex=4)
sympy.functions.special.spherical_harmonics.Ynm_c(n,m,theta,phi)
sympy.functions.special.spherical_harmonics.Znm(Function)
sympy.functions.special.spherical_harmonics.Znm.eval(cls,n,m,theta,phi)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/bsplines.py----------------------------------------
A:sympy.functions.special.bsplines.rv->Piecewise(*new_args, evaluate=False)
A:sympy.functions.special.bsplines.p1->piecewise_fold(c * b1)
A:sympy.functions.special.bsplines.p2->piecewise_fold(d * b2)
A:sympy.functions.special.bsplines.p2args->list(p2.args[:-1])
A:sympy.functions.special.bsplines.(lower_2, upper_2)->_ivl(cond2, x)
A:sympy.functions.special.bsplines.x->Dummy()
A:sympy.functions.special.bsplines.knots->tuple((sympify(k) for k in knots))
A:sympy.functions.special.bsplines.d->sympify(d)
A:sympy.functions.special.bsplines.n->int(n)
A:sympy.functions.special.bsplines.n_knots->len(knots)
A:sympy.functions.special.bsplines.result->_add_splines(A, b1, B, b2, x)
A:sympy.functions.special.bsplines.b2->bspline_basis(d - 1, knots, n + 1, x)
A:sympy.functions.special.bsplines.b1->bspline_basis(d - 1, knots, n, x)
A:sympy.functions.special.bsplines.basis->bspline_basis_set(d, knots, x)
A:sympy.functions.special.bsplines.coeff->linsolve((Matrix(A), Matrix(Y)), symbols('c0:{}'.format(len(X)), cls=Dummy))
A:sympy.functions.special.bsplines.com->sorted(com, key=lambda x: x[0])
A:sympy.functions.special.bsplines.piece->sum([c * d.get(i, S.Zero) for (c, d) in zip(coeff, basis_dicts)], S.Zero)
sympy.functions.special.bspline_basis(d,knots,n,x)
sympy.functions.special.bspline_basis_set(d,knots,x)
sympy.functions.special.bsplines._add_splines(c,b1,d,b2,x)
sympy.functions.special.bsplines._ivl(cond,x)
sympy.functions.special.bsplines.bspline_basis(d,knots,n,x)
sympy.functions.special.bsplines.bspline_basis_set(d,knots,x)
sympy.functions.special.bsplines.interpolating_spline(d,x,X,Y)
sympy.functions.special.interpolating_spline(d,x,X,Y)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/zeta_functions.py----------------------------------------
A:sympy.functions.special.zeta_functions.t->Dummy('t')
A:sympy.functions.special.zeta_functions.p->p._eval_expand_func(**hints)._eval_expand_func(**hints)
A:sympy.functions.special.zeta_functions.n->floor(a)
A:sympy.functions.special.zeta_functions.add->Add(*[z ** (n - 1 - k) / (a - k - 1) ** s for k in range(n)])
A:sympy.functions.special.zeta_functions.(m, n)->S([a.p, a.q])
A:sympy.functions.special.zeta_functions.zet->exp_polar(2 * pi * I / n)
A:sympy.functions.special.zeta_functions.up_zet->unpolarify(zet)
A:sympy.functions.special.zeta_functions.(p, q)->S([arg.p, arg.q])
A:sympy.functions.special.zeta_functions.res->self._eval_expand_func()
A:sympy.functions.special.zeta_functions.dilogtable->_dilogtable()
A:sympy.functions.special.zeta_functions.zone->zeta(s).equals(S.One)
A:sympy.functions.special.zeta_functions.u->Dummy('u')
A:sympy.functions.special.zeta_functions.z0->zeta(s).limit(x, 0, dir='-' if re(cdir).is_negative else '+')
A:sympy.functions.special.zeta_functions.(_, exp)->zeta(s).leadterm(x)
A:sympy.functions.special.zeta_functions.newn->ceiling(n / exp)
A:sympy.functions.special.zeta_functions.o->Order(x ** n, x)
A:sympy.functions.special.zeta_functions.r->zeta(s)._eval_nseries(x, n, logx, cdir).removeO()
A:sympy.functions.special.zeta_functions.(c, e)->sympify(a).leadterm(x)
A:sympy.functions.special.zeta_functions.z->zeta(s)
A:sympy.functions.special.zeta_functions.z1->zeta(s, a)
A:sympy.functions.special.zeta_functions.z2->zeta(s, (a + 1) / 2)
A:sympy.functions.special.zeta_functions.a->sympify(a)
sympy.functions.special.dirichlet_eta(Function)
sympy.functions.special.lerchphi(Function)
sympy.functions.special.polylog(Function)
sympy.functions.special.riemann_xi(Function)
sympy.functions.special.stieltjes(Function)
sympy.functions.special.zeta(Function)
sympy.functions.special.zeta_functions._dilogtable()
sympy.functions.special.zeta_functions.dirichlet_eta(Function)
sympy.functions.special.zeta_functions.dirichlet_eta._eval_evalf(self,prec)
sympy.functions.special.zeta_functions.dirichlet_eta._eval_rewrite_as_genocchi(self,s,a=S.One,**kwargs)
sympy.functions.special.zeta_functions.dirichlet_eta._eval_rewrite_as_zeta(self,s,a=1,**kwargs)
sympy.functions.special.zeta_functions.dirichlet_eta.eval(cls,s,a=None)
sympy.functions.special.zeta_functions.lerchphi(Function)
sympy.functions.special.zeta_functions.lerchphi._eval_expand_func(self,**hints)
sympy.functions.special.zeta_functions.lerchphi._eval_rewrite_as_polylog(self,z,s,a,**kwargs)
sympy.functions.special.zeta_functions.lerchphi._eval_rewrite_as_zeta(self,z,s,a,**kwargs)
sympy.functions.special.zeta_functions.lerchphi._eval_rewrite_helper(self,target)
sympy.functions.special.zeta_functions.lerchphi.fdiff(self,argindex=1)
sympy.functions.special.zeta_functions.polylog(Function)
sympy.functions.special.zeta_functions.polylog._eval_expand_func(self,**hints)
sympy.functions.special.zeta_functions.polylog._eval_is_zero(self)
sympy.functions.special.zeta_functions.polylog._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.special.zeta_functions.polylog._eval_rewrite_as_lerchphi(self,s,z,**kwargs)
sympy.functions.special.zeta_functions.polylog.eval(cls,s,z)
sympy.functions.special.zeta_functions.polylog.fdiff(self,argindex=1)
sympy.functions.special.zeta_functions.riemann_xi(Function)
sympy.functions.special.zeta_functions.riemann_xi._eval_rewrite_as_zeta(self,s,**kwargs)
sympy.functions.special.zeta_functions.riemann_xi.eval(cls,s)
sympy.functions.special.zeta_functions.stieltjes(Function)
sympy.functions.special.zeta_functions.stieltjes.eval(cls,n,a=None)
sympy.functions.special.zeta_functions.zeta(Function)
sympy.functions.special.zeta_functions.zeta._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.special.zeta_functions.zeta._eval_expand_func(self,**hints)
sympy.functions.special.zeta_functions.zeta._eval_is_finite(self)
sympy.functions.special.zeta_functions.zeta._eval_rewrite_as_bernoulli(self,s,a=1,**kwargs)
sympy.functions.special.zeta_functions.zeta._eval_rewrite_as_dirichlet_eta(self,s,a=1,**kwargs)
sympy.functions.special.zeta_functions.zeta._eval_rewrite_as_lerchphi(self,s,a=1,**kwargs)
sympy.functions.special.zeta_functions.zeta.eval(cls,s,a=None)
sympy.functions.special.zeta_functions.zeta.fdiff(self,argindex=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_bsplines.py----------------------------------------
A:sympy.functions.special.tests.test_bsplines.(x, y)->symbols('x,y')
A:sympy.functions.special.tests.test_bsplines.knots->range(5)
A:sympy.functions.special.tests.test_bsplines.splines->bspline_basis_set(d, knots, x)
A:sympy.functions.special.tests.test_bsplines.b0->Piecewise((x ** 3 / 6, Interval(0, 1).contains(x)), (Rational(2, 3) - 2 * x + 2 * x ** 2 - x ** 3 / 2, Interval(1, 2).contains(x)), (Rational(-22, 3) + 10 * x - 4 * x ** 2 + x ** 3 / 2, Interval(2, 3).contains(x)), (Rational(32, 3) - 8 * x + 2 * x ** 2 - x ** 3 / 6, Interval(3, 4).contains(x)), (0, True))
A:sympy.functions.special.tests.test_bsplines.b1->Piecewise((S.Half - x + x ** 2 / 2, Interval(1, 2).contains(x)), (Rational(-11, 2) + 5 * x - x ** 2, Interval(2, 3).contains(x)), (8 - 4 * x + x ** 2 / 2, Interval(3, 4).contains(x)), (0, True))
A:sympy.functions.special.tests.test_bsplines.spline->interpolating_spline(d, x, X, Y)
A:sympy.functions.special.tests.test_bsplines.Delta->symbols('Delta', positive=True)
A:sympy.functions.special.tests.test_bsplines.basis->bspline_basis_set(1, knots, x)
A:sympy.functions.special.tests.test_bsplines.y->symbols('y', nonnegative=True)
A:sympy.functions.special.tests.test_bsplines.basis2->bspline_basis_set(1, knots, y)
sympy.functions.special.tests.test_bsplines.test_10_points_degree_1()
sympy.functions.special.tests.test_bsplines.test_3_points_degree_2()
sympy.functions.special.tests.test_bsplines.test_5_points_degree_2()
sympy.functions.special.tests.test_bsplines.test_6_points_degree_3()
sympy.functions.special.tests.test_bsplines.test_basic_degree_0()
sympy.functions.special.tests.test_bsplines.test_basic_degree_1()
sympy.functions.special.tests.test_bsplines.test_basic_degree_2()
sympy.functions.special.tests.test_bsplines.test_basic_degree_3()
sympy.functions.special.tests.test_bsplines.test_issue_19262()
sympy.functions.special.tests.test_bsplines.test_repeated_degree_1()
sympy.functions.special.tests.test_bsplines.test_repeated_degree_2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_gamma_functions.py----------------------------------------
A:sympy.functions.special.tests.test_gamma_functions.x->Symbol('x', positive=True)
A:sympy.functions.special.tests.test_gamma_functions.y->Symbol('y', negative=True)
A:sympy.functions.special.tests.test_gamma_functions.n->Symbol('n', negative=True, integer=True)
A:sympy.functions.special.tests.test_gamma_functions.w->Symbol('w', real=True)
A:sympy.functions.special.tests.test_gamma_functions.c->uniform(1, 5)
A:sympy.functions.special.tests.test_gamma_functions.k->Symbol('k', integer=True, nonpositive=True)
A:sympy.functions.special.tests.test_gamma_functions.p->Symbol('p', positive=True)
A:sympy.functions.special.tests.test_gamma_functions.r->Symbol('r', integer=False)
A:sympy.functions.special.tests.test_gamma_functions.n1->Symbol('n1')
A:sympy.functions.special.tests.test_gamma_functions.n2->Symbol('n2', real=True)
A:sympy.functions.special.tests.test_gamma_functions.n3->Symbol('n3', integer=True)
A:sympy.functions.special.tests.test_gamma_functions.n4->Symbol('n4', positive=True)
A:sympy.functions.special.tests.test_gamma_functions.n5->Symbol('n5', positive=True, integer=True)
A:sympy.functions.special.tests.test_gamma_functions.ni->Symbol('n', integer=True)
A:sympy.functions.special.tests.test_gamma_functions.e->Symbol('e', even=True, negative=True)
A:sympy.functions.special.tests.test_gamma_functions.L->loggamma(Rational(23, 7) - 6)
A:sympy.functions.special.tests.test_gamma_functions.s1->loggamma(x).series(x).cancel()
A:sympy.functions.special.tests.test_gamma_functions.m->Symbol('m', integer=True)
A:sympy.functions.special.tests.test_gamma_functions.o->Symbol('o', positive=True)
A:sympy.functions.special.tests.test_gamma_functions.z->Symbol('z', positive=False)
A:sympy.functions.special.tests.test_gamma_functions.q->Symbol('q', integer=True)
A:sympy.functions.special.tests.test_gamma_functions._k->Dummy('_k')
sympy.functions.special.tests.test_gamma_functions.test_digamma()
sympy.functions.special.tests.test_gamma_functions.test_digamma_expand_func()
sympy.functions.special.tests.test_gamma_functions.test_gamma()
sympy.functions.special.tests.test_gamma_functions.test_gamma_as_leading_term()
sympy.functions.special.tests.test_gamma_functions.test_gamma_rewrite()
sympy.functions.special.tests.test_gamma_functions.test_gamma_series()
sympy.functions.special.tests.test_gamma_functions.test_issue_14450()
sympy.functions.special.tests.test_gamma_functions.test_issue_14528()
sympy.functions.special.tests.test_gamma_functions.test_issue_8524()
sympy.functions.special.tests.test_gamma_functions.test_issue_8657()
sympy.functions.special.tests.test_gamma_functions.test_loggamma()
sympy.functions.special.tests.test_gamma_functions.test_lowergamma()
sympy.functions.special.tests.test_gamma_functions.test_multigamma()
sympy.functions.special.tests.test_gamma_functions.test_polygamma()
sympy.functions.special.tests.test_gamma_functions.test_polygamma_expand_func()
sympy.functions.special.tests.test_gamma_functions.test_polygamma_expansion()
sympy.functions.special.tests.test_gamma_functions.test_polygamma_leading_term()
sympy.functions.special.tests.test_gamma_functions.test_trigamma()
sympy.functions.special.tests.test_gamma_functions.test_trigamma_expand_func()
sympy.functions.special.tests.test_gamma_functions.test_uppergamma()
sympy.functions.special.tests.test_gamma_functions.tn_branch(s,func)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_singularity_functions.py----------------------------------------
A:sympy.functions.special.tests.test_singularity_functions.(x, y, a, n)->symbols('x y a n')
A:sympy.functions.special.tests.test_singularity_functions.n->Symbol('n', nonnegative=True)
A:sympy.functions.special.tests.test_singularity_functions.l->Symbol('l', positive=True)
sympy.functions.special.tests.test_singularity_functions.test_eval()
sympy.functions.special.tests.test_singularity_functions.test_fdiff()
sympy.functions.special.tests.test_singularity_functions.test_leading_term()
sympy.functions.special.tests.test_singularity_functions.test_rewrite()
sympy.functions.special.tests.test_singularity_functions.test_series()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_delta_functions.py----------------------------------------
A:sympy.functions.special.tests.test_delta_functions.(x, y)->symbols('x y')
A:sympy.functions.special.tests.test_delta_functions.i->symbols('t', nonzero=True)
A:sympy.functions.special.tests.test_delta_functions.j->symbols('j', positive=True)
A:sympy.functions.special.tests.test_delta_functions.k->symbols('k', negative=True)
A:sympy.functions.special.tests.test_delta_functions.h0->Heaviside(x, 0)
A:sympy.functions.special.tests.test_delta_functions.h12->Heaviside(x, S.Half)
A:sympy.functions.special.tests.test_delta_functions.h1->Heaviside(x, 1)
sympy.functions.special.tests.test_delta_functions.test_DiracDelta()
sympy.functions.special.tests.test_delta_functions.test_heaviside()
sympy.functions.special.tests.test_delta_functions.test_rewrite()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_mathieu.py----------------------------------------
sympy.functions.special.tests.test_mathieu.test_mathieuc()
sympy.functions.special.tests.test_mathieu.test_mathieucprime()
sympy.functions.special.tests.test_mathieu.test_mathieus()
sympy.functions.special.tests.test_mathieu.test_mathieusprime()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_beta_functions.py----------------------------------------
A:sympy.functions.special.tests.test_beta_functions.(x, y)->symbols('x y')
A:sympy.functions.special.tests.test_beta_functions.t->Dummy('t')
A:sympy.functions.special.tests.test_beta_functions.(a, b, x1, x2)->symbols('a b x1 x2')
sympy.functions.special.tests.test_beta_functions.test_beta()
sympy.functions.special.tests.test_beta_functions.test_betainc()
sympy.functions.special.tests.test_beta_functions.test_betainc_regularized()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_elliptic_integrals.py----------------------------------------
A:sympy.functions.special.tests.test_elliptic_integrals.i->Symbol('i', integer=True)
A:sympy.functions.special.tests.test_elliptic_integrals.j->Symbol('k', integer=True, positive=True)
A:sympy.functions.special.tests.test_elliptic_integrals.t->Dummy('t')
A:sympy.functions.special.tests.test_elliptic_integrals.zi->Symbol('z', real=False)
A:sympy.functions.special.tests.test_elliptic_integrals.zr->Symbol('z', negative=True)
A:sympy.functions.special.tests.test_elliptic_integrals.r->randcplx()
A:sympy.functions.special.tests.test_elliptic_integrals.mi->Symbol('m', real=False)
A:sympy.functions.special.tests.test_elliptic_integrals.mr->Symbol('m', negative=True)
sympy.functions.special.tests.test_elliptic_integrals.test_E()
sympy.functions.special.tests.test_elliptic_integrals.test_F()
sympy.functions.special.tests.test_elliptic_integrals.test_K()
sympy.functions.special.tests.test_elliptic_integrals.test_P()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_tensor_functions.py----------------------------------------
A:sympy.functions.special.tests.test_tensor_functions.(x, y)->symbols('x y')
A:sympy.functions.special.tests.test_tensor_functions.(i, j, k)->symbols('i j k')
A:sympy.functions.special.tests.test_tensor_functions.(i, j)->symbols('i j')
A:sympy.functions.special.tests.test_tensor_functions.k->Symbol('k', nonzero=True)
A:sympy.functions.special.tests.test_tensor_functions.(i, j, v, w)->symbols('i j v w', below_fermi=True, cls=Dummy)
A:sympy.functions.special.tests.test_tensor_functions.(a, b, t, u)->symbols('a b t u', above_fermi=True, cls=Dummy)
A:sympy.functions.special.tests.test_tensor_functions.(p, q, r, s)->symbols('p q r s', cls=Dummy)
sympy.functions.special.tests.test_tensor_functions.test_kronecker_delta()
sympy.functions.special.tests.test_tensor_functions.test_kronecker_delta_secondquant()
sympy.functions.special.tests.test_tensor_functions.test_levicivita()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_error_functions.py----------------------------------------
A:sympy.functions.special.tests.test_error_functions.(x, y, z)->symbols('x,y,z')
A:sympy.functions.special.tests.test_error_functions.w->Symbol('w', real=True)
A:sympy.functions.special.tests.test_error_functions.n->Symbol('n', integer=True)
A:sympy.functions.special.tests.test_error_functions.(xr, yr)->symbols('xr yr', extended_real=True)
A:sympy.functions.special.tests.test_error_functions.subs[a]->random_complex_number()
A:sympy.functions.special.tests.test_error_functions.c->uniform(1, 5)
A:sympy.functions.special.tests.test_error_functions.neg->Symbol('neg', negative=True)
A:sympy.functions.special.tests.test_error_functions.v->uniform(1, 5)
A:sympy.functions.special.tests.test_error_functions.v1->func(arg * x).subs(x, v).n()
A:sympy.functions.special.tests.test_error_functions.v2->func(e1 * v + e2 * 1e-15).n()
A:sympy.functions.special.tests.test_error_functions.z->Symbol('z')
A:sympy.functions.special.tests.test_error_functions.zr->Symbol('z', real=True)
A:sympy.functions.special.tests.test_error_functions.zp->Symbol('z', positive=True)
A:sympy.functions.special.tests.test_error_functions.zn->Symbol('z', negative=True)
A:sympy.functions.special.tests.test_error_functions.t->Symbol('t', Dummy=True)
A:sympy.functions.special.tests.test_error_functions.m1->exp_polar(I * pi)
A:sympy.functions.special.tests.test_error_functions.m1_->exp_polar(-I * pi)
A:sympy.functions.special.tests.test_error_functions.pI->exp_polar(I * pi / 2)
A:sympy.functions.special.tests.test_error_functions.mI->exp_polar(-I * pi / 2)
sympy.functions.special.tests.test_error_functions.mytd(expr1,expr2,x)
sympy.functions.special.tests.test_error_functions.mytn(expr1,expr2,expr3,x,d=0)
sympy.functions.special.tests.test_error_functions.test_Li()
sympy.functions.special.tests.test_error_functions.test__eis()
sympy.functions.special.tests.test_error_functions.test__erfs()
sympy.functions.special.tests.test_error_functions.test_ci()
sympy.functions.special.tests.test_error_functions.test_ei()
sympy.functions.special.tests.test_error_functions.test_erf()
sympy.functions.special.tests.test_error_functions.test_erf2()
sympy.functions.special.tests.test_error_functions.test_erf2inv()
sympy.functions.special.tests.test_error_functions.test_erf_evalf()
sympy.functions.special.tests.test_error_functions.test_erf_series()
sympy.functions.special.tests.test_error_functions.test_erfc()
sympy.functions.special.tests.test_error_functions.test_erfc_evalf()
sympy.functions.special.tests.test_error_functions.test_erfc_series()
sympy.functions.special.tests.test_error_functions.test_erfcinv()
sympy.functions.special.tests.test_error_functions.test_erfi()
sympy.functions.special.tests.test_error_functions.test_erfi_evalf()
sympy.functions.special.tests.test_error_functions.test_erfi_series()
sympy.functions.special.tests.test_error_functions.test_erfinv()
sympy.functions.special.tests.test_error_functions.test_erfinv_evalf()
sympy.functions.special.tests.test_error_functions.test_expint()
sympy.functions.special.tests.test_error_functions.test_fresnel()
sympy.functions.special.tests.test_error_functions.test_fresnel_series()
sympy.functions.special.tests.test_error_functions.test_li()
sympy.functions.special.tests.test_error_functions.test_si()
sympy.functions.special.tests.test_error_functions.tn_arg(func)
sympy.functions.special.tests.test_error_functions.tn_branch(func,s=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_bessel.py----------------------------------------
A:sympy.functions.special.tests.test_bessel.randint->_randint()
A:sympy.functions.special.tests.test_bessel.nu->Symbol('nu')
A:sympy.functions.special.tests.test_bessel.N->Symbol('n', integer=True)
A:sympy.functions.special.tests.test_bessel.ri->randint(-11, 10)
A:sympy.functions.special.tests.test_bessel.n->Symbol('n', integer=True)
A:sympy.functions.special.tests.test_bessel.r->Symbol('r', real=True)
A:sympy.functions.special.tests.test_bessel.p->Symbol('p', positive=True)
A:sympy.functions.special.tests.test_bessel.i->Symbol('i', integer=True)
A:sympy.functions.special.tests.test_bessel.rn->randcplx(a=1, b=0, d=0, c=2)
A:sympy.functions.special.tests.test_bessel.z->Symbol('z', real=False)
A:sympy.functions.special.tests.test_bessel.x->Symbol('x', integer=True)
A:sympy.functions.special.tests.test_bessel.y->Symbol('y', real=True)
A:sympy.functions.special.tests.test_bessel.t->Symbol('t', negative=True)
A:sympy.functions.special.tests.test_bessel.rz->randcplx(b=0.5)
A:sympy.functions.special.tests.test_bessel.c->uniform(1, 5)
A:sympy.functions.special.tests.test_bessel.m->Symbol('m')
A:sympy.functions.special.tests.test_bessel.a->Symbol('a')
A:sympy.functions.special.tests.test_bessel.b->Symbol('b')
A:sympy.functions.special.tests.test_bessel.k->Symbol('k')
sympy.functions.special.tests.test_bessel.eq(a,b,tol=1e-06)
sympy.functions.special.tests.test_bessel.mjn(n,z)
sympy.functions.special.tests.test_bessel.myn(n,z)
sympy.functions.special.tests.test_bessel.test_airy_base()
sympy.functions.special.tests.test_bessel.test_airyai()
sympy.functions.special.tests.test_bessel.test_airyaiprime()
sympy.functions.special.tests.test_bessel.test_airybi()
sympy.functions.special.tests.test_bessel.test_airybiprime()
sympy.functions.special.tests.test_bessel.test_bessel_eval()
sympy.functions.special.tests.test_bessel.test_bessel_nan()
sympy.functions.special.tests.test_bessel.test_bessel_rand()
sympy.functions.special.tests.test_bessel.test_bessel_twoinputs()
sympy.functions.special.tests.test_bessel.test_besseli_leading_term()
sympy.functions.special.tests.test_bessel.test_besseli_series()
sympy.functions.special.tests.test_bessel.test_besselj_leading_term()
sympy.functions.special.tests.test_bessel.test_besselj_series()
sympy.functions.special.tests.test_bessel.test_besselk_leading_term()
sympy.functions.special.tests.test_bessel.test_besselk_series()
sympy.functions.special.tests.test_bessel.test_bessely_leading_term()
sympy.functions.special.tests.test_bessel.test_bessely_series()
sympy.functions.special.tests.test_bessel.test_branching()
sympy.functions.special.tests.test_bessel.test_conjugate()
sympy.functions.special.tests.test_bessel.test_diff()
sympy.functions.special.tests.test_bessel.test_expand()
sympy.functions.special.tests.test_bessel.test_jn()
sympy.functions.special.tests.test_bessel.test_jn_zeros()
sympy.functions.special.tests.test_bessel.test_marcumq()
sympy.functions.special.tests.test_bessel.test_meromorphic()
sympy.functions.special.tests.test_bessel.test_rewrite()
sympy.functions.special.tests.test_bessel.test_slow_expand()
sympy.functions.special.tests.test_bessel.test_sympify_yn()
sympy.functions.special.tests.test_bessel.test_yn()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_zeta_functions.py----------------------------------------
A:sympy.functions.special.tests.test_zeta_functions.x->Symbol('x')
A:sympy.functions.special.tests.test_zeta_functions.a->Symbol('a', extended_real=True)
A:sympy.functions.special.tests.test_zeta_functions.b->Symbol('b', extended_positive=True)
A:sympy.functions.special.tests.test_zeta_functions.z->Symbol('z')
A:sympy.functions.special.tests.test_zeta_functions.s->Symbol('s', zero=False)
A:sympy.functions.special.tests.test_zeta_functions.c->randcplx()
A:sympy.functions.special.tests.test_zeta_functions.expanded->expand_func(func)
A:sympy.functions.special.tests.test_zeta_functions.subs[a]->randcplx()
A:sympy.functions.special.tests.test_zeta_functions.i->Symbol('i', integer=True)
A:sympy.functions.special.tests.test_zeta_functions.n->Symbol('n')
sympy.functions.special.tests.test_zeta_functions.myexpand(func,target)
sympy.functions.special.tests.test_zeta_functions.test_derivatives()
sympy.functions.special.tests.test_zeta_functions.test_dirichlet_eta_eval()
sympy.functions.special.tests.test_zeta_functions.test_issue_10475()
sympy.functions.special.tests.test_zeta_functions.test_issue_14177()
sympy.functions.special.tests.test_zeta_functions.test_issue_8404()
sympy.functions.special.tests.test_zeta_functions.test_lerchphi_expansion()
sympy.functions.special.tests.test_zeta_functions.test_polylog_expansion()
sympy.functions.special.tests.test_zeta_functions.test_polylog_series()
sympy.functions.special.tests.test_zeta_functions.test_polylog_values()
sympy.functions.special.tests.test_zeta_functions.test_rewriting()
sympy.functions.special.tests.test_zeta_functions.test_riemann_xi_eval()
sympy.functions.special.tests.test_zeta_functions.test_stieltjes()
sympy.functions.special.tests.test_zeta_functions.test_stieltjes_evalf()
sympy.functions.special.tests.test_zeta_functions.test_zeta_eval()
sympy.functions.special.tests.test_zeta_functions.test_zeta_series()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_hyper.py----------------------------------------
A:sympy.functions.special.tests.test_hyper.p->hyper((), (), z ** 2)
A:sympy.functions.special.tests.test_hyper.h->hyper((randcplx(), randcplx(), randcplx()), (randcplx(), randcplx()), z)
A:sympy.functions.special.tests.test_hyper.(a1, a2, b1, b2, b3)->symbols('a1:3, b1:4')
A:sympy.functions.special.tests.test_hyper.dum->func.subs(z, exp_polar(I * pi) * z).rewrite('nonrep').atoms(Dummy)
A:sympy.functions.special.tests.test_hyper._k->Dummy('k')
A:sympy.functions.special.tests.test_hyper.g->meijerg(Tuple(), Tuple(), Tuple(randcplx()), Tuple(randcplx(), randcplx()), z)
A:sympy.functions.special.tests.test_hyper.(a1, a2, b1, b2, c1, c2, d1, d2)->symbols('a1:3, b1:3, c1:3, d1:3')
A:sympy.functions.special.tests.test_hyper.y->randcplx()
A:sympy.functions.special.tests.test_hyper.b->Rational(3, 2)
A:sympy.functions.special.tests.test_hyper.(a, b, c, d, z)->symbols('a b c d z')
A:sympy.functions.special.tests.test_hyper.expr->func.subs(z, exp_polar(I * pi) * z).rewrite('nonrep')
A:sympy.functions.special.tests.test_hyper.rv->func.subs(z, exp_polar(a) * z).rewrite('nonrep')
A:sympy.functions.special.tests.test_hyper.expr1->dosubs(func, 2 * I * pi * (n + 1), -I * pi / 2)
A:sympy.functions.special.tests.test_hyper.expr2->dosubs(func, 2 * I * pi * (n + 1), -I * pi / 2).subs(k, l)
A:sympy.functions.special.tests.test_hyper.a->randcplx()
A:sympy.functions.special.tests.test_hyper.(k, x)->symbols('k, x')
A:sympy.functions.special.tests.test_hyper.(a, b1, b2, c, x, y)->symbols('a b1 b2 c x y')
A:sympy.functions.special.tests.test_hyper.f->appellf1(a, b1, b2, c, S.Zero, S.Zero, evaluate=False)
A:sympy.functions.special.tests.test_hyper.(a, b1, b2, c, x, y, z)->symbols('a b1 b2 c x y z')
A:sympy.functions.special.tests.test_hyper.(a1, b1, a2, b2)->symbols('a1 b1 a2 b2')
sympy.functions.special.tests.test_hyper.replace_dummy(expr,sym)
sympy.functions.special.tests.test_hyper.test_TupleParametersBase()
sympy.functions.special.tests.test_hyper.test_appellf1()
sympy.functions.special.tests.test_hyper.test_derivative_appellf1()
sympy.functions.special.tests.test_hyper.test_eval_nseries()
sympy.functions.special.tests.test_hyper.test_expand_func()
sympy.functions.special.tests.test_hyper.test_hyper()
sympy.functions.special.tests.test_hyper.test_hyper_rewrite_sum()
sympy.functions.special.tests.test_hyper.test_hyper_unpolarify()
sympy.functions.special.tests.test_hyper.test_hyperrep()
sympy.functions.special.tests.test_hyper.test_limits()
sympy.functions.special.tests.test_hyper.test_meijer()
sympy.functions.special.tests.test_hyper.test_meijerg_derivative()
sympy.functions.special.tests.test_hyper.test_meijerg_eval()
sympy.functions.special.tests.test_hyper.test_meijerg_period()
sympy.functions.special.tests.test_hyper.test_radius_of_convergence()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_spec_polynomials.py----------------------------------------
A:sympy.functions.special.tests.test_spec_polynomials.x->Symbol('x')
A:sympy.functions.special.tests.test_spec_polynomials.n->Symbol('n')
A:sympy.functions.special.tests.test_spec_polynomials.a->Symbol('a')
A:sympy.functions.special.tests.test_spec_polynomials.b->Symbol('b')
A:sympy.functions.special.tests.test_spec_polynomials.X->assoc_laguerre(n, m, x)
A:sympy.functions.special.tests.test_spec_polynomials.m->Symbol('m')
A:sympy.functions.special.tests.test_spec_polynomials._k->Dummy('k')
A:sympy.functions.special.tests.test_spec_polynomials.k->Symbol('k')
A:sympy.functions.special.tests.test_spec_polynomials.Q->sqrt(1 - x ** 2)
A:sympy.functions.special.tests.test_spec_polynomials.z->chebyshevu_root(n, k)
A:sympy.functions.special.tests.test_spec_polynomials.y->Symbol('y')
A:sympy.functions.special.tests.test_spec_polynomials.alpha->Symbol('alpha')
A:sympy.functions.special.tests.test_spec_polynomials.p->Symbol('p', positive=True)
sympy.functions.special.tests.test_spec_polynomials.test_assoc_laguerre()
sympy.functions.special.tests.test_spec_polynomials.test_assoc_legendre()
sympy.functions.special.tests.test_spec_polynomials.test_chebyshev()
sympy.functions.special.tests.test_spec_polynomials.test_gegenbauer()
sympy.functions.special.tests.test_spec_polynomials.test_hermite()
sympy.functions.special.tests.test_spec_polynomials.test_hermite_prob()
sympy.functions.special.tests.test_spec_polynomials.test_jacobi()
sympy.functions.special.tests.test_spec_polynomials.test_laguerre()
sympy.functions.special.tests.test_spec_polynomials.test_legendre()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/tests/test_spherical_harmonics.py----------------------------------------
sympy.functions.special.tests.test_spherical_harmonics.test_Ynm()
sympy.functions.special.tests.test_spherical_harmonics.test_Ynm_c()
sympy.functions.special.tests.test_spherical_harmonics.test_Znm()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/benchmarks/bench_special.py----------------------------------------
A:sympy.functions.special.benchmarks.bench_special.(x, y)->symbols('x,y')
sympy.functions.special.benchmarks.bench_special.timeit_Ynm_xy()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/special/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/combinatorial/factorials.py----------------------------------------
A:sympy.functions.combinatorial.factorials.expr->combsimp(self)
A:sympy.functions.combinatorial.factorials.L_product->prod(sieve.primerange(n // 2 + 1, n + 1))
A:sympy.functions.combinatorial.factorials.R_product->prod(primes)
A:sympy.functions.combinatorial.factorials.n->sympify(n)
A:sympy.functions.combinatorial.factorials.result->sympy.external.gmpy.gmpy.fac(n)
A:sympy.functions.combinatorial.factorials.bits->bin(n).count('1')
A:sympy.functions.combinatorial.factorials.aq->int(aq)
A:sympy.functions.combinatorial.factorials.(n, d, aq)->map(int, (n, d, aq))
A:sympy.functions.combinatorial.factorials.fc->self._facmod(n, aq)
A:sympy.functions.combinatorial.factorials.i->Dummy('i')
A:sympy.functions.combinatorial.factorials.arg->self.args[0].as_leading_term(x)
A:sympy.functions.combinatorial.factorials.arg0->self.args[0].as_leading_term(x).subs(x, 0)
A:sympy.functions.combinatorial.factorials.x->sympify(x)
A:sympy.functions.combinatorial.factorials.k->sympify(k)
A:sympy.functions.combinatorial.factorials.k_lim->sympify(k).subs(limitvar, S.Infinity)
A:sympy.functions.combinatorial.factorials.(n, k)->map(int, (n, k))
A:sympy.functions.combinatorial.factorials.res->cls._eval(n, k)
A:sympy.functions.combinatorial.factorials.M->int(_sqrt(n))
A:sympy.functions.combinatorial.factorials.a->int(N % prime < K % prime + a)
sympy.functions.combinatorial.FallingFactorial(CombinatorialFunction)
sympy.functions.combinatorial.RisingFactorial(CombinatorialFunction)
sympy.functions.combinatorial.binomial(CombinatorialFunction)
sympy.functions.combinatorial.factorial(CombinatorialFunction)
sympy.functions.combinatorial.factorial2(CombinatorialFunction)
sympy.functions.combinatorial.factorials.CombinatorialFunction(Function)
sympy.functions.combinatorial.factorials.CombinatorialFunction._eval_simplify(self,**kwargs)
sympy.functions.combinatorial.factorials.FallingFactorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.FallingFactorial._eval_is_integer(self)
sympy.functions.combinatorial.factorials.FallingFactorial._eval_rewrite_as_RisingFactorial(self,x,k,**kwargs)
sympy.functions.combinatorial.factorials.FallingFactorial._eval_rewrite_as_binomial(self,x,k,**kwargs)
sympy.functions.combinatorial.factorials.FallingFactorial._eval_rewrite_as_factorial(self,x,k,**kwargs)
sympy.functions.combinatorial.factorials.FallingFactorial._eval_rewrite_as_gamma(self,x,k,piecewise=True,**kwargs)
sympy.functions.combinatorial.factorials.FallingFactorial._eval_rewrite_as_tractable(self,x,k,limitvar=None,**kwargs)
sympy.functions.combinatorial.factorials.FallingFactorial.eval(cls,x,k)
sympy.functions.combinatorial.factorials.MultiFactorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.RisingFactorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.RisingFactorial._eval_is_integer(self)
sympy.functions.combinatorial.factorials.RisingFactorial._eval_rewrite_as_FallingFactorial(self,x,k,**kwargs)
sympy.functions.combinatorial.factorials.RisingFactorial._eval_rewrite_as_binomial(self,x,k,**kwargs)
sympy.functions.combinatorial.factorials.RisingFactorial._eval_rewrite_as_factorial(self,x,k,**kwargs)
sympy.functions.combinatorial.factorials.RisingFactorial._eval_rewrite_as_gamma(self,x,k,piecewise=True,**kwargs)
sympy.functions.combinatorial.factorials.RisingFactorial._eval_rewrite_as_tractable(self,x,k,limitvar=None,**kwargs)
sympy.functions.combinatorial.factorials.RisingFactorial.eval(cls,x,k)
sympy.functions.combinatorial.factorials.binomial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.binomial._eval(self,n,k)
sympy.functions.combinatorial.factorials.binomial._eval_Mod(self,q)
sympy.functions.combinatorial.factorials.binomial._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.combinatorial.factorials.binomial._eval_expand_func(self,**hints)
sympy.functions.combinatorial.factorials.binomial._eval_is_integer(self)
sympy.functions.combinatorial.factorials.binomial._eval_is_nonnegative(self)
sympy.functions.combinatorial.factorials.binomial._eval_rewrite_as_FallingFactorial(self,n,k,**kwargs)
sympy.functions.combinatorial.factorials.binomial._eval_rewrite_as_factorial(self,n,k,**kwargs)
sympy.functions.combinatorial.factorials.binomial._eval_rewrite_as_gamma(self,n,k,piecewise=True,**kwargs)
sympy.functions.combinatorial.factorials.binomial._eval_rewrite_as_tractable(self,n,k,limitvar=None,**kwargs)
sympy.functions.combinatorial.factorials.binomial.eval(cls,n,k)
sympy.functions.combinatorial.factorials.binomial.fdiff(self,argindex=1)
sympy.functions.combinatorial.factorials.factorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.factorial._eval_Mod(self,q)
sympy.functions.combinatorial.factorials.factorial._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.combinatorial.factorials.factorial._eval_is_composite(self)
sympy.functions.combinatorial.factorials.factorial._eval_is_even(self)
sympy.functions.combinatorial.factorials.factorial._eval_is_integer(self)
sympy.functions.combinatorial.factorials.factorial._eval_is_positive(self)
sympy.functions.combinatorial.factorials.factorial._eval_is_real(self)
sympy.functions.combinatorial.factorials.factorial._eval_rewrite_as_Product(self,n,**kwargs)
sympy.functions.combinatorial.factorials.factorial._eval_rewrite_as_gamma(self,n,piecewise=True,**kwargs)
sympy.functions.combinatorial.factorials.factorial._facmod(self,n,q)
sympy.functions.combinatorial.factorials.factorial._recursive(cls,n)
sympy.functions.combinatorial.factorials.factorial._swing(cls,n)
sympy.functions.combinatorial.factorials.factorial.eval(cls,n)
sympy.functions.combinatorial.factorials.factorial.fdiff(self,argindex=1)
sympy.functions.combinatorial.factorials.factorial2(CombinatorialFunction)
sympy.functions.combinatorial.factorials.factorial2._eval_is_even(self)
sympy.functions.combinatorial.factorials.factorial2._eval_is_integer(self)
sympy.functions.combinatorial.factorials.factorial2._eval_is_odd(self)
sympy.functions.combinatorial.factorials.factorial2._eval_is_positive(self)
sympy.functions.combinatorial.factorials.factorial2._eval_rewrite_as_gamma(self,n,piecewise=True,**kwargs)
sympy.functions.combinatorial.factorials.factorial2.eval(cls,arg)
sympy.functions.combinatorial.factorials.subfactorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.subfactorial._eval(self,n)
sympy.functions.combinatorial.factorials.subfactorial._eval_is_even(self)
sympy.functions.combinatorial.factorials.subfactorial._eval_is_integer(self)
sympy.functions.combinatorial.factorials.subfactorial._eval_is_nonnegative(self)
sympy.functions.combinatorial.factorials.subfactorial._eval_is_odd(self)
sympy.functions.combinatorial.factorials.subfactorial._eval_rewrite_as_factorial(self,arg,**kwargs)
sympy.functions.combinatorial.factorials.subfactorial._eval_rewrite_as_gamma(self,arg,piecewise=True,**kwargs)
sympy.functions.combinatorial.factorials.subfactorial._eval_rewrite_as_uppergamma(self,arg,**kwargs)
sympy.functions.combinatorial.factorials.subfactorial.eval(cls,arg)
sympy.functions.combinatorial.subfactorial(CombinatorialFunction)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/combinatorial/numbers.py----------------------------------------
A:sympy.functions.combinatorial.numbers._sym->Symbol('x')
A:sympy.functions.combinatorial.numbers.n->as_int(n)
A:sympy.functions.combinatorial.numbers.b->cls._calc_bernoulli(i)
A:sympy.functions.combinatorial.numbers.a->int(binomial(n + 3, n - 6))
A:sympy.functions.combinatorial.numbers.(p, q)->as_int(n).as_numer_denom()
A:sympy.functions.combinatorial.numbers.x->sympy.abc.x._to_mpmath(prec)._to_mpmath(prec)
A:sympy.functions.combinatorial.numbers.res->mpmath.mp.eulernum(n, exact=True)
A:sympy.functions.combinatorial.numbers.r->cls._bell_incomplete_poly(int(n), int(k_sym), symbols)
A:sympy.functions.combinatorial.numbers.k->as_int(k)
A:sympy.functions.combinatorial.numbers.pg->self.rewrite(polygamma)
A:sympy.functions.combinatorial.numbers.m->list(m)
A:sympy.functions.combinatorial.numbers.j->Dummy('j', integer=True)
A:sympy.functions.combinatorial.numbers.s->list(i)
A:sympy.functions.combinatorial.numbers.L->len(_npartition)
A:sympy.functions.combinatorial.numbers._M->slice(None, _ITEMS)
A:sympy.functions.combinatorial.numbers.tot->partition._partition(d)
A:sympy.functions.combinatorial.numbers.items->sum((1 for k in n if n[k] > 0))
A:sympy.functions.combinatorial.numbers.lens->len(s)
A:sympy.functions.combinatorial.numbers.lenn->len(n)
A:sympy.functions.combinatorial.numbers.d->defaultdict(int)
A:sympy.functions.combinatorial.numbers.ord->sum(n)
A:sympy.functions.combinatorial.numbers.ni->as_int(n).pop()
A:sympy.functions.combinatorial.numbers.rev->list(reversed(rv))
A:sympy.functions.combinatorial.numbers.u->len(set(n))
A:sympy.functions.combinatorial.numbers.(m, r)->divmod(N, 2)
A:sympy.functions.combinatorial.numbers.rv->sum((nC(n, i) for i in range(1, m + 1)))
A:sympy.functions.combinatorial.numbers.tn->int(a)
A:sympy.functions.combinatorial.numbers.ms->multiset(s)
A:sympy.functions.combinatorial.numbers.N->sum((k * v for (k, v) in counts.items()))
A:sympy.functions.combinatorial.numbers.counts->multiset([i for i in m if i])
A:sympy.functions.combinatorial.numbers.nkey->sum(counts.values())
A:sympy.functions.combinatorial.numbers.big->int(max(counts))
A:sympy.functions.combinatorial.numbers.nval->len(counts)
sympy.functions.combinatorial.andre(Function)
sympy.functions.combinatorial.bell(Function)
sympy.functions.combinatorial.bernoulli(Function)
sympy.functions.combinatorial.carmichael(Function)
sympy.functions.combinatorial.catalan(Function)
sympy.functions.combinatorial.euler(Function)
sympy.functions.combinatorial.fibonacci(Function)
sympy.functions.combinatorial.genocchi(Function)
sympy.functions.combinatorial.harmonic(Function)
sympy.functions.combinatorial.lucas(Function)
sympy.functions.combinatorial.motzkin(Function)
sympy.functions.combinatorial.numbers._AOP_product(n)
sympy.functions.combinatorial.numbers._MultisetHistogram(tuple)
sympy.functions.combinatorial.numbers._divides(p,n)
sympy.functions.combinatorial.numbers._eval_stirling1(n,k)
sympy.functions.combinatorial.numbers._eval_stirling2(n,k)
sympy.functions.combinatorial.numbers._multiset_histogram(n)
sympy.functions.combinatorial.numbers._nP(n,k=None,replacement=False)
sympy.functions.combinatorial.numbers._nT(n,k)
sympy.functions.combinatorial.numbers._product(a,b)
sympy.functions.combinatorial.numbers._stirling1(n,k)
sympy.functions.combinatorial.numbers._stirling2(n,k)
sympy.functions.combinatorial.numbers.andre(Function)
sympy.functions.combinatorial.numbers.andre._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.andre._eval_is_integer(self)
sympy.functions.combinatorial.numbers.andre._eval_is_positive(self)
sympy.functions.combinatorial.numbers.andre._eval_rewrite_as_polylog(self,s,**kwargs)
sympy.functions.combinatorial.numbers.andre._eval_rewrite_as_zeta(self,s,**kwargs)
sympy.functions.combinatorial.numbers.andre.eval(cls,n)
sympy.functions.combinatorial.numbers.bell(Function)
sympy.functions.combinatorial.numbers.bell._bell(n,prev)
sympy.functions.combinatorial.numbers.bell._bell_incomplete_poly(n,k,symbols)
sympy.functions.combinatorial.numbers.bell._bell_poly(n,prev)
sympy.functions.combinatorial.numbers.bell._eval_rewrite_as_Sum(self,n,k_sym=None,symbols=None,**kwargs)
sympy.functions.combinatorial.numbers.bell.eval(cls,n,k_sym=None,symbols=None)
sympy.functions.combinatorial.numbers.bernoulli(Function)
sympy.functions.combinatorial.numbers.bernoulli._calc_bernoulli(n)
sympy.functions.combinatorial.numbers.bernoulli._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.bernoulli._eval_rewrite_as_zeta(self,n,x=1,**kwargs)
sympy.functions.combinatorial.numbers.bernoulli.eval(cls,n,x=None)
sympy.functions.combinatorial.numbers.carmichael(Function)
sympy.functions.combinatorial.numbers.carmichael.divides(p,n)
sympy.functions.combinatorial.numbers.carmichael.find_carmichael_numbers_in_range(x,y)
sympy.functions.combinatorial.numbers.carmichael.find_first_n_carmichaels(n)
sympy.functions.combinatorial.numbers.carmichael.is_carmichael(n)
sympy.functions.combinatorial.numbers.carmichael.is_perfect_square(n)
sympy.functions.combinatorial.numbers.carmichael.is_prime(n)
sympy.functions.combinatorial.numbers.catalan(Function)
sympy.functions.combinatorial.numbers.catalan._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.catalan._eval_is_composite(self)
sympy.functions.combinatorial.numbers.catalan._eval_is_integer(self)
sympy.functions.combinatorial.numbers.catalan._eval_is_positive(self)
sympy.functions.combinatorial.numbers.catalan._eval_rewrite_as_Product(self,n,**kwargs)
sympy.functions.combinatorial.numbers.catalan._eval_rewrite_as_binomial(self,n,**kwargs)
sympy.functions.combinatorial.numbers.catalan._eval_rewrite_as_factorial(self,n,**kwargs)
sympy.functions.combinatorial.numbers.catalan._eval_rewrite_as_gamma(self,n,piecewise=True,**kwargs)
sympy.functions.combinatorial.numbers.catalan._eval_rewrite_as_hyper(self,n,**kwargs)
sympy.functions.combinatorial.numbers.catalan.eval(cls,n)
sympy.functions.combinatorial.numbers.catalan.fdiff(self,argindex=1)
sympy.functions.combinatorial.numbers.euler(Function)
sympy.functions.combinatorial.numbers.euler._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.euler._eval_rewrite_as_Sum(self,n,x=None,**kwargs)
sympy.functions.combinatorial.numbers.euler._eval_rewrite_as_genocchi(self,n,x=None,**kwargs)
sympy.functions.combinatorial.numbers.euler.eval(cls,n,x=None)
sympy.functions.combinatorial.numbers.fibonacci(Function)
sympy.functions.combinatorial.numbers.fibonacci._eval_rewrite_as_GoldenRatio(self,n,**kwargs)
sympy.functions.combinatorial.numbers.fibonacci._eval_rewrite_as_sqrt(self,n,**kwargs)
sympy.functions.combinatorial.numbers.fibonacci._fib(n)
sympy.functions.combinatorial.numbers.fibonacci._fibpoly(n,prev)
sympy.functions.combinatorial.numbers.fibonacci.eval(cls,n,sym=None)
sympy.functions.combinatorial.numbers.genocchi(Function)
sympy.functions.combinatorial.numbers.genocchi._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.genocchi._eval_is_even(self)
sympy.functions.combinatorial.numbers.genocchi._eval_is_integer(self)
sympy.functions.combinatorial.numbers.genocchi._eval_is_negative(self)
sympy.functions.combinatorial.numbers.genocchi._eval_is_odd(self)
sympy.functions.combinatorial.numbers.genocchi._eval_is_positive(self)
sympy.functions.combinatorial.numbers.genocchi._eval_is_prime(self)
sympy.functions.combinatorial.numbers.genocchi._eval_rewrite_as_bernoulli(self,n,x=1,**kwargs)
sympy.functions.combinatorial.numbers.genocchi._eval_rewrite_as_dirichlet_eta(self,n,x=1,**kwargs)
sympy.functions.combinatorial.numbers.genocchi.eval(cls,n,x=None)
sympy.functions.combinatorial.numbers.harmonic(Function)
sympy.functions.combinatorial.numbers.harmonic._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.harmonic._eval_expand_func(self,**hints)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_Sum(self,n,m=None,**kwargs)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_digamma(self,n,m=1,**kwargs)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_polygamma(self,n,m=S.One,**kwargs)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_tractable(self,n,m=1,limitvar=None,**kwargs)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_trigamma(self,n,m=1,**kwargs)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_zeta(self,n,m=S.One,**kwargs)
sympy.functions.combinatorial.numbers.harmonic.eval(cls,n,m=None)
sympy.functions.combinatorial.numbers.harmonic.fdiff(self,argindex=1)
sympy.functions.combinatorial.numbers.lucas(Function)
sympy.functions.combinatorial.numbers.lucas._eval_rewrite_as_sqrt(self,n,**kwargs)
sympy.functions.combinatorial.numbers.lucas.eval(cls,n)
sympy.functions.combinatorial.numbers.motzkin(Function)
sympy.functions.combinatorial.numbers.motzkin._motzkin(n,prev)
sympy.functions.combinatorial.numbers.motzkin.eval(cls,n)
sympy.functions.combinatorial.numbers.motzkin.find_first_n_motzkins(n)
sympy.functions.combinatorial.numbers.motzkin.find_motzkin_numbers_in_range(x,y)
sympy.functions.combinatorial.numbers.motzkin.is_motzkin(n)
sympy.functions.combinatorial.numbers.nC(n,k=None,replacement=False)
sympy.functions.combinatorial.numbers.nD(i=None,brute=None,*,n=None,m=None)
sympy.functions.combinatorial.numbers.nP(n,k=None,replacement=False)
sympy.functions.combinatorial.numbers.nT(n,k=None)
sympy.functions.combinatorial.numbers.partition(Function)
sympy.functions.combinatorial.numbers.partition._eval_is_integer(self)
sympy.functions.combinatorial.numbers.partition._eval_is_negative(self)
sympy.functions.combinatorial.numbers.partition._eval_is_positive(self)
sympy.functions.combinatorial.numbers.partition._partition(n)
sympy.functions.combinatorial.numbers.partition.eval(cls,n)
sympy.functions.combinatorial.numbers.stirling(n,k,d=None,kind=2,signed=False)
sympy.functions.combinatorial.numbers.tribonacci(Function)
sympy.functions.combinatorial.numbers.tribonacci._eval_rewrite_as_TribonacciConstant(self,n,**kwargs)
sympy.functions.combinatorial.numbers.tribonacci._eval_rewrite_as_sqrt(self,n,**kwargs)
sympy.functions.combinatorial.numbers.tribonacci._trib(n,prev)
sympy.functions.combinatorial.numbers.tribonacci._tribpoly(n,prev)
sympy.functions.combinatorial.numbers.tribonacci.eval(cls,n,sym=None)
sympy.functions.combinatorial.partition(Function)
sympy.functions.combinatorial.tribonacci(Function)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/combinatorial/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/combinatorial/tests/test_comb_numbers.py----------------------------------------
A:sympy.functions.combinatorial.tests.test_comb_numbers.b->bernoulli(10 ** 6, evaluate=False).evalf()
A:sympy.functions.combinatorial.tests.test_comb_numbers.l->Symbol('l', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers.m->Symbol('m', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers.n->Symbol('n', integer=True, negative=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers.X->symbols('x:6')
A:sympy.functions.combinatorial.tests.test_comb_numbers.ip->Dummy(even=True, positive=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers.ne->S(6)
A:sympy.functions.combinatorial.tests.test_comb_numbers.no->S(5)
A:sympy.functions.combinatorial.tests.test_comb_numbers.pe->S(8)
A:sympy.functions.combinatorial.tests.test_comb_numbers.po->S(9)
A:sympy.functions.combinatorial.tests.test_comb_numbers.qe->S(10)
A:sympy.functions.combinatorial.tests.test_comb_numbers.qo->S(13)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Heee->harmonic(ne + pe / qe)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Heeo->harmonic(ne + pe / qo)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Heoe->harmonic(ne + po / qe)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Heoo->harmonic(ne + po / qo)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Hoee->harmonic(no + pe / qe)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Hoeo->harmonic(no + pe / qo)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Hooe->harmonic(no + po / qe)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Hooo->harmonic(no + po / qo)
A:sympy.functions.combinatorial.tests.test_comb_numbers.e->expand_func(h).doit()
A:sympy.functions.combinatorial.tests.test_comb_numbers.x1->Symbol('x1', positive=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers.x2->Symbol('x2', negative=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers._k->Dummy('k')
A:sympy.functions.combinatorial.tests.test_comb_numbers.y->Symbol('y', real=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers.z->Symbol('z', negative=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers._j->Dummy('j')
A:sympy.functions.combinatorial.tests.test_comb_numbers.A->euler(m, x).rewrite('Sum')
A:sympy.functions.combinatorial.tests.test_comb_numbers.B->euler(19, S.Pi).evalf(32)
A:sympy.functions.combinatorial.tests.test_comb_numbers.k->Symbol('k')
A:sympy.functions.combinatorial.tests.test_comb_numbers.p->Symbol('p', integer=True, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers.c->catalan(I).evalf(3)
A:sympy.functions.combinatorial.tests.test_comb_numbers.g0->genocchi(0, evaluate=False)
A:sympy.functions.combinatorial.tests.test_comb_numbers.x->Symbol('x')
A:sympy.functions.combinatorial.tests.test_comb_numbers.s->''.join((choice(c) for i in range(7)))
A:sympy.functions.combinatorial.tests.test_comb_numbers.check->nT(s, i)
A:sympy.functions.combinatorial.tests.test_comb_numbers.perms->list(permutations(range(4)))
A:sympy.functions.combinatorial.tests.test_comb_numbers.parts->multiset_partitions(range(5), 3)
A:sympy.functions.combinatorial.tests.test_comb_numbers.c1->sum((1 for i in multiset_permutations(s) if all((i != j for (i, j) in zip(i, s)))))
A:sympy.functions.combinatorial.tests.test_comb_numbers.c2->len(v)
A:sympy.functions.combinatorial.tests.test_comb_numbers.ms->multiset(s)
sympy.functions.combinatorial.tests.test_comb_numbers.test_PR_14617()
sympy.functions.combinatorial.tests.test_comb_numbers.test__nT()
sympy.functions.combinatorial.tests.test_comb_numbers.test_andre()
sympy.functions.combinatorial.tests.test_comb_numbers.test_bell()
sympy.functions.combinatorial.tests.test_comb_numbers.test_bernoulli()
sympy.functions.combinatorial.tests.test_comb_numbers.test_bernoulli_rewrite()
sympy.functions.combinatorial.tests.test_comb_numbers.test_carmichael()
sympy.functions.combinatorial.tests.test_comb_numbers.test_catalan()
sympy.functions.combinatorial.tests.test_comb_numbers.test_euler()
sympy.functions.combinatorial.tests.test_comb_numbers.test_euler_odd()
sympy.functions.combinatorial.tests.test_comb_numbers.test_euler_polynomial_rewrite()
sympy.functions.combinatorial.tests.test_comb_numbers.test_euler_polynomials()
sympy.functions.combinatorial.tests.test_comb_numbers.test_fibonacci()
sympy.functions.combinatorial.tests.test_comb_numbers.test_genocchi()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_calculus()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_evalf()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_rational()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_rewrite()
sympy.functions.combinatorial.tests.test_comb_numbers.test_issue_8496()
sympy.functions.combinatorial.tests.test_comb_numbers.test_issue_8601()
sympy.functions.combinatorial.tests.test_comb_numbers.test_motzkin()
sympy.functions.combinatorial.tests.test_comb_numbers.test_nC_nP_nT()
sympy.functions.combinatorial.tests.test_comb_numbers.test_nD_derangements()
sympy.functions.combinatorial.tests.test_comb_numbers.test_partition()
sympy.functions.combinatorial.tests.test_comb_numbers.test_tribonacci()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/combinatorial/tests/test_comb_factorials.py----------------------------------------
A:sympy.functions.combinatorial.tests.test_comb_factorials.(x, y)->symbols('x,y')
A:sympy.functions.combinatorial.tests.test_comb_factorials.(n, k)->symbols('n k', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.m->Symbol('m', integer=True, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.a->Symbol('a', integer=True, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.b->Symbol('b', integer=True, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.maple->Float('34.007346127440197')
A:sympy.functions.combinatorial.tests.test_comb_factorials.us->f(4.4, 2.2)
A:sympy.functions.combinatorial.tests.test_comb_factorials.f->lambdify((x, y), rf(x, y), 'mpmath')
A:sympy.functions.combinatorial.tests.test_comb_factorials.x->Symbol('x')
A:sympy.functions.combinatorial.tests.test_comb_factorials.n->Symbol('n', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.k->Symbol('k', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.r->Symbol('r', integer=False)
A:sympy.functions.combinatorial.tests.test_comb_factorials.s->Symbol('s', integer=False, negative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.t->Symbol('t', nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.u->Symbol('u', negative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.pr->Symbol('pr', prime=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials._i->Dummy('i')
A:sympy.functions.combinatorial.tests.test_comb_factorials.tt->Symbol('tt', integer=True, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.tte->Symbol('tte', even=True, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.tpe->Symbol('tpe', even=True, positive=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.tto->Symbol('tto', odd=True, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.tf->Symbol('tf', integer=True, nonnegative=False)
A:sympy.functions.combinatorial.tests.test_comb_factorials.tfe->Symbol('tfe', even=True, nonnegative=False)
A:sympy.functions.combinatorial.tests.test_comb_factorials.tfo->Symbol('tfo', odd=True, nonnegative=False)
A:sympy.functions.combinatorial.tests.test_comb_factorials.ft->Symbol('ft', integer=False, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.ff->Symbol('ff', integer=False, nonnegative=False)
A:sympy.functions.combinatorial.tests.test_comb_factorials.fn->Symbol('ff', integer=False)
A:sympy.functions.combinatorial.tests.test_comb_factorials.nt->Symbol('nt', nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.nf->Symbol('nf', nonnegative=False)
A:sympy.functions.combinatorial.tests.test_comb_factorials.nn->Symbol('nf')
A:sympy.functions.combinatorial.tests.test_comb_factorials.z->Symbol('z', zero=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.nz->Symbol('nz', integer=True, nonzero=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.kp->Symbol('kp', integer=True, positive=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.kn->Symbol('kn', integer=True, negative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.v->Symbol('v', nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.p->Symbol('p', positive=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.kt->Symbol('kt', integer=False)
A:sympy.functions.combinatorial.tests.test_comb_factorials.(n, k, m)->symbols('n k m')
A:sympy.functions.combinatorial.tests.test_comb_factorials.tn->Symbol('tf', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.te->Symbol('te', even=True, nonnegative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.to->Symbol('to', odd=True, nonnegative=True)
sympy.functions.combinatorial.tests.test_comb_factorials.test_binomial()
sympy.functions.combinatorial.tests.test_comb_factorials.test_binomial_Mod()
sympy.functions.combinatorial.tests.test_comb_factorials.test_binomial_Mod_slow()
sympy.functions.combinatorial.tests.test_comb_factorials.test_binomial_diff()
sympy.functions.combinatorial.tests.test_comb_factorials.test_binomial_rewrite()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial2()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial2_rewrite()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_Mod()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_diff()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_rewrite()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_series()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_simplify_fail()
sympy.functions.combinatorial.tests.test_comb_factorials.test_ff_eval_apply()
sympy.functions.combinatorial.tests.test_comb_factorials.test_rf_eval_apply()
sympy.functions.combinatorial.tests.test_comb_factorials.test_rf_ff_eval_hiprec()
sympy.functions.combinatorial.tests.test_comb_factorials.test_rf_lambdify_mpmath()
sympy.functions.combinatorial.tests.test_comb_factorials.test_subfactorial()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/combinatorial/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/_trigonometric_special.py----------------------------------------
A:sympy.functions.elementary._trigonometric_special.(u, v, h)->igcdex(x[0], g)
A:sympy.functions.elementary._trigonometric_special.(y, g)->migcdex(*x[1:])
A:sympy.functions.elementary._trigonometric_special.denom->reduce(mul, denoms)
A:sympy.functions.elementary._trigonometric_special.(h, _)->migcdex(*a)
A:sympy.functions.elementary._trigonometric_special.(quotient, remainder)->divmod(n, p)
A:sympy.functions.elementary._trigonometric_special.(t1, t2)->f1(S.NegativeOne, Integer(256))
A:sympy.functions.elementary._trigonometric_special.(z1, z3)->f1(t1, Integer(64))
A:sympy.functions.elementary._trigonometric_special.(z2, z4)->f1(t2, Integer(64))
A:sympy.functions.elementary._trigonometric_special.(y1, y5)->f1(z1, 4 * (5 + t1 + 2 * z1))
A:sympy.functions.elementary._trigonometric_special.(y6, y2)->f1(z2, 4 * (5 + t2 + 2 * z2))
A:sympy.functions.elementary._trigonometric_special.(y3, y7)->f1(z3, 4 * (5 + t1 + 2 * z3))
A:sympy.functions.elementary._trigonometric_special.(y8, y4)->f1(z4, 4 * (5 + t2 + 2 * z4))
A:sympy.functions.elementary._trigonometric_special.(x1, x9)->f1(y1, -4 * (t1 + y1 + y3 + 2 * y6))
A:sympy.functions.elementary._trigonometric_special.(x2, x10)->f1(y2, -4 * (t2 + y2 + y4 + 2 * y7))
A:sympy.functions.elementary._trigonometric_special.(x3, x11)->f1(y3, -4 * (t1 + y3 + y5 + 2 * y8))
A:sympy.functions.elementary._trigonometric_special.(x4, x12)->f1(y4, -4 * (t2 + y4 + y6 + 2 * y1))
A:sympy.functions.elementary._trigonometric_special.(x5, x13)->f1(y5, -4 * (t1 + y5 + y7 + 2 * y2))
A:sympy.functions.elementary._trigonometric_special.(x6, x14)->f1(y6, -4 * (t2 + y6 + y8 + 2 * y3))
A:sympy.functions.elementary._trigonometric_special.(x15, x7)->f1(y7, -4 * (t1 + y7 + y1 + 2 * y4))
A:sympy.functions.elementary._trigonometric_special.(x8, x16)->f1(y8, -4 * (t2 + y8 + y2 + 2 * y5))
A:sympy.functions.elementary._trigonometric_special.v1->f2(x1, -4 * (x1 + x2 + x3 + x6))
A:sympy.functions.elementary._trigonometric_special.v2->f2(x2, -4 * (x2 + x3 + x4 + x7))
A:sympy.functions.elementary._trigonometric_special.v3->f2(x8, -4 * (x8 + x9 + x10 + x13))
A:sympy.functions.elementary._trigonometric_special.v4->f2(x9, -4 * (x9 + x10 + x11 + x14))
A:sympy.functions.elementary._trigonometric_special.v5->f2(x10, -4 * (x10 + x11 + x12 + x15))
A:sympy.functions.elementary._trigonometric_special.v6->f2(x16, -4 * (x16 + x1 + x2 + x5))
sympy.functions.elementary._trigonometric_special.cos_17()->Expr
sympy.functions.elementary._trigonometric_special.cos_257()->Expr
sympy.functions.elementary._trigonometric_special.cos_3()->Expr
sympy.functions.elementary._trigonometric_special.cos_5()->Expr
sympy.functions.elementary._trigonometric_special.cos_table()->dict[int, Callable[[], Expr]]
sympy.functions.elementary._trigonometric_special.fermat_coords(n:int)->list[int] | None
sympy.functions.elementary._trigonometric_special.ipartfrac(*denoms:int)->tuple[int, ...]
sympy.functions.elementary._trigonometric_special.migcdex(*x:int)->tuple[tuple[int, ...], int]


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/hyperbolic.py----------------------------------------
A:sympy.functions.elementary.hyperbolic.(K, p)->a.as_two_terms()
A:sympy.functions.elementary.hyperbolic.i_coeff->_imaginary_unit_as_coefficient(arg)
A:sympy.functions.elementary.hyperbolic.(x, m)->_peeloff_ipi(arg)
A:sympy.functions.elementary.hyperbolic.x->sympify(x)
A:sympy.functions.elementary.hyperbolic.(re, im)->self.args[0].as_real_imag()
A:sympy.functions.elementary.hyperbolic.(re_part, im_part)->self.as_real_imag(deep=True, **hints)
A:sympy.functions.elementary.hyperbolic.arg->self.args[0].as_leading_term(x)
A:sympy.functions.elementary.hyperbolic.(x, y)->z.as_real_imag()
A:sympy.functions.elementary.hyperbolic.(coeff, terms)->self.args[0].as_leading_term(x).as_coeff_Mul()
A:sympy.functions.elementary.hyperbolic.tanh_half->tanh(S.Half * arg)
A:sympy.functions.elementary.hyperbolic.coth_half->coth(S.Half * arg)
A:sympy.functions.elementary.hyperbolic.arg0->self.args[0].as_leading_term(x).subs(x, 0)
A:sympy.functions.elementary.hyperbolic.(rest, ipi_mult)->_peeloff_ipi(self.args[0])
A:sympy.functions.elementary.hyperbolic.tanhm->tanh(m * pi * I)
A:sympy.functions.elementary.hyperbolic.B->bernoulli(n + 1)
A:sympy.functions.elementary.hyperbolic.F->factorial(k)
A:sympy.functions.elementary.hyperbolic.n->len(arg.args)
A:sympy.functions.elementary.hyperbolic.T->tanh(terms)
A:sympy.functions.elementary.hyperbolic.cothm->coth(m * pi * I)
A:sympy.functions.elementary.hyperbolic.(coeff, x)->self.args[0].as_leading_term(x).as_coeff_Mul(rational=True)
A:sympy.functions.elementary.hyperbolic.c->coth(x, evaluate=False)
A:sympy.functions.elementary.hyperbolic.t->Dummy('t', positive=True)
A:sympy.functions.elementary.hyperbolic.o->self._reciprocal_of(self.args[0])
A:sympy.functions.elementary.hyperbolic.(r, i)->match_real_imag(z)
A:sympy.functions.elementary.hyperbolic.f->arg1.as_leading_term(x)
A:sympy.functions.elementary.hyperbolic.R->RisingFactorial(S.Half, k)
A:sympy.functions.elementary.hyperbolic.x0->self.args[0].as_leading_term(x).subs(x, 0).cancel()
A:sympy.functions.elementary.hyperbolic.ndir->self.args[0].dir(x, cdir if cdir else 1)
A:sympy.functions.elementary.hyperbolic.res->sympy.core.function.Function._eval_nseries(self, x, n=n, logx=logx)
A:sympy.functions.elementary.hyperbolic.cst_table->_acsch_table()
A:sympy.functions.elementary.hyperbolic.sxm1->sqrt(x - 1)
A:sympy.functions.elementary.hyperbolic.s1mx->sqrt(1 - x)
A:sympy.functions.elementary.hyperbolic.sx2m1->sqrt(x ** 2 - 1)
A:sympy.functions.elementary.hyperbolic.ser->acsch(-I + t ** 2).rewrite(log).nseries(t, 0, 2 * n)
A:sympy.functions.elementary.hyperbolic.res1->sqrt(S.One + g)._eval_nseries(x, n=n, logx=logx)
sympy.functions.elementary.acosh(InverseHyperbolicFunction)
sympy.functions.elementary.acoth(InverseHyperbolicFunction)
sympy.functions.elementary.acsch(InverseHyperbolicFunction)
sympy.functions.elementary.asech(InverseHyperbolicFunction)
sympy.functions.elementary.asinh(InverseHyperbolicFunction)
sympy.functions.elementary.atanh(InverseHyperbolicFunction)
sympy.functions.elementary.cosh(HyperbolicFunction)
sympy.functions.elementary.coth(HyperbolicFunction)
sympy.functions.elementary.csch(ReciprocalHyperbolicFunction)
sympy.functions.elementary.hyperbolic.HyperbolicFunction(Function)
sympy.functions.elementary.hyperbolic.InverseHyperbolicFunction(Function)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._calculate_reciprocal(self,method_name,*args,**kwargs)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._call_reciprocal(self,method_name,*args,**kwargs)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_expand_complex(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_expand_trig(self,**hints)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_is_extended_real(self)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_is_finite(self)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_rewrite_as_coth(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_rewrite_as_tanh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._eval_rewrite_as_tractable(self,arg,limitvar=None,**kwargs)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction._rewrite_reciprocal(self,method_name,arg)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction.eval(cls,arg)
sympy.functions.elementary.hyperbolic._acosh_table()
sympy.functions.elementary.hyperbolic._acsch_table()
sympy.functions.elementary.hyperbolic._asech_table()
sympy.functions.elementary.hyperbolic._peeloff_ipi(arg)
sympy.functions.elementary.hyperbolic._rewrite_hyperbolics_as_exp(expr)
sympy.functions.elementary.hyperbolic.acosh(InverseHyperbolicFunction)
sympy.functions.elementary.hyperbolic.acosh._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.acosh._eval_is_zero(self)
sympy.functions.elementary.hyperbolic.acosh._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.hyperbolic.acosh._eval_rewrite_as_acos(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.acosh._eval_rewrite_as_asin(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.acosh._eval_rewrite_as_asinh(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.acosh._eval_rewrite_as_atanh(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.acosh._eval_rewrite_as_log(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.acosh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.acosh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.acosh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.acosh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.acoth(InverseHyperbolicFunction)
sympy.functions.elementary.hyperbolic.acoth._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.acoth._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.hyperbolic.acoth._eval_rewrite_as_asinh(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.acoth._eval_rewrite_as_atanh(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.acoth._eval_rewrite_as_log(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.acoth.eval(cls,arg)
sympy.functions.elementary.hyperbolic.acoth.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.acoth.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.acoth.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.acsch(InverseHyperbolicFunction)
sympy.functions.elementary.hyperbolic.acsch._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.acsch._eval_is_zero(self)
sympy.functions.elementary.hyperbolic.acsch._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.hyperbolic.acsch._eval_rewrite_as_acosh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.acsch._eval_rewrite_as_asinh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.acsch._eval_rewrite_as_atanh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.acsch._eval_rewrite_as_log(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.acsch.eval(cls,arg)
sympy.functions.elementary.hyperbolic.acsch.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.acsch.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.acsch.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.asech(InverseHyperbolicFunction)
sympy.functions.elementary.hyperbolic.asech._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.asech._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.hyperbolic.asech._eval_rewrite_as_acosh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.asech._eval_rewrite_as_acsch(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.asech._eval_rewrite_as_asinh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.asech._eval_rewrite_as_atanh(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.asech._eval_rewrite_as_log(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.asech.eval(cls,arg)
sympy.functions.elementary.hyperbolic.asech.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.asech.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.asech.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.asinh(InverseHyperbolicFunction)
sympy.functions.elementary.hyperbolic.asinh._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.asinh._eval_is_zero(self)
sympy.functions.elementary.hyperbolic.asinh._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.hyperbolic.asinh._eval_rewrite_as_acos(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.asinh._eval_rewrite_as_acosh(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.asinh._eval_rewrite_as_asin(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.asinh._eval_rewrite_as_atanh(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.asinh._eval_rewrite_as_log(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.asinh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.asinh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.asinh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.asinh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.atanh(InverseHyperbolicFunction)
sympy.functions.elementary.hyperbolic.atanh._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.atanh._eval_is_imaginary(self)
sympy.functions.elementary.hyperbolic.atanh._eval_is_zero(self)
sympy.functions.elementary.hyperbolic.atanh._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.hyperbolic.atanh._eval_rewrite_as_asinh(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.atanh._eval_rewrite_as_log(self,x,**kwargs)
sympy.functions.elementary.hyperbolic.atanh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.atanh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.atanh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.atanh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.cosh(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.cosh._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.cosh._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.cosh._eval_expand_complex(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.cosh._eval_expand_trig(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.cosh._eval_is_finite(self)
sympy.functions.elementary.hyperbolic.cosh._eval_is_nonnegative(self)
sympy.functions.elementary.hyperbolic.cosh._eval_is_positive(self)
sympy.functions.elementary.hyperbolic.cosh._eval_is_real(self)
sympy.functions.elementary.hyperbolic.cosh._eval_is_zero(self)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_cos(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_coth(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_sec(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_sech(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_sinh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_tanh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_tractable(self,arg,limitvar=None,**kwargs)
sympy.functions.elementary.hyperbolic.cosh.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.cosh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.cosh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.cosh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.coth(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.coth._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.coth._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.coth._eval_expand_trig(self,**hints)
sympy.functions.elementary.hyperbolic.coth._eval_is_negative(self)
sympy.functions.elementary.hyperbolic.coth._eval_is_positive(self)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_cosh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_sinh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_tanh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_tractable(self,arg,limitvar=None,**kwargs)
sympy.functions.elementary.hyperbolic.coth.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.coth.eval(cls,arg)
sympy.functions.elementary.hyperbolic.coth.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.coth.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.coth.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.csch(ReciprocalHyperbolicFunction)
sympy.functions.elementary.hyperbolic.csch._eval_is_negative(self)
sympy.functions.elementary.hyperbolic.csch._eval_is_positive(self)
sympy.functions.elementary.hyperbolic.csch._eval_rewrite_as_cosh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.csch._eval_rewrite_as_csc(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.csch._eval_rewrite_as_sin(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.csch._eval_rewrite_as_sinh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.csch.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.csch.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.sech(ReciprocalHyperbolicFunction)
sympy.functions.elementary.hyperbolic.sech._eval_is_positive(self)
sympy.functions.elementary.hyperbolic.sech._eval_rewrite_as_cos(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sech._eval_rewrite_as_cosh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sech._eval_rewrite_as_sec(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sech._eval_rewrite_as_sinh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sech.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.sech.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.sinh(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.sinh._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.sinh._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.sinh._eval_expand_complex(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.sinh._eval_expand_trig(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.sinh._eval_is_extended_real(self)
sympy.functions.elementary.hyperbolic.sinh._eval_is_finite(self)
sympy.functions.elementary.hyperbolic.sinh._eval_is_negative(self)
sympy.functions.elementary.hyperbolic.sinh._eval_is_positive(self)
sympy.functions.elementary.hyperbolic.sinh._eval_is_real(self)
sympy.functions.elementary.hyperbolic.sinh._eval_is_zero(self)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_cosh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_coth(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_csc(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_csch(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_sin(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_tanh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_tractable(self,arg,limitvar=None,**kwargs)
sympy.functions.elementary.hyperbolic.sinh.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.sinh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.sinh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.sinh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.sinh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.tanh(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.tanh._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.hyperbolic.tanh._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.tanh._eval_expand_trig(self,**hints)
sympy.functions.elementary.hyperbolic.tanh._eval_is_extended_real(self)
sympy.functions.elementary.hyperbolic.tanh._eval_is_finite(self)
sympy.functions.elementary.hyperbolic.tanh._eval_is_negative(self)
sympy.functions.elementary.hyperbolic.tanh._eval_is_positive(self)
sympy.functions.elementary.hyperbolic.tanh._eval_is_real(self)
sympy.functions.elementary.hyperbolic.tanh._eval_is_zero(self)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_cosh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_cot(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_coth(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_sinh(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_tan(self,arg,**kwargs)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_tractable(self,arg,limitvar=None,**kwargs)
sympy.functions.elementary.hyperbolic.tanh.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.tanh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.tanh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.tanh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.tanh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.sech(ReciprocalHyperbolicFunction)
sympy.functions.elementary.sinh(HyperbolicFunction)
sympy.functions.elementary.tanh(HyperbolicFunction)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/integers.py----------------------------------------
A:sympy.functions.elementary.integers.v->cls._eval_number(arg)
A:sympy.functions.elementary.integers.i->im(t)
A:sympy.functions.elementary.integers.terms->sympy.core.Add.make_args(arg)
A:sympy.functions.elementary.integers.(r, i)->get_integer_part(npart, cls._dir, {}, return_ints=True)
A:sympy.functions.elementary.integers.arg0->arg.subs(x, 0)
A:sympy.functions.elementary.integers.r->self.subs(x, 0)
A:sympy.functions.elementary.integers.ndir->arg.dir(x, cdir=cdir)
A:sympy.functions.elementary.integers.s->arg._eval_nseries(x, n, logx, cdir)
A:sympy.functions.elementary.integers.other->_sympify(other)
A:sympy.functions.elementary.integers.real->_eval(real)
A:sympy.functions.elementary.integers.imag->_eval(imag)
A:sympy.functions.elementary.integers.res->lhs._value_one_or_more(rhs)
sympy.functions.elementary.ceiling(RoundFunction)
sympy.functions.elementary.floor(RoundFunction)
sympy.functions.elementary.frac(Function)
sympy.functions.elementary.integers.RoundFunction(Function)
sympy.functions.elementary.integers.RoundFunction._eval_is_finite(self)
sympy.functions.elementary.integers.RoundFunction._eval_is_integer(self)
sympy.functions.elementary.integers.RoundFunction._eval_is_real(self)
sympy.functions.elementary.integers.RoundFunction._eval_number(cls,arg)
sympy.functions.elementary.integers.RoundFunction.eval(cls,arg)
sympy.functions.elementary.integers._eval_is_eq(lhs,rhs)
sympy.functions.elementary.integers._eval_is_eq(lhs,rhs)
sympy.functions.elementary.integers._eval_is_eq(lhs,rhs)
sympy.functions.elementary.integers.ceiling(RoundFunction)
sympy.functions.elementary.integers.ceiling.__ge__(self,other)
sympy.functions.elementary.integers.ceiling.__gt__(self,other)
sympy.functions.elementary.integers.ceiling.__le__(self,other)
sympy.functions.elementary.integers.ceiling.__lt__(self,other)
sympy.functions.elementary.integers.ceiling._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.integers.ceiling._eval_is_nonpositive(self)
sympy.functions.elementary.integers.ceiling._eval_is_positive(self)
sympy.functions.elementary.integers.ceiling._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.integers.ceiling._eval_number(cls,arg)
sympy.functions.elementary.integers.ceiling._eval_rewrite_as_floor(self,arg,**kwargs)
sympy.functions.elementary.integers.ceiling._eval_rewrite_as_frac(self,arg,**kwargs)
sympy.functions.elementary.integers.floor(RoundFunction)
sympy.functions.elementary.integers.floor.__ge__(self,other)
sympy.functions.elementary.integers.floor.__gt__(self,other)
sympy.functions.elementary.integers.floor.__le__(self,other)
sympy.functions.elementary.integers.floor.__lt__(self,other)
sympy.functions.elementary.integers.floor._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.integers.floor._eval_is_negative(self)
sympy.functions.elementary.integers.floor._eval_is_nonnegative(self)
sympy.functions.elementary.integers.floor._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.integers.floor._eval_number(cls,arg)
sympy.functions.elementary.integers.floor._eval_rewrite_as_ceiling(self,arg,**kwargs)
sympy.functions.elementary.integers.floor._eval_rewrite_as_frac(self,arg,**kwargs)
sympy.functions.elementary.integers.frac(Function)
sympy.functions.elementary.integers.frac.__ge__(self,other)
sympy.functions.elementary.integers.frac.__gt__(self,other)
sympy.functions.elementary.integers.frac.__le__(self,other)
sympy.functions.elementary.integers.frac.__lt__(self,other)
sympy.functions.elementary.integers.frac._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.integers.frac._eval_is_finite(self)
sympy.functions.elementary.integers.frac._eval_is_imaginary(self)
sympy.functions.elementary.integers.frac._eval_is_integer(self)
sympy.functions.elementary.integers.frac._eval_is_negative(self)
sympy.functions.elementary.integers.frac._eval_is_real(self)
sympy.functions.elementary.integers.frac._eval_is_zero(self)
sympy.functions.elementary.integers.frac._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.integers.frac._eval_rewrite_as_ceiling(self,arg,**kwargs)
sympy.functions.elementary.integers.frac._eval_rewrite_as_floor(self,arg,**kwargs)
sympy.functions.elementary.integers.frac._value_one_or_more(self,other)
sympy.functions.elementary.integers.frac.eval(cls,arg)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/miscellaneous.py----------------------------------------
A:sympy.functions.elementary.miscellaneous._symbol->Dummy('x')
A:sympy.functions.elementary.miscellaneous.n->len(self.args)
A:sympy.functions.elementary.miscellaneous.rv->sympify(arg)
A:sympy.functions.elementary.miscellaneous.n1pow->Transform(lambda x: -(-x.base) ** x.exp, lambda x: x.is_Pow and x.base.is_negative and x.exp.is_Rational and (x.exp.p == 1) and x.exp.q % 2)
A:sympy.functions.elementary.miscellaneous.evaluate->assumptions.pop('evaluate', global_parameters.evaluate)
A:sympy.functions.elementary.miscellaneous.args->factor_minmax(args)
A:sympy.functions.elementary.miscellaneous.obj->sympy.core.expr.Expr.__new__(cls, *ordered(args), **assumptions)
A:sympy.functions.elementary.miscellaneous.(other_args, remaining_args)->sift(args, is_other, binary=True)
A:sympy.functions.elementary.miscellaneous.common->set.intersection(*arg_sets)
A:sympy.functions.elementary.miscellaneous.new_other_args->list(common)
A:sympy.functions.elementary.miscellaneous.other_args_factored->other(*new_other_args, evaluate=False)
A:sympy.functions.elementary.miscellaneous.localzeros->set()
A:sympy.functions.elementary.miscellaneous.localzeros_->list(localzeros)
A:sympy.functions.elementary.miscellaneous.con->cls._is_connected(v, z)
A:sympy.functions.elementary.miscellaneous.x->factor_terms(x - y)
A:sympy.functions.elementary.miscellaneous.da->a.diff(s)
A:sympy.functions.elementary.miscellaneous.df->sympy.core.Function.fdiff(self, i)
A:sympy.functions.elementary.miscellaneous.newargs->tuple([self.args[i] for i in range(n) if i != argindex])
sympy.functions.elementary.Max(MinMaxBase,Application)
sympy.functions.elementary.Min(MinMaxBase,Application)
sympy.functions.elementary.Rem(Function)
sympy.functions.elementary.cbrt(arg,evaluate=None)
sympy.functions.elementary.miscellaneous.IdentityFunction(Lambda,metaclass=Singleton)
sympy.functions.elementary.miscellaneous.IdentityFunction.expr(self)
sympy.functions.elementary.miscellaneous.IdentityFunction.signature(self)
sympy.functions.elementary.miscellaneous.Max(MinMaxBase,Application)
sympy.functions.elementary.miscellaneous.Max._eval_is_negative(self)
sympy.functions.elementary.miscellaneous.Max._eval_is_nonnegative(self)
sympy.functions.elementary.miscellaneous.Max._eval_is_positive(self)
sympy.functions.elementary.miscellaneous.Max._eval_rewrite_as_Heaviside(self,*args,**kwargs)
sympy.functions.elementary.miscellaneous.Max._eval_rewrite_as_Piecewise(self,*args,**kwargs)
sympy.functions.elementary.miscellaneous.Max.fdiff(self,argindex)
sympy.functions.elementary.miscellaneous.Min(MinMaxBase,Application)
sympy.functions.elementary.miscellaneous.Min._eval_is_negative(self)
sympy.functions.elementary.miscellaneous.Min._eval_is_nonnegative(self)
sympy.functions.elementary.miscellaneous.Min._eval_is_positive(self)
sympy.functions.elementary.miscellaneous.Min._eval_rewrite_as_Heaviside(self,*args,**kwargs)
sympy.functions.elementary.miscellaneous.Min._eval_rewrite_as_Piecewise(self,*args,**kwargs)
sympy.functions.elementary.miscellaneous.Min.fdiff(self,argindex)
sympy.functions.elementary.miscellaneous.MinMaxBase(cls,*args,**assumptions)
sympy.functions.elementary.miscellaneous.MinMaxBase._collapse_arguments(cls,args,**assumptions)
sympy.functions.elementary.miscellaneous.MinMaxBase._eval_derivative(self,s)
sympy.functions.elementary.miscellaneous.MinMaxBase._eval_rewrite_as_Abs(self,*args,**kwargs)
sympy.functions.elementary.miscellaneous.MinMaxBase._find_localzeros(cls,values,**options)
sympy.functions.elementary.miscellaneous.MinMaxBase._is_connected(cls,x,y)
sympy.functions.elementary.miscellaneous.MinMaxBase._new_args_filter(cls,arg_sequence)
sympy.functions.elementary.miscellaneous.MinMaxBase.evalf(self,n=15,**options)
sympy.functions.elementary.miscellaneous.MinMaxBase.n(self,*args,**kwargs)
sympy.functions.elementary.miscellaneous.Rem(Function)
sympy.functions.elementary.miscellaneous.Rem.eval(cls,p,q)
sympy.functions.elementary.miscellaneous._minmax_as_Piecewise(op,*args)
sympy.functions.elementary.miscellaneous.cbrt(arg,evaluate=None)
sympy.functions.elementary.miscellaneous.real_root(arg,n=None,evaluate=None)
sympy.functions.elementary.miscellaneous.root(arg,n,k=0,evaluate=None)
sympy.functions.elementary.miscellaneous.sqrt(arg,evaluate=None)
sympy.functions.elementary.real_root(arg,n=None,evaluate=None)
sympy.functions.elementary.root(arg,n,k=0,evaluate=None)
sympy.functions.elementary.sqrt(arg,evaluate=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/trigonometric.py----------------------------------------
A:sympy.functions.elementary.trigonometric.s->self.func(*self.args)
A:sympy.functions.elementary.trigonometric.pi_coeff->_pi_coeff(arg)
A:sympy.functions.elementary.trigonometric.(re_part, im_part)->self.as_real_imag(deep=deep, **hints)
A:sympy.functions.elementary.trigonometric.(re, im)->self._as_real_imag(deep=deep, **hints)
A:sympy.functions.elementary.trigonometric.f->arg1.as_leading_term(x)
A:sympy.functions.elementary.trigonometric.(g, h)->h.as_independent(symbol, as_Add=False)
A:sympy.functions.elementary.trigonometric.(a, h)->arg1.as_leading_term(x).as_independent(symbol)
A:sympy.functions.elementary.trigonometric.K->a.coeff(pi)
A:sympy.functions.elementary.trigonometric.cx->cot(x, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.(c, x)->cot(x, evaluate=False)._eval_expand_trig().as_coeff_Mul()
A:sympy.functions.elementary.trigonometric.i->int(cm)
A:sympy.functions.elementary.trigonometric.c->Rational(int(c))
A:sympy.functions.elementary.trigonometric.d->floor(min / pi)
A:sympy.functions.elementary.trigonometric.i_coeff->_imaginary_unit_as_coefficient(arg)
A:sympy.functions.elementary.trigonometric.result->cos(narg)
A:sympy.functions.elementary.trigonometric.(x, m)->_peeloff_pi(arg)
A:sympy.functions.elementary.trigonometric.x->im(x)
A:sympy.functions.elementary.trigonometric.arg->arg.func(arg.args[0]).rewrite(exp).func(arg.args[0]).rewrite(exp)
A:sympy.functions.elementary.trigonometric.tan_half->tan(S.Half * arg)
A:sympy.functions.elementary.trigonometric.cot_half->cot(arg / 2)
A:sympy.functions.elementary.trigonometric.(x, y)->arg.func(arg.args[0]).rewrite(exp).func(arg.args[0]).rewrite(exp).as_two_terms()
A:sympy.functions.elementary.trigonometric.sx->sin(x, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.sy->sin(y, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.cy->cos(y, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.(n, x)->arg.func(arg.args[0]).rewrite(exp).func(arg.args[0]).rewrite(exp).as_coeff_Mul(rational=True)
A:sympy.functions.elementary.trigonometric.x0->arg.func(arg.args[0]).rewrite(exp).func(arg.args[0]).rewrite(exp).subs(x, 0).cancel()
A:sympy.functions.elementary.trigonometric.lt->(arg - n * pi).as_leading_term(x)
A:sympy.functions.elementary.trigonometric.(rest, pi_mult)->_peeloff_pi(self.args[0])
A:sympy.functions.elementary.trigonometric.table2->_table2()
A:sympy.functions.elementary.trigonometric.nval->cos(pico2 * pi).rewrite(sqrt)
A:sympy.functions.elementary.trigonometric.cst_table_some->cos_table()
A:sympy.functions.elementary.trigonometric.rv->rv.expand().expand()
A:sympy.functions.elementary.trigonometric.FC->fermat_coords(pi_coeff.q)
A:sympy.functions.elementary.trigonometric.apart->ipartfrac(*denoms)
A:sympy.functions.elementary.trigonometric.pcls->cos(sum((x[0] for x in X)))._eval_expand_trig().subs(X)
A:sympy.functions.elementary.trigonometric.(coeff, terms)->arg.func(arg.args[0]).rewrite(exp).func(arg.args[0]).rewrite(exp).as_coeff_Mul(rational=True)
A:sympy.functions.elementary.trigonometric.tanm->tan(m * pi)
A:sympy.functions.elementary.trigonometric.B->bernoulli(n + 1)
A:sympy.functions.elementary.trigonometric.F->factorial(k)
A:sympy.functions.elementary.trigonometric.n->len(arg.args)
A:sympy.functions.elementary.trigonometric.tx->tan(x, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.Yg->numbered_symbols('Y')
A:sympy.functions.elementary.trigonometric.z->Symbol('dummy', real=True)
A:sympy.functions.elementary.trigonometric.P->((z + I) ** coeff).expand()
A:sympy.functions.elementary.trigonometric.sin_in_sec_form->sin(arg).rewrite(sec)
A:sympy.functions.elementary.trigonometric.cos_in_sec_form->cos(arg).rewrite(sec)
A:sympy.functions.elementary.trigonometric.sin_in_csc_form->sin(arg).rewrite(csc)
A:sympy.functions.elementary.trigonometric.cos_in_csc_form->cos(arg).rewrite(csc)
A:sympy.functions.elementary.trigonometric.y->im(y)
A:sympy.functions.elementary.trigonometric.cotm->cot(m * pi)
A:sympy.functions.elementary.trigonometric.(rest, pimult)->_peeloff_pi(self.args[0])
A:sympy.functions.elementary.trigonometric.argnew->arg.func(arg.args[0]).rewrite(exp).func(arg.args[0]).rewrite(exp).subs(old, new)
A:sympy.functions.elementary.trigonometric.t->Dummy('t', positive=True)
A:sympy.functions.elementary.trigonometric.o->self._reciprocal_of(self.args[0])
A:sympy.functions.elementary.trigonometric.asin_table->cls._asin_table()
A:sympy.functions.elementary.trigonometric.R->RisingFactorial(S.Half, k)
A:sympy.functions.elementary.trigonometric.ndir->self.args[0].dir(x, cdir if cdir else 1)
A:sympy.functions.elementary.trigonometric.arg0->self.args[0].subs(x, 0)
A:sympy.functions.elementary.trigonometric.ser->acsc(S.NegativeOne - t ** 2).rewrite(log).nseries(t, 0, 2 * n)
A:sympy.functions.elementary.trigonometric.res1->sqrt(S.One + g)._eval_nseries(x, n=n, logx=logx)
A:sympy.functions.elementary.trigonometric.res->sympy.core.function.Function._eval_nseries(self, x, n=n, logx=logx)
A:sympy.functions.elementary.trigonometric.r->self.func(self.args[0].conjugate())
A:sympy.functions.elementary.trigonometric.atan_table->cls._atan_table()
A:sympy.functions.elementary.trigonometric.acsc_table->cls._acsc_table()
sympy.functions.elementary.acos(InverseTrigonometricFunction)
sympy.functions.elementary.acot(InverseTrigonometricFunction)
sympy.functions.elementary.acsc(InverseTrigonometricFunction)
sympy.functions.elementary.asec(InverseTrigonometricFunction)
sympy.functions.elementary.asin(InverseTrigonometricFunction)
sympy.functions.elementary.atan(InverseTrigonometricFunction)
sympy.functions.elementary.atan2(InverseTrigonometricFunction)
sympy.functions.elementary.cos(TrigonometricFunction)
sympy.functions.elementary.cot(TrigonometricFunction)
sympy.functions.elementary.csc(ReciprocalTrigonometricFunction)
sympy.functions.elementary.sec(ReciprocalTrigonometricFunction)
sympy.functions.elementary.sin(TrigonometricFunction)
sympy.functions.elementary.sinc(Function)
sympy.functions.elementary.tan(TrigonometricFunction)
sympy.functions.elementary.trigonometric.InverseTrigonometricFunction(Function)
sympy.functions.elementary.trigonometric.InverseTrigonometricFunction._acsc_table()
sympy.functions.elementary.trigonometric.InverseTrigonometricFunction._asin_table()
sympy.functions.elementary.trigonometric.InverseTrigonometricFunction._atan_table()
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction(TrigonometricFunction)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._calculate_reciprocal(self,method_name,*args,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._call_reciprocal(self,method_name,*args,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_conjugate(self)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_is_finite(self)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_cos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_sin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_sqrt(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_tan(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._period(self,symbol)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._rewrite_reciprocal(self,method_name,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction.eval(cls,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.TrigonometricFunction(Function)
sympy.functions.elementary.trigonometric.TrigonometricFunction._as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.TrigonometricFunction._eval_expand_complex(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.TrigonometricFunction._eval_is_algebraic(self)
sympy.functions.elementary.trigonometric.TrigonometricFunction._eval_is_rational(self)
sympy.functions.elementary.trigonometric.TrigonometricFunction._period(self,general_period,symbol=None)
sympy.functions.elementary.trigonometric._imaginary_unit_as_coefficient(arg)
sympy.functions.elementary.trigonometric._peeloff_pi(arg)
sympy.functions.elementary.trigonometric._pi_coeff(arg:Expr,cycles:int=1)->tUnion[Expr, None]
sympy.functions.elementary.trigonometric._table2()
sympy.functions.elementary.trigonometric.acos(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.acos._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.acos._eval_conjugate(self)
sympy.functions.elementary.trigonometric.acos._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.acos._eval_is_nonnegative(self)
sympy.functions.elementary.trigonometric.acos._eval_is_rational(self)
sympy.functions.elementary.trigonometric.acos._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_acot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_acsc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_asec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_asin(self,x,**kwargs)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_atan(self,x,**kwargs)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_log(self,x,**kwargs)
sympy.functions.elementary.trigonometric.acos.eval(cls,arg)
sympy.functions.elementary.trigonometric.acos.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.acos.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.acos.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.acot(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.acot._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.acot._eval_aseries(self,n,args0,x,logx)
sympy.functions.elementary.trigonometric.acot._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.acot._eval_is_negative(self)
sympy.functions.elementary.trigonometric.acot._eval_is_positive(self)
sympy.functions.elementary.trigonometric.acot._eval_is_rational(self)
sympy.functions.elementary.trigonometric.acot._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_acos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_acsc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_asec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_asin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_atan(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_log(self,x,**kwargs)
sympy.functions.elementary.trigonometric.acot.eval(cls,arg)
sympy.functions.elementary.trigonometric.acot.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.acot.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.acot.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.acsc(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.acsc._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.acsc._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_acos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_acot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_asec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_asin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_atan(self,x,**kwargs)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_log(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.acsc.eval(cls,arg)
sympy.functions.elementary.trigonometric.acsc.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.acsc.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.acsc.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.asec(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.asec._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.asec._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.asec._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_acos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_acot(self,x,**kwargs)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_acsc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_asin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_atan(self,x,**kwargs)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_log(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.asec.eval(cls,arg)
sympy.functions.elementary.trigonometric.asec.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.asec.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.asec.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.asin(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.asin._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.asin._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.asin._eval_is_negative(self)
sympy.functions.elementary.trigonometric.asin._eval_is_positive(self)
sympy.functions.elementary.trigonometric.asin._eval_is_rational(self)
sympy.functions.elementary.trigonometric.asin._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_acos(self,x,**kwargs)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_acot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_acsc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_asec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_atan(self,x,**kwargs)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_log(self,x,**kwargs)
sympy.functions.elementary.trigonometric.asin.eval(cls,arg)
sympy.functions.elementary.trigonometric.asin.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.asin.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.asin.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.atan(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.atan._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.atan._eval_aseries(self,n,args0,x,logx)
sympy.functions.elementary.trigonometric.atan._eval_is_nonnegative(self)
sympy.functions.elementary.trigonometric.atan._eval_is_positive(self)
sympy.functions.elementary.trigonometric.atan._eval_is_rational(self)
sympy.functions.elementary.trigonometric.atan._eval_is_real(self)
sympy.functions.elementary.trigonometric.atan._eval_is_zero(self)
sympy.functions.elementary.trigonometric.atan._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_acos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_acot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_acsc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_asec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_asin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_log(self,x,**kwargs)
sympy.functions.elementary.trigonometric.atan.eval(cls,arg)
sympy.functions.elementary.trigonometric.atan.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.atan.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.atan.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.atan2(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.atan2._eval_conjugate(self)
sympy.functions.elementary.trigonometric.atan2._eval_evalf(self,prec)
sympy.functions.elementary.trigonometric.atan2._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.atan2._eval_rewrite_as_arg(self,y,x,**kwargs)
sympy.functions.elementary.trigonometric.atan2._eval_rewrite_as_atan(self,y,x,**kwargs)
sympy.functions.elementary.trigonometric.atan2._eval_rewrite_as_log(self,y,x,**kwargs)
sympy.functions.elementary.trigonometric.atan2.eval(cls,y,x)
sympy.functions.elementary.trigonometric.atan2.fdiff(self,argindex)
sympy.functions.elementary.trigonometric.cos(TrigonometricFunction)
sympy.functions.elementary.trigonometric.cos._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.cos._eval_conjugate(self)
sympy.functions.elementary.trigonometric.cos._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.cos._eval_is_complex(self)
sympy.functions.elementary.trigonometric.cos._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.cos._eval_is_finite(self)
sympy.functions.elementary.trigonometric.cos._eval_is_zero(self)
sympy.functions.elementary.trigonometric.cos._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_cot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_csc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_sec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_sin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_sincos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_sqrt(self,arg:Expr,**kwargs)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_tan(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cos.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.cos.eval(cls,arg)
sympy.functions.elementary.trigonometric.cos.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.cos.period(self,symbol=None)
sympy.functions.elementary.trigonometric.cos.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.cot(TrigonometricFunction)
sympy.functions.elementary.trigonometric.cot._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.cot._eval_conjugate(self)
sympy.functions.elementary.trigonometric.cot._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.cot._eval_is_complex(self)
sympy.functions.elementary.trigonometric.cot._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.cot._eval_is_finite(self)
sympy.functions.elementary.trigonometric.cot._eval_is_real(self)
sympy.functions.elementary.trigonometric.cot._eval_is_zero(self)
sympy.functions.elementary.trigonometric.cot._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_cos(self,x,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_csc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_sec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_sin(self,x,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_sincos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_sqrt(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_tan(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.cot._eval_subs(self,old,new)
sympy.functions.elementary.trigonometric.cot.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.cot.eval(cls,arg)
sympy.functions.elementary.trigonometric.cot.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.cot.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.cot.period(self,symbol=None)
sympy.functions.elementary.trigonometric.cot.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.csc(ReciprocalTrigonometricFunction)
sympy.functions.elementary.trigonometric.csc._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.csc._eval_is_complex(self)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_cos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_cot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_sec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_sin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_sincos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_tan(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.csc.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.csc.period(self,symbol=None)
sympy.functions.elementary.trigonometric.csc.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.sec(ReciprocalTrigonometricFunction)
sympy.functions.elementary.trigonometric.sec._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.sec._eval_is_complex(self)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_cos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_cot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_csc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_sin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_sincos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_tan(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sec.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.sec.period(self,symbol=None)
sympy.functions.elementary.trigonometric.sec.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.sin(TrigonometricFunction)
sympy.functions.elementary.trigonometric.sin._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.sin._eval_conjugate(self)
sympy.functions.elementary.trigonometric.sin._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.sin._eval_is_complex(self)
sympy.functions.elementary.trigonometric.sin._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.sin._eval_is_finite(self)
sympy.functions.elementary.trigonometric.sin._eval_is_zero(self)
sympy.functions.elementary.trigonometric.sin._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_cos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_cot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_csc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_sec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_sinc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_sincos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_sqrt(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_tan(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sin.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.sin.eval(cls,arg)
sympy.functions.elementary.trigonometric.sin.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.sin.period(self,symbol=None)
sympy.functions.elementary.trigonometric.sin.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.sinc(Function)
sympy.functions.elementary.trigonometric.sinc._eval_is_real(self)
sympy.functions.elementary.trigonometric.sinc._eval_is_zero(self)
sympy.functions.elementary.trigonometric.sinc._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.sinc._eval_rewrite_as_jn(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sinc._eval_rewrite_as_sin(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.sinc.eval(cls,arg)
sympy.functions.elementary.trigonometric.sinc.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.tan(TrigonometricFunction)
sympy.functions.elementary.trigonometric.tan._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.trigonometric.tan._eval_conjugate(self)
sympy.functions.elementary.trigonometric.tan._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.tan._eval_is_complex(self)
sympy.functions.elementary.trigonometric.tan._eval_is_extended_real(self)
sympy.functions.elementary.trigonometric.tan._eval_is_finite(self)
sympy.functions.elementary.trigonometric.tan._eval_is_real(self)
sympy.functions.elementary.trigonometric.tan._eval_is_zero(self)
sympy.functions.elementary.trigonometric.tan._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_cos(self,x,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_cot(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_csc(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_pow(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_sec(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_sin(self,x,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_sincos(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_sqrt(self,arg,**kwargs)
sympy.functions.elementary.trigonometric.tan.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.tan.eval(cls,arg)
sympy.functions.elementary.trigonometric.tan.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.tan.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.tan.period(self,symbol=None)
sympy.functions.elementary.trigonometric.tan.taylor_term(n,x,*previous_terms)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/complexes.py----------------------------------------
A:sympy.functions.elementary.complexes.args->sympy.core.Add.make_args(arg)
A:sympy.functions.elementary.complexes.coeff->term.as_coefficient(I)
A:sympy.functions.elementary.complexes.real_imag->term.as_real_imag(ignore=arg)
A:sympy.functions.elementary.complexes.s->self.args[0]._eval_nseries(x, n=n, logx=logx)
A:sympy.functions.elementary.complexes.(c, args)->periodic_argument(c, period).as_coeff_mul()
A:sympy.functions.elementary.complexes.ai->im(a)
A:sympy.functions.elementary.complexes.x0->arg0.subs(x, 0)
A:sympy.functions.elementary.complexes.cdir->arg0.dir(x, cdir)
A:sympy.functions.elementary.complexes.obj->periodic_argument(c, period)._eval_transpose()
A:sympy.functions.elementary.complexes.arg->periodic_argument(c, period)
A:sympy.functions.elementary.complexes.(n, d)->periodic_argument(c, period).as_numer_denom()
A:sympy.functions.elementary.complexes.bnew->cls(t.base)
A:sympy.functions.elementary.complexes.tnew->cls(t)
A:sympy.functions.elementary.complexes.known->Mul(*known)
A:sympy.functions.elementary.complexes.(base, exponent)->periodic_argument(c, period).as_base_exp()
A:sympy.functions.elementary.complexes.(a, b)->log(base).as_real_imag()
A:sympy.functions.elementary.complexes.conj->signsimp(arg.conjugate(), evaluate=False)
A:sympy.functions.elementary.complexes.ignore->periodic_argument(c, period).atoms(Abs)
A:sympy.functions.elementary.complexes.abs_free_arg->periodic_argument(c, period).xreplace({i: Dummy(real=True) for i in ignore})
A:sympy.functions.elementary.complexes.direction->direction.subs(log(x), logx).subs(log(x), logx)
A:sympy.functions.elementary.complexes.(c, arg_)->factor_terms(arg).as_coeff_Mul()
A:sympy.functions.elementary.complexes.arg_->Mul(*[a if sign(a) not in (-1, 1) else sign(a) for a in arg_.args])
A:sympy.functions.elementary.complexes.(x, y)->self.args[0].as_real_imag()
A:sympy.functions.elementary.complexes.rv->atan2(y, x)
A:sympy.functions.elementary.complexes.pform->printer._print(self.args[0], *args)
A:sympy.functions.elementary.complexes.ar->argument(arg)
A:sympy.functions.elementary.complexes.(re, im)->a.exp.as_real_imag()
A:sympy.functions.elementary.complexes.unbranched->periodic_argument._getunbranched(z)
A:sympy.functions.elementary.complexes.ub->periodic_argument(pl, oo)
A:sympy.functions.elementary.complexes.barg->periodic_argument(x, period)
A:sympy.functions.elementary.complexes.pl->pl.replace(polar_lift, mr).replace(polar_lift, mr)
A:sympy.functions.elementary.complexes.(c, m)->x.as_coeff_mul(*x.free_symbols)
A:sympy.functions.elementary.complexes.m->tuple(others)
A:sympy.functions.elementary.complexes.p->periodic_argument(z, period)._eval_evalf(prec)
A:sympy.functions.elementary.complexes.r->sympify(eq).func(*[_polarify(arg, lift, pause=True) for arg in eq.args])
A:sympy.functions.elementary.complexes.func->_polarify(eq.function, lift, pause=pause)
A:sympy.functions.elementary.complexes.var->_polarify(limit[0], lift=False, pause=pause)
A:sympy.functions.elementary.complexes.rest->_polarify(limit[1:], lift=lift, pause=pause)
A:sympy.functions.elementary.complexes.eq->sympify(eq)
A:sympy.functions.elementary.complexes.expo->_unpolarify(eq.exp, exponents_only)
A:sympy.functions.elementary.complexes.base->_unpolarify(eq.base, exponents_only, not (expo.is_integer and (not pause)))
A:sympy.functions.elementary.complexes.res->_unpolarify(eq, exponents_only, pause)
sympy.functions.elementary.Abs(Function)
sympy.functions.elementary.adjoint(Function)
sympy.functions.elementary.arg(Function)
sympy.functions.elementary.complexes.Abs(Function)
sympy.functions.elementary.complexes.Abs._eval_derivative(self,x)
sympy.functions.elementary.complexes.Abs._eval_is_algebraic(self)
sympy.functions.elementary.complexes.Abs._eval_is_even(self)
sympy.functions.elementary.complexes.Abs._eval_is_extended_nonzero(self)
sympy.functions.elementary.complexes.Abs._eval_is_extended_positive(self)
sympy.functions.elementary.complexes.Abs._eval_is_integer(self)
sympy.functions.elementary.complexes.Abs._eval_is_odd(self)
sympy.functions.elementary.complexes.Abs._eval_is_rational(self)
sympy.functions.elementary.complexes.Abs._eval_is_real(self)
sympy.functions.elementary.complexes.Abs._eval_is_zero(self)
sympy.functions.elementary.complexes.Abs._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.complexes.Abs._eval_power(self,exponent)
sympy.functions.elementary.complexes.Abs._eval_rewrite_as_Heaviside(self,arg,**kwargs)
sympy.functions.elementary.complexes.Abs._eval_rewrite_as_Piecewise(self,arg,**kwargs)
sympy.functions.elementary.complexes.Abs._eval_rewrite_as_conjugate(self,arg,**kwargs)
sympy.functions.elementary.complexes.Abs._eval_rewrite_as_sign(self,arg,**kwargs)
sympy.functions.elementary.complexes.Abs.eval(cls,arg)
sympy.functions.elementary.complexes.Abs.fdiff(self,argindex=1)
sympy.functions.elementary.complexes._polarify(eq,lift,pause=False)
sympy.functions.elementary.complexes._unpolarify(eq,exponents_only,pause=False)
sympy.functions.elementary.complexes.adjoint(Function)
sympy.functions.elementary.complexes.adjoint._eval_adjoint(self)
sympy.functions.elementary.complexes.adjoint._eval_conjugate(self)
sympy.functions.elementary.complexes.adjoint._eval_transpose(self)
sympy.functions.elementary.complexes.adjoint._latex(self,printer,exp=None,*args)
sympy.functions.elementary.complexes.adjoint._pretty(self,printer,*args)
sympy.functions.elementary.complexes.adjoint.eval(cls,arg)
sympy.functions.elementary.complexes.arg(Function)
sympy.functions.elementary.complexes.arg._eval_derivative(self,t)
sympy.functions.elementary.complexes.arg._eval_rewrite_as_atan2(self,arg,**kwargs)
sympy.functions.elementary.complexes.arg.eval(cls,arg)
sympy.functions.elementary.complexes.conjugate(Function)
sympy.functions.elementary.complexes.conjugate._eval_Abs(self)
sympy.functions.elementary.complexes.conjugate._eval_adjoint(self)
sympy.functions.elementary.complexes.conjugate._eval_conjugate(self)
sympy.functions.elementary.complexes.conjugate._eval_derivative(self,x)
sympy.functions.elementary.complexes.conjugate._eval_is_algebraic(self)
sympy.functions.elementary.complexes.conjugate._eval_transpose(self)
sympy.functions.elementary.complexes.conjugate.eval(cls,arg)
sympy.functions.elementary.complexes.conjugate.inverse(self)
sympy.functions.elementary.complexes.im(Function)
sympy.functions.elementary.complexes.im._eval_derivative(self,x)
sympy.functions.elementary.complexes.im._eval_is_algebraic(self)
sympy.functions.elementary.complexes.im._eval_is_complex(self)
sympy.functions.elementary.complexes.im._eval_is_finite(self)
sympy.functions.elementary.complexes.im._eval_is_zero(self)
sympy.functions.elementary.complexes.im._eval_rewrite_as_re(self,arg,**kwargs)
sympy.functions.elementary.complexes.im.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.complexes.im.eval(cls,arg)
sympy.functions.elementary.complexes.periodic_argument(Function)
sympy.functions.elementary.complexes.periodic_argument._eval_evalf(self,prec)
sympy.functions.elementary.complexes.periodic_argument._getunbranched(cls,ar)
sympy.functions.elementary.complexes.periodic_argument.eval(cls,ar,period)
sympy.functions.elementary.complexes.polar_lift(Function)
sympy.functions.elementary.complexes.polar_lift._eval_Abs(self)
sympy.functions.elementary.complexes.polar_lift._eval_evalf(self,prec)
sympy.functions.elementary.complexes.polar_lift.eval(cls,arg)
sympy.functions.elementary.complexes.polarify(eq,subs=True,lift=False)
sympy.functions.elementary.complexes.principal_branch(Function)
sympy.functions.elementary.complexes.principal_branch._eval_evalf(self,prec)
sympy.functions.elementary.complexes.principal_branch.eval(self,x,period)
sympy.functions.elementary.complexes.re(Function)
sympy.functions.elementary.complexes.re._eval_derivative(self,x)
sympy.functions.elementary.complexes.re._eval_is_algebraic(self)
sympy.functions.elementary.complexes.re._eval_is_complex(self)
sympy.functions.elementary.complexes.re._eval_is_finite(self)
sympy.functions.elementary.complexes.re._eval_is_zero(self)
sympy.functions.elementary.complexes.re._eval_rewrite_as_im(self,arg,**kwargs)
sympy.functions.elementary.complexes.re.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.complexes.re.eval(cls,arg)
sympy.functions.elementary.complexes.sign(Function)
sympy.functions.elementary.complexes.sign._eval_Abs(self)
sympy.functions.elementary.complexes.sign._eval_conjugate(self)
sympy.functions.elementary.complexes.sign._eval_derivative(self,x)
sympy.functions.elementary.complexes.sign._eval_is_imaginary(self)
sympy.functions.elementary.complexes.sign._eval_is_integer(self)
sympy.functions.elementary.complexes.sign._eval_is_nonnegative(self)
sympy.functions.elementary.complexes.sign._eval_is_nonpositive(self)
sympy.functions.elementary.complexes.sign._eval_is_zero(self)
sympy.functions.elementary.complexes.sign._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.complexes.sign._eval_power(self,other)
sympy.functions.elementary.complexes.sign._eval_rewrite_as_Abs(self,arg,**kwargs)
sympy.functions.elementary.complexes.sign._eval_rewrite_as_Heaviside(self,arg,**kwargs)
sympy.functions.elementary.complexes.sign._eval_rewrite_as_Piecewise(self,arg,**kwargs)
sympy.functions.elementary.complexes.sign._eval_simplify(self,**kwargs)
sympy.functions.elementary.complexes.sign.doit(self,**hints)
sympy.functions.elementary.complexes.sign.eval(cls,arg)
sympy.functions.elementary.complexes.transpose(Function)
sympy.functions.elementary.complexes.transpose._eval_adjoint(self)
sympy.functions.elementary.complexes.transpose._eval_conjugate(self)
sympy.functions.elementary.complexes.transpose._eval_transpose(self)
sympy.functions.elementary.complexes.transpose.eval(cls,arg)
sympy.functions.elementary.complexes.unbranched_argument(arg)
sympy.functions.elementary.complexes.unpolarify(eq,subs=None,exponents_only=False)
sympy.functions.elementary.conjugate(Function)
sympy.functions.elementary.im(Function)
sympy.functions.elementary.periodic_argument(Function)
sympy.functions.elementary.polar_lift(Function)
sympy.functions.elementary.polarify(eq,subs=True,lift=False)
sympy.functions.elementary.principal_branch(Function)
sympy.functions.elementary.re(Function)
sympy.functions.elementary.sign(Function)
sympy.functions.elementary.transpose(Function)
sympy.functions.elementary.unbranched_argument(arg)
sympy.functions.elementary.unpolarify(eq,subs=None,exponents_only=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/piecewise.py----------------------------------------
A:sympy.functions.elementary.piecewise.expr->expr.subs(*e.args).subs(*e.args)
A:sympy.functions.elementary.piecewise.cond->And(*eqs + other)
A:sympy.functions.elementary.piecewise.pair->ExprCondPair(*getattr(ec, 'args', ec))
A:sympy.functions.elementary.piecewise.eval->options.pop('evaluate', global_parameters.evaluate)
A:sympy.functions.elementary.piecewise.r->cls.eval(*newargs)
A:sympy.functions.elementary.piecewise.newargs->_piecewise_collapse_arguments(_args)
A:sympy.functions.elementary.piecewise.same->all((a == b for (a, b) in zip(newargs, _args)))
A:sympy.functions.elementary.piecewise.newe->simplify(e, doit=False, **kwargs)
A:sympy.functions.elementary.piecewise.c->simplify(c, **kwargs)
A:sympy.functions.elementary.piecewise.rel->self.atoms(Relational)
A:sympy.functions.elementary.piecewise.irel->list(ordered([r for r in rel if x not in r.free_symbols and r not in (S.true, S.false)]))
A:sympy.functions.elementary.piecewise.reps->dict(zip(irel, truth))
A:sympy.functions.elementary.piecewise.andargs->Tuple(*[i for i in reps if reps[i]])
A:sympy.functions.elementary.piecewise.free->list(andargs.free_symbols)
A:sympy.functions.elementary.piecewise.t->And(*andargs)
A:sympy.functions.elementary.piecewise.args[k]->Or(*args[k])
A:sympy.functions.elementary.piecewise.irv->self._handle_irel(x, handler)
A:sympy.functions.elementary.piecewise.(ok, abei)->self._intervals(x)
A:sympy.functions.elementary.piecewise.done[j:j + 1]->_clip(p, (a, b), k)
A:sympy.functions.elementary.piecewise.anti->integrate(abei[i][-2], x, **kwargs)
A:sympy.functions.elementary.piecewise.sum->sum.subs(x, a).subs(x, a)
A:sympy.functions.elementary.piecewise.e->piecewise_fold(e)
A:sympy.functions.elementary.piecewise.(x, lo, hi)->map(as_Basic, (sym, a, b))
A:sympy.functions.elementary.piecewise.rv->Piecewise(*new_args, evaluate=evaluate)
A:sympy.functions.elementary.piecewise._a->Dummy('lo')
A:sympy.functions.elementary.piecewise._b->Dummy('hi')
A:sympy.functions.elementary.piecewise.pos->touch(pos)
A:sympy.functions.elementary.piecewise.p->Dummy('', positive=True)
A:sympy.functions.elementary.piecewise.neg->touch(neg)
A:sympy.functions.elementary.piecewise.args->_piecewise_simplify_equal_to_next_segment(args)
A:sympy.functions.elementary.piecewise.keys->self.atoms(Relational)
A:sympy.functions.elementary.piecewise.(ok, s)->_solve_relational(r)
A:sympy.functions.elementary.piecewise.upper->Min(cond2.gts, upper)
A:sympy.functions.elementary.piecewise.lower->Max(cond2.lts, lower)
A:sympy.functions.elementary.piecewise.exclude->list(ordered(exclude))
A:sympy.functions.elementary.piecewise.a->getattr(expr, is_attr)
A:sympy.functions.elementary.piecewise.cond_free->set()
A:sympy.functions.elementary.piecewise.cond_int->U.intersect(cond.as_set())
A:sympy.functions.elementary.piecewise.default->any((c == True for (b, c) in args))
A:sympy.functions.elementary.piecewise.x->f1.pop()
A:sympy.functions.elementary.piecewise.byfree[x]->byfree.setdefault(x, S.EmptySet).union(c.as_set())
A:sympy.functions.elementary.piecewise.args[i]->args[i].func(expr, cond).func(expr, cond)
A:sympy.functions.elementary.piecewise.last->ITE(c, a, last)
A:sympy.functions.elementary.piecewise.k->rewrite(cond)
A:sympy.functions.elementary.piecewise.(p, args)->sift(expr.args, lambda x: x.is_Piecewise, binary=True)
A:sympy.functions.elementary.piecewise.pc->sift(p, lambda x: tuple([c for (e, c) in x.args]))
A:sympy.functions.elementary.piecewise.com->common_prefix(*[[i.cond for i in j] for j in pargs])
A:sympy.functions.elementary.piecewise.n->len(com)
A:sympy.functions.elementary.piecewise.folded->list(map(piecewise_fold, args))
A:sympy.functions.elementary.piecewise.(e, c)->zip(*ec)
A:sympy.functions.elementary.piecewise.new_args->list(reversed([(e, c) for (c, e) in {c: e for (e, c) in reversed(new_args)}.items()]))
A:sympy.functions.elementary.piecewise.(ok, abe_)->expr.subs(*e.args).subs(*e.args)._intervals(x, err_on_Eq=True)
A:sympy.functions.elementary.piecewise.incl_a->include(c, x, a)
A:sympy.functions.elementary.piecewise.incl_b->include(c, x, b)
A:sympy.functions.elementary.piecewise.iv->Interval(a, b, not incl_a, not incl_b)
A:sympy.functions.elementary.piecewise.doit->kwargs.pop('doit', None)
A:sympy.functions.elementary.piecewise.current_cond->set()
A:sympy.functions.elementary.piecewise.orcond->distribute_and_over_or(orcond)
A:sympy.functions.elementary.piecewise.newargs[-1]->ExprCondPair(expr, orcond)
A:sympy.functions.elementary.piecewise.(eqs, other)->sift(cond.args, lambda i: isinstance(i, Eq), binary=True)
A:sympy.functions.elementary.piecewise.eqs->list(ordered(eqs))
A:sympy.functions.elementary.piecewise._prevexpr->_prevexpr.subs(*e.args).subs(*e.args)
A:sympy.functions.elementary.piecewise._expr->_expr.subs(*e.args).subs(*e.args)
A:sympy.functions.elementary.piecewise.cancond->And(cond_i, Not(cumcond)).simplify()
A:sympy.functions.elementary.piecewise.cumcond->Or(cond_n, cumcond).simplify()
A:sympy.functions.elementary.piecewise.cancond_n->And(cond_n, Not(cumcond)).simplify()
sympy.functions.elementary.Piecewise(cls,*args,**options)
sympy.functions.elementary.piecewise.ExprCondPair(cls,expr,cond)
sympy.functions.elementary.piecewise.ExprCondPair.__iter__(self)
sympy.functions.elementary.piecewise.ExprCondPair._eval_simplify(self,**kwargs)
sympy.functions.elementary.piecewise.ExprCondPair.cond(self)
sympy.functions.elementary.piecewise.ExprCondPair.expr(self)
sympy.functions.elementary.piecewise.ExprCondPair.is_commutative(self)
sympy.functions.elementary.piecewise.Piecewise(cls,*args,**options)
sympy.functions.elementary.piecewise.Piecewise.__eval_cond(cls,cond)
sympy.functions.elementary.piecewise.Piecewise._eval_adjoint(self)
sympy.functions.elementary.piecewise.Piecewise._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.piecewise.Piecewise._eval_conjugate(self)
sympy.functions.elementary.piecewise.Piecewise._eval_derivative(self,x)
sympy.functions.elementary.piecewise.Piecewise._eval_evalf(self,prec)
sympy.functions.elementary.piecewise.Piecewise._eval_integral(self,x,_first=True,**kwargs)
sympy.functions.elementary.piecewise.Piecewise._eval_interval(self,sym,a,b,_first=True)
sympy.functions.elementary.piecewise.Piecewise._eval_is_meromorphic(self,x,a)
sympy.functions.elementary.piecewise.Piecewise._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.piecewise.Piecewise._eval_power(self,s)
sympy.functions.elementary.piecewise.Piecewise._eval_rewrite_as_ITE(self,*args,**kwargs)
sympy.functions.elementary.piecewise.Piecewise._eval_rewrite_as_KroneckerDelta(self,*args)
sympy.functions.elementary.piecewise.Piecewise._eval_simplify(self,**kwargs)
sympy.functions.elementary.piecewise.Piecewise._eval_subs(self,old,new)
sympy.functions.elementary.piecewise.Piecewise._eval_template_is_attr(self,is_attr)
sympy.functions.elementary.piecewise.Piecewise._eval_transpose(self)
sympy.functions.elementary.piecewise.Piecewise._handle_irel(self,x,handler)
sympy.functions.elementary.piecewise.Piecewise._intervals(self,sym,err_on_Eq=False)
sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs(self,domain=None)
sympy.functions.elementary.piecewise.Piecewise.doit(self,**hints)
sympy.functions.elementary.piecewise.Piecewise.eval(cls,*_args)
sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate(self,x,**kwargs)
sympy.functions.elementary.piecewise._clip(A,B,k)
sympy.functions.elementary.piecewise._piecewise_collapse_arguments(_args)
sympy.functions.elementary.piecewise._piecewise_simplify_eq_and(args)
sympy.functions.elementary.piecewise._piecewise_simplify_equal_to_next_segment(args)
sympy.functions.elementary.piecewise.piecewise_exclusive(expr,*,skip_nan=False,deep=True)
sympy.functions.elementary.piecewise.piecewise_fold(expr,evaluate=True)
sympy.functions.elementary.piecewise.piecewise_simplify(expr,**kwargs)
sympy.functions.elementary.piecewise.piecewise_simplify_arguments(expr,**kwargs)
sympy.functions.elementary.piecewise_exclusive(expr,*,skip_nan=False,deep=True)
sympy.functions.elementary.piecewise_fold(expr,evaluate=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/exponential.py----------------------------------------
A:sympy.functions.elementary.exponential.neg_exp->exp.could_extract_minus_sign()
A:sympy.functions.elementary.exponential.s->expand_multinomial(s)
A:sympy.functions.elementary.exponential.(b, e)->self.as_base_exp()
A:sympy.functions.elementary.exponential.i->im(self.args[0])
A:sympy.functions.elementary.exponential.res->res.subs(t, x / cdir).subs(t, x / cdir)
A:sympy.functions.elementary.exponential.coeff->self.args[0].nseries(x, n=n, logx=logx).as_coefficient(I)
A:sympy.functions.elementary.exponential.(coeff, terms)->self.args[0].nseries(x, n=n, logx=logx).as_coeff_Mul()
A:sympy.functions.elementary.exponential.term_->logcombine(term)
A:sympy.functions.elementary.exponential.newa->cls(a)
A:sympy.functions.elementary.exponential.x->sympify(x)
A:sympy.functions.elementary.exponential.(re, im)->self.args[0].as_real_imag()
A:sympy.functions.elementary.exponential.re->sympy.functions.elementary.complexes.re.expand(deep, **hints).expand(deep, **hints)
A:sympy.functions.elementary.exponential.im->sympy.functions.elementary.complexes.im.expand(deep, **hints).expand(deep, **hints)
A:sympy.functions.elementary.exponential.old->exp(old.exp * log(old.base))
A:sympy.functions.elementary.exponential.arg_series->self.args[0].nseries(x, n=n, logx=logx)._eval_nseries(x, n=n, logx=logx)
A:sympy.functions.elementary.exponential.arg0->self.args[0].nseries(x, n=n, logx=logx).subs(x, 0).cancel()
A:sympy.functions.elementary.exponential.t->Dummy('t', positive=True)
A:sympy.functions.elementary.exponential.cf->Order(arg.as_leading_term(x, logx=logx), x).getn()
A:sympy.functions.elementary.exponential.nterms->ceiling(n / cf)
A:sympy.functions.elementary.exponential.exp_series->exp(t)._taylor(t, nterms)
A:sympy.functions.elementary.exponential.r->arg0.subs(x, cdir * t).match(k * t ** l)
A:sympy.functions.elementary.exponential.w->Wild('w', properties=[simplerat])
A:sympy.functions.elementary.exponential.g->g.nseries(x, n=n).nseries(x, n=n)
A:sympy.functions.elementary.exponential.arg->self.args[0].nseries(x, n=n, logx=logx)
A:sympy.functions.elementary.exponential.(r_, i_)->expand_mul(arg_, deep=False).as_independent(I, as_Add=True)
A:sympy.functions.elementary.exponential.i_->i_.as_coefficient(I).as_coefficient(I)
A:sympy.functions.elementary.exponential.base->sympify(base)
A:sympy.functions.elementary.exponential.n->logcombine(p).getn()
A:sympy.functions.elementary.exponential.(coeff, arg_)->self.args[0].nseries(x, n=n, logx=logx).as_independent(I, as_Add=False)
A:sympy.functions.elementary.exponential.arg_->expand_mul(arg_, deep=False)
A:sympy.functions.elementary.exponential.t1->(-t).cancel()
A:sympy.functions.elementary.exponential.atan_table->_log_atan_table()
A:sympy.functions.elementary.exponential.modulus->ratsimp(coeff * Abs(arg_))
A:sympy.functions.elementary.exponential.force->hints.get('force', False)
A:sympy.functions.elementary.exponential.factor->hints.get('factor', False)
A:sympy.functions.elementary.exponential.p->logcombine(p)
A:sympy.functions.elementary.exponential.logarg->sum((n * log(val) for (val, n) in p.items()))
A:sympy.functions.elementary.exponential.a->self.func(b)
A:sympy.functions.elementary.exponential.expr->self.expand(**logflags)
A:sympy.functions.elementary.exponential.sarg->self.args[0].expand(deep, **hints)
A:sympy.functions.elementary.exponential.sarg_abs->Abs(sarg)
A:sympy.functions.elementary.exponential.sarg_arg->arg(sarg)
A:sympy.functions.elementary.exponential.z->self.args[0].nseries(x, n=n, logx=logx).subs(x, 0).cancel().subs(x, cdir * t)
A:sympy.functions.elementary.exponential.(base, exp)->hints.get('factor', False).as_base_exp()
A:sympy.functions.elementary.exponential.(a, b)->expand_multinomial(s).removeO().leadterm(t, cdir=1)
A:sympy.functions.elementary.exponential.(_, d)->coeff_exp(p, t)
A:sympy.functions.elementary.exponential._res->_res.subs(logx, log(x)).expand(**logflags).subs(logx, log(x)).expand(**logflags)
A:sympy.functions.elementary.exponential.(co1, e1)->coeff_exp(term, t)
A:sympy.functions.elementary.exponential.terms[ex]->_.nsimplify()
A:sympy.functions.elementary.exponential.pk->mul(pk, pterms)
A:sympy.functions.elementary.exponential.(coeff, _)->term.as_coeff_exponent(t)
A:sympy.functions.elementary.exponential.(c, e)->self.args[0].nseries(x, n=n, logx=logx).subs(x, 0).cancel().subs(x, cdir * t).leadterm(t, logx=logx, cdir=1)
A:sympy.functions.elementary.exponential.c->c.subs(t, x / cdir).subs(t, x / cdir)
A:sympy.functions.elementary.exponential.lt->self.args[0].nseries(x, n=n, logx=logx).as_leading_term(x, logx=logx)
sympy.functions.elementary.LambertW(Function)
sympy.functions.elementary.exp(ExpBase,metaclass=ExpMeta)
sympy.functions.elementary.exp_polar(ExpBase)
sympy.functions.elementary.exponential.ExpBase(Function)
sympy.functions.elementary.exponential.ExpBase._eval_adjoint(self)
sympy.functions.elementary.exponential.ExpBase._eval_conjugate(self)
sympy.functions.elementary.exponential.ExpBase._eval_expand_power_exp(self,**hints)
sympy.functions.elementary.exponential.ExpBase._eval_is_finite(self)
sympy.functions.elementary.exponential.ExpBase._eval_is_rational(self)
sympy.functions.elementary.exponential.ExpBase._eval_is_zero(self)
sympy.functions.elementary.exponential.ExpBase._eval_power(self,other)
sympy.functions.elementary.exponential.ExpBase._eval_transpose(self)
sympy.functions.elementary.exponential.ExpBase.as_base_exp(self)
sympy.functions.elementary.exponential.ExpBase.as_numer_denom(self)
sympy.functions.elementary.exponential.ExpBase.exp(self)
sympy.functions.elementary.exponential.ExpBase.inverse(self,argindex=1)
sympy.functions.elementary.exponential.ExpBase.kind(self)
sympy.functions.elementary.exponential.ExpMeta(FunctionClass)
sympy.functions.elementary.exponential.ExpMeta.__instancecheck__(cls,instance)
sympy.functions.elementary.exponential.LambertW(Function)
sympy.functions.elementary.exponential.LambertW._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.exponential.LambertW._eval_is_algebraic(self)
sympy.functions.elementary.exponential.LambertW._eval_is_extended_real(self)
sympy.functions.elementary.exponential.LambertW._eval_is_finite(self)
sympy.functions.elementary.exponential.LambertW._eval_is_zero(self)
sympy.functions.elementary.exponential.LambertW._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.exponential.LambertW.eval(cls,x,k=None)
sympy.functions.elementary.exponential.LambertW.fdiff(self,argindex=1)
sympy.functions.elementary.exponential._log_atan_table()
sympy.functions.elementary.exponential.exp(ExpBase,metaclass=ExpMeta)
sympy.functions.elementary.exponential.exp._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.exponential.exp._eval_is_algebraic(self)
sympy.functions.elementary.exponential.exp._eval_is_complex(self)
sympy.functions.elementary.exponential.exp._eval_is_extended_positive(self)
sympy.functions.elementary.exponential.exp._eval_is_extended_real(self)
sympy.functions.elementary.exponential.exp._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.exponential.exp._eval_refine(self,assumptions)
sympy.functions.elementary.exponential.exp._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.functions.elementary.exponential.exp._eval_rewrite_as_cos(self,arg,**kwargs)
sympy.functions.elementary.exponential.exp._eval_rewrite_as_sin(self,arg,**kwargs)
sympy.functions.elementary.exponential.exp._eval_rewrite_as_sqrt(self,arg,**kwargs)
sympy.functions.elementary.exponential.exp._eval_rewrite_as_tanh(self,arg,**kwargs)
sympy.functions.elementary.exponential.exp._eval_subs(self,old,new)
sympy.functions.elementary.exponential.exp._taylor(self,x,n)
sympy.functions.elementary.exponential.exp.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.exponential.exp.base(self)
sympy.functions.elementary.exponential.exp.eval(cls,arg)
sympy.functions.elementary.exponential.exp.fdiff(self,argindex=1)
sympy.functions.elementary.exponential.exp.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.exponential.exp_polar(ExpBase)
sympy.functions.elementary.exponential.exp_polar._eval_Abs(self)
sympy.functions.elementary.exponential.exp_polar._eval_evalf(self,prec)
sympy.functions.elementary.exponential.exp_polar._eval_is_extended_real(self)
sympy.functions.elementary.exponential.exp_polar._eval_power(self,other)
sympy.functions.elementary.exponential.exp_polar.as_base_exp(self)
sympy.functions.elementary.exponential.log(Function)
sympy.functions.elementary.exponential.log._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.functions.elementary.exponential.log._eval_expand_log(self,deep=True,**hints)
sympy.functions.elementary.exponential.log._eval_is_algebraic(self)
sympy.functions.elementary.exponential.log._eval_is_complex(self)
sympy.functions.elementary.exponential.log._eval_is_extended_nonnegative(self)
sympy.functions.elementary.exponential.log._eval_is_extended_positive(self)
sympy.functions.elementary.exponential.log._eval_is_extended_real(self)
sympy.functions.elementary.exponential.log._eval_is_finite(self)
sympy.functions.elementary.exponential.log._eval_is_rational(self)
sympy.functions.elementary.exponential.log._eval_is_zero(self)
sympy.functions.elementary.exponential.log._eval_nseries(self,x,n,logx,cdir=0)
sympy.functions.elementary.exponential.log._eval_simplify(self,**kwargs)
sympy.functions.elementary.exponential.log.as_base_exp(self)
sympy.functions.elementary.exponential.log.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.exponential.log.eval(cls,arg,base=None)
sympy.functions.elementary.exponential.log.fdiff(self,argindex=1)
sympy.functions.elementary.exponential.log.inverse(self,argindex=1)
sympy.functions.elementary.exponential.log.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.exponential.match_real_imag(expr)
sympy.functions.elementary.log(Function)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/test_interface.py----------------------------------------
A:sympy.functions.elementary.tests.test_interface.arg->sympify(arg)
A:sympy.functions.elementary.tests.test_interface.e->tanh(x)
A:sympy.functions.elementary.tests.test_interface.f->mytanh(x)
sympy.functions.elementary.tests.test_interface.test_function_series1()
sympy.functions.elementary.tests.test_interface.test_function_series2()
sympy.functions.elementary.tests.test_interface.test_function_series3()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/test_trigonometric.py----------------------------------------
A:sympy.functions.elementary.tests.test_trigonometric.(x, y, z)->symbols('x y z')
A:sympy.functions.elementary.tests.test_trigonometric.r->symbols('r', real=True)
A:sympy.functions.elementary.tests.test_trigonometric.(k, m)->symbols('k m', integer=True)
A:sympy.functions.elementary.tests.test_trigonometric.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_trigonometric.n->Symbol('n', integer=True, positive=True)
A:sympy.functions.elementary.tests.test_trigonometric.np->Symbol('p', nonpositive=True)
A:sympy.functions.elementary.tests.test_trigonometric.nn->Symbol('n', nonnegative=True)
A:sympy.functions.elementary.tests.test_trigonometric.nz->Symbol('nz', nonzero=True)
A:sympy.functions.elementary.tests.test_trigonometric.ep->Symbol('ep', extended_positive=True)
A:sympy.functions.elementary.tests.test_trigonometric.en->Symbol('en', extended_negative=True)
A:sympy.functions.elementary.tests.test_trigonometric.enp->Symbol('ep', extended_nonpositive=True)
A:sympy.functions.elementary.tests.test_trigonometric.enn->Symbol('en', extended_nonnegative=True)
A:sympy.functions.elementary.tests.test_trigonometric.enz->Symbol('enz', extended_nonzero=True)
A:sympy.functions.elementary.tests.test_trigonometric.a->cos(2)
A:sympy.functions.elementary.tests.test_trigonometric.na->Symbol('na', nonzero=True, algebraic=True)
A:sympy.functions.elementary.tests.test_trigonometric.(x, y)->symbols('x, y')
A:sympy.functions.elementary.tests.test_trigonometric.z->Symbol('z', real=False, finite=True)
A:sympy.functions.elementary.tests.test_trigonometric.ne->symbols('ne', integer=True, even=False)
A:sympy.functions.elementary.tests.test_trigonometric.e->cos(pi / 3 / 17)
A:sympy.functions.elementary.tests.test_trigonometric.q->Symbol('q', rational=True)
A:sympy.functions.elementary.tests.test_trigonometric.qn->Symbol('qn', rational=True, nonzero=True)
A:sympy.functions.elementary.tests.test_trigonometric.c->Float('123456789012345678901234567890.25', '')
A:sympy.functions.elementary.tests.test_trigonometric.i->Symbol('i', integer=True)
A:sympy.functions.elementary.tests.test_trigonometric.s->Symbol('s', zero=True)
A:sympy.functions.elementary.tests.test_trigonometric.xr->Symbol('xr', real=True, nonzero=True)
A:sympy.functions.elementary.tests.test_trigonometric.t5->acos(x).taylor_term(5, x)
A:sympy.functions.elementary.tests.test_trigonometric.eq->atan2(r, i)
A:sympy.functions.elementary.tests.test_trigonometric.x->Symbol('x')
A:sympy.functions.elementary.tests.test_trigonometric.y->A('Y')
A:sympy.functions.elementary.tests.test_trigonometric.u->Symbol('u', negative=True)
A:sympy.functions.elementary.tests.test_trigonometric.rewrite->cos(pi / 3 / 17).rewrite(arg)
A:sympy.functions.elementary.tests.test_trigonometric.b->sin(1)
A:sympy.functions.elementary.tests.test_trigonometric.o->Symbol('o', odd=True)
A:sympy.functions.elementary.tests.test_trigonometric.(a, b)->symbols('a b', real=True)
A:sympy.functions.elementary.tests.test_trigonometric.s1->sin(x).rewrite(sqrt)
A:sympy.functions.elementary.tests.test_trigonometric.c1->cot(x).rewrite(sqrt)
A:sympy.functions.elementary.tests.test_trigonometric.t1->tan(x).rewrite(sqrt)
A:sympy.functions.elementary.tests.test_trigonometric.cosecant->csc('x')
A:sympy.functions.elementary.tests.test_trigonometric.t->Symbol('t', real=False, finite=True)
A:sympy.functions.elementary.tests.test_trigonometric.t4->asec(x).taylor_term(4, x)
A:sympy.functions.elementary.tests.test_trigonometric.t6->acsc(x).taylor_term(6, x)
A:sympy.functions.elementary.tests.test_trigonometric.(w, k)->symbols('w, k', real=True)
A:sympy.functions.elementary.tests.test_trigonometric.F->Piecewise((1, Eq(2 * pi * k, 0)), (sin(pi * k) / (pi * k), True))
A:sympy.functions.elementary.tests.test_trigonometric.soln->Piecewise((1, Eq(2 * pi * k, 0)), (sinc(pi * k), True))
A:sympy.functions.elementary.tests.test_trigonometric.expr->atan(I / (I + I * tan(1)))
A:sympy.functions.elementary.tests.test_trigonometric.e3->cos(S.Pi * (x / 4 + 1 / 4))
sympy.functions.elementary.tests.test_trigonometric._check_even_rewrite(func,arg)
sympy.functions.elementary.tests.test_trigonometric._check_no_rewrite(func,arg)
sympy.functions.elementary.tests.test_trigonometric._check_odd_rewrite(func,arg)
sympy.functions.elementary.tests.test_trigonometric._test_extrig(f,i,e)
sympy.functions.elementary.tests.test_trigonometric.test_acos()
sympy.functions.elementary.tests.test_trigonometric.test_acos_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_acos_leading_term()
sympy.functions.elementary.tests.test_trigonometric.test_acos_nseries()
sympy.functions.elementary.tests.test_trigonometric.test_acos_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_acos_series()
sympy.functions.elementary.tests.test_trigonometric.test_acot()
sympy.functions.elementary.tests.test_trigonometric.test_acot_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_acot_leading_term()
sympy.functions.elementary.tests.test_trigonometric.test_acot_nseries()
sympy.functions.elementary.tests.test_trigonometric.test_acot_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_acsc()
sympy.functions.elementary.tests.test_trigonometric.test_acsc_leading_term()
sympy.functions.elementary.tests.test_trigonometric.test_acsc_nseries()
sympy.functions.elementary.tests.test_trigonometric.test_acsc_series()
sympy.functions.elementary.tests.test_trigonometric.test_as_leading_term_issue_5272()
sympy.functions.elementary.tests.test_trigonometric.test_as_real_imag()
sympy.functions.elementary.tests.test_trigonometric.test_asec()
sympy.functions.elementary.tests.test_trigonometric.test_asec_is_real()
sympy.functions.elementary.tests.test_trigonometric.test_asec_leading_term()
sympy.functions.elementary.tests.test_trigonometric.test_asec_nseries()
sympy.functions.elementary.tests.test_trigonometric.test_asec_series()
sympy.functions.elementary.tests.test_trigonometric.test_aseries()
sympy.functions.elementary.tests.test_trigonometric.test_asin()
sympy.functions.elementary.tests.test_trigonometric.test_asin_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_asin_leading_term()
sympy.functions.elementary.tests.test_trigonometric.test_asin_nseries()
sympy.functions.elementary.tests.test_trigonometric.test_asin_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_asin_series()
sympy.functions.elementary.tests.test_trigonometric.test_atan()
sympy.functions.elementary.tests.test_trigonometric.test_atan2()
sympy.functions.elementary.tests.test_trigonometric.test_atan2_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_atan_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_atan_leading_term()
sympy.functions.elementary.tests.test_trigonometric.test_atan_nseries()
sympy.functions.elementary.tests.test_trigonometric.test_atan_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_attributes()
sympy.functions.elementary.tests.test_trigonometric.test_cos()
sympy.functions.elementary.tests.test_trigonometric.test_cos_AccumBounds()
sympy.functions.elementary.tests.test_trigonometric.test_cos_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_cos_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_cos_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_cos_series()
sympy.functions.elementary.tests.test_trigonometric.test_cot()
sympy.functions.elementary.tests.test_trigonometric.test_cot_AccumBounds()
sympy.functions.elementary.tests.test_trigonometric.test_cot_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_cot_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_cot_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_cot_rewrite_slow()
sympy.functions.elementary.tests.test_trigonometric.test_cot_series()
sympy.functions.elementary.tests.test_trigonometric.test_cot_subs()
sympy.functions.elementary.tests.test_trigonometric.test_csc()
sympy.functions.elementary.tests.test_trigonometric.test_csc_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_evenodd_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_inverses()
sympy.functions.elementary.tests.test_trigonometric.test_issue_11864()
sympy.functions.elementary.tests.test_trigonometric.test_issue_14320()
sympy.functions.elementary.tests.test_trigonometric.test_issue_14543()
sympy.functions.elementary.tests.test_trigonometric.test_issue_17461()
sympy.functions.elementary.tests.test_trigonometric.test_issue_18746()
sympy.functions.elementary.tests.test_trigonometric.test_issue_4420()
sympy.functions.elementary.tests.test_trigonometric.test_issue_6190()
sympy.functions.elementary.tests.test_trigonometric.test_issue_7171()
sympy.functions.elementary.tests.test_trigonometric.test_issue_8653()
sympy.functions.elementary.tests.test_trigonometric.test_issue_9157()
sympy.functions.elementary.tests.test_trigonometric.test_leading_terms()
sympy.functions.elementary.tests.test_trigonometric.test_real_assumptions()
sympy.functions.elementary.tests.test_trigonometric.test_real_imag()
sympy.functions.elementary.tests.test_trigonometric.test_sec()
sympy.functions.elementary.tests.test_trigonometric.test_sec_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_sec_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_sin()
sympy.functions.elementary.tests.test_trigonometric.test_sin_AccumBounds()
sympy.functions.elementary.tests.test_trigonometric.test_sin_cos()
sympy.functions.elementary.tests.test_trigonometric.test_sin_cos_with_infinity()
sympy.functions.elementary.tests.test_trigonometric.test_sin_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_sin_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_sin_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_sin_series()
sympy.functions.elementary.tests.test_trigonometric.test_sinc()
sympy.functions.elementary.tests.test_trigonometric.test_sincos_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_sincos_rewrite_sqrt()
sympy.functions.elementary.tests.test_trigonometric.test_sincos_rewrite_sqrt_257()
sympy.functions.elementary.tests.test_trigonometric.test_tan()
sympy.functions.elementary.tests.test_trigonometric.test_tan_AccumBounds()
sympy.functions.elementary.tests.test_trigonometric.test_tan_cot_sin_cos_evalf()
sympy.functions.elementary.tests.test_trigonometric.test_tan_cot_sin_cos_ratsimp()
sympy.functions.elementary.tests.test_trigonometric.test_tan_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_tan_fdiff()
sympy.functions.elementary.tests.test_trigonometric.test_tan_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_tan_rewrite_slow()
sympy.functions.elementary.tests.test_trigonometric.test_tan_series()
sympy.functions.elementary.tests.test_trigonometric.test_tan_subs()
sympy.functions.elementary.tests.test_trigonometric.test_tancot_rewrite_sqrt()
sympy.functions.elementary.tests.test_trigonometric.test_trig_period()
sympy.functions.elementary.tests.test_trigonometric.test_trig_symmetry()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/test_integers.py----------------------------------------
A:sympy.functions.elementary.tests.test_integers.x->Symbol('x')
A:sympy.functions.elementary.tests.test_integers.i->Symbol('i', imaginary=True)
A:sympy.functions.elementary.tests.test_integers.y->Symbol('y', real=True)
A:sympy.functions.elementary.tests.test_integers.(k, n)->symbols('k,n', integer=True)
A:sympy.functions.elementary.tests.test_integers.e->ceiling(i)
A:sympy.functions.elementary.tests.test_integers.neg->Symbol('neg', negative=True)
A:sympy.functions.elementary.tests.test_integers.nn->Symbol('nn', nonnegative=True)
A:sympy.functions.elementary.tests.test_integers.pos->Symbol('pos', positive=True)
A:sympy.functions.elementary.tests.test_integers.np->Symbol('np', nonpositive=True)
A:sympy.functions.elementary.tests.test_integers.r->Symbol('r', real=True)
A:sympy.functions.elementary.tests.test_integers.p_i->Symbol('p_i', integer=True, positive=True)
A:sympy.functions.elementary.tests.test_integers.n_i->Symbol('p_i', integer=True, negative=True)
A:sympy.functions.elementary.tests.test_integers.np_i->Symbol('np_i', integer=True, nonpositive=True)
A:sympy.functions.elementary.tests.test_integers.nn_i->Symbol('nn_i', integer=True, nonnegative=True)
A:sympy.functions.elementary.tests.test_integers.p_r->Symbol('p_r', positive=True)
A:sympy.functions.elementary.tests.test_integers.n_r->Symbol('n_r', negative=True)
A:sympy.functions.elementary.tests.test_integers.np_r->Symbol('np_r', real=True, nonpositive=True)
A:sympy.functions.elementary.tests.test_integers.nn_r->Symbol('nn_r', real=True, nonnegative=True)
A:sympy.functions.elementary.tests.test_integers.(x, y)->symbols('x,y')
A:sympy.functions.elementary.tests.test_integers.k->Symbol('k', positive=True, integer=True)
sympy.functions.elementary.tests.test_integers.test_ceiling()
sympy.functions.elementary.tests.test_integers.test_floor()
sympy.functions.elementary.tests.test_integers.test_frac()
sympy.functions.elementary.tests.test_integers.test_frac_leading_term()
sympy.functions.elementary.tests.test_integers.test_issue_11207()
sympy.functions.elementary.tests.test_integers.test_issue_14355()
sympy.functions.elementary.tests.test_integers.test_issue_18421()
sympy.functions.elementary.tests.test_integers.test_issue_18689()
sympy.functions.elementary.tests.test_integers.test_issue_21651()
sympy.functions.elementary.tests.test_integers.test_issue_4149()
sympy.functions.elementary.tests.test_integers.test_nested_floor_ceiling()
sympy.functions.elementary.tests.test_integers.test_series()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/test_complexes.py----------------------------------------
A:sympy.functions.elementary.tests.test_complexes.(x, y)->symbols('x y', commutative=False)
A:sympy.functions.elementary.tests.test_complexes.(a, b)->symbols('a,b', real=True)
A:sympy.functions.elementary.tests.test_complexes.r->Symbol('r', real=True)
A:sympy.functions.elementary.tests.test_complexes.i->int(n)
A:sympy.functions.elementary.tests.test_complexes.a->Symbol('a', complex=True)
A:sympy.functions.elementary.tests.test_complexes.t->principal_branch(x, 2 * pi)
A:sympy.functions.elementary.tests.test_complexes.x->Symbol('x', real=True)
A:sympy.functions.elementary.tests.test_complexes.(n, m, l)->symbols('n m l')
A:sympy.functions.elementary.tests.test_complexes.A->MatrixSymbol('A', 2, 2)
A:sympy.functions.elementary.tests.test_complexes.X->FunctionMatrix(3, 3, Lambda((n, m), n + m * I))
A:sympy.functions.elementary.tests.test_complexes.Y->SparseMatrix([list(range(5)) for i in range(5)])
A:sympy.functions.elementary.tests.test_complexes.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_complexes.n->Symbol('n', negative=True)
A:sympy.functions.elementary.tests.test_complexes.m->Symbol('m', negative=True)
A:sympy.functions.elementary.tests.test_complexes.nz->Symbol('nz', nonzero=True, integer=True)
A:sympy.functions.elementary.tests.test_complexes.f->Function('f', real=True)
A:sympy.functions.elementary.tests.test_complexes.y->Symbol('y', imaginary=True)
A:sympy.functions.elementary.tests.test_complexes.arg->sqrt(acos(1 - I) * acos(1 + I))
A:sympy.functions.elementary.tests.test_complexes.e->Symbol('n', even=True)
A:sympy.functions.elementary.tests.test_complexes.nn->Symbol('nn', nonnegative=True, real=True)
A:sympy.functions.elementary.tests.test_complexes.np->Symbol('np', nonpositive=True, real=True)
A:sympy.functions.elementary.tests.test_complexes.z->Symbol('z', polar=True)
A:sympy.functions.elementary.tests.test_complexes.q->Symbol('q', rational=True)
A:sympy.functions.elementary.tests.test_complexes.ne->Symbol('ne', real=True, even=False)
A:sympy.functions.elementary.tests.test_complexes.o->Symbol('n', odd=True)
A:sympy.functions.elementary.tests.test_complexes.no->Symbol('no', real=True, odd=False)
A:sympy.functions.elementary.tests.test_complexes.b->Symbol('b', imaginary=True)
A:sympy.functions.elementary.tests.test_complexes.(newex, subs)->polarify(f(x) + z)
A:sympy.functions.elementary.tests.test_complexes.mu->Symbol('mu')
A:sympy.functions.elementary.tests.test_complexes.sigma->Symbol('sigma', positive=True)
A:sympy.functions.elementary.tests.test_complexes.v0->Symbol('v0')
A:sympy.functions.elementary.tests.test_complexes.v1->Symbol('v1')
A:sympy.functions.elementary.tests.test_complexes.v2->Symbol('v2')
A:sympy.functions.elementary.tests.test_complexes.V->Matrix([[v0], [v1], [v2]])
A:sympy.functions.elementary.tests.test_complexes.U->Matrix([[v0], [v1], [v2]]).normalized()
A:sympy.functions.elementary.tests.test_complexes.U.norm->sqrt(v0 ** 2 / (v0 ** 2 + v1 ** 2 + v2 ** 2) + v1 ** 2 / (v0 ** 2 + v1 ** 2 + v2 ** 2) + v2 ** 2 / (v0 ** 2 + v1 ** 2 + v2 ** 2))
A:sympy.functions.elementary.tests.test_complexes.neg->Symbol('x', negative=True)
A:sympy.functions.elementary.tests.test_complexes.nr->Symbol('nonreal', real=False, finite=True)
A:sympy.functions.elementary.tests.test_complexes.ni->Symbol('nonimaginary', imaginary=False)
A:sympy.functions.elementary.tests.test_complexes.nzni->Symbol('nonzerononimaginary', zero=False, imaginary=False)
A:sympy.functions.elementary.tests.test_complexes.eq->Derivative(Abs(f(x)), f(x))
sympy.functions.elementary.tests.test_complexes.N_equals(a,b)
sympy.functions.elementary.tests.test_complexes.test_Abs()
sympy.functions.elementary.tests.test_complexes.test_Abs_properties()
sympy.functions.elementary.tests.test_complexes.test_Abs_real()
sympy.functions.elementary.tests.test_complexes.test_Abs_rewrite()
sympy.functions.elementary.tests.test_complexes.test_abs()
sympy.functions.elementary.tests.test_complexes.test_adjoint()
sympy.functions.elementary.tests.test_complexes.test_arg()
sympy.functions.elementary.tests.test_complexes.test_arg_rewrite()
sympy.functions.elementary.tests.test_complexes.test_as_real_imag()
sympy.functions.elementary.tests.test_complexes.test_conjugate()
sympy.functions.elementary.tests.test_complexes.test_conjugate_transpose()
sympy.functions.elementary.tests.test_complexes.test_derivatives_issue_4757()
sympy.functions.elementary.tests.test_complexes.test_im()
sympy.functions.elementary.tests.test_complexes.test_issue_11413()
sympy.functions.elementary.tests.test_complexes.test_issue_14216()
sympy.functions.elementary.tests.test_complexes.test_issue_14238()
sympy.functions.elementary.tests.test_complexes.test_issue_15893()
sympy.functions.elementary.tests.test_complexes.test_issue_22189()
sympy.functions.elementary.tests.test_complexes.test_issue_3206()
sympy.functions.elementary.tests.test_complexes.test_issue_4035()
sympy.functions.elementary.tests.test_complexes.test_issue_4754_derivative_conjugate()
sympy.functions.elementary.tests.test_complexes.test_issue_6167_6151()
sympy.functions.elementary.tests.test_complexes.test_periodic_argument()
sympy.functions.elementary.tests.test_complexes.test_polarify()
sympy.functions.elementary.tests.test_complexes.test_principal_branch()
sympy.functions.elementary.tests.test_complexes.test_principal_branch_fail()
sympy.functions.elementary.tests.test_complexes.test_re()
sympy.functions.elementary.tests.test_complexes.test_sign()
sympy.functions.elementary.tests.test_complexes.test_sign_issue_3068()
sympy.functions.elementary.tests.test_complexes.test_transpose()
sympy.functions.elementary.tests.test_complexes.test_unpolarify()
sympy.functions.elementary.tests.test_complexes.test_zero_assumptions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/test_hyperbolic.py----------------------------------------
A:sympy.functions.elementary.tests.test_hyperbolic.(x, y)->symbols('x,y')
A:sympy.functions.elementary.tests.test_hyperbolic.k->symbols('k', real=True)
A:sympy.functions.elementary.tests.test_hyperbolic.x->Symbol('x')
A:sympy.functions.elementary.tests.test_hyperbolic.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_hyperbolic.n->Symbol('n', negative=True)
A:sympy.functions.elementary.tests.test_hyperbolic.t5->acosh(x).taylor_term(5, x)
A:sympy.functions.elementary.tests.test_hyperbolic.t6->asech(x).taylor_term(6, x)
A:sympy.functions.elementary.tests.test_hyperbolic.t4->acsch(x).taylor_term(4, x)
A:sympy.functions.elementary.tests.test_hyperbolic.eq->func(S.Half)
A:sympy.functions.elementary.tests.test_hyperbolic.(a, b)->symbols('a,b', real=True)
A:sympy.functions.elementary.tests.test_hyperbolic.tanh_half->tanh(S.Half * x)
A:sympy.functions.elementary.tests.test_hyperbolic.coth_half->coth(S.Half * x)
A:sympy.functions.elementary.tests.test_hyperbolic.z->Symbol('z', real=False)
sympy.functions.elementary.tests.test_hyperbolic.test_acosh()
sympy.functions.elementary.tests.test_hyperbolic.test_acosh_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_acosh_leading_term()
sympy.functions.elementary.tests.test_hyperbolic.test_acosh_nseries()
sympy.functions.elementary.tests.test_hyperbolic.test_acosh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_acosh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_acoth()
sympy.functions.elementary.tests.test_hyperbolic.test_acoth_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_acoth_leading_term()
sympy.functions.elementary.tests.test_hyperbolic.test_acoth_nseries()
sympy.functions.elementary.tests.test_hyperbolic.test_acoth_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_acoth_series()
sympy.functions.elementary.tests.test_hyperbolic.test_acsch()
sympy.functions.elementary.tests.test_hyperbolic.test_acsch_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_acsch_infinities()
sympy.functions.elementary.tests.test_hyperbolic.test_acsch_leading_term()
sympy.functions.elementary.tests.test_hyperbolic.test_acsch_nseries()
sympy.functions.elementary.tests.test_hyperbolic.test_acsch_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_acsch_series()
sympy.functions.elementary.tests.test_hyperbolic.test_asech()
sympy.functions.elementary.tests.test_hyperbolic.test_asech_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_asech_leading_term()
sympy.functions.elementary.tests.test_hyperbolic.test_asech_nseries()
sympy.functions.elementary.tests.test_hyperbolic.test_asech_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_asech_series()
sympy.functions.elementary.tests.test_hyperbolic.test_asinh()
sympy.functions.elementary.tests.test_hyperbolic.test_asinh_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_asinh_leading_term()
sympy.functions.elementary.tests.test_hyperbolic.test_asinh_nseries()
sympy.functions.elementary.tests.test_hyperbolic.test_asinh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_asinh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh_leading_term()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh_nseries()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_complex()
sympy.functions.elementary.tests.test_hyperbolic.test_complex_2899()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_expansion()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_nonnegative()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_positive()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_coth()
sympy.functions.elementary.tests.test_hyperbolic.test_coth_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_coth_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_coth_series()
sympy.functions.elementary.tests.test_hyperbolic.test_csch()
sympy.functions.elementary.tests.test_hyperbolic.test_csch_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_csch_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_csch_series()
sympy.functions.elementary.tests.test_hyperbolic.test_derivs()
sympy.functions.elementary.tests.test_hyperbolic.test_inverses()
sympy.functions.elementary.tests.test_hyperbolic.test_issue_4136()
sympy.functions.elementary.tests.test_hyperbolic.test_leading_term()
sympy.functions.elementary.tests.test_hyperbolic.test_real_assumptions()
sympy.functions.elementary.tests.test_hyperbolic.test_sech()
sympy.functions.elementary.tests.test_hyperbolic.test_sech_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_sech_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_sech_series()
sympy.functions.elementary.tests.test_hyperbolic.test_sign_assumptions()
sympy.functions.elementary.tests.test_hyperbolic.test_simplifications()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh_expansion()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_tanh()
sympy.functions.elementary.tests.test_hyperbolic.test_tanh_fdiff()
sympy.functions.elementary.tests.test_hyperbolic.test_tanh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_tanh_series()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/test_exponential.py----------------------------------------
A:sympy.functions.elementary.tests.test_exponential.k->Symbol('k')
A:sympy.functions.elementary.tests.test_exponential.n->Symbol('n', positive=True, integer=True)
A:sympy.functions.elementary.tests.test_exponential.e->LambertW(-1)
A:sympy.functions.elementary.tests.test_exponential.x->symbols('x')
A:sympy.functions.elementary.tests.test_exponential.y->Symbol('y', positive=True)
A:sympy.functions.elementary.tests.test_exponential.A->MatrixSymbol('A', 2, 2)
A:sympy.functions.elementary.tests.test_exponential.(x, y)->symbols('x,y', positive=True)
A:sympy.functions.elementary.tests.test_exponential.i->Symbol('i', imaginary=True)
A:sympy.functions.elementary.tests.test_exponential.(p, q)->symbols('p,q', positive=True)
A:sympy.functions.elementary.tests.test_exponential.r->Symbol('r', rational=True)
A:sympy.functions.elementary.tests.test_exponential.a->Symbol('a', algebraic=True)
A:sympy.functions.elementary.tests.test_exponential.an->Symbol('an', algebraic=True, nonzero=True)
A:sympy.functions.elementary.tests.test_exponential.rn->Symbol('rn', rational=True, nonzero=True)
A:sympy.functions.elementary.tests.test_exponential.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_exponential.z->symbols('z', real=True)
A:sympy.functions.elementary.tests.test_exponential.value->(log(3) / log(2) - 1).evalf()
A:sympy.functions.elementary.tests.test_exponential.expr1->log(1 + x)
A:sympy.functions.elementary.tests.test_exponential.expr2->log(x + sqrt(x ** 2 + 1))
A:sympy.functions.elementary.tests.test_exponential.w->symbols('w')
A:sympy.functions.elementary.tests.test_exponential.(x, y, z)->symbols('x,y,z', positive=True)
A:sympy.functions.elementary.tests.test_exponential.na->Symbol('na', nonzero=True, algebraic=True)
A:sympy.functions.elementary.tests.test_exponential.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.functions.elementary.tests.test_exponential.(m, n, i, j)->symbols('m n i j')
A:sympy.functions.elementary.tests.test_exponential.expr->log(Product(i ** 2 * abs(j), (i, 1, n), (j, 1, m)))
A:sympy.functions.elementary.tests.test_exponential.(i, j)->symbols('i,j', positive=True, integer=True)
A:sympy.functions.elementary.tests.test_exponential.l1->log(exp(y), exp(10))
A:sympy.functions.elementary.tests.test_exponential.b1->log(exp(y), exp(5))
A:sympy.functions.elementary.tests.test_exponential.l2->log(exp(y), exp(10), evaluate=False)
A:sympy.functions.elementary.tests.test_exponential.b2->log(exp(y), exp(5), evaluate=False)
sympy.functions.elementary.tests.test_exponential.test_as_numer_denom()
sympy.functions.elementary.tests.test_exponential.test_exp_AccumBounds()
sympy.functions.elementary.tests.test_exponential.test_exp_MatrixSymbol()
sympy.functions.elementary.tests.test_exponential.test_exp__as_base_exp()
sympy.functions.elementary.tests.test_exponential.test_exp_adjoint()
sympy.functions.elementary.tests.test_exponential.test_exp_assumptions()
sympy.functions.elementary.tests.test_exponential.test_exp_conjugate()
sympy.functions.elementary.tests.test_exponential.test_exp_expand()
sympy.functions.elementary.tests.test_exponential.test_exp_expand_NC()
sympy.functions.elementary.tests.test_exponential.test_exp_fdiff()
sympy.functions.elementary.tests.test_exponential.test_exp_infinity()
sympy.functions.elementary.tests.test_exponential.test_exp_leading_term()
sympy.functions.elementary.tests.test_exponential.test_exp_log()
sympy.functions.elementary.tests.test_exponential.test_exp_period()
sympy.functions.elementary.tests.test_exponential.test_exp_rewrite()
sympy.functions.elementary.tests.test_exponential.test_exp_subs()
sympy.functions.elementary.tests.test_exponential.test_exp_summation()
sympy.functions.elementary.tests.test_exponential.test_exp_taylor_term()
sympy.functions.elementary.tests.test_exponential.test_exp_transpose()
sympy.functions.elementary.tests.test_exponential.test_exp_values()
sympy.functions.elementary.tests.test_exponential.test_issue_18473()
sympy.functions.elementary.tests.test_exponential.test_issue_5673()
sympy.functions.elementary.tests.test_exponential.test_issue_8866()
sympy.functions.elementary.tests.test_exponential.test_issue_9116()
sympy.functions.elementary.tests.test_exponential.test_lambertw()
sympy.functions.elementary.tests.test_exponential.test_log_AccumBounds()
sympy.functions.elementary.tests.test_exponential.test_log_apply_evalf()
sympy.functions.elementary.tests.test_exponential.test_log_assumptions()
sympy.functions.elementary.tests.test_exponential.test_log_base()
sympy.functions.elementary.tests.test_exponential.test_log_exact()
sympy.functions.elementary.tests.test_exponential.test_log_exp()
sympy.functions.elementary.tests.test_exponential.test_log_expand()
sympy.functions.elementary.tests.test_exponential.test_log_expand_complex()
sympy.functions.elementary.tests.test_exponential.test_log_expand_factor()
sympy.functions.elementary.tests.test_exponential.test_log_expand_fail()
sympy.functions.elementary.tests.test_exponential.test_log_fdiff()
sympy.functions.elementary.tests.test_exponential.test_log_hashing()
sympy.functions.elementary.tests.test_exponential.test_log_leading_term()
sympy.functions.elementary.tests.test_exponential.test_log_nseries()
sympy.functions.elementary.tests.test_exponential.test_log_product()
sympy.functions.elementary.tests.test_exponential.test_log_product_simplify_to_sum()
sympy.functions.elementary.tests.test_exponential.test_log_series()
sympy.functions.elementary.tests.test_exponential.test_log_sign()
sympy.functions.elementary.tests.test_exponential.test_log_simplify()
sympy.functions.elementary.tests.test_exponential.test_log_symbolic()
sympy.functions.elementary.tests.test_exponential.test_log_taylor_term()
sympy.functions.elementary.tests.test_exponential.test_log_values()
sympy.functions.elementary.tests.test_exponential.test_match_real_imag()
sympy.functions.elementary.tests.test_exponential.test_polar()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/test_piecewise.py----------------------------------------
A:sympy.functions.elementary.tests.test_piecewise.(a, b, c, d, x, y)->symbols('a:d, x, y')
A:sympy.functions.elementary.tests.test_piecewise.z->Symbol('z')
A:sympy.functions.elementary.tests.test_piecewise.pwise->Piecewise((1, And(x <= 6, x > 1, Contains(x, S.Integers))), (0, True))
A:sympy.functions.elementary.tests.test_piecewise.p->Piecewise((1, ITE(y > 0, x < 0, True)))
A:sympy.functions.elementary.tests.test_piecewise.p_x2->Piecewise((-1, x ** 2 < -1), (x ** 4, x ** 2 < 0), (log(x ** 2), x ** 2 >= 0))
A:sympy.functions.elementary.tests.test_piecewise.p2->Piecewise((x, Eq(y, 0)), (z, Eq(t, 0)), (n, True))
A:sympy.functions.elementary.tests.test_piecewise.p3->Piecewise((1, Ne(x, y)), (0, True))
A:sympy.functions.elementary.tests.test_piecewise.p4->Piecewise((1, Eq(x, 3)), (4, True), (5, True))
A:sympy.functions.elementary.tests.test_piecewise.(f, g, h)->symbols('f,g,h', cls=Function)
A:sympy.functions.elementary.tests.test_piecewise.pf->Piecewise((f(x), x < -1), (f(x) + h(x) + 2, x <= 1))
A:sympy.functions.elementary.tests.test_piecewise.pg->Piecewise((g(x), x < -1), (g(x) + h(x) + 2, x <= 1))
A:sympy.functions.elementary.tests.test_piecewise.p5->Piecewise((3, Ne(x, 2)), (4, Eq(y, 2)), (5, True))
A:sympy.functions.elementary.tests.test_piecewise.p6->Piecewise((0, Ne(x, 1) & Ne(y, 4)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.n->symbols('n', integer=True)
A:sympy.functions.elementary.tests.test_piecewise.f_int->Piecewise((Integral(x, (x, 0, 1)), x < 1))
A:sympy.functions.elementary.tests.test_piecewise.dp->Piecewise((0, x < -1), (2 * x, x < 0), (1 / x, x >= 0))
A:sympy.functions.elementary.tests.test_piecewise.dp2->Piecewise((0, x < -1), (4 * x ** 2, x < 0), (1 / x ** 2, x >= 0))
A:sympy.functions.elementary.tests.test_piecewise.peval->Piecewise((f1, x < 0), (f2, x > 0))
A:sympy.functions.elementary.tests.test_piecewise.peval2->Piecewise((f1, x < 0), (f2, True))
A:sympy.functions.elementary.tests.test_piecewise.f->Piecewise((1, x < 0), (sqrt(1 - x), True))
A:sympy.functions.elementary.tests.test_piecewise.(x, y)->symbols('x y')
A:sympy.functions.elementary.tests.test_piecewise.g->Piecewise((1, x < 0), (sqrt(1 - x), True)).integrate(lim)
A:sympy.functions.elementary.tests.test_piecewise.gy1->Piecewise((1, x < 0), (sqrt(1 - x), True)).integrate(lim).integrate((x, y, 1))
A:sympy.functions.elementary.tests.test_piecewise.g1y->Piecewise((1, x < 0), (sqrt(1 - x), True)).integrate(lim).integrate((x, 1, y))
A:sympy.functions.elementary.tests.test_piecewise.y->Symbol('y')
A:sympy.functions.elementary.tests.test_piecewise.lim->Tuple(t, t0, T)
A:sympy.functions.elementary.tests.test_piecewise.q->S(srepr(p))
A:sympy.functions.elementary.tests.test_piecewise.r->Symbol('r', real=True)
A:sympy.functions.elementary.tests.test_piecewise.ans->Integral(Piecewise((0, (x >= y) | (x < 0) | (b > c)), (a, True)), (x, 0, z)).doit()
A:sympy.functions.elementary.tests.test_piecewise.reps->dict(zip((t0, t1, T), i))
A:sympy.functions.elementary.tests.test_piecewise.a->Symbol('a')
A:sympy.functions.elementary.tests.test_piecewise.b->Basic()
A:sympy.functions.elementary.tests.test_piecewise.x->symbols('x', real=True)
A:sympy.functions.elementary.tests.test_piecewise.p0->Piecewise((0, Or(x < a, x > b)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p1->Piecewise((0, Eq(x, y)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.args->Tuple((1, Eq(x, 0)), (sin(x) + 1 + x, True))
A:sympy.functions.elementary.tests.test_piecewise.d->Symbol('d', integer=True)
A:sympy.functions.elementary.tests.test_piecewise.t->Symbol('t', positive=True)
A:sympy.functions.elementary.tests.test_piecewise.expr->Piecewise((-d + 2 * n, Eq(1 / t, 1)), (t ** (1 - 4 * n) * t ** (4 * n - 1) * (-d + 2 * n), True))
A:sympy.functions.elementary.tests.test_piecewise.covered->Piecewise((1, x > 3), (2, x < 2), (3, x > 1))
A:sympy.functions.elementary.tests.test_piecewise.abs2->Piecewise((-x, x <= 0), (x, x > 0))
A:sympy.functions.elementary.tests.test_piecewise.absxm3->Piecewise((x - 3, 0 <= x - 3), (3 - x, 0 > x - 3))
A:sympy.functions.elementary.tests.test_piecewise.p7->Piecewise((2, Eq(y, 3) & Ne(x, 2)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.(xr, yr)->symbols('xr, yr', real=True)
A:sympy.functions.elementary.tests.test_piecewise.p1x->Piecewise((1, xr < 0), (2, xr >= 0), evaluate=False)
A:sympy.functions.elementary.tests.test_piecewise.p2x->Piecewise((p1, yr < 0), (3, yr >= 0), evaluate=False)
A:sympy.functions.elementary.tests.test_piecewise.p2xx->Piecewise((p1x, yr < 0), (3, yr >= 0), evaluate=False)
A:sympy.functions.elementary.tests.test_piecewise.(r1, r2, r3, r4)->symbols('r1:5')
A:sympy.functions.elementary.tests.test_piecewise.p8->Piecewise((4, Eq(x, 3) & Ne(y, 2)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.(A, B)->symbols('A B')
A:sympy.functions.elementary.tests.test_piecewise.i->integrate(f, (x, -oo, oo))
A:sympy.functions.elementary.tests.test_piecewise.(a, b)->symbols('a b', real=True)
A:sympy.functions.elementary.tests.test_piecewise.k->symbols('k', integer=True, finite=True)
A:sympy.functions.elementary.tests.test_piecewise.ip3->integrate(p3, x)
A:sympy.functions.elementary.tests.test_piecewise.ip4->integrate(p4, x)
A:sympy.functions.elementary.tests.test_piecewise.cx->Conv(x)
A:sympy.functions.elementary.tests.test_piecewise.(t0, t1, T, t)->symbols('t0, t1 T t')
A:sympy.functions.elementary.tests.test_piecewise.tru->Piecewise((1, x < 0), (sqrt(1 - x), True)).xreplace(reps).integrate(lim.xreplace(reps))
A:sympy.functions.elementary.tests.test_piecewise.u->Piecewise((0, x <= 0), (1, x >= a), (x / a, True))
A:sympy.functions.elementary.tests.test_piecewise.M->Max(0, a)
A:sympy.functions.elementary.tests.test_piecewise.d1->DiracDelta(x - 1)
A:sympy.functions.elementary.tests.test_piecewise.c->symbols('c:5')
A:sympy.functions.elementary.tests.test_piecewise.f1->Piecewise((0, x < 1), (2, True))
A:sympy.functions.elementary.tests.test_piecewise.f2->Piecewise((3, x < 2), (0, True))
A:sympy.functions.elementary.tests.test_piecewise.(a, b, c, x, z)->symbols('a,b,c,x,z', real=True)
A:sympy.functions.elementary.tests.test_piecewise.I->Integral(Piecewise((0, (x >= y) | (x < 0) | (b > c)), (a, True)), (x, 0, z))
A:sympy.functions.elementary.tests.test_piecewise.(a, b, c)->symbols('a:c')
A:sympy.functions.elementary.tests.test_piecewise.(a, b, c, d)->symbols('a:d')
A:sympy.functions.elementary.tests.test_piecewise.(b, e)->symbols('b e')
A:sympy.functions.elementary.tests.test_piecewise.C->Piecewise((2, (b > 1) & (e > 0) | (b > 0) & (b < 1) & (e < 0) | (e >= 2) & (b < -1) & Eq(Mod(e, 2), 0) | (e <= -2) & (b > -1) & (b < 0) & Eq(Mod(e, 2), 0)), (S.Half, (b > 1) & (e < 0) | (b > 0) & (e > 0) & (b < 1) | (e <= -2) & (b < -1) & Eq(Mod(e, 2), 0) | (e >= 2) & (b > -1) & (b < 0) & Eq(Mod(e, 2), 0)), (-S.Half, Eq(Mod(e, 2), 1) & ((e <= -1) & (b < -1) | (e >= 1) & (b > -1) & (b < 0))), (-2, (e >= 1) & (b < -1) & Eq(Mod(e, 2), 1) | (e <= -1) & (b > -1) & (b < 0) & Eq(Mod(e, 2), 1)))
A:sympy.functions.elementary.tests.test_piecewise.A->Piecewise((1, Eq(b, 1) | Eq(e, 0) | Eq(b, -1) & Eq(Mod(e, 2), 0)), (0, Eq(b, 0) & (e > 0)), (-1, Eq(b, -1) & Eq(Mod(e, 2), 1)), (C, Eq(im(b), 0) & Eq(im(e), 0)))
A:sympy.functions.elementary.tests.test_piecewise.B->piecewise_fold(A)
A:sympy.functions.elementary.tests.test_piecewise.sa->Piecewise((1, Eq(b, 1) | Eq(e, 0) | Eq(b, -1) & Eq(Mod(e, 2), 0)), (0, Eq(b, 0) & (e > 0)), (-1, Eq(b, -1) & Eq(Mod(e, 2), 1)), (C, Eq(im(b), 0) & Eq(im(e), 0))).simplify()
A:sympy.functions.elementary.tests.test_piecewise.sb->piecewise_fold(A).simplify()
A:sympy.functions.elementary.tests.test_piecewise.(x, y, z, n, t, m)->symbols('x y z n t m')
A:sympy.functions.elementary.tests.test_piecewise.p9->Piecewise((6, Eq(x, 4) & Eq(y, 1)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p10->Piecewise((4, Ne(x, -4) | Ne(y, 1)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p11->Piecewise((1, Eq(y, 2) | Ne(x, -3)), (2, True))
A:sympy.functions.elementary.tests.test_piecewise.p12->Piecewise((-1, Eq(x, 1) | Ne(y, 3)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p13->Piecewise((3, Eq(x, 2) | Eq(y, 4)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p14->Piecewise((1, Ne(x, 0) | Ne(y, 1)), (3, True))
A:sympy.functions.elementary.tests.test_piecewise.p15->Piecewise((2, Eq(x, 3) | Ne(y, 2)), (3, Eq(x, 4) & Eq(y, 5)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p17->Piecewise((0, Ne(t, x) & (Ne(m, n) | Ne(n, t) | Ne(n, x))), (1, Ne(t, x)), (-1, Ne(m, n) | Ne(n, t) | Ne(n, x)), (0, True))
A:sympy.functions.elementary.tests.test_piecewise.p18->Piecewise((-4, Eq(y, 1) | Eq(x, -5) & Eq(x, z)), (4, True))
A:sympy.functions.elementary.tests.test_piecewise.p19->Piecewise((0, x > 2), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p20->Piecewise((0, And(x < 2, x > -5)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p21->Piecewise((0, Or(x > 1, x < 0)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p22->Piecewise((0, ~((Eq(y, -1) | Ne(x, 0)) & (Ne(x, 1) | Ne(y, -1)))), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.u1->Uniform('u1', 0, 1)
A:sympy.functions.elementary.tests.test_piecewise.u2->Uniform('u2', 0, 1)
A:sympy.functions.elementary.tests.test_piecewise.v->integrate(f, (x, 0, Float('252.4', 30)))
A:sympy.functions.elementary.tests.test_piecewise.inp->MatrixSymbol('inp', 1, 1)
A:sympy.functions.elementary.tests.test_piecewise.(t, tau)->symbols('t tau', real=True)
A:sympy.functions.elementary.tests.test_piecewise.eq->integrate(exp(lam * tau), (tau, 0, t))
sympy.functions.elementary.tests.test_piecewise.test_Piecewise_rewrite_as_ITE()
sympy.functions.elementary.tests.test_piecewise.test_S_srepr_is_identity()
sympy.functions.elementary.tests.test_piecewise.test__intervals()
sympy.functions.elementary.tests.test_piecewise.test_as_expr_set_pairs()
sympy.functions.elementary.tests.test_piecewise.test_conditions_as_alternate_booleans()
sympy.functions.elementary.tests.test_piecewise.test_conjugate_transpose()
sympy.functions.elementary.tests.test_piecewise.test_containment()
sympy.functions.elementary.tests.test_piecewise.test_doit()
sympy.functions.elementary.tests.test_piecewise.test_eval_rewrite_as_KroneckerDelta()
sympy.functions.elementary.tests.test_piecewise.test_holes()
sympy.functions.elementary.tests.test_piecewise.test_identical_conds_issue()
sympy.functions.elementary.tests.test_piecewise.test_issue_10087()
sympy.functions.elementary.tests.test_piecewise.test_issue_10122()
sympy.functions.elementary.tests.test_piecewise.test_issue_10137()
sympy.functions.elementary.tests.test_piecewise.test_issue_10258()
sympy.functions.elementary.tests.test_piecewise.test_issue_11045()
sympy.functions.elementary.tests.test_piecewise.test_issue_11922()
sympy.functions.elementary.tests.test_piecewise.test_issue_12557()
sympy.functions.elementary.tests.test_piecewise.test_issue_12587()
sympy.functions.elementary.tests.test_piecewise.test_issue_14052()
sympy.functions.elementary.tests.test_piecewise.test_issue_14240()
sympy.functions.elementary.tests.test_piecewise.test_issue_14787()
sympy.functions.elementary.tests.test_piecewise.test_issue_14933()
sympy.functions.elementary.tests.test_piecewise.test_issue_16417()
sympy.functions.elementary.tests.test_piecewise.test_issue_16715()
sympy.functions.elementary.tests.test_piecewise.test_issue_20360()
sympy.functions.elementary.tests.test_piecewise.test_issue_21481()
sympy.functions.elementary.tests.test_piecewise.test_issue_22533()
sympy.functions.elementary.tests.test_piecewise.test_issue_22917()
sympy.functions.elementary.tests.test_piecewise.test_issue_24072()
sympy.functions.elementary.tests.test_piecewise.test_issue_4313()
sympy.functions.elementary.tests.test_piecewise.test_issue_5227()
sympy.functions.elementary.tests.test_piecewise.test_issue_6900()
sympy.functions.elementary.tests.test_piecewise.test_issue_7370()
sympy.functions.elementary.tests.test_piecewise.test_issue_8458()
sympy.functions.elementary.tests.test_piecewise.test_issue_8919()
sympy.functions.elementary.tests.test_piecewise.test_meijer_bypass()
sympy.functions.elementary.tests.test_piecewise.test_piecewise1()
sympy.functions.elementary.tests.test_piecewise.test_piecewise__eval_is_meromorphic()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_as_leading_term()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_collapse()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_complex()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_duplicate()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_eval()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_evaluate()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_exclusive()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_fold()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_fold_expand()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_fold_piecewise_in_cond()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_fold_piecewise_in_cond_2()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_free_symbols()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate1()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate1b()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate1ca()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate1cb()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate2()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate3_inequality_conditions()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate4_symbolic_conditions()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate5_independent_conditions()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_interval()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_lambdify()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_series()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_simplify()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_solve()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_with_DiracDelta()
sympy.functions.elementary.tests.test_piecewise.test_stackoverflow_43852159()
sympy.functions.elementary.tests.test_piecewise.test_unevaluated_integrals()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/tests/test_miscellaneous.py----------------------------------------
A:sympy.functions.elementary.tests.test_miscellaneous.n->Symbol('n')
A:sympy.functions.elementary.tests.test_miscellaneous.n_->Symbol('n_', negative=True)
A:sympy.functions.elementary.tests.test_miscellaneous.nn->Symbol('nn', nonnegative=True)
A:sympy.functions.elementary.tests.test_miscellaneous.nn_->Symbol('nn_', nonnegative=True)
A:sympy.functions.elementary.tests.test_miscellaneous.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_miscellaneous.p_->Symbol('p_', positive=True)
A:sympy.functions.elementary.tests.test_miscellaneous.np->Symbol('np', nonpositive=True)
A:sympy.functions.elementary.tests.test_miscellaneous.np_->Symbol('np_', nonpositive=True)
A:sympy.functions.elementary.tests.test_miscellaneous.r->root(-7, 4)
A:sympy.functions.elementary.tests.test_miscellaneous.f->lambdify(x, real_root(log(x / (x - 2)), 3), 'numpy')
A:sympy.functions.elementary.tests.test_miscellaneous.e->Symbol('e', even=True)
A:sympy.functions.elementary.tests.test_miscellaneous.m->Max(n, nn, r)
A:sympy.functions.elementary.tests.test_miscellaneous.a->Symbol('e', even=True).rewrite(Abs)
A:sympy.functions.elementary.tests.test_miscellaneous.t->Symbol('t', real=True, transcendental=True)
A:sympy.functions.elementary.tests.test_miscellaneous.q->Symbol('q', rational=True)
A:sympy.functions.elementary.tests.test_miscellaneous.i->Symbol('i', integer=True)
A:sympy.functions.elementary.tests.test_miscellaneous.o->Symbol('o', odd=True)
A:sympy.functions.elementary.tests.test_miscellaneous.k->Symbol('k', integer=True)
A:sympy.functions.elementary.tests.test_miscellaneous.x->Symbol('x')
A:sympy.functions.elementary.tests.test_miscellaneous.r1->root(-1, 3)
A:sympy.functions.elementary.tests.test_miscellaneous.r3->root(-1, 4)
A:sympy.functions.elementary.tests.test_miscellaneous.g->real_root(x, n)
A:sympy.functions.elementary.tests.test_miscellaneous.numpy->import_module('numpy')
A:sympy.functions.elementary.tests.test_miscellaneous.(x, y, z, a, b)->symbols('x y z a b', real=True)
A:sympy.functions.elementary.tests.test_miscellaneous.(vx, vy, va)->symbols('vx vy va')
A:sympy.functions.elementary.tests.test_miscellaneous.reps->dict(zip(free, i))
A:sympy.functions.elementary.tests.test_miscellaneous.eqn->Lambda(x, x)
sympy.functions.elementary.tests.test_miscellaneous.test_Max()
sympy.functions.elementary.tests.test_miscellaneous.test_Min()
sympy.functions.elementary.tests.test_miscellaneous.test_Rem()
sympy.functions.elementary.tests.test_miscellaneous.test_instantiation_evaluation()
sympy.functions.elementary.tests.test_miscellaneous.test_issue_11099()
sympy.functions.elementary.tests.test_miscellaneous.test_issue_11463()
sympy.functions.elementary.tests.test_miscellaneous.test_issue_12638()
sympy.functions.elementary.tests.test_miscellaneous.test_issue_14000()
sympy.functions.elementary.tests.test_miscellaneous.test_issue_21399()
sympy.functions.elementary.tests.test_miscellaneous.test_issue_6899()
sympy.functions.elementary.tests.test_miscellaneous.test_issue_8413()
sympy.functions.elementary.tests.test_miscellaneous.test_minmax_assumptions()
sympy.functions.elementary.tests.test_miscellaneous.test_minmax_no_evaluate()
sympy.functions.elementary.tests.test_miscellaneous.test_real_root()
sympy.functions.elementary.tests.test_miscellaneous.test_rewrite_MaxMin_as_Heaviside()
sympy.functions.elementary.tests.test_miscellaneous.test_rewrite_MaxMin_as_Piecewise()
sympy.functions.elementary.tests.test_miscellaneous.test_rewrite_as_Abs()
sympy.functions.elementary.tests.test_miscellaneous.test_root()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/benchmarks/bench_exp.py----------------------------------------
A:sympy.functions.elementary.benchmarks.bench_exp.(x, y)->symbols('x,y')
A:sympy.functions.elementary.benchmarks.bench_exp.e->exp(2 * x)
A:sympy.functions.elementary.benchmarks.bench_exp.q->exp(3 * x)
sympy.functions.elementary.benchmarks.bench_exp.timeit_exp_subs()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/functions/elementary/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/enumerative.py----------------------------------------
A:sympy.utilities.enumerative.m->len(multiplicities)
A:sympy.utilities.enumerative.n->sum(multiplicities)
A:sympy.utilities.enumerative.pstack[k].v->min(pstack[j].v, pstack[k].u)
A:sympy.utilities.enumerative.num_components->len(multiplicities)
A:sympy.utilities.enumerative.cardinality->sum(multiplicities)
A:sympy.utilities.enumerative.plen->len(part)
A:sympy.utilities.enumerative.total_mult->sum((pc.u for pc in part))
A:sympy.utilities.enumerative.total_alloc->sum((pc.v for pc in part))
A:sympy.utilities.enumerative.pkey->part_key(self.top_part())
sympy.utilities.enumerative.MultisetPartitionTraverser(self)
sympy.utilities.enumerative.MultisetPartitionTraverser._initialize_enumeration(self,multiplicities)
sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions(self,multiplicities)
sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions_slow(self,multiplicities)
sympy.utilities.enumerative.MultisetPartitionTraverser.db_trace(self,msg)
sympy.utilities.enumerative.MultisetPartitionTraverser.decrement_part(self,part)
sympy.utilities.enumerative.MultisetPartitionTraverser.decrement_part_large(self,part,amt,lb)
sympy.utilities.enumerative.MultisetPartitionTraverser.decrement_part_range(self,part,lb,ub)
sympy.utilities.enumerative.MultisetPartitionTraverser.decrement_part_small(self,part,ub)
sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all(self,multiplicities)
sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large(self,multiplicities,lb)
sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range(self,multiplicities,lb,ub)
sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small(self,multiplicities,ub)
sympy.utilities.enumerative.MultisetPartitionTraverser.spread_part_multiplicity(self)
sympy.utilities.enumerative.MultisetPartitionTraverser.top_part(self)
sympy.utilities.enumerative.PartComponent(self)
sympy.utilities.enumerative.PartComponent.__eq__(self,other)
sympy.utilities.enumerative.PartComponent.__ne__(self,other)
sympy.utilities.enumerative.PartComponent.__repr__(self)
sympy.utilities.enumerative.factoring_visitor(state,primes)
sympy.utilities.enumerative.list_visitor(state,components)
sympy.utilities.enumerative.multiset_partitions_taocp(multiplicities)
sympy.utilities.enumerative.part_key(part)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/lambdify.py----------------------------------------
A:sympy.utilities.lambdify.MATH->MATH_DEFAULT.copy()
A:sympy.utilities.lambdify.MPMATH->MPMATH_DEFAULT.copy()
A:sympy.utilities.lambdify.NUMPY->NUMPY_DEFAULT.copy()
A:sympy.utilities.lambdify.SCIPY->SCIPY_DEFAULT.copy()
A:sympy.utilities.lambdify.CUPY->CUPY_DEFAULT.copy()
A:sympy.utilities.lambdify.JAX->JAX_DEFAULT.copy()
A:sympy.utilities.lambdify.TENSORFLOW->TENSORFLOW_DEFAULT.copy()
A:sympy.utilities.lambdify.SYMPY->SYMPY_DEFAULT.copy()
A:sympy.utilities.lambdify.NUMEXPR->NUMEXPR_DEFAULT.copy()
A:sympy.utilities.lambdify.module->eval(import_command)
A:sympy.utilities.lambdify.buf->_get_namespace(m)
A:sympy.utilities.lambdify.syms->tuple((self._subexpr(sympify(a), dummies_dict) for a in expr)).atoms(Symbol)
A:sympy.utilities.lambdify.printer->printer()
A:sympy.utilities.lambdify.callers_local_vars->inspect.currentframe().f_back.f_locals.items()
A:sympy.utilities.lambdify.funcprinter->_EvaluatorPrinter(printer, dummify)
A:sympy.utilities.lambdify.(cses, _expr)->cse(expr)
A:sympy.utilities.lambdify.funcstr->_EvaluatorPrinter(printer, dummify).doprint(funcname, iterable_args, _expr, cses=cses)
A:sympy.utilities.lambdify.c->compile(funcstr, filename, 'exec')
A:sympy.utilities.lambdify.sig->textwrap.fill(sig, subsequent_indent=' ' * 8)
A:sympy.utilities.lambdify.expr_str->str(expr)
A:sympy.utilities.lambdify.func.__doc__->'Created with lambdify. Signature:\n\n{sig}\n\nExpression:\n\n{expr}\n\nSource code:\n\n{src}\n\nImported modules:\n\n{imp_mods}'.format(sig=sig, expr=expr_str, src=src_str, imp_mods='\n'.join(imp_mod_lines))
A:sympy.utilities.lambdify.dummies->Dummy()
A:sympy.utilities.lambdify.expr->tuple((self._subexpr(sympify(a), dummies_dict) for a in expr))
A:sympy.utilities.lambdify.dummify->any((isinstance(a, Basic) and a.atoms(Function, Derivative) for a in (args if isiter(args) else [args])))
A:sympy.utilities.lambdify.indexed_args->','.join([dum_args[ind[0]] + ''.join(['[%s]' % k for k in ind[1:]]) for ind in flat_indexes(args)])
A:sympy.utilities.lambdify.lstr->lambdastr(flatten(args), expr, printer=printer, dummify=dummify)
A:sympy.utilities.lambdify.args->','.join((str(a) for a in args))
A:sympy.utilities.lambdify.(subvars, subexprs)->zip(*cses)
A:sympy.utilities.lambdify.(argstrs, exprs)->self._preprocess(args, exprs)
A:sympy.utilities.lambdify.cses->zip(subvars, subexprs)
A:sympy.utilities.lambdify.(argstrs, expr)->self._preprocess(args, expr)
A:sympy.utilities.lambdify.funcsig->'def {}({}):'.format(funcname, ', '.join(funcargs))
A:sympy.utilities.lambdify.str_expr->'({})'.format(str_expr)
A:sympy.utilities.lambdify.(s, expr)->self._preprocess(arg, expr)
A:sympy.utilities.lambdify.s->str(arg)
A:sympy.utilities.lambdify.dummy->Dummy()
A:sympy.utilities.lambdify.xreplace->getattr(expr, 'xreplace', None)
A:sympy.utilities.lambdify.indexed->', '.join(('{}[{}]'.format(rvalue, ']['.join(map(str, ind))) for ind in flat_indexes(lvalues)))
A:sympy.utilities.lambdify.func->getattr(expr, 'func', None)
A:sympy.utilities.lambdify.imp->getattr(func, '_imp_', None)
A:sympy.utilities.lambdify.symfunc->UndefinedFunction(symfunc, _imp_=staticmethod(implementation), **kwargs)
sympy.lambdify(args,expr,modules=None,printer=None,use_imps=True,dummify=False,cse=False,docstring_limit=1000)
sympy.utilities.lambdify._EvaluatorPrinter(self,printer=None,dummify=False)
sympy.utilities.lambdify._EvaluatorPrinter._is_safe_ident(cls,ident)
sympy.utilities.lambdify._EvaluatorPrinter._preprocess(self,args,expr)
sympy.utilities.lambdify._EvaluatorPrinter._print_funcargwrapping(self,args)
sympy.utilities.lambdify._EvaluatorPrinter._print_unpacking(self,unpackto,arg)
sympy.utilities.lambdify._EvaluatorPrinter._subexpr(self,expr,dummies_dict)
sympy.utilities.lambdify._EvaluatorPrinter.doprint(self,funcname,args,expr,*,cses=())
sympy.utilities.lambdify._TensorflowEvaluatorPrinter(_EvaluatorPrinter)
sympy.utilities.lambdify._TensorflowEvaluatorPrinter._print_unpacking(self,lvalues,rvalue)
sympy.utilities.lambdify._get_namespace(m)
sympy.utilities.lambdify._imp_namespace(expr,namespace=None)
sympy.utilities.lambdify._import(module,reload=False)
sympy.utilities.lambdify._module_present(modname,modlist)
sympy.utilities.lambdify._recursive_to_string(doprint,arg)
sympy.utilities.lambdify._too_large_for_docstring(expr,limit)
sympy.utilities.lambdify.implemented_function(symfunc,implementation)
sympy.utilities.lambdify.lambdastr(args,expr,printer=None,dummify=None)
sympy.utilities.lambdify.lambdify(args,expr,modules=None,printer=None,use_imps=True,dummify=False,cse=False,docstring_limit=1000)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/iterables.py----------------------------------------
A:sympy.utilities.iterables.(i, j, _)->slice(i, j).indices(len(s))
A:sympy.utilities.iterables.m->min(m, n)
A:sympy.utilities.iterables.(n, rem)->divmod(len(seq), m)
A:sympy.utilities.iterables.container->type(how)
A:sympy.utilities.iterables.n->len(t)
A:sympy.utilities.iterables.hi_type->type(hi)
A:sympy.utilities.iterables.rv[k]->container(_rv)
A:sympy.utilities.iterables.it1->iter(iterable1)
A:sympy.utilities.iterables.it2->iter(iterable2)
A:sympy.utilities.iterables.sentinel->object()
A:sympy.utilities.iterables.e->next(it, sentinel)
A:sympy.utilities.iterables.bits->as_int(bits)
A:sympy.utilities.iterables.seq->rotate_left(seq, dir)
A:sympy.utilities.iterables.exclude->set(exclude or [])
A:sympy.utilities.iterables.s->cls(name, *args, **assumptions)
A:sympy.utilities.iterables.sys.stdoutfile->StringIO()
A:sympy.utilities.iterables.S->sorted(S, key=key, reverse=True)
A:sympy.utilities.iterables.E->list(E)
A:sympy.utilities.iterables.node->sorted(S, key=key, reverse=True).pop()
A:sympy.utilities.iterables.kv->key(v)
A:sympy.utilities.iterables.ks->key(s)
A:sympy.utilities.iterables.stack->OrderedDict()
A:sympy.utilities.iterables.nomore->object()
A:sympy.utilities.iterables.index->len(stack)
A:sympy.utilities.iterables.(v2, _)->callstack.pop()
A:sympy.utilities.iterables.lowlink[v1]->min(lowlink[v1], indices[v2])
A:sympy.utilities.iterables.v2->next(it1, nomore)
A:sympy.utilities.iterables.N->sum((v for (k, v) in g))
A:sympy.utilities.iterables.SUM->sum([gi[1] for gi in do])
A:sympy.utilities.iterables.multiset->list(ordered(multiset))
A:sympy.utilities.iterables.(elements, multiplicities)->zip(*group(multiset, False))
A:sympy.utilities.iterables.mpt->MultisetPartitionTraverser()
A:sympy.utilities.iterables.k->min(k or n, n)
A:sympy.utilities.iterables.(q, r)->divmod(reuse, i)
A:sympy.utilities.iterables.reuse->sorted(ms.items(), key=lambda x: x[1]).pop(1)
A:sympy.utilities.iterables.mi->len(ax)
A:sympy.utilities.iterables.power->int(2 ** ceil(log(n, 2)))
A:sympy.utilities.iterables.unique->set()
A:sympy.utilities.iterables.seen->set()
A:sympy.utilities.iterables.l->list(range(n))
A:sympy.utilities.iterables.idx->list(range(n))
A:sympy.utilities.iterables.ms->sorted(ms.items(), key=lambda x: x[1])
A:sympy.utilities.iterables.key->dict(enumerate(ordered(uniq(s))))
A:sympy.utilities.iterables.mx->max(ms.values())
A:sympy.utilities.iterables.take->sorted(ms.items(), key=lambda x: (x[1], x[0]))
A:sympy.utilities.iterables.x->choice(rv[:i + 1])
A:sympy.utilities.iterables.j->list(t).index(x)
A:sympy.utilities.iterables.tot->len(t)
A:sympy.utilities.iterables.stay->sorted(opts[:xs])
A:sympy.utilities.iterables.rv->list(t)
A:sympy.utilities.iterables.P->list(range(-1, n))
A:sympy.utilities.iterables.best->min(best, rbest, key=key)
A:sympy.utilities.iterables.rbest->rotate_left(rseq, least_rotation(rseq, key=key))
A:sympy.utilities.iterables.ei->next(seq)
A:sympy.utilities.iterables.pl->list(pl)
A:sympy.utilities.iterables.li->list(li)
A:sympy.utilities.iterables.signs->list(signs)
A:sympy.utilities.iterables.nexts->cycle(islice(nexts, pending))
A:sympy.utilities.iterables.pending->len(iterables)
sympy.capture(func)
sympy.dict_merge(*dicts)
sympy.flatten(iterable,levels=None,cls=None)
sympy.group(seq,multiple=True)
sympy.has_dups(seq)
sympy.has_variety(seq)
sympy.numbered_symbols(prefix='x',cls=None,start=0,exclude=(),*args,**assumptions)
sympy.postfixes(seq)
sympy.prefixes(seq)
sympy.reshape(seq,how)
sympy.rotations(s,dir=1)
sympy.sift(seq,keyfunc,binary=False)
sympy.subsets(seq,k=None,repetition=False)
sympy.take(iter,n)
sympy.topological_sort(graph,key=None)
sympy.unflatten(iter,n=2)
sympy.utilities.iterables.NotIterable
sympy.utilities.iterables._iproduct2(iterable1,iterable2)
sympy.utilities.iterables._partition(seq,vector,m=None)
sympy.utilities.iterables._set_derangements(s)
sympy.utilities.iterables._set_partitions(n)
sympy.utilities.iterables._strongly_connected_components(V,Gmap)
sympy.utilities.iterables.binary_partitions(n)
sympy.utilities.iterables.bracelets(n,k)
sympy.utilities.iterables.capture(func)
sympy.utilities.iterables.common_prefix(*seqs)
sympy.utilities.iterables.common_suffix(*seqs)
sympy.utilities.iterables.connected_components(G)
sympy.utilities.iterables.default_sort_key(*args,**kwargs)
sympy.utilities.iterables.dict_merge(*dicts)
sympy.utilities.iterables.filter_symbols(iterator,exclude)
sympy.utilities.iterables.flatten(iterable,levels=None,cls=None)
sympy.utilities.iterables.generate_bell(n)
sympy.utilities.iterables.generate_derangements(s)
sympy.utilities.iterables.generate_involutions(n)
sympy.utilities.iterables.generate_oriented_forest(n)
sympy.utilities.iterables.group(seq,multiple=True)
sympy.utilities.iterables.has_dups(seq)
sympy.utilities.iterables.has_variety(seq)
sympy.utilities.iterables.ibin(n,bits=None,str=False)
sympy.utilities.iterables.interactive_traversal(expr)
sympy.utilities.iterables.iproduct(*iterables)
sympy.utilities.iterables.is_palindromic(s,i=0,j=None)
sympy.utilities.iterables.is_sequence(i,include=None)
sympy.utilities.iterables.iterable(i,exclude=(str,dict,NotIterable))
sympy.utilities.iterables.kbins(l,k,ordered=None)
sympy.utilities.iterables.least_rotation(x,key=None)
sympy.utilities.iterables.minlex(seq,directed=True,key=None)
sympy.utilities.iterables.multiset(seq)
sympy.utilities.iterables.multiset_combinations(m,n,g=None)
sympy.utilities.iterables.multiset_derangements(s)
sympy.utilities.iterables.multiset_partitions(multiset,m=None)
sympy.utilities.iterables.multiset_permutations(m,size=None,g=None)
sympy.utilities.iterables.necklaces(n,k,free=False)
sympy.utilities.iterables.numbered_symbols(prefix='x',cls=None,start=0,exclude=(),*args,**assumptions)
sympy.utilities.iterables.ordered(*args,**kwargs)
sympy.utilities.iterables.ordered_partitions(n,m=None,sort=True)
sympy.utilities.iterables.partitions(n,m=None,k=None,size=False)
sympy.utilities.iterables.permute_signs(t)
sympy.utilities.iterables.postfixes(seq)
sympy.utilities.iterables.postorder_traversal(node,keys=None)
sympy.utilities.iterables.prefixes(seq)
sympy.utilities.iterables.random_derangement(t,choice=None,strict=True)
sympy.utilities.iterables.reshape(seq,how)
sympy.utilities.iterables.rotate_left(x,y)
sympy.utilities.iterables.rotate_right(x,y)
sympy.utilities.iterables.rotations(s,dir=1)
sympy.utilities.iterables.roundrobin(*iterables)
sympy.utilities.iterables.runs(seq,op=gt)
sympy.utilities.iterables.sequence_partitions(l,n,/)
sympy.utilities.iterables.sequence_partitions_empty(l,n,/)
sympy.utilities.iterables.sift(seq,keyfunc,binary=False)
sympy.utilities.iterables.signed_permutations(t)
sympy.utilities.iterables.strongly_connected_components(G)
sympy.utilities.iterables.subsets(seq,k=None,repetition=False)
sympy.utilities.iterables.take(iter,n)
sympy.utilities.iterables.topological_sort(graph,key=None)
sympy.utilities.iterables.unflatten(iter,n=2)
sympy.utilities.iterables.uniq(seq,result=None)
sympy.utilities.iterables.variations(seq,n,repetition=False)
sympy.variations(seq,n,repetition=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/pytest.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/codegen.py----------------------------------------
A:sympy.utilities.codegen.input_symbols->set()
A:sympy.utilities.codegen.symbols->set()
A:sympy.utilities.codegen.local_symbols->set()
A:sympy.utilities.codegen.notcovered->set().difference(input_symbols.union(local_symbols).union(global_vars))
A:sympy.utilities.codegen.v->set(self.local_vars)
A:sympy.utilities.codegen.datatype->get_default_datatype(expr)
A:sympy.utilities.codegen.name->self.printer.doprint(arg.name)
A:sympy.utilities.codegen.result->getattr(self.printer, method)(*args, **kwargs)
A:sympy.utilities.codegen.expr_str->self.printer.doprint(s)
A:sympy.utilities.codegen.(constants, not_supported, expr_str)->self.printer.doprint(s)
A:sympy.utilities.codegen.(common, simplified)->cse(expr)
A:sympy.utilities.codegen.expr->Equality(expr.lhs, simplified[0])
A:sympy.utilities.codegen.local_expressions->Tuple()
A:sympy.utilities.codegen.expressions->Tuple(expr)
A:sympy.utilities.codegen.new_symbols->set()
A:sympy.utilities.codegen.dims->tuple([(S.One, dim) for dim in out_arg.shape])
A:sympy.utilities.codegen.out_arg->MatrixSymbol('out_%s' % abs(hash(expr)), *expr.shape)
A:sympy.utilities.codegen.msg->msg.format(', '.join([str(m.name) for m in missing])).format(', '.join([str(m.name) for m in missing]))
A:sympy.utilities.codegen.contents->StringIO()
A:sympy.utilities.codegen.code_lines->self._indent_code(''.join(code_lines))
A:sympy.utilities.codegen.ctype->routine.results[0].get_datatype('C')
A:sympy.utilities.codegen.arguments->', '.join(['%s: %s' % t for t in type_args])
A:sympy.utilities.codegen.prototype->self.get_prototype(routine)
A:sympy.utilities.codegen.t->get_default_datatype(obj)
A:sympy.utilities.codegen.prefix->'const {} '.format(t)
A:sympy.utilities.codegen.(constants, not_c, c_expr)->self._printer_method_with_settings('doprint', {'human': False, 'dereference': dereference}, result.expr, assign_to=assign_to)
A:sympy.utilities.codegen.args->', '.join(args)
A:sympy.utilities.codegen.call_sig->'{}({})\n'.format(routine.name, args)
A:sympy.utilities.codegen.dimstr->', '.join(['%s:%s' % (fprint(dim[0] + 1), fprint(dim[1] + 1)) for dim in arg.dimensions])
A:sympy.utilities.codegen.typeinfo->get_default_datatype(var)
A:sympy.utilities.codegen.(constants, not_fortran, f_expr)->self._printer_method_with_settings('doprint', {'human': False, 'source_format': 'free', 'standard': 95}, result.expr, assign_to=assign_to)
A:sympy.utilities.codegen.arg_list->list(output_args)
A:sympy.utilities.codegen.s->' '.join(sorted([self._get_symbol(g) for g in routine.global_vars]))
A:sympy.utilities.codegen.(constants, not_supported, jl_expr)->self._printer_method_with_settings('doprint', {'human': False}, result.expr, assign_to=assign_to)
A:sympy.utilities.codegen.p->JuliaCodePrinter({'human': False})
A:sympy.utilities.codegen.(constants, not_supported, oct_expr)->self._printer_method_with_settings('doprint', {'human': False}, result.expr, assign_to=assign_to)
A:sympy.utilities.codegen.(constants, not_supported, rs_expr)->self._printer_method_with_settings('doprint', {'human': False}, result.expr, assign_to=assign_to)
A:sympy.utilities.codegen.CodeGenClass->{'C': CCodeGen, 'C89': C89CodeGen, 'C99': C99CodeGen, 'F95': FCodeGen, 'JULIA': JuliaCodeGen, 'OCTAVE': OctaveCodeGen, 'RUST': RustCodeGen}.get(language.upper())
A:sympy.utilities.codegen.code_gen->get_code_generator(language)
sympy.utilities.codegen.Argument(Variable)
sympy.utilities.codegen.C89CodeGen(CCodeGen)
sympy.utilities.codegen.C99CodeGen(CCodeGen)
sympy.utilities.codegen.CCodeGen(self,project='project',printer=None,preprocessor_statements=None,cse=False)
sympy.utilities.codegen.CCodeGen._call_printer(self,routine)
sympy.utilities.codegen.CCodeGen._declare_arguments(self,routine)
sympy.utilities.codegen.CCodeGen._declare_globals(self,routine)
sympy.utilities.codegen.CCodeGen._declare_locals(self,routine)
sympy.utilities.codegen.CCodeGen._get_header(self)
sympy.utilities.codegen.CCodeGen._get_routine_ending(self,routine)
sympy.utilities.codegen.CCodeGen._get_routine_opening(self,routine)
sympy.utilities.codegen.CCodeGen._preprocessor_statements(self,prefix)
sympy.utilities.codegen.CCodeGen.dump_c(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.CCodeGen.dump_h(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.CCodeGen.get_prototype(self,routine)
sympy.utilities.codegen.CodeGen(self,project='project',cse=False)
sympy.utilities.codegen.CodeGen._get_symbol(self,s)
sympy.utilities.codegen.CodeGen._indent_code(self,codelines)
sympy.utilities.codegen.CodeGen._printer_method_with_settings(self,method,settings=None,*args,**kwargs)
sympy.utilities.codegen.CodeGen.dump_code(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.CodeGen.routine(self,name,expr,argument_sequence=None,global_vars=None)
sympy.utilities.codegen.CodeGen.write(self,routines,prefix,to_files=False,header=True,empty=True)
sympy.utilities.codegen.CodeGenArgumentListError(Exception)
sympy.utilities.codegen.CodeGenArgumentListError.missing_args(self)
sympy.utilities.codegen.CodeGenError(Exception)
sympy.utilities.codegen.DataType(self,cname,fname,pyname,jlname,octname,rsname)
sympy.utilities.codegen.FCodeGen(self,project='project',printer=None)
sympy.utilities.codegen.FCodeGen._call_printer(self,routine)
sympy.utilities.codegen.FCodeGen._declare_arguments(self,routine)
sympy.utilities.codegen.FCodeGen._declare_globals(self,routine)
sympy.utilities.codegen.FCodeGen._declare_locals(self,routine)
sympy.utilities.codegen.FCodeGen._get_header(self)
sympy.utilities.codegen.FCodeGen._get_routine_ending(self,routine)
sympy.utilities.codegen.FCodeGen._get_routine_opening(self,routine)
sympy.utilities.codegen.FCodeGen._indent_code(self,codelines)
sympy.utilities.codegen.FCodeGen._preprocessor_statements(self,prefix)
sympy.utilities.codegen.FCodeGen.dump_f95(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.FCodeGen.dump_h(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.FCodeGen.get_interface(self,routine)
sympy.utilities.codegen.InOutArgument(self,name,result_var,expr,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.InOutArgument.__str__(self)
sympy.utilities.codegen.InputArgument(Argument)
sympy.utilities.codegen.JuliaCodeGen(self,project='project',printer=None)
sympy.utilities.codegen.JuliaCodeGen._call_printer(self,routine)
sympy.utilities.codegen.JuliaCodeGen._declare_arguments(self,routine)
sympy.utilities.codegen.JuliaCodeGen._declare_globals(self,routine)
sympy.utilities.codegen.JuliaCodeGen._declare_locals(self,routine)
sympy.utilities.codegen.JuliaCodeGen._get_header(self)
sympy.utilities.codegen.JuliaCodeGen._get_routine_ending(self,routine)
sympy.utilities.codegen.JuliaCodeGen._get_routine_opening(self,routine)
sympy.utilities.codegen.JuliaCodeGen._indent_code(self,codelines)
sympy.utilities.codegen.JuliaCodeGen._preprocessor_statements(self,prefix)
sympy.utilities.codegen.JuliaCodeGen.dump_jl(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.JuliaCodeGen.routine(self,name,expr,argument_sequence,global_vars)
sympy.utilities.codegen.OctaveCodeGen(self,project='project',printer=None)
sympy.utilities.codegen.OctaveCodeGen._call_printer(self,routine)
sympy.utilities.codegen.OctaveCodeGen._declare_arguments(self,routine)
sympy.utilities.codegen.OctaveCodeGen._declare_globals(self,routine)
sympy.utilities.codegen.OctaveCodeGen._declare_locals(self,routine)
sympy.utilities.codegen.OctaveCodeGen._get_header(self)
sympy.utilities.codegen.OctaveCodeGen._get_routine_ending(self,routine)
sympy.utilities.codegen.OctaveCodeGen._get_routine_opening(self,routine)
sympy.utilities.codegen.OctaveCodeGen._indent_code(self,codelines)
sympy.utilities.codegen.OctaveCodeGen._preprocessor_statements(self,prefix)
sympy.utilities.codegen.OctaveCodeGen.dump_m(self,routines,f,prefix,header=True,empty=True,inline=True)
sympy.utilities.codegen.OctaveCodeGen.routine(self,name,expr,argument_sequence,global_vars)
sympy.utilities.codegen.OutputArgument(self,name,result_var,expr,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.OutputArgument.__str__(self)
sympy.utilities.codegen.Result(self,expr,name=None,result_var=None,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.Result.__str__(self)
sympy.utilities.codegen.ResultBase(self,expr,result_var)
sympy.utilities.codegen.ResultBase.__str__(self)
sympy.utilities.codegen.Routine(self,name,arguments,results,local_vars,global_vars)
sympy.utilities.codegen.Routine.__str__(self)
sympy.utilities.codegen.Routine.result_variables(self)
sympy.utilities.codegen.Routine.variables(self)
sympy.utilities.codegen.RustCodeGen(self,project='project',printer=None)
sympy.utilities.codegen.RustCodeGen._call_printer(self,routine)
sympy.utilities.codegen.RustCodeGen._declare_arguments(self,routine)
sympy.utilities.codegen.RustCodeGen._declare_globals(self,routine)
sympy.utilities.codegen.RustCodeGen._declare_locals(self,routine)
sympy.utilities.codegen.RustCodeGen._get_header(self)
sympy.utilities.codegen.RustCodeGen._get_routine_ending(self,routine)
sympy.utilities.codegen.RustCodeGen._get_routine_opening(self,routine)
sympy.utilities.codegen.RustCodeGen._preprocessor_statements(self,prefix)
sympy.utilities.codegen.RustCodeGen.dump_rs(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.RustCodeGen.get_prototype(self,routine)
sympy.utilities.codegen.RustCodeGen.routine(self,name,expr,argument_sequence,global_vars)
sympy.utilities.codegen.Variable(self,name,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.Variable.__str__(self)
sympy.utilities.codegen.Variable.get_datatype(self,language)
sympy.utilities.codegen.Variable.name(self)
sympy.utilities.codegen.codegen(name_expr,language=None,prefix=None,project='project',to_files=False,header=True,empty=True,argument_sequence=None,global_vars=None,standard=None,code_gen=None,printer=None)
sympy.utilities.codegen.get_code_generator(language,project=None,standard=None,printer=None)
sympy.utilities.codegen.get_default_datatype(expr,complex_allowed=None)
sympy.utilities.codegen.make_routine(name,expr,argument_sequence=None,global_vars=None,language='F95')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/decorator.py----------------------------------------
A:sympy.utilities.decorator.expr->sympify(expr)
A:sympy.utilities.decorator.func_wrapper->update_wrapper(func_wrapper, func)
A:sympy.utilities.decorator.r->PyTestReporter()
A:sympy.utilities.decorator.t->SymPyDocTests(r, None)
A:sympy.utilities.decorator.fn._doctest_depdends_on->no_attrs_in_subclass(fn, fn._doctest_depends_on)
A:sympy.utilities.decorator.fn.__doctest_skip__->no_attrs_in_subclass(fn, fn.__doctest_skip__)
A:sympy.utilities.decorator.sentinel->object()
A:sympy.utilities.decorator.val->propfunc(self)
sympy.memoize_property(propfunc)
sympy.public(obj)
sympy.threaded(func)
sympy.utilities.decorator.conserve_mpmath_dps(func)
sympy.utilities.decorator.deprecated(message,*,deprecated_since_version,active_deprecations_target,stacklevel=3)
sympy.utilities.decorator.doctest_depends_on(exe=None,modules=None,disable_viewers=None,python_version=None)
sympy.utilities.decorator.memoize_property(propfunc)
sympy.utilities.decorator.no_attrs_in_subclass(self,cls,f)
sympy.utilities.decorator.no_attrs_in_subclass.__get__(self,instance,owner=None)
sympy.utilities.decorator.public(obj)
sympy.utilities.decorator.threaded(func)
sympy.utilities.decorator.threaded_factory(func,use_add)
sympy.utilities.decorator.xthreaded(func)
sympy.xthreaded(func)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/randtest.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/pkgdata.py----------------------------------------
A:sympy.utilities.pkgdata.fn->getattr(mod, '__file__', None)
A:sympy.utilities.pkgdata.path->os.path.join(os.path.dirname(fn), identifier)
A:sympy.utilities.pkgdata.loader->getattr(mod, '__loader__', None)
A:sympy.utilities.pkgdata.data->getattr(mod, '__loader__', None).get_data(path)
sympy.utilities.pkgdata.get_resource(identifier,pkgname=__name__)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/timeutils.py----------------------------------------
A:sympy.utilities.timeutils.timer->timeit.Timer(func, setup=setup)
A:sympy.utilities.timeutils.order->min(-int(math.floor(math.log10(time)) // 3), 3)
A:sympy.utilities.timeutils.res->os.getenv('SYMPY_TIMINGS', '')
A:sympy.utilities.timeutils._do_timings->__do_timings()
A:sympy.utilities.timeutils.t1->time()
A:sympy.utilities.timeutils.r->func(*args, **kwargs)
A:sympy.utilities.timeutils.t2->time()
sympy.timed(func,setup='pass',limit=None)
sympy.utilities.timeutils.__do_timings()
sympy.utilities.timeutils._print_timestack(stack,level=1)
sympy.utilities.timeutils.timed(func,setup='pass',limit=None)
sympy.utilities.timeutils.timethis(name)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/magic.py----------------------------------------
sympy.utilities.magic.pollute(names,objects)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/memoization.py----------------------------------------
A:sympy.utilities.memoization.L->len(cache)
A:sympy.utilities.memoization.F_i0->base_seq(i)
A:sympy.utilities.memoization.F_ij->f(i, j, cache)
sympy.utilities.memoization.assoc_recurrence_memo(base_seq)
sympy.utilities.memoization.recurrence_memo(initial)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/misc.py----------------------------------------
A:sympy.utilities.misc.lines->replace(s, mr).split('\n')
A:sympy.utilities.misc.trailing->replace(s, mr).endswith('\n')
A:sympy.utilities.misc.rv->alias.get(rv, rv)
A:sympy.utilities.misc.HASH_RANDOMIZATION->getattr(sys.flags, 'hash_randomization', False)
A:sympy.utilities.misc.x->replace(s, mr).split('\n')
A:sympy.utilities.misc.r->f(*args, **kw)
A:sympy.utilities.misc.paths->path.split(os.pathsep)
A:sympy.utilities.misc.(base, ext)->os.path.splitext(executable)
A:sympy.utilities.misc.pathext->os.environ['PATHEXT'].lower().split(os.pathsep)
A:sympy.utilities.misc.f->os.path.join(p, execname)
A:sympy.utilities.misc.typ->type(x)
A:sympy.utilities.misc.pattern->re.compile('|'.join([_re.escape(k) for (k, v) in reps.items()]), _re.M)
A:sympy.utilities.misc.reps->dict(reps)
A:sympy.utilities.misc.short[k]->a.pop(k)
A:sympy.utilities.misc.val->str.maketrans('', '', c)
A:sympy.utilities.misc.s->replace(s, mr)
A:sympy.utilities.misc.n->as_int(num)
A:sympy.utilities.misc.result->int(n)
sympy.filldedent(s,w=70,**kwargs)
sympy.utilities.misc.Undecidable(ValueError)
sympy.utilities.misc._replace(reps)
sympy.utilities.misc.as_int(n,strict=True)
sympy.utilities.misc.debug(*args)
sympy.utilities.misc.debug_decorator(func)
sympy.utilities.misc.debugf(string,args)
sympy.utilities.misc.filldedent(s,w=70,**kwargs)
sympy.utilities.misc.find_executable(executable,path=None)
sympy.utilities.misc.func_name(x,short=False)
sympy.utilities.misc.ordinal(num)
sympy.utilities.misc.rawlines(s)
sympy.utilities.misc.replace(string,*reps)
sympy.utilities.misc.strlines(s,c=64,short=False)
sympy.utilities.misc.translate(s,a,b=None,c=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/matchpy_connector.py----------------------------------------
A:sympy.utilities.matchpy_connector.matchpy->import_module('matchpy')
A:sympy.utilities.matchpy_connector.optional->_sympify(optional)
A:sympy.utilities.matchpy_connector.obj->sympy.core.symbol.Symbol.__xnew__(cls, variable_name, **assumptions)
A:sympy.utilities.matchpy_connector.s->re.sub("WildStar\\('(\\w+)'\\)", '*\\1', s)
A:sympy.utilities.matchpy_connector.self._replacer->import_module('matchpy').ManyToOneReplacer()
A:sympy.utilities.matchpy_connector.lambdaargs->', '.join(wilds)
A:sympy.utilities.matchpy_connector.fullexpr->_get_srepr(constraint_expr)
A:sympy.utilities.matchpy_connector.condition->condition_template.format(fullexpr)
A:sympy.utilities.matchpy_connector.expr->_sympify(expr)
A:sympy.utilities.matchpy_connector.result->_sympify(result)
A:sympy.utilities.matchpy_connector.lambda_expr->self._get_lambda(lambda_str)
sympy.utilities.matchpy_connector.Replacer(self,common_constraints:list=[])
sympy.utilities.matchpy_connector.Replacer._get_custom_constraint(self,constraint_expr:Expr,condition_template:str)->Callable[..., Expr]
sympy.utilities.matchpy_connector.Replacer._get_custom_constraint_nonfalse(self,constraint_expr:Expr)->Callable[..., Expr]
sympy.utilities.matchpy_connector.Replacer._get_custom_constraint_true(self,constraint_expr:Expr)->Callable[..., Expr]
sympy.utilities.matchpy_connector.Replacer._get_lambda(self,lambda_str:str)->Callable[..., Expr]
sympy.utilities.matchpy_connector.Replacer.add(self,expr:Expr,result:Expr,conditions_true:List[Expr]=[],conditions_nonfalse:List[Expr]=[])->None
sympy.utilities.matchpy_connector.Replacer.replace(self,expr:Expr)->Expr
sympy.utilities.matchpy_connector.WildDot(_WildAbstract)
sympy.utilities.matchpy_connector.WildPlus(_WildAbstract)
sympy.utilities.matchpy_connector.WildStar(_WildAbstract)
sympy.utilities.matchpy_connector._WildAbstract(self,variable_name=None,optional=None,**assumptions)
sympy.utilities.matchpy_connector._WildAbstract.__copy__(self)->'_WildAbstract'
sympy.utilities.matchpy_connector._WildAbstract.__getnewargs__(self)
sympy.utilities.matchpy_connector._WildAbstract.__getstate__(self)
sympy.utilities.matchpy_connector._WildAbstract.__repr__(self)
sympy.utilities.matchpy_connector._WildAbstract.__str__(self)
sympy.utilities.matchpy_connector._WildAbstract.__xnew__(cls,variable_name=None,optional=None,**assumptions)
sympy.utilities.matchpy_connector._WildAbstract._hashable_content(self)
sympy.utilities.matchpy_connector._get_srepr(expr)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tmpfiles.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/source.py----------------------------------------
A:sympy.utilities.source.(mod_name, func_name)->get_mod_func(lookup_view)
A:sympy.utilities.source.lookup_view->getattr(__import__(mod_name, {}, {}, ['*']), func_name)
A:sympy.utilities.source.dot->callback.rfind('.')
sympy.utilities.source.get_class(lookup_view)
sympy.utilities.source.get_mod_func(callback)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/exceptions.py----------------------------------------
A:sympy.utilities.exceptions.w->SymPyDeprecationWarning(message, deprecated_since_version=deprecated_since_version, active_deprecations_target=active_deprecations_target)
sympy.utilities.exceptions.SymPyDeprecationWarning(self,message,*,deprecated_since_version,active_deprecations_target)
sympy.utilities.exceptions.SymPyDeprecationWarning.__eq__(self,other)
sympy.utilities.exceptions.SymPyDeprecationWarning.__reduce__(self)
sympy.utilities.exceptions.SymPyDeprecationWarning.__repr__(self)
sympy.utilities.exceptions.SymPyDeprecationWarning.__str__(self)
sympy.utilities.exceptions.SymPyDeprecationWarning._new(cls,message,deprecated_since_version,active_deprecations_target)
sympy.utilities.exceptions.ignore_warnings(warningcls)
sympy.utilities.exceptions.sympy_deprecation_warning(message,*,deprecated_since_version,active_deprecations_target,stacklevel=3)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/autowrap.py----------------------------------------
A:sympy.utilities.autowrap.workdir->tempfile.mkdtemp('_sympy_compile')
A:sympy.utilities.autowrap.oldwork->os.getcwd()
A:sympy.utilities.autowrap.mod->__import__(self.module_name)
A:sympy.utilities.autowrap.retoutput->check_output(command, stderr=STDOUT)
A:sympy.utilities.autowrap.printed->', '.join([str(res.expr) for res in routine.result_variables])
A:sympy.utilities.autowrap.args->tuple(args)
A:sympy.utilities.autowrap.self._include_dirs->kwargs.pop('include_dirs', [])
A:sympy.utilities.autowrap.self._library_dirs->kwargs.pop('library_dirs', [])
A:sympy.utilities.autowrap.self._libraries->kwargs.pop('libraries', [])
A:sympy.utilities.autowrap.self._extra_compile_args->kwargs.pop('extra_compile_args', [])
A:sympy.utilities.autowrap.self._extra_link_args->kwargs.pop('extra_link_args', [])
A:sympy.utilities.autowrap.self._cythonize_options->kwargs.pop('cythonize_options', self._cythonize_options)
A:sympy.utilities.autowrap.includes->str(self._include_dirs).replace("'np.get_include()'", 'np.get_include()')
A:sympy.utilities.autowrap.prototype->self.generator.get_prototype(routine)
A:sympy.utilities.autowrap.(py_rets, py_args, py_loc, py_inf)->self._partition_args(routine.arguments)
A:sympy.utilities.autowrap.arg_string->', '.join((self._prototype_arg(arg) for arg in py_args))
A:sympy.utilities.autowrap.proto->self._prototype_arg(arg)
A:sympy.utilities.autowrap.declarations->'\n'.join(local_decs)
A:sympy.utilities.autowrap.args_c->', '.join([self._call_arg(a) for a in routine.arguments])
A:sympy.utilities.autowrap.rets->', '.join([self._string_var(r.name) for r in py_rets])
A:sympy.utilities.autowrap.py_inferred[arg]->py_inferred.pop(arg.name)
A:sympy.utilities.autowrap.t->arg.get_datatype('c')
A:sympy.utilities.autowrap.ndim->len(arg.dimensions)
A:sympy.utilities.autowrap.langs->_lang_lookup.get(backend.upper(), False)
A:sympy.utilities.autowrap.language->_infer_language(backend)
A:sympy.utilities.autowrap.code_gen->get_code_generator(language, 'autowrap')
A:sympy.utilities.autowrap.code_wrapper->UfuncifyCodeWrapper(C99CodeGen('ufuncify'), tempdir, flags, verbose)
A:sympy.utilities.autowrap.name_h->binary_function(name_h, expr_h, backend='dummy')
A:sympy.utilities.autowrap.expr->expr.subs(expr_h, name_h(*args_h)).subs(expr_h, name_h(*args_h))
A:sympy.utilities.autowrap.routine->get_code_generator(language, 'autowrap').routine('autofunc', expr, args + new_args)
A:sympy.utilities.autowrap.binary->autowrap(expr, **kwargs)
A:sympy.utilities.autowrap._ufunc_top->Template('#include "Python.h"\n#include "math.h"\n#include "numpy/ndarraytypes.h"\n#include "numpy/ufuncobject.h"\n#include "numpy/halffloat.h"\n#include ${include_file}\n\nstatic PyMethodDef ${module}Methods[] = {\n        {NULL, NULL, 0, NULL}\n};')
A:sympy.utilities.autowrap._ufunc_outcalls->Template('*((double *)out${outnum}) = ${funcname}(${call_args});')
A:sympy.utilities.autowrap._ufunc_body->Template('static void ${funcname}_ufunc(char **args, npy_intp *dimensions, npy_intp* steps, void* data)\n{\n    npy_intp i;\n    npy_intp n = dimensions[0];\n    ${declare_args}\n    ${declare_steps}\n    for (i = 0; i < n; i++) {\n        ${outcalls}\n        ${step_increments}\n    }\n}\nPyUFuncGenericFunction ${funcname}_funcs[1] = {&${funcname}_ufunc};\nstatic char ${funcname}_types[${n_types}] = ${types}\nstatic void *${funcname}_data[1] = {NULL};')
A:sympy.utilities.autowrap._ufunc_bottom->Template('#if PY_VERSION_HEX >= 0x03000000\nstatic struct PyModuleDef moduledef = {\n    PyModuleDef_HEAD_INIT,\n    "${module}",\n    NULL,\n    -1,\n    ${module}Methods,\n    NULL,\n    NULL,\n    NULL,\n    NULL\n};\n\nPyMODINIT_FUNC PyInit_${module}(void)\n{\n    PyObject *m, *d;\n    ${function_creation}\n    m = PyModule_Create(&moduledef);\n    if (!m) {\n        return NULL;\n    }\n    import_array();\n    import_umath();\n    d = PyModule_GetDict(m);\n    ${ufunc_init}\n    return m;\n}\n#else\nPyMODINIT_FUNC init${module}(void)\n{\n    PyObject *m, *d;\n    ${function_creation}\n    m = Py_InitModule("${module}", ${module}Methods);\n    if (m == NULL) {\n        return;\n    }\n    import_array();\n    import_umath();\n    d = PyModule_GetDict(m);\n    ${ufunc_init}\n}\n#endif')
A:sympy.utilities.autowrap._ufunc_init_form->Template('ufunc${ind} = PyUFunc_FromFuncAndData(${funcname}_funcs, ${funcname}_data, ${funcname}_types, 1, ${n_in}, ${n_out},\n            PyUFunc_None, "${module}", ${docstring}, 0);\n    PyDict_SetItemString(d, "${funcname}", ufunc${ind});\n    Py_DECREF(ufunc${ind});')
A:sympy.utilities.autowrap._ufunc_setup->Template('from setuptools.extension import Extension\nfrom setuptools import setup\n\nfrom numpy import get_include\n\nif __name__ == "__main__":\n    setup(ext_modules=[\n        Extension(\'${module}\',\n                  sources=[\'${module}.c\', \'${filename}.c\'],\n                  include_dirs=[get_include()])])\n')
A:sympy.utilities.autowrap.setup->Template('from setuptools.extension import Extension\nfrom setuptools import setup\n\nfrom numpy import get_include\n\nif __name__ == "__main__":\n    setup(ext_modules=[\n        Extension(\'${module}\',\n                  sources=[\'${module}.c\', \'${filename}.c\'],\n                  include_dirs=[get_include()])])\n').substitute(module=self.module_name, filename=self.filename)
A:sympy.utilities.autowrap.include_file->'"{}.h"'.format(prefix)
A:sympy.utilities.autowrap.top->Template('#include "Python.h"\n#include "math.h"\n#include "numpy/ndarraytypes.h"\n#include "numpy/ufuncobject.h"\n#include "numpy/halffloat.h"\n#include ${include_file}\n\nstatic PyMethodDef ${module}Methods[] = {\n        {NULL, NULL, 0, NULL}\n};').substitute(include_file=include_file, module=module)
A:sympy.utilities.autowrap.(py_in, _)->self._partition_args(routines[0].arguments)
A:sympy.utilities.autowrap.n_in->len(py_in)
A:sympy.utilities.autowrap.n_out->len(routines)
A:sympy.utilities.autowrap.declare_args->'\n    '.join(arg_decs)
A:sympy.utilities.autowrap.declare_steps->'\n    '.join(step_decs)
A:sympy.utilities.autowrap.call_args->', '.join([form.format(a) for a in range(n_in)])
A:sympy.utilities.autowrap.step_increments->'\n        '.join(step_incs)
A:sympy.utilities.autowrap.init_form->Template('ufunc${ind} = PyUFunc_FromFuncAndData(${funcname}_funcs, ${funcname}_data, ${funcname}_types, 1, ${n_in}, ${n_out},\n            PyUFunc_None, "${module}", ${docstring}, 0);\n    PyDict_SetItemString(d, "${funcname}", ufunc${ind});\n    Py_DECREF(ufunc${ind});').substitute(module=module, funcname=name, docstring=docstring, n_in=n_in, n_out=n_out, ind=r_index)
A:sympy.utilities.autowrap.body->'\n\n'.join(functions)
A:sympy.utilities.autowrap.ufunc_init->'\n    '.join(ufunc_init)
A:sympy.utilities.autowrap.function_creation->'\n    '.join(function_creation)
A:sympy.utilities.autowrap.bottom->Template('#if PY_VERSION_HEX >= 0x03000000\nstatic struct PyModuleDef moduledef = {\n    PyModuleDef_HEAD_INIT,\n    "${module}",\n    NULL,\n    -1,\n    ${module}Methods,\n    NULL,\n    NULL,\n    NULL,\n    NULL\n};\n\nPyMODINIT_FUNC PyInit_${module}(void)\n{\n    PyObject *m, *d;\n    ${function_creation}\n    m = PyModule_Create(&moduledef);\n    if (!m) {\n        return NULL;\n    }\n    import_array();\n    import_umath();\n    d = PyModule_GetDict(m);\n    ${ufunc_init}\n    return m;\n}\n#else\nPyMODINIT_FUNC init${module}(void)\n{\n    PyObject *m, *d;\n    ${function_creation}\n    m = Py_InitModule("${module}", ${module}Methods);\n    if (m == NULL) {\n        return;\n    }\n    import_array();\n    import_umath();\n    d = PyModule_GetDict(m);\n    ${ufunc_init}\n}\n#endif').substitute(module=module, ufunc_init=ufunc_init, function_creation=function_creation)
A:sympy.utilities.autowrap.y->IndexedBase(Dummy('y'))
A:sympy.utilities.autowrap.m->Dummy('m', integer=True)
A:sympy.utilities.autowrap.i->Idx(Dummy('i', integer=True), m)
A:sympy.utilities.autowrap.f_dummy->Dummy('f')
A:sympy.utilities.autowrap.f->implemented_function('%s_%d' % (f_dummy.name, f_dummy.dummy_index), Lambda(args, expr))
sympy.utilities.autowrap.CodeWrapError(Exception)
sympy.utilities.autowrap.CodeWrapper(self,generator,filepath=None,flags=[],verbose=False)
sympy.utilities.autowrap.CodeWrapper._generate_code(self,main_routine,routines)
sympy.utilities.autowrap.CodeWrapper._process_files(self,routine)
sympy.utilities.autowrap.CodeWrapper.filename(self)
sympy.utilities.autowrap.CodeWrapper.include_empty(self)
sympy.utilities.autowrap.CodeWrapper.include_header(self)
sympy.utilities.autowrap.CodeWrapper.module_name(self)
sympy.utilities.autowrap.CodeWrapper.wrap_code(self,routine,helpers=None)
sympy.utilities.autowrap.CythonCodeWrapper(self,*args,**kwargs)
sympy.utilities.autowrap.CythonCodeWrapper._call_arg(self,arg)
sympy.utilities.autowrap.CythonCodeWrapper._declare_arg(self,arg)
sympy.utilities.autowrap.CythonCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.utilities.autowrap.CythonCodeWrapper._partition_args(self,args)
sympy.utilities.autowrap.CythonCodeWrapper._prepare_files(self,routine,build_dir=os.curdir)
sympy.utilities.autowrap.CythonCodeWrapper._prototype_arg(self,arg)
sympy.utilities.autowrap.CythonCodeWrapper._string_var(self,var)
sympy.utilities.autowrap.CythonCodeWrapper.command(self)
sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx(self,routines,f,prefix)
sympy.utilities.autowrap.DummyWrapper(CodeWrapper)
sympy.utilities.autowrap.DummyWrapper._generate_code(self,routine,helpers)
sympy.utilities.autowrap.DummyWrapper._get_wrapped_function(cls,mod,name)
sympy.utilities.autowrap.DummyWrapper._prepare_files(self,routine)
sympy.utilities.autowrap.DummyWrapper._process_files(self,routine)
sympy.utilities.autowrap.F2PyCodeWrapper(self,*args,**kwargs)
sympy.utilities.autowrap.F2PyCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.utilities.autowrap.F2PyCodeWrapper._prepare_files(self,routine)
sympy.utilities.autowrap.F2PyCodeWrapper.command(self)
sympy.utilities.autowrap.UfuncifyCodeWrapper(self,*args,**kwargs)
sympy.utilities.autowrap.UfuncifyCodeWrapper._generate_code(self,main_routines,helper_routines)
sympy.utilities.autowrap.UfuncifyCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.utilities.autowrap.UfuncifyCodeWrapper._partition_args(self,args)
sympy.utilities.autowrap.UfuncifyCodeWrapper._prepare_files(self,routines,funcname)
sympy.utilities.autowrap.UfuncifyCodeWrapper.command(self)
sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c(self,routines,f,prefix,funcname=None)
sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_setup(self,f)
sympy.utilities.autowrap.UfuncifyCodeWrapper.wrap_code(self,routines,helpers=None)
sympy.utilities.autowrap._infer_language(backend)
sympy.utilities.autowrap._validate_backend_language(backend,language)
sympy.utilities.autowrap.autowrap(expr,language=None,backend='f2py',tempdir=None,args=None,flags=None,verbose=False,helpers=None,code_gen=None,**kwargs)
sympy.utilities.autowrap.binary_function(symfunc,expr,**kwargs)
sympy.utilities.autowrap.ufuncify(args,expr,language=None,backend='numpy',tempdir=None,flags=None,verbose=False,helpers=None,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/runtests.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/mathml/__init__.py----------------------------------------
A:sympy.utilities.mathml.__init__.s->str(result)
A:sympy.utilities.mathml.__init__.transform->lxml.etree.XSLT(s)
A:sympy.utilities.mathml.__init__.doc->lxml.etree.XML(mml)
A:sympy.utilities.mathml.__init__.result->transform(doc)
A:sympy.utilities.mathml.__init__.mml->add_mathml_headers(mml)
sympy.utilities.mathml.__init__.add_mathml_headers(s)
sympy.utilities.mathml.__init__.apply_xsl(mml,xsl)
sympy.utilities.mathml.__init__.c2p(mml,simple=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_pickling.py----------------------------------------
A:sympy.utilities.tests.test_pickling.cloudpickle->import_module('cloudpickle')
A:sympy.utilities.tests.test_pickling.b->pickle.loads(pickle.dumps(a, protocol))
A:sympy.utilities.tests.test_pickling.d1->dir(a)
A:sympy.utilities.tests.test_pickling.d2->dir(b)
A:sympy.utilities.tests.test_pickling.attr->getattr(a, i)
A:sympy.utilities.tests.test_pickling.x->Symbol('x')
A:sympy.utilities.tests.test_pickling.y->Symbol('y')
A:sympy.utilities.tests.test_pickling.f->Function('f')
A:sympy.utilities.tests.test_pickling.exclude->list(range(5))
A:sympy.utilities.tests.test_pickling.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_pickling.c->cls(x, y)
A:sympy.utilities.tests.test_pickling.p1->Point(1, 2)
A:sympy.utilities.tests.test_pickling.p2->Point(2, 3)
A:sympy.utilities.tests.test_pickling.p3->Point(0, 0)
A:sympy.utilities.tests.test_pickling.p4->Point(0, 1)
A:sympy.utilities.tests.test_pickling.ring->PolyRing('x,y,z', ZZ, lex)
A:sympy.utilities.tests.test_pickling.e->Symbol('e')
A:sympy.utilities.tests.test_pickling.w->SymPyDeprecationWarning('message', deprecated_since_version='1.0', active_deprecations_target='active-deprecations')
sympy.utilities.tests.test_pickling.check(a,exclude=[],check_attr=True)
sympy.utilities.tests.test_pickling.test_Singletons()
sympy.utilities.tests.test_pickling.test_concrete()
sympy.utilities.tests.test_pickling.test_core_Str()
sympy.utilities.tests.test_pickling.test_core_add()
sympy.utilities.tests.test_pickling.test_core_basic()
sympy.utilities.tests.test_pickling.test_core_float_copy()
sympy.utilities.tests.test_pickling.test_core_function()
sympy.utilities.tests.test_pickling.test_core_interval()
sympy.utilities.tests.test_pickling.test_core_mul()
sympy.utilities.tests.test_pickling.test_core_multidimensional()
sympy.utilities.tests.test_pickling.test_core_numbers()
sympy.utilities.tests.test_pickling.test_core_power()
sympy.utilities.tests.test_pickling.test_core_relational()
sympy.utilities.tests.test_pickling.test_core_symbol()
sympy.utilities.tests.test_pickling.test_core_undefinedfunctions()
sympy.utilities.tests.test_pickling.test_core_undefinedfunctions_fail()
sympy.utilities.tests.test_pickling.test_deprecation_warning()
sympy.utilities.tests.test_pickling.test_functions()
sympy.utilities.tests.test_pickling.test_geometry()
sympy.utilities.tests.test_pickling.test_integrals()
sympy.utilities.tests.test_pickling.test_issue_18438()
sympy.utilities.tests.test_pickling.test_logic()
sympy.utilities.tests.test_pickling.test_matrices()
sympy.utilities.tests.test_pickling.test_ntheory()
sympy.utilities.tests.test_pickling.test_physics()
sympy.utilities.tests.test_pickling.test_pickling_polys_domains()
sympy.utilities.tests.test_pickling.test_pickling_polys_elements()
sympy.utilities.tests.test_pickling.test_pickling_polys_errors()
sympy.utilities.tests.test_pickling.test_pickling_polys_fields()
sympy.utilities.tests.test_pickling.test_pickling_polys_monomials()
sympy.utilities.tests.test_pickling.test_pickling_polys_orderings()
sympy.utilities.tests.test_pickling.test_pickling_polys_polyclasses()
sympy.utilities.tests.test_pickling.test_pickling_polys_polytools()
sympy.utilities.tests.test_pickling.test_pickling_polys_rings()
sympy.utilities.tests.test_pickling.test_pickling_polys_rootoftools()
sympy.utilities.tests.test_pickling.test_plotting()
sympy.utilities.tests.test_pickling.test_plotting2()
sympy.utilities.tests.test_pickling.test_printing()
sympy.utilities.tests.test_pickling.test_printing1()
sympy.utilities.tests.test_pickling.test_printing2()
sympy.utilities.tests.test_pickling.test_printing3()
sympy.utilities.tests.test_pickling.test_series()
sympy.utilities.tests.test_pickling.test_unpickle_from_older_versions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_deprecated.py----------------------------------------
sympy.utilities.tests.test_deprecated.test_deprecated_utilities()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_codegen.py----------------------------------------
A:sympy.utilities.tests.test_codegen.output->StringIO()
A:sympy.utilities.tests.test_codegen.source->get_string(code_gen.dump_f95, [routine])
A:sympy.utilities.tests.test_codegen.(a, x, y, z)->symbols('a x y z')
A:sympy.utilities.tests.test_codegen.r->make_routine('foo', [Equality(y, sin(x)), cos(x)])
A:sympy.utilities.tests.test_codegen.(A, B)->map(IndexedBase, ['A', 'B'])
A:sympy.utilities.tests.test_codegen.m->symbols('m', integer=True)
A:sympy.utilities.tests.test_codegen.i->Idx('i', m)
A:sympy.utilities.tests.test_codegen.expr->exp(x + y)
A:sympy.utilities.tests.test_codegen.code_gen->FCodeGen()
A:sympy.utilities.tests.test_codegen.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_codegen.routine->make_routine('test', expr)
A:sympy.utilities.tests.test_codegen.result->codegen(('test', x + y), 'f95', 'test', header=False, empty=False)
A:sympy.utilities.tests.test_codegen.x->Symbol('x')
A:sympy.utilities.tests.test_codegen.(x, y)->symbols('x y')
A:sympy.utilities.tests.test_codegen.(n, m)->symbols('n m', integer=True)
A:sympy.utilities.tests.test_codegen.A->MatrixSymbol('A', 2, 3)
A:sympy.utilities.tests.test_codegen.y->Symbol('y', real=True)
A:sympy.utilities.tests.test_codegen.j->Idx('j', n)
A:sympy.utilities.tests.test_codegen.((f1, code), (f2, interface))->codegen(('matrix_vector', Eq(y[i], A[i, j] * x[j])), 'F95', 'file', header=False, empty=False)
A:sympy.utilities.tests.test_codegen.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.utilities.tests.test_codegen.c89->C89CodeGen()
A:sympy.utilities.tests.test_codegen.c99->C99CodeGen()
A:sympy.utilities.tests.test_codegen.code->get_string(p.dump_f95, [routine])
A:sympy.utilities.tests.test_codegen.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.utilities.tests.test_codegen.c->FCodeGen()
A:sympy.utilities.tests.test_codegen.A_sym->MatrixSymbol('A', 3, 3)
A:sympy.utilities.tests.test_codegen.b_sym->MatrixSymbol('b', 3, 1)
A:sympy.utilities.tests.test_codegen.b->a.split('_')
A:sympy.utilities.tests.test_codegen.cgen->CCodeGen(project='test', cse=True)
A:sympy.utilities.tests.test_codegen.(B, C)->symbols('B,C')
A:sympy.utilities.tests.test_codegen.expr1->Equality(A, Matrix([[1, 2, x]]))
A:sympy.utilities.tests.test_codegen.expr2->Equality(C, (x + y) * z)
A:sympy.utilities.tests.test_codegen.expr3->Equality(B, 2 * x)
A:sympy.utilities.tests.test_codegen.B->MatrixSymbol('B', 1, 3)
A:sympy.utilities.tests.test_codegen.C->MatrixSymbol('C', 1, 3)
A:sympy.utilities.tests.test_codegen.D->MatrixSymbol('D', 2, 1)
A:sympy.utilities.tests.test_codegen.(a, b, c, d)->symbols('a b c d')
A:sympy.utilities.tests.test_codegen.e->MatrixSymbol('e', 3, 1)
A:sympy.utilities.tests.test_codegen.generator->CCodeGen()
A:sympy.utilities.tests.test_codegen.(A, x, y)->map(IndexedBase, 'Axy')
A:sympy.utilities.tests.test_codegen.(i, j, n, m)->symbols('i,j,n,m', integer=True)
A:sympy.utilities.tests.test_codegen.p->FCodeGen()
A:sympy.utilities.tests.test_codegen.func->implemented_function('func', Lambda(n, n * (n + 1)))
A:sympy.utilities.tests.test_codegen.(x, X)->symbols('x,X')
A:sympy.utilities.tests.test_codegen.x1->symbols('x')
A:sympy.utilities.tests.test_codegen.x2->symbols('x', my_assumption=True)
A:sympy.utilities.tests.test_codegen.expresult->codegen(name_expr, 'C89', 'foo', header=False, empty=False)
A:sympy.utilities.tests.test_codegen.e2->Matrix([[x, y], [z, 16]])
A:sympy.utilities.tests.test_codegen.(x, y, z, t)->symbols('x y z t')
A:sympy.utilities.tests.test_codegen.printer->C99CodePrinter(settings={'user_functions': {'exp': 'fastexp'}})
A:sympy.utilities.tests.test_codegen.gen->C99CodeGen(printer=printer)
sympy.utilities.tests.test_codegen.get_string(dump_fn,routines,prefix='file',header=False,empty=False)
sympy.utilities.tests.test_codegen.test_Routine_argument_order()
sympy.utilities.tests.test_codegen.test_ansi_math1_codegen()
sympy.utilities.tests.test_codegen.test_ansi_math2_codegen()
sympy.utilities.tests.test_codegen.test_c_code_argument_order()
sympy.utilities.tests.test_codegen.test_c_code_reserved_words()
sympy.utilities.tests.test_codegen.test_c_fortran_omit_routine_name()
sympy.utilities.tests.test_codegen.test_c_with_printer()
sympy.utilities.tests.test_codegen.test_ccode_cse()
sympy.utilities.tests.test_codegen.test_ccode_matrixsymbol_slice()
sympy.utilities.tests.test_codegen.test_ccode_results_named_ordered()
sympy.utilities.tests.test_codegen.test_ccode_unused_array_arg()
sympy.utilities.tests.test_codegen.test_check_case()
sympy.utilities.tests.test_codegen.test_check_case_false_positive()
sympy.utilities.tests.test_codegen.test_complicated_codegen()
sympy.utilities.tests.test_codegen.test_complicated_codegen_f95()
sympy.utilities.tests.test_codegen.test_custom_codegen()
sympy.utilities.tests.test_codegen.test_dummy_loops_c()
sympy.utilities.tests.test_codegen.test_dummy_loops_f95()
sympy.utilities.tests.test_codegen.test_empty_c_code()
sympy.utilities.tests.test_codegen.test_empty_c_code_with_comment()
sympy.utilities.tests.test_codegen.test_empty_c_header()
sympy.utilities.tests.test_codegen.test_empty_f_code()
sympy.utilities.tests.test_codegen.test_empty_f_code_with_header()
sympy.utilities.tests.test_codegen.test_empty_f_header()
sympy.utilities.tests.test_codegen.test_erf_f_code()
sympy.utilities.tests.test_codegen.test_f_code_argument_order()
sympy.utilities.tests.test_codegen.test_f_code_call_signature_wrap()
sympy.utilities.tests.test_codegen.test_fcode_complex()
sympy.utilities.tests.test_codegen.test_fcode_matrix_output()
sympy.utilities.tests.test_codegen.test_fcode_matrixsymbol_slice()
sympy.utilities.tests.test_codegen.test_fcode_matrixsymbol_slice_autoname()
sympy.utilities.tests.test_codegen.test_fcode_results_named_ordered()
sympy.utilities.tests.test_codegen.test_global_vars()
sympy.utilities.tests.test_codegen.test_inline_function()
sympy.utilities.tests.test_codegen.test_intrinsic_math2_codegen()
sympy.utilities.tests.test_codegen.test_intrinsic_math_codegen()
sympy.utilities.tests.test_codegen.test_loops()
sympy.utilities.tests.test_codegen.test_loops_InOut()
sympy.utilities.tests.test_codegen.test_loops_c()
sympy.utilities.tests.test_codegen.test_multidim_c_argument_cse()
sympy.utilities.tests.test_codegen.test_multiple_results_c()
sympy.utilities.tests.test_codegen.test_multiple_results_f()
sympy.utilities.tests.test_codegen.test_no_results_c()
sympy.utilities.tests.test_codegen.test_no_results_f()
sympy.utilities.tests.test_codegen.test_numbersymbol_c_code()
sympy.utilities.tests.test_codegen.test_numbersymbol_f_code()
sympy.utilities.tests.test_codegen.test_output_arg_c()
sympy.utilities.tests.test_codegen.test_output_arg_c_reserved_words()
sympy.utilities.tests.test_codegen.test_output_arg_f()
sympy.utilities.tests.test_codegen.test_partial_loops_c()
sympy.utilities.tests.test_codegen.test_partial_loops_f()
sympy.utilities.tests.test_codegen.test_simple_c_code()
sympy.utilities.tests.test_codegen.test_simple_c_codegen()
sympy.utilities.tests.test_codegen.test_simple_c_header()
sympy.utilities.tests.test_codegen.test_simple_f_code()
sympy.utilities.tests.test_codegen.test_simple_f_codegen()
sympy.utilities.tests.test_codegen.test_simple_f_header()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_wester.py----------------------------------------
A:sympy.utilities.tests.test_wester.(x, y, z)->CoordSys3D('N').base_scalars()
A:sympy.utilities.tests.test_wester.(i, j, k, l, m, n)->symbols('i j k l m n', integer=True)
A:sympy.utilities.tests.test_wester.f->inverse_laplace_transform(s / (s ** 2 + (w - 1) ** 2), s, t, simplify=True)
A:sympy.utilities.tests.test_wester.g->expand((sin(x) - 2 * cos(y) ** 2 + 3 * tan(z) ** 3) ** 20)
A:sympy.utilities.tests.test_wester.test->factor(x ** 3 + y ** 3, extension=sqrt(-3))
A:sympy.utilities.tests.test_wester.s->symbols('s')
A:sympy.utilities.tests.test_wester.it->cf_i((exp(1 / s) - 1) / (exp(1 / s) + 1))
A:sympy.utilities.tests.test_wester.expr->factor(6 * x - 10)
A:sympy.utilities.tests.test_wester.x->symbols('x', real=True)
A:sympy.utilities.tests.test_wester.ep->expand(p)
A:sympy.utilities.tests.test_wester.dep->diff(ep, x)
A:sympy.utilities.tests.test_wester.a->symbols('a', real=True)
A:sympy.utilities.tests.test_wester.phi->AlgebraicNumber(S.GoldenRatio.expand(func=True), alias='phi')
A:sympy.utilities.tests.test_wester.(A, B, C)->symbols('A, B, C', commutative=False)
A:sympy.utilities.tests.test_wester.res->diff((tan(x) ** 2 + 1 - cos(x) ** (-2)) / (sin(x) ** 2 + cos(x) ** 2 - 1), x)
A:sympy.utilities.tests.test_wester.p->symbols('p', positive=True)
A:sympy.utilities.tests.test_wester.(mu, nu)->symbols('mu, nu', integer=True)
A:sympy.utilities.tests.test_wester.(z1, z2)->symbols('z1, z2', complex=True)
A:sympy.utilities.tests.test_wester.(a, b)->symbols('a b', commutative=False, scalar=False)
A:sympy.utilities.tests.test_wester.(x, y)->symbols('x y', real=True)
A:sympy.utilities.tests.test_wester.y->Function('y')
A:sympy.utilities.tests.test_wester.sexpr->simplify(expr)
A:sympy.utilities.tests.test_wester.z->symbols('z', complex=True)
A:sympy.utilities.tests.test_wester.sol->dsolve(eq, f(x))
A:sympy.utilities.tests.test_wester.n->symbols('n', positive=True, integer=True)
A:sympy.utilities.tests.test_wester.got->solveset(sin(x) - S.Half)
A:sympy.utilities.tests.test_wester.solution->solve(1 - binomial(m, 2) * 2 ** k, k)
A:sympy.utilities.tests.test_wester.answer->log(2 / (m * (m - 1)), 2)
A:sympy.utilities.tests.test_wester.(a, b, c, d)->symbols('a b c d', real=True)
A:sympy.utilities.tests.test_wester.b->symbols('b', real=True)
A:sympy.utilities.tests.test_wester.(a, b, c)->symbols('a b c')
A:sympy.utilities.tests.test_wester.domain->FracField([a, b, c], ZZ).to_domain()
A:sympy.utilities.tests.test_wester.ring->PolyRing('k1:50', domain)
A:sympy.utilities.tests.test_wester.(x, y, k)->symbols('x y k', real=True)
A:sympy.utilities.tests.test_wester.(x, y, k, n)->symbols('x y k n', real=True)
A:sympy.utilities.tests.test_wester.(r, t)->symbols('r t', real=True)
A:sympy.utilities.tests.test_wester.M->Matrix([Matrix(Y).T.diff(x, n) for n in range(0, len(Y))])
A:sympy.utilities.tests.test_wester.N->CoordSys3D('N')
A:sympy.utilities.tests.test_wester.delop->Del()
A:sympy.utilities.tests.test_wester.(i, j, k)->CoordSys3D('N').base_vectors()
A:sympy.utilities.tests.test_wester.A->Matrix([[11, 12, 13, 14], [21, 22, 23, 24], [31, 32, 33, 34], [41, 42, 43, 44]])
A:sympy.utilities.tests.test_wester.B->BlockMatrix([[A11, A12], [ZeroMatrix(n, n), A22]])
A:sympy.utilities.tests.test_wester.c->symbols('c')
A:sympy.utilities.tests.test_wester.A11->MatrixSymbol('A11', n, n)
A:sympy.utilities.tests.test_wester.A12->MatrixSymbol('A12', n, n)
A:sympy.utilities.tests.test_wester.A22->MatrixSymbol('A22', n, n)
A:sympy.utilities.tests.test_wester.(L, U, _)->Matrix([Matrix(Y).T.diff(x, n) for n in range(0, len(Y))]).LUdecomposition()
A:sympy.utilities.tests.test_wester.(R, _)->Matrix([Matrix(Y).T.diff(x, n) for n in range(0, len(Y))]).rref()
A:sympy.utilities.tests.test_wester.t->symbols('t', positive=True)
A:sympy.utilities.tests.test_wester.w->symbols('w', real=True)
A:sympy.utilities.tests.test_wester.MF->N(Matrix([[611, 196, -192, 407, -8, -52, -49, 29], [196, 899, 113, -192, -71, -43, -8, -44], [-192, 113, 899, 196, 61, 49, 8, 52], [407, -192, 196, 611, 8, 44, 59, -23], [-8, -71, 61, 8, 411, -599, 208, 208], [-52, -43, 49, 44, -599, 411, 208, 208], [-49, -8, 8, 59, 208, 208, 99, -911], [29, -44, 52, -23, 208, 208, -911, 99]]))
A:sympy.utilities.tests.test_wester.ev_1->sorted(MF.eigenvals(multiple=True))
A:sympy.utilities.tests.test_wester.ev_2->sorted([-1020.0490184299969, 0.0, 0.09804864072151699, 1000.0, 1000.0, 1019.9019513592784, 1020.0, 1020.0490184299969])
A:sympy.utilities.tests.test_wester.(a0, a1, a2, a3, a4)->symbols('a0 a1 a2 a3 a4')
A:sympy.utilities.tests.test_wester.(_, J)->Matrix([Matrix(Y).T.diff(x, n) for n in range(0, len(Y))]).jordan_form()
A:sympy.utilities.tests.test_wester.(w, t)->symbols('w t')
A:sympy.utilities.tests.test_wester.V->Matrix([diff(f, v) for v in Y])
A:sympy.utilities.tests.test_wester.(i, j, n)->symbols('i j n', integer=True, positive=True)
A:sympy.utilities.tests.test_wester.xn->MatrixSymbol('xn', n, 1)
A:sympy.utilities.tests.test_wester.Sm->Sum(Product(k / (2 * k - 1), (k, 1, m)), (m, 2, oo))
A:sympy.utilities.tests.test_wester.(m, b)->symbols('m b')
A:sympy.utilities.tests.test_wester.(i, n)->symbols('i n', integer=True, positive=True)
A:sympy.utilities.tests.test_wester.yn->MatrixSymbol('yn', n, 1)
A:sympy.utilities.tests.test_wester.f1->Lambda(x, diff(f0(x), x))
A:sympy.utilities.tests.test_wester.f2->diff(f, b)
A:sympy.utilities.tests.test_wester.(n, k)->symbols('n k', integer=True, positive=True)
A:sympy.utilities.tests.test_wester.T->integrate(f(y), (y, h(x), g(x)))
A:sympy.utilities.tests.test_wester.T2->integrate(f(y), (y, h(x), g(x))).combsimp().rewrite(factorial)
A:sympy.utilities.tests.test_wester.(a, b, c, n, k)->symbols('a b c n k', integer=True, positive=True)
A:sympy.utilities.tests.test_wester.gn->MatrixSymbol('gn', n + 2, 1)
A:sympy.utilities.tests.test_wester.(n, m, r, k)->symbols('n m r k', integer=True, positive=True)
A:sympy.utilities.tests.test_wester.T3->integrate(f(y), (y, h(x), g(x))).combsimp().rewrite(factorial).rewrite(binomial)
A:sympy.utilities.tests.test_wester.k->Dummy('k')
A:sympy.utilities.tests.test_wester.(m, k)->symbols('m k', integer=True, positive=True)
A:sympy.utilities.tests.test_wester.Pr->Product((k * (k + 1) + 1 + I) / (k * (k + 1) + 1 - I), (k, 0, oo))
A:sympy.utilities.tests.test_wester.(a, z)->symbols('a z', positive=True)
A:sympy.utilities.tests.test_wester.(z, k)->symbols('z k', positive=True)
A:sympy.utilities.tests.test_wester.(x, t)->symbols('x t', real=True)
A:sympy.utilities.tests.test_wester.d->diff(x ** n, x, n)
A:sympy.utilities.tests.test_wester.h->Function('h')
A:sympy.utilities.tests.test_wester.(p, t)->symbols('p t', real=True)
A:sympy.utilities.tests.test_wester.s2->tan(x).series()
A:sympy.utilities.tests.test_wester.s3->tan(x).series().doit().factor()
A:sympy.utilities.tests.test_wester.r1->integrate(integrate(sqrt(x ** 2 + y ** 2), (x, 0, 1)), (y, 0, 1))
A:sympy.utilities.tests.test_wester.r2->integrate(integrate(x / (x ** 2 + y ** 2), (y, -oo, oo)), (x, a, b))
A:sympy.utilities.tests.test_wester.q->symbols('q', real=True)
A:sympy.utilities.tests.test_wester.(t, u)->symbols('t u', real=True)
A:sympy.utilities.tests.test_wester.(a, x, y)->symbols('a x y', real=True)
A:sympy.utilities.tests.test_wester.i1->integrate(sin(a) * sin(y) / sqrt(1 - sin(a) ** 2 * sin(x) ** 2 * sin(y) ** 2), (x, 0, pi / 2))
A:sympy.utilities.tests.test_wester.i2->integrate(i1, (y, 0, pi / 2))
A:sympy.utilities.tests.test_wester.(v, c)->symbols('v c', real=True)
A:sympy.utilities.tests.test_wester.s1->log(sin(x) / x).series()
A:sympy.utilities.tests.test_wester.(z, w)->symbols('z w')
A:sympy.utilities.tests.test_wester.(a, b, x)->symbols('a b x', real=True)
A:sympy.utilities.tests.test_wester.e1->integrate(exp(-t) / t, (t, x, oo))
A:sympy.utilities.tests.test_wester.(F, _, _)->laplace_transform(eq, t, s)
A:sympy.utilities.tests.test_wester.D->(F - (s ** 2 * LaplaceTransform(y(t), t, s) - s * y(0) + LaplaceTransform(y(t), t, s) - Subs(Derivative(y(t), t), t, 0) + 4 * (1 - exp(s)) * exp(-2 * s) / s)).simplify(doit=False)
A:sympy.utilities.tests.test_wester.(x, s)->symbols('x s')
A:sympy.utilities.tests.test_wester.r->Function('r')
A:sympy.utilities.tests.test_wester.(C1, C2)->symbols('C1 C2')
A:sympy.utilities.tests.test_wester.f0->Lambda(x, sol.rhs)
A:sympy.utilities.tests.test_wester.const_dict->solve((f0(0), f1(0)))
A:sympy.utilities.tests.test_wester.result->f0(x).subs(C1, const_dict[C1]).subs(C2, const_dict[C2])
sympy.utilities.tests.test_wester.test_B1()
sympy.utilities.tests.test_wester.test_B2()
sympy.utilities.tests.test_wester.test_B3()
sympy.utilities.tests.test_wester.test_B4()
sympy.utilities.tests.test_wester.test_C1()
sympy.utilities.tests.test_wester.test_C10()
sympy.utilities.tests.test_wester.test_C11()
sympy.utilities.tests.test_wester.test_C12()
sympy.utilities.tests.test_wester.test_C13()
sympy.utilities.tests.test_wester.test_C14()
sympy.utilities.tests.test_wester.test_C15()
sympy.utilities.tests.test_wester.test_C16()
sympy.utilities.tests.test_wester.test_C17()
sympy.utilities.tests.test_wester.test_C18()
sympy.utilities.tests.test_wester.test_C19()
sympy.utilities.tests.test_wester.test_C2()
sympy.utilities.tests.test_wester.test_C20()
sympy.utilities.tests.test_wester.test_C21()
sympy.utilities.tests.test_wester.test_C22()
sympy.utilities.tests.test_wester.test_C23()
sympy.utilities.tests.test_wester.test_C24()
sympy.utilities.tests.test_wester.test_C3()
sympy.utilities.tests.test_wester.test_C4()
sympy.utilities.tests.test_wester.test_C5()
sympy.utilities.tests.test_wester.test_C6()
sympy.utilities.tests.test_wester.test_C7()
sympy.utilities.tests.test_wester.test_C8()
sympy.utilities.tests.test_wester.test_C9()
sympy.utilities.tests.test_wester.test_D1()
sympy.utilities.tests.test_wester.test_D10()
sympy.utilities.tests.test_wester.test_D11()
sympy.utilities.tests.test_wester.test_D12()
sympy.utilities.tests.test_wester.test_D13()
sympy.utilities.tests.test_wester.test_D2()
sympy.utilities.tests.test_wester.test_D3()
sympy.utilities.tests.test_wester.test_D4()
sympy.utilities.tests.test_wester.test_D5()
sympy.utilities.tests.test_wester.test_D6()
sympy.utilities.tests.test_wester.test_D7()
sympy.utilities.tests.test_wester.test_D8()
sympy.utilities.tests.test_wester.test_D9()
sympy.utilities.tests.test_wester.test_F1()
sympy.utilities.tests.test_wester.test_F2()
sympy.utilities.tests.test_wester.test_F3()
sympy.utilities.tests.test_wester.test_F4()
sympy.utilities.tests.test_wester.test_F5()
sympy.utilities.tests.test_wester.test_F6()
sympy.utilities.tests.test_wester.test_F7()
sympy.utilities.tests.test_wester.test_F8()
sympy.utilities.tests.test_wester.test_F9()
sympy.utilities.tests.test_wester.test_G1()
sympy.utilities.tests.test_wester.test_G15()
sympy.utilities.tests.test_wester.test_G16()
sympy.utilities.tests.test_wester.test_G17()
sympy.utilities.tests.test_wester.test_G18()
sympy.utilities.tests.test_wester.test_G19()
sympy.utilities.tests.test_wester.test_G2()
sympy.utilities.tests.test_wester.test_G20()
sympy.utilities.tests.test_wester.test_G20b()
sympy.utilities.tests.test_wester.test_G3()
sympy.utilities.tests.test_wester.test_H1()
sympy.utilities.tests.test_wester.test_H10()
sympy.utilities.tests.test_wester.test_H11()
sympy.utilities.tests.test_wester.test_H12()
sympy.utilities.tests.test_wester.test_H13()
sympy.utilities.tests.test_wester.test_H14()
sympy.utilities.tests.test_wester.test_H15()
sympy.utilities.tests.test_wester.test_H16()
sympy.utilities.tests.test_wester.test_H17()
sympy.utilities.tests.test_wester.test_H18()
sympy.utilities.tests.test_wester.test_H19()
sympy.utilities.tests.test_wester.test_H2()
sympy.utilities.tests.test_wester.test_H20()
sympy.utilities.tests.test_wester.test_H21()
sympy.utilities.tests.test_wester.test_H22()
sympy.utilities.tests.test_wester.test_H23()
sympy.utilities.tests.test_wester.test_H24()
sympy.utilities.tests.test_wester.test_H25()
sympy.utilities.tests.test_wester.test_H26()
sympy.utilities.tests.test_wester.test_H27()
sympy.utilities.tests.test_wester.test_H28()
sympy.utilities.tests.test_wester.test_H29()
sympy.utilities.tests.test_wester.test_H3()
sympy.utilities.tests.test_wester.test_H30()
sympy.utilities.tests.test_wester.test_H31()
sympy.utilities.tests.test_wester.test_H32()
sympy.utilities.tests.test_wester.test_H33()
sympy.utilities.tests.test_wester.test_H4()
sympy.utilities.tests.test_wester.test_H5()
sympy.utilities.tests.test_wester.test_H6()
sympy.utilities.tests.test_wester.test_H7()
sympy.utilities.tests.test_wester.test_H8()
sympy.utilities.tests.test_wester.test_H9()
sympy.utilities.tests.test_wester.test_I1()
sympy.utilities.tests.test_wester.test_I10()
sympy.utilities.tests.test_wester.test_I11()
sympy.utilities.tests.test_wester.test_I12()
sympy.utilities.tests.test_wester.test_I2()
sympy.utilities.tests.test_wester.test_I3()
sympy.utilities.tests.test_wester.test_I4()
sympy.utilities.tests.test_wester.test_I5()
sympy.utilities.tests.test_wester.test_I6()
sympy.utilities.tests.test_wester.test_I7()
sympy.utilities.tests.test_wester.test_I8()
sympy.utilities.tests.test_wester.test_I9()
sympy.utilities.tests.test_wester.test_J1()
sympy.utilities.tests.test_wester.test_J10()
sympy.utilities.tests.test_wester.test_J11()
sympy.utilities.tests.test_wester.test_J12()
sympy.utilities.tests.test_wester.test_J13()
sympy.utilities.tests.test_wester.test_J14()
sympy.utilities.tests.test_wester.test_J15()
sympy.utilities.tests.test_wester.test_J16()
sympy.utilities.tests.test_wester.test_J17()
sympy.utilities.tests.test_wester.test_J18()
sympy.utilities.tests.test_wester.test_J2()
sympy.utilities.tests.test_wester.test_J3()
sympy.utilities.tests.test_wester.test_J4()
sympy.utilities.tests.test_wester.test_J5()
sympy.utilities.tests.test_wester.test_J6()
sympy.utilities.tests.test_wester.test_J7()
sympy.utilities.tests.test_wester.test_J8()
sympy.utilities.tests.test_wester.test_J9()
sympy.utilities.tests.test_wester.test_K1()
sympy.utilities.tests.test_wester.test_K10()
sympy.utilities.tests.test_wester.test_K2()
sympy.utilities.tests.test_wester.test_K3()
sympy.utilities.tests.test_wester.test_K4()
sympy.utilities.tests.test_wester.test_K5()
sympy.utilities.tests.test_wester.test_K6()
sympy.utilities.tests.test_wester.test_K7()
sympy.utilities.tests.test_wester.test_K8()
sympy.utilities.tests.test_wester.test_K9()
sympy.utilities.tests.test_wester.test_L1()
sympy.utilities.tests.test_wester.test_L2()
sympy.utilities.tests.test_wester.test_L3()
sympy.utilities.tests.test_wester.test_L4()
sympy.utilities.tests.test_wester.test_L5()
sympy.utilities.tests.test_wester.test_L6()
sympy.utilities.tests.test_wester.test_L7()
sympy.utilities.tests.test_wester.test_L8()
sympy.utilities.tests.test_wester.test_L9()
sympy.utilities.tests.test_wester.test_M1()
sympy.utilities.tests.test_wester.test_M10()
sympy.utilities.tests.test_wester.test_M11()
sympy.utilities.tests.test_wester.test_M12()
sympy.utilities.tests.test_wester.test_M13()
sympy.utilities.tests.test_wester.test_M14()
sympy.utilities.tests.test_wester.test_M15()
sympy.utilities.tests.test_wester.test_M16()
sympy.utilities.tests.test_wester.test_M17()
sympy.utilities.tests.test_wester.test_M18()
sympy.utilities.tests.test_wester.test_M19()
sympy.utilities.tests.test_wester.test_M2()
sympy.utilities.tests.test_wester.test_M20()
sympy.utilities.tests.test_wester.test_M21()
sympy.utilities.tests.test_wester.test_M22()
sympy.utilities.tests.test_wester.test_M23()
sympy.utilities.tests.test_wester.test_M24()
sympy.utilities.tests.test_wester.test_M25()
sympy.utilities.tests.test_wester.test_M26()
sympy.utilities.tests.test_wester.test_M27()
sympy.utilities.tests.test_wester.test_M28()
sympy.utilities.tests.test_wester.test_M29()
sympy.utilities.tests.test_wester.test_M30()
sympy.utilities.tests.test_wester.test_M31()
sympy.utilities.tests.test_wester.test_M32()
sympy.utilities.tests.test_wester.test_M33()
sympy.utilities.tests.test_wester.test_M34()
sympy.utilities.tests.test_wester.test_M35()
sympy.utilities.tests.test_wester.test_M36()
sympy.utilities.tests.test_wester.test_M37()
sympy.utilities.tests.test_wester.test_M38()
sympy.utilities.tests.test_wester.test_M39()
sympy.utilities.tests.test_wester.test_M5()
sympy.utilities.tests.test_wester.test_M6()
sympy.utilities.tests.test_wester.test_M7()
sympy.utilities.tests.test_wester.test_M8()
sympy.utilities.tests.test_wester.test_M9()
sympy.utilities.tests.test_wester.test_N1()
sympy.utilities.tests.test_wester.test_N10()
sympy.utilities.tests.test_wester.test_N11()
sympy.utilities.tests.test_wester.test_N12()
sympy.utilities.tests.test_wester.test_N13()
sympy.utilities.tests.test_wester.test_N14()
sympy.utilities.tests.test_wester.test_N15()
sympy.utilities.tests.test_wester.test_N16()
sympy.utilities.tests.test_wester.test_N17()
sympy.utilities.tests.test_wester.test_N2()
sympy.utilities.tests.test_wester.test_N3()
sympy.utilities.tests.test_wester.test_N4()
sympy.utilities.tests.test_wester.test_N5()
sympy.utilities.tests.test_wester.test_N6()
sympy.utilities.tests.test_wester.test_N7()
sympy.utilities.tests.test_wester.test_N8()
sympy.utilities.tests.test_wester.test_N9()
sympy.utilities.tests.test_wester.test_O1()
sympy.utilities.tests.test_wester.test_O10()
sympy.utilities.tests.test_wester.test_O2()
sympy.utilities.tests.test_wester.test_O3()
sympy.utilities.tests.test_wester.test_O4()
sympy.utilities.tests.test_wester.test_O5()
sympy.utilities.tests.test_wester.test_P1()
sympy.utilities.tests.test_wester.test_P10()
sympy.utilities.tests.test_wester.test_P11()
sympy.utilities.tests.test_wester.test_P11_workaround()
sympy.utilities.tests.test_wester.test_P12()
sympy.utilities.tests.test_wester.test_P13()
sympy.utilities.tests.test_wester.test_P14()
sympy.utilities.tests.test_wester.test_P15()
sympy.utilities.tests.test_wester.test_P16()
sympy.utilities.tests.test_wester.test_P17()
sympy.utilities.tests.test_wester.test_P18()
sympy.utilities.tests.test_wester.test_P19()
sympy.utilities.tests.test_wester.test_P2()
sympy.utilities.tests.test_wester.test_P20()
sympy.utilities.tests.test_wester.test_P21()
sympy.utilities.tests.test_wester.test_P22()
sympy.utilities.tests.test_wester.test_P23()
sympy.utilities.tests.test_wester.test_P24()
sympy.utilities.tests.test_wester.test_P25()
sympy.utilities.tests.test_wester.test_P26()
sympy.utilities.tests.test_wester.test_P27()
sympy.utilities.tests.test_wester.test_P28()
sympy.utilities.tests.test_wester.test_P29()
sympy.utilities.tests.test_wester.test_P3()
sympy.utilities.tests.test_wester.test_P30()
sympy.utilities.tests.test_wester.test_P31()
sympy.utilities.tests.test_wester.test_P32()
sympy.utilities.tests.test_wester.test_P33()
sympy.utilities.tests.test_wester.test_P34()
sympy.utilities.tests.test_wester.test_P35()
sympy.utilities.tests.test_wester.test_P36()
sympy.utilities.tests.test_wester.test_P37()
sympy.utilities.tests.test_wester.test_P38()
sympy.utilities.tests.test_wester.test_P39()
sympy.utilities.tests.test_wester.test_P4()
sympy.utilities.tests.test_wester.test_P40()
sympy.utilities.tests.test_wester.test_P41()
sympy.utilities.tests.test_wester.test_P42()
sympy.utilities.tests.test_wester.test_P43()
sympy.utilities.tests.test_wester.test_P44()
sympy.utilities.tests.test_wester.test_P45()
sympy.utilities.tests.test_wester.test_P5()
sympy.utilities.tests.test_wester.test_P6()
sympy.utilities.tests.test_wester.test_P7()
sympy.utilities.tests.test_wester.test_P8()
sympy.utilities.tests.test_wester.test_P9()
sympy.utilities.tests.test_wester.test_R1()
sympy.utilities.tests.test_wester.test_R10()
sympy.utilities.tests.test_wester.test_R11()
sympy.utilities.tests.test_wester.test_R12()
sympy.utilities.tests.test_wester.test_R13()
sympy.utilities.tests.test_wester.test_R14()
sympy.utilities.tests.test_wester.test_R15()
sympy.utilities.tests.test_wester.test_R16()
sympy.utilities.tests.test_wester.test_R17()
sympy.utilities.tests.test_wester.test_R18()
sympy.utilities.tests.test_wester.test_R19()
sympy.utilities.tests.test_wester.test_R2()
sympy.utilities.tests.test_wester.test_R20()
sympy.utilities.tests.test_wester.test_R21()
sympy.utilities.tests.test_wester.test_R23()
sympy.utilities.tests.test_wester.test_R24()
sympy.utilities.tests.test_wester.test_R3()
sympy.utilities.tests.test_wester.test_R4()
sympy.utilities.tests.test_wester.test_R5()
sympy.utilities.tests.test_wester.test_R6()
sympy.utilities.tests.test_wester.test_R7()
sympy.utilities.tests.test_wester.test_R8()
sympy.utilities.tests.test_wester.test_R9()
sympy.utilities.tests.test_wester.test_S1()
sympy.utilities.tests.test_wester.test_S10()
sympy.utilities.tests.test_wester.test_S2()
sympy.utilities.tests.test_wester.test_S3()
sympy.utilities.tests.test_wester.test_S4()
sympy.utilities.tests.test_wester.test_S5()
sympy.utilities.tests.test_wester.test_S6()
sympy.utilities.tests.test_wester.test_S7()
sympy.utilities.tests.test_wester.test_S8()
sympy.utilities.tests.test_wester.test_S9()
sympy.utilities.tests.test_wester.test_T1()
sympy.utilities.tests.test_wester.test_T10()
sympy.utilities.tests.test_wester.test_T11()
sympy.utilities.tests.test_wester.test_T12()
sympy.utilities.tests.test_wester.test_T13()
sympy.utilities.tests.test_wester.test_T14()
sympy.utilities.tests.test_wester.test_T2()
sympy.utilities.tests.test_wester.test_T3()
sympy.utilities.tests.test_wester.test_T4()
sympy.utilities.tests.test_wester.test_T5()
sympy.utilities.tests.test_wester.test_T6()
sympy.utilities.tests.test_wester.test_T7()
sympy.utilities.tests.test_wester.test_T8()
sympy.utilities.tests.test_wester.test_T9()
sympy.utilities.tests.test_wester.test_U1()
sympy.utilities.tests.test_wester.test_U10()
sympy.utilities.tests.test_wester.test_U11()
sympy.utilities.tests.test_wester.test_U12()
sympy.utilities.tests.test_wester.test_U13()
sympy.utilities.tests.test_wester.test_U14()
sympy.utilities.tests.test_wester.test_U15()
sympy.utilities.tests.test_wester.test_U16()
sympy.utilities.tests.test_wester.test_U17()
sympy.utilities.tests.test_wester.test_U2()
sympy.utilities.tests.test_wester.test_U3()
sympy.utilities.tests.test_wester.test_U4()
sympy.utilities.tests.test_wester.test_U5()
sympy.utilities.tests.test_wester.test_U6()
sympy.utilities.tests.test_wester.test_U7()
sympy.utilities.tests.test_wester.test_U8()
sympy.utilities.tests.test_wester.test_U9()
sympy.utilities.tests.test_wester.test_V1()
sympy.utilities.tests.test_wester.test_V10()
sympy.utilities.tests.test_wester.test_V11()
sympy.utilities.tests.test_wester.test_V12()
sympy.utilities.tests.test_wester.test_V13()
sympy.utilities.tests.test_wester.test_V14()
sympy.utilities.tests.test_wester.test_V15()
sympy.utilities.tests.test_wester.test_V16()
sympy.utilities.tests.test_wester.test_V17()
sympy.utilities.tests.test_wester.test_V2()
sympy.utilities.tests.test_wester.test_V3()
sympy.utilities.tests.test_wester.test_V4()
sympy.utilities.tests.test_wester.test_V5()
sympy.utilities.tests.test_wester.test_V6()
sympy.utilities.tests.test_wester.test_V7()
sympy.utilities.tests.test_wester.test_V8_V9()
sympy.utilities.tests.test_wester.test_W1()
sympy.utilities.tests.test_wester.test_W10()
sympy.utilities.tests.test_wester.test_W11()
sympy.utilities.tests.test_wester.test_W12()
sympy.utilities.tests.test_wester.test_W13()
sympy.utilities.tests.test_wester.test_W14()
sympy.utilities.tests.test_wester.test_W15()
sympy.utilities.tests.test_wester.test_W16()
sympy.utilities.tests.test_wester.test_W17()
sympy.utilities.tests.test_wester.test_W18()
sympy.utilities.tests.test_wester.test_W19()
sympy.utilities.tests.test_wester.test_W2()
sympy.utilities.tests.test_wester.test_W20()
sympy.utilities.tests.test_wester.test_W21()
sympy.utilities.tests.test_wester.test_W22()
sympy.utilities.tests.test_wester.test_W23()
sympy.utilities.tests.test_wester.test_W23b()
sympy.utilities.tests.test_wester.test_W24()
sympy.utilities.tests.test_wester.test_W25()
sympy.utilities.tests.test_wester.test_W26()
sympy.utilities.tests.test_wester.test_W27()
sympy.utilities.tests.test_wester.test_W3()
sympy.utilities.tests.test_wester.test_W4()
sympy.utilities.tests.test_wester.test_W5()
sympy.utilities.tests.test_wester.test_W6()
sympy.utilities.tests.test_wester.test_W7()
sympy.utilities.tests.test_wester.test_W8()
sympy.utilities.tests.test_wester.test_W9()
sympy.utilities.tests.test_wester.test_X1()
sympy.utilities.tests.test_wester.test_X10()
sympy.utilities.tests.test_wester.test_X11()
sympy.utilities.tests.test_wester.test_X12()
sympy.utilities.tests.test_wester.test_X13()
sympy.utilities.tests.test_wester.test_X14()
sympy.utilities.tests.test_wester.test_X15()
sympy.utilities.tests.test_wester.test_X16()
sympy.utilities.tests.test_wester.test_X17()
sympy.utilities.tests.test_wester.test_X18()
sympy.utilities.tests.test_wester.test_X19()
sympy.utilities.tests.test_wester.test_X2()
sympy.utilities.tests.test_wester.test_X20()
sympy.utilities.tests.test_wester.test_X21()
sympy.utilities.tests.test_wester.test_X22()
sympy.utilities.tests.test_wester.test_X3()
sympy.utilities.tests.test_wester.test_X4()
sympy.utilities.tests.test_wester.test_X5()
sympy.utilities.tests.test_wester.test_X6()
sympy.utilities.tests.test_wester.test_X7()
sympy.utilities.tests.test_wester.test_X8()
sympy.utilities.tests.test_wester.test_X9()
sympy.utilities.tests.test_wester.test_Y1()
sympy.utilities.tests.test_wester.test_Y10()
sympy.utilities.tests.test_wester.test_Y11()
sympy.utilities.tests.test_wester.test_Y12()
sympy.utilities.tests.test_wester.test_Y13()
sympy.utilities.tests.test_wester.test_Y14()
sympy.utilities.tests.test_wester.test_Y2()
sympy.utilities.tests.test_wester.test_Y3()
sympy.utilities.tests.test_wester.test_Y4()
sympy.utilities.tests.test_wester.test_Y5_Y6()
sympy.utilities.tests.test_wester.test_Y7()
sympy.utilities.tests.test_wester.test_Y8()
sympy.utilities.tests.test_wester.test_Y9()
sympy.utilities.tests.test_wester.test_Z1()
sympy.utilities.tests.test_wester.test_Z2()
sympy.utilities.tests.test_wester.test_Z3()
sympy.utilities.tests.test_wester.test_Z4()
sympy.utilities.tests.test_wester.test_Z5()
sympy.utilities.tests.test_wester.test_Z6()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_codegen_julia.py----------------------------------------
A:sympy.utilities.tests.test_codegen_julia.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_codegen_julia.code_gen->JuliaCodeGen()
A:sympy.utilities.tests.test_codegen_julia.output->StringIO()
A:sympy.utilities.tests.test_codegen_julia.source->StringIO().getvalue()
A:sympy.utilities.tests.test_codegen_julia.(result,)->codegen(name_expr, 'Julia', header=False, empty=False)
A:sympy.utilities.tests.test_codegen_julia.expr->Equality(x, x ** 2 + y)
A:sympy.utilities.tests.test_codegen_julia.routine->make_routine('test', expr, argument_sequence=[z, x, y], language='julia')
A:sympy.utilities.tests.test_codegen_julia.(A, B, C)->symbols('A,B,C')
A:sympy.utilities.tests.test_codegen_julia.expr1->Equality(C, (x + y) * z)
A:sympy.utilities.tests.test_codegen_julia.expr2->Equality(A, Matrix([[1, 2, x]]))
A:sympy.utilities.tests.test_codegen_julia.expr3->Equality(B, 2 * x)
A:sympy.utilities.tests.test_codegen_julia.result->codegen(('f', x * y + z), 'Julia', header=False, empty=False, argument_sequence=(x, y), global_vars=(z, t))
A:sympy.utilities.tests.test_codegen_julia.a->symbols('a')
A:sympy.utilities.tests.test_codegen_julia.pw->Piecewise((0, x < -1), (x ** 2, x <= 1), (-x + 2, x > 1), (1, True))
A:sympy.utilities.tests.test_codegen_julia.e2->Matrix([[2 * x, 2 * y, 2 * z]])
A:sympy.utilities.tests.test_codegen_julia.myout1->MatrixSymbol('myout1', 1, 3)
A:sympy.utilities.tests.test_codegen_julia.e3->Matrix([[x], [y], [z]])
A:sympy.utilities.tests.test_codegen_julia.e4->Matrix([[x, y], [z, 16]])
A:sympy.utilities.tests.test_codegen_julia.(B, C)->symbols('B,C')
A:sympy.utilities.tests.test_codegen_julia.A->IndexedBase('A')
A:sympy.utilities.tests.test_codegen_julia.B->IndexedBase('B')
A:sympy.utilities.tests.test_codegen_julia.C->MatrixSymbol('C', 4, 2)
A:sympy.utilities.tests.test_codegen_julia.D->MatrixSymbol('D', 2, 1)
A:sympy.utilities.tests.test_codegen_julia.(n, m)->symbols('n m', integer=True)
A:sympy.utilities.tests.test_codegen_julia.x->IndexedBase('x')
A:sympy.utilities.tests.test_codegen_julia.y->IndexedBase('y')
A:sympy.utilities.tests.test_codegen_julia.i->Idx('i', m)
A:sympy.utilities.tests.test_codegen_julia.j->Idx('j', n)
A:sympy.utilities.tests.test_codegen_julia.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.utilities.tests.test_codegen_julia.k->Idx('k', o)
A:sympy.utilities.tests.test_codegen_julia.l->Idx('l', p)
A:sympy.utilities.tests.test_codegen_julia.f->Function('f')
A:sympy.utilities.tests.test_codegen_julia.(x, y, z, t)->symbols('x y z t')
sympy.utilities.tests.test_codegen_julia.test_complicated_jl_codegen()
sympy.utilities.tests.test_codegen_julia.test_empty_jl_code()
sympy.utilities.tests.test_codegen_julia.test_global_vars_octave()
sympy.utilities.tests.test_codegen_julia.test_jl_InOutArgument()
sympy.utilities.tests.test_codegen_julia.test_jl_InOutArgument_order()
sympy.utilities.tests.test_codegen_julia.test_jl_code_argument_order()
sympy.utilities.tests.test_codegen_julia.test_jl_filename_match_prefix()
sympy.utilities.tests.test_codegen_julia.test_jl_loops()
sympy.utilities.tests.test_codegen_julia.test_jl_matrix_named()
sympy.utilities.tests.test_codegen_julia.test_jl_matrix_named_matsym()
sympy.utilities.tests.test_codegen_julia.test_jl_matrix_output_autoname()
sympy.utilities.tests.test_codegen_julia.test_jl_matrix_output_autoname_2()
sympy.utilities.tests.test_codegen_julia.test_jl_matrixsymbol_slice()
sympy.utilities.tests.test_codegen_julia.test_jl_matrixsymbol_slice2()
sympy.utilities.tests.test_codegen_julia.test_jl_matrixsymbol_slice3()
sympy.utilities.tests.test_codegen_julia.test_jl_matrixsymbol_slice_autoname()
sympy.utilities.tests.test_codegen_julia.test_jl_multifcns_per_file()
sympy.utilities.tests.test_codegen_julia.test_jl_multifcns_per_file_w_header()
sympy.utilities.tests.test_codegen_julia.test_jl_not_supported()
sympy.utilities.tests.test_codegen_julia.test_jl_numbersymbol()
sympy.utilities.tests.test_codegen_julia.test_jl_numbersymbol_no_inline()
sympy.utilities.tests.test_codegen_julia.test_jl_output_arg_mixed_unordered()
sympy.utilities.tests.test_codegen_julia.test_jl_piecewise_()
sympy.utilities.tests.test_codegen_julia.test_jl_piecewise_no_inline()
sympy.utilities.tests.test_codegen_julia.test_jl_results_matrix_named_ordered()
sympy.utilities.tests.test_codegen_julia.test_jl_simple_code()
sympy.utilities.tests.test_codegen_julia.test_jl_simple_code_nameout()
sympy.utilities.tests.test_codegen_julia.test_jl_simple_code_with_header()
sympy.utilities.tests.test_codegen_julia.test_jl_tensor_loops_multiple_contractions()
sympy.utilities.tests.test_codegen_julia.test_multiple_results_m()
sympy.utilities.tests.test_codegen_julia.test_results_named_ordered()
sympy.utilities.tests.test_codegen_julia.test_results_named_unordered()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_misc.py----------------------------------------
A:sympy.utilities.tests.test_misc.pyodide_js->import_module('pyodide_js')
A:sympy.utilities.tests.test_misc.u->chr(4096)
A:sympy.utilities.tests.test_misc.env->os.environ.copy()
A:sympy.utilities.tests.test_misc.proc->Popen(cmdline, env=env, stdout=PIPE, stderr=PIPE)
A:sympy.utilities.tests.test_misc.(out, err)->Popen(cmdline, env=env, stdout=PIPE, stderr=PIPE).communicate()
A:sympy.utilities.tests.test_misc.out->out.decode('ascii').decode('ascii')
A:sympy.utilities.tests.test_misc.err->err.decode('ascii').decode('ascii')
sympy.utilities.tests.test_misc.test_as_int()
sympy.utilities.tests.test_misc.test_debug_output()
sympy.utilities.tests.test_misc.test_deprecated_find_executable()
sympy.utilities.tests.test_misc.test_ordinal()
sympy.utilities.tests.test_misc.test_rawlines()
sympy.utilities.tests.test_misc.test_replace()
sympy.utilities.tests.test_misc.test_strlines()
sympy.utilities.tests.test_misc.test_translate()
sympy.utilities.tests.test_misc.test_translate_args()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_iterables.py----------------------------------------
A:sympy.utilities.tests.test_iterables.(w, x, y, z)->symbols('w,x,y,z')
A:sympy.utilities.tests.test_iterables.triples->set(islice(iproduct(S.Integers, S.Integers, S.Integers), 1000))
A:sympy.utilities.tests.test_iterables.l->list(range(4))
A:sympy.utilities.tests.test_iterables.s->numbered_symbols(cls=Dummy)
A:sympy.utilities.tests.test_iterables.filtered->filter_symbols(s, symbols('x0 x2 x3'))
A:sympy.utilities.tests.test_iterables.X->numbered_symbols()
A:sympy.utilities.tests.test_iterables.B->rotate_left(A, 1)
A:sympy.utilities.tests.test_iterables.M->multiset('mississippi')
A:sympy.utilities.tests.test_iterables.p->p.next_trotterjohnson().next_trotterjohnson()
A:sympy.utilities.tests.test_iterables.b->generate_bell(n)
A:sympy.utilities.tests.test_iterables.i->list(generate_involutions(n + 1))
A:sympy.utilities.tests.test_iterables.bc->list(bracelets(4, 2))
A:sympy.utilities.tests.test_iterables.r->list(range(10))
A:sympy.utilities.tests.test_iterables.seq->list(range(1, 9))
sympy.utilities.tests.test_iterables.test__partition()
sympy.utilities.tests.test_iterables.test_bell_perm()
sympy.utilities.tests.test_iterables.test_binary_partitions()
sympy.utilities.tests.test_iterables.test_bracelets()
sympy.utilities.tests.test_iterables.test_cartes()
sympy.utilities.tests.test_iterables.test_common_prefix_suffix()
sympy.utilities.tests.test_iterables.test_connected_components()
sympy.utilities.tests.test_iterables.test_deprecated_iterables()
sympy.utilities.tests.test_iterables.test_derangements()
sympy.utilities.tests.test_iterables.test_dict_merge()
sympy.utilities.tests.test_iterables.test_filter_symbols()
sympy.utilities.tests.test_iterables.test_flatten()
sympy.utilities.tests.test_iterables.test_generate_oriented_forest()
sympy.utilities.tests.test_iterables.test_group()
sympy.utilities.tests.test_iterables.test_has_dups()
sympy.utilities.tests.test_iterables.test_ibin()
sympy.utilities.tests.test_iterables.test_involutions()
sympy.utilities.tests.test_iterables.test_iproduct()
sympy.utilities.tests.test_iterables.test_is_palindromic()
sympy.utilities.tests.test_iterables.test_iterable()
sympy.utilities.tests.test_iterables.test_kbins()
sympy.utilities.tests.test_iterables.test_minlex()
sympy.utilities.tests.test_iterables.test_multiset_combinations()
sympy.utilities.tests.test_iterables.test_multiset_partitions()
sympy.utilities.tests.test_iterables.test_multiset_permutations()
sympy.utilities.tests.test_iterables.test_necklaces()
sympy.utilities.tests.test_iterables.test_numbered_symbols()
sympy.utilities.tests.test_iterables.test_ordered()
sympy.utilities.tests.test_iterables.test_ordered_partitions()
sympy.utilities.tests.test_iterables.test_partitions()
sympy.utilities.tests.test_iterables.test_postfixes()
sympy.utilities.tests.test_iterables.test_prefixes()
sympy.utilities.tests.test_iterables.test_reshape()
sympy.utilities.tests.test_iterables.test_rotate()
sympy.utilities.tests.test_iterables.test_rotations()
sympy.utilities.tests.test_iterables.test_runs()
sympy.utilities.tests.test_iterables.test_sequence_partitions()
sympy.utilities.tests.test_iterables.test_sequence_partitions_empty()
sympy.utilities.tests.test_iterables.test_sift()
sympy.utilities.tests.test_iterables.test_strongly_connected_components()
sympy.utilities.tests.test_iterables.test_subsets()
sympy.utilities.tests.test_iterables.test_take()
sympy.utilities.tests.test_iterables.test_topological_sort()
sympy.utilities.tests.test_iterables.test_unflatten()
sympy.utilities.tests.test_iterables.test_uniq()
sympy.utilities.tests.test_iterables.test_variations()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_enumerative.py----------------------------------------
A:sympy.utilities.tests.test_enumerative.cache->set()
A:sympy.utilities.tests.test_enumerative.n->len(canon)
A:sympy.utilities.tests.test_enumerative.canonical->tuple(sorted([tuple(p) for p in rv]))
A:sympy.utilities.tests.test_enumerative.bl_partitions->multiset_partitions_baseline(multiplicities, letters)
A:sympy.utilities.tests.test_enumerative.aocp_partitions->set()
A:sympy.utilities.tests.test_enumerative.p1->tuple(sorted([tuple(p) for p in list_visitor(state, letters)]))
A:sympy.utilities.tests.test_enumerative.m->MultisetPartitionTraverser()
A:sympy.utilities.tests.test_enumerative.ma->MultisetPartitionTraverser()
A:sympy.utilities.tests.test_enumerative.mc->MultisetPartitionTraverser()
A:sympy.utilities.tests.test_enumerative.md->MultisetPartitionTraverser()
A:sympy.utilities.tests.test_enumerative.a_it->MultisetPartitionTraverser().enum_range(mult, lb, ub)
A:sympy.utilities.tests.test_enumerative.b_it->part_range_filter(multiset_partitions_taocp(mult), lb, ub)
A:sympy.utilities.tests.test_enumerative.c_it->part_range_filter(mc.enum_small(mult, ub), lb, sum(mult))
A:sympy.utilities.tests.test_enumerative.d_it->part_range_filter(md.enum_large(mult, lb), 0, ub)
sympy.utilities.tests.test_enumerative.compare_multiset_states(s1,s2)
sympy.utilities.tests.test_enumerative.compare_multiset_w_baseline(multiplicities)
sympy.utilities.tests.test_enumerative.multiset_partitions_baseline(multiplicities,components)
sympy.utilities.tests.test_enumerative.part_range_filter(partition_iterator,lb,ub)
sympy.utilities.tests.test_enumerative.subrange_exercise(mult,lb,ub)
sympy.utilities.tests.test_enumerative.test_multiset_partitions_taocp()
sympy.utilities.tests.test_enumerative.test_multiset_partitions_versions()
sympy.utilities.tests.test_enumerative.test_subrange()
sympy.utilities.tests.test_enumerative.test_subrange_large()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_source.py----------------------------------------
A:sympy.utilities.tests.test_source._basic->get_class('sympy.core.basic.Basic')
sympy.utilities.tests.test_source.test_get_class()
sympy.utilities.tests.test_source.test_get_mod_func()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_codegen_octave.py----------------------------------------
A:sympy.utilities.tests.test_codegen_octave.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_codegen_octave.code_gen->OctaveCodeGen()
A:sympy.utilities.tests.test_codegen_octave.output->StringIO()
A:sympy.utilities.tests.test_codegen_octave.source->StringIO().getvalue()
A:sympy.utilities.tests.test_codegen_octave.(result,)->codegen(name_expr, 'Octave', header=False, empty=False)
A:sympy.utilities.tests.test_codegen_octave.expr->Equality(x, x ** 2 + y)
A:sympy.utilities.tests.test_codegen_octave.routine->make_routine('test', expr, argument_sequence=[z, x, y], language='octave')
A:sympy.utilities.tests.test_codegen_octave.(A, B, C)->symbols('A,B,C')
A:sympy.utilities.tests.test_codegen_octave.expr1->Equality(C, (x + y) * z)
A:sympy.utilities.tests.test_codegen_octave.expr2->Equality(A, Matrix([[1, 2, x]]))
A:sympy.utilities.tests.test_codegen_octave.expr3->Equality(B, 2 * x)
A:sympy.utilities.tests.test_codegen_octave.result->codegen(('f', x * y + z), 'Octave', header=False, empty=False, argument_sequence=(x, y), global_vars=(z, t))
A:sympy.utilities.tests.test_codegen_octave.a->symbols('a')
A:sympy.utilities.tests.test_codegen_octave.pw->Piecewise((0, x < -1), (x ** 2, x <= 1), (-x + 2, x > 1), (1, True))
A:sympy.utilities.tests.test_codegen_octave.e2->Matrix([[2 * x, 2 * y, 2 * z]])
A:sympy.utilities.tests.test_codegen_octave.myout1->MatrixSymbol('myout1', 1, 3)
A:sympy.utilities.tests.test_codegen_octave.e3->Matrix([[x], [y], [z]])
A:sympy.utilities.tests.test_codegen_octave.e4->Matrix([[x, y], [z, 16]])
A:sympy.utilities.tests.test_codegen_octave.(B, C)->symbols('B,C')
A:sympy.utilities.tests.test_codegen_octave.A->IndexedBase('A')
A:sympy.utilities.tests.test_codegen_octave.B->IndexedBase('B')
A:sympy.utilities.tests.test_codegen_octave.C->MatrixSymbol('C', 4, 2)
A:sympy.utilities.tests.test_codegen_octave.D->MatrixSymbol('D', 2, 1)
A:sympy.utilities.tests.test_codegen_octave.(n, m)->symbols('n m', integer=True)
A:sympy.utilities.tests.test_codegen_octave.x->IndexedBase('x')
A:sympy.utilities.tests.test_codegen_octave.y->IndexedBase('y')
A:sympy.utilities.tests.test_codegen_octave.i->Idx('i', m)
A:sympy.utilities.tests.test_codegen_octave.j->Idx('j', n)
A:sympy.utilities.tests.test_codegen_octave.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.utilities.tests.test_codegen_octave.k->Idx('k', o)
A:sympy.utilities.tests.test_codegen_octave.l->Idx('l', p)
A:sympy.utilities.tests.test_codegen_octave.f->Function('f')
A:sympy.utilities.tests.test_codegen_octave.(x, y, z, t)->symbols('x y z t')
sympy.utilities.tests.test_codegen_octave.test_complicated_m_codegen()
sympy.utilities.tests.test_codegen_octave.test_empty_m_code()
sympy.utilities.tests.test_codegen_octave.test_global_vars_octave()
sympy.utilities.tests.test_codegen_octave.test_m_InOutArgument()
sympy.utilities.tests.test_codegen_octave.test_m_InOutArgument_order()
sympy.utilities.tests.test_codegen_octave.test_m_code_argument_order()
sympy.utilities.tests.test_codegen_octave.test_m_filename_match_first_fcn()
sympy.utilities.tests.test_codegen_octave.test_m_loops()
sympy.utilities.tests.test_codegen_octave.test_m_matrix_named()
sympy.utilities.tests.test_codegen_octave.test_m_matrix_named_matsym()
sympy.utilities.tests.test_codegen_octave.test_m_matrix_output_autoname()
sympy.utilities.tests.test_codegen_octave.test_m_matrix_output_autoname_2()
sympy.utilities.tests.test_codegen_octave.test_m_matrixsymbol_slice()
sympy.utilities.tests.test_codegen_octave.test_m_matrixsymbol_slice2()
sympy.utilities.tests.test_codegen_octave.test_m_matrixsymbol_slice3()
sympy.utilities.tests.test_codegen_octave.test_m_matrixsymbol_slice_autoname()
sympy.utilities.tests.test_codegen_octave.test_m_multifcns_per_file()
sympy.utilities.tests.test_codegen_octave.test_m_multifcns_per_file_w_header()
sympy.utilities.tests.test_codegen_octave.test_m_not_supported()
sympy.utilities.tests.test_codegen_octave.test_m_numbersymbol()
sympy.utilities.tests.test_codegen_octave.test_m_numbersymbol_no_inline()
sympy.utilities.tests.test_codegen_octave.test_m_output_arg_mixed_unordered()
sympy.utilities.tests.test_codegen_octave.test_m_piecewise_()
sympy.utilities.tests.test_codegen_octave.test_m_piecewise_no_inline()
sympy.utilities.tests.test_codegen_octave.test_m_results_matrix_named_ordered()
sympy.utilities.tests.test_codegen_octave.test_m_simple_code()
sympy.utilities.tests.test_codegen_octave.test_m_simple_code_nameout()
sympy.utilities.tests.test_codegen_octave.test_m_simple_code_with_header()
sympy.utilities.tests.test_codegen_octave.test_m_tensor_loops_multiple_contractions()
sympy.utilities.tests.test_codegen_octave.test_multiple_results_m()
sympy.utilities.tests.test_codegen_octave.test_results_named_ordered()
sympy.utilities.tests.test_codegen_octave.test_results_named_unordered()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_codegen_rust.py----------------------------------------
A:sympy.utilities.tests.test_codegen_rust.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_codegen_rust.code_gen->RustCodeGen()
A:sympy.utilities.tests.test_codegen_rust.output->StringIO()
A:sympy.utilities.tests.test_codegen_rust.source->StringIO().getvalue()
A:sympy.utilities.tests.test_codegen_rust.(result,)->codegen(name_expr, 'Rust', header=False, empty=False)
A:sympy.utilities.tests.test_codegen_rust.version_line->version_str.center(76).rstrip()
A:sympy.utilities.tests.test_codegen_rust.expr->Equality(x, x ** 2 + y)
A:sympy.utilities.tests.test_codegen_rust.routine->make_routine('test', expr, argument_sequence=[z, x, y], language='rust')
A:sympy.utilities.tests.test_codegen_rust.(A, B, C)->symbols('A,B,C')
A:sympy.utilities.tests.test_codegen_rust.expr1->Equality(C, (x + y) * z)
A:sympy.utilities.tests.test_codegen_rust.expr2->Equality(A, (x - y) * z)
A:sympy.utilities.tests.test_codegen_rust.expr3->Equality(B, 2 * x)
A:sympy.utilities.tests.test_codegen_rust.result->codegen(('f', x * y + z), 'Rust', header=False, empty=False, argument_sequence=(x, y), global_vars=(z, t))
A:sympy.utilities.tests.test_codegen_rust.a->symbols('a')
A:sympy.utilities.tests.test_codegen_rust.pw->Piecewise((0, x < -1), (x ** 2, x <= 1), (-x + 2, x > 1), (1, True))
A:sympy.utilities.tests.test_codegen_rust.f->Function('f')
A:sympy.utilities.tests.test_codegen_rust.(x, y, z, t)->symbols('x y z t')
sympy.utilities.tests.test_codegen_rust.test_InOutArgument()
sympy.utilities.tests.test_codegen_rust.test_InOutArgument_order()
sympy.utilities.tests.test_codegen_rust.test_argument_order()
sympy.utilities.tests.test_codegen_rust.test_complicated_rs_codegen()
sympy.utilities.tests.test_codegen_rust.test_empty_rust_code()
sympy.utilities.tests.test_codegen_rust.test_filename_match_prefix()
sympy.utilities.tests.test_codegen_rust.test_global_vars_rust()
sympy.utilities.tests.test_codegen_rust.test_multifcns_per_file()
sympy.utilities.tests.test_codegen_rust.test_multifcns_per_file_w_header()
sympy.utilities.tests.test_codegen_rust.test_multiple_results_rust()
sympy.utilities.tests.test_codegen_rust.test_not_supported()
sympy.utilities.tests.test_codegen_rust.test_numbersymbol()
sympy.utilities.tests.test_codegen_rust.test_numbersymbol_inline()
sympy.utilities.tests.test_codegen_rust.test_output_arg_mixed_unordered()
sympy.utilities.tests.test_codegen_rust.test_piecewise_()
sympy.utilities.tests.test_codegen_rust.test_piecewise_inline()
sympy.utilities.tests.test_codegen_rust.test_results_named_ordered()
sympy.utilities.tests.test_codegen_rust.test_results_named_unordered()
sympy.utilities.tests.test_codegen_rust.test_simple_code_nameout()
sympy.utilities.tests.test_codegen_rust.test_simple_code_with_header()
sympy.utilities.tests.test_codegen_rust.test_simple_rust_code()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_decorator.py----------------------------------------
A:sympy.utilities.tests.test_decorator.new_my_func->wraps(my_func)(new_my_func)
A:sympy.utilities.tests.test_decorator.member->TestMemoize()
sympy.utilities.tests.test_decorator.test_deprecated()
sympy.utilities.tests.test_decorator.test_memoize_property()
sympy.utilities.tests.test_decorator.test_threaded()
sympy.utilities.tests.test_decorator.test_wraps()
sympy.utilities.tests.test_decorator.test_xthreaded()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_lambdify.py----------------------------------------
A:sympy.utilities.tests.test_lambdify.numpy->import_module('numpy')
A:sympy.utilities.tests.test_lambdify.scipy->import_module('scipy', import_kwargs={'fromlist': ['sparse']})
A:sympy.utilities.tests.test_lambdify.numexpr->import_module('numexpr')
A:sympy.utilities.tests.test_lambdify.tensorflow->import_module('tensorflow')
A:sympy.utilities.tests.test_lambdify.cupy->import_module('cupy')
A:sympy.utilities.tests.test_lambdify.jax->import_module('jax')
A:sympy.utilities.tests.test_lambdify.numba->import_module('numba')
A:sympy.utilities.tests.test_lambdify.(w, x, y, z)->symbols('w,x,y,z')
A:sympy.utilities.tests.test_lambdify.f->Function('x')(y)
A:sympy.utilities.tests.test_lambdify.f1->lambdify([x, y, z], DotProduct(A, A), modules='jax')
A:sympy.utilities.tests.test_lambdify.f2->lambdify([x, y, z], DotProduct(A, A.T), modules='jax')
A:sympy.utilities.tests.test_lambdify.f3->lambdify([x, y, z], DotProduct(A.T, A), modules='jax')
A:sympy.utilities.tests.test_lambdify.(p, q, r)->symbols('p q r', real=True)
A:sympy.utilities.tests.test_lambdify.ae->abs(exp(p + UnevaluatedExpr(q + r)))
A:sympy.utilities.tests.test_lambdify.results->f(1.0, 1e+18, -1e+18)
A:sympy.utilities.tests.test_lambdify.sin02->mpmath.mpf('0.19866933079506121545941262711838975037020672954020')
A:sympy.utilities.tests.test_lambdify.f2a->lambdify((x, y), x ** y - 1, 'mpmath')
A:sympy.utilities.tests.test_lambdify.f2b->lambdify([], (1,))
A:sympy.utilities.tests.test_lambdify.f2c->lambdify((x,), expm1(x * log1p(x)), 'mpmath')
A:sympy.utilities.tests.test_lambdify.ans2a->f2a(mpmath.mpf('1') + mpmath.mpf('1e-15'), mpmath.mpf('1e-15'))
A:sympy.utilities.tests.test_lambdify.ans2b->f2b(mpmath.mpf('1') + mpmath.mpf('1e-15'), mpmath.mpf('1e-15'))
A:sympy.utilities.tests.test_lambdify.ans2c->f2c(mpmath.mpf('1e-15'))
A:sympy.utilities.tests.test_lambdify.ssym->S(sym)
A:sympy.utilities.tests.test_lambdify.expr->Matrix([[S.Zero, x], [x + y + z, ((x + y + z) ** 3).expand()]])
A:sympy.utilities.tests.test_lambdify.(a, b)->import_module('numpy').random.randn(2, 10)
A:sympy.utilities.tests.test_lambdify.func_numexpr->lambdify((x, y, z), Piecewise((y, x >= 0), (z, x > -1)), numexpr)
A:sympy.utilities.tests.test_lambdify.(foo, bar)->import_module('numpy').random.random((2, 4))
A:sympy.utilities.tests.test_lambdify.(x, y)->symbols('x y')
A:sympy.utilities.tests.test_lambdify.no_modules->lambdify([x, y], expr)
A:sympy.utilities.tests.test_lambdify.empty_modules->lambdify([x, y], expr, modules=[])
A:sympy.utilities.tests.test_lambdify.d->Dummy()
A:sympy.utilities.tests.test_lambdify.l->lambdify(x, Integral(f(x), (x, -oo, oo)), modules='sympy')
A:sympy.utilities.tests.test_lambdify.i->lambdify((B, C, D), 2 * B * C * D)
A:sympy.utilities.tests.test_lambdify.A->Matrix([x, y, z])
A:sympy.utilities.tests.test_lambdify.sol->Matrix([[1, 0], [1, 1]])
A:sympy.utilities.tests.test_lambdify.J->Matrix((x, x + y)).jacobian((x, y))
A:sympy.utilities.tests.test_lambdify.v->Matrix((x, y))
A:sympy.utilities.tests.test_lambdify.sol_arr->import_module('numpy').array([[1, 2], [numpy.sin(3) + 4, 1]])
A:sympy.utilities.tests.test_lambdify.x_dot_mtx->dot(x, Matrix([[2], [1], [0]]))
A:sympy.utilities.tests.test_lambdify.f_dot1->lambdify(x, x_dot_mtx)
A:sympy.utilities.tests.test_lambdify.inp->import_module('numpy').zeros((17, 3))
A:sympy.utilities.tests.test_lambdify.p2->NumPyPrinter(dict(user_functions={'dot': 'dot'}, **strict_kw))
A:sympy.utilities.tests.test_lambdify.f_dot2->lambdify(x, x_dot_mtx, printer=p2)
A:sympy.utilities.tests.test_lambdify.p3->NumPyPrinter(strict_kw)
A:sympy.utilities.tests.test_lambdify.f4->lambdify([x, y, z], DotProduct(A, A.T), modules='jax')
A:sympy.utilities.tests.test_lambdify.B->MatrixSymbol('B', 2, 3)
A:sympy.utilities.tests.test_lambdify.p->Piecewise((1 / x, y < -1), (x, y < 1), (1 / x, True))
A:sympy.utilities.tests.test_lambdify.r->sqrt(x ** 2 + y ** 2)
A:sympy.utilities.tests.test_lambdify.xnyn->import_module('numpy').linspace(1, 10, 16)
A:sympy.utilities.tests.test_lambdify.fv_numpy->lambdify((x, y), expr, modules='numpy')(xn, yn)
A:sympy.utilities.tests.test_lambdify.fv_numexpr->lambdify((x, y), expr, modules='numexpr')(xn, yn)
A:sympy.utilities.tests.test_lambdify.pieces->Piecewise((x, x < 3), (x ** 2, x > 5), (0, True))
A:sympy.utilities.tests.test_lambdify.nodef_func->lambdify(x, Piecewise((x, x > 0), (-x, x < 0)))
A:sympy.utilities.tests.test_lambdify.and_func->lambdify((x, y), And(x, y), modules='numpy')
A:sympy.utilities.tests.test_lambdify.and_func_3->lambdify((x, y, z), And(x, y, z), modules='numpy')
A:sympy.utilities.tests.test_lambdify.or_func->lambdify((x, y), Or(x, y), modules='numpy')
A:sympy.utilities.tests.test_lambdify.or_func_3->lambdify((x, y, z), Or(x, y, z), modules='numpy')
A:sympy.utilities.tests.test_lambdify.not_func->lambdify(x, Not(x), modules='numpy')
A:sympy.utilities.tests.test_lambdify.arr1->import_module('numpy').array([[1], [2], [3]])
A:sympy.utilities.tests.test_lambdify.arr2->import_module('numpy').array([[14], [28], [42]])
A:sympy.utilities.tests.test_lambdify.arr3->import_module('numpy').array([True, False])
A:sympy.utilities.tests.test_lambdify.xmat->Matrix([[x, y], [z, 1 + z]])
A:sympy.utilities.tests.test_lambdify.ymat->Matrix([[x ** 2], [Abs(x)]])
A:sympy.utilities.tests.test_lambdify.mat_func->lambdify((x, y, z), xmat * ymat, modules='numpy')
A:sympy.utilities.tests.test_lambdify.(a, b, c)->import_module('numpy').random.randn(3, 128, 128)
A:sympy.utilities.tests.test_lambdify.npfunc->lambdify((x, y, z), expr, modules='numpy')
A:sympy.utilities.tests.test_lambdify.nefunc->lambdify((x, y, z), expr, modules='numexpr')
A:sympy.utilities.tests.test_lambdify.uf->implemented_function(Function('uf'), lambda x, y: 2 * x * y + 1)
A:sympy.utilities.tests.test_lambdify.func->lambdify(syms, sum(syms))
A:sympy.utilities.tests.test_lambdify.a->symbols('a')
A:sympy.utilities.tests.test_lambdify.func1->lambdify((), expr, modules='mpmath', printer=IntervalPrinter)
A:sympy.utilities.tests.test_lambdify.func2->lambdify((), expr, modules='mpmath', printer=IntervalPrinter())
A:sympy.utilities.tests.test_lambdify.func3->lambdify(x, Abs(x), modules='tensorflow')
A:sympy.utilities.tests.test_lambdify.func4->lambdify(x, arg(x), modules='tensorflow')
A:sympy.utilities.tests.test_lambdify.tensorflow_result->func4(a).eval(session=s)
A:sympy.utilities.tests.test_lambdify.sympy_result->sympy_fn(*vals).evalf()
A:sympy.utilities.tests.test_lambdify.fcall->f(tensorflow.constant([2.0, 1.0]))
A:sympy.utilities.tests.test_lambdify.g->Function('w')(y)
A:sympy.utilities.tests.test_lambdify.if1->lambdify(x, f(x), modules=(n1, 'sympy'))
A:sympy.utilities.tests.test_lambdify.if2->lambdify(x, g(x), modules=(n2, 'sympy'))
A:sympy.utilities.tests.test_lambdify.l1->lambdify(x, f(x))
A:sympy.utilities.tests.test_lambdify.l2->lambdify(x, g(x))
A:sympy.utilities.tests.test_lambdify.my_f->implemented_function(func, lambda x: 2 * x)
A:sympy.utilities.tests.test_lambdify.lam->lambdify(curlyv, curlyv, dummify=True)
A:sympy.utilities.tests.test_lambdify.t->symbols('t')
A:sympy.utilities.tests.test_lambdify.F->lambdify((w, x, y, z), f, modules='scipy')
A:sympy.utilities.tests.test_lambdify.G->lambdify((x1, x2), g, modules='numpy')
A:sympy.utilities.tests.test_lambdify.alpha->symbols('\\alpha')
A:sympy.utilities.tests.test_lambdify.curlyv->sympy.MatrixSymbol('{v}', 2, 1)
A:sympy.utilities.tests.test_lambdify.python_if->symbols('if')
A:sympy.utilities.tests.test_lambdify.ref->'Created with lambdify. Signature:\n\nfunc(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15,\n        a16, a17, a18, a19, a20, a21, a22, a23, a24, a25)\n\nExpression:\n\na1 + a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 + a18 + a19 + a2 + a20 +...'.splitlines()
A:sympy.utilities.tests.test_lambdify.syms->symbols('a1:26')
A:sympy.utilities.tests.test_lambdify.func0->lambdify((), expr, modules='mpmath', printer=intervalrepr)
A:sympy.utilities.tests.test_lambdify.mpi->type(mpmath.mpi(1, 2))
A:sympy.utilities.tests.test_lambdify.exp1->lambdify(x, loggamma(x), 'mpmath')(5)
A:sympy.utilities.tests.test_lambdify.exp2->lambdify(x, loggamma(x), 'mpmath')(1.8)
A:sympy.utilities.tests.test_lambdify.exp3->lambdify(x, loggamma(x), 'mpmath')(15)
A:sympy.utilities.tests.test_lambdify.sol1->mpmath.loggamma(5)
A:sympy.utilities.tests.test_lambdify.sol2->mpmath.loggamma(1.8)
A:sympy.utilities.tests.test_lambdify.sol3->mpmath.loggamma(15)
A:sympy.utilities.tests.test_lambdify.x->symbols('x')
A:sympy.utilities.tests.test_lambdify.code->LambdaPrinter().doprint(y)
A:sympy.utilities.tests.test_lambdify.(i, j)->symbols('i j')
A:sympy.utilities.tests.test_lambdify.b->import_module('numpy').array([[1, 2], [3, 4]])
A:sympy.utilities.tests.test_lambdify.expr1->lambdify((x, y), uppergamma(x, y), 'mpmath')(1, 2)
A:sympy.utilities.tests.test_lambdify.expr2->lambdify((x, y), lowergamma(x, y), 'mpmath')(1, 2)
A:sympy.utilities.tests.test_lambdify.d1->Dummy()
A:sympy.utilities.tests.test_lambdify.f1b->lambdify(d1, d1 + 1)
A:sympy.utilities.tests.test_lambdify.d2->Dummy('x')
A:sympy.utilities.tests.test_lambdify.dsym->symbols(str(d))
A:sympy.utilities.tests.test_lambdify.tv->import_module('numpy').random.uniform(-1, 1)
A:sympy.utilities.tests.test_lambdify.scipy_result->f(*vals)
A:sympy.utilities.tests.test_lambdify.tv1->abs(int(tv1))
A:sympy.utilities.tests.test_lambdify.tv2->import_module('numpy').real(tv2)
A:sympy.utilities.tests.test_lambdify.params->symbols('n k a b')
A:sympy.utilities.tests.test_lambdify.tn->import_module('numpy').random.randint(3, 10)
A:sympy.utilities.tests.test_lambdify.tparams->tuple(numpy.random.randint(1, tn, size=1))
A:sympy.utilities.tests.test_lambdify.diff->abs(scipy_result - sympy_result)
A:sympy.utilities.tests.test_lambdify.fx->Function('x')(y).diff()
A:sympy.utilities.tests.test_lambdify.f_re->lambdify([z], sympy.re(z))
A:sympy.utilities.tests.test_lambdify.f_im->lambdify([z], sympy.im(z))
A:sympy.utilities.tests.test_lambdify.A0->import_module('numpy').array([[1, 2], [3, 4]])
A:sympy.utilities.tests.test_lambdify.sympy_value->sympy.physics.hydrogen.R_nl(nv, lv, rv, Zv).evalf()
A:sympy.utilities.tests.test_lambdify.scipy_value->f(nv, lv, rv, Zv)
A:sympy.utilities.tests.test_lambdify.C->MatrixSymbol('C', 3, 4)
A:sympy.utilities.tests.test_lambdify.D->MatrixSymbol('D', 4, 5)
A:sympy.utilities.tests.test_lambdify.k->symbols('k')
A:sympy.utilities.tests.test_lambdify.h->lambdify(A, 2 * A)
A:sympy.utilities.tests.test_lambdify.f_->lambdify([x], sympy.LambertW(x, -1), modules='scipy')
A:sympy.utilities.tests.test_lambdify.res1->f1([-1, 0, 1])
A:sympy.utilities.tests.test_lambdify.res2->f2([-1, 0, 1])
A:sympy.utilities.tests.test_lambdify.(x1, x2)->symbols('x1 x2')
A:sympy.utilities.tests.test_lambdify.(a, t)->symbols('a t')
A:sympy.utilities.tests.test_lambdify.F1->lambdify(x, f1, modules='scipy')
A:sympy.utilities.tests.test_lambdify.F2->lambdify(x, f2, modules='scipy')
A:sympy.utilities.tests.test_lambdify.result->f(*case.num_args)
A:sympy.utilities.tests.test_lambdify.reference->Matrix([[S.Zero, x], [x + y + z, ((x + y + z) ** 3).expand()]]).subs(dict(zip(args, num_args))).evalf()
A:sympy.utilities.tests.test_lambdify.lae2->lambdify((x, y), logaddexp2(log2(x), log2(y)))
A:sympy.utilities.tests.test_lambdify.cm1->lambdify((x,), cosm1(x), modules='scipy')
A:sympy.utilities.tests.test_lambdify.cm2->lambdify((x, y), powm1(x, y), modules='scipy')
A:sympy.utilities.tests.test_lambdify.bern->lambdify((x,), bernoulli(x), modules='scipy')
A:sympy.utilities.tests.test_lambdify.hn->lambdify((x,), harmonic(x), modules='scipy')
A:sympy.utilities.tests.test_lambdify.hnm->lambdify((x, y), harmonic(x, y), modules='scipy')
A:sympy.utilities.tests.test_lambdify.subs_dict->dict(zip(self.args, self.num_args))
A:sympy.utilities.tests.test_lambdify.abs_err->abs(result[i] - r)
A:sympy.utilities.tests.test_lambdify.X->MatrixSymbol('X', 3, 1)
A:sympy.utilities.tests.test_lambdify.eval_expr->lambdify(((f, g), z), expr, cse=True)
A:sympy.utilities.tests.test_lambdify.ans->eval_expr((1.0, 2.0), 3.0)
A:sympy.utilities.tests.test_lambdify.lambdified_expr->lambdify([x, y, z], expr, 'sympy', docstring_limit=test_case.docstring_limit)
A:sympy.utilities.tests.test_lambdify.(x, y, z)->symbols('x, y, z')
sympy.utilities.tests.test_lambdify.LambdifyDocstringTestCase(self,docstring_limit,expected_redacted)
sympy.utilities.tests.test_lambdify.LambdifyDocstringTestCase.__len__(self)
sympy.utilities.tests.test_lambdify.LambdifyDocstringTestCase.__repr__(self)
sympy.utilities.tests.test_lambdify.LambdifyDocstringTestCase.expected_docstring(self)
sympy.utilities.tests.test_lambdify.LambdifyDocstringTestCase.expected_expr(self)
sympy.utilities.tests.test_lambdify.LambdifyDocstringTestCase.expected_src(self)
sympy.utilities.tests.test_lambdify.test_23536_lambdify_cse_dummy()
sympy.utilities.tests.test_lambdify.test_ITE()
sympy.utilities.tests.test_lambdify.test_Indexed()
sympy.utilities.tests.test_lambdify.test_MatrixSymbol_issue_15578()
sympy.utilities.tests.test_lambdify.test_Min_Max()
sympy.utilities.tests.test_lambdify.test_atoms()
sympy.utilities.tests.test_lambdify.test_bad_args()
sympy.utilities.tests.test_lambdify.test_beta_math()
sympy.utilities.tests.test_lambdify.test_beta_scipy()
sympy.utilities.tests.test_lambdify.test_betainc_regularized_scipy()
sympy.utilities.tests.test_lambdify.test_betainc_scipy()
sympy.utilities.tests.test_lambdify.test_cupy_array_arg()
sympy.utilities.tests.test_lambdify.test_cupy_array_arg_using_numpy()
sympy.utilities.tests.test_lambdify.test_cupy_dotproduct()
sympy.utilities.tests.test_lambdify.test_curly_matrix_symbol()
sympy.utilities.tests.test_lambdify.test_deprecated_set()
sympy.utilities.tests.test_lambdify.test_docs()
sympy.utilities.tests.test_lambdify.test_double_integral()
sympy.utilities.tests.test_lambdify.test_dummification()
sympy.utilities.tests.test_lambdify.test_empty_modules()
sympy.utilities.tests.test_lambdify.test_exponentiation()
sympy.utilities.tests.test_lambdify.test_fresnel_integrals_scipy()
sympy.utilities.tests.test_lambdify.test_imag_real()
sympy.utilities.tests.test_lambdify.test_imps()
sympy.utilities.tests.test_lambdify.test_imps_errors()
sympy.utilities.tests.test_lambdify.test_imps_wrong_args()
sympy.utilities.tests.test_lambdify.test_integral()
sympy.utilities.tests.test_lambdify.test_issue9474()
sympy.utilities.tests.test_lambdify.test_issue_12092()
sympy.utilities.tests.test_lambdify.test_issue_12173()
sympy.utilities.tests.test_lambdify.test_issue_12984()
sympy.utilities.tests.test_lambdify.test_issue_13167_21411()
sympy.utilities.tests.test_lambdify.test_issue_13642()
sympy.utilities.tests.test_lambdify.test_issue_13881()
sympy.utilities.tests.test_lambdify.test_issue_14911()
sympy.utilities.tests.test_lambdify.test_issue_14941()
sympy.utilities.tests.test_lambdify.test_issue_15654()
sympy.utilities.tests.test_lambdify.test_issue_15827()
sympy.utilities.tests.test_lambdify.test_issue_16536()
sympy.utilities.tests.test_lambdify.test_issue_16930()
sympy.utilities.tests.test_lambdify.test_issue_17898()
sympy.utilities.tests.test_lambdify.test_issue_19764()
sympy.utilities.tests.test_lambdify.test_issue_20070()
sympy.utilities.tests.test_lambdify.test_issue_22726()
sympy.utilities.tests.test_lambdify.test_issue_22739()
sympy.utilities.tests.test_lambdify.test_issue_22992()
sympy.utilities.tests.test_lambdify.test_issue_2790()
sympy.utilities.tests.test_lambdify.test_issue_9334()
sympy.utilities.tests.test_lambdify.test_issue_9871()
sympy.utilities.tests.test_lambdify.test_jax_array_arg()
sympy.utilities.tests.test_lambdify.test_jax_array_arg_using_numpy()
sympy.utilities.tests.test_lambdify.test_jax_dotproduct()
sympy.utilities.tests.test_lambdify.test_lambdify_Derivative_arg_issue_16468()
sympy.utilities.tests.test_lambdify.test_lambdify_cse()
sympy.utilities.tests.test_lambdify.test_lambdify_docstring()
sympy.utilities.tests.test_lambdify.test_lambdify_docstring_size_limit_matrix()
sympy.utilities.tests.test_lambdify.test_lambdify_docstring_size_limit_nested_expr()
sympy.utilities.tests.test_lambdify.test_lambdify_docstring_size_limit_simple_symbol()
sympy.utilities.tests.test_lambdify.test_lambdify_dummy_arg()
sympy.utilities.tests.test_lambdify.test_lambdify_imps()
sympy.utilities.tests.test_lambdify.test_lambdify_inspect()
sympy.utilities.tests.test_lambdify.test_lambdify_mixed_symbol_dummy_args()
sympy.utilities.tests.test_lambdify.test_list_args()
sympy.utilities.tests.test_lambdify.test_math()
sympy.utilities.tests.test_lambdify.test_math_lambda()
sympy.utilities.tests.test_lambdify.test_math_transl()
sympy.utilities.tests.test_lambdify.test_matrix()
sympy.utilities.tests.test_lambdify.test_mpmath_lambda()
sympy.utilities.tests.test_lambdify.test_mpmath_precision()
sympy.utilities.tests.test_lambdify.test_mpmath_transl()
sympy.utilities.tests.test_lambdify.test_namespace_order()
sympy.utilities.tests.test_lambdify.test_nested_args()
sympy.utilities.tests.test_lambdify.test_no_args()
sympy.utilities.tests.test_lambdify.test_number_precision()
sympy.utilities.tests.test_lambdify.test_numexpr_printer()
sympy.utilities.tests.test_lambdify.test_numexpr_userfunctions()
sympy.utilities.tests.test_lambdify.test_numpy_array_arg()
sympy.utilities.tests.test_lambdify.test_numpy_dotproduct()
sympy.utilities.tests.test_lambdify.test_numpy_inverse()
sympy.utilities.tests.test_lambdify.test_numpy_logical_ops()
sympy.utilities.tests.test_lambdify.test_numpy_matmul()
sympy.utilities.tests.test_lambdify.test_numpy_matrix()
sympy.utilities.tests.test_lambdify.test_numpy_numexpr()
sympy.utilities.tests.test_lambdify.test_numpy_old_matrix()
sympy.utilities.tests.test_lambdify.test_numpy_piecewise()
sympy.utilities.tests.test_lambdify.test_numpy_special_math()
sympy.utilities.tests.test_lambdify.test_numpy_transl()
sympy.utilities.tests.test_lambdify.test_numpy_translation_abs()
sympy.utilities.tests.test_lambdify.test_numpy_transpose()
sympy.utilities.tests.test_lambdify.test_own_module()
sympy.utilities.tests.test_lambdify.test_own_namespace_1()
sympy.utilities.tests.test_lambdify.test_own_namespace_2()
sympy.utilities.tests.test_lambdify.test_python_div_zero_issue_11306()
sympy.utilities.tests.test_lambdify.test_python_keywords()
sympy.utilities.tests.test_lambdify.test_scipy_bernoulli()
sympy.utilities.tests.test_lambdify.test_scipy_fns()
sympy.utilities.tests.test_lambdify.test_scipy_harmonic()
sympy.utilities.tests.test_lambdify.test_scipy_polys()
sympy.utilities.tests.test_lambdify.test_scipy_sparse_matrix()
sympy.utilities.tests.test_lambdify.test_scipy_special_math()
sympy.utilities.tests.test_lambdify.test_scipy_transl()
sympy.utilities.tests.test_lambdify.test_sin()
sympy.utilities.tests.test_lambdify.test_sinc_mpmath()
sympy.utilities.tests.test_lambdify.test_single_arg()
sympy.utilities.tests.test_lambdify.test_single_e()
sympy.utilities.tests.test_lambdify.test_special_printers()
sympy.utilities.tests.test_lambdify.test_sqrt()
sympy.utilities.tests.test_lambdify.test_str_args()
sympy.utilities.tests.test_lambdify.test_sym_integral()
sympy.utilities.tests.test_lambdify.test_sym_list_args()
sympy.utilities.tests.test_lambdify.test_sym_single_arg()
sympy.utilities.tests.test_lambdify.test_sympy_lambda()
sympy.utilities.tests.test_lambdify.test_tensorflow_array_arg()
sympy.utilities.tests.test_lambdify.test_tensorflow_basic_math()
sympy.utilities.tests.test_lambdify.test_tensorflow_complexes()
sympy.utilities.tests.test_lambdify.test_tensorflow_logical_operations()
sympy.utilities.tests.test_lambdify.test_tensorflow_multi_max()
sympy.utilities.tests.test_lambdify.test_tensorflow_multi_min()
sympy.utilities.tests.test_lambdify.test_tensorflow_piecewise()
sympy.utilities.tests.test_lambdify.test_tensorflow_placeholders()
sympy.utilities.tests.test_lambdify.test_tensorflow_relational()
sympy.utilities.tests.test_lambdify.test_tensorflow_variables()
sympy.utilities.tests.test_lambdify.test_trig()
sympy.utilities.tests.test_lambdify.test_trig_float()
sympy.utilities.tests.test_lambdify.test_trig_symbolic()
sympy.utilities.tests.test_lambdify.test_true_false()
sympy.utilities.tests.test_lambdify.test_vector_discontinuous()
sympy.utilities.tests.test_lambdify.test_vector_simple()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_autowrap.py----------------------------------------
A:sympy.utilities.tests.test_autowrap.output->StringIO()
A:sympy.utilities.tests.test_autowrap.source->get_string(code_wrapper.dump_c, routines, funcname='multitest')
A:sympy.utilities.tests.test_autowrap.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_autowrap.routine->make_routine('test', x + y + z)
A:sympy.utilities.tests.test_autowrap.code_gen->CythonCodeWrapper(CCodeGen())
A:sympy.utilities.tests.test_autowrap.temp_dir->tempfile.mkdtemp()
A:sympy.utilities.tests.test_autowrap.setup_file_path->os.path.join(temp_dir, 'setup.py')
A:sympy.utilities.tests.test_autowrap.setup_text->binary_function('f', x + y, backend='dummy').read()
A:sympy.utilities.tests.test_autowrap.expr->Equality(z, x + y)
A:sympy.utilities.tests.test_autowrap.expected->expected_template.format(x_id=x_id, y_id=y_id, z_id=z_id)
A:sympy.utilities.tests.test_autowrap.f->binary_function('f', x + y, backend='dummy')
A:sympy.utilities.tests.test_autowrap.(x, y)->symbols('x y')
A:sympy.utilities.tests.test_autowrap.tmp->tempfile.mkdtemp()
A:sympy.utilities.tests.test_autowrap.saved_cwd->os.getcwd()
A:sympy.utilities.tests.test_autowrap.temp_cwd->tempfile.mkdtemp()
A:sympy.utilities.tests.test_autowrap.code_wrapper->UfuncifyCodeWrapper(C99CodeGen('ufuncify'))
sympy.utilities.tests.test_autowrap.get_string(dump_fn,routines,prefix='file',**kwargs)
sympy.utilities.tests.test_autowrap.test_autowrap_args()
sympy.utilities.tests.test_autowrap.test_autowrap_dummy()
sympy.utilities.tests.test_autowrap.test_autowrap_store_files()
sympy.utilities.tests.test_autowrap.test_autowrap_store_files_issue_gh12939()
sympy.utilities.tests.test_autowrap.test_binary_function()
sympy.utilities.tests.test_autowrap.test_cython_wrapper_compile_flags()
sympy.utilities.tests.test_autowrap.test_cython_wrapper_inoutarg()
sympy.utilities.tests.test_autowrap.test_cython_wrapper_outarg()
sympy.utilities.tests.test_autowrap.test_cython_wrapper_scalar_function()
sympy.utilities.tests.test_autowrap.test_cython_wrapper_unique_dummyvars()
sympy.utilities.tests.test_autowrap.test_ufuncify_source()
sympy.utilities.tests.test_autowrap.test_ufuncify_source_multioutput()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_timeutils.py----------------------------------------
A:sympy.utilities.tests.test_timeutils.result->timed('1 + 1', limit=100000)
sympy.utilities.tests.test_timeutils.test_timed()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_matchpy_connector.py----------------------------------------
A:sympy.utilities.tests.test_matchpy_connector.matchpy->import_module('matchpy')
A:sympy.utilities.tests.test_matchpy_connector.(x, y, z)->symbols('x y z')
A:sympy.utilities.tests.test_matchpy_connector.matcher->ManyToOneMatcher()
A:sympy.utilities.tests.test_matchpy_connector.w_->WildDot('w_')
A:sympy.utilities.tests.test_matchpy_connector.w__->WildPlus('w__')
A:sympy.utilities.tests.test_matchpy_connector.w___->WildStar('w___')
A:sympy.utilities.tests.test_matchpy_connector.(p, subst)->_get_first_match(expr, pattern)
A:sympy.utilities.tests.test_matchpy_connector.p->WildDot('p', optional=1)
A:sympy.utilities.tests.test_matchpy_connector.q->WildDot('q', optional=0)
A:sympy.utilities.tests.test_matchpy_connector.(pa, subst)->_get_first_match(expr4, pattern)
A:sympy.utilities.tests.test_matchpy_connector.replacer->Replacer(common_constraints=[matchpy.CustomConstraint(lambda a_: not a_.has(x)), matchpy.CustomConstraint(lambda b_: not b_.has(x)), matchpy.CustomConstraint(lambda c_: not c_.has(x))])
A:sympy.utilities.tests.test_matchpy_connector.x1_->WildDot('x1_')
A:sympy.utilities.tests.test_matchpy_connector.x2_->WildDot('x2_')
A:sympy.utilities.tests.test_matchpy_connector.a_->WildDot('a_', optional=S.One)
A:sympy.utilities.tests.test_matchpy_connector.b_->WildDot('b_', optional=S.One)
A:sympy.utilities.tests.test_matchpy_connector.c_->WildDot('c_', optional=S.Zero)
A:sympy.utilities.tests.test_matchpy_connector.a1->WildStar('a', S(1))
A:sympy.utilities.tests.test_matchpy_connector.a2->pickle.loads(pickle.dumps(a1))
sympy.utilities.tests.test_matchpy_connector._get_first_match(expr,pattern)
sympy.utilities.tests.test_matchpy_connector.test_matchpy_connector()
sympy.utilities.tests.test_matchpy_connector.test_matchpy_object_pickle()
sympy.utilities.tests.test_matchpy_connector.test_matchpy_optional()
sympy.utilities.tests.test_matchpy_connector.test_replacer()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/tests/test_exceptions.py----------------------------------------
sympy.utilities.tests.test_exceptions.test_sympy_deprecation_warning()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/_compilation/util.py----------------------------------------
A:sympy.utilities._compilation.util.cwd->os.path.abspath(cwd)
A:sympy.utilities._compilation.util.parent->os.path.dirname(path)
A:sympy.utilities._compilation.util.src->os.path.join(cwd, src)
A:sympy.utilities._compilation.util.dst->os.path.abspath(os.path.realpath(dst), cwd=cwd)
A:sympy.utilities._compilation.util.dest_fname->os.path.basename(src)
A:sympy.utilities._compilation.util.dest_dir->os.path.dirname(dst)
A:sympy.utilities._compilation.util.Glob->namedtuple('Glob', 'pathname')
A:sympy.utilities._compilation.util.ArbitraryDepthGlob->namedtuple('ArbitraryDepthGlob', 'filename')
A:sympy.utilities._compilation.util.sh->sha256()
A:sympy.utilities._compilation.util.splitted->line.split('=')
A:sympy.utilities._compilation.util.(path, name)->os.path.split(filename)
A:sympy.utilities._compilation.util.(name, ext)->os.path.splitext(name)
A:sympy.utilities._compilation.util.(fobj, filename, data)->find_module(name, [path])
A:sympy.utilities._compilation.util.mod->importlib.util.module_from_spec(spec)
A:sympy.utilities._compilation.util.spec->importlib.util.spec_from_file_location(name, filename)
A:sympy.utilities._compilation.util.binary_path->which(c)
sympy.utilities._compilation.util.CompileError(Exception)
sympy.utilities._compilation.util.CompilerNotFoundError(FileNotFoundError)
sympy.utilities._compilation.util.copy(src,dst,only_update=False,copystat=True,cwd=None,dest_is_dir=False,create_dest_dirs=False)
sympy.utilities._compilation.util.find_binary_of_command(candidates)
sympy.utilities._compilation.util.get_abspath(path,cwd='.')
sympy.utilities._compilation.util.glob_at_depth(filename_glob,cwd=None)
sympy.utilities._compilation.util.import_module_from_file(filename,only_if_newer_than=None)
sympy.utilities._compilation.util.make_dirs(path)
sympy.utilities._compilation.util.may_xfail(func)
sympy.utilities._compilation.util.pyx_is_cplus(path)
sympy.utilities._compilation.util.sha256_of_file(path,nblocks=128)
sympy.utilities._compilation.util.sha256_of_string(string)
sympy.utilities._compilation.util.unique_list(l)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/_compilation/availability.py----------------------------------------
A:sympy.utilities._compilation.availability.((stdout, stderr), info)->compile_run_strings([('main.cxx', '#include <iostream>\nint main(){\nstd::cout << "hello world" << std::endl;\n}')], clean=True)
sympy.utilities._compilation.availability.has_c()
sympy.utilities._compilation.availability.has_cxx()
sympy.utilities._compilation.availability.has_fortran()
sympy.utilities._compilation.has_c()
sympy.utilities._compilation.has_cxx()
sympy.utilities._compilation.has_fortran()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/_compilation/compilation.py----------------------------------------
A:sympy.utilities._compilation.compilation.(name, ext)->os.path.splitext(src)
A:sympy.utilities._compilation.compilation.file_kwargs->kwargs.copy()
A:sympy.utilities._compilation.compilation.(out_file, ext)->os.path.splitext(os.path.basename(obj_files[-1]))
A:sympy.utilities._compilation.compilation.(Runner, extra_kwargs, vendor)->get_mixed_fort_c_linker(vendor=kwargs.get('vendor', None), cplus=cplus, cwd=cwd)
A:sympy.utilities._compilation.compilation.flags->kwargs.pop('flags', [])
A:sympy.utilities._compilation.compilation.run_linker->kwargs.pop('run_linker', False)
A:sympy.utilities._compilation.compilation.out_file->get_abspath(out_file, cwd=cwd)
A:sympy.utilities._compilation.compilation.runner->Runner([srcpath], objpath, include_dirs=include_dirs, run_linker=run_linker, cwd=cwd, flags=flags, **kwargs)
A:sympy.utilities._compilation.compilation.include_dirs->kwargs.pop('include_dirs', [])
A:sympy.utilities._compilation.compilation.library_dirs->kwargs.pop('library_dirs', [])
A:sympy.utilities._compilation.compilation.cfgDict->get_config_vars()
A:sympy.utilities._compilation.compilation.dstfile->os.path.join(destdir, c_name)
A:sympy.utilities._compilation.compilation.ori_dir->os.getcwd()
A:sympy.utilities._compilation.compilation.cy_options->CompilationOptions(default_options)
A:sympy.utilities._compilation.compilation.cy_result->cy_compile([src], cy_options)
A:sympy.utilities._compilation.compilation.objpath->os.path.join(objpath, name + objext)
A:sympy.utilities._compilation.compilation.py_inc_dir->get_path('include')
A:sympy.utilities._compilation.compilation.abs_objpath->get_abspath(objpath, cwd=cwd)
A:sympy.utilities._compilation.compilation.pyx_fname->os.path.basename(pyxpath)
A:sympy.utilities._compilation.compilation.cplus->pyx_is_cplus(pyxpath)
A:sympy.utilities._compilation.compilation.interm_c_file->simple_cythonize(pyxpath, destdir=destdir, cwd=cwd, **cy_kwargs)
A:sympy.utilities._compilation.compilation.options->kwargs.pop('options', [])
A:sympy.utilities._compilation.compilation.std->kwargs.pop('std', 'c99')
A:sympy.utilities._compilation.compilation.key->ext.lower()
A:sympy.utilities._compilation.compilation.mod->compile_link_import_py_ext(source_files, build_dir=build_dir, **kwargs)
A:sympy.utilities._compilation.compilation.objs->compile_sources(list(map(get_abspath, source_files)), destdir=build_dir, cwd=build_dir, **compile_kwargs or {})
A:sympy.utilities._compilation.compilation.so->link_py_so(objs, cwd=build_dir, fort=any_fortran_src(sources), cplus=any_cplus_src(sources), **link_kwargs)
A:sympy.utilities._compilation.compilation.dest->os.path.join(build_dir, name)
A:sympy.utilities._compilation.compilation.sha256_in_mem->sha256_of_string(src.encode('utf-8')).hexdigest()
A:sympy.utilities._compilation.compilation.sha256_on_disk->sha256_of_file(dest).hexdigest()
A:sympy.utilities._compilation.compilation.(source_files, build_dir)->_write_sources_to_build_dir(sources, build_dir)
A:sympy.utilities._compilation.compilation.prog->link(objs, cwd=build_dir, fort=any_fortran_src(source_files), cplus=any_cplus_src(source_files), **link_kwargs or {})
A:sympy.utilities._compilation.compilation.p->subprocess.Popen([prog], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:sympy.utilities._compilation.compilation.exit_status->subprocess.Popen([prog], stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait()
sympy.utilities._compilation.compilation._any_X(srcs,cls)
sympy.utilities._compilation.compilation._write_sources_to_build_dir(sources,build_dir)
sympy.utilities._compilation.compilation.any_cplus_src(srcs)
sympy.utilities._compilation.compilation.any_fortran_src(srcs)
sympy.utilities._compilation.compilation.compile_link_import_py_ext(sources,extname=None,build_dir='.',compile_kwargs=None,link_kwargs=None)
sympy.utilities._compilation.compilation.compile_link_import_strings(sources,build_dir=None,**kwargs)
sympy.utilities._compilation.compilation.compile_run_strings(sources,build_dir=None,clean=False,compile_kwargs=None,link_kwargs=None)
sympy.utilities._compilation.compilation.compile_sources(files,Runner=None,destdir=None,cwd=None,keep_dir_struct=False,per_file_kwargs=None,**kwargs)
sympy.utilities._compilation.compilation.get_mixed_fort_c_linker(vendor=None,cplus=False,cwd=None)
sympy.utilities._compilation.compilation.link(obj_files,out_file=None,shared=False,Runner=None,cwd=None,cplus=False,fort=False,**kwargs)
sympy.utilities._compilation.compilation.link_py_so(obj_files,so_file=None,cwd=None,libraries=None,cplus=False,fort=False,**kwargs)
sympy.utilities._compilation.compilation.pyx2obj(pyxpath,objpath=None,destdir=None,cwd=None,include_dirs=None,cy_kwargs=None,cplus=None,**kwargs)
sympy.utilities._compilation.compilation.simple_cythonize(src,destdir=None,cwd=None,**cy_kwargs)
sympy.utilities._compilation.compilation.src2obj(srcpath,Runner=None,objpath=None,cwd=None,inc_py=False,**kwargs)
sympy.utilities._compilation.compile_link_import_strings(sources,build_dir=None,**kwargs)
sympy.utilities._compilation.compile_run_strings(sources,build_dir=None,clean=False,compile_kwargs=None,link_kwargs=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/_compilation/runners.py----------------------------------------
A:sympy.utilities._compilation.runners.self.sources->list(sources)
A:sympy.utilities._compilation.runners.preferred_vendor->os.environ.get('SYMPY_COMPILER_VENDOR', None)
A:sympy.utilities._compilation.runners.(self.compiler_name, self.compiler_binary, self.compiler_vendor)->self.find_compiler(preferred_vendor)
A:sympy.utilities._compilation.runners.self.flags->unique_list(self.flags)
A:sympy.utilities._compilation.runners.nsa_re->re.compile('no-strict-aliasing$')
A:sympy.utilities._compilation.runners.sa_re->re.compile('strict-aliasing$')
A:sympy.utilities._compilation.runners.candidates->list(cls.compiler_dict.keys())
A:sympy.utilities._compilation.runners.(name, path)->find_binary_of_command([cls.compiler_dict[x] for x in candidates])
A:sympy.utilities._compilation.runners.msg->"Error executing '{}' in {} (exited status {}):\n {}\n".format(' '.join(self.cmd()), self.cwd, str(self.cmd_returncode), self.cmd_outerr)
A:sympy.utilities._compilation.runners.env->os.environ.copy()
A:sympy.utilities._compilation.runners.p->subprocess.Popen(' '.join(self.cmd()), shell=True, cwd=self.cwd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env)
A:sympy.utilities._compilation.runners.comm->subprocess.Popen(' '.join(self.cmd()), shell=True, cwd=self.cwd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env).communicate()
A:sympy.utilities._compilation.runners.self.cmd_outerr->comm[0].decode('iso-8859-1')
A:sympy.utilities._compilation.runners.compiler_dict->OrderedDict([('gnu', 'gfortran'), ('intel', 'ifort')])
sympy.utilities._compilation.runners.CCompilerRunner(CompilerRunner)
sympy.utilities._compilation.runners.CompilerRunner(self,sources,out,flags=None,run_linker=True,compiler=None,cwd='.',include_dirs=None,libraries=None,library_dirs=None,std=None,define=None,undef=None,strict_aliasing=None,preferred_vendor=None,linkline=None,**kwargs)
sympy.utilities._compilation.runners.CompilerRunner.cmd(self)
sympy.utilities._compilation.runners.CompilerRunner.find_compiler(cls,preferred_vendor=None)
sympy.utilities._compilation.runners.CompilerRunner.run(self)
sympy.utilities._compilation.runners.CppCompilerRunner(CompilerRunner)
sympy.utilities._compilation.runners.FortranCompilerRunner(CompilerRunner)
sympy.utilities._compilation.runners._mk_flag_filter(cmplr_name)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/_compilation/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/_compilation/tests/test_compilation.py----------------------------------------
A:sympy.utilities._compilation.tests.test_compilation.numpy->import_module('numpy')
A:sympy.utilities._compilation.tests.test_compilation.cython->import_module('cython')
A:sympy.utilities._compilation.tests.test_compilation.(mod, info)->compile_link_import_strings(_sources1, compile_kwargs=compile_kw)
A:sympy.utilities._compilation.tests.test_compilation.data->import_module('numpy').random.random(1024 * 1024 * 8)
A:sympy.utilities._compilation.tests.test_compilation.res_mod->mod.sigmoid(data)
A:sympy.utilities._compilation.tests.test_compilation.res_npy->npy(data)
sympy.utilities._compilation.tests.test_compilation.npy(data,lim=350.0)
sympy.utilities._compilation.tests.test_compilation.test_compile_link_import_strings()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/utilities/_compilation/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/meijerint_doc.py----------------------------------------
A:sympy.integrals.meijerint_doc.g->Add(*[fac * f for (fac, f) in gs])
A:sympy.integrals.meijerint_doc.obj->Eq(formula, g)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/intpoly.py----------------------------------------
A:sympy.integrals.intpoly.poly->_sympify(poly)
A:sympy.integrals.intpoly.hp_params->hyperplane_parameters(facets, vertices)
A:sympy.integrals.intpoly.plen->len(poly)
A:sympy.integrals.intpoly.lints->len(intersections)
A:sympy.integrals.intpoly._->decompose(e)
A:sympy.integrals.intpoly.result_dict->main_integrate(0, facets, hp_params, max_degree)
A:sympy.integrals.intpoly.monoms->decompose(poly, separate=True)
A:sympy.integrals.intpoly.monom->nsimplify(monom)
A:sympy.integrals.intpoly.(coeff, m)->strip(monom)
A:sympy.integrals.intpoly.coeff->LC(monom)
A:sympy.integrals.intpoly.dim_length->len(dims)
A:sympy.integrals.intpoly.value_over_boundary->integration_reduction_dynamic(facets, facet_count, a, b, m, degree, dims, x_d, y_d, max_degree, x0, grad_terms, i)
A:sympy.integrals.intpoly.grad_terms->gradient_terms(max_degree, 3)
A:sympy.integrals.intpoly.value_over_face->integration_reduction_dynamic(facets, facet_count, a, b, expr, degree, dims, x_index, y_index, z_index, x0, grad_terms, i, vertices, hp)
A:sympy.integrals.intpoly.polynomials->decompose(expr)
A:sympy.integrals.intpoly.pi->polygon_integrate(facet, hp, i, facets, vertices, expr, deg)
A:sympy.integrals.intpoly.value->result.get(m, None)
A:sympy.integrals.intpoly.expr->_sympify(expr)
A:sympy.integrals.intpoly.facet_len->len(facet)
A:sympy.integrals.intpoly.n_side->cross_product((0, 0, 0), rev_normal, vector)
A:sympy.integrals.intpoly.dot_product->sum([det[i] * normal[i] for i in range(0, 3)])
A:sympy.integrals.intpoly.distance->norm(tuple([line_seg[1][i] - line_seg[0][i] for i in range(3)]))
A:sympy.integrals.intpoly.m->len(facets)
A:sympy.integrals.intpoly.intersect->intersection(facets[index], facets[j], 'segment2D')
A:sympy.integrals.intpoly.distance_origin->norm(tuple(map(lambda x, y: x - y, intersect, x0)))
A:sympy.integrals.intpoly.factor->gcd_list([a1, a2, b])
A:sympy.integrals.intpoly.normal->cross_product(v1, v2, v3)
A:sympy.integrals.intpoly.b->sum([normal[j] * v1[j] for j in range(0, 3)])
A:sympy.integrals.intpoly.fac->gcd_list(normal)
A:sympy.integrals.intpoly.term_type->len(term.args)
A:sympy.integrals.intpoly.power_gens->sorted(power_gens.items(), key=lambda k: str(k[0]))
A:sympy.integrals.intpoly.symbols->_sympify(expr).atoms(Symbol)
A:sympy.integrals.intpoly.n->len(pts)
A:sympy.integrals.intpoly.dim->len(pts[0])
A:sympy.integrals.intpoly.center->Point(sum((vertex.x for vertex in pts)) / n, sum((vertex.y for vertex in pts)) / n, sum((vertex.z for vertex in pts)) / n)
A:sympy.integrals.intpoly.det->cross_product(center, a, b)
A:sympy.integrals.intpoly.l2ds->List2DSeries(xl, yl)
A:sympy.integrals.intpoly.p->Plot(l2ds, axes='label_axes=True')
sympy.integrals.intpoly._polynomial_integrate(polynomials,facets,hp_params)
sympy.integrals.intpoly.best_origin(a,b,lineseg,expr)
sympy.integrals.intpoly.cross_product(v1,v2,v3)
sympy.integrals.intpoly.decompose(expr,separate=False)
sympy.integrals.intpoly.distance_to_side(point,line_seg,A)
sympy.integrals.intpoly.gradient_terms(binomial_power=0,no_of_gens=2)
sympy.integrals.intpoly.hyperplane_parameters(poly,vertices=None)
sympy.integrals.intpoly.integration_reduction(facets,index,a,b,expr,dims,degree)
sympy.integrals.intpoly.integration_reduction_dynamic(facets,index,a,b,expr,degree,dims,x_index,y_index,max_index,x0,monomial_values,monom_index,vertices=None,hp_param=None)
sympy.integrals.intpoly.intersection(geom_1,geom_2,intersection_type)
sympy.integrals.intpoly.is_vertex(ent)
sympy.integrals.intpoly.left_integral2D(m,index,facets,x0,expr,gens)
sympy.integrals.intpoly.left_integral3D(facets,index,expr,vertices,hp_param,degree)
sympy.integrals.intpoly.lineseg_integrate(polygon,index,line_seg,expr,degree)
sympy.integrals.intpoly.main_integrate(expr,facets,hp_params,max_degree=None)
sympy.integrals.intpoly.main_integrate3d(expr,facets,vertices,hp_params,max_degree=None)
sympy.integrals.intpoly.norm(point)
sympy.integrals.intpoly.plot_polynomial(expr)
sympy.integrals.intpoly.plot_polytope(poly)
sympy.integrals.intpoly.point_sort(poly,normal=None,clockwise=True)
sympy.integrals.intpoly.polygon_integrate(facet,hp_param,index,facets,vertices,expr,degree)
sympy.integrals.intpoly.polytope_integrate(poly,expr=None,*,clockwise=False,max_degree=None)
sympy.integrals.intpoly.strip(monom)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/integrals.py----------------------------------------
A:sympy.integrals.integrals.obj->sympy.concrete.expr_with_limits.AddWithLimits.__new__(cls, function, *symbols, **assumptions)
A:sympy.integrals.integrals.d->Dummy(real=True)
A:sympy.integrals.integrals.xfree->x.free_symbols.intersection(self.variables)
A:sympy.integrals.integrals.u->Dummy('u')
A:sympy.integrals.integrals.uvar->ufree.pop()
A:sympy.integrals.integrals.soln->solve(u - x, xvar, check=False)
A:sympy.integrals.integrals.(pdiff, reps)->posify(u - x)
A:sympy.integrals.integrals.puvar->ufree.pop().subs([(v, k) for (k, v) in reps.items()])
A:sympy.integrals.integrals.newfunc->newfuncs.pop()
A:sympy.integrals.integrals.wok->sympify(field).subs(d, a)
A:sympy.integrals.integrals.avals->list({_calc_limit_1(Fi, a, b) for Fi in F})
A:sympy.integrals.integrals.a->Wild('a', exclude=[x])
A:sympy.integrals.integrals.deep->hints.get('deep', True)
A:sympy.integrals.integrals.meijerg->hints.get('meijerg', None)
A:sympy.integrals.integrals.conds->hints.get('conds', 'piecewise')
A:sympy.integrals.integrals.risch->hints.get('risch', None)
A:sympy.integrals.integrals.heurisch->hints.get('heurisch', None)
A:sympy.integrals.integrals.manual->hints.get('manual', None)
A:sympy.integrals.integrals.function->self.func(*[function] + [xab])
A:sympy.integrals.integrals.did->did.xreplace(undo).xreplace(undo)
A:sympy.integrals.integrals.ulj->set()
A:sympy.integrals.integrals.uli->xab[1].free_symbols.union(xab[2].free_symbols)
A:sympy.integrals.integrals.factored_function->self.func(*[function] + [xab]).factor()
A:sympy.integrals.integrals.xr->Dummy('xr', real=True)
A:sympy.integrals.integrals.antideriv->antideriv.as_expr().as_expr()
A:sympy.integrals.integrals.res->meijerint_definite(function, x, a, b)
A:sympy.integrals.integrals.ret->try_meijerg(function, xab)
A:sympy.integrals.integrals.final->hints.get('final', True)
A:sympy.integrals.integrals.x1->Dummy('x1')
A:sympy.integrals.integrals.tan_exp1->atan_arg.subs(tan_part, x1)
A:sympy.integrals.integrals.coeff->atan_arg.subs(cot_part, x1).diff(x1)
A:sympy.integrals.integrals.cot_exp1->atan_arg.subs(cot_part, x1)
A:sympy.integrals.integrals.b->Wild('b', exclude=[x])
A:sympy.integrals.integrals.gens->list(antideriv.gens)
A:sympy.integrals.integrals.uneval->Add(*[eval_factored(f, x, a, b) for f in integrals])
A:sympy.integrals.integrals.evalued->Add(*others)._eval_interval(x, a, b)
A:sympy.integrals.integrals.evalued_pw->piecewise_fold(Add(*piecewises))._eval_interval(x, a, b)
A:sympy.integrals.integrals.limit->limits.pop(-1)
A:sympy.integrals.integrals.f->sincos_to_sum(f).expand(mul=True, deep=False)
A:sympy.integrals.integrals.dab_dsym->diff(ab, sym)
A:sympy.integrals.integrals.arg->sincos_to_sum(f).expand(mul=True, deep=False).subs(x, u).diff(sym).subs(u, x)
A:sympy.integrals.integrals.result->result.func(*[arg.doit(**new_eval_kwargs) if arg.has(Integral) else arg for arg in result.args]).expand(multinomial=False, log=False, power_exp=False, power_base=False).func(*[arg.doit(**new_eval_kwargs) if arg.has(Integral) else arg for arg in result.args]).expand(multinomial=False, log=False, power_exp=False, power_base=False)
A:sympy.integrals.integrals.poly->sincos_to_sum(f).expand(mul=True, deep=False).as_poly(x)
A:sympy.integrals.integrals.(result, i)->risch_integrate(f, x, separate_integral=True, conds=conds)
A:sympy.integrals.integrals.args->sympy.core.add.Add.make_args(f)
A:sympy.integrals.integrals.(coeff, g)->g.as_independent(x)
A:sympy.integrals.integrals.order_term->g.getO()
A:sympy.integrals.integrals.h->meijerint_indefinite(g, x)
A:sympy.integrals.integrals.h_order_expr->self._eval_integral(order_term.expr, x, **eval_kwargs)
A:sympy.integrals.integrals.h_order_term->g.getO().func(h_order_expr, *order_term.variables)
A:sympy.integrals.integrals.M->g.base.match(a * x + b)
A:sympy.integrals.integrals.h1->log(g.base)
A:sympy.integrals.integrals.(h, i)->risch_integrate(g, x, separate_integral=True, conds=conds)
A:sympy.integrals.integrals.expr->factor_terms(self)
A:sympy.integrals.integrals.(terms, order)->factor_terms(self).function.nseries(x=symb, n=n, logx=logx).as_coeff_add(Order)
A:sympy.integrals.integrals.series_gen->self.args[0].lseries(x)
A:sympy.integrals.integrals.n->sympify(n)
A:sympy.integrals.integrals.k->Dummy('k', integer=True, positive=True)
A:sympy.integrals.integrals.r->Dummy('r')
A:sympy.integrals.integrals.F->sympify(field)
A:sympy.integrals.integrals.I->limit(F - F.subs(x, -x), x, oo)
A:sympy.integrals.integrals.integral->Integral(Ft, curve.limits).doit(deep=False)
A:sympy.integrals.integrals._dn->diff(_f, curve.parameter)
A:sympy.integrals.integrals.Ft->Ft.subs(var, _f).subs(var, _f)
sympy.Integral(cls,function,*symbols,**assumptions)
sympy.integrals.integrals.Integral(cls,function,*symbols,**assumptions)
sympy.integrals.integrals.Integral.__getnewargs__(self)
sympy.integrals.integrals.Integral._eval_as_leading_term(self,x,logx=None,cdir=0)
sympy.integrals.integrals.Integral._eval_derivative(self,sym)
sympy.integrals.integrals.Integral._eval_integral(self,f,x,meijerg=None,risch=None,manual=None,heurisch=None,conds='piecewise',final=None)
sympy.integrals.integrals.Integral._eval_is_zero(self)
sympy.integrals.integrals.Integral._eval_lseries(self,x,logx=None,cdir=0)
sympy.integrals.integrals.Integral._eval_nseries(self,x,n,logx=None,cdir=0)
sympy.integrals.integrals.Integral._eval_simplify(self,**kwargs)
sympy.integrals.integrals.Integral.as_sum(self,n=None,method='midpoint',evaluate=True)
sympy.integrals.integrals.Integral.doit(self,**hints)
sympy.integrals.integrals.Integral.free_symbols(self)
sympy.integrals.integrals.Integral.principal_value(self,**kwargs)
sympy.integrals.integrals.Integral.transform(self,x,u)
sympy.integrals.integrals._(expr)
sympy.integrals.integrals.integrate(*args,meijerg=None,conds='piecewise',risch=None,heurisch=None,manual=None,**kwargs)
sympy.integrals.integrals.line_integrate(field,curve,vars)
sympy.integrate(*args,meijerg=None,conds='piecewise',risch=None,heurisch=None,manual=None,**kwargs)
sympy.line_integrate(field,curve,vars)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/trigonometry.py----------------------------------------
A:sympy.integrals.trigonometry.a->Wild('a', exclude=[x])
A:sympy.integrals.trigonometry._u->Dummy('u')
A:sympy.integrals.trigonometry.(pat, a, n, m)->_pat_sincos(x)
A:sympy.integrals.trigonometry.f->f.rewrite('sincos').rewrite('sincos')
A:sympy.integrals.trigonometry.M->f.rewrite('sincos').rewrite('sincos').match(pat)
A:sympy.integrals.trigonometry.uu->sin(a * x)
A:sympy.integrals.trigonometry.fi->integrate(ff, u)
A:sympy.integrals.trigonometry.fx->integrate(ff, u).subs(u, uu)
A:sympy.integrals.trigonometry.res->integrate((sin(2 * x) * S.Half) ** m, x)
sympy.integrals.trigonometry._cos_pow_integrate(n,x)
sympy.integrals.trigonometry._integer_instance(n)
sympy.integrals.trigonometry._pat_sincos(x)
sympy.integrals.trigonometry._sin_pow_integrate(n,x)
sympy.integrals.trigonometry.trigintegrate(f,x,conds='piecewise')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/laplace.py----------------------------------------
A:sympy.integrals.laplace.n->Wild('n', exclude=[s])
A:sympy.integrals.laplace.r->_inverse_laplace_transform(fn, s_, t_, plane, simplify=_simplify)
A:sympy.integrals.laplace.b->(dc[2] - a ** 2).factor()
A:sympy.integrals.laplace.expr->repl(expr, Unequality, replue)
A:sympy.integrals.laplace.s->Dummy('s')
A:sympy.integrals.laplace.F->F.apart(s).apart(s)
A:sympy.integrals.laplace.conds->list(ordered(conds2))
A:sympy.integrals.laplace.(p, q, w1, w2, w3, w4, w5)->symbols('p q w1 w2 w3 w4 w5', cls=Wild, exclude=[s])
A:sympy.integrals.laplace.m->Wild('m')
A:sympy.integrals.laplace.d_->Add(*[x * s ** y for (x, y) in zip(dc, range(len(dc))[::-1])]).replace(re, lambda x: x.expand().as_real_imag()[0]).subs(re(s), t)
A:sympy.integrals.laplace.soln->_solve_inequality(d_, t)
A:sympy.integrals.laplace.a_->Min(soln.lts, a_)
A:sympy.integrals.laplace.a->Wild('a', exclude=[s])
A:sympy.integrals.laplace.aux->_simplifyconds(aux, s, a)
A:sympy.integrals.laplace.args->list(f.args)
A:sympy.integrals.laplace.t->Dummy('t')
A:sympy.integrals.laplace.tau->Wild('tau', exclude=[t])
A:sympy.integrals.laplace.omega->Wild('omega', exclude=[t])
A:sympy.integrals.laplace.g->Wild('g')
A:sympy.integrals.laplace.ma1->F.apart(s).apart(s).match(s ** n * g)
A:sympy.integrals.laplace.arg->ma1[g].args[0].collect(t)
A:sympy.integrals.laplace.ma2->ma1[y].collect(t).match(b * t - a)
A:sympy.integrals.laplace.(r, pr, cr)->_laplace_transform(ma1[g], t, s, simplify=False)
A:sympy.integrals.laplace.y->Derivative(ma1[g], (t, k)).subs(t, 0)
A:sympy.integrals.laplace.z->Wild('z')
A:sympy.integrals.laplace.ro->roots(ma1[y], t)
A:sympy.integrals.laplace.slope->diff(ma1[y], t)
A:sympy.integrals.laplace.f->fn.apart(s)
A:sympy.integrals.laplace.p->Wild('p', exclude=[t])
A:sympy.integrals.laplace.x1->fn.apart(s).rewrite(exp).expand()
A:sympy.integrals.laplace.term->term.powsimp(combine='exp').powsimp(combine='exp')
A:sympy.integrals.laplace.mc->mp.all_coeffs()
A:sympy.integrals.laplace.nc->coeffs.copy()
A:sympy.integrals.laplace.ri->(ri[0] + I * ri[1]).rewrite(cos).as_real_imag()
A:sympy.integrals.laplace.nc[k]->(ri[0] + I * ri[1]).rewrite(cos)
A:sympy.integrals.laplace.d->Add(*[x * s ** y for (x, y) in zip(dc, range(len(dc))[::-1])])
A:sympy.integrals.laplace.t1->xm.pop()
A:sympy.integrals.laplace.(f, g)->_laplace_trig_split(fn.subs(t_, t))
A:sympy.integrals.laplace.(xm, xn)->_laplace_trig_expsum(f, t)
A:sympy.integrals.laplace.(r, p)->_laplace_trig_ltex(xm, t, s)
A:sympy.integrals.laplace.(G, G_plane, G_cond)->_laplace_transform(g, t, s)
A:sympy.integrals.laplace.pex->prod(pfac)
A:sympy.integrals.laplace.pc->Poly(pex, t).all_coeffs()
A:sympy.integrals.laplace.N->len(pc)
A:sympy.integrals.laplace.oex->prod(ofac)
A:sympy.integrals.laplace.(r_, p_, c_)->_laplace_transform(oex, t, s, simplify=False)
A:sympy.integrals.laplace.(simple_rules, t_, s_)->_laplace_build_rules()
A:sympy.integrals.laplace.prep_f->prep(f.subs({t: t_}))
A:sympy.integrals.laplace.ma->prep(fsubs * fac).match(s_dom)
A:sympy.integrals.laplace.c->check.xreplace(ma)
A:sympy.integrals.laplace.terms->sympy.core.add.Add.make_args(fn)
A:sympy.integrals.laplace.(k, ft)->ff.as_independent(t_, as_Add=False)
A:sympy.integrals.laplace.result->result.simplify(doit=False).simplify(doit=False)
A:sympy.integrals.laplace.plane->Max(*planes)
A:sympy.integrals.laplace.condition->And(*conditions)
A:sympy.integrals.laplace._simplify->hints.get('simplify', False)
A:sympy.integrals.laplace.LT->LaplaceTransform(f, t, s).doit(noconds=False, simplify=_simplify)
A:sympy.integrals.laplace.cond->And(*conds)
A:sympy.integrals.laplace._noconds->hints.get('noconds', True)
A:sympy.integrals.laplace.(elements, avals, conditions)->zip(*elements_trans)
A:sympy.integrals.laplace.f_laplace->type(f)(*f.shape, elements)
A:sympy.integrals.laplace.(coeff, exponent)->_get_coeff_exp(arg, t)
A:sympy.integrals.laplace.(f, cond)->inverse_mellin_transform(F, s, exp(-t), (None, S.Infinity), needeval=True, noconds=False)
A:sympy.integrals.laplace.u->Dummy('u')
A:sympy.integrals.laplace.rel->_solve_inequality(a > 0, u)
A:sympy.integrals.laplace.k->log(rel.lts)
A:sympy.integrals.laplace.[n, d]->term.powsimp(combine='exp').powsimp(combine='exp').as_numer_denom()
A:sympy.integrals.laplace.cf->Add(*[x * s ** y for (x, y) in zip(dc, range(len(dc))[::-1])]).as_poly(s).all_coeffs()
A:sympy.integrals.laplace.(_ILT_rules, s_, t_)->_inverse_laplace_build_rules()
A:sympy.integrals.laplace.fsubs->fn.apart(s).subs({s: s_})
A:sympy.integrals.laplace._F->prep(fsubs * fac)
A:sympy.integrals.laplace.(r, c)->_inverse_laplace_transform(ma1[g], s, t, plane)
A:sympy.integrals.laplace.x_->symbols('x_')
A:sympy.integrals.laplace.dc->Add(*[x * s ** y for (x, y) in zip(dc, range(len(dc))[::-1])]).as_poly(s).all_coeffs()
A:sympy.integrals.laplace.(l, m)->tuple(nc)
A:sympy.integrals.laplace.bs->sqrt(b).simplify()
A:sympy.integrals.laplace.(ft, cond)->_inverse_laplace_transform(fn, s, t, plane, simplify=True, dorational=False)
A:sympy.integrals.laplace.(k, f)->term.powsimp(combine='exp').powsimp(combine='exp').as_independent(s_, as_Add=False)
A:sympy.integrals.laplace._none_sentinel->Dummy('None')
A:sympy.integrals.laplace._c->Dummy('c')
A:sympy.integrals.laplace.(a, b, n)->symbols('a, b, n', cls=Wild, exclude=[s])
A:sympy.integrals.laplace.(coeff, expr)->e.as_independent(s)
A:sympy.integrals.laplace.match->e.match((a * s + b) ** n)
sympy.integrals.laplace.InverseLaplaceTransform(cls,F,s,x,plane,**opts)
sympy.integrals.laplace.InverseLaplaceTransform._as_integral(self,F,s,t)
sympy.integrals.laplace.InverseLaplaceTransform._compute_transform(self,F,s,t,**hints)
sympy.integrals.laplace.InverseLaplaceTransform.doit(self,**hints)
sympy.integrals.laplace.InverseLaplaceTransform.fundamental_plane(self)
sympy.integrals.laplace.LaplaceTransform(IntegralTransform)
sympy.integrals.laplace.LaplaceTransform._as_integral(self,f,t,s)
sympy.integrals.laplace.LaplaceTransform._collapse_extra(self,extra)
sympy.integrals.laplace.LaplaceTransform._compute_transform(self,f,t,s,**hints)
sympy.integrals.laplace.LaplaceTransform.doit(self,**hints)
sympy.integrals.laplace._complete_the_square_in_denom(f,s)
sympy.integrals.laplace._fast_inverse_laplace(e,s,t)
sympy.integrals.laplace._inverse_laplace_apply_prog_rules(F,s,t,plane)
sympy.integrals.laplace._inverse_laplace_apply_simple_rules(f,s,t)
sympy.integrals.laplace._inverse_laplace_build_rules()
sympy.integrals.laplace._inverse_laplace_expand(fn,s,t,plane)
sympy.integrals.laplace._inverse_laplace_rational(fn,s,t,plane,simplify)
sympy.integrals.laplace._inverse_laplace_time_diff(F,s,t,plane)
sympy.integrals.laplace._inverse_laplace_time_shift(F,s,t,plane)
sympy.integrals.laplace._inverse_laplace_transform(fn,s_,t_,plane,simplify=True,dorational=True)
sympy.integrals.laplace._inverse_laplace_transform_integration(F,s,t_,plane,simplify=True)
sympy.integrals.laplace._laplace_apply_prog_rules(f,t,s)
sympy.integrals.laplace._laplace_apply_simple_rules(f,t,s)
sympy.integrals.laplace._laplace_build_rules()
sympy.integrals.laplace._laplace_deep_collect(f,t)
sympy.integrals.laplace._laplace_expand(f,t,s,doit=True,**hints)
sympy.integrals.laplace._laplace_rule_delta(f,t,s)
sympy.integrals.laplace._laplace_rule_diff(f,t,s,doit=True,**hints)
sympy.integrals.laplace._laplace_rule_exp(f,t,s)
sympy.integrals.laplace._laplace_rule_heaviside(f,t,s)
sympy.integrals.laplace._laplace_rule_sdiff(f,t,s,doit=True,**hints)
sympy.integrals.laplace._laplace_rule_timescale(f,t,s)
sympy.integrals.laplace._laplace_rule_trig(fn,t_,s,doit=True,**hints)
sympy.integrals.laplace._laplace_transform(fn,t_,s_,simplify=True)
sympy.integrals.laplace._laplace_transform_integration(f,t,s_,simplify=True)
sympy.integrals.laplace._laplace_trig_expsum(f,t)
sympy.integrals.laplace._laplace_trig_ltex(xm,t,s)
sympy.integrals.laplace._laplace_trig_split(fn)
sympy.integrals.laplace._simplifyconds(expr,s,a)
sympy.integrals.laplace.expand_dirac_delta(expr)
sympy.integrals.laplace.inverse_laplace_transform(F,s,t,plane=None,**hints)
sympy.integrals.laplace.laplace_transform(f,t,s,legacy_matrix=True,**hints)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/singularityfunctions.py----------------------------------------
A:sympy.integrals.singularityfunctions.expr->integrate(expr, x)
sympy.integrals.singularityfunctions.singularityintegrate(f,x)
sympy.singularityintegrate(f,x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/quadrature.py----------------------------------------
A:sympy.integrals.quadrature.x->Dummy('x')
A:sympy.integrals.quadrature.p->legendre_poly(n - 1, x, polys=True)
A:sympy.integrals.quadrature.pd->legendre_poly(n - 1, x, polys=True).diff(x)
A:sympy.integrals.quadrature.r->r.eval_rational(S.One / 10 ** (n_digits + 2)).eval_rational(S.One / 10 ** (n_digits + 2))
A:sympy.integrals.quadrature.p1->laguerre_poly(n - 1, x, alpha=alpha, polys=True)
A:sympy.integrals.quadrature.p2->laguerre_poly(n - 1, x, alpha=alpha + 1, polys=True)
A:sympy.integrals.quadrature.pn->jacobi_poly(n + 1, alpha, beta, x, polys=True)
sympy.integrals.quadrature.gauss_chebyshev_t(n,n_digits)
sympy.integrals.quadrature.gauss_chebyshev_u(n,n_digits)
sympy.integrals.quadrature.gauss_gen_laguerre(n,alpha,n_digits)
sympy.integrals.quadrature.gauss_hermite(n,n_digits)
sympy.integrals.quadrature.gauss_jacobi(n,alpha,beta,n_digits)
sympy.integrals.quadrature.gauss_laguerre(n,n_digits)
sympy.integrals.quadrature.gauss_legendre(n,n_digits)
sympy.integrals.quadrature.gauss_lobatto(n,n_digits)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/transforms.py----------------------------------------
A:sympy.integrals.transforms.cond->Or(*cond)
A:sympy.integrals.transforms.T->self._compute_transform(self.function, self.function_variable, self.transform_variable, **hints)
A:sympy.integrals.transforms.fn->expand_mul(fn)
A:sympy.integrals.transforms.needeval->hints.pop('needeval', False)
A:sympy.integrals.transforms.simplify->hints.pop('simplify', True)
A:sympy.integrals.transforms.(fn, T)->self._try_directly(**hints)
A:sympy.integrals.transforms.res->factor(res, gens=res.atoms(Heaviside))
A:sympy.integrals.transforms.extra->self._collapse_extra(extra)
A:sympy.integrals.transforms.(coeff, rest)->expand_mul(fn).as_coeff_mul(self.function_variable)
A:sympy.integrals.transforms._noconds->_noconds_(False)
A:sympy.integrals.transforms.s->_dummy('s', 'mellin-transform', f)
A:sympy.integrals.transforms.F->integrate(f * besselj(nu, k * r) * r, (r, S.Zero, S.Infinity))
A:sympy.integrals.transforms.conds->conjuncts(to_cnf(cond))
A:sympy.integrals.transforms.t->Dummy('t', real=True)
A:sympy.integrals.transforms.d_->d.replace(re, lambda x: x.as_real_imag()[0]).subs(re(s), t)
A:sympy.integrals.transforms.soln->_solve_inequality(d_, t)
A:sympy.integrals.transforms.b_->Max(soln.gts, b_)
A:sympy.integrals.transforms.a_->Min(soln.lts, a_)
A:sympy.integrals.transforms.a->self.a()
A:sympy.integrals.transforms.b->self.b()
A:sympy.integrals.transforms.aux->And(aux, Or(*aux_))
A:sympy.integrals.transforms.m->expand_mul(m / pi)
A:sympy.integrals.transforms.n->expand_mul(n / pi)
A:sympy.integrals.transforms.r->ceiling(-m * a - n.as_real_imag()[0])
A:sympy.integrals.transforms.(a_, b_)->S([a, b])
A:sympy.integrals.transforms.c->expand(re(c))
A:sympy.integrals.transforms.(coeff, _)->Mul(*exponentials).as_coeff_mul(s)
A:sympy.integrals.transforms.f->f.subs(s, s / s_multiplier).subs(s, s / s_multiplier)
A:sympy.integrals.transforms.(numer, denom)->f.subs(s, s / s_multiplier).subs(s, s / s_multiplier).as_numer_denom()
A:sympy.integrals.transforms.numer->sympy.core.mul.Mul.make_args(numer)
A:sympy.integrals.transforms.denom->sympy.core.mul.Mul.make_args(denom)
A:sympy.integrals.transforms.(fact, is_numer)->args.pop()
A:sympy.integrals.transforms.p->Abs(S(a))
A:sympy.integrals.transforms.base->exp_polar(1)
A:sympy.integrals.transforms.(a, b)->linear_arg(fact.args[0])
A:sympy.integrals.transforms.rs->sympy.polys.rootoftools.CRootOf.all_roots(p)
A:sympy.integrals.transforms.(a, c)->gammas.pop()
A:sympy.integrals.transforms.(gamma1, gamma2, fac_)->_rewrite_sin(linear_arg(a), s, a_, b_)
A:sympy.integrals.transforms.arg->Mul(*exponentials)
A:sympy.integrals.transforms.x->_dummy('t', 'inverse-mellin-transform', F, positive=True)
A:sympy.integrals.transforms.(a, b, C, e, fac)->_rewrite_gamma(g, s, strip[0], strip[1])
A:sympy.integrals.transforms.G->meijerg(a, b, C / x ** e)
A:sympy.integrals.transforms.h->hyperexpand(G)
A:sympy.integrals.transforms._none_sentinel->Dummy('None')
A:sympy.integrals.transforms._c->Dummy('c')
A:sympy.integrals.transforms.integral_f->integrate(f, (x, S.NegativeInfinity, S.Infinity))
sympy.CosineTransform(SineCosineTypeTransform)
sympy.FourierTransform(FourierTypeTransform)
sympy.HankelTransform(HankelTypeTransform)
sympy.InverseCosineTransform(SineCosineTypeTransform)
sympy.InverseFourierTransform(FourierTypeTransform)
sympy.InverseHankelTransform(HankelTypeTransform)
sympy.InverseMellinTransform(cls,F,s,x,a,b,**opts)
sympy.InverseSineTransform(SineCosineTypeTransform)
sympy.MellinTransform(IntegralTransform)
sympy.SineTransform(SineCosineTypeTransform)
sympy.cosine_transform(f,x,k,**hints)
sympy.fourier_transform(f,x,k,**hints)
sympy.hankel_transform(f,r,k,nu,**hints)
sympy.integrals.transforms.CosineTransform(SineCosineTypeTransform)
sympy.integrals.transforms.CosineTransform.a(self)
sympy.integrals.transforms.CosineTransform.b(self)
sympy.integrals.transforms.FourierTransform(FourierTypeTransform)
sympy.integrals.transforms.FourierTransform.a(self)
sympy.integrals.transforms.FourierTransform.b(self)
sympy.integrals.transforms.FourierTypeTransform(IntegralTransform)
sympy.integrals.transforms.FourierTypeTransform._as_integral(self,f,x,k)
sympy.integrals.transforms.FourierTypeTransform._compute_transform(self,f,x,k,**hints)
sympy.integrals.transforms.FourierTypeTransform.a(self)
sympy.integrals.transforms.FourierTypeTransform.b(self)
sympy.integrals.transforms.HankelTransform(HankelTypeTransform)
sympy.integrals.transforms.HankelTypeTransform(IntegralTransform)
sympy.integrals.transforms.HankelTypeTransform._as_integral(self,f,r,k,nu)
sympy.integrals.transforms.HankelTypeTransform._compute_transform(self,f,r,k,nu,**hints)
sympy.integrals.transforms.HankelTypeTransform.as_integral(self)
sympy.integrals.transforms.HankelTypeTransform.doit(self,**hints)
sympy.integrals.transforms.IntegralTransform(Function)
sympy.integrals.transforms.IntegralTransform._as_integral(self,f,x,s)
sympy.integrals.transforms.IntegralTransform._collapse_extra(self,extra)
sympy.integrals.transforms.IntegralTransform._compute_transform(self,f,x,s,**hints)
sympy.integrals.transforms.IntegralTransform._eval_rewrite_as_Integral(self,*args,**kwargs)
sympy.integrals.transforms.IntegralTransform._try_directly(self,**hints)
sympy.integrals.transforms.IntegralTransform.as_integral(self)
sympy.integrals.transforms.IntegralTransform.doit(self,**hints)
sympy.integrals.transforms.IntegralTransform.free_symbols(self)
sympy.integrals.transforms.IntegralTransform.function(self)
sympy.integrals.transforms.IntegralTransform.function_variable(self)
sympy.integrals.transforms.IntegralTransform.transform_variable(self)
sympy.integrals.transforms.IntegralTransformError(self,transform,function,msg)
sympy.integrals.transforms.InverseCosineTransform(SineCosineTypeTransform)
sympy.integrals.transforms.InverseCosineTransform.a(self)
sympy.integrals.transforms.InverseCosineTransform.b(self)
sympy.integrals.transforms.InverseFourierTransform(FourierTypeTransform)
sympy.integrals.transforms.InverseFourierTransform.a(self)
sympy.integrals.transforms.InverseFourierTransform.b(self)
sympy.integrals.transforms.InverseHankelTransform(HankelTypeTransform)
sympy.integrals.transforms.InverseMellinTransform(cls,F,s,x,a,b,**opts)
sympy.integrals.transforms.InverseMellinTransform._as_integral(self,F,s,x)
sympy.integrals.transforms.InverseMellinTransform._compute_transform(self,F,s,x,**hints)
sympy.integrals.transforms.InverseMellinTransform.fundamental_strip(self)
sympy.integrals.transforms.InverseSineTransform(SineCosineTypeTransform)
sympy.integrals.transforms.InverseSineTransform.a(self)
sympy.integrals.transforms.InverseSineTransform.b(self)
sympy.integrals.transforms.MellinTransform(IntegralTransform)
sympy.integrals.transforms.MellinTransform._as_integral(self,f,x,s)
sympy.integrals.transforms.MellinTransform._collapse_extra(self,extra)
sympy.integrals.transforms.MellinTransform._compute_transform(self,f,x,s,**hints)
sympy.integrals.transforms.MellinTransformStripError(ValueError)
sympy.integrals.transforms.SineCosineTypeTransform(IntegralTransform)
sympy.integrals.transforms.SineCosineTypeTransform._as_integral(self,f,x,k)
sympy.integrals.transforms.SineCosineTypeTransform._compute_transform(self,f,x,k,**hints)
sympy.integrals.transforms.SineCosineTypeTransform.a(self)
sympy.integrals.transforms.SineCosineTypeTransform.b(self)
sympy.integrals.transforms.SineTransform(SineCosineTypeTransform)
sympy.integrals.transforms.SineTransform.a(self)
sympy.integrals.transforms.SineTransform.b(self)
sympy.integrals.transforms._default_integrator(f,x)
sympy.integrals.transforms._fourier_transform(f,x,k,a,b,name,simplify=True)
sympy.integrals.transforms._hankel_transform(f,r,k,nu,name,simplify=True)
sympy.integrals.transforms._inverse_mellin_transform(F,s,x_,strip,as_meijerg=False)
sympy.integrals.transforms._mellin_transform(f,x,s_,integrator=_default_integrator,simplify=True)
sympy.integrals.transforms._noconds_(default)
sympy.integrals.transforms._rewrite_gamma(f,s,a,b)
sympy.integrals.transforms._rewrite_sin(m_n,s,a,b)
sympy.integrals.transforms._simplify(expr,doit)
sympy.integrals.transforms._sine_cosine_transform(f,x,k,a,b,K,name,simplify=True)
sympy.integrals.transforms.cosine_transform(f,x,k,**hints)
sympy.integrals.transforms.fourier_transform(f,x,k,**hints)
sympy.integrals.transforms.hankel_transform(f,r,k,nu,**hints)
sympy.integrals.transforms.inverse_cosine_transform(F,k,x,**hints)
sympy.integrals.transforms.inverse_fourier_transform(F,k,x,**hints)
sympy.integrals.transforms.inverse_hankel_transform(F,k,r,nu,**hints)
sympy.integrals.transforms.inverse_mellin_transform(F,s,x,strip,**hints)
sympy.integrals.transforms.inverse_sine_transform(F,k,x,**hints)
sympy.integrals.transforms.mellin_transform(f,x,s,**hints)
sympy.integrals.transforms.sine_transform(f,x,k,**hints)
sympy.inverse_cosine_transform(F,k,x,**hints)
sympy.inverse_fourier_transform(F,k,x,**hints)
sympy.inverse_hankel_transform(F,k,r,nu,**hints)
sympy.inverse_mellin_transform(F,s,x,strip,**hints)
sympy.inverse_sine_transform(F,k,x,**hints)
sympy.mellin_transform(f,x,s,**hints)
sympy.sine_transform(f,x,k,**hints)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/deltafunctions.py----------------------------------------
A:sympy.integrals.deltafunctions.(c, nc)->node.args_cnc()
A:sympy.integrals.deltafunctions.sorted_args->sorted(c, key=default_sort_key)
A:sympy.integrals.deltafunctions.nnode->Mul(*new_args).expand()
A:sympy.integrals.deltafunctions.h->f.expand(diracdelta=True, wrt=x)
A:sympy.integrals.deltafunctions.fh->integrate(rest_mult, x)
A:sympy.integrals.deltafunctions.g->f.expand()
A:sympy.integrals.deltafunctions.(deltaterm, rest_mult)->change_mul(f, x)
A:sympy.integrals.deltafunctions.deltaterm->deltaterm.expand(diracdelta=True, wrt=x).expand(diracdelta=True, wrt=x)
A:sympy.integrals.deltafunctions.(deltaterm, rest_mult_2)->change_mul(deltaterm, x)
sympy.integrals.deltafunctions.change_mul(node,x)
sympy.integrals.deltafunctions.deltaintegrate(f,x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/manualintegrate.py----------------------------------------
A:sympy.integrals.manualintegrate.result->result.func((result.args[1][0], Ne(*cond.args)), (result.args[0][0], True)).func((result.args[1][0], Ne(*cond.args)), (result.args[0][0], True))
A:sympy.integrals.manualintegrate.(base, exp_)->_get_base_exp(integrand)
A:sympy.integrals.manualintegrate.v->integral_steps(simplify(dv), symbol).eval()
A:sympy.integrals.manualintegrate.coeffs->numer_poly.all_coeffs()
A:sympy.integrals.manualintegrate.s->sqrt(a + b * x + c * x ** 2)
A:sympy.integrals.manualintegrate.step->SqrtQuadraticDenomRule(integrand, x, a, b, c, coeffs)
A:sympy.integrals.manualintegrate.variable_count->list(self.integrand.variable_count)
A:sympy.integrals.manualintegrate.func->func.subs(cot(theta), 1 / tan(theta)).subs(cot(theta), 1 / tan(theta))
A:sympy.integrals.manualintegrate.trig_function->list(func.find(TrigonometricFunction))
A:sympy.integrals.manualintegrate.relation->solve(x - func, trig_function)
A:sympy.integrals.manualintegrate.(numer, denom)->fraction(relation[0])
A:sympy.integrals.manualintegrate.adjacent->sqrt(denom ** 2 - numer ** 2)
A:sympy.integrals.manualintegrate.inverse->atan(relation[0])
A:sympy.integrals.manualintegrate.opposite->sqrt(denom ** 2 - numer ** 2)
A:sympy.integrals.manualintegrate.hypotenuse->sqrt(denom ** 2 + numer ** 2)
A:sympy.integrals.manualintegrate.sequence->sequence.items().items()
A:sympy.integrals.manualintegrate.expr->expr.replace(lambda x: x.is_Pow and x.base == x0, lambda x: exp(x.exp * new)).replace(lambda x: x.is_Pow and x.base == x0, lambda x: exp(x.exp * new))
A:sympy.integrals.manualintegrate.substituted->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({base ** (S.One / q): (b / b0) ** (S.One / q) * u ** (q0 / q) for (base, b, q) in zip(bases, bs, qs)}).subs(x, (u ** q0 - a0) / b0)
A:sympy.integrals.manualintegrate.deg_before->max([degree(t, symbol) for t in integrand.as_numer_denom()])
A:sympy.integrals.manualintegrate.deg_after->max([degree(t, u_var) for t in substituted.as_numer_denom()])
A:sympy.integrals.manualintegrate.n->Wild('n', exclude=[symbol], properties=[lambda n: isinstance(n, Integer)])
A:sympy.integrals.manualintegrate.match->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).args[0].match(a + b * x)
A:sympy.integrals.manualintegrate.u_diff->manual_diff(u, symbol)
A:sympy.integrals.manualintegrate.new_integrand->test_subterm(u, u_diff)
A:sympy.integrals.manualintegrate.rewritten->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs(1 / cos(symbol), sec(symbol))
A:sympy.integrals.manualintegrate.substep->integral_steps(manual_subs(integrand, expr, 0), symbol)
A:sympy.integrals.manualintegrate.(base, expt)->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).as_base_exp()
A:sympy.integrals.manualintegrate.rule->ConstantTimesRule(constant * integrand, symbol, constant, integrand, rule)
A:sympy.integrals.manualintegrate.var_index->orthogonal_poly_var_index.get(klass, 1)
A:sympy.integrals.manualintegrate._symbol->Dummy('x')
A:sympy.integrals.manualintegrate.a->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).args[0].match(a + b * x).get(A, S.Zero)
A:sympy.integrals.manualintegrate.b->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).args[0].match(a + b * x).get(B, S.Zero)
A:sympy.integrals.manualintegrate.c->Wild('c', exclude=[x, 0])
A:sympy.integrals.manualintegrate.d->Wild('d', exclude=[symbol])
A:sympy.integrals.manualintegrate.e->Wild('e', exclude=[symbol])
A:sympy.integrals.manualintegrate._integrand->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs(symbol, _symbol)
A:sympy.integrals.manualintegrate.wild_vals->tuple((match.get(w) for w in _wilds if match.get(w) is not None))
A:sympy.integrals.manualintegrate.a_->Wild('a', exclude=[x])
A:sympy.integrals.manualintegrate.b_->Wild('b', exclude=[x, 0])
A:sympy.integrals.manualintegrate.(_, terms)->expr.replace(lambda x: x.is_Pow and x.base == x0, lambda x: exp(x.exp * new)).replace(lambda x: x.is_Pow and x.base == x0, lambda x: exp(x.exp * new)).as_coeff_mul()
A:sympy.integrals.manualintegrate.(base_, sub_exp)->_get_base_exp(b)
A:sympy.integrals.manualintegrate.generic_cond->Ne(b, 0)
A:sympy.integrals.manualintegrate.degenerate_step->ConstantRule(DiracDelta(a, n), x)
A:sympy.integrals.manualintegrate.generic_step->DiracDeltaRule(integrand, x, n, a, b)
A:sympy.integrals.manualintegrate.(base, exp)->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).as_base_exp()
A:sympy.integrals.manualintegrate.u_var->Dummy('u')
A:sympy.integrals.manualintegrate.non_square_cond->Ne(k, 0)
A:sympy.integrals.manualintegrate.square_step->NestedPowRule(1 / sqrt(c * (symbol - h) ** 2), symbol, symbol - h, S.NegativeOne)
A:sympy.integrals.manualintegrate.(coeff, f)->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).as_independent(symbol)
A:sympy.integrals.manualintegrate.next_step->integral_steps(integrand2, u)
A:sympy.integrals.manualintegrate.integrand->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)})
A:sympy.integrals.manualintegrate.u->Dummy('u')
A:sympy.integrals.manualintegrate.dv->dv.subs(dummy, 1).subs(dummy, 1)
A:sympy.integrals.manualintegrate.dummy->Dummy('temporary')
A:sympy.integrals.manualintegrate.v_step->integral_steps(simplify(dv), symbol)
A:sympy.integrals.manualintegrate.du->Dummy('u').diff(symbol)
A:sympy.integrals.manualintegrate.r->lrule(integrand)
A:sympy.integrals.manualintegrate.(constant, integrand)->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).as_coeff_Mul()
A:sympy.integrals.manualintegrate.cachekey->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).xreplace({symbol: _cache_dummy})
A:sympy.integrals.manualintegrate.coefficient->(v * du / integrand).cancel()
A:sympy.integrals.manualintegrate.(next_constant, next_integrand)->(v * du).as_coeff_Mul()
A:sympy.integrals.manualintegrate.general_rule->ArctanRule(integrand, symbol, a, b, c)
A:sympy.integrals.manualintegrate.constant->sqrt(-c / b)
A:sympy.integrals.manualintegrate.negative_step->RewriteRule(integrand, symbol, rewritten, negative_step)
A:sympy.integrals.manualintegrate.match2->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).match(a / (b * symbol ** 2 + c * symbol + d))
A:sympy.integrals.manualintegrate.integrand2->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs(symbol, u - c / (2 * b))
A:sympy.integrals.manualintegrate.match3->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).match((a * symbol + b) / (c * symbol ** 2 + d * symbol + e))
A:sympy.integrals.manualintegrate.step1->ConstantTimesRule(const * numer1 / denominator, symbol, const, numer1 / denominator, step1)
A:sympy.integrals.manualintegrate.step2->integral_steps(numer2 / denominator, symbol)
A:sympy.integrals.manualintegrate.substeps->AddRule(integrand, symbol, [step1, step2])
A:sympy.integrals.manualintegrate.simplified->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({b: 0 for b in bs})
A:sympy.integrals.manualintegrate.f->Wild('f')
A:sympy.integrals.manualintegrate.f_poly->Wild('f').as_poly(x)
A:sympy.integrals.manualintegrate.denom->sqrt(a + b * x + c * x ** 2)
A:sympy.integrals.manualintegrate.deg->numer_poly.degree()
A:sympy.integrals.manualintegrate.pow_rule->PowerRule(1 / sqrt(u), u, u, -S.Half)
A:sympy.integrals.manualintegrate.linear_step->ConstantTimesRule(A * pre_substitute, x, A, pre_substitute, linear_step)
A:sympy.integrals.manualintegrate.constant_step->ConstantTimesRule(B / denom, x, B, 1 / denom, constant_step)
A:sympy.integrals.manualintegrate.add->Add(A * pre_substitute, B / denom, evaluate=False)
A:sympy.integrals.manualintegrate.m->Wild('m', exclude=[symbol])
A:sympy.integrals.manualintegrate.(a, b, m, n)->make_wilds(symbol)
A:sympy.integrals.manualintegrate.g->Wild('g')
A:sympy.integrals.manualintegrate.sincos_botheven_condition->uncurry(lambda a, b, m, n, i, s: m.is_even and n.is_even and m.is_nonnegative and n.is_nonnegative)
A:sympy.integrals.manualintegrate.sincos_botheven->trig_rewriter(lambda a, b, m, n, i, symbol: ((1 - cos(2 * a * symbol)) / 2) ** (m / 2) * ((1 + cos(2 * b * symbol)) / 2) ** (n / 2))
A:sympy.integrals.manualintegrate.sincos_sinodd_condition->uncurry(lambda a, b, m, n, i, s: m.is_odd and m >= 3)
A:sympy.integrals.manualintegrate.sincos_sinodd->trig_rewriter(lambda a, b, m, n, i, symbol: (1 - cos(a * symbol) ** 2) ** ((m - 1) / 2) * sin(a * symbol) * cos(b * symbol) ** n)
A:sympy.integrals.manualintegrate.sincos_cosodd_condition->uncurry(lambda a, b, m, n, i, s: n.is_odd and n >= 3)
A:sympy.integrals.manualintegrate.sincos_cosodd->trig_rewriter(lambda a, b, m, n, i, symbol: (1 - sin(b * symbol) ** 2) ** ((n - 1) / 2) * cos(b * symbol) * sin(a * symbol) ** m)
A:sympy.integrals.manualintegrate.tansec_seceven_condition->uncurry(lambda a, b, m, n, i, s: n.is_even and n >= 4)
A:sympy.integrals.manualintegrate.tansec_seceven->trig_rewriter(lambda a, b, m, n, i, symbol: (1 + tan(b * symbol) ** 2) ** (n / 2 - 1) * sec(b * symbol) ** 2 * tan(a * symbol) ** m)
A:sympy.integrals.manualintegrate.tansec_tanodd_condition->uncurry(lambda a, b, m, n, i, s: m.is_odd)
A:sympy.integrals.manualintegrate.tansec_tanodd->trig_rewriter(lambda a, b, m, n, i, symbol: (sec(a * symbol) ** 2 - 1) ** ((m - 1) / 2) * tan(a * symbol) * sec(b * symbol) ** n)
A:sympy.integrals.manualintegrate.tan_tansquared_condition->uncurry(lambda a, b, m, n, i, s: m == 2 and n == 0)
A:sympy.integrals.manualintegrate.tan_tansquared->trig_rewriter(lambda a, b, m, n, i, symbol: sec(a * symbol) ** 2 - 1)
A:sympy.integrals.manualintegrate.cotcsc_csceven_condition->uncurry(lambda a, b, m, n, i, s: n.is_even and n >= 4)
A:sympy.integrals.manualintegrate.cotcsc_csceven->trig_rewriter(lambda a, b, m, n, i, symbol: (1 + cot(b * symbol) ** 2) ** (n / 2 - 1) * csc(b * symbol) ** 2 * cot(a * symbol) ** m)
A:sympy.integrals.manualintegrate.cotcsc_cotodd_condition->uncurry(lambda a, b, m, n, i, s: m.is_odd)
A:sympy.integrals.manualintegrate.cotcsc_cotodd->trig_rewriter(lambda a, b, m, n, i, symbol: (csc(a * symbol) ** 2 - 1) ** ((m - 1) / 2) * cot(a * symbol) * csc(b * symbol) ** n)
A:sympy.integrals.manualintegrate.(pattern, a, b, m, n)->cotcsc_pattern(symbol)
A:sympy.integrals.manualintegrate.A->Wild('a', exclude=[0, symbol])
A:sympy.integrals.manualintegrate.B->Wild('b', exclude=[0, symbol])
A:sympy.integrals.manualintegrate.theta->Dummy('theta')
A:sympy.integrals.manualintegrate.matches->integrand.subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).subs({1 / sin(symbol): csc(symbol), 1 / tan(symbol): cot(symbol), cos(symbol) / tan(symbol): cot(symbol)}).find(target_pattern)
A:sympy.integrals.manualintegrate.restriction->And(symbol > -constant, symbol < constant)
A:sympy.integrals.manualintegrate.substitutions[sqrt(f(theta) ** 2)]->f(theta)
A:sympy.integrals.manualintegrate.replaced->replaced.xreplace({1 / cos(theta): sec(theta)}).xreplace({1 / cos(theta): sec(theta)})
A:sympy.integrals.manualintegrate.secants->replaced.xreplace({1 / cos(theta): sec(theta)}).xreplace({1 / cos(theta): sec(theta)}).find(1 / cos(theta))
A:sympy.integrals.manualintegrate.(pattern, m, b, g)->heaviside_pattern(symbol)
A:sympy.integrals.manualintegrate.substitutions->find_substitutions(integrand, symbol, u_var)
A:sympy.integrals.manualintegrate.subrule->PiecewiseRule(substituted, symbol, piecewise)
A:sympy.integrals.manualintegrate.(_, denom)->Wild('c', exclude=[x, 0]).as_numer_denom()
A:sympy.integrals.manualintegrate.partial_fractions_rule->rewriter(lambda integrand, symbol: integrand.is_rational_function(), lambda integrand, symbol: integrand.apart(symbol))
A:sympy.integrals.manualintegrate.cancel_rule->rewriter(lambda integrand, symbol: True, lambda integrand, symbol: integrand.cancel())
A:sympy.integrals.manualintegrate.distribute_expand_rule->rewriter(lambda integrand, symbol: all((arg.is_Pow or arg.is_polynomial(symbol) for arg in integrand.args)) or isinstance(integrand, Pow) or isinstance(integrand, Mul), lambda integrand, symbol: integrand.expand())
A:sympy.integrals.manualintegrate.trig_expand_rule->rewriter(lambda integrand, symbol: len({a.args[0] for a in integrand.atoms(TrigonometricFunction)}) > 1, lambda integrand, symbol: integrand.expand(trig=True))
A:sympy.integrals.manualintegrate._cache_dummy->Dummy('z')
A:sympy.integrals.manualintegrate.integral->IntegralInfo(integrand, symbol)
A:sympy.integrals.manualintegrate.k->key(integral)
sympy.integrals.manualintegrate.AddRule(Rule)
sympy.integrals.manualintegrate.AddRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.AddRule.eval(self)->Expr
sympy.integrals.manualintegrate.AlternativeRule(Rule)
sympy.integrals.manualintegrate.AlternativeRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.AlternativeRule.eval(self)->Expr
sympy.integrals.manualintegrate.ArcsinRule(AtomicRule)
sympy.integrals.manualintegrate.ArcsinRule.eval(self)->Expr
sympy.integrals.manualintegrate.ArcsinhRule(AtomicRule)
sympy.integrals.manualintegrate.ArcsinhRule.eval(self)->Expr
sympy.integrals.manualintegrate.ArctanRule(AtomicRule)
sympy.integrals.manualintegrate.ArctanRule.eval(self)->Expr
sympy.integrals.manualintegrate.AssocLaguerreRule(OrthogonalPolyRule)
sympy.integrals.manualintegrate.AssocLaguerreRule.eval(self)->Expr
sympy.integrals.manualintegrate.AtomicRule(Rule,ABC)
sympy.integrals.manualintegrate.AtomicRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.ChebyshevTRule(OrthogonalPolyRule)
sympy.integrals.manualintegrate.ChebyshevTRule.eval(self)->Expr
sympy.integrals.manualintegrate.ChebyshevURule(OrthogonalPolyRule)
sympy.integrals.manualintegrate.ChebyshevURule.eval(self)->Expr
sympy.integrals.manualintegrate.ChiRule(IRule)
sympy.integrals.manualintegrate.ChiRule.eval(self)->Expr
sympy.integrals.manualintegrate.CiRule(IRule)
sympy.integrals.manualintegrate.CiRule.eval(self)->Expr
sympy.integrals.manualintegrate.CompleteSquareRule(RewriteRule)
sympy.integrals.manualintegrate.ConstantRule(AtomicRule)
sympy.integrals.manualintegrate.ConstantRule.eval(self)->Expr
sympy.integrals.manualintegrate.ConstantTimesRule(Rule)
sympy.integrals.manualintegrate.ConstantTimesRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.ConstantTimesRule.eval(self)->Expr
sympy.integrals.manualintegrate.CosRule(TrigRule)
sympy.integrals.manualintegrate.CosRule.eval(self)->Expr
sympy.integrals.manualintegrate.CoshRule(HyperbolicRule)
sympy.integrals.manualintegrate.CoshRule.eval(self)
sympy.integrals.manualintegrate.Csc2Rule(TrigRule)
sympy.integrals.manualintegrate.Csc2Rule.eval(self)->Expr
sympy.integrals.manualintegrate.CscCotRule(TrigRule)
sympy.integrals.manualintegrate.CscCotRule.eval(self)->Expr
sympy.integrals.manualintegrate.CyclicPartsRule(Rule)
sympy.integrals.manualintegrate.CyclicPartsRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.CyclicPartsRule.eval(self)->Expr
sympy.integrals.manualintegrate.DerivativeRule(AtomicRule)
sympy.integrals.manualintegrate.DerivativeRule.eval(self)->Expr
sympy.integrals.manualintegrate.DiracDeltaRule(AtomicRule)
sympy.integrals.manualintegrate.DiracDeltaRule.eval(self)->Expr
sympy.integrals.manualintegrate.DontKnowRule(Rule)
sympy.integrals.manualintegrate.DontKnowRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.DontKnowRule.eval(self)->Expr
sympy.integrals.manualintegrate.EiRule(IRule)
sympy.integrals.manualintegrate.EiRule.eval(self)->Expr
sympy.integrals.manualintegrate.EllipticERule(AtomicRule)
sympy.integrals.manualintegrate.EllipticERule.eval(self)->Expr
sympy.integrals.manualintegrate.EllipticFRule(AtomicRule)
sympy.integrals.manualintegrate.EllipticFRule.eval(self)->Expr
sympy.integrals.manualintegrate.ErfRule(AtomicRule)
sympy.integrals.manualintegrate.ErfRule.eval(self)->Expr
sympy.integrals.manualintegrate.ExpRule(AtomicRule)
sympy.integrals.manualintegrate.ExpRule.eval(self)->Expr
sympy.integrals.manualintegrate.FresnelCRule(AtomicRule)
sympy.integrals.manualintegrate.FresnelCRule.eval(self)->Expr
sympy.integrals.manualintegrate.FresnelSRule(AtomicRule)
sympy.integrals.manualintegrate.FresnelSRule.eval(self)->Expr
sympy.integrals.manualintegrate.GegenbauerRule(OrthogonalPolyRule)
sympy.integrals.manualintegrate.GegenbauerRule.eval(self)->Expr
sympy.integrals.manualintegrate.HeavisideRule(Rule)
sympy.integrals.manualintegrate.HeavisideRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.HeavisideRule.eval(self)->Expr
sympy.integrals.manualintegrate.HermiteRule(OrthogonalPolyRule)
sympy.integrals.manualintegrate.HermiteRule.eval(self)->Expr
sympy.integrals.manualintegrate.HyperbolicRule(AtomicRule,ABC)
sympy.integrals.manualintegrate.IRule(AtomicRule,ABC)
sympy.integrals.manualintegrate.IntegralInfo(NamedTuple)
sympy.integrals.manualintegrate.JacobiRule(OrthogonalPolyRule)
sympy.integrals.manualintegrate.JacobiRule.eval(self)->Expr
sympy.integrals.manualintegrate.LaguerreRule(OrthogonalPolyRule)
sympy.integrals.manualintegrate.LaguerreRule.eval(self)->Expr
sympy.integrals.manualintegrate.LegendreRule(OrthogonalPolyRule)
sympy.integrals.manualintegrate.LegendreRule.eval(self)->Expr
sympy.integrals.manualintegrate.LiRule(IRule)
sympy.integrals.manualintegrate.LiRule.eval(self)->Expr
sympy.integrals.manualintegrate.NestedPowRule(AtomicRule)
sympy.integrals.manualintegrate.NestedPowRule.eval(self)->Expr
sympy.integrals.manualintegrate.OrthogonalPolyRule(AtomicRule,ABC)
sympy.integrals.manualintegrate.PartsRule(Rule)
sympy.integrals.manualintegrate.PartsRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.PartsRule.eval(self)->Expr
sympy.integrals.manualintegrate.PiecewiseRule(Rule)
sympy.integrals.manualintegrate.PiecewiseRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.PiecewiseRule.eval(self)->Expr
sympy.integrals.manualintegrate.PolylogRule(AtomicRule)
sympy.integrals.manualintegrate.PolylogRule.eval(self)->Expr
sympy.integrals.manualintegrate.PowerRule(AtomicRule)
sympy.integrals.manualintegrate.PowerRule.eval(self)->Expr
sympy.integrals.manualintegrate.ReciprocalRule(AtomicRule)
sympy.integrals.manualintegrate.ReciprocalRule.eval(self)->Expr
sympy.integrals.manualintegrate.ReciprocalSqrtQuadraticRule(AtomicRule)
sympy.integrals.manualintegrate.ReciprocalSqrtQuadraticRule.eval(self)->Expr
sympy.integrals.manualintegrate.RewriteRule(Rule)
sympy.integrals.manualintegrate.RewriteRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.RewriteRule.eval(self)->Expr
sympy.integrals.manualintegrate.Rule(ABC)
sympy.integrals.manualintegrate.Rule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.Rule.eval(self)->Expr
sympy.integrals.manualintegrate.Sec2Rule(TrigRule)
sympy.integrals.manualintegrate.Sec2Rule.eval(self)->Expr
sympy.integrals.manualintegrate.SecTanRule(TrigRule)
sympy.integrals.manualintegrate.SecTanRule.eval(self)->Expr
sympy.integrals.manualintegrate.ShiRule(IRule)
sympy.integrals.manualintegrate.ShiRule.eval(self)->Expr
sympy.integrals.manualintegrate.SiRule(IRule)
sympy.integrals.manualintegrate.SiRule.eval(self)->Expr
sympy.integrals.manualintegrate.SinRule(TrigRule)
sympy.integrals.manualintegrate.SinRule.eval(self)->Expr
sympy.integrals.manualintegrate.SinhRule(HyperbolicRule)
sympy.integrals.manualintegrate.SinhRule.eval(self)->Expr
sympy.integrals.manualintegrate.SqrtQuadraticDenomRule(AtomicRule)
sympy.integrals.manualintegrate.SqrtQuadraticDenomRule.eval(self)->Expr
sympy.integrals.manualintegrate.SqrtQuadraticRule(AtomicRule)
sympy.integrals.manualintegrate.SqrtQuadraticRule.eval(self)->Expr
sympy.integrals.manualintegrate.TrigRule(AtomicRule,ABC)
sympy.integrals.manualintegrate.TrigSubstitutionRule(Rule)
sympy.integrals.manualintegrate.TrigSubstitutionRule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.TrigSubstitutionRule.eval(self)->Expr
sympy.integrals.manualintegrate.URule(Rule)
sympy.integrals.manualintegrate.URule.contains_dont_know(self)->bool
sympy.integrals.manualintegrate.URule.eval(self)->Expr
sympy.integrals.manualintegrate.UpperGammaRule(AtomicRule)
sympy.integrals.manualintegrate.UpperGammaRule.eval(self)->Expr
sympy.integrals.manualintegrate._add_degenerate_step(generic_cond,generic_step:Rule,degenerate_step:Rule|None)->Rule
sympy.integrals.manualintegrate._parts_rule(integrand,symbol)->tuple[Expr, Expr, Expr, Expr, Rule] | None
sympy.integrals.manualintegrate.add_rule(integral)
sympy.integrals.manualintegrate.alternatives(*rules)
sympy.integrals.manualintegrate.constant_rule(integral)
sympy.integrals.manualintegrate.cotcsc_pattern(symbol)
sympy.integrals.manualintegrate.derivative_rule(integral)
sympy.integrals.manualintegrate.dirac_delta_rule(integral:IntegralInfo)
sympy.integrals.manualintegrate.exp_rule(integral)
sympy.integrals.manualintegrate.fallback_rule(integral)
sympy.integrals.manualintegrate.find_substitutions(integrand,symbol,u_var)
sympy.integrals.manualintegrate.heaviside_pattern(symbol)
sympy.integrals.manualintegrate.heaviside_rule(integral)
sympy.integrals.manualintegrate.hyperbolic_rule(integral:tuple[Expr,Symbol])
sympy.integrals.manualintegrate.integral_steps(integrand,symbol,**options)
sympy.integrals.manualintegrate.inverse_trig_rule(integral:IntegralInfo,degenerate=True)
sympy.integrals.manualintegrate.make_wilds(symbol)
sympy.integrals.manualintegrate.manual_diff(f,symbol)
sympy.integrals.manualintegrate.manual_subs(expr,*args)
sympy.integrals.manualintegrate.manualintegrate(f,var)
sympy.integrals.manualintegrate.mul_rule(integral:IntegralInfo)
sympy.integrals.manualintegrate.multiplexer(conditions)
sympy.integrals.manualintegrate.nested_pow_rule(integral:IntegralInfo)
sympy.integrals.manualintegrate.orthogonal_poly_rule(integral)
sympy.integrals.manualintegrate.parts_rule(integral)
sympy.integrals.manualintegrate.power_rule(integral)
sympy.integrals.manualintegrate.proxy_rewriter(condition,rewrite)
sympy.integrals.manualintegrate.quadratic_denom_rule(integral)
sympy.integrals.manualintegrate.rewriter(condition,rewrite)
sympy.integrals.manualintegrate.rewrites_rule(integral)
sympy.integrals.manualintegrate.sincos_pattern(symbol)
sympy.integrals.manualintegrate.special_function_rule(integral)
sympy.integrals.manualintegrate.sqrt_linear_rule(integral:IntegralInfo)
sympy.integrals.manualintegrate.sqrt_quadratic_rule(integral:IntegralInfo,degenerate=True)
sympy.integrals.manualintegrate.substitution_rule(integral)
sympy.integrals.manualintegrate.tansec_pattern(symbol)
sympy.integrals.manualintegrate.trig_cotcsc_rule(integral)
sympy.integrals.manualintegrate.trig_powers_products_rule(integral)
sympy.integrals.manualintegrate.trig_product_rule(integral:IntegralInfo)
sympy.integrals.manualintegrate.trig_rewriter(rewrite)
sympy.integrals.manualintegrate.trig_rule(integral)
sympy.integrals.manualintegrate.trig_sincos_rule(integral)
sympy.integrals.manualintegrate.trig_sindouble_rule(integral)
sympy.integrals.manualintegrate.trig_substitution_rule(integral)
sympy.integrals.manualintegrate.trig_tansec_rule(integral)
sympy.integrals.manualintegrate.uncurry(func)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/rationaltools.py----------------------------------------
A:sympy.integrals.rationaltools.(p, q)->f.to_field().div(g)
A:sympy.integrals.rationaltools.(coeff, p, q)->p.cancel(q)
A:sympy.integrals.rationaltools.(poly, p)->p.div(q)
A:sympy.integrals.rationaltools.result->solve(H.coeffs(), C_coeffs)
A:sympy.integrals.rationaltools.(g, h)->ratint_ratpart(p, q, x)
A:sympy.integrals.rationaltools.(P, Q)->Poly(dict(list(zip(h.monoms(), coeffs))), x).as_numer_denom()
A:sympy.integrals.rationaltools.P->Poly(P, x)
A:sympy.integrals.rationaltools.Q->q.as_expr().subs({t: u + I * v}).expand()
A:sympy.integrals.rationaltools.(q, r)->Poly(P, x).div(Q)
A:sympy.integrals.rationaltools.symbol->flags.get('symbol', 't')
A:sympy.integrals.rationaltools.t->flags.get('symbol', 't').as_dummy()
A:sympy.integrals.rationaltools.L->ratint_logpart(r, Q, x, t)
A:sympy.integrals.rationaltools.real->flags.get('real')
A:sympy.integrals.rationaltools.atoms->f.to_field().atoms()
A:sympy.integrals.rationaltools.(_, h)->Poly(dict(list(zip(h.monoms(), coeffs))), x).primitive()
A:sympy.integrals.rationaltools.R->Poly(resultant(c, d, v), u)
A:sympy.integrals.rationaltools.f->f.to_field().to_field()
A:sympy.integrals.rationaltools.g->g.to_field().to_field()
A:sympy.integrals.rationaltools.(u, v, _)->g.to_field().to_field().cofactors(g.diff())
A:sympy.integrals.rationaltools.n->(f * s + g * t).quo(h).degree()
A:sympy.integrals.rationaltools.m->v.degree()
A:sympy.integrals.rationaltools.A->Poly(a.subs({u: r_u, v: r_v}), x)
A:sympy.integrals.rationaltools.B->Poly(b.subs({u: r_u, v: r_v}), x)
A:sympy.integrals.rationaltools.rat_part->cancel(A / u.as_expr(), x)
A:sympy.integrals.rationaltools.log_part->cancel(B / v.as_expr(), x)
A:sympy.integrals.rationaltools.(res, R)->resultant(a, b, includePRS=True)
A:sympy.integrals.rationaltools.res->Poly(res, t, composite=False)
A:sympy.integrals.rationaltools.c_poly->c.as_poly(h.gens)
A:sympy.integrals.rationaltools.(C, res_sqf)->Poly(res, t, composite=False).sqf_list()
A:sympy.integrals.rationaltools.(_, q)->q.primitive()
A:sympy.integrals.rationaltools.h_lc->Poly(h.LC(), t, field=True)
A:sympy.integrals.rationaltools.(c, h_lc_sqf)->Poly(h.LC(), t, field=True).sqf_list(all=True)
A:sympy.integrals.rationaltools.h->Poly(dict(list(zip(h.monoms(), coeffs))), x)
A:sympy.integrals.rationaltools.coeff->coeff.as_poly(inv.gens).as_poly(inv.gens)
A:sympy.integrals.rationaltools.T->(inv * coeff).rem(q)
A:sympy.integrals.rationaltools.(s, t, h)->g.to_field().to_field().gcdex(-f)
A:sympy.integrals.rationaltools.u->(f * s + g * t).quo(h)
A:sympy.integrals.rationaltools.(u, v)->symbols('u,v', cls=Dummy)
A:sympy.integrals.rationaltools.H->Poly(dict(list(zip(h.monoms(), coeffs))), x).as_expr().subs({t: u + I * v}).expand()
A:sympy.integrals.rationaltools.H_map->collect(H, I, evaluate=False)
A:sympy.integrals.rationaltools.Q_map->collect(Q, I, evaluate=False)
A:sympy.integrals.rationaltools.R_u->roots(R, filter='R')
A:sympy.integrals.rationaltools.C->Poly(c.subs({u: r_u}), v)
A:sympy.integrals.rationaltools.R_v->roots(C, filter='R')
A:sympy.integrals.rationaltools.D->d.subs({u: r_u, v: r_v})
A:sympy.integrals.rationaltools.AB->(A ** 2 + B ** 2).as_expr()
A:sympy.integrals.rationaltools.R_q->roots(q, filter='R')
sympy.integrals.rationaltools.log_to_atan(f,g)
sympy.integrals.rationaltools.log_to_real(h,q,x,t)
sympy.integrals.rationaltools.ratint(f,x,**flags)
sympy.integrals.rationaltools.ratint_logpart(f,g,x,t=None)
sympy.integrals.rationaltools.ratint_ratpart(f,g,x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/rde.py----------------------------------------
A:sympy.integrals.rde.r->Poly(r, z)
A:sympy.integrals.rde.product->Poly(1, t)
A:sympy.integrals.rde.final->power_list.pop()
A:sympy.integrals.rde.(dn, ds)->splitfactor(fd, DE)
A:sympy.integrals.rde.g->a.gcd(b)
A:sympy.integrals.rde.d_sqf_part->dn.quo(g)
A:sympy.integrals.rde.d1->dn.quo(g).quo(gcd(d_sqf_part, g))
A:sympy.integrals.rde.(a1, b)->gcdex_diophantine(d.quo(d1).as_poly(DE.t), d1.as_poly(DE.t), a.as_poly(DE.t))
A:sympy.integrals.rde.q->Poly(0, DE.t)
A:sympy.integrals.rde.dq->derivation(q, DE)
A:sympy.integrals.rde.(sn, sd)->sn.cancel(sd, include=True)
A:sympy.integrals.rde.(en, es)->splitfactor(gd, DE)
A:sympy.integrals.rde.p->Poly(c.as_poly(DE.t).LC() / u * DE.t ** m, DE.t, expand=False)
A:sympy.integrals.rde.h->en.gcd(en.diff(DE.t)).quo(p.gcd(p.diff(DE.t)))
A:sympy.integrals.rde.(ca, cd)->ca.cancel(gd, include=True)
A:sympy.integrals.rde.(ba, bd)->frac_in(b, DE.t)
A:sympy.integrals.rde.B->ba.to_field().quo(bd)
A:sympy.integrals.rde.C->(ca * pN * pn).quo(cd)
A:sympy.integrals.rde.n->bound_degree(A, B, C, DE)
A:sympy.integrals.rde.dcoeff->DE.d.quo(Poly(DE.t ** 2 + 1, DE.t))
A:sympy.integrals.rde.(alphaa, alphad)->frac_in(alpha, DE.t)
A:sympy.integrals.rde.(etaa, etad)->frac_in(eta, DE.t)
A:sympy.integrals.rde.A->parametric_log_deriv(ba, bd, etaa, etad, DE)
A:sympy.integrals.rde.(betaa, betad)->frac_in(beta, DE.t)
A:sympy.integrals.rde.N->max(0, -nb, n - nc)
A:sympy.integrals.rde.da->a.degree(DE.t)
A:sympy.integrals.rde.db->b.to_field().quo(a).degree(DE.t)
A:sympy.integrals.rde.dc->cQ.degree(DE.t)
A:sympy.integrals.rde.alpha->Poly(1, DE.t)
A:sympy.integrals.rde.((za, zd), m)->limited_integrate(betaa, betad, [(etaa, etad)], DE)
A:sympy.integrals.rde.delta->DE.d.degree(DE.t)
A:sympy.integrals.rde.lam->DE.d.LC()
A:sympy.integrals.rde.zero->Poly(0, DE.t)
A:sympy.integrals.rde.beta->Poly(0, DE.t)
A:sympy.integrals.rde.b->b.to_field().quo(a).to_field().quo(a)
A:sympy.integrals.rde.c->c.to_field().quo(a).to_field().quo(a)
A:sympy.integrals.rde.(r, z)->gcdex_diophantine(b, a, c)
A:sympy.integrals.rde.lc->cancel(-b.as_poly(DE.t).LC() / DE.d.as_poly(DE.t).LC())
A:sympy.integrals.rde.m->c.to_field().quo(a).to_field().quo(a).degree(DE.t)
A:sympy.integrals.rde.u->cancel(m * DE.d.as_poly(DE.t).LC() + b.as_poly(DE.t).LC())
A:sympy.integrals.rde.(a2a, a2d)->frac_in(c.LC(), DE.t)
A:sympy.integrals.rde.(sa, sd)->rischDE(a1a, a1d, a2a, a2d, DE)
A:sympy.integrals.rde.stm->Poly(sa.as_expr() / sd.as_expr() * DE.t ** m, DE.t, expand=False)
A:sympy.integrals.rde.eta->DE.d.quo(Poly(DE.t, DE.t)).as_expr()
A:sympy.integrals.rde.a1->b.to_field().quo(a).to_field().quo(a).as_expr()
A:sympy.integrals.rde.(a1a, a1d)->frac_in(a1, DE.t)
A:sympy.integrals.rde.R->no_cancel_equal(b, cQ, n, DE)
A:sympy.integrals.rde.y->solve_poly_rde(B, C, m, DE)
A:sympy.integrals.rde.(_, (fa, fd))->weak_normalizer(fa, fd, DE)
A:sympy.integrals.rde.(a, (ba, bd), (ca, cd), hn)->normal_denom(fa, fd, ga, gd, DE)
A:sympy.integrals.rde.(A, B, C, hs)->special_denom(a, ba, bd, ca, cd, DE)
A:sympy.integrals.rde.(B, C, m, alpha, beta)->spde(A, B, C, n, DE)
sympy.integrals.rde.bound_degree(a,b,cQ,DE,case='auto',parametric=False)
sympy.integrals.rde.cancel_exp(b,c,n,DE)
sympy.integrals.rde.cancel_primitive(b,c,n,DE)
sympy.integrals.rde.no_cancel_b_large(b,c,n,DE)
sympy.integrals.rde.no_cancel_b_small(b,c,n,DE)
sympy.integrals.rde.no_cancel_equal(b,c,n,DE)
sympy.integrals.rde.normal_denom(fa,fd,ga,gd,DE)
sympy.integrals.rde.order_at(a,p,t)
sympy.integrals.rde.order_at_oo(a,d,t)
sympy.integrals.rde.rischDE(fa,fd,ga,gd,DE)
sympy.integrals.rde.solve_poly_rde(b,cQ,n,DE,parametric=False)
sympy.integrals.rde.spde(a,b,c,n,DE)
sympy.integrals.rde.special_denom(a,ba,bd,ca,cd,DE,case='auto')
sympy.integrals.rde.weak_normalizer(a,d,DE,z=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/meijerint.py----------------------------------------
A:sympy.integrals.meijerint.z->Dummy('z')
A:sympy.integrals.meijerint.res->res.subs(t, t + shift).subs(t, t + shift)
A:sympy.integrals.meijerint.(p, q, a, b, c)->list(map(wild, 'pqabc'))
A:sympy.integrals.meijerint.n->Wild('n', properties=[lambda x: x.is_Integer and x > 0])
A:sympy.integrals.meijerint.arg->list(f.args).pop()
A:sympy.integrals.meijerint.timeit->timethis('meijerg')
A:sympy.integrals.meijerint.(c, m)->Mul(*newargs).as_coeff_mul(x)
A:sympy.integrals.meijerint.m->LHS.match(unbranched_argument(polar_lift(p) ** q))
A:sympy.integrals.meijerint.innermost->_find_splitting_points(f, x)
A:sympy.integrals.meijerint.f->Mul(*newargs)
A:sympy.integrals.meijerint.args->list(f.args)
A:sympy.integrals.meijerint.(c, t)->expand_mul(a.base).as_coeff_mul(x)
A:sympy.integrals.meijerint.gs->_rewrite1(f, x)
A:sympy.integrals.meijerint.v->S(len(g.ap) - len(g.bq))
A:sympy.integrals.meijerint.p->S(a.p)
A:sympy.integrals.meijerint.q->S(a.q)
A:sympy.integrals.meijerint.(D, g)->_inflate_g(g, q)
A:sympy.integrals.meijerint.d->Dummy('x')
A:sympy.integrals.meijerint._dummies[name, token]->Dummy(name, **kwargs)
A:sympy.integrals.meijerint.cond->cond.subs(t, t + shift).subs(t, t + shift)
A:sympy.integrals.meijerint.(p, q, r)->symbols('p q r', cls=Wild)
A:sympy.integrals.meijerint.(_, s)->_get_coeff_exp(po, x)
A:sympy.integrals.meijerint.(a, b)->_get_coeff_exp(arg.exp, x)
A:sympy.integrals.meijerint.period->_rewrite_single(g, x, recursive).get_period()
A:sympy.integrals.meijerint.a->_dummy_('a', 'rewrite-single')
A:sympy.integrals.meijerint.(eta, _)->_get_coeff_exp(g1.argument, x)
A:sympy.integrals.meijerint.(m, n, p, q)->S([len(g.bm), len(g.an), len(g.ap), len(g.bq)])
A:sympy.integrals.meijerint.cond_3->And(*tmp)
A:sympy.integrals.meijerint.cond_3_star->And(*tmp)
A:sympy.integrals.meijerint.case_extra->And(*case_extra)
A:sympy.integrals.meijerint.case_extra_2->And(*case_extra_2)
A:sympy.integrals.meijerint.per->_rewrite_single(g, x, recursive).get_period()
A:sympy.integrals.meijerint.(_, b1)->_get_coeff_exp(g1.argument, x)
A:sympy.integrals.meijerint.(_, b2)->_get_coeff_exp(g2.argument, x)
A:sympy.integrals.meijerint.g1->_rewrite_single(fac1, x, recursive)
A:sympy.integrals.meijerint.g2->_rewrite_single(fac2, x, recursive)
A:sympy.integrals.meijerint.tau->ilcm(m1 * n2, m2 * n1)
A:sympy.integrals.meijerint.(C1, g1)->_inflate_g(g1, r1)
A:sympy.integrals.meijerint.(C2, g2)->_inflate_g(g2, r2)
A:sympy.integrals.meijerint.(a1, b)->_get_coeff_exp(g1.argument, x)
A:sympy.integrals.meijerint.(a2, _)->_get_coeff_exp(g2.argument, x)
A:sympy.integrals.meijerint.(sigma, _)->_get_coeff_exp(g1.argument, x)
A:sympy.integrals.meijerint.(omega, _)->_get_coeff_exp(g2.argument, x)
A:sympy.integrals.meijerint.(s, t, u, v)->S([len(g1.bm), len(g1.an), len(g1.ap), len(g1.bq)])
A:sympy.integrals.meijerint.c1->_c1()
A:sympy.integrals.meijerint.c2->And(*[re(1 + i + j) > 0 for i in g1.bm for j in g2.bm])
A:sympy.integrals.meijerint.c3->And(*[re(1 + i + j) < 1 + 1 for i in g1.an for j in g2.an])
A:sympy.integrals.meijerint.c4->And(*[(p - q) * re(1 + i - 1) - re(mu) > Rational(-3, 2) for i in g1.an])
A:sympy.integrals.meijerint.c5->And(*[(p - q) * re(1 + i) - re(mu) > Rational(-3, 2) for i in g1.bm])
A:sympy.integrals.meijerint.c6->And(*[(u - v) * re(1 + i - 1) - re(rho) > Rational(-3, 2) for i in g2.an])
A:sympy.integrals.meijerint.c7->And(*[(u - v) * re(1 + i) - re(rho) > Rational(-3, 2) for i in g2.bm])
A:sympy.integrals.meijerint.c11->Eq(Abs(unbranched_argument(sigma)), bstar * pi)
A:sympy.integrals.meijerint.c13->Eq(Abs(unbranched_argument(omega)), cstar * pi)
A:sympy.integrals.meijerint.z0->exp(-(bstar + cstar) * pi * S.ImaginaryUnit)
A:sympy.integrals.meijerint.zos->unpolarify(z0 * omega / sigma)
A:sympy.integrals.meijerint.zso->unpolarify(z0 * sigma / omega)
A:sympy.integrals.meijerint.c14->Or(c14, c14_alt)
A:sympy.integrals.meijerint.c14_alt->And(Eq(phi, 0), cstar - 1 + bstar <= 0, Or(And(Ne(zso, 1), _cond(zso)), And(re(mu + rho + q - p) < 1, Eq(zso, 1))))
A:sympy.integrals.meijerint.lambda_s->Piecewise((lambda_s0(+1, +1) * lambda_s0(-1, -1), And(Eq(unbranched_argument(sigma), 0), Eq(unbranched_argument(omega), 0))), (lambda_s0(sign(unbranched_argument(omega)), +1) * lambda_s0(sign(unbranched_argument(omega)), -1), And(Eq(unbranched_argument(sigma), 0), Ne(unbranched_argument(omega), 0))), (lambda_s0(+1, sign(unbranched_argument(sigma))) * lambda_s0(-1, sign(unbranched_argument(sigma))), And(Ne(unbranched_argument(sigma), 0), Eq(unbranched_argument(omega), 0))), (lambda_s0(sign(unbranched_argument(omega)), sign(unbranched_argument(sigma))), True))
A:sympy.integrals.meijerint.c15->Or(*tmp)
A:sympy.integrals.meijerint.mt1_exists->_check_antecedents_1(g1, x, helper=True)
A:sympy.integrals.meijerint.mt2_exists->_check_antecedents_1(g2, x, helper=True)
A:sympy.integrals.meijerint.r->_rewrite_saxena(fac * C1 * C2, po * x ** (s1 + s2), f1, f2, x, full_pb)
A:sympy.integrals.meijerint.(_, e)->_get_coeff_exp(z, x)
A:sympy.integrals.meijerint.(coeff, exponent)->_get_coeff_exp(z, x)
A:sympy.integrals.meijerint.(b, a)->_get_coeff_exp(g.argument, x)
A:sympy.integrals.meijerint.(C, g)->_inflate_fox_h(meijerg(g.an, g.aother, g.bm, g.bother, b / t ** a), -a)
A:sympy.integrals.meijerint.(coeff, m)->factor(f.argument, x).as_coeff_mul(x)
A:sympy.integrals.meijerint.t->Dummy('t', polar=True)
A:sympy.integrals.meijerint.subs->Mul(*newargs).match(formula, old=True)
A:sympy.integrals.meijerint.subs_[fro]->unpolarify(polarify(to, lift=True), exponents_only=True)
A:sympy.integrals.meijerint.hint->hint.subs(subs).subs(subs)
A:sympy.integrals.meijerint.terms->terms(subs)
A:sympy.integrals.meijerint.r1->_get_coeff_exp(unpolarify(fac.subs(subs).subs(z, x), exponents_only=True), x)
A:sympy.integrals.meijerint.g->_rewrite_single(g, x, recursive)
A:sympy.integrals.meijerint.s->_dummy('s', 'rewrite-single', f)
A:sympy.integrals.meijerint.(F, strip, _)->mellin_transform(f.subs(x, a * x), x, s, integrator=my_integrator, needeval=True, simplify=False)
A:sympy.integrals.meijerint.(fac, po, g)->_split_mul(f, x)
A:sympy.integrals.meijerint.l->list(ordered(l, [lambda p: max(len(_exponents(p[0], x)), len(_exponents(p[1], x))), lambda p: max(len(_functions(p[0], x)), len(_functions(p[1], x))), lambda p: max(len(_find_splitting_points(p[0], x)), len(_find_splitting_points(p[1], x)))]))
A:sympy.integrals.meijerint.rv->meijerint_definite(_rewrite_hyperbolics_as_exp(f_), x_, a_, b_)
A:sympy.integrals.meijerint.(_, c)->_get_coeff_exp(po, x)
A:sympy.integrals.meijerint.e->_my_unpolarify(_clean(e))
A:sympy.integrals.meijerint.res1->_meijerint_definite_2(f.subs(x, x + c), x)
A:sympy.integrals.meijerint.res2->_meijerint_definite_2(f.subs(x, c - x), x)
A:sympy.integrals.meijerint.phi->exp(S.ImaginaryUnit * arg(b))
A:sympy.integrals.meijerint.b->Abs(b)
A:sympy.integrals.meijerint.expanded->expand_mul(expand_trig(orig))
A:sympy.integrals.meijerint.reduced->sincos_to_sum(orig)
A:sympy.integrals.meijerint.dummy->_dummy('x', 'meijerint-definite2', f, positive=True)
A:sympy.integrals.meijerint.c->And(*conds)
A:sympy.integrals.meijerint.(C, f)->_rewrite_inversion(fac * C, po * x ** s, f, x)
A:sympy.integrals.meijerint.arg2->expand(arg)
A:sympy.integrals.meijerint.shift->Add(*exponentials)
sympy.integrals.meijerint._CoeffExpValueError(ValueError)
sympy.integrals.meijerint._check_antecedents(g1,g2,x)
sympy.integrals.meijerint._check_antecedents_1(g,x,helper=False)
sympy.integrals.meijerint._check_antecedents_inversion(g,x)
sympy.integrals.meijerint._condsimp(cond,first=True)
sympy.integrals.meijerint._create_lookup_table(table)
sympy.integrals.meijerint._dummy(name,token,expr,**kwargs)
sympy.integrals.meijerint._dummy_(name,token,**kwargs)
sympy.integrals.meijerint._eval_cond(cond)
sympy.integrals.meijerint._exponents(expr,x)
sympy.integrals.meijerint._find_splitting_points(expr,x)
sympy.integrals.meijerint._flip_g(g)
sympy.integrals.meijerint._functions(expr,x)
sympy.integrals.meijerint._get_coeff_exp(expr,x)
sympy.integrals.meijerint._guess_expansion(f,x)
sympy.integrals.meijerint._has(res,*f)
sympy.integrals.meijerint._inflate_fox_h(g,a)
sympy.integrals.meijerint._inflate_g(g,n)
sympy.integrals.meijerint._int0oo(g1,g2,x)
sympy.integrals.meijerint._int0oo_1(g,x)
sympy.integrals.meijerint._int_inversion(g,x,t)
sympy.integrals.meijerint._is_analytic(f,x)
sympy.integrals.meijerint._meijerint_definite_2(f,x)
sympy.integrals.meijerint._meijerint_definite_3(f,x)
sympy.integrals.meijerint._meijerint_definite_4(f,x,only_double=False)
sympy.integrals.meijerint._meijerint_indefinite_1(f,x)
sympy.integrals.meijerint._mul_args(f)
sympy.integrals.meijerint._mul_as_two_parts(f)
sympy.integrals.meijerint._my_principal_branch(expr,period,full_pb=False)
sympy.integrals.meijerint._my_unpolarify(f)
sympy.integrals.meijerint._mytype(f:Basic,x:Symbol)->tuple[type[Basic], ...]
sympy.integrals.meijerint._rewrite1(f,x,recursive=True)
sympy.integrals.meijerint._rewrite2(f,x)
sympy.integrals.meijerint._rewrite_inversion(fac,po,g,x)
sympy.integrals.meijerint._rewrite_saxena(fac,po,g1,g2,x,full_pb=False)
sympy.integrals.meijerint._rewrite_saxena_1(fac,po,g,x)
sympy.integrals.meijerint._rewrite_single(f,x,recursive=True)
sympy.integrals.meijerint._split_mul(f,x)
sympy.integrals.meijerint.meijerint_definite(f,x,a,b)
sympy.integrals.meijerint.meijerint_indefinite(f,x)
sympy.integrals.meijerint.meijerint_inversion(f,x,t)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/heurisch.py----------------------------------------
A:sympy.integrals.heurisch.result->heurisch(f, x, mappings=mappings, rewrite=rewrite, hints=hints, retries=retries - 1, unnecessary_permutations=unnecessary_permutations)
A:sympy.integrals.heurisch.f->f.rewrite(candidates, rule).rewrite(candidates, rule)
A:sympy.integrals.heurisch.res->heurisch(f, x, rewrite, hints, mappings, retries, degree_offset, unnecessary_permutations, _try_heurisch)
A:sympy.integrals.heurisch.slns->list(uniq(slns))
A:sympy.integrals.heurisch.expr->integrate(f.subs(sub_dict), x)
A:sympy.integrals.heurisch.cond->And(*[Eq(key, value) for (key, value) in sub_dict.items()])
A:sympy.integrals.heurisch.generic->Or(*[Ne(key, value) for (key, value) in sub_dict.items()])
A:sympy.integrals.heurisch.self.n->Dummy('n')
A:sympy.integrals.heurisch.self.z->Dummy('z')
A:sympy.integrals.heurisch._bessel_table->BesselTable()
A:sympy.integrals.heurisch.cache[f]->cancel(f.diff(self.x))
A:sympy.integrals.heurisch.(d0, d1)->BesselTable().diffs(f.func, n, z)
A:sympy.integrals.heurisch.dz->self.get_diff(z)
A:sympy.integrals.heurisch.(indep, f)->f.rewrite(candidates, rule).rewrite(candidates, rule).as_independent(x)
A:sympy.integrals.heurisch.terms->components(f, x)
A:sympy.integrals.heurisch.dcache->DiffCache(x)
A:sympy.integrals.heurisch.a->Wild('a', exclude=[x])
A:sympy.integrals.heurisch.b->Wild('b', exclude=[x])
A:sympy.integrals.heurisch.c->Wild('c', exclude=[x])
A:sympy.integrals.heurisch.M->g.base.match(a * x ** 2 - b)
A:sympy.integrals.heurisch.V->_symbols('x', len(terms))
A:sympy.integrals.heurisch.mapping->list(mapping)
A:sympy.integrals.heurisch.mappings->permutations(mapping)
A:sympy.integrals.heurisch.denom->reduce(lambda p, q: lcm(p, q, *V), denoms)
A:sympy.integrals.heurisch.(c, q)->p.as_poly(y).primitive()
A:sympy.integrals.heurisch.q->q.as_expr().as_expr()
A:sympy.integrals.heurisch.h->gcd(q, _derivation(q), y)
A:sympy.integrals.heurisch.s->set(root_factors(poly, z, filter=field))
A:sympy.integrals.heurisch.c_split->_splitter(c)
A:sympy.integrals.heurisch.q_split->_splitter(cancel(q / s))
A:sympy.integrals.heurisch.F->_substitute(f)
A:sympy.integrals.heurisch.(P, Q)->_substitute(f).as_numer_denom()
A:sympy.integrals.heurisch.u_split->_splitter(denom)
A:sympy.integrals.heurisch.v_split->_splitter(Q)
A:sympy.integrals.heurisch.polys->set(list(v_split) + [u_split[0]] + list(special.keys()))
A:sympy.integrals.heurisch.poly_denom->(s * v_split[0] * _deflation(v_split[1])).as_expr()
A:sympy.integrals.heurisch.monoms->tuple(ordered(itermonomials(V, A + B + degree_offset)))
A:sympy.integrals.heurisch.poly_coeffs->_symbols('A', len(monoms))
A:sympy.integrals.heurisch.poly_part->Add(*[poly_coeffs[i] * monomial for (i, monomial) in enumerate(monoms)])
A:sympy.integrals.heurisch.reducibles->set()
A:sympy.integrals.heurisch.(coeff, factors)->factor_list(poly, *V)
A:sympy.integrals.heurisch.atans->set()
A:sympy.integrals.heurisch.pairs->set()
A:sympy.integrals.heurisch.irreducibles->set()
A:sympy.integrals.heurisch.setV->set(V)
A:sympy.integrals.heurisch.m->collect(poly, I, evaluate=False)
A:sympy.integrals.heurisch.y->collect(poly, I, evaluate=False).get(I, S.Zero)
A:sympy.integrals.heurisch.x->collect(poly, I, evaluate=False).get(S.One, S.Zero)
A:sympy.integrals.heurisch.(x, y)->set().pop()
A:sympy.integrals.heurisch.B->_symbols('B', len(irreducibles))
A:sympy.integrals.heurisch.C->_symbols('C', len(atans))
A:sympy.integrals.heurisch.non_syms->set()
A:sympy.integrals.heurisch.(ground, _)->construct_domain(non_syms, field=True)
A:sympy.integrals.heurisch.coeff_ring->PolyRing(poly_coeffs, ground)
A:sympy.integrals.heurisch.ring->PolyRing(V, coeff_ring)
A:sympy.integrals.heurisch.numer->PolyRing(V, coeff_ring).from_expr(raw_numer)
A:sympy.integrals.heurisch.solution->_integrate()
A:sympy.integrals.heurisch.Fd->_substitute(f).as_dummy()
A:sympy.integrals.heurisch.antideriv->cancel(antideriv).expand()
sympy.integrals.heurisch.BesselTable(self)
sympy.integrals.heurisch.BesselTable._create_table(t)
sympy.integrals.heurisch.BesselTable.diffs(t,f,n,z)
sympy.integrals.heurisch.BesselTable.has(t,f)
sympy.integrals.heurisch.DiffCache(self,x)
sympy.integrals.heurisch.DiffCache.get_diff(self,f)
sympy.integrals.heurisch._symbols(name,n)
sympy.integrals.heurisch.components(f,x)
sympy.integrals.heurisch.heurisch(f,x,rewrite=False,hints=None,mappings=None,retries=3,degree_offset=0,unnecessary_permutations=None,_try_heurisch=None)
sympy.integrals.heurisch.heurisch_wrapper(f,x,rewrite=False,hints=None,mappings=None,retries=3,degree_offset=0,unnecessary_permutations=None,_try_heurisch=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/prde.py----------------------------------------
A:sympy.integrals.prde.(dn, ds)->splitfactor(fd, DE)
A:sympy.integrals.prde.(Gas, Gds)->list(zip(*G))
A:sympy.integrals.prde.gd->reduce(lambda i, j: i.lcm(j), Gds, Poly(1, DE.t))
A:sympy.integrals.prde.(en, es)->splitfactor(gd, DE)
A:sympy.integrals.prde.p->p.as_poly(DE.t).as_poly(DE.t)
A:sympy.integrals.prde.h->en.gcd(en.diff(DE.t)).quo(p.gcd(p.diff(DE.t)))
A:sympy.integrals.prde.(ba, bd)->frac_in(b + (i * (derivation(DE.t, DE) / DE.t)).as_poly(b.gens), DE.t, field=True)
A:sympy.integrals.prde.bd->(bd_real * bd_real + bd_imag * bd_imag).as_poly(gen)
A:sympy.integrals.prde.ba->ba.as_poly(gen).as_dict().as_poly(gen).as_dict()
A:sympy.integrals.prde.bd_real->sum((r for r in denom_real))
A:sympy.integrals.prde.bd_imag->sum((r for r in denom_imag))
A:sympy.integrals.prde.ba_real->sum((r for r in num_real))
A:sympy.integrals.prde.ba_imag->sum((r for r in num_imag))
A:sympy.integrals.prde.B->max(0, derivation(DE.t, DE).degree(DE.t) - 1)
A:sympy.integrals.prde.nc->min([order_at(Ga, p, DE.t) - order_at(Gd, p, DE.t) for (Ga, Gd) in G])
A:sympy.integrals.prde.n->reduce(ilcm, [i.as_numer_denom()[1] for (_, i) in residueterms], S.One)
A:sympy.integrals.prde.dcoeff->DE.d.quo(Poly(DE.t ** 2 + 1, DE.t))
A:sympy.integrals.prde.(alphaa, alphad)->frac_in(-ba.eval(0) / bd.eval(0) / a.eval(0), DE.t)
A:sympy.integrals.prde.(etaa, etad)->frac_in(dcoeff, DE.t)
A:sympy.integrals.prde.A->is_log_deriv_k_t_radical_in_field(pa, pd, DE, case='auto')
A:sympy.integrals.prde.(betaa, alphaa, alphad)->real_imag(ba, bd * a, DE.t)
A:sympy.integrals.prde.N->Matrix(*shape, items, DE.t).nullspace()
A:sympy.integrals.prde.m->len(G)
A:sympy.integrals.prde.(Gns, Gds)->list(zip(*G))
A:sympy.integrals.prde.d->a.LC().gcd(b)
A:sympy.integrals.prde.M->Matrix(*shape, items, DE.t)
A:sympy.integrals.prde.(qs, _)->list(zip(*Q))
A:sympy.integrals.prde.(q, r)->zip(*[pi.div(d) for pi in p])
A:sympy.integrals.prde.Au->is_log_deriv_k_t_radical_in_field(pa, pd, DE, case='auto').row_join(u)
A:sympy.integrals.prde.(Au, _)->is_log_deriv_k_t_radical_in_field(pa, pd, DE, case='auto').row_join(u).rref()
A:sympy.integrals.prde.DAij->D(A[i, j])
A:sympy.integrals.prde.Rm1->Ri.applyfunc(lambda x: D(x) / DAij)
A:sympy.integrals.prde.u->cancel(u ** m * Mul(*[Pow(i, j) for (i, j) in residueterms]))
A:sympy.integrals.prde.(R, Z)->list(zip(*[gcdex_diophantine(b, a, qi) for qi in Q]))
A:sympy.integrals.prde.R->list(R)
A:sympy.integrals.prde.db->b.degree(DE.t)
A:sympy.integrals.prde.sitn->Poly(si * DE.t ** N, DE.t)
A:sympy.integrals.prde.dc->max([qi.degree(DE.t) for qi in Q])
A:sympy.integrals.prde.(A, u)->constant_system(lhs, rhs, DE)
A:sympy.integrals.prde.c->lcm(fd.as_poly(DE.t).LC(), wd.as_poly(DE.t).LC())
A:sympy.integrals.prde.si->Poly(Q[i].nth(b.degree(DE.t)) / b.LC(), DE.t)
A:sympy.integrals.prde.(f, B)->param_rischDE(ba, bd, Q0, DE)
A:sympy.integrals.prde.(A, _)->constant_system(M, zeros(M.rows, 1, DE.t), DE)
A:sympy.integrals.prde.r->len(h)
A:sympy.integrals.prde.I->eye(m, DE.t)
A:sympy.integrals.prde.C->max(p.degree(DE.t), q.degree(DE.t))
A:sympy.integrals.prde.(fi, Ai)->param_rischDE(ba, bd, Qy, DE)
A:sympy.integrals.prde.Ai->Ai.set_gens(DE.t).set_gens(DE.t)
A:sympy.integrals.prde.ri->len(fi)
A:sympy.integrals.prde.a->a.LC().LC()
A:sympy.integrals.prde.(a, b, q, r, n)->prde_spde(a, b, q, n, DE)
A:sympy.integrals.prde.(qq, M)->poly_linear_constraints(q, d)
A:sympy.integrals.prde.V->is_log_deriv_k_t_radical_in_field(pa, pd, DE, case='auto').nullspace()
A:sympy.integrals.prde.Mqq->Matrix([qq])
A:sympy.integrals.prde.Mbeta->Matrix([beta])
A:sympy.integrals.prde.(g, B)->param_poly_rischDE(a.quo(d), b.quo(d), r, n, DE)
A:sympy.integrals.prde.(q, (fa, fd))->weak_normalizer(fa, fd, DE)
A:sympy.integrals.prde.(a, (ba, bd), G, hn)->prde_normal_denom(fa, fd, G, DE)
A:sympy.integrals.prde.(A, B, G, hs)->prde_special_denom(a, ba, bd, G, DE)
A:sympy.integrals.prde.g->is_log_deriv_k_t_radical_in_field(pa, pd, DE, case='auto').gcd(B)
A:sympy.integrals.prde.(q, M)->prde_linear_constraints(a, b, g, DE)
A:sympy.integrals.prde.(M, _)->constant_system(M, zeros(M.rows, 1, DE.t), DE)
A:sympy.integrals.prde.Mq->Matrix([q])
A:sympy.integrals.prde.(h, B)->param_poly_rischDE(a, b, r, n, DE)
A:sympy.integrals.prde.W->is_log_deriv_k_t_radical_in_field(pa, pd, DE, case='auto').nullspace()
A:sympy.integrals.prde.v->len(h)
A:sympy.integrals.prde.(En, Es)->list(zip(*E))
A:sympy.integrals.prde.hn->lcm(fd.as_poly(DE.t).LC(), wd.as_poly(DE.t).LC()).gcd(c.diff(DE.t))
A:sympy.integrals.prde.hs->reduce(lambda i, j: i.lcm(j), (ds,) + Es)
A:sympy.integrals.prde.mu->min(order_at_oo(fa, fd, DE.t), min([order_at_oo(ga, gd, DE.t) for (ga, gd) in G]))
A:sympy.integrals.prde.Fa->Poly(0, DE.t)
A:sympy.integrals.prde.Fd->Poly(1, DE.t)
A:sympy.integrals.prde.(h, A)->param_rischDE(Fa, Fd, G, DE)
A:sympy.integrals.prde.(y_num, y_den)->y.as_numer_denom()
A:sympy.integrals.prde.(p, a)->fa.div(fd)
A:sympy.integrals.prde.(q, b)->wa.div(wd)
A:sympy.integrals.prde.s->solve(eqs, c1)
A:sympy.integrals.prde.(M, N)->s[c1].as_numer_denom()
A:sympy.integrals.prde.M_poly->Matrix(*shape, items, DE.t).as_poly(q.gens)
A:sympy.integrals.prde.N_poly->Matrix(*shape, items, DE.t).nullspace().as_poly(q.gens)
A:sympy.integrals.prde.Qv->is_log_deriv_k_t_radical_in_field(nfmwa, nfmwd, DE)
A:sympy.integrals.prde.(ln, ls)->splitfactor(l, DE)
A:sympy.integrals.prde.(u1, r1)->(fa * l.quo(fd)).div(z)
A:sympy.integrals.prde.(u2, r2)->(wa * l.quo(wd)).div(z)
A:sympy.integrals.prde.(dfa, dfd)->(fd * derivation(fa, DE) - fa * derivation(fd, DE)).cancel(fd ** 2, include=True)
A:sympy.integrals.prde.dum->Dummy()
A:sympy.integrals.prde.lhs->Matrix([E_part + L_part], dum)
A:sympy.integrals.prde.rhs->Matrix([dfa.as_expr() / dfd.as_expr()], dum)
A:sympy.integrals.prde.ans->list(zip(terms, u))
A:sympy.integrals.prde.result->Mul(*[Pow(i, j) for (i, j) in ans])
A:sympy.integrals.prde.(i, d)->i.as_numer_denom()
A:sympy.integrals.prde.(icoeff, iterms)->sqf_list(i)
A:sympy.integrals.prde.(dcoeff, dterms)->sqf_list(d)
A:sympy.integrals.prde.const->cancel(fa.as_expr() / fd.as_expr() - Add(*[Mul(i, j / n) for (i, j) in zip(argterms, u)]))
A:sympy.integrals.prde.(fa, fd)->fa.cancel(fd, include=True)
A:sympy.integrals.prde.(n, s)->splitfactor(fd, DE)
A:sympy.integrals.prde.(H, b)->residue_reduce(fa, fd, DE, z=z)
A:sympy.integrals.prde.(wa, wd)->frac_in((wa, wd), DE.t)
A:sympy.integrals.prde.(pa, pd)->frac_in(p, DE.t)
A:sympy.integrals.prde.common_denom->reduce(ilcm, [i.as_numer_denom()[1] for i in [j for (_, j) in residueterms]] + [n], S.One)
sympy.integrals.prde.constant_system(A,u,DE)
sympy.integrals.prde.is_deriv_k(fa,fd,DE)
sympy.integrals.prde.is_log_deriv_k_t_radical(fa,fd,DE,Df=True)
sympy.integrals.prde.is_log_deriv_k_t_radical_in_field(fa,fd,DE,case='auto',z=None)
sympy.integrals.prde.limited_integrate(fa,fd,G,DE)
sympy.integrals.prde.limited_integrate_reduce(fa,fd,G,DE)
sympy.integrals.prde.param_poly_rischDE(a,b,q,n,DE)
sympy.integrals.prde.param_rischDE(fa,fd,G,DE)
sympy.integrals.prde.parametric_log_deriv(fa,fd,wa,wd,DE)
sympy.integrals.prde.parametric_log_deriv_heu(fa,fd,wa,wd,DE,c1=None)
sympy.integrals.prde.poly_linear_constraints(p,d)
sympy.integrals.prde.prde_cancel_liouvillian(b,Q,n,DE)
sympy.integrals.prde.prde_linear_constraints(a,b,G,DE)
sympy.integrals.prde.prde_no_cancel_b_large(b,Q,n,DE)
sympy.integrals.prde.prde_no_cancel_b_small(b,Q,n,DE)
sympy.integrals.prde.prde_normal_denom(fa,fd,G,DE)
sympy.integrals.prde.prde_spde(a,b,Q,n,DE)
sympy.integrals.prde.prde_special_denom(a,ba,bd,G,DE,case='auto')
sympy.integrals.prde.real_imag(ba,bd,gen)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/risch.py----------------------------------------
A:sympy.integrals.risch.a->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t))
A:sympy.integrals.risch.common_denom->reduce(ilcm, [i.as_numer_denom()[1] for (_, i) in term_list])
A:sympy.integrals.risch.self.newf->self.newf.xreplace({log(arg): self.t})
A:sympy.integrals.risch.exps->update_sets(exps, self.newf.atoms(exp), lambda i: i.exp.is_rational_function(*self.T) and i.exp.has(*self.T))
A:sympy.integrals.risch.pows->update_sets(pows, self.newf.atoms(Pow), lambda i: i.exp.is_rational_function(*self.T) and i.exp.has(*self.T))
A:sympy.integrals.risch.numpows->update_sets(numpows, set(pows), lambda i: not i.base.has(*self.T))
A:sympy.integrals.risch.sympows->update_sets(sympows, set(pows) - set(numpows), lambda i: i.base.is_rational_function(*self.T) and (not i.exp.is_Integer))
A:sympy.integrals.risch.logs->sorted(set(logs), key=default_sort_key)
A:sympy.integrals.risch.symlogs->update_sets(symlogs, atoms, lambda i: i.has(*self.T) and i.args[0].is_Pow and i.args[0].base.is_rational_function(*self.T) and (not i.args[0].exp.is_Integer))
A:sympy.integrals.risch.(exps, pows, numpows, sympows, log_new_extension)->self._rewrite_exps_pows(exps, pows, numpows, sympows, log_new_extension)
A:sympy.integrals.risch.(logs, symlogs)->self._rewrite_logs(logs, symlogs)
A:sympy.integrals.risch.exp_new_extension->self._exp_part(exps)
A:sympy.integrals.risch.log_new_extension->self._log_part([log(i.base)])
A:sympy.integrals.risch.(self.fa, self.fd)->frac_in(self.newf, self.t)
A:sympy.integrals.risch.new->exp(i.exp * log(i.base))
A:sympy.integrals.risch.(basea, based)->frac_in(i.base, self.t)
A:sympy.integrals.risch.A->is_deriv_k(arga, argd, self)
A:sympy.integrals.risch.newterm->exp(i.exp * (log(const) + u))
A:sympy.integrals.risch.atoms->self.newf.atoms(log)
A:sympy.integrals.risch.lbase->log(i.args[0].base)
A:sympy.integrals.risch.ip->integer_powers(expargs)
A:sympy.integrals.risch.(arga, argd)->frac_in(arg, self.t)
A:sympy.integrals.risch.rad->Mul(*[term ** (power / n) for (term, power) in ans])
A:sympy.integrals.risch.(darga, dargd)->darga.cancel(dargd, include=True)
A:sympy.integrals.risch.self.t->next(self.ts)
A:sympy.integrals.risch.i->NonElementaryIntegral(i.function.subs(DE.backsubs), i.limits)
A:sympy.integrals.risch.self.ts->numbered_symbols('t')
A:sympy.integrals.risch.s->list(zip(reversed(DE.T), reversed([f(DE.x) for f in DE.Tfuncs])))
A:sympy.integrals.risch.(s, g)->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t)).half_gcdex(b)
A:sympy.integrals.risch.(_, s)->list(zip(reversed(DE.T), reversed([f(DE.x) for f in DE.Tfuncs]))).div(b)
A:sympy.integrals.risch.t->(c - s * a).exquo(b)
A:sympy.integrals.risch.(fa, fd)->frac_in(i, DE.t)
A:sympy.integrals.risch.(pa, pd)->frac_in(p, t, cancel=True)
A:sympy.integrals.risch.d->pd.degree(t)
A:sympy.integrals.risch.one_t_part->one_t_part.replace(t, z).replace(t, z)
A:sympy.integrals.risch.t_part->t_part.to_field().exquo(pd).to_field().exquo(pd)
A:sympy.integrals.risch.r->Poly(r, z)
A:sympy.integrals.risch.pv->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t).as_expr()
A:sympy.integrals.risch.One->Poly(1, DE.t, domain=p.get_domain())
A:sympy.integrals.risch.Dp->derivation(p, DE, coefficientD=coefficientD)
A:sympy.integrals.risch.n->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t).exquo(s)
A:sympy.integrals.risch.h->Poly(dict(list(zip(h.monoms(), coeffs))), DE.t)
A:sympy.integrals.risch.g->gcd(d, H[-1]).as_poly()
A:sympy.integrals.risch.q_split->splitfactor(p.exquo(s), DE, coefficientD=coefficientD)
A:sympy.integrals.risch.p_sqf->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t).sqf_list_include()
A:sympy.integrals.risch.Si->Poly(Si, DE.t)
A:sympy.integrals.risch.pi->Poly(pi, DE.t)
A:sympy.integrals.risch.Ni->Poly(pi, DE.t).exquo(Si)
A:sympy.integrals.risch.l->Poly(1 / d.LC(), DE.t)
A:sympy.integrals.risch.(q, r)->polynomial_reduce(p, DE)
A:sympy.integrals.risch.(dn, ds)->splitfactor(d, DE)
A:sympy.integrals.risch.(b, c)->gcdex_diophantine(-ds_ddm_dm.as_poly(DE.t), dms.as_poly(DE.t), a.as_poly(DE.t))
A:sympy.integrals.risch.(fp, fs, fn)->canonical_representation(a, d, DE)
A:sympy.integrals.risch.ga->Poly(0, DE.t)
A:sympy.integrals.risch.gd->Poly(1, DE.t)
A:sympy.integrals.risch.dd->derivation(d, DE)
A:sympy.integrals.risch.dm->gcd(d.to_field(), dd.to_field()).as_poly(DE.t)
A:sympy.integrals.risch.(ds, _)->pd.degree(t).div(dm)
A:sympy.integrals.risch.ddm->derivation(dm, DE)
A:sympy.integrals.risch.dm2->gcd(dm.to_field(), ddm.to_field())
A:sympy.integrals.risch.(dms, _)->gcd(d.to_field(), dd.to_field()).as_poly(DE.t).div(dm2)
A:sympy.integrals.risch.ds_ddm->ds.mul(ddm)
A:sympy.integrals.risch.(ds_ddm_dm, _)->ds.mul(ddm).div(dm)
A:sympy.integrals.risch.db->derivation(b, DE).as_poly(DE.t)
A:sympy.integrals.risch.(ds_dms, _)->ds.div(dms)
A:sympy.integrals.risch.(ga, gd)->Poly(0, DE.t).cancel(gd, include=True)
A:sympy.integrals.risch.(r, d)->Poly(r, z).cancel(ds, include=True)
A:sympy.integrals.risch.(rra, rrd)->rra.cancel(rrd, include=True)
A:sympy.integrals.risch.q->Poly(0, DE.t)
A:sympy.integrals.risch.q0->Poly(DE.t ** m, DE.t).mul(Poly(p.as_poly(DE.t).LC() / (m * DE.d.LC()), DE.t))
A:sympy.integrals.risch.Z->_symbols('z', n)
A:sympy.integrals.risch.z->Symbol('z')
A:sympy.integrals.risch.delta_a->Poly(0, DE.t)
A:sympy.integrals.risch.delta_d->Poly(1, DE.t)
A:sympy.integrals.risch.E->pd.degree(t).quo(F ** n)
A:sympy.integrals.risch.dF->derivation(F, DE)
A:sympy.integrals.risch.(B, _)->gcdex_diophantine(E, F, Poly(1, DE.t))
A:sympy.integrals.risch.(C, _)->gcdex_diophantine(dF, F, Poly(1, DE.t))
A:sympy.integrals.risch.F_store->derivation(F_store, DE)
A:sympy.integrals.risch.DE_new->DifferentialExtension(extension={'D': DE_D_list})
A:sympy.integrals.risch.Q->Q.subs(Z[i], V[i]).subs(Z[i], V[i])
A:sympy.integrals.risch.(Ff, _)->F.div(gcd(F, Q))
A:sympy.integrals.risch.(F_stara, F_stard)->frac_in(Ff, DE.t)
A:sympy.integrals.risch.H->(QBC * F_stard).rem(F_stara)
A:sympy.integrals.risch.alphas->real_roots(F_stara)
A:sympy.integrals.risch.(a, d)->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t)).cancel(d, include=True)
A:sympy.integrals.risch.(_, r)->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t)).div(d)
A:sympy.integrals.risch.(Np, Sp)->splitfactor_sqf(r, DE, coefficientD=True, z=z)
A:sympy.integrals.risch.(delta_a, delta_d, H)->laurent_series(r, d, s, j, DE)
A:sympy.integrals.risch.(_, a)->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t)).div(d)
A:sympy.integrals.risch.pz->Poly(z, DE.t)
A:sympy.integrals.risch.Dd->derivation(d, DE)
A:sympy.integrals.risch.(r, _)->pd.degree(t).resultant(q, includePRS=True)
A:sympy.integrals.risch.(r, R)->Poly(0, DE.t).resultant(d, includePRS=True)
A:sympy.integrals.risch.h_lc->Poly(h.as_poly(DE.t).LC(), DE.t, field=True, expand=False)
A:sympy.integrals.risch.h_lc_sqf->Poly(h.as_poly(DE.t).LC(), DE.t, field=True, expand=False).sqf_list_include(all=True)
A:sympy.integrals.risch.Zero->Poly(0, DE.t)
A:sympy.integrals.risch.(Dta, Dtb)->frac_in(DE.d, DE.T[DE.level - 1])
A:sympy.integrals.risch.(aa, ad)->aa.cancel(ad, include=True)
A:sympy.integrals.risch.rv->limited_integrate(aa, ad, [(Dta, Dtb)], DE)
A:sympy.integrals.risch.m->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t).degree(DE.t)
A:sympy.integrals.risch.(g1, h, r)->hermite_reduce(a, d, DE)
A:sympy.integrals.risch.(g2, b)->residue_reduce(h[0], h[1], DE, z=z)
A:sympy.integrals.risch.p->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t)
A:sympy.integrals.risch.(q, i, b)->integrate_primitive_polynomial(p, DE)
A:sympy.integrals.risch.dtt->DE.d.exquo(Poly(DE.t, DE.t))
A:sympy.integrals.risch.qa->Poly(0, DE.t)
A:sympy.integrals.risch.qd->Poly(1, DE.t)
A:sympy.integrals.risch.(iDta, iDtd)->frac_in(iDt, DE.t, field=True)
A:sympy.integrals.risch.(va, vd)->frac_in((va, vd), t1, cancel=True)
A:sympy.integrals.risch.pp->as_poly_1t(p, DE.t, z)
A:sympy.integrals.risch.(qa, qd, b)->integrate_hyperexponential_polynomial(pp, DE, z)
A:sympy.integrals.risch.qas->Poly(0, DE.t).as_expr().subs(s)
A:sympy.integrals.risch.qds->Poly(1, DE.t).as_expr().subs(s)
A:sympy.integrals.risch.c->Poly(r.nth(1) / (2 * a.as_expr()), DE.t)
A:sympy.integrals.risch.(q1, q2)->polynomial_reduce(p, DE)
A:sympy.integrals.risch.f->S(f)
A:sympy.integrals.risch.(ans, i, b)->integrate_primitive(fa, fd, DE)
A:sympy.integrals.risch.ans->integrate(fa.as_expr() / fd.as_expr(), DE.x, risch=False)
A:sympy.integrals.risch.result->result.subs(DE.backsubs).subs(DE.backsubs)
sympy.integrals.risch.DecrementLevel(self,DE)
sympy.integrals.risch.DecrementLevel.__enter__(self)
sympy.integrals.risch.DecrementLevel.__exit__(self,exc_type,exc_value,traceback)
sympy.integrals.risch.DifferentialExtension(self,f=None,x=None,handle_first='log',dummy=False,extension=None,rewrite_complex=None)
sympy.integrals.risch.DifferentialExtension.__eq__(self,other)
sympy.integrals.risch.DifferentialExtension.__getattr__(self,attr)
sympy.integrals.risch.DifferentialExtension.__repr__(self)
sympy.integrals.risch.DifferentialExtension.__str__(self)
sympy.integrals.risch.DifferentialExtension._auto_attrs(self)
sympy.integrals.risch.DifferentialExtension._exp_part(self,exps)
sympy.integrals.risch.DifferentialExtension._important_attrs(self)
sympy.integrals.risch.DifferentialExtension._log_part(self,logs)
sympy.integrals.risch.DifferentialExtension._rewrite_exps_pows(self,exps,pows,numpows,sympows,log_new_extension)
sympy.integrals.risch.DifferentialExtension._rewrite_logs(self,logs,symlogs)
sympy.integrals.risch.DifferentialExtension.decrement_level(self)
sympy.integrals.risch.DifferentialExtension.increment_level(self)
sympy.integrals.risch.DifferentialExtension.indices(self,extension)
sympy.integrals.risch.DifferentialExtension.reset(self)
sympy.integrals.risch.NonElementaryIntegral(Integral)
sympy.integrals.risch.NonElementaryIntegralException(Exception)
sympy.integrals.risch.as_poly_1t(p,t,z)
sympy.integrals.risch.canonical_representation(a,d,DE)
sympy.integrals.risch.derivation(p,DE,coefficientD=False,basic=False)
sympy.integrals.risch.frac_in(f,t,*,cancel=False,**kwargs)
sympy.integrals.risch.gcdex_diophantine(a,b,c)
sympy.integrals.risch.get_case(d,t)
sympy.integrals.risch.hermite_reduce(a,d,DE)
sympy.integrals.risch.integer_powers(exprs)
sympy.integrals.risch.integrate_hyperexponential(a,d,DE,z=None,conds='piecewise')
sympy.integrals.risch.integrate_hyperexponential_polynomial(p,DE,z)
sympy.integrals.risch.integrate_hypertangent_polynomial(p,DE)
sympy.integrals.risch.integrate_nonlinear_no_specials(a,d,DE,z=None)
sympy.integrals.risch.integrate_primitive(a,d,DE,z=None)
sympy.integrals.risch.integrate_primitive_polynomial(p,DE)
sympy.integrals.risch.laurent_series(a,d,F,n,DE)
sympy.integrals.risch.polynomial_reduce(p,DE)
sympy.integrals.risch.recognize_derivative(a,d,DE,z=None)
sympy.integrals.risch.recognize_log_derivative(a,d,DE,z=None)
sympy.integrals.risch.residue_reduce(a,d,DE,z=None,invert=True)
sympy.integrals.risch.residue_reduce_derivation(H,DE,z)
sympy.integrals.risch.residue_reduce_to_basic(H,DE,z)
sympy.integrals.risch.risch_integrate(f,x,extension=None,handle_first='log',separate_integral=False,rewrite_complex=None,conds='piecewise')
sympy.integrals.risch.splitfactor(p,DE,coefficientD=False,z=None)
sympy.integrals.risch.splitfactor_sqf(p,DE,coefficientD=False,z=None,basic=False)
sympy.integrals.risch.update_sets(seq,atoms,func)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_failing_integrals.py----------------------------------------
A:sympy.integrals.tests.test_failing_integrals.i->integrate(log(1 / x) / (1 - x), (x, 0, 1))
A:sympy.integrals.tests.test_failing_integrals.f->Piecewise((0, t - 478.515625 * pi < 0), (13.2075145209219 * pi / (0.000871222 * t + 0.995) ** 2, t - 478.515625 * pi >= 0))
A:sympy.integrals.tests.test_failing_integrals.a->symbols('a', positive=True)
sympy.integrals.tests.test_failing_integrals.test_integrate_DiracDelta_fails()
sympy.integrals.tests.test_failing_integrals.test_integrate_Piecewise_rational_over_reals()
sympy.integrals.tests.test_failing_integrals.test_issue_10584()
sympy.integrals.tests.test_failing_integrals.test_issue_11254c()
sympy.integrals.tests.test_failing_integrals.test_issue_11813()
sympy.integrals.tests.test_failing_integrals.test_issue_11845a()
sympy.integrals.tests.test_failing_integrals.test_issue_11845b()
sympy.integrals.tests.test_failing_integrals.test_issue_13792()
sympy.integrals.tests.test_failing_integrals.test_issue_14074()
sympy.integrals.tests.test_failing_integrals.test_issue_14078b()
sympy.integrals.tests.test_failing_integrals.test_issue_14398()
sympy.integrals.tests.test_failing_integrals.test_issue_14709a()
sympy.integrals.tests.test_failing_integrals.test_issue_14716()
sympy.integrals.tests.test_failing_integrals.test_issue_15227()
sympy.integrals.tests.test_failing_integrals.test_issue_15925a()
sympy.integrals.tests.test_failing_integrals.test_issue_15925b()
sympy.integrals.tests.test_failing_integrals.test_issue_15925b_manual()
sympy.integrals.tests.test_failing_integrals.test_issue_16046()
sympy.integrals.tests.test_failing_integrals.test_issue_16396a()
sympy.integrals.tests.test_failing_integrals.test_issue_16396b()
sympy.integrals.tests.test_failing_integrals.test_issue_1796a()
sympy.integrals.tests.test_failing_integrals.test_issue_20370()
sympy.integrals.tests.test_failing_integrals.test_issue_3880()
sympy.integrals.tests.test_failing_integrals.test_issue_4212()
sympy.integrals.tests.test_failing_integrals.test_issue_4311_slow()
sympy.integrals.tests.test_failing_integrals.test_issue_4511()
sympy.integrals.tests.test_failing_integrals.test_issue_4525()
sympy.integrals.tests.test_failing_integrals.test_issue_4540()
sympy.integrals.tests.test_failing_integrals.test_issue_4891()
sympy.integrals.tests.test_failing_integrals.test_issue_4895b()
sympy.integrals.tests.test_failing_integrals.test_issue_4895c()
sympy.integrals.tests.test_failing_integrals.test_issue_4895d()
sympy.integrals.tests.test_failing_integrals.test_issue_4941()
sympy.integrals.tests.test_failing_integrals.test_issue_4992()
sympy.integrals.tests.test_failing_integrals.test_issue_7109()
sympy.integrals.tests.test_failing_integrals.test_issue_7147()
sympy.integrals.tests.test_failing_integrals.test_issue_9101()
sympy.integrals.tests.test_failing_integrals.test_polylog()
sympy.integrals.tests.test_failing_integrals.test_polylog_manual()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_singularityfunctions.py----------------------------------------
A:sympy.integrals.tests.test_singularityfunctions.(x, a, n, y)->symbols('x a n y')
A:sympy.integrals.tests.test_singularityfunctions.f->Function('f')
sympy.integrals.tests.test_singularityfunctions.test_singularityintegrate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_integrals.py----------------------------------------
A:sympy.integrals.tests.test_integrals.(x, y, z, a, b, c, d, e, s, t, x_1, x_2)->symbols('x y z a b c d e s t x_1 x_2')
A:sympy.integrals.tests.test_integrals.n->Symbol('n')
A:sympy.integrals.tests.test_integrals.f->log(x + 4 * sinh(4))
A:sympy.integrals.tests.test_integrals.p->Poly(x + x ** 2 * y + y ** 3, x, y)
A:sympy.integrals.tests.test_integrals.s1->Integral(n, n)
A:sympy.integrals.tests.test_integrals.s2->Integral(n, (n,))
A:sympy.integrals.tests.test_integrals.s3->Integral(Sum(x, (x, 1, y)))
A:sympy.integrals.tests.test_integrals.s4->Integral(n, Tuple(n))
A:sympy.integrals.tests.test_integrals.s5->Integral(n, (n, Interval(1, 2)))
A:sympy.integrals.tests.test_integrals.s6->Integral(n, n > 10)
A:sympy.integrals.tests.test_integrals.s7->Integral(n, (n > 2) & (n < 5))
A:sympy.integrals.tests.test_integrals.t->Symbol('t')
A:sympy.integrals.tests.test_integrals.(A, B)->symbols('A B', commutative=False)
A:sympy.integrals.tests.test_integrals.x->Symbol('x', real=True, nonzero=True)
A:sympy.integrals.tests.test_integrals.b->Float('2.5000000000000004e-7', precision=53)
A:sympy.integrals.tests.test_integrals.c->Symbol('c', nonzero=True)
A:sympy.integrals.tests.test_integrals.qx->integrate(p, x)
A:sympy.integrals.tests.test_integrals.qy->integrate(p, y)
A:sympy.integrals.tests.test_integrals.Qx->integrate(p, (x, 0, 1))
A:sympy.integrals.tests.test_integrals.Qy->integrate(p, (y, 0, pi))
A:sympy.integrals.tests.test_integrals.y->Symbol('y')
A:sympy.integrals.tests.test_integrals.fid->diff(integrate(f, x), x)
A:sympy.integrals.tests.test_integrals.ans->integrate(exp(-(1 + I) * x), (x, 0, oo))
A:sympy.integrals.tests.test_integrals.s->symbols('s', positive=True)
A:sympy.integrals.tests.test_integrals.pzgx->integrate(pz, (z, x, oo))
A:sympy.integrals.tests.test_integrals.a->Symbol('a')
A:sympy.integrals.tests.test_integrals.r->Piecewise((b * I * exp(-a * I * pi * t * y) * exp(-a * I * pi * x * z) / (pi * x), Ne(1.0 * pi * x * exp(a * I * pi * t * y), 0)), (z * exp(-a * I * pi * t * y), True))
A:sympy.integrals.tests.test_integrals.M->Matrix(2, 2, lambda i, j: (i + j + 1) * sin((i + j + 1) * x))
A:sympy.integrals.tests.test_integrals._3->S(3)
A:sympy.integrals.tests.test_integrals.i->integrate((3 * x ** 3 - x ** 2 + 2 * x - 4) / sqrt(x ** 2 - 3 * x + 2), (x, 0, 1))
A:sympy.integrals.tests.test_integrals.am->Symbol('a', negative=True)
A:sympy.integrals.tests.test_integrals.bp->Symbol('b', positive=True)
A:sympy.integrals.tests.test_integrals.gauss->Integral(exp(-x ** 2), (x, -oo, oo))
A:sympy.integrals.tests.test_integrals.res->integrate(exp(-x ** 2 * cos(2 * t)) * cos(x ** 2 * sin(2 * t)), (x, 0, oo))
A:sympy.integrals.tests.test_integrals.int1->integrate(Max(c, x) * exp(-x ** 2), (x, -oo, oo))
A:sympy.integrals.tests.test_integrals.int2->integrate(c * exp(-x ** 2), (x, -oo, c))
A:sympy.integrals.tests.test_integrals.int3->integrate(x * exp(-x ** 2), (x, c, oo))
A:sympy.integrals.tests.test_integrals.(t, s)->symbols('t s', real=True)
A:sympy.integrals.tests.test_integrals.e->integrate(f, (x, 0.1, 0.2))
A:sympy.integrals.tests.test_integrals.conv->Integral(f(y) * f(y), (y, -oo, oo), (t, x, 1))
A:sympy.integrals.tests.test_integrals.(a, b)->symbols('a b')
A:sympy.integrals.tests.test_integrals.z->Symbol('z')
A:sympy.integrals.tests.test_integrals.R->Symbol('R', positive=True)
A:sympy.integrals.tests.test_integrals.(k, m)->symbols('k m', integer=True)
A:sympy.integrals.tests.test_integrals.ypos->Symbol('y', positive=True)
A:sympy.integrals.tests.test_integrals.(a, b, c, d)->symbols('a:d', positive=True)
A:sympy.integrals.tests.test_integrals.(a, d)->symbols('a d', positive=True)
A:sympy.integrals.tests.test_integrals.(A, z)->symbols('A z')
A:sympy.integrals.tests.test_integrals.g->integrate(f, x).diff(x)
A:sympy.integrals.tests.test_integrals.(R, b, h)->symbols('R b h')
A:sympy.integrals.tests.test_integrals.x_max->Symbol('x_max')
A:sympy.integrals.tests.test_integrals.integral_f->NonElementaryIntegral(f, (z, 2, 3))
A:sympy.integrals.tests.test_integrals.(i, L, a, b)->symbols('i L a b')
A:sympy.integrals.tests.test_integrals.integrand->(cos(pi * i * x / L) ** 2 / (a + b * x)).rewrite(exp)
A:sympy.integrals.tests.test_integrals.(a, b, c, t)->symbols('a b c t')
A:sympy.integrals.tests.test_integrals.vt->Matrix([a * t, b, c])
A:sympy.integrals.tests.test_integrals.(x, y)->symbols('x y', real=True)
A:sympy.integrals.tests.test_integrals.omega->IndexedBase('omega')
A:sympy.integrals.tests.test_integrals.(m, p)->symbols('m p', cls=Idx)
A:sympy.integrals.tests.test_integrals.(x, a, b)->symbols('x a b', real=True)
A:sympy.integrals.tests.test_integrals.definite->integrate(exp(Abs(x - 2)), (x, a, b))
A:sympy.integrals.tests.test_integrals.indefinite->integrate(exp(Abs(x - 2)), x)
A:sympy.integrals.tests.test_integrals.F->Piecewise((zoo * (-log(tan(x / 2) - 1) + log(tan(x / 2) + 1)), Eq(a, 0) & Eq(b, 0)), (log(tan(x / 2)) / a, Eq(b, 0)), (-I / (-I * b * sin(x) + b * cos(x)), Eq(a, -I * b)), (I / (I * b * sin(x) + b * cos(x)), Eq(a, I * b)), (Fpos, True))
A:sympy.integrals.tests.test_integrals.N->Symbol('N', integer=True)
A:sympy.integrals.tests.test_integrals.K->Symbol('K', positive=True)
A:sympy.integrals.tests.test_integrals.m->Symbol('m', real=True)
A:sympy.integrals.tests.test_integrals.h->Symbol('h', positive=True)
A:sympy.integrals.tests.test_integrals.solution->integrate(integrand, s)
A:sympy.integrals.tests.test_integrals.got->integrate(sin(x ** n), x)
A:sympy.integrals.tests.test_integrals._x->Symbol('x', zero=False)
A:sympy.integrals.tests.test_integrals.w->Symbol('w')
A:sympy.integrals.tests.test_integrals.C->Symbol('C')
A:sympy.integrals.tests.test_integrals.(x, n, M)->symbols('x n M')
A:sympy.integrals.tests.test_integrals.L->Symbol('L')
A:sympy.integrals.tests.test_integrals.r0->Symbol('r0')
A:sympy.integrals.tests.test_integrals.R0->Symbol('R0')
A:sympy.integrals.tests.test_integrals.theta->symbols('theta')
A:sympy.integrals.tests.test_integrals.xr->symbols('xr', real=True)
A:sympy.integrals.tests.test_integrals.res_real->integrate(expr.subs(x, xr), xr, manual=True).subs(xr, x)
A:sympy.integrals.tests.test_integrals.(ap, bp)->symbols('a, b', positive=True)
sympy.integrals.tests.test_integrals.NS(e,n=15,**options)
sympy.integrals.tests.test_integrals.diff_test(i)
sympy.integrals.tests.test_integrals.test_as_sum_left()
sympy.integrals.tests.test_integrals.test_as_sum_midpoint1()
sympy.integrals.tests.test_integrals.test_as_sum_midpoint2()
sympy.integrals.tests.test_integrals.test_as_sum_raises()
sympy.integrals.tests.test_integrals.test_as_sum_right()
sympy.integrals.tests.test_integrals.test_as_sum_trapezoid()
sympy.integrals.tests.test_integrals.test_atom_bug()
sympy.integrals.tests.test_integrals.test_basics()
sympy.integrals.tests.test_integrals.test_basics_multiple()
sympy.integrals.tests.test_integrals.test_conjugate_transpose()
sympy.integrals.tests.test_integrals.test_constructor()
sympy.integrals.tests.test_integrals.test_diff_wrt()
sympy.integrals.tests.test_integrals.test_doit_integrals()
sympy.integrals.tests.test_integrals.test_double_previously_failing_integrals()
sympy.integrals.tests.test_integrals.test_evalf_integrals()
sympy.integrals.tests.test_integrals.test_evalf_issue_939()
sympy.integrals.tests.test_integrals.test_exp_substitution()
sympy.integrals.tests.test_integrals.test_expand()
sympy.integrals.tests.test_integrals.test_expand_integral()
sympy.integrals.tests.test_integrals.test_free_symbols()
sympy.integrals.tests.test_integrals.test_heurisch_option()
sympy.integrals.tests.test_integrals.test_hyperbolic()
sympy.integrals.tests.test_integrals.test_improper_integral()
sympy.integrals.tests.test_integrals.test_integral_reconstruct()
sympy.integrals.tests.test_integrals.test_integrate_Abs_sign()
sympy.integrals.tests.test_integrals.test_integrate_DiracDelta()
sympy.integrals.tests.test_integrals.test_integrate_SingularityFunction()
sympy.integrals.tests.test_integrals.test_integrate_derivatives()
sympy.integrals.tests.test_integrals.test_integrate_functions()
sympy.integrals.tests.test_integrals.test_integrate_linearterm_pow()
sympy.integrals.tests.test_integrals.test_integrate_max_min()
sympy.integrals.tests.test_integrals.test_integrate_omit_var()
sympy.integrals.tests.test_integrals.test_integrate_poly()
sympy.integrals.tests.test_integrals.test_integrate_poly_accurately()
sympy.integrals.tests.test_integrals.test_integrate_poly_definite()
sympy.integrals.tests.test_integrals.test_integrate_returns_piecewise()
sympy.integrals.tests.test_integrals.test_integrate_series()
sympy.integrals.tests.test_integrals.test_integrate_units()
sympy.integrals.tests.test_integrals.test_integrate_with_complex_constants()
sympy.integrals.tests.test_integrals.test_integration()
sympy.integrals.tests.test_integrals.test_integration_variable()
sympy.integrals.tests.test_integrals.test_is_number()
sympy.integrals.tests.test_integrals.test_is_zero()
sympy.integrals.tests.test_integrals.test_issue_10567()
sympy.integrals.tests.test_integrals.test_issue_11254a()
sympy.integrals.tests.test_integrals.test_issue_11254b()
sympy.integrals.tests.test_integrals.test_issue_11254d()
sympy.integrals.tests.test_integrals.test_issue_11742()
sympy.integrals.tests.test_integrals.test_issue_11856()
sympy.integrals.tests.test_integrals.test_issue_11876()
sympy.integrals.tests.test_integrals.test_issue_12081()
sympy.integrals.tests.test_integrals.test_issue_12645()
sympy.integrals.tests.test_integrals.test_issue_12677()
sympy.integrals.tests.test_integrals.test_issue_13112()
sympy.integrals.tests.test_integrals.test_issue_13733()
sympy.integrals.tests.test_integrals.test_issue_13749()
sympy.integrals.tests.test_integrals.test_issue_14027()
sympy.integrals.tests.test_integrals.test_issue_14064()
sympy.integrals.tests.test_integrals.test_issue_14078()
sympy.integrals.tests.test_integrals.test_issue_14096()
sympy.integrals.tests.test_integrals.test_issue_14144()
sympy.integrals.tests.test_integrals.test_issue_14241()
sympy.integrals.tests.test_integrals.test_issue_14375()
sympy.integrals.tests.test_integrals.test_issue_14437()
sympy.integrals.tests.test_integrals.test_issue_14470()
sympy.integrals.tests.test_integrals.test_issue_14709b()
sympy.integrals.tests.test_integrals.test_issue_14782()
sympy.integrals.tests.test_integrals.test_issue_14782_slow()
sympy.integrals.tests.test_integrals.test_issue_14877()
sympy.integrals.tests.test_integrals.test_issue_15124()
sympy.integrals.tests.test_integrals.test_issue_15218()
sympy.integrals.tests.test_integrals.test_issue_15285()
sympy.integrals.tests.test_integrals.test_issue_15292()
sympy.integrals.tests.test_integrals.test_issue_15431()
sympy.integrals.tests.test_integrals.test_issue_15432()
sympy.integrals.tests.test_integrals.test_issue_15457()
sympy.integrals.tests.test_integrals.test_issue_15494()
sympy.integrals.tests.test_integrals.test_issue_15509()
sympy.integrals.tests.test_integrals.test_issue_15640_log_substitutions()
sympy.integrals.tests.test_integrals.test_issue_15810()
sympy.integrals.tests.test_integrals.test_issue_17473()
sympy.integrals.tests.test_integrals.test_issue_17671()
sympy.integrals.tests.test_integrals.test_issue_17841()
sympy.integrals.tests.test_integrals.test_issue_18038()
sympy.integrals.tests.test_integrals.test_issue_18133()
sympy.integrals.tests.test_integrals.test_issue_18153()
sympy.integrals.tests.test_integrals.test_issue_18527()
sympy.integrals.tests.test_integrals.test_issue_1888()
sympy.integrals.tests.test_integrals.test_issue_21024()
sympy.integrals.tests.test_integrals.test_issue_21034()
sympy.integrals.tests.test_integrals.test_issue_21671()
sympy.integrals.tests.test_integrals.test_issue_21721()
sympy.integrals.tests.test_integrals.test_issue_21741()
sympy.integrals.tests.test_integrals.test_issue_21831()
sympy.integrals.tests.test_integrals.test_issue_22033_integral()
sympy.integrals.tests.test_integrals.test_issue_22863()
sympy.integrals.tests.test_integrals.test_issue_23566()
sympy.integrals.tests.test_integrals.test_issue_23704()
sympy.integrals.tests.test_integrals.test_issue_23718()
sympy.integrals.tests.test_integrals.test_issue_2708()
sympy.integrals.tests.test_integrals.test_issue_2884()
sympy.integrals.tests.test_integrals.test_issue_2975()
sympy.integrals.tests.test_integrals.test_issue_3532()
sympy.integrals.tests.test_integrals.test_issue_3558()
sympy.integrals.tests.test_integrals.test_issue_3560()
sympy.integrals.tests.test_integrals.test_issue_3618()
sympy.integrals.tests.test_integrals.test_issue_3623()
sympy.integrals.tests.test_integrals.test_issue_3635()
sympy.integrals.tests.test_integrals.test_issue_3664()
sympy.integrals.tests.test_integrals.test_issue_3679()
sympy.integrals.tests.test_integrals.test_issue_3686()
sympy.integrals.tests.test_integrals.test_issue_3740()
sympy.integrals.tests.test_integrals.test_issue_3788()
sympy.integrals.tests.test_integrals.test_issue_3940()
sympy.integrals.tests.test_integrals.test_issue_3952()
sympy.integrals.tests.test_integrals.test_issue_4052()
sympy.integrals.tests.test_integrals.test_issue_4100()
sympy.integrals.tests.test_integrals.test_issue_4153()
sympy.integrals.tests.test_integrals.test_issue_4187()
sympy.integrals.tests.test_integrals.test_issue_4199()
sympy.integrals.tests.test_integrals.test_issue_4215()
sympy.integrals.tests.test_integrals.test_issue_4231()
sympy.integrals.tests.test_integrals.test_issue_4234()
sympy.integrals.tests.test_integrals.test_issue_4311_fast()
sympy.integrals.tests.test_integrals.test_issue_4326()
sympy.integrals.tests.test_integrals.test_issue_4376()
sympy.integrals.tests.test_integrals.test_issue_4400()
sympy.integrals.tests.test_integrals.test_issue_4403()
sympy.integrals.tests.test_integrals.test_issue_4403_2()
sympy.integrals.tests.test_integrals.test_issue_4422()
sympy.integrals.tests.test_integrals.test_issue_4487()
sympy.integrals.tests.test_integrals.test_issue_4492()
sympy.integrals.tests.test_integrals.test_issue_4493()
sympy.integrals.tests.test_integrals.test_issue_4514()
sympy.integrals.tests.test_integrals.test_issue_4516()
sympy.integrals.tests.test_integrals.test_issue_4517()
sympy.integrals.tests.test_integrals.test_issue_4527()
sympy.integrals.tests.test_integrals.test_issue_4551()
sympy.integrals.tests.test_integrals.test_issue_4665()
sympy.integrals.tests.test_integrals.test_issue_4703()
sympy.integrals.tests.test_integrals.test_issue_4737()
sympy.integrals.tests.test_integrals.test_issue_4803()
sympy.integrals.tests.test_integrals.test_issue_4884()
sympy.integrals.tests.test_integrals.test_issue_4890()
sympy.integrals.tests.test_integrals.test_issue_4892a()
sympy.integrals.tests.test_integrals.test_issue_4892b()
sympy.integrals.tests.test_integrals.test_issue_4950()
sympy.integrals.tests.test_integrals.test_issue_4968()
sympy.integrals.tests.test_integrals.test_issue_4992()
sympy.integrals.tests.test_integrals.test_issue_5167()
sympy.integrals.tests.test_integrals.test_issue_5178()
sympy.integrals.tests.test_integrals.test_issue_5413()
sympy.integrals.tests.test_integrals.test_issue_5547()
sympy.integrals.tests.test_integrals.test_issue_6253()
sympy.integrals.tests.test_integrals.test_issue_6828()
sympy.integrals.tests.test_integrals.test_issue_7130()
sympy.integrals.tests.test_integrals.test_issue_7264()
sympy.integrals.tests.test_integrals.test_issue_7450()
sympy.integrals.tests.test_integrals.test_issue_7827()
sympy.integrals.tests.test_integrals.test_issue_8170()
sympy.integrals.tests.test_integrals.test_issue_8368i()
sympy.integrals.tests.test_integrals.test_issue_8440_14040()
sympy.integrals.tests.test_integrals.test_issue_8614()
sympy.integrals.tests.test_integrals.test_issue_8623()
sympy.integrals.tests.test_integrals.test_issue_8901()
sympy.integrals.tests.test_integrals.test_issue_8945()
sympy.integrals.tests.test_integrals.test_issue_9569()
sympy.integrals.tests.test_integrals.test_issue_9723()
sympy.integrals.tests.test_integrals.test_li_integral()
sympy.integrals.tests.test_integrals.test_limit_bug()
sympy.integrals.tests.test_integrals.test_log_polylog()
sympy.integrals.tests.test_integrals.test_manual_option()
sympy.integrals.tests.test_integrals.test_matrices()
sympy.integrals.tests.test_integrals.test_meijerg_option()
sympy.integrals.tests.test_integrals.test_mul_pow_derivative()
sympy.integrals.tests.test_integrals.test_multiple_integration()
sympy.integrals.tests.test_integrals.test_nested_doit()
sympy.integrals.tests.test_integrals.test_nested_pow()
sympy.integrals.tests.test_integrals.test_poly_deprecated()
sympy.integrals.tests.test_integrals.test_powers()
sympy.integrals.tests.test_integrals.test_pr_23583()
sympy.integrals.tests.test_integrals.test_principal_value()
sympy.integrals.tests.test_integrals.test_risch_option()
sympy.integrals.tests.test_integrals.test_series()
sympy.integrals.tests.test_integrals.test_singularities()
sympy.integrals.tests.test_integrals.test_sqrt_quadratic()
sympy.integrals.tests.test_integrals.test_subs1()
sympy.integrals.tests.test_integrals.test_subs2()
sympy.integrals.tests.test_integrals.test_subs3()
sympy.integrals.tests.test_integrals.test_subs4()
sympy.integrals.tests.test_integrals.test_subs5()
sympy.integrals.tests.test_integrals.test_subs6()
sympy.integrals.tests.test_integrals.test_subs7()
sympy.integrals.tests.test_integrals.test_transcendental_functions()
sympy.integrals.tests.test_integrals.test_transform()
sympy.integrals.tests.test_integrals.test_trig_nonelementary_integrals()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_rde.py----------------------------------------
A:sympy.integrals.tests.test_rde.(t0, t1, t2, k)->symbols('t:3 k')
A:sympy.integrals.tests.test_rde.a->Poly((1 + x) * t ** 5 + 4 * t ** 4 + (-1 - 3 * x) * t ** 3 - 4 * t ** 2 + (-2 + 2 * x) * t, t)
A:sympy.integrals.tests.test_rde.b->Poly((t ** 2 + 1) ** 3 * t, t)
A:sympy.integrals.tests.test_rde.c->Poly((t ** 2 + 1) ** 6 * t, t)
A:sympy.integrals.tests.test_rde.d->Poly(t ** 4 - 3 * t ** 2 + 2, t)
A:sympy.integrals.tests.test_rde.e->Poly((t ** 2 + 1) ** 100 * t ** 37, t)
A:sympy.integrals.tests.test_rde.p1->Poly(t, t)
A:sympy.integrals.tests.test_rde.p2->Poly(1 + t ** 2, t)
A:sympy.integrals.tests.test_rde.DE->DifferentialExtension(extension={'D': [Poly(1, x), Poly(t, t)]})
A:sympy.integrals.tests.test_rde.r->weak_normalizer(Poly(1 + t ** 2), Poly(t, t), DE, z)
sympy.integrals.tests.test_rde.test_bound_degree()
sympy.integrals.tests.test_rde.test_bound_degree_fail()
sympy.integrals.tests.test_rde.test_normal_denom()
sympy.integrals.tests.test_rde.test_order_at()
sympy.integrals.tests.test_rde.test_rischDE()
sympy.integrals.tests.test_rde.test_solve_poly_rde_cancel()
sympy.integrals.tests.test_rde.test_solve_poly_rde_no_cancel()
sympy.integrals.tests.test_rde.test_spde()
sympy.integrals.tests.test_rde.test_special_denom()
sympy.integrals.tests.test_rde.test_weak_normalizer()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_rationaltools.py----------------------------------------
A:sympy.integrals.tests.test_rationaltools.f->S(36)
A:sympy.integrals.tests.test_rationaltools.ans->atan(x)
A:sympy.integrals.tests.test_rationaltools.d->Dummy()
A:sympy.integrals.tests.test_rationaltools.(a, b, c)->symbols('a,b,c', positive=True)
A:sympy.integrals.tests.test_rationaltools.u->symbols('u')
A:sympy.integrals.tests.test_rationaltools.(a, b, c, x)->symbols('a b c x', positive=True)
A:sympy.integrals.tests.test_rationaltools.a->symbols('a', nonzero=True)
A:sympy.integrals.tests.test_rationaltools.(k, a0)->symbols('k a0', real=True)
sympy.integrals.tests.test_rationaltools.test_issue_10488()
sympy.integrals.tests.test_rationaltools.test_issue_5249()
sympy.integrals.tests.test_rationaltools.test_issue_5414()
sympy.integrals.tests.test_rationaltools.test_issue_5817()
sympy.integrals.tests.test_rationaltools.test_issue_5907()
sympy.integrals.tests.test_rationaltools.test_issue_5981()
sympy.integrals.tests.test_rationaltools.test_issue_6308()
sympy.integrals.tests.test_rationaltools.test_issues_8246_12050_13501_14080()
sympy.integrals.tests.test_rationaltools.test_log_to_atan()
sympy.integrals.tests.test_rationaltools.test_ratint()
sympy.integrals.tests.test_rationaltools.test_ratint_logpart()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_intpoly.py----------------------------------------
A:sympy.integrals.tests.test_intpoly.l1->Segment2D(Point(0, 3), Point(1, 1))
A:sympy.integrals.tests.test_intpoly.l2->Segment2D(Point(S(3) / 2, 0), Point(S(3) / 2, 3))
A:sympy.integrals.tests.test_intpoly.l3->Segment2D(Point(0, S(3) / 2), Point(3, S(3) / 2))
A:sympy.integrals.tests.test_intpoly.l4->Segment2D(Point(0, 2), Point(2, 0))
A:sympy.integrals.tests.test_intpoly.l5->Segment2D(Point(0, 2), Point(1, 1))
A:sympy.integrals.tests.test_intpoly.l6->Segment2D(Point(2, 0), Point(1, 1))
A:sympy.integrals.tests.test_intpoly.hexagon->Polygon(Point(0, 0), Point(-sqrt(3) / 2, S.Half), Point(-sqrt(3) / 2, S(3) / 2), Point(0, 2), Point(sqrt(3) / 2, S(3) / 2), Point(sqrt(3) / 2, S.Half))
A:sympy.integrals.tests.test_intpoly.fig1->Polygon(Point(1.22, -0.827), Point(-1.49, -4.503), Point(-3.766, -1.622), Point(-4.24, -0.091), Point(-3.16, 4), Point(-0.981, 4.447), Point(0.132, 4.027))
A:sympy.integrals.tests.test_intpoly.fig2->Polygon(Point(4.561, 2.317), Point(1.491, -1.315), Point(-3.31, -3.164), Point(-4.845, -3.11), Point(-4.569, 1.867))
A:sympy.integrals.tests.test_intpoly.fig3->Polygon(Point(-2.74, -1.888), Point(-3.292, 4.233), Point(-2.723, -0.697), Point(-0.643, -3.151))
A:sympy.integrals.tests.test_intpoly.fig4->Polygon(Point(0.211, -4.622), Point(-2.684, 3.851), Point(0.468, 4.879), Point(4.63, -1.325), Point(-0.411, -1.044))
A:sympy.integrals.tests.test_intpoly.tri->Polygon(Point(0, 3), Point(5, 3), Point(1, 1))
A:sympy.integrals.tests.test_intpoly.result_dict->polytope_integrate(tri, polys, max_degree=10)
A:sympy.integrals.tests.test_intpoly.fig6->Polygon(Point(-3.018, -4.473), Point(-0.103, 2.378), Point(-1.605, -2.308), Point(4.516, -0.771), Point(4.203, 0.478))
A:sympy.integrals.tests.test_intpoly.fig5->Polygon(Point(-4.165, -0.832), Point(-3.668, 1.568), Point(-3.266, 1.279), Point(-1.09, -2.08), Point(3.313, -0.683), Point(3.033, -4.845), Point(-4.395, 4.84), Point(-1.007, -3.328))
A:sympy.integrals.tests.test_intpoly.polygon->Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))
A:sympy.integrals.tests.test_intpoly.hp_params->hyperplane_parameters(triangle)
A:sympy.integrals.tests.test_intpoly.triangle->Polygon(Point(0, 3), Point(5, 3), Point(1, 1))
sympy.integrals.tests.test_intpoly.test_best_origin()
sympy.integrals.tests.test_intpoly.test_decompose()
sympy.integrals.tests.test_intpoly.test_distance_to_side()
sympy.integrals.tests.test_intpoly.test_integration_reduction()
sympy.integrals.tests.test_intpoly.test_integration_reduction_dynamic()
sympy.integrals.tests.test_intpoly.test_is_vertex()
sympy.integrals.tests.test_intpoly.test_issue_19234()
sympy.integrals.tests.test_intpoly.test_lineseg_integrate()
sympy.integrals.tests.test_intpoly.test_main_integrate()
sympy.integrals.tests.test_intpoly.test_main_integrate3d()
sympy.integrals.tests.test_intpoly.test_max_degree()
sympy.integrals.tests.test_intpoly.test_point_sort()
sympy.integrals.tests.test_intpoly.test_polygon_integrate()
sympy.integrals.tests.test_intpoly.test_polytope_integrate()
sympy.integrals.tests.test_intpoly.test_polytopes_intersecting_sides()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_trigonometry.py----------------------------------------
A:sympy.integrals.tests.test_trigonometry.x->Symbol('x')
A:sympy.integrals.tests.test_trigonometry.y->Symbol('y', positive=True)
A:sympy.integrals.tests.test_trigonometry.n->Symbol('n', integer=True)
sympy.integrals.tests.test_trigonometry.test_trigintegrate_even()
sympy.integrals.tests.test_trigonometry.test_trigintegrate_mixed()
sympy.integrals.tests.test_trigonometry.test_trigintegrate_odd()
sympy.integrals.tests.test_trigonometry.test_trigintegrate_symbolic()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_meijerint.py----------------------------------------
A:sympy.integrals.tests.test_meijerint.e->integrate(exp(-(x - a) ** 2) * exp(-(x - b) ** 2) * exp(c * x), (x, 0, oo), meijerg=True)
A:sympy.integrals.tests.test_meijerint.r->min(abs(a), abs(b))
A:sympy.integrals.tests.test_meijerint.integral->meijerint_indefinite(g, x)
A:sympy.integrals.tests.test_meijerint.(v, b)->meijerint_definite(x, x, oo, oo)
A:sympy.integrals.tests.test_meijerint.m1->meijerg(a, b, arg)
A:sympy.integrals.tests.test_meijerint.m2->Mul(*_inflate_g(m1, n))
A:sympy.integrals.tests.test_meijerint.(a, b, c)->symbols('a b c', positive=True)
A:sympy.integrals.tests.test_meijerint.(s, t, mu)->symbols('s t mu', real=True)
A:sympy.integrals.tests.test_meijerint.s->symbols('s', positive=True)
A:sympy.integrals.tests.test_meijerint.(a, b)->symbols('a b', positive=True)
A:sympy.integrals.tests.test_meijerint.(sigma, mu)->symbols('sigma mu', positive=True)
A:sympy.integrals.tests.test_meijerint.(i, c)->meijerint_definite(exp(-((x - mu) / (2 * sigma)) ** 2), x, 0, oo)
A:sympy.integrals.tests.test_meijerint.(i, _)->meijerint_definite(exp(-mu * x) * exp(sigma * x), x, 0, oo)
A:sympy.integrals.tests.test_meijerint.(a, b, s)->symbols('a b s')
A:sympy.integrals.tests.test_meijerint.n->Symbol('n')
A:sympy.integrals.tests.test_meijerint.alpha->symbols('alpha', positive=True)
A:sympy.integrals.tests.test_meijerint.(a, s)->symbols('a s', positive=True)
A:sympy.integrals.tests.test_meijerint.a->Symbol('a', positive=True)
A:sympy.integrals.tests.test_meijerint.f->integrate(r ** 2 * (R ** 2 - r ** 2) ** 0.5, r, meijerg=True)
A:sympy.integrals.tests.test_meijerint.b->Symbol('b', positive=True)
A:sympy.integrals.tests.test_meijerint.F->F.subs(a, b).subs(a, b)
A:sympy.integrals.tests.test_meijerint.f2->meijerint_inversion(F, s, t)
A:sympy.integrals.tests.test_meijerint.ILT->InverseLaplaceTransform(F, s, t, None)
A:sympy.integrals.tests.test_meijerint.c->Symbol('c', positive=True)
A:sympy.integrals.tests.test_meijerint.z->Symbol('z')
A:sympy.integrals.tests.test_meijerint.subs[ai]->uniform(1.5, 2.0)
A:sympy.integrals.tests.test_meijerint.terms->terms(subs)
A:sympy.integrals.tests.test_meijerint.expanded->Add(*[f * x for (f, x) in terms])
A:sympy.integrals.tests.test_meijerint.(mu1, mu2)->symbols('mu1 mu2', nonzero=True)
A:sympy.integrals.tests.test_meijerint.(sigma1, sigma2)->symbols('sigma1 sigma2', positive=True)
A:sympy.integrals.tests.test_meijerint.rate->Symbol('lambda', positive=True)
A:sympy.integrals.tests.test_meijerint.i->integrate(x * betadist, (x, 0, oo), meijerg=True, conds='separate')
A:sympy.integrals.tests.test_meijerint.res1->integrate(expr * exponential(x, rate) * normal(y, mu1, sigma1), (x, 0, oo), (y, -oo, oo), meijerg=True)
A:sympy.integrals.tests.test_meijerint.res2->integrate(expr * exponential(x, rate) * normal(y, mu1, sigma1), (y, -oo, oo), (x, 0, oo), meijerg=True)
A:sympy.integrals.tests.test_meijerint.(alpha, beta)->symbols('alpha beta', positive=True)
A:sympy.integrals.tests.test_meijerint.j->integrate(x ** 2 * betadist, (x, 0, oo), meijerg=True, conds='separate')
A:sympy.integrals.tests.test_meijerint.k->Symbol('k', positive=True)
A:sympy.integrals.tests.test_meijerint.(a, b, p)->symbols('a b p', positive=True)
A:sympy.integrals.tests.test_meijerint.(d1, d2)->symbols('d1 d2', positive=True)
A:sympy.integrals.tests.test_meijerint.(lamda, mu)->symbols('lamda mu', positive=True)
A:sympy.integrals.tests.test_meijerint.(nu, sigma)->symbols('nu sigma', positive=True)
A:sympy.integrals.tests.test_meijerint.mu->Symbol('mu', real=True)
A:sympy.integrals.tests.test_meijerint.t->Symbol('t', positive=True)
A:sympy.integrals.tests.test_meijerint.u->Symbol('u', polar=True)
A:sympy.integrals.tests.test_meijerint.ans->fourier_transform(besselj(1, x) / x, x, s, noconds=False)
A:sympy.integrals.tests.test_meijerint.anti->integrate(expr, x, meijerg=True)
A:sympy.integrals.tests.test_meijerint.(y, L)->symbols('y L', positive=True)
A:sympy.integrals.tests.test_meijerint.x->Symbol('x')
sympy.integrals.tests.test_meijerint.test_bessel()
sympy.integrals.tests.test_meijerint.test_branch_bug()
sympy.integrals.tests.test_meijerint.test_expint()
sympy.integrals.tests.test_meijerint.test_fresnel()
sympy.integrals.tests.test_meijerint.test_indefinite_1_bug()
sympy.integrals.tests.test_meijerint.test_inflate()
sympy.integrals.tests.test_meijerint.test_inversion()
sympy.integrals.tests.test_meijerint.test_inversion_conditional_output()
sympy.integrals.tests.test_meijerint.test_inversion_exp_real_nonreal_shift()
sympy.integrals.tests.test_meijerint.test_issue_10211()
sympy.integrals.tests.test_meijerint.test_issue_10681()
sympy.integrals.tests.test_meijerint.test_issue_11806()
sympy.integrals.tests.test_meijerint.test_issue_13536()
sympy.integrals.tests.test_meijerint.test_issue_6122()
sympy.integrals.tests.test_meijerint.test_issue_6252()
sympy.integrals.tests.test_meijerint.test_issue_6348()
sympy.integrals.tests.test_meijerint.test_issue_6462()
sympy.integrals.tests.test_meijerint.test_issue_6860()
sympy.integrals.tests.test_meijerint.test_issue_7337()
sympy.integrals.tests.test_meijerint.test_issue_8368()
sympy.integrals.tests.test_meijerint.test_linear_subs()
sympy.integrals.tests.test_meijerint.test_lookup_table()
sympy.integrals.tests.test_meijerint.test_meijerint()
sympy.integrals.tests.test_meijerint.test_meijerint_definite()
sympy.integrals.tests.test_meijerint.test_meijerint_indefinite_numerically()
sympy.integrals.tests.test_meijerint.test_messy()
sympy.integrals.tests.test_meijerint.test_pr_23583()
sympy.integrals.tests.test_meijerint.test_probability()
sympy.integrals.tests.test_meijerint.test_recursive()
sympy.integrals.tests.test_meijerint.test_rewrite1()
sympy.integrals.tests.test_meijerint.test_rewrite_single()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_heurisch.py----------------------------------------
A:sympy.integrals.tests.test_heurisch.(x, y, z, nu)->symbols('x,y,z,nu')
A:sympy.integrals.tests.test_heurisch.f->LambertW(x)
A:sympy.integrals.tests.test_heurisch.y->Symbol('y', positive=True)
A:sympy.integrals.tests.test_heurisch.df->diff(f(x), x)
A:sympy.integrals.tests.test_heurisch.g->besselj(nu, x)
A:sympy.integrals.tests.test_heurisch.(t, R)->symbols('t R')
A:sympy.integrals.tests.test_heurisch.z->Function('z')(t)
A:sympy.integrals.tests.test_heurisch.Uz->integrate(f(z), z)
A:sympy.integrals.tests.test_heurisch.Ut->integrate(f(t), t)
sympy.integrals.tests.test_heurisch.test_RR()
sympy.integrals.tests.test_heurisch.test_components()
sympy.integrals.tests.test_heurisch.test_heurisch_exp()
sympy.integrals.tests.test_heurisch.test_heurisch_fractions()
sympy.integrals.tests.test_heurisch.test_heurisch_function()
sympy.integrals.tests.test_heurisch.test_heurisch_function_derivative()
sympy.integrals.tests.test_heurisch.test_heurisch_hacking()
sympy.integrals.tests.test_heurisch.test_heurisch_hyperbolic()
sympy.integrals.tests.test_heurisch.test_heurisch_log()
sympy.integrals.tests.test_heurisch.test_heurisch_mixed()
sympy.integrals.tests.test_heurisch.test_heurisch_polynomials()
sympy.integrals.tests.test_heurisch.test_heurisch_radicals()
sympy.integrals.tests.test_heurisch.test_heurisch_special()
sympy.integrals.tests.test_heurisch.test_heurisch_symbolic_coeffs()
sympy.integrals.tests.test_heurisch.test_heurisch_symbolic_coeffs_1130()
sympy.integrals.tests.test_heurisch.test_heurisch_trigonometric()
sympy.integrals.tests.test_heurisch.test_heurisch_wrapper()
sympy.integrals.tests.test_heurisch.test_issue_10680()
sympy.integrals.tests.test_heurisch.test_issue_21166()
sympy.integrals.tests.test_heurisch.test_issue_22527()
sympy.integrals.tests.test_heurisch.test_issue_3609()
sympy.integrals.tests.test_heurisch.test_pmint_LambertW()
sympy.integrals.tests.test_heurisch.test_pmint_WrightOmega()
sympy.integrals.tests.test_heurisch.test_pmint_bessel_products()
sympy.integrals.tests.test_heurisch.test_pmint_besselj()
sympy.integrals.tests.test_heurisch.test_pmint_erf()
sympy.integrals.tests.test_heurisch.test_pmint_logexp()
sympy.integrals.tests.test_heurisch.test_pmint_rat()
sympy.integrals.tests.test_heurisch.test_pmint_trig()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_risch.py----------------------------------------
A:sympy.integrals.tests.test_risch.(t0, t1, t2)->symbols('t:3')
A:sympy.integrals.tests.test_risch.i->Symbol('i')
A:sympy.integrals.tests.test_risch.p->Poly((-28 * x ** 11 * t0 - 6 * x ** 8 * t0 + 6 * x ** 9 * t0 - 15 * x ** 8 * t0 ** 2 + 15 * x ** 7 * t0 ** 2 + 84 * x ** 10 * t0 ** 2 - 140 * x ** 9 * t0 ** 3 - 20 * x ** 6 * t0 ** 3 + 20 * x ** 7 * t0 ** 3 - 15 * x ** 6 * t0 ** 4 + 15 * x ** 5 * t0 ** 4 + 140 * x ** 8 * t0 ** 4 - 84 * x ** 7 * t0 ** 5 - 6 * x ** 4 * t0 ** 5 + 6 * x ** 5 * t0 ** 5 + x ** 3 * t0 ** 6 - x ** 4 * t0 ** 6 + 28 * x ** 6 * t0 ** 6 - 4 * x ** 5 * t0 ** 7 + x ** 9 - x ** 10 + 4 * x ** 12) / (-8 * x ** 11 * t0 + 28 * x ** 10 * t0 ** 2 - 56 * x ** 9 * t0 ** 3 + 70 * x ** 8 * t0 ** 4 - 56 * x ** 7 * t0 ** 5 + 28 * x ** 6 * t0 ** 6 - 8 * x ** 5 * t0 ** 7 + x ** 4 * t0 ** 8 + x ** 12) * t1 ** 2 + (-28 * x ** 11 * t0 - 12 * x ** 8 * t0 + 12 * x ** 9 * t0 - 30 * x ** 8 * t0 ** 2 + 30 * x ** 7 * t0 ** 2 + 84 * x ** 10 * t0 ** 2 - 140 * x ** 9 * t0 ** 3 - 40 * x ** 6 * t0 ** 3 + 40 * x ** 7 * t0 ** 3 - 30 * x ** 6 * t0 ** 4 + 30 * x ** 5 * t0 ** 4 + 140 * x ** 8 * t0 ** 4 - 84 * x ** 7 * t0 ** 5 - 12 * x ** 4 * t0 ** 5 + 12 * x ** 5 * t0 ** 5 - 2 * x ** 4 * t0 ** 6 + 2 * x ** 3 * t0 ** 6 + 28 * x ** 6 * t0 ** 6 - 4 * x ** 5 * t0 ** 7 + 2 * x ** 9 - 2 * x ** 10 + 4 * x ** 12) / (-8 * x ** 11 * t0 + 28 * x ** 10 * t0 ** 2 - 56 * x ** 9 * t0 ** 3 + 70 * x ** 8 * t0 ** 4 - 56 * x ** 7 * t0 ** 5 + 28 * x ** 6 * t0 ** 6 - 8 * x ** 5 * t0 ** 7 + x ** 4 * t0 ** 8 + x ** 12) * t1 + (-2 * x ** 2 * t0 + 2 * x ** 3 * t0 + x * t0 ** 2 - x ** 2 * t0 ** 2 + x ** 3 - x ** 4) / (-4 * x ** 5 * t0 + 6 * x ** 4 * t0 ** 2 - 4 * x ** 3 * t0 ** 3 + x ** 2 * t0 ** 4 + x ** 6), t1, z, expand=False)
A:sympy.integrals.tests.test_risch.DE->DifferentialExtension(exp(2 * x ** 2) + log(exp(x ** 2) + 1), x)
A:sympy.integrals.tests.test_risch.r->Poly(-4 * x ** 4 * z ** 2 + 4 * x ** 6 * z ** 2 - z * x ** 3 - 4 * x ** 5 * z ** 3 + 4 * x ** 3 * z ** 3 + x ** 4 + z * x ** 5 - x ** 6, t)
A:sympy.integrals.tests.test_risch.a->risch_integrate(x ** x, x)
A:sympy.integrals.tests.test_risch.d->Poly(25 * t ** 6 + 35 * t ** 4 + 11 * t ** 2 + 1, t)
A:sympy.integrals.tests.test_risch.F->Poly(t ** 2 - 1, t)
A:sympy.integrals.tests.test_risch.ans->residue_reduce(Poly(-2 / x, t), Poly(t ** 2 - 1, t), DE, z, invert=True)
A:sympy.integrals.tests.test_risch.(elem, nonelem, b)->integrate_hyperexponential(Poly((8 * x ** 7 - 12 * x ** 5 + 6 * x ** 3 - x) * t1 ** 4 + (8 * t0 * x ** 7 - 8 * t0 * x ** 6 - 4 * t0 * x ** 5 + 2 * t0 * x ** 3 + 2 * t0 * x ** 2 - t0 * x + 24 * x ** 8 - 36 * x ** 6 - 4 * x ** 5 + 22 * x ** 4 + 4 * x ** 3 - 7 * x ** 2 - x + 1) * t1 ** 3 + (8 * t0 * x ** 8 - 4 * t0 * x ** 6 - 16 * t0 * x ** 5 - 2 * t0 * x ** 4 + 12 * t0 * x ** 3 + t0 * x ** 2 - 2 * t0 * x + 24 * x ** 9 - 36 * x ** 7 - 8 * x ** 6 + 22 * x ** 5 + 12 * x ** 4 - 7 * x ** 3 - 6 * x ** 2 + x + 1) * t1 ** 2 + (8 * t0 * x ** 8 - 8 * t0 * x ** 6 - 16 * t0 * x ** 5 + 6 * t0 * x ** 4 + 10 * t0 * x ** 3 - 2 * t0 * x ** 2 - t0 * x + 8 * x ** 10 - 12 * x ** 8 - 4 * x ** 7 + 2 * x ** 6 + 12 * x ** 5 + 3 * x ** 4 - 9 * x ** 3 - x ** 2 + 2 * x) * t1 + 8 * t0 * x ** 7 - 12 * t0 * x ** 6 - 4 * t0 * x ** 5 + 8 * t0 * x ** 4 - t0 * x ** 2 - 4 * x ** 7 + 4 * x ** 6 + 4 * x ** 5 - 4 * x ** 4 - x ** 3 + x ** 2, t1), Poly((8 * x ** 7 - 12 * x ** 5 + 6 * x ** 3 - x) * t1 ** 4 + (24 * x ** 8 + 8 * x ** 7 - 36 * x ** 6 - 12 * x ** 5 + 18 * x ** 4 + 6 * x ** 3 - 3 * x ** 2 - x) * t1 ** 3 + (24 * x ** 9 + 24 * x ** 8 - 36 * x ** 7 - 36 * x ** 6 + 18 * x ** 5 + 18 * x ** 4 - 3 * x ** 3 - 3 * x ** 2) * t1 ** 2 + (8 * x ** 10 + 24 * x ** 9 - 12 * x ** 8 - 36 * x ** 7 + 6 * x ** 6 + 18 * x ** 5 - x ** 4 - 3 * x ** 3) * t1 + 8 * x ** 10 - 12 * x ** 8 + 6 * x ** 6 - x ** 4, t1), DE)
A:sympy.integrals.tests.test_risch.(a, b)->symbols('a b')
A:sympy.integrals.tests.test_risch.(a, t, s)->symbols('a t s')
A:sympy.integrals.tests.test_risch.f->Function('phi_nu')
A:sympy.integrals.tests.test_risch.e1->log(x / exp(x) + 1)
A:sympy.integrals.tests.test_risch.ans1->risch_integrate(e1, x)
A:sympy.integrals.tests.test_risch.ans2->risch_integrate(e2, y)
A:sympy.integrals.tests.test_risch.DE1DE2->DifferentialExtension(log(x), x)
sympy.integrals.tests.test_risch._TestingException(Exception)
sympy.integrals.tests.test_risch.test_DecrementLevel()
sympy.integrals.tests.test_risch.test_DifferentialExtension_Rothstein()
sympy.integrals.tests.test_risch.test_DifferentialExtension_all_attrs()
sympy.integrals.tests.test_risch.test_DifferentialExtension_equality()
sympy.integrals.tests.test_risch.test_DifferentialExtension_exp()
sympy.integrals.tests.test_risch.test_DifferentialExtension_extension_flag()
sympy.integrals.tests.test_risch.test_DifferentialExtension_handle_first()
sympy.integrals.tests.test_risch.test_DifferentialExtension_log()
sympy.integrals.tests.test_risch.test_DifferentialExtension_misc()
sympy.integrals.tests.test_risch.test_DifferentialExtension_printing()
sympy.integrals.tests.test_risch.test_DifferentialExtension_symlog()
sympy.integrals.tests.test_risch.test_NonElementaryIntegral()
sympy.integrals.tests.test_risch.test_as_poly_1t()
sympy.integrals.tests.test_risch.test_canonical_representation()
sympy.integrals.tests.test_risch.test_derivation()
sympy.integrals.tests.test_risch.test_frac_in()
sympy.integrals.tests.test_risch.test_gcdex_diophantine()
sympy.integrals.tests.test_risch.test_hermite_reduce()
sympy.integrals.tests.test_risch.test_integer_powers()
sympy.integrals.tests.test_risch.test_integrate_hyperexponential()
sympy.integrals.tests.test_risch.test_integrate_hyperexponential_polynomial()
sympy.integrals.tests.test_risch.test_integrate_hyperexponential_returns_piecewise()
sympy.integrals.tests.test_risch.test_integrate_hypertangent_polynomial()
sympy.integrals.tests.test_risch.test_integrate_nonlinear_no_specials()
sympy.integrals.tests.test_risch.test_integrate_primitive()
sympy.integrals.tests.test_risch.test_issue_13947()
sympy.integrals.tests.test_risch.test_issue_23948()
sympy.integrals.tests.test_risch.test_laurent_series()
sympy.integrals.tests.test_risch.test_polynomial_reduce()
sympy.integrals.tests.test_risch.test_recognize_derivative()
sympy.integrals.tests.test_risch.test_recognize_log_derivative()
sympy.integrals.tests.test_risch.test_residue_reduce()
sympy.integrals.tests.test_risch.test_risch_integrate()
sympy.integrals.tests.test_risch.test_risch_integrate_float()
sympy.integrals.tests.test_risch.test_splitfactor()
sympy.integrals.tests.test_risch.test_xtothex()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_manual.py----------------------------------------
A:sympy.integrals.tests.test_manual.(x, y, z, u, n, a, b, c, d, e)->symbols('x y z u n a b c d e')
A:sympy.integrals.tests.test_manual.f->sin(x ** 2 + 4 * x + 1)
A:sympy.integrals.tests.test_manual.result->_parts_rule(atan(x), x)
A:sympy.integrals.tests.test_manual.ra->Symbol('a', real=True)
A:sympy.integrals.tests.test_manual.rb->Symbol('b', real=True)
A:sympy.integrals.tests.test_manual.y->Symbol('y', positive=True)
A:sympy.integrals.tests.test_manual.n->Symbol('n', nonzero=True)
A:sympy.integrals.tests.test_manual.integral->manualintegrate(q, x)
A:sympy.integrals.tests.test_manual.p_subbed->p.subs(n, deg)
A:sympy.integrals.tests.test_manual.t->symbols('t')
A:sympy.integrals.tests.test_manual.new_args->list(p.args)
A:sympy.integrals.tests.test_manual.(r, x, phi)->map(Symbol, 'r x phi'.split())
A:sympy.integrals.tests.test_manual.a->Symbol('a', negative=True)
A:sympy.integrals.tests.test_manual.b->Symbol('b', negative=True)
A:sympy.integrals.tests.test_manual.rc->Symbol('c', real=True)
A:sympy.integrals.tests.test_manual.ry->Symbol('y', real=True)
A:sympy.integrals.tests.test_manual.rz->Symbol('z', real=True)
A:sympy.integrals.tests.test_manual.res->manualintegrate(exp(10 * x) * sin(exp(x)), x)
A:sympy.integrals.tests.test_manual.(x, y)->symbols('x y')
A:sympy.integrals.tests.test_manual.steps->integral_steps(tan(x), x)
A:sympy.integrals.tests.test_manual.i->Integral(1 / sqrt(x ** 2 - 1), (x, -2, -1)).doit(manual=True)
sympy.integrals.tests.test_manual.assert_is_integral_of(f:Expr,F:Expr)
sympy.integrals.tests.test_manual.test_constant_independent_of_symbol()
sympy.integrals.tests.test_manual.test_cyclic_parts()
sympy.integrals.tests.test_manual.test_find_substitutions()
sympy.integrals.tests.test_manual.test_issue_10847()
sympy.integrals.tests.test_manual.test_issue_10847_slow()
sympy.integrals.tests.test_manual.test_issue_12251()
sympy.integrals.tests.test_manual.test_issue_12641()
sympy.integrals.tests.test_manual.test_issue_12899()
sympy.integrals.tests.test_manual.test_issue_13297()
sympy.integrals.tests.test_manual.test_issue_14470()
sympy.integrals.tests.test_manual.test_issue_15471()
sympy.integrals.tests.test_manual.test_issue_22757()
sympy.integrals.tests.test_manual.test_issue_23348()
sympy.integrals.tests.test_manual.test_issue_23566()
sympy.integrals.tests.test_manual.test_issue_2850()
sympy.integrals.tests.test_manual.test_issue_3796()
sympy.integrals.tests.test_manual.test_issue_6746()
sympy.integrals.tests.test_manual.test_issue_6799()
sympy.integrals.tests.test_manual.test_issue_8520()
sympy.integrals.tests.test_manual.test_issue_9462()
sympy.integrals.tests.test_manual.test_issue_9858()
sympy.integrals.tests.test_manual.test_manual_subs()
sympy.integrals.tests.test_manual.test_manual_true()
sympy.integrals.tests.test_manual.test_manualintegrate_Heaviside()
sympy.integrals.tests.test_manual.test_manualintegrate_derivative()
sympy.integrals.tests.test_manual.test_manualintegrate_exponentials()
sympy.integrals.tests.test_manual.test_manualintegrate_inversetrig()
sympy.integrals.tests.test_manual.test_manualintegrate_orthogonal_poly()
sympy.integrals.tests.test_manual.test_manualintegrate_parts()
sympy.integrals.tests.test_manual.test_manualintegrate_polynomials()
sympy.integrals.tests.test_manual.test_manualintegrate_rational()
sympy.integrals.tests.test_manual.test_manualintegrate_special()
sympy.integrals.tests.test_manual.test_manualintegrate_sqrt_linear()
sympy.integrals.tests.test_manual.test_manualintegrate_sqrt_quadratic()
sympy.integrals.tests.test_manual.test_manualintegrate_trig_substitution()
sympy.integrals.tests.test_manual.test_manualintegrate_trigonometry()
sympy.integrals.tests.test_manual.test_manualintegrate_trigpowers()
sympy.integrals.tests.test_manual.test_manualintegrate_trivial_substitution()
sympy.integrals.tests.test_manual.test_mul_pow_derivative()
sympy.integrals.tests.test_manual.test_nested_pow()
sympy.integrals.tests.test_manual.test_quadratic_denom()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_transforms.py----------------------------------------
A:sympy.integrals.tests.test_transforms.(nu, beta, rho)->symbols('nu beta rho')
A:sympy.integrals.tests.test_transforms.f->Function('f')
A:sympy.integrals.tests.test_transforms.bpos->symbols('b', positive=True)
A:sympy.integrals.tests.test_transforms.mt->MT(exp(-x / 2) * besselk(a, x / 2), x, s)
A:sympy.integrals.tests.test_transforms.mt0->gammasimp(trigsimp(gammasimp(mt[0].expand(func=True))))
A:sympy.integrals.tests.test_transforms.aneg->Symbol('a', negative=True)
A:sympy.integrals.tests.test_transforms.u->Symbol('u', polar=True)
A:sympy.integrals.tests.test_transforms.r->Symbol('r')
A:sympy.integrals.tests.test_transforms.(_a, _b)->symbols('a b', positive=True)
A:sympy.integrals.tests.test_transforms.nu->Symbol('nu')
A:sympy.integrals.tests.test_transforms.k->Symbol('k')
A:sympy.integrals.tests.test_transforms.a->symbols('a')
A:sympy.integrals.tests.test_transforms.b->symbols('b', positive=True)
A:sympy.integrals.tests.test_transforms.posk->symbols('posk', positive=True)
A:sympy.integrals.tests.test_transforms.t->symbols('t')
A:sympy.integrals.tests.test_transforms.w->symbols('w')
A:sympy.integrals.tests.test_transforms.m->Symbol('m')
A:sympy.integrals.tests.test_transforms.(x, y)->symbols('x y', real=True)
sympy.integrals.tests.test_transforms.test_as_integral()
sympy.integrals.tests.test_transforms.test_cosine_transform()
sympy.integrals.tests.test_transforms.test_expint()
sympy.integrals.tests.test_transforms.test_fourier_transform()
sympy.integrals.tests.test_transforms.test_free_symbols()
sympy.integrals.tests.test_transforms.test_hankel_transform()
sympy.integrals.tests.test_transforms.test_inverse_mellin_transform()
sympy.integrals.tests.test_transforms.test_issue_12591()
sympy.integrals.tests.test_transforms.test_issue_7181()
sympy.integrals.tests.test_transforms.test_issue_8882()
sympy.integrals.tests.test_transforms.test_mellin_transform()
sympy.integrals.tests.test_transforms.test_mellin_transform2()
sympy.integrals.tests.test_transforms.test_mellin_transform_bessel()
sympy.integrals.tests.test_transforms.test_mellin_transform_fail()
sympy.integrals.tests.test_transforms.test_sine_transform()
sympy.integrals.tests.test_transforms.test_undefined_function()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_lineintegrals.py----------------------------------------
A:sympy.integrals.tests.test_lineintegrals.(s, t, x, y, z)->symbols('s,t,x,y,z')
A:sympy.integrals.tests.test_lineintegrals.c->Curve([E ** t + 1, E ** t - 1], (t, 0, log(2)))
sympy.integrals.tests.test_lineintegrals.test_lineintegral()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_quadrature.py----------------------------------------
A:sympy.integrals.tests.test_quadrature.(x, w)->gauss_lobatto(3, 40)
sympy.integrals.tests.test_quadrature.test_chebyshev_t()
sympy.integrals.tests.test_quadrature.test_chebyshev_t_precise()
sympy.integrals.tests.test_quadrature.test_chebyshev_u()
sympy.integrals.tests.test_quadrature.test_chebyshev_u_precise()
sympy.integrals.tests.test_quadrature.test_gen_laguerre()
sympy.integrals.tests.test_quadrature.test_gen_laguerre_precise()
sympy.integrals.tests.test_quadrature.test_hermite()
sympy.integrals.tests.test_quadrature.test_hermite_precise()
sympy.integrals.tests.test_quadrature.test_jacobi()
sympy.integrals.tests.test_quadrature.test_jacobi_precise()
sympy.integrals.tests.test_quadrature.test_laguerre()
sympy.integrals.tests.test_quadrature.test_laguerre_precise()
sympy.integrals.tests.test_quadrature.test_legendre()
sympy.integrals.tests.test_quadrature.test_legendre_precise()
sympy.integrals.tests.test_quadrature.test_lobatto()
sympy.integrals.tests.test_quadrature.test_lobatto_precise()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_laplace.py----------------------------------------
A:sympy.integrals.tests.test_laplace.(a, b, c)->symbols('a, b, c', positive=True)
A:sympy.integrals.tests.test_laplace.(t, w, x)->symbols('t, w, x')
A:sympy.integrals.tests.test_laplace.f->ILT(exp(z * s), s, t, noconds=False)
A:sympy.integrals.tests.test_laplace.g->Function('g')
A:sympy.integrals.tests.test_laplace.(L, _, _)->LT(42 * sin(w * t + x) ** 2, t, s)
A:sympy.integrals.tests.test_laplace.(L, plane, cond)->LT(cos(x + 3), x, s, simplify=True)
A:sympy.integrals.tests.test_laplace.(L, plane, _)->LT(sin(a * t) ** 3 * cosh(b * t), t, s)
A:sympy.integrals.tests.test_laplace.Mt->Matrix([[exp(t), t * exp(-t)], [t * exp(-t), exp(t)]])
A:sympy.integrals.tests.test_laplace.Ms->Matrix([[1 / (s - 1), (s + 1) ** (-2)], [(s + 1) ** (-2), 1 / (s - 1)]])
A:sympy.integrals.tests.test_laplace.Ms_conds->Matrix([[(1 / (s - 1), 1, True), ((s + 1) ** (-2), -1, True)], [((s + 1) ** (-2), -1, True), (1 / (s - 1), 1, True)]])
A:sympy.integrals.tests.test_laplace.(a, b, c, d)->symbols('a b c d', positive=True)
A:sympy.integrals.tests.test_laplace.(n, r)->symbols('n, r', real=True)
A:sympy.integrals.tests.test_laplace.(t, z)->symbols('t z')
A:sympy.integrals.tests.test_laplace.a->Symbol('a')
A:sympy.integrals.tests.test_laplace.r->Symbol('r', real=True)
A:sympy.integrals.tests.test_laplace.x->Symbol('x')
A:sympy.integrals.tests.test_laplace.u->Symbol('u', polar=True)
sympy.integrals.tests.test_laplace.test_expint()
sympy.integrals.tests.test_laplace.test_inverse_laplace_transform()
sympy.integrals.tests.test_laplace.test_laplace_transform()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_deltafunctions.py----------------------------------------
A:sympy.integrals.tests.test_deltafunctions.f->Function('f')
A:sympy.integrals.tests.test_deltafunctions.(x_1, x_2, x, y, z)->symbols('x_1 x_2 x y z')
A:sympy.integrals.tests.test_deltafunctions.(a, b, c)->symbols('a b c', commutative=False)
sympy.integrals.tests.test_deltafunctions.test_change_mul()
sympy.integrals.tests.test_deltafunctions.test_deltaintegrate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/tests/test_prde.py----------------------------------------
A:sympy.integrals.tests.test_prde.(t0, t1, t2, t3, k)->symbols('t:4 k')
A:sympy.integrals.tests.test_prde.DE->DifferentialExtension(extension={'D': [Poly(1, x), Poly(1 / x, t)]})
A:sympy.integrals.tests.test_prde.fa->Poly(1, t)
A:sympy.integrals.tests.test_prde.fd->Poly(x, t)
A:sympy.integrals.tests.test_prde.a->Poly(x ** 2 - x, x, field=True)
A:sympy.integrals.tests.test_prde.ba->Poly(t ** 2, t)
A:sympy.integrals.tests.test_prde.bd->Poly(1, t)
A:sympy.integrals.tests.test_prde.A->Matrix([[-(x + 3) / (x - 1), (x + 1) / (x - 1), 1], [-x - 3, x + 1, x - 1], [2 * (x + 3) / (x - 1), 0, 0]], t)
A:sympy.integrals.tests.test_prde.u->Matrix([[(x + 1) / (x - 1)], [x + 1], [0]], t)
A:sympy.integrals.tests.test_prde.b->Poly(x ** 2 - 5 * x + 3, x, field=True)
A:sympy.integrals.tests.test_prde.(h, A)->param_rischDE(Poly(-t - 1, t, field=True), Poly(t + x, t, field=True), G, DE)
A:sympy.integrals.tests.test_prde.V->Matrix([[-(x + 3) / (x - 1), (x + 1) / (x - 1), 1], [-x - 3, x + 1, x - 1], [2 * (x + 3) / (x - 1), 0, 0]], t).nullspace()
A:sympy.integrals.tests.test_prde.p0->Poly(0, t, field=True)
A:sympy.integrals.tests.test_prde.p1->Poly((x - 1) * t, t, domain='ZZ(x)')
A:sympy.integrals.tests.test_prde.p2->Poly(x - 1, t, domain='ZZ(x)')
A:sympy.integrals.tests.test_prde.p3->Poly(-x ** 2 + x, t, domain='ZZ(x)')
sympy.integrals.tests.test_prde.test_constant_system()
sympy.integrals.tests.test_prde.test_is_deriv_k()
sympy.integrals.tests.test_prde.test_is_log_deriv_k_t_radical()
sympy.integrals.tests.test_prde.test_is_log_deriv_k_t_radical_in_field()
sympy.integrals.tests.test_prde.test_limited_integrate()
sympy.integrals.tests.test_prde.test_limited_integrate_reduce()
sympy.integrals.tests.test_prde.test_param_poly_rischDE()
sympy.integrals.tests.test_prde.test_param_rischDE()
sympy.integrals.tests.test_prde.test_parametric_log_deriv()
sympy.integrals.tests.test_prde.test_prde_cancel_liouvillian()
sympy.integrals.tests.test_prde.test_prde_linear_constraints()
sympy.integrals.tests.test_prde.test_prde_no_cancel()
sympy.integrals.tests.test_prde.test_prde_normal_denom()
sympy.integrals.tests.test_prde.test_prde_spde()
sympy.integrals.tests.test_prde.test_prde_special_denom()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/benchmarks/bench_trigintegrate.py----------------------------------------
A:sympy.integrals.benchmarks.bench_trigintegrate.x->Symbol('x')
sympy.integrals.benchmarks.bench_trigintegrate.timeit_trigintegrate_sin3x()
sympy.integrals.benchmarks.bench_trigintegrate.timeit_trigintegrate_x2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/benchmarks/bench_integrate.py----------------------------------------
A:sympy.integrals.benchmarks.bench_integrate.x->Symbol('x')
sympy.integrals.benchmarks.bench_integrate.bench_integrate_sin()
sympy.integrals.benchmarks.bench_integrate.bench_integrate_x1sin()
sympy.integrals.benchmarks.bench_integrate.bench_integrate_x2sin()
sympy.integrals.benchmarks.bench_integrate.bench_integrate_x3sin()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/integrals/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/bivariate.py----------------------------------------
A:sympy.solvers.bivariate.arg->factor_terms(arg.expand())
A:sympy.solvers.bivariate.(ind, dep)->factor_terms(arg.expand()).as_independent(symbol)
A:sympy.solvers.bivariate.(a, b, x)->_linab(dep, symbol)
A:sympy.solvers.bivariate.(a, x)->separatevars(dep).as_independent(symbol, as_Add=False)
A:sympy.solvers.bivariate.eq->expand_log(log(t_term) - log(_rhs))
A:sympy.solvers.bivariate.mainlog->_mostfunc(lhs, log, symbol)
A:sympy.solvers.bivariate.other->collect(lhs, mainpow).subs(mainpow, 0)
A:sympy.solvers.bivariate.(d, f, X2)->_linab(other, x)
A:sympy.solvers.bivariate.logterm->collect(eq - other, mainlog)
A:sympy.solvers.bivariate.a->root(p.coeff_monomial(x ** d * y ** d), d)
A:sympy.solvers.bivariate.(b, c, X1)->_linab(logarg, x)
A:sympy.solvers.bivariate.u->Dummy('u', positive=True)
A:sympy.solvers.bivariate.xusolns->solve(X1 - u, x)
A:sympy.solvers.bivariate.(num, den)->((c * d - b * f) / a / b).as_numer_denom()
A:sympy.solvers.bivariate.(p, den)->den.as_coeff_Mul()
A:sympy.solvers.bivariate.e->exp(num / den)
A:sympy.solvers.bivariate.t->Dummy('t', **symbol.assumptions0)
A:sympy.solvers.bivariate.w->LambertW(arg, k)
A:sympy.solvers.bivariate.sols->_solve_lambert(nlhs, symbol, gens)
A:sympy.solvers.bivariate.(nrhs, lhs)->p.as_expr().as_independent(symbol, as_Add=True)
A:sympy.solvers.bivariate.lhs->collect(lhs, mainpow)
A:sympy.solvers.bivariate.t_indep->collect(lhs, mainpow).subs(t, 0)
A:sympy.solvers.bivariate.rhs->i.xreplace({r: rhs})
A:sympy.solvers.bivariate.r->Dummy()
A:sympy.solvers.bivariate.(i, lhs)->_invert(lhs - r, symbol)
A:sympy.solvers.bivariate.soln->_lambert(expand_log(diff), symbol)
A:sympy.solvers.bivariate.mainexp->_mostfunc(lhs, exp, symbol)
A:sympy.solvers.bivariate.mainpow->_mostfunc(lhs, Pow, symbol)
A:sympy.solvers.bivariate.p->Poly(f, x, y)
A:sympy.solvers.bivariate.f->Poly(f, x, y).as_expr()
A:sympy.solvers.bivariate._x->Dummy()
A:sympy.solvers.bivariate._y->Dummy()
A:sympy.solvers.bivariate.rv->bivariate_type(Poly(f.subs({x: _x, y: _y}), _x, _y), _x, _y, first=False)
A:sympy.solvers.bivariate.args->sympy.core.add.Add.make_args(p.as_expr())
A:sympy.solvers.bivariate.new->ok(f, x, (u - b * y) / a / y)
A:sympy.solvers.bivariate.d->Poly(f, x, y).degree(x)
A:sympy.solvers.bivariate.b->root(p.coeff_monomial(y ** d), d)
sympy.solvers.bivariate._filtered_gens(poly,symbol)
sympy.solvers.bivariate._lambert(eq,x)
sympy.solvers.bivariate._linab(arg,symbol)
sympy.solvers.bivariate._mostfunc(lhs,func,X=None)
sympy.solvers.bivariate._solve_lambert(f,symbol,gens)
sympy.solvers.bivariate.bivariate_type(f,x,y,*,first=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/inequalities.py----------------------------------------
A:sympy.solvers.inequalities.t->Relational(poly.as_expr(), 0, rel)
A:sympy.solvers.inequalities.interval->numer_interval.intersect(global_interval)
A:sympy.solvers.inequalities.numer_intervals->solve_poly_inequality(numer * denom, rel)
A:sympy.solvers.inequalities.denom_intervals->solve_poly_inequality(denom, '==')
A:sympy.solvers.inequalities.result->result.union(interval).union(interval)
A:sympy.solvers.inequalities.(numer, denom)->expr.xreplace({_gen: gen}).together().as_numer_denom()
A:sympy.solvers.inequalities.((numer, denom), opt)->parallel_poly_from_expr((numer, denom), gen)
A:sympy.solvers.inequalities.domain->continuous_domain(expanded_e, gen, domain)
A:sympy.solvers.inequalities.expr->expr.xreplace({_gen: gen}).xreplace({_gen: gen})
A:sympy.solvers.inequalities.exclude->solve_rational_inequalities([[((d, d.one), '==') for i in eqs for ((n, d), _) in i if d.has(gen)]])
A:sympy.solvers.inequalities.solution->solution.as_relational(gen).as_relational(gen)
A:sympy.solvers.inequalities._exprs->_bottom_up_scan(expr.args[0])
A:sympy.solvers.inequalities.rv->_reduce_inequalities(inequalities, symbols)
A:sympy.solvers.inequalities.gen->common.pop()
A:sympy.solvers.inequalities.period->periodicity(e, gen)
A:sympy.solvers.inequalities.e->Poly(expr).as_expr()
A:sympy.solvers.inequalities.const->expr.xreplace({_gen: gen}).xreplace({_gen: gen}).func(e, 0)
A:sympy.solvers.inequalities.frange->function_range(e, gen, domain)
A:sympy.solvers.inequalities.(n, d)->Poly(expr).as_expr().as_numer_denom()
A:sympy.solvers.inequalities.solns->solvify(e, gen, domain)
A:sympy.solvers.inequalities.expanded_e->expand_mul(e)
A:sympy.solvers.inequalities.v->ie.subs(s, i)
A:sympy.solvers.inequalities.r->expr.xreplace({_gen: gen}).xreplace({_gen: gen}).func(v, 0)
A:sympy.solvers.inequalities.discontinuities->set(domain.boundary - FiniteSet(domain.inf, domain.sup))
A:sympy.solvers.inequalities.critical_points->FiniteSet(*solns + singularities + list(discontinuities)).intersection(Interval(domain.inf, domain.sup, domain.inf not in domain, domain.sup not in domain))
A:sympy.solvers.inequalities.sifted->sift(critical_points, lambda x: x.is_extended_real)
A:sympy.solvers.inequalities.reals->sorted(reals)
A:sympy.solvers.inequalities.im_sol->FiniteSet()
A:sympy.solvers.inequalities.a->solveset(im(expanded_e), gen, domain)
A:sympy.solvers.inequalities.valid_start->valid(start)
A:sympy.solvers.inequalities.valid_z->valid(z)
A:sympy.solvers.inequalities.pt->_pt(start, z)
A:sympy.solvers.inequalities.make_real->make_real.intersect(im_sol).intersect(im_sol)
A:sympy.solvers.inequalities._valid->valid(x)
A:sympy.solvers.inequalities.p->Poly(expr)
A:sympy.solvers.inequalities.okoo->classify(ie, s, oo)
A:sympy.solvers.inequalities.oknoo->classify(ie, s, -oo)
A:sympy.solvers.inequalities.(b, ax)->Poly(expr).as_expr().as_independent(s, as_Add=True)
A:sympy.solvers.inequalities.ef->factor_terms(e)
A:sympy.solvers.inequalities.(a, e)->factor_terms(e).as_independent(s, as_Add=False)
A:sympy.solvers.inequalities.current_denoms->denoms(rv)
A:sympy.solvers.inequalities.c->_solve_inequality(Eq(d, 0), s, linear=linear)
A:sympy.solvers.inequalities.gens->set().union(*[i.free_symbols for i in inequalities])
A:sympy.solvers.inequalities.components->expr.xreplace({_gen: gen}).xreplace({_gen: gen}).find(lambda u: u.has(gen) and (u.is_Function or (u.is_Pow and (not u.exp.is_Integer))))
A:sympy.solvers.inequalities.i->Eq(i, 0)
sympy.reduce_abs_inequalities(exprs,gen)
sympy.reduce_abs_inequality(expr,rel,gen)
sympy.reduce_inequalities(inequalities,symbols=[])
sympy.solve_poly_inequality(poly,rel)
sympy.solve_rational_inequalities(eqs)
sympy.solve_univariate_inequality(expr,gen,relational=True,domain=S.Reals,continuous=False)
sympy.solvers.inequalities._pt(start,end)
sympy.solvers.inequalities._reduce_inequalities(inequalities,symbols)
sympy.solvers.inequalities._solve_inequality(ie,s,linear=False)
sympy.solvers.inequalities.reduce_abs_inequalities(exprs,gen)
sympy.solvers.inequalities.reduce_abs_inequality(expr,rel,gen)
sympy.solvers.inequalities.reduce_inequalities(inequalities,symbols=[])
sympy.solvers.inequalities.reduce_rational_inequalities(exprs,gen,relational=True)
sympy.solvers.inequalities.solve_poly_inequalities(polys)
sympy.solvers.inequalities.solve_poly_inequality(poly,rel)
sympy.solvers.inequalities.solve_rational_inequalities(eqs)
sympy.solvers.inequalities.solve_univariate_inequality(expr,gen,relational=True,domain=S.Reals,continuous=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/decompogen.py----------------------------------------
A:sympy.solvers.decompogen.f->sympify(f)
A:sympy.solvers.decompogen.args->list(f.args)
A:sympy.solvers.decompogen.d->decompogen(a, symbol)
A:sympy.solvers.decompogen.fp->Poly(f)
A:sympy.solvers.decompogen.gens->list(filter(lambda x: symbol in x.free_symbols, fp.gens))
A:sympy.solvers.decompogen.f1->sympify(f).subs(gens[0], symbol)
A:sympy.solvers.decompogen.foo->g_s[0].subs(symbol, g_s[1])
sympy.decompogen(f,symbol)
sympy.solvers.decompogen.compogen(g_s,symbol)
sympy.solvers.decompogen.decompogen(f,symbol)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/polysys.py----------------------------------------
A:sympy.solvers.polysys.(polys, opt)->parallel_poly_from_expr(seq, *gens, **args)
A:sympy.solvers.polysys.G->list(reversed(G))
A:sympy.solvers.polysys.p->min(H, key=lambda h: h.degree())
A:sympy.solvers.polysys.q->q.ltrim(-1).ltrim(-1)
A:sympy.solvers.polysys.q_roots->list(roots(q).keys())
A:sympy.solvers.polysys.zeros->min(H, key=lambda h: h.degree()).ground_roots()
A:sympy.solvers.polysys.basis->groebner(system, gens, polys=True)
A:sympy.solvers.polysys.univariate->list(filter(_is_univariate, basis))
A:sympy.solvers.polysys.f->list(filter(_is_univariate, basis)).pop()
A:sympy.solvers.polysys.eq->_subs_root(b, gen, zero)
A:sympy.solvers.polysys.result->_solve_reduced_system(polys, opt.gens, entry=True)
A:sympy.solvers.polysys.domain->args.get('domain')
A:sympy.solvers.polysys.G[i]->g.set_domain(domain)
A:sympy.solvers.polysys.dom->list(filter(_is_univariate, basis)).pop().get_domain()
A:sympy.solvers.polysys.solutions->list(solutions)
A:sympy.solvers.polysys.var_seq->reversed(gens[:-1])
A:sympy.solvers.polysys.vars_seq->postfixes(gens[1:])
A:sympy.solvers.polysys._solutions->set()
A:sympy.solvers.polysys.h->g.ltrim(var).eval(dict(mapping))
A:sympy.solvers.polysys.dom_zero->list(filter(_is_univariate, basis)).pop().get_domain().algebraic_field(zero)
sympy.solve_poly_system(seq,*gens,strict=False,**args)
sympy.solve_triangulated(polys,*gens,**args)
sympy.solvers.polysys.SolveFailed(Exception)
sympy.solvers.polysys.solve_biquadratic(f,g,opt)
sympy.solvers.polysys.solve_generic(polys,opt,strict=False)
sympy.solvers.polysys.solve_poly_system(seq,*gens,strict=False,**args)
sympy.solvers.polysys.solve_triangulated(polys,*gens,**args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/solveset.py----------------------------------------
A:sympy.solvers.solveset.sym->numbered_symbols('a', cls=Dummy, real=True)
A:sympy.solvers.solveset.a->a.replace(*i).replace(*i)
A:sympy.solvers.solveset.f->piecewise_fold(f)
A:sympy.solvers.solveset.mask->list(reversed(mask))
A:sympy.solvers.solveset.x->Dummy('x')
A:sympy.solvers.solveset.f_x->sympify(f_x)
A:sympy.solvers.solveset.y->Dummy('y')
A:sympy.solvers.solveset.(x1, s)->_invert_complex(f_x, FiniteSet(y), x)
A:sympy.solvers.solveset.n->Dummy('n', integer=True)
A:sympy.solvers.solveset.(g, h)->a.replace(*i).replace(*i).as_independent(symbol)
A:sympy.solvers.solveset.base_has_sym->base.has(symbol)
A:sympy.solvers.solveset.expo_has_sym->expo.has(symbol)
A:sympy.solvers.solveset.(num, den)->piecewise_fold(f).as_numer_denom()
A:sympy.solvers.solveset.root->Lambda(n, real_root(n, expo))
A:sympy.solvers.solveset.res->imageset(root, g_ys_pos)
A:sympy.solvers.solveset.(_inv, _set)->_invert_real(base, res, symbol)
A:sympy.solvers.solveset.neg_res->imageset(Lambda(n, -n), res)
A:sympy.solvers.solveset.(s, b)->integer_log(rhs, base)
A:sympy.solvers.solveset.one->Eq(rhs, 1)
A:sympy.solvers.solveset.k->Dummy('k{}'.format(len(g_ys_vars)))
A:sympy.solvers.solveset.exp_invs->Union(*[imageset(Lambda(n, I * (2 * n * pi + arg(g_y)) + log(Abs(g_y))), S.Integers) for g_y in g_ys if g_y != 0])
A:sympy.solvers.solveset.pos->Intersection(g_ys, Interval(0, S.Infinity))
A:sympy.solvers.solveset.parg->_invert_real(f, pos, symbol)
A:sympy.solvers.solveset.narg->_invert_real(-f, pos, symbol)
A:sympy.solvers.solveset.conditions->And(Ne(a_base, 0), Ne(b_base, 0))
A:sympy.solvers.solveset.(g_x, values)->_invert_real(f, Union(imageset(Lambda(n, n), g_ys), imageset(Lambda(n, -n), g_ys)), symbol)
A:sympy.solvers.solveset.condsubs->And(Ne(condnum, 0), Ne(condden, 0)).subs(symbol, p)
A:sympy.solvers.solveset.g->Poly(f.args[0], symbol)
A:sympy.solvers.solveset.valid_solns->_solveset(g, symbol, domain)
A:sympy.solvers.solveset.invalid_solns->_solveset(h, symbol, domain)
A:sympy.solvers.solveset.sol->set(sol).pop()
A:sympy.solvers.solveset.cov->cov.subs(x, symbol / mu).subs(x, symbol / mu)
A:sympy.solvers.solveset.trig_functions->piecewise_fold(f).atoms(sin, cos, tan, sec, cot, csc)
A:sympy.solvers.solveset.poly_ar->Poly(ar, symbol)
A:sympy.solvers.solveset.result->solve_poly_system(basis, *symbols, strict=True)
A:sympy.solvers.solveset.syms->tuple(syms)
A:sympy.solvers.solveset.(munum, muden)->fraction(mu)
A:sympy.solvers.solveset.cond->And(Ne(condnum, 0), Ne(condden, 0))
A:sympy.solvers.solveset.solns->solver(expr, symbol, in_set)
A:sympy.solvers.solveset.num_roots->sum(solns.values())
A:sympy.solvers.solveset.poly->eq.rewrite(Add).as_poly(*symbols, extension=True)
A:sympy.solvers.solveset.deg->eq.rewrite(Add).as_poly(*symbols, extension=True).degree()
A:sympy.solvers.solveset.poly_solns->FiniteSet(*roots(poly, cubics=True, quartics=True, quintics=True).keys())
A:sympy.solvers.solveset.(lhs, rhs_s)->invert_complex(f, 0, symbol, domain)
A:sympy.solvers.solveset.s->Dummy('s')
A:sympy.solvers.solveset.yreal->Dummy('yreal', real=True)
A:sympy.solvers.solveset.yeq->yeq.xreplace({y: yreal}).xreplace({y: yreal})
A:sympy.solvers.solveset.eq->eq.rewrite(Add).rewrite(Add)
A:sympy.solvers.solveset.g_y_s->solveset_solver(yeq, symbol)
A:sympy.solvers.solveset.f_y_sols->solveset_solver(eq, y)
A:sympy.solvers.solveset.solution_set->solveset(f, symbol, domain)
A:sympy.solvers.solveset.domain->continuous_domain(f_q, symbol, domain)
A:sympy.solvers.solveset.q_pos_cond->solve_univariate_inequality(f_q >= 0, symbol, relational=False, domain=domain, continuous=True)
A:sympy.solvers.solveset.q_neg_cond->solve_univariate_inequality(f_q >= 0, symbol, relational=False, domain=domain, continuous=True).complement(domain)
A:sympy.solvers.solveset.sols_q_pos->solveset_real(f_p * f_q + f_r, symbol).intersect(q_pos_cond)
A:sympy.solvers.solveset.sols_q_neg->solveset_real(f_p * -f_q + f_r, symbol).intersect(q_neg_cond)
A:sympy.solvers.solveset.g_s->decompogen(f, symbol)
A:sympy.solvers.solveset.y_s->Intersection(frange, y_s)
A:sympy.solvers.solveset.frange->function_range(g, symbol, domain)
A:sympy.solvers.solveset.solutions->_solveset(L - R, symbol, domain)
A:sympy.solvers.solveset.new_solutions->solveset(Eq(iset.lamda.expr, g), symbol, domain)
A:sympy.solvers.solveset.(coeff, f)->piecewise_fold(f).as_independent(symbol, as_Add=False)
A:sympy.solvers.solveset.(a, h)->piecewise_fold(f).as_independent(symbol)
A:sympy.solvers.solveset.(m, h)->h.as_independent(symbol, as_Add=False)
A:sympy.solvers.solveset.expr_set_pairs->piecewise_fold(f).as_expr_set_pairs(domain)
A:sympy.solvers.solveset.in_set->in_set.as_set().as_set()
A:sympy.solvers.solveset.rhs_s->FiniteSet(*[Mul(*signsimp(i).as_content_primitive()) for i in rhs_s])
A:sympy.solvers.solveset.u->Dummy('u')
A:sympy.solvers.solveset.result_rational->_solve_as_rational(equation, symbol, domain)
A:sympy.solvers.solveset.t_result->Union(*t_results)
A:sympy.solvers.solveset.factored->equation.factor()
A:sympy.solvers.solveset.(_, dep)->equation.factor().as_independent(symbol)
A:sympy.solvers.solveset._result->_solveset(num, symbol, domain)
A:sympy.solvers.solveset.singularities->_solveset(den, symbol, domain)
A:sympy.solvers.solveset.modterms->list(f.atoms(Mod))
A:sympy.solvers.solveset.remainder->discrete_log(m / igcd(m, rhs), rhs, a.base)
A:sympy.solvers.solveset.period->periodicity(f, symbol)
A:sympy.solvers.solveset.remainder_list->nthroot_mod(rhs, expo, m, all_roots=True)
A:sympy.solvers.solveset.unsolved_result->ConditionSet(symbol, Eq(lhs - rhs, 0), domain)
A:sympy.solvers.solveset.(f_x, g_n)->_invert_modular(modterm, rhs, n, symbol)
A:sympy.solvers.solveset.sol_set->ImageSet(Lambda(lamda_vars, sol_set), *base_sets)
A:sympy.solvers.solveset.newlhs->powdenest(lhs)
A:sympy.solvers.solveset.neweq->factor(newlhs - rhs)
A:sympy.solvers.solveset.(a, b)->list(ordered(lhs.args))
A:sympy.solvers.solveset.(a_base, a_exp)->a_term.as_base_exp()
A:sympy.solvers.solveset.(b_base, b_exp)->b_term.as_base_exp()
A:sympy.solvers.solveset.new_lhs->logcombine(lhs, force=True)
A:sympy.solvers.solveset.term_factors->list(_term_factors(f.expand()))
A:sympy.solvers.solveset.no_of_symbols->len([arg for arg in term_factors if arg.has(symbol)])
A:sympy.solvers.solveset.no_of_trig->len([arg for arg in term_factors if arg.has(HyperbolicFunction, TrigonometricFunction)])
A:sympy.solvers.solveset.symbol->free_symbols.pop()
A:sympy.solvers.solveset.b->Matrix(n, 1, [-i for i in c])
A:sympy.solvers.solveset.(f, s, swap)->recast_to_symbols([f], [symbol])
A:sympy.solvers.solveset.rv->solveset(f.xreplace({symbol: x}), x, domain)
A:sympy.solvers.solveset._rv->solveset(f.xreplace({symbol: x}), x, domain).xreplace({x: symbol})
A:sympy.solvers.solveset.(f, mask)->_masked(f, Abs)
A:sympy.solvers.solveset.e->e.func(e.args[0].rewrite(Piecewise)).func(e.args[0].rewrite(Piecewise))
A:sympy.solvers.solveset.rep[sym]->Symbol(sym.name, real=True)
A:sympy.solvers.solveset.solset->Intersection(*solsets)
A:sympy.solvers.solveset.eqs->sorted(eqs, key=lambda eq: len(eq.free_symbols & set(syms)))
A:sympy.solvers.solveset.i->tuple(syms).index(sym)
A:sympy.solvers.solveset.sol_others->_solveset_multi(eqsp_sub, symsp, domainsp)
A:sympy.solvers.solveset.fun->Lambda((symsp,), symsp[:i] + (s,) + symsp[i:])
A:sympy.solvers.solveset.solution->solveset(f, symbol, domain).intersect(domain)
A:sympy.solvers.solveset.symset->set(symbols)
A:sympy.solvers.solveset.(d, c)->_linear_eq_to_dict([eq], symset)
A:sympy.solvers.solveset.equations->list(equations)
A:sympy.solvers.solveset.(eq, c)->_linear_eq_to_dict(equations, symbols)
A:sympy.solvers.solveset.ix->dict(zip(symbols, range(m)))
A:sympy.solvers.solveset.A->zeros(*shape)
A:sympy.solvers.solveset.sym_gen->isinstance(symbols, GeneratorType)
A:sympy.solvers.solveset.gen->numbered_symbols(name)
A:sympy.solvers.solveset.rows->zeros(*shape).tolist()
A:sympy.solvers.solveset.(eqs, ring)->sympy_eqs_to_ring(eqs, symbols)
A:sympy.solvers.solveset.condition_set->ConditionSet(Tuple(*symbols), And(*eqs), S.Complexes ** len(symbols))
A:sympy.solvers.solveset.unsolved->list(filter(lambda x: x not in solved_symbols, all_symbols))
A:sympy.solvers.solveset.eqs_in_better_order->list(ordered(system, lambda _: len(_unsolved_syms(_))))
A:sympy.solvers.solveset.new_value->Complement(new_value, complement_set)
A:sympy.solvers.solveset.res_copy[key_res]->set(new_value).pop()
A:sympy.solvers.solveset.rnew_copy->res.copy().copy()
A:sympy.solvers.solveset.rnew_copy[key_res]->value_res.subs(dummy_n, 0)
A:sympy.solvers.solveset.satisfy_exclude->_check_exclude(rnew, imgset_yes)
A:sympy.solvers.solveset.dummy_list->list(sol.atoms(Dummy))
A:sympy.solvers.solveset.dummy_zip->zip(dummy_list, local_n_list)
A:sympy.solvers.solveset.lam->Lambda(local_n, sol.subs(dummy_zip))
A:sympy.solvers.solveset.rnew[sym]->imgst.lamda(*[0 for i in range(0, len(imgst.lamda.variables))])
A:sympy.solvers.solveset.(newresult, rnew, delete_soln)->_append_eq(eq, newresult, rnew, delete_soln)
A:sympy.solvers.solveset.got_symbol->set()
A:sympy.solvers.solveset.dummy_n->value_res.lamda.expr.atoms(Dummy).pop()
A:sympy.solvers.solveset.eq2->eq.rewrite(Add).rewrite(Add).subs(res).expand()
A:sympy.solvers.solveset.unsolved_syms->_unsolved_syms(eq2, sort=True)
A:sympy.solvers.solveset.(newresult, delete_res)->_append_new_soln(rnew, sym, sol, imgset_yes, soln_imageset, original_imageset, newresult)
A:sympy.solvers.solveset.(depen1, depen2)->eq.rewrite(Add).rewrite(Add).subs(res).expand().rewrite(Add).as_independent(*unsolved_syms)
A:sympy.solvers.solveset.soln->nonlinsolve(system, symbols)
A:sympy.solvers.solveset.(soln, soln_imageset)->_extract_main_soln(sym, soln, soln_imageset)
A:sympy.solvers.solveset.(sol, soln_imageset)->_extract_main_soln(sym, sol, soln_imageset)
A:sympy.solvers.solveset.rnew->imageset(root, g_ys_pos).copy()
A:sympy.solvers.solveset.rnew[k]->v.subs(sym, sol)
A:sympy.solvers.solveset.(new_result_real, solve_call1, cnd_call1)->_solve_using_known_values(old_result, solveset_real)
A:sympy.solvers.solveset.(new_result_complex, solve_call2, cnd_call2)->_solve_using_known_values(old_result, solveset_complex)
A:sympy.solvers.solveset.solved_symbols->imageset(root, g_ys_pos).keys()
A:sympy.solvers.solveset.result_all_variables->add_intersection_complement(result_all_variables, intersections, complements)
A:sympy.solvers.solveset._soln->FiniteSet(*[(s,) for s in soln])
A:sympy.solvers.solveset._symbols->list(symbols)
A:sympy.solvers.solveset.basis->basis.fglm('lex').fglm('lex')
A:sympy.solvers.solveset.dict_sym_value->dict(list(zip(symbols, res)))
A:sympy.solvers.solveset.denominators->set()
A:sympy.solvers.solveset.without_radicals->unrad(simplify(eq), *symbols)
A:sympy.solvers.solveset.inexact->any((not p.domain.is_Exact for p in polys))
A:sympy.solvers.solveset.poly_eqs->list(groebner(polys, symbols, order='lex', polys=False))
A:sympy.solvers.solveset.symbols->list(map(_sympify, symbols))
A:sympy.solvers.solveset.(system, symbols, swap)->recast_to_symbols(system, symbols)
A:sympy.solvers.solveset.(polys, polys_expr, nonpolys, denominators, unrad_changed)->_separate_poly_nonpoly(system, symbols)
A:sympy.solvers.solveset.(poly_sol, poly_eqs)->_handle_poly(polys, symbols)
A:sympy.solvers.solveset.poly_syms->set().union(*(eq.free_symbols for eq in polys))
A:sympy.solvers.solveset.unrad_syms->set().union(*(eq.free_symbols for eq in unrad_changed))
A:sympy.solvers.solveset.subs_res->substitution(remaining, symbols, result=poly_sol, exclude=denominators)
sympy.linear_eq_to_matrix(equations,*symbols)
sympy.linsolve(system,*symbols)
sympy.nonlinsolve(system,*symbols)
sympy.solvers.solveset.NonlinearError(ValueError)
sympy.solvers.solveset._SolveTrig1Error(Exception)
sympy.solvers.solveset._domain_check(f,symbol,p)
sympy.solvers.solveset._handle_poly(polys,symbols)
sympy.solvers.solveset._handle_positive_dimensional(polys,symbols,denominators)
sympy.solvers.solveset._handle_zero_dimensional(polys,symbols,system)
sympy.solvers.solveset._invert(f_x,y,x,domain=S.Complexes)
sympy.solvers.solveset._invert_abs(f,g_ys,symbol)
sympy.solvers.solveset._invert_complex(f,g_ys,symbol)
sympy.solvers.solveset._invert_modular(modterm,rhs,n,symbol)
sympy.solvers.solveset._invert_real(f,g_ys,symbol)
sympy.solvers.solveset._is_exponential(f,symbol)
sympy.solvers.solveset._is_finite_with_finite_vars(f,domain=S.Complexes)
sympy.solvers.solveset._is_function_class_equation(func_class,f,symbol)
sympy.solvers.solveset._is_lambert(f,symbol)
sympy.solvers.solveset._is_logarithmic(f,symbol)
sympy.solvers.solveset._is_modular(f,symbol)
sympy.solvers.solveset._masked(f,*atoms)
sympy.solvers.solveset._return_conditionset(eqs,symbols)
sympy.solvers.solveset._separate_poly_nonpoly(system,symbols)
sympy.solvers.solveset._solve_abs(f,symbol,domain)
sympy.solvers.solveset._solve_as_poly(f,symbol,domain=S.Complexes)
sympy.solvers.solveset._solve_as_rational(f,symbol,domain)
sympy.solvers.solveset._solve_exponential(lhs,rhs,symbol,domain)
sympy.solvers.solveset._solve_logarithm(lhs,rhs,symbol,domain)
sympy.solvers.solveset._solve_modular(f,symbol,domain)
sympy.solvers.solveset._solve_radical(f,unradf,symbol,solveset_solver)
sympy.solvers.solveset._solve_trig(f,symbol,domain)
sympy.solvers.solveset._solve_trig1(f,symbol,domain)
sympy.solvers.solveset._solve_trig2(f,symbol,domain)
sympy.solvers.solveset._solveset(f,symbol,domain,_check=False)
sympy.solvers.solveset._solveset_multi(eqs,syms,domains)
sympy.solvers.solveset._solveset_work(system,symbols)
sympy.solvers.solveset._term_factors(f)
sympy.solvers.solveset._transolve(f,symbol,domain)
sympy.solvers.solveset.domain_check(f,symbol,p)
sympy.solvers.solveset.invert_real(f_x,y,x)
sympy.solvers.solveset.linear_coeffs(eq,*syms,dict=False)
sympy.solvers.solveset.linear_eq_to_matrix(equations,*symbols)
sympy.solvers.solveset.linsolve(system,*symbols)
sympy.solvers.solveset.nonlinsolve(system,*symbols)
sympy.solvers.solveset.solve_decomposition(f,symbol,domain)
sympy.solvers.solveset.solveset(f,symbol=None,domain=S.Complexes)
sympy.solvers.solveset.solveset_complex(f,symbol)
sympy.solvers.solveset.solveset_real(f,symbol)
sympy.solvers.solveset.solvify(f,symbol,domain)
sympy.solvers.solveset.substitution(system,symbols,result=[{}],known_symbols=[],exclude=[],all_symbols=None)
sympy.solveset(f,symbol=None,domain=S.Complexes)
sympy.substitution(system,symbols,result=[{}],known_symbols=[],exclude=[],all_symbols=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/recurr.py----------------------------------------
A:sympy.solvers.recurr.f->f.expand().collect(y.func(Wild('m', integer=True))).expand().collect(y.func(Wild('m', integer=True)))
A:sympy.solvers.recurr.((exp,), coeff)->polys[i].LT()
A:sympy.solvers.recurr.x->Dummy('x')
A:sympy.solvers.recurr.nni_roots->list(roots(res, h, filter='Z', predicate=lambda r: r >= 0).keys())
A:sympy.solvers.recurr.N->int(max(N))
A:sympy.solvers.recurr.solutions->solve(E, *C)
A:sympy.solvers.recurr.result->solve(equations, *symbols)
A:sympy.solvers.recurr.D->_delta(polys[j].as_expr(), k)
A:sympy.solvers.recurr.I->_one_vector(d + 1)
A:sympy.solvers.recurr.B->quo(B, d.subs(n, n - i), n)
A:sympy.solvers.recurr.V->Matrix(U, A, lambda i, j: int(i == j))
A:sympy.solvers.recurr.v->_zero_vector(A)
A:sympy.solvers.recurr.denom->alpha[-A].subs(x, i)
A:sympy.solvers.recurr.G->_zero_vector(U)
A:sympy.solvers.recurr.P[i]->(P[i - 1] * (n - a - i + 1) / i).expand()
A:sympy.solvers.recurr.Q[i]->Add(*[(v * p).expand() for (v, p) in zip(V[:, i], P)])
A:sympy.solvers.recurr.h->Dummy('h')
A:sympy.solvers.recurr.coeffs->list(map(sympify, coeffs))
A:sympy.solvers.recurr.A->quo(A, d, n)
A:sympy.solvers.recurr.res->quo(p, q, h)
A:sympy.solvers.recurr.(p, q)->polys[i].nth(d).as_numer_denom()
A:sympy.solvers.recurr.d->gcd(A, B.subs(n, n + i), n)
A:sympy.solvers.recurr.g->gcd(coeffs[i], denoms[i], n)
A:sympy.solvers.recurr.numers[i]->quo(coeffs[i], g, n)
A:sympy.solvers.recurr.denoms[i]->quo(denoms[i], g, n)
A:sympy.solvers.recurr.s->hypersimp(g, n)
A:sympy.solvers.recurr.R->rsolve_poly(polys, Mul(*denoms), n)
A:sympy.solvers.recurr.Z->Dummy('Z')
A:sympy.solvers.recurr.p_factors->list(roots(p, n).keys())
A:sympy.solvers.recurr.q_factors->list(roots(q, n).keys())
A:sympy.solvers.recurr.a->Mul(*[A.subs(n, n + j) for j in range(i)])
A:sympy.solvers.recurr.b->Mul(*[B.subs(n, n + j) for j in range(i, r)])
A:sympy.solvers.recurr.poly->quo(coeffs[i] * a * b, D, n)
A:sympy.solvers.recurr.coeff->polys[i].nth(d)
A:sympy.solvers.recurr.(sol, syms)->rsolve_poly(recurr_coeffs, 0, n, len(symbols), symbols=True)
A:sympy.solvers.recurr.sol->sol.collect(syms).collect(syms)
A:sympy.solvers.recurr.ratio->simplify(ratio)
A:sympy.solvers.recurr.K->abs(K_min)
A:sympy.solvers.recurr.sk->list(zip(numbered_symbols('C'), kernel))
A:sympy.solvers.recurr.k->Wild('k', exclude=(n,))
A:sympy.solvers.recurr.h_part->defaultdict(list)
A:sympy.solvers.recurr.(coeff, dep)->gcd(coeffs[i], denoms[i], n).as_coeff_mul(y.func)
A:sympy.solvers.recurr.h_part[k]->simplify(coeff)
A:sympy.solvers.recurr.i_part->i_part.subs(n, n + K).expand().subs(n, n + K).expand()
A:sympy.solvers.recurr.common->common.subs(n, n + K).expand().subs(n, n + K).expand()
A:sympy.solvers.recurr.(i_numer, i_denom)->i_part.subs(n, n + K).expand().subs(n, n + K).expand().as_numer_denom()
A:sympy.solvers.recurr.(numer, denom)->polys[i].nth(d).as_numer_denom()
A:sympy.solvers.recurr.K_min->min(h_part.keys())
A:sympy.solvers.recurr.H_part->defaultdict(lambda : S.Zero)
A:sympy.solvers.recurr.H_part[k + K]->polys[i].nth(d).subs(n, n + K).expand()
A:sympy.solvers.recurr.K_max->max(H_part.keys())
A:sympy.solvers.recurr.i->int(k.args[0])
A:sympy.solvers.recurr.solution->solution.subs(result).subs(result)
sympy.rsolve(f,y,init=None)
sympy.rsolve_hyper(coeffs,f,n,**hints)
sympy.rsolve_poly(coeffs,f,n,shift=0,**hints)
sympy.rsolve_ratio(coeffs,f,n,**hints)
sympy.solvers.recurr.rsolve(f,y,init=None)
sympy.solvers.recurr.rsolve_hyper(coeffs,f,n,**hints)
sympy.solvers.recurr.rsolve_poly(coeffs,f,n,shift=0,**hints)
sympy.solvers.recurr.rsolve_ratio(coeffs,f,n,**hints)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/pde.py----------------------------------------
A:sympy.solvers.pde.solvefun->Function('F')
A:sympy.solvers.pde.hints->_desolve(eq, func=func, hint=hint, simplify=True, type='pde', **kwargs)
A:sympy.solvers.pde.eq->Add(*[simplify(Add(*[term / i for i in div])) for term in eq.args])
A:sympy.solvers.pde.all_->_desolve(eq, func=func, hint=hint, simplify=True, type='pde', **kwargs).pop('all', False)
A:sympy.solvers.pde.gethints->classify_pde(eq, dict=True)
A:sympy.solvers.pde.rv->_helper_simplify(eq, hint, hints[hint]['func'], hints[hint]['order'], hints[hint][hint], solvefun)
A:sympy.solvers.pde.(prep, func_)->_preprocess(eq, func)
A:sympy.solvers.pde.fx->f(x, y).diff(x)
A:sympy.solvers.pde.fy->f(x, y).diff(y)
A:sympy.solvers.pde.order->ode_order(eq, f(x, y))
A:sympy.solvers.pde.a->Wild('a', exclude=[f(x, y)])
A:sympy.solvers.pde.b->Wild('b', exclude=[f(x, y), fx, fy])
A:sympy.solvers.pde.c->Wild('c', exclude=[f(x, y), fx, fy])
A:sympy.solvers.pde.d->Wild('d', exclude=[f(x, y), fx, fy])
A:sympy.solvers.pde.e->Wild('e', exclude=[f(x, y), fx, fy])
A:sympy.solvers.pde.n->Wild('n', exclude=[x, y])
A:sympy.solvers.pde.var->set(combinations_with_replacement((x, y), order))
A:sympy.solvers.pde.dummyvar->set(combinations_with_replacement((x, y), order)).copy()
A:sympy.solvers.pde.coeff->Add(*[simplify(Add(*[term / i for i in div])) for term in eq.args]).coeff(f(x, y).diff(*i))
A:sympy.solvers.pde.match->Add(*[simplify(Add(*[term / i for i in div])) for term in eq.args]).coeff(f(x, y).diff(*i)).match(a * f(x, y) ** n)
A:sympy.solvers.pde.reduced_eq->collect(reduced_eq, f(x, y))
A:sympy.solvers.pde.r->collect(reduced_eq, f(x, y)).match(b * fx + c * fy + d * f(x, y) + e)
A:sympy.solvers.pde.matching_hints['ordered_hints']->tuple(retlist)
A:sympy.solvers.pde.pde->Eq(pde, 0)
A:sympy.solvers.pde.(_, func)->_preprocess(pde.lhs)
A:sympy.solvers.pde.funcs->set().union(funcs)
A:sympy.solvers.pde.func->set().union(funcs).pop()
A:sympy.solvers.pde.sol->dsolve(dummy(x).diff(x) - h, dummy(x))
A:sympy.solvers.pde.solved->solve(sol, func)
A:sympy.solvers.pde.s->simplify(pde.subs(func, sol.rhs).doit())
A:sympy.solvers.pde.(xi, eta)->symbols('xi eta')
A:sympy.solvers.pde.expterm->exp(-S(d) / (b ** 2 + c ** 2) * xi)
A:sympy.solvers.pde.functerm->solvefun(eta)
A:sympy.solvers.pde.solvedict->solve((b * x + c * y - xi, c * x - b * y - eta), x, y)
A:sympy.solvers.pde.tsol->integrate(e / b, x)
A:sympy.solvers.pde.rhs->simplify(rhs / fulldiv).expand()
A:sympy.solvers.pde.dummy->Function('d')
A:sympy.solvers.pde.h->(c / b).subs(y, dummy(x))
A:sympy.solvers.pde.solsym->solsym.pop().pop()
A:sympy.solvers.pde.etat->solve(sol, solsym)[0].subs(dummy(x), y)
A:sympy.solvers.pde.deq->(b * f(x).diff(x) + d * f(x) - e).subs(y, ysub)
A:sympy.solvers.pde.eta->Symbol('eta')
A:sympy.solvers.pde.sym->syms.pop()
A:sympy.solvers.pde.final->dsolve(dummy(x).diff(x) - h, dummy(x)).subs(sym, func(funcarg))
A:sympy.solvers.pde.orig_args->list(fun.args)
A:sympy.solvers.pde.functions->reduce(operator.mul, sep)
A:sympy.solvers.pde.result->Add(*[simplify(Add(*[term / i for i in div])) for term in eq.args]).lhs.subs(fun, functions).doit()
A:sympy.solvers.pde.terms->set()
A:sympy.solvers.pde.div->set()
A:sympy.solvers.pde.(ext, sep)->term.expand().as_independent(dep)
A:sympy.solvers.pde.(temp, sep)->term.expand().as_independent(dep)
A:sympy.solvers.pde.fulldiv->reduce(operator.add, div)
A:sympy.solvers.pde.lhs->simplify(lhs / fulldiv).expand()
sympy.checkpdesol(pde,sol,func=None,solve_for_func=True)
sympy.classify_pde(eq,func=None,dict=False,*,prep=True,**kwargs)
sympy.pde_separate(eq,fun,sep,strategy='mul')
sympy.pde_separate_add(eq,fun,sep)
sympy.pde_separate_mul(eq,fun,sep)
sympy.pdsolve(eq,func=None,hint='default',dict=False,solvefun=None,**kwargs)
sympy.solvers.pde._handle_Integral(expr,func,order,hint)
sympy.solvers.pde._helper_simplify(eq,hint,func,order,match,solvefun)
sympy.solvers.pde._separate(eq,dep,others)
sympy.solvers.pde._simplify_variable_coeff(sol,syms,func,funcarg)
sympy.solvers.pde.checkpdesol(pde,sol,func=None,solve_for_func=True)
sympy.solvers.pde.classify_pde(eq,func=None,dict=False,*,prep=True,**kwargs)
sympy.solvers.pde.pde_1st_linear_constant_coeff(eq,func,order,match,solvefun)
sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous(eq,func,order,match,solvefun)
sympy.solvers.pde.pde_1st_linear_variable_coeff(eq,func,order,match,solvefun)
sympy.solvers.pde.pde_separate(eq,fun,sep,strategy='mul')
sympy.solvers.pde.pde_separate_add(eq,fun,sep)
sympy.solvers.pde.pde_separate_mul(eq,fun,sep)
sympy.solvers.pde.pdsolve(eq,func=None,hint='default',dict=False,solvefun=None,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/solvers.py----------------------------------------
A:sympy.solvers.solvers.orig->list(symbols)
A:sympy.solvers.solvers.symbols->symbols.difference(exclude).difference(exclude)
A:sympy.solvers.solvers.swap_sym[s]->Dummy('X%d' % i)
A:sympy.solvers.solvers.isubs->getattr(i, 'subs', None)
A:sympy.solvers.solvers.dens->_simple_dens(eq, symbols)
A:sympy.solvers.solvers.pot->preorder_traversal(fi)
A:sympy.solvers.solvers.den->denom(p)
A:sympy.solvers.solvers.minimal->flags.get('minimal', False)
A:sympy.solvers.solvers.check->flags.get('check', True)
A:sympy.solvers.solvers.f->lambdify(fargs, f.T, modules)
A:sympy.solvers.solvers.illegal->set(_illegal)
A:sympy.solvers.solvers.numerical->flags.get('numerical', True)
A:sympy.solvers.solvers.val->val.subs(reps).subs(reps)
A:sympy.solvers.solvers.(_, val)->val.subs(reps).subs(reps).as_content_primitive()
A:sympy.solvers.solvers.sol[k]->simplify(sol[k])
A:sympy.solvers.solvers.(val, reps)->posify(val)
A:sympy.solvers.solvers.exval->_mexpand(val, recursive=True)
A:sympy.solvers.solvers.seen->set()
A:sympy.solvers.solvers.nz->fuzzy_not(val.is_zero)
A:sympy.solvers.solvers.default->flags.setdefault(k, bool(flags.get(k, default)))
A:sympy.solvers.solvers.implicit->flags.get('implicit', False)
A:sympy.solvers.solvers.warn->flags.get('warn', False)
A:sympy.solvers.solvers.as_set->flags.get('set', False)
A:sympy.solvers.solvers._symbols->list(uniq(symbols))
A:sympy.solvers.solvers.exclude->set().union(*[e.free_symbols for e in sympify(exclude)])
A:sympy.solvers.solvers.fi->fi.replace(arg, lambda a: arg(a).rewrite(atan2).rewrite(atan)).replace(arg, lambda a: arg(a).rewrite(atan2).rewrite(atan))
A:sympy.solvers.solvers.f[i]->piecewise_fold(fi)
A:sympy.solvers.solvers.(fr, fi)->piecewise_fold(fi).as_real_imag()
A:sympy.solvers.solvers.had->piecewise_fold(fi).atoms(re, im, arg, atan2)
A:sympy.solvers.solvers.(f, symbols, swap_sym)->recast_to_symbols(f, symbols)
A:sympy.solvers.solvers.symset->set(symbols)
A:sympy.solvers.solvers.non_inverts->dict(list(zip(non_inverts, [Dummy() for _ in non_inverts])))
A:sympy.solvers.solvers.flags['_denominators']->_simple_dens(f[0], symbols)
A:sympy.solvers.solvers.solution->_remove_duplicate_solutions(solution)
A:sympy.solvers.solvers.(linear, solution)->_solve_system(f, symbols, **flags)
A:sympy.solvers.solvers.as_dict->flags.get('dict', False)
A:sympy.solvers.solvers.test->check_assumptions(val, **symb.assumptions0)
A:sympy.solvers.solvers.k->max((k for k in s.values()), key=lambda x: (len(x.free_symbols), default_sort_key(x)))
A:sympy.solvers.solvers.sol->_vsolve(c, x, **uflags)
A:sympy.solvers.solvers.got_s->set()
A:sympy.solvers.solvers.rhs_s->set()
A:sympy.solvers.solvers.(xi, v)->solve_linear(f, symbols=[s])
A:sympy.solvers.solvers.v->_eval_simplify(ratio=2, measure=lambda x: 1)
A:sympy.solvers.solvers.soln->_vsolve(pos, u, **flags)
A:sympy.solvers.solvers.flags['check']checkdenscheck->flags.pop('check', True)
A:sympy.solvers.solvers.result->solve_poly_system(polys, *symbols)
A:sympy.solvers.solvers.candidates->_vsolve(expr, symbol, **flags)
A:sympy.solvers.solvers.cond->And(*args)
A:sympy.solvers.solvers._eval_simplify->getattr(v, '_eval_simplify', None)
A:sympy.solvers.solvers.(f_num, sol)->solve_linear(f, symbols=symbols)
A:sympy.solvers.solvers.poly->zz.xreplace(dict(zip((a, A, b, B, c, d), (aa, AA, bb, BB, cc, dd)))).as_poly(*gens)
A:sympy.solvers.solvers.simplified_f->simplify(f_num)
A:sympy.solvers.solvers.(b, e)->sqrtdenest(rhs).as_base_exp()
A:sympy.solvers.solvers.(c, ee)->expand_mul(e).as_coeff_Mul()
A:sympy.solvers.solvers.(bases, qs)->list(zip(*[_as_base_q(g) for g in gens]))
A:sympy.solvers.solvers.bases->set()
A:sympy.solvers.solvers.(newf, _d)->(TR2i(_args[0] / _args[1]) + 1).as_numer_denom()
A:sympy.solvers.solvers.newf->TR1(f_num).rewrite(tan)
A:sympy.solvers.solvers.funcs->list(ordered(funcs))
A:sympy.solvers.solvers.t->Dummy('t')
A:sympy.solvers.solvers.ftry->f_num.replace(lambda w: w.is_Pow or isinstance(w, exp), _expand).subs(u, t)
A:sympy.solvers.solvers.cv_sols->_solve(ftry, t, **flags)
A:sympy.solvers.solvers.u->Dummy('bivariate-cov')
A:sympy.solvers.solvers.inv->_vsolve(covsym ** lcm - b, x, **uflags)
A:sympy.solvers.solvers.e->expand_mul(e)
A:sympy.solvers.solvers.deg->zz.xreplace(dict(zip((a, A, b, B, c, d), (aa, AA, bb, BB, cc, dd)))).as_poly(*gens).degree()
A:sympy.solvers.solvers.flags['simplify']->flags.get('simplify', False)
A:sympy.solvers.solvers.rv->sorted(rv, key=key)
A:sympy.solvers.solvers.solutions_set->set()
A:sympy.solvers.solvers.solset->frozenset(sol.items())
A:sympy.solvers.solvers.symsset->set(symbols)
A:sympy.solvers.solvers.subexprs->connected_components(G)
A:sympy.solvers.solvers.subsyms->sorted(subsyms, key=lambda x: sym_indices[x])
A:sympy.solvers.solvers.(_linear, subsol)->_solve_system(subexpr, subsyms, **flags)
A:sympy.solvers.solvers.manual->flags.get('manual', False)
A:sympy.solvers.solvers.checkdenscheck->flags.get('check', True)
A:sympy.solvers.solvers.(i, d)->a.as_independent(*symbols)
A:sympy.solvers.solvers.matrix->zeros(n, m + 1)
A:sympy.solvers.solvers.j->monom.index(1)
A:sympy.solvers.solvers.solved_syms->list(got_s)
A:sympy.solvers.solvers.free->list(ordered(free.intersection(symbols)))
A:sympy.solvers.solvers.res->solve_poly_system(polys, *syms)
A:sympy.solvers.solvers.ep->expand_mul(e).as_poly(sym)
A:sympy.solvers.solvers.legal->set(symbols)
A:sympy.solvers.solvers.eq2->zz.xreplace(dict(zip((a, A, b, B, c, d), (aa, AA, bb, BB, cc, dd)))).subs(r)
A:sympy.solvers.solvers.b->Mul(*info[i][RAD])
A:sympy.solvers.solvers.ok_syms->_ok_syms(eq2, sort=True)
A:sympy.solvers.solvers.rnew->Rational(d, s).copy()
A:sympy.solvers.solvers.rnew[k]->_eval_simplify(ratio=2, measure=lambda x: 1).subs(s, sol)
A:sympy.solvers.solvers.iset->set(rnew.items())
A:sympy.solvers.solvers.default_simplify->bool(failed)
A:sympy.solvers.solvers.r[k]->simplify(r[k])
A:sympy.solvers.solvers.(n, d)->(e_l * lhs.exp).as_numer_denom()
A:sympy.solvers.solvers.derivs->defaultdict(list)
A:sympy.solvers.solvers.newn->n.subs(derivs[xi])
A:sympy.solvers.solvers.dnewn_dxi->n.subs(derivs[xi]).diff(xi)
A:sympy.solvers.solvers.vi->expand_mul(vi.subs(irep))
A:sympy.solvers.solvers.quick->flags.get('quick', False)
A:sympy.solvers.solvers.s0->solve_linear_system(system, *symbols, **flags)
A:sympy.solvers.solvers.s->solve_linear_system(subm, *[symbols[i] for i in nonzeros])
A:sympy.solvers.solvers.solution[k]->_eval_simplify(ratio=2, measure=lambda x: 1).subs(determined)
A:sympy.solvers.solvers.x->findroot(f, x0, J=J, **kwargs)
A:sympy.solvers.solvers.N->len(symbols)
A:sympy.solvers.solvers.bestsol->minsolve_linear_system(system, *symbols, quick=True)
A:sympy.solvers.solvers.n0->len([x for x in bestsol.values() if x != 0])
A:sympy.solvers.solvers.s[k]->_eval_simplify(ratio=2, measure=lambda x: 1).subs(subs)
A:sympy.solvers.solvers.eqs->list(system * Matrix(symbols + (-1,)))
A:sympy.solvers.solvers.(eqs, ring)->sympy_eqs_to_ring(eqs, symbols)
A:sympy.solvers.solvers.ceq->cancel(eq)
A:sympy.solvers.solvers.xeq->_mexpand(ceq.as_numer_denom()[0], recursive=True)
A:sympy.solvers.solvers.(ind, dep)->_mexpand(ceq.as_numer_denom()[0], recursive=True).as_independent(*coeffs, as_Add=True)
A:sympy.solvers.solvers.(e, s, _)->recast_to_symbols([xeq], syms)
A:sympy.solvers.solvers.cset->set(coeffs)
A:sympy.solvers.solvers.(e, gens, _)->recast_to_symbols([xeq], list(gens))
A:sympy.solvers.solvers.system->list(collect(xeq, gens, evaluate=False).values())
A:sympy.solvers.solvers.list_->M.flat()
A:sympy.solvers.solvers.term->Mul(*fac)
A:sympy.solvers.solvers.d->det(M)
A:sympy.solvers.solvers.ret->zeros(n)
A:sympy.solvers.solvers.di->det(M.minor_submatrix(i, j))
A:sympy.solvers.solvers.(rhs, lhs)->_invert(eq, sym)
A:sympy.solvers.solvers.sol_base->_vsolve(lhs.base, sym, **flags)
A:sympy.solvers.solvers._->Dummy()
A:sympy.solvers.solvers.eq->zz.xreplace(dict(zip((a, A, b, B, c, d), (aa, AA, bb, BB, cc, dd))))
A:sympy.solvers.solvers.e_rat->simplify(posify(e_rat)[0])
A:sympy.solvers.solvers.(e, t)->integer_log(rhs.p, d)
A:sympy.solvers.solvers.r->Rational(d, s)
A:sympy.solvers.solvers.(b_l, e_l)->powsimp(powdenest(lhs)).base.as_base_exp()
A:sympy.solvers.solvers.ok->_eq.subs(sym, ns).equals(0)
A:sympy.solvers.solvers.rewrite->powsimp(powdenest(lhs)).rewrite(exp)
A:sympy.solvers.solvers.logs->zz.xreplace(dict(zip((a, A, b, B, c, d), (aa, AA, bb, BB, cc, dd)))).atoms(log)
A:sympy.solvers.solvers.spow->min({i.exp for j in logs for i in j.atoms(Pow) if i.base == sym} or {1})
A:sympy.solvers.solvers.ueq->zz.xreplace(dict(zip((a, A, b, B, c, d), (aa, AA, bb, BB, cc, dd)))).subs(p, u)
A:sympy.solvers.solvers.g->_filtered_gens(poly, sym)
A:sympy.solvers.solvers.up_or_log->set()
A:sympy.solvers.solvers.gisimp->powdenest(expand_power_exp(gi))
A:sympy.solvers.solvers.eq_down->expand_log(expand_power_exp(eq)).subs(dict(list(zip(up_or_log, [0] * len(up_or_log)))))
A:sympy.solvers.solvers.sols->_solve_lambert(_eq, sym, g)
A:sympy.solvers.solvers.ns->nsimplify(s)
A:sympy.solvers.solvers.gpu->bivariate_type(lhs - rhs, *g)
A:sympy.solvers.solvers.inversion->_tsolve(g - u, sym, **flags)
A:sympy.solvers.solvers.(pos, reps)->posify(lhs - rhs)
A:sympy.solvers.solvers.mpmath.mp.dps->kwargs.pop('prec')
A:sympy.solvers.solvers.modules->kwargs.get('modules', ['mpmath'])
A:sympy.solvers.solvers.x0->list(x0)
A:sympy.solvers.solvers.fargs->syms.copy().pop()
A:sympy.solvers.solvers.verbose->kwargs.get('verbose', False)
A:sympy.solvers.solvers.J->lambdify(fargs, J, modules)
A:sympy.solvers.solvers.dointpow->bool(kwargs.get('integer_power', False))
A:sympy.solvers.solvers.(indep, dep)->powsimp(powdenest(lhs)).as_independent(*symbols)
A:sympy.solvers.solvers.lhs->powsimp(powdenest(lhs))
A:sympy.solvers.solvers.(a, b)->ordered(lhs.args)
A:sympy.solvers.solvers.(ai, ad)->a.as_independent(*symbols)
A:sympy.solvers.solvers.(bi, bd)->Mul(*info[i][RAD]).as_independent(*symbols)
A:sympy.solvers.solvers.(a_base, a_exp)->ad.as_base_exp()
A:sympy.solvers.solvers.(b_base, b_exp)->bd.as_base_exp()
A:sympy.solvers.solvers._lhs->powsimp(ad / bd)
A:sympy.solvers.solvers.rhs->powsimp(powdenest(lhs)).inverse()(rhs)
A:sympy.solvers.solvers.margs->list(Mul.make_args(eq))
A:sympy.solvers.solvers._take->flags.setdefault('_take', _take)
A:sympy.solvers.solvers.rads->set()
A:sympy.solvers.solvers.q->_Q(g)
A:sympy.solvers.solvers.lcm->ilcm(lcm, q)
A:sympy.solvers.solvers.(rads, bases, lcm)->_rads_bases_lcm(poly)
A:sympy.solvers.solvers.covsym->Dummy('p', nonnegative=True)
A:sympy.solvers.solvers.newsyms->set()
A:sympy.solvers.solvers.drad->dict(zip(rads, range(len(rads))))
A:sympy.solvers.solvers.args->sympy.core.Add.make_args(poly.as_expr())
A:sympy.solvers.solvers.common->set(t.as_poly().gens).intersection(rads)
A:sympy.solvers.solvers.key->tuple(sorted([drad[i] for i in common]))
A:sympy.solvers.solvers.others->Add(*rterms.pop(()))
A:sympy.solvers.solvers.rterms->list(rterms[0].args)
A:sympy.solvers.solvers.depth->sqrt_depth(eq)
A:sympy.solvers.solvers.i0(_rads0, _bases0, lcm0)->_rads_bases_lcm(r0.as_poly())
A:sympy.solvers.solvers.i1(_rads1, _bases1, lcm1)->_rads_bases_lcm(r1.as_poly())
A:sympy.solvers.solvers._rads1->Mul(*_rads1)
A:sympy.solvers.solvers.tmp->unrad(neweq, covsym)
A:sympy.solvers.solvers.(aa, AA)->_t(0)
A:sympy.solvers.solvers.(bb, BB)->_t(1)
A:sympy.solvers.solvers.neq->unrad(eq, *syms, **flags)
A:sympy.solvers.solvers.(eq, cov)->_canonical(eq, cov)
sympy.checksol(f,symbol,sol=None,**flags)
sympy.det_quick(M,method=None)
sympy.inv_quick(M)
sympy.nsolve(*args,dict=False,**kwargs)
sympy.solve(f,*symbols,**flags)
sympy.solve_linear(lhs,rhs=0,symbols=[],exclude=[])
sympy.solve_linear_system(system,*symbols,**flags)
sympy.solve_linear_system_LU(matrix,syms)
sympy.solve_undetermined_coeffs(equ,coeffs,*syms,**flags)
sympy.solvers.solvers._invert(eq,*symbols,**kwargs)
sympy.solvers.solvers._ispow(e)
sympy.solvers.solvers._remove_duplicate_solutions(solutions:list[dict[Expr,Expr]])->list[dict[Expr, Expr]]
sympy.solvers.solvers._simple_dens(f,symbols)
sympy.solvers.solvers._solve(f,*symbols,**flags)
sympy.solvers.solvers._solve_system(exprs,symbols,**flags)
sympy.solvers.solvers._solve_undetermined(g,symbols,flags)
sympy.solvers.solvers._tsolve(eq,sym,**flags)
sympy.solvers.solvers._vsolve(e,s,**flags)
sympy.solvers.solvers.checksol(f,symbol,sol=None,**flags)
sympy.solvers.solvers.denoms(eq,*symbols)
sympy.solvers.solvers.det_minor(M)
sympy.solvers.solvers.det_perm(M)
sympy.solvers.solvers.det_quick(M,method=None)
sympy.solvers.solvers.inv_quick(M)
sympy.solvers.solvers.minsolve_linear_system(system,*symbols,**flags)
sympy.solvers.solvers.nsolve(*args,dict=False,**kwargs)
sympy.solvers.solvers.recast_to_symbols(eqs,symbols)
sympy.solvers.solvers.solve(f,*symbols,**flags)
sympy.solvers.solvers.solve_linear(lhs,rhs=0,symbols=[],exclude=[])
sympy.solvers.solvers.solve_linear_system(system,*symbols,**flags)
sympy.solvers.solvers.solve_linear_system_LU(matrix,syms)
sympy.solvers.solvers.solve_undetermined_coeffs(equ,coeffs,*syms,**flags)
sympy.solvers.solvers.unrad(eq,*syms,**flags)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/deutils.py----------------------------------------
A:sympy.solvers.deutils.derivs->expr.atoms(Derivative)
A:sympy.solvers.deutils.funcs->set().union(*[d.atoms(AppliedUndef) for d in derivs])
A:sympy.solvers.deutils.func->set().union(*[d.atoms(AppliedUndef) for d in derivs]).pop()
A:sympy.solvers.deutils.fvars->set(func.args)
A:sympy.solvers.deutils.eq->expr.subs(reps)
A:sympy.solvers.deutils.a->Wild('a', exclude=[func])
A:sympy.solvers.deutils.rv->len(expr.variables)
A:sympy.solvers.deutils.(eq, func)->_preprocess(eq, func)
A:sympy.solvers.deutils.type->kwargs.get('type', None)
A:sympy.solvers.deutils.xi->kwargs.get('xi')
A:sympy.solvers.deutils.eta->kwargs.get('eta')
A:sympy.solvers.deutils.x0->kwargs.get('x0', 0)
A:sympy.solvers.deutils.terms->kwargs.get('n')
A:sympy.solvers.deutils.hints->kwargs.get('hint', {'default': hint, hint: kwargs['match'], 'order': kwargs['order']})
A:sympy.solvers.deutils.sol->_desolve(eq, func, ics=ics, hint=i, x0=x0, simplify=simplify, prep=prep, classify=False, n=terms, order=hints['order'], match=hints[i], type=type)
sympy.ode_order(expr,func)
sympy.solvers.deutils._desolve(eq,func=None,hint='default',ics=None,simplify=True,*,prep=True,**kwargs)
sympy.solvers.deutils._preprocess(expr,func=None,hint='_Integral')
sympy.solvers.deutils.ode_order(expr,func)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_recurr.py----------------------------------------
A:sympy.solvers.tests.test_recurr.y->Function('y')
A:sympy.solvers.tests.test_recurr.(n, k)->symbols('n,k', integer=True)
A:sympy.solvers.tests.test_recurr.(C0, C1, C2)->symbols('C0,C1,C2')
A:sympy.solvers.tests.test_recurr.solution->rsolve_ratio([-2 * n ** 3 + n ** 2 + 2 * n - 1, 2 * n ** 3 + n ** 2 - 6 * n, -2 * n ** 3 - 11 * n ** 2 - 18 * n - 9, 2 * n ** 3 + 13 * n ** 2 + 22 * n + 8], 0, n)
A:sympy.solvers.tests.test_recurr.q->recurrence_term(c, p)
A:sympy.solvers.tests.test_recurr.yn->rsolve(f, y(n), {y(1): binomial(2 * n + 1, 3)})
A:sympy.solvers.tests.test_recurr.sol->rsolve(f, y(n))
A:sympy.solvers.tests.test_recurr.x->Function('x')
A:sympy.solvers.tests.test_recurr.r->Symbol('r', positive=True)
A:sympy.solvers.tests.test_recurr.theta->Symbol('theta', real=True)
A:sympy.solvers.tests.test_recurr.e->rsolve(f, y(n)).subs({C0: 1, C1: 1, C2: 1, n: 1}).evalf()
A:sympy.solvers.tests.test_recurr.a->Function('a')
A:sympy.solvers.tests.test_recurr.f->Function('f')
sympy.solvers.tests.test_recurr.recurrence_term(c,f)
sympy.solvers.tests.test_recurr.test_constant_naming()
sympy.solvers.tests.test_recurr.test_diofantissue_294()
sympy.solvers.tests.test_recurr.test_issue_15553()
sympy.solvers.tests.test_recurr.test_issue_15751()
sympy.solvers.tests.test_recurr.test_issue_17990()
sympy.solvers.tests.test_recurr.test_issue_18751()
sympy.solvers.tests.test_recurr.test_issue_6844()
sympy.solvers.tests.test_recurr.test_issue_8697()
sympy.solvers.tests.test_recurr.test_rsolve()
sympy.solvers.tests.test_recurr.test_rsolve_0_sol_homogeneous()
sympy.solvers.tests.test_recurr.test_rsolve_bulk()
sympy.solvers.tests.test_recurr.test_rsolve_hyper()
sympy.solvers.tests.test_recurr.test_rsolve_poly()
sympy.solvers.tests.test_recurr.test_rsolve_raises()
sympy.solvers.tests.test_recurr.test_rsolve_ratio()
sympy.solvers.tests.test_recurr.test_rsolve_ratio_missed()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_decompogen.py----------------------------------------
A:sympy.solvers.tests.test_decompogen.(x, y)->symbols('x y')
sympy.solvers.tests.test_decompogen.test_compogen()
sympy.solvers.tests.test_decompogen.test_decompogen()
sympy.solvers.tests.test_decompogen.test_decompogen_fails()
sympy.solvers.tests.test_decompogen.test_decompogen_poly()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_polysys.py----------------------------------------
A:sympy.solvers.tests.test_polysys.NewOption->Options((x, y), {'domain': 'ZZ'})
A:sympy.solvers.tests.test_polysys.(x0, y0, x1, y1, r)->symbols('x0 y0 x1 y1 r')
A:sympy.solvers.tests.test_polysys.s->sqrt(2 * r ** 2 - 1)
A:sympy.solvers.tests.test_polysys.result->solve_poly_system([f_1, f_2], x, y)
A:sympy.solvers.tests.test_polysys.((f, g), opt)->parallel_poly_from_expr(seq, *gens)
A:sympy.solvers.tests.test_polysys.dom->sympy.polys.domains.rationalfield.QQ.algebraic_field(sqrt(2))
A:sympy.solvers.tests.test_polysys.roots->solve_poly_system([(x - 5) ** 2 / 250000 + (y - 5.0 / 10) ** 2 / 250000 - 1, x], x, y)
sympy.solvers.tests.test_polysys.test_solve_biquadratic()
sympy.solvers.tests.test_polysys.test_solve_generic()
sympy.solvers.tests.test_polysys.test_solve_issue_3686()
sympy.solvers.tests.test_polysys.test_solve_poly_system()
sympy.solvers.tests.test_polysys.test_solve_triangulated()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_constantsimp.py----------------------------------------
A:sympy.solvers.tests.test_constantsimp.x->Symbol('x')
A:sympy.solvers.tests.test_constantsimp.y->Symbol('y')
A:sympy.solvers.tests.test_constantsimp.z->Symbol('z')
A:sympy.solvers.tests.test_constantsimp.u2->Symbol('u2')
A:sympy.solvers.tests.test_constantsimp._a->Symbol('_a')
A:sympy.solvers.tests.test_constantsimp.C1->Symbol('C1')
A:sympy.solvers.tests.test_constantsimp.C2->Symbol('C2')
A:sympy.solvers.tests.test_constantsimp.C3->Symbol('C3')
A:sympy.solvers.tests.test_constantsimp.f->Function('f')
sympy.solvers.tests.test_constantsimp.test_constant_Eq()
sympy.solvers.tests.test_constantsimp.test_constant_add()
sympy.solvers.tests.test_constantsimp.test_constant_function()
sympy.solvers.tests.test_constantsimp.test_constant_function_multiple()
sympy.solvers.tests.test_constantsimp.test_constant_mul()
sympy.solvers.tests.test_constantsimp.test_constant_multiple()
sympy.solvers.tests.test_constantsimp.test_constant_power_as_base()
sympy.solvers.tests.test_constantsimp.test_constant_power_as_exp()
sympy.solvers.tests.test_constantsimp.test_constant_repeated()
sympy.solvers.tests.test_constantsimp.test_nonlocal_simplification()
sympy.solvers.tests.test_constantsimp.test_ode_solutions()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_solvers.py----------------------------------------
A:sympy.solvers.tests.test_solvers.(f, g)->map(Function, 'fg')
A:sympy.solvers.tests.test_solvers.sol->solve(eq, c, simplify=False, check=False)
A:sympy.solvers.tests.test_solvers.rx->root(x, 3)
A:sympy.solvers.tests.test_solvers.(a11, a12, a21, a22, b1, b2)->symbols('a11,a12,a21,a22,b1,b2')
A:sympy.solvers.tests.test_solvers.s->sqrt(-f ** 2 - 1)
A:sympy.solvers.tests.test_solvers.res->Function('f').subs(x, r.n()).n()
A:sympy.solvers.tests.test_solvers.x->Symbol('x')
A:sympy.solvers.tests.test_solvers.f_diff->Function('f').diff(x)
A:sympy.solvers.tests.test_solvers.r->symbols('r', real=True)
A:sympy.solvers.tests.test_solvers.(x, y, z, t, n)->symbols('x, y, z, t, n')
A:sympy.solvers.tests.test_solvers.M->Matrix([[1, 2, 0, 1], [1, 3, 2 * n, 1], [4, -1, n ** 2, 1]])
A:sympy.solvers.tests.test_solvers.a->symbols('a', real=True)
A:sympy.solvers.tests.test_solvers.(x, x0, x1)->symbols('x, x0, x1', real=True)
A:sympy.solvers.tests.test_solvers.y0s->symbols('y0_:{}'.format(wy), real=True)
A:sympy.solvers.tests.test_solvers.y1s->symbols('y1_:{}'.format(wy), real=True)
A:sympy.solvers.tests.test_solvers.c->Eq(A * sin(t) + B * cos(t), r * sin(t - phi)).rewrite(Add).expand(trig=True).coeffs()
A:sympy.solvers.tests.test_solvers.expr->sum([coeff * x ** o for (o, coeff) in enumerate(c)])
A:sympy.solvers.tests.test_solvers.(eqs, c)->_mk_eqs(n)
A:sympy.solvers.tests.test_solvers.syms(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18)->symbols('x:19')
A:sympy.solvers.tests.test_solvers.eqs->Matrix([[b - c / d + r / d], [c * (1 / g + 1 / e + 1 / d) - f / g - r / d], [-c / g + f * (1 / j + 1 / i + 1 / g) - h / i], [-f / i + h * (1 / m + 1 / l + 1 / i) - k / m], [-h / m + k * (1 / p + 1 / o + 1 / m) - n / p], [-k / p + n * (1 / q + 1 / p)]])
A:sympy.solvers.tests.test_solvers.y->Symbol('y', positive=True)
A:sympy.solvers.tests.test_solvers.n->Symbol('n', integer=True, positive=True)
A:sympy.solvers.tests.test_solvers.ans->solve(list(eqs), list(v), simplify=False)
A:sympy.solvers.tests.test_solvers.result->solve(eq, x)
A:sympy.solvers.tests.test_solvers.x2->log(7 ** (7 * x1 / 20))
A:sympy.solvers.tests.test_solvers.x3->sqrt(2)
A:sympy.solvers.tests.test_solvers.x4->sqrt(5)
A:sympy.solvers.tests.test_solvers.f->Function('f')
A:sympy.solvers.tests.test_solvers.(a, b)->symbols('a b', imaginary=True)
A:sympy.solvers.tests.test_solvers.t->symbols('t')
A:sympy.solvers.tests.test_solvers.soln->solve_undetermined_coeffs(eq, (r, phi), t)
A:sympy.solvers.tests.test_solvers.e->rv[0].expand()
A:sympy.solvers.tests.test_solvers.(a, b, c, d)->symbols('a b c d', positive=True)
A:sympy.solvers.tests.test_solvers.A->solve(F, v)
A:sympy.solvers.tests.test_solvers.B->solve(G, v)
A:sympy.solvers.tests.test_solvers.C->solve(G, v, manual=True)
A:sympy.solvers.tests.test_solvers.w->symbols('w', integer=True)
A:sympy.solvers.tests.test_solvers.p->symbols('p', positive=True)
A:sympy.solvers.tests.test_solvers.(x, y, z)->symbols('x y z', positive=True)
A:sympy.solvers.tests.test_solvers.(C1, C2)->symbols('C1 C2')
A:sympy.solvers.tests.test_solvers.(r, t)->symbols('r,t')
A:sympy.solvers.tests.test_solvers.(lam, a0, conc)->symbols('lam a0 conc')
A:sympy.solvers.tests.test_solvers.(D, R, H, B_g, V, D_c)->symbols('D, R, H, B_g, V, D_c', real=True, positive=True)
A:sympy.solvers.tests.test_solvers.(Sigma_f, Sigma_a, nu)->symbols('Sigma_f, Sigma_a, nu', real=True, positive=True)
A:sympy.solvers.tests.test_solvers.(eq, expected, x)->_make_example_24609()
A:sympy.solvers.tests.test_solvers.[solapprox]->solve(eq.n(), x)
A:sympy.solvers.tests.test_solvers.rv->list(rv)
A:sympy.solvers.tests.test_solvers.d->rv[0].atoms(Dummy)
A:sympy.solvers.tests.test_solvers.reps->dict(zip(fun, sym))
A:sympy.solvers.tests.test_solvers.eq->Eq(A * sin(t) + B * cos(t), r * sin(t - phi)).rewrite(Add).expand(trig=True)
A:sympy.solvers.tests.test_solvers.F->Symbol('F')
A:sympy.solvers.tests.test_solvers.X->solve(eq, x, check=False)
A:sympy.solvers.tests.test_solvers.Y->solve((x * y).subs(x, xi).diff(y), y, simplify=False, check=False)
A:sympy.solvers.tests.test_solvers.(x, y, r, t)->symbols('x, y, r, t')
A:sympy.solvers.tests.test_solvers.(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)->symbols('a:r')
A:sympy.solvers.tests.test_solvers.(I1, I2, I3, I4, I5, I6)->symbols('I1:7')
A:sympy.solvers.tests.test_solvers.(dI1, dI4, dQ2, dQ4, Q2, Q4)->symbols('dI1,dI4,dQ2,dQ4,Q2,Q4')
A:sympy.solvers.tests.test_solvers.(a, b, c, d, f, g, k)unknowns->symbols('a, b, c, d, f, g, k')
A:sympy.solvers.tests.test_solvers.got->solve(equations, unknowns, dict=True)
A:sympy.solvers.tests.test_solvers.(f, g, h)->map(Function, 'fgh')
A:sympy.solvers.tests.test_solvers.D->Derivative(f(x), x)
A:sympy.solvers.tests.test_solvers.G->Derivative(g(a), a)
A:sympy.solvers.tests.test_solvers.(R, C, Ri, Vout, V1, Vminus, Vplus, s)->symbols('R, C, Ri, Vout, V1, Vminus, Vplus, s')
A:sympy.solvers.tests.test_solvers.Rf->symbols('Rf', positive=True)
A:sympy.solvers.tests.test_solvers.v->Matrix([f, h, k, n, b, c])
A:sympy.solvers.tests.test_solvers.(x, y)->symbols('x y')
A:sympy.solvers.tests.test_solvers.i->symbols('i', imaginary=True)
A:sympy.solvers.tests.test_solvers.(s, tau_c, tau_1, tau_2, phi, K)->symbols('s, tau_c, tau_1, tau_2, phi, K')
A:sympy.solvers.tests.test_solvers.(K_C, tau_I, tau_D)->symbols('K_C, tau_I, tau_D', positive=True, nonzero=True)
A:sympy.solvers.tests.test_solvers.x1->LambertW(Rational(1, 3))
A:sympy.solvers.tests.test_solvers.R->Symbol('R')
A:sympy.solvers.tests.test_solvers.(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)->symbols('b:r')
A:sympy.solvers.tests.test_solvers.m->Matrix(3, 3, list(range(9)))
A:sympy.solvers.tests.test_solvers.(A, B, V)->symbols('A,B,V')
A:sympy.solvers.tests.test_solvers.eq1->Eq(12513 * x + 2 * y - 219093, -5726 * x - y)
A:sympy.solvers.tests.test_solvers.eq2->Eq(-2 * x + 8, 2 * x - 40)
A:sympy.solvers.tests.test_solvers.eq3->Eq(A, 5.75 * 10 ** 5 * V * (V + 39.0))
A:sympy.solvers.tests.test_solvers.(a, b, c, d, e, f, g)->symbols('a,b,c,d,e,f,g')
A:sympy.solvers.tests.test_solvers.s2->sqrt(2 - f ** 2)
A:sympy.solvers.tests.test_solvers.s3->sqrt(6 - 3 * f ** 2)
A:sympy.solvers.tests.test_solvers.sym->symbols('x:15')
A:sympy.solvers.tests.test_solvers.ssym->solve([c[4 * i] * x + c[4 * i + 1] * y + c[4 * i + 2] * z + c[4 * i + 3] for i in range(3)], (x, y, z))
A:sympy.solvers.tests.test_solvers.sfun->solve([c[4 * i] * x + c[4 * i + 1] * y + c[4 * i + 2] * z + c[4 * i + 3] for i in range(3)], (x, y, z))
A:sympy.solvers.tests.test_solvers.(x0, x1, x2, x3, x4, x5)->symbols('x0 x1 x2 x3 x4 x5')
A:sympy.solvers.tests.test_solvers.(k, h, a, b)->symbols(':4')
A:sympy.solvers.tests.test_solvers.b->Symbol('b', positive=True)
A:sympy.solvers.tests.test_solvers.(THT, HT, DBH, dib, c0, c1, c2, c3, c4)->symbols('THT HT DBH dib c0 c1 c2 c3 c4')
A:sympy.solvers.tests.test_solvers.root->solve(x ** 5 + x ** 2 - x - 1, cubics=False)
A:sympy.solvers.tests.test_solvers.rad->solve(x ** 5 + x ** 2 - x - 1, cubics=True)
A:sympy.solvers.tests.test_solvers.(A, B, r, phi)->symbols('A, B, r, phi')
sympy.solvers.tests.test_solvers.NS(e,n=15,**options)
sympy.solvers.tests.test_solvers._make_example_24609()
sympy.solvers.tests.test_solvers._test_issue_5335_float()
sympy.solvers.tests.test_solvers.guess_solve_strategy(eq,symbol)
sympy.solvers.tests.test_solvers.test_Abs_handling()
sympy.solvers.tests.test_solvers.test_PR1964()
sympy.solvers.tests.test_solvers.test__invert()
sympy.solvers.tests.test_solvers.test__ispow()
sympy.solvers.tests.test_solvers.test__simple_dens()
sympy.solvers.tests.test_solvers.test_atan2()
sympy.solvers.tests.test_solvers.test_base_0_exp_0()
sympy.solvers.tests.test_solvers.test_check_assumptions()
sympy.solvers.tests.test_solvers.test_checking()
sympy.solvers.tests.test_solvers.test_checksol()
sympy.solvers.tests.test_solvers.test_denoms()
sympy.solvers.tests.test_solvers.test_det_quick()
sympy.solvers.tests.test_solvers.test_errorinverses()
sympy.solvers.tests.test_solvers.test_exclude()
sympy.solvers.tests.test_solvers.test_float_handling()
sympy.solvers.tests.test_solvers.test_guess_poly()
sympy.solvers.tests.test_solvers.test_guess_poly_cv()
sympy.solvers.tests.test_solvers.test_guess_rational_cv()
sympy.solvers.tests.test_solvers.test_guess_transcendental()
sympy.solvers.tests.test_solvers.test_high_order_multivariate()
sympy.solvers.tests.test_solvers.test_high_order_roots()
sympy.solvers.tests.test_solvers.test_highorder_poly()
sympy.solvers.tests.test_solvers.test_inf()
sympy.solvers.tests.test_solvers.test_issue_10169()
sympy.solvers.tests.test_solvers.test_issue_10933()
sympy.solvers.tests.test_solvers.test_issue_10993()
sympy.solvers.tests.test_solvers.test_issue_11538()
sympy.solvers.tests.test_solvers.test_issue_11553()
sympy.solvers.tests.test_solvers.test_issue_12024()
sympy.solvers.tests.test_solvers.test_issue_12114()
sympy.solvers.tests.test_solvers.test_issue_12448()
sympy.solvers.tests.test_solvers.test_issue_12476()
sympy.solvers.tests.test_solvers.test_issue_13849()
sympy.solvers.tests.test_solvers.test_issue_14607()
sympy.solvers.tests.test_solvers.test_issue_14645()
sympy.solvers.tests.test_solvers.test_issue_14721()
sympy.solvers.tests.test_solvers.test_issue_14779()
sympy.solvers.tests.test_solvers.test_issue_14860()
sympy.solvers.tests.test_solvers.test_issue_15307()
sympy.solvers.tests.test_solvers.test_issue_15415()
sympy.solvers.tests.test_solvers.test_issue_15731()
sympy.solvers.tests.test_solvers.test_issue_17452()
sympy.solvers.tests.test_solvers.test_issue_17454()
sympy.solvers.tests.test_solvers.test_issue_17638()
sympy.solvers.tests.test_solvers.test_issue_17650()
sympy.solvers.tests.test_solvers.test_issue_17799()
sympy.solvers.tests.test_solvers.test_issue_17882()
sympy.solvers.tests.test_solvers.test_issue_17949()
sympy.solvers.tests.test_solvers.test_issue_19113_19102()
sympy.solvers.tests.test_solvers.test_issue_19509()
sympy.solvers.tests.test_solvers.test_issue_20747()
sympy.solvers.tests.test_solvers.test_issue_20902()
sympy.solvers.tests.test_solvers.test_issue_21004()
sympy.solvers.tests.test_solvers.test_issue_21034()
sympy.solvers.tests.test_solvers.test_issue_21852()
sympy.solvers.tests.test_solvers.test_issue_21882()
sympy.solvers.tests.test_solvers.test_issue_21942()
sympy.solvers.tests.test_solvers.test_issue_22717()
sympy.solvers.tests.test_solvers.test_issue_22768()
sympy.solvers.tests.test_solvers.test_issue_24609()
sympy.solvers.tests.test_solvers.test_issue_24609_xfail()
sympy.solvers.tests.test_solvers.test_issue_24650()
sympy.solvers.tests.test_solvers.test_issue_2725()
sympy.solvers.tests.test_solvers.test_issue_2777()
sympy.solvers.tests.test_solvers.test_issue_2840_8155()
sympy.solvers.tests.test_solvers.test_issue_3725()
sympy.solvers.tests.test_solvers.test_issue_3870()
sympy.solvers.tests.test_solvers.test_issue_4463()
sympy.solvers.tests.test_solvers.test_issue_4671_4463_4467()
sympy.solvers.tests.test_solvers.test_issue_4793()
sympy.solvers.tests.test_solvers.test_issue_4886()
sympy.solvers.tests.test_solvers.test_issue_5114_6611()
sympy.solvers.tests.test_solvers.test_issue_5114_solvers()
sympy.solvers.tests.test_solvers.test_issue_5132()
sympy.solvers.tests.test_solvers.test_issue_5197()
sympy.solvers.tests.test_solvers.test_issue_5335()
sympy.solvers.tests.test_solvers.test_issue_5673()
sympy.solvers.tests.test_solvers.test_issue_5767()
sympy.solvers.tests.test_solvers.test_issue_5849()
sympy.solvers.tests.test_solvers.test_issue_5849_matrix()
sympy.solvers.tests.test_solvers.test_issue_5901()
sympy.solvers.tests.test_solvers.test_issue_5912()
sympy.solvers.tests.test_solvers.test_issue_6056()
sympy.solvers.tests.test_solvers.test_issue_6528()
sympy.solvers.tests.test_solvers.test_issue_6605()
sympy.solvers.tests.test_solvers.test_issue_6644()
sympy.solvers.tests.test_solvers.test_issue_6752()
sympy.solvers.tests.test_solvers.test_issue_6792()
sympy.solvers.tests.test_solvers.test_issue_6819()
sympy.solvers.tests.test_solvers.test_issue_7110()
sympy.solvers.tests.test_solvers.test_issue_7190()
sympy.solvers.tests.test_solvers.test_issue_7228()
sympy.solvers.tests.test_solvers.test_issue_7322()
sympy.solvers.tests.test_solvers.test_issue_7547()
sympy.solvers.tests.test_solvers.test_issue_7895()
sympy.solvers.tests.test_solvers.test_issue_7982()
sympy.solvers.tests.test_solvers.test_issue_8666()
sympy.solvers.tests.test_solvers.test_issue_8755()
sympy.solvers.tests.test_solvers.test_issue_8828()
sympy.solvers.tests.test_solvers.test_issue_9567()
sympy.solvers.tests.test_solvers.test_issues_6819_6820_6821_6248_8692()
sympy.solvers.tests.test_solvers.test_lambert_bivariate()
sympy.solvers.tests.test_solvers.test_lambert_multivariate()
sympy.solvers.tests.test_solvers.test_linear_system()
sympy.solvers.tests.test_solvers.test_linear_systemLU()
sympy.solvers.tests.test_solvers.test_linear_system_function()
sympy.solvers.tests.test_solvers.test_linear_system_symbols_doesnt_hang_1()
sympy.solvers.tests.test_solvers.test_linear_system_symbols_doesnt_hang_2()
sympy.solvers.tests.test_solvers.test_linear_system_xfail()
sympy.solvers.tests.test_solvers.test_minsolve_linear_system()
sympy.solvers.tests.test_solvers.test_nsolve()
sympy.solvers.tests.test_solvers.test_other_lambert()
sympy.solvers.tests.test_solvers.test_overdetermined()
sympy.solvers.tests.test_solvers.test_polysys()
sympy.solvers.tests.test_solvers.test_quintics_1()
sympy.solvers.tests.test_solvers.test_quintics_2()
sympy.solvers.tests.test_solvers.test_quintics_3()
sympy.solvers.tests.test_solvers.test_real_imag_splitting()
sympy.solvers.tests.test_solvers.test_real_roots()
sympy.solvers.tests.test_solvers.test_rewrite_trig()
sympy.solvers.tests.test_solvers.test_rewrite_trigh()
sympy.solvers.tests.test_solvers.test_solve_args()
sympy.solvers.tests.test_solvers.test_solve_conjugate()
sympy.solvers.tests.test_solvers.test_solve_for_functions_derivatives()
sympy.solvers.tests.test_solvers.test_solve_inequalities()
sympy.solvers.tests.test_solvers.test_solve_linear()
sympy.solvers.tests.test_solvers.test_solve_nonlinear()
sympy.solvers.tests.test_solvers.test_solve_polynomial1()
sympy.solvers.tests.test_solvers.test_solve_polynomial2()
sympy.solvers.tests.test_solvers.test_solve_polynomial_cv_1a()
sympy.solvers.tests.test_solvers.test_solve_polynomial_cv_1b()
sympy.solvers.tests.test_solvers.test_solve_polynomial_cv_2()
sympy.solvers.tests.test_solvers.test_solve_rational()
sympy.solvers.tests.test_solvers.test_solve_transcendental()
sympy.solvers.tests.test_solvers.test_solve_undetermined_coeffs()
sympy.solvers.tests.test_solvers.test_solve_undetermined_coeffs_issue_23927()
sympy.solvers.tests.test_solvers.test_solver_flags()
sympy.solvers.tests.test_solvers.test_swap_back()
sympy.solvers.tests.test_solvers.test_units()
sympy.solvers.tests.test_solvers.test_unrad1()
sympy.solvers.tests.test_solvers.test_unrad_fail()
sympy.solvers.tests.test_solvers.test_unrad_slow()
sympy.solvers.tests.test_solvers.test_uselogcombine()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_solveset.py----------------------------------------
A:sympy.solvers.tests.test_solveset.sol1->Intersection({log(2) / (log(x) - log(y))}, S.Reals)
A:sympy.solvers.tests.test_solveset.sol2->Intersection({log(2) / log(x / y)}, S.Reals)
A:sympy.solvers.tests.test_solveset.x->Dummy('x')
A:sympy.solvers.tests.test_solveset.y->symbols('y', rational=True)
A:sympy.solvers.tests.test_solveset.n->Dummy('n')
A:sympy.solvers.tests.test_solveset.base_values->FiniteSet(y - 1, -y - 1)
A:sympy.solvers.tests.test_solveset.fx->diff(f, x)
A:sympy.solvers.tests.test_solveset.fy->diff(f, y)
A:sympy.solvers.tests.test_solveset.fz->diff(f, z)
A:sympy.solvers.tests.test_solveset.sol->nonlinsolve([4 * rx ** 3 * ry ** 4 - 2 * ry, 4 * rx ** 4 * ry ** 3 - 2 * rx], rx, ry)
A:sympy.solvers.tests.test_solveset.(x, y, z)->symbols('x y z', positive=True)
A:sympy.solvers.tests.test_solveset.anz->Symbol('anz', nonzero=True)
A:sympy.solvers.tests.test_solveset.bb->Symbol('bb', real=True)
A:sympy.solvers.tests.test_solveset.s->solveset_complex(tan(x).rewrite(exp), x)
A:sympy.solvers.tests.test_solveset.ans->imageset(Lambda(n, num / den), S.Integers)
A:sympy.solvers.tests.test_solveset.ra->S('-1484/375 - 4*(-S(1)/2 + sqrt(3)*I/2)*(-12459439/52734375 +\n    114*sqrt(12657)/78125)**(S(1)/3) - 172564/(140625*(-S(1)/2 +\n    sqrt(3)*I/2)*(-12459439/52734375 + 114*sqrt(12657)/78125)**(S(1)/3))')
A:sympy.solvers.tests.test_solveset.rb->Rational(4, 5)
A:sympy.solvers.tests.test_solveset.R->Symbol('R')
A:sympy.solvers.tests.test_solveset.fs->FiniteSet(*fset)
A:sympy.solvers.tests.test_solveset.cs->ConditionSet(R, Eq(eq, 0), FiniteSet(*cset))
A:sympy.solvers.tests.test_solveset.unsolved_object->ConditionSet(x, Eq(exp(x) + sin(x), 0), S.Reals)
A:sympy.solvers.tests.test_solveset.eqab->Ge(2 * (x - 2) ** 2 / (3 * (x + 1) ** (Integer(1) / 3)) + 2 * (x - 2) * (x + 1) ** (Integer(2) / 3), 0).subs(reps)
A:sympy.solvers.tests.test_solveset.(a, b)->symbols('a, b', real=True)
A:sympy.solvers.tests.test_solveset.absxm3->Piecewise((x - 3, 0 <= x - 3), (3 - x, 0 > x - 3))
A:sympy.solvers.tests.test_solveset.f->Function('f')
A:sympy.solvers.tests.test_solveset.g->Function('g')
A:sympy.solvers.tests.test_solveset.res->nonlinsolve((4 * y * (2 * x + 2 * exp(y) + 1) * exp(2 * x), 4 * x * exp(2 * x) + 4 * y * exp(2 * x + y) + 4 * exp(2 * x + y) + 1), x, y)
A:sympy.solvers.tests.test_solveset.ar->Symbol('ar', real=True)
A:sympy.solvers.tests.test_solveset.f1->sinh(x).rewrite(exp)
A:sympy.solvers.tests.test_solveset.f2->tanh(x).rewrite(exp)
A:sympy.solvers.tests.test_solveset.result->solveset_real(eq, x)
A:sympy.solvers.tests.test_solveset.a->Symbol('a')
A:sympy.solvers.tests.test_solveset.eq->Ge(2 * (x - 2) ** 2 / (3 * (x + 1) ** (Integer(1) / 3)) + 2 * (x - 2) * (x + 1) ** (Integer(2) / 3), 0)
A:sympy.solvers.tests.test_solveset.p->Symbol('p', positive=True)
A:sympy.solvers.tests.test_solveset.b->Symbol('b', positive=True)
A:sympy.solvers.tests.test_solveset.A->nonlinsolve(F, v)
A:sympy.solvers.tests.test_solveset.(k1, k2, k3)->symbols('k1, k2, k3')
A:sympy.solvers.tests.test_solveset.solution->solveset(n1, x)
A:sympy.solvers.tests.test_solveset.expr1->Eq(1 / (x ** 2 - 4) + x, 1 / (x ** 2 - 4) + 2)
A:sympy.solvers.tests.test_solveset.expr2->Eq(1 / x + x, 1 / x)
A:sympy.solvers.tests.test_solveset.p1->Piecewise((0, x < -1), (x ** 2, x <= 1), (log(x), True))
A:sympy.solvers.tests.test_solveset.p2->Piecewise((0, x < -10), (x ** 2 + 5 * x - 6, x >= -9))
A:sympy.solvers.tests.test_solveset.p3->Piecewise((0, Eq(x, 0)), (x ** 2 / Abs(x), True))
A:sympy.solvers.tests.test_solveset.p4->Piecewise((0, Eq(x, pi)), ((x - pi) / sin(x), True))
A:sympy.solvers.tests.test_solveset.(A, B)->linear_eq_to_matrix(eqns3, x, y, z)
A:sympy.solvers.tests.test_solveset.(x1, x2, x3, x4)->symbols('x:4', cls=Dummy)
A:sympy.solvers.tests.test_solveset.M->Matrix([[1, 2, 1, 1, 7], [1, 2, 2, -1, 12], [2, 4, 0, 6, 4]])
A:sympy.solvers.tests.test_solveset.B->nonlinsolve(G, v)
A:sympy.solvers.tests.test_solveset.(A, B, J1, J2)->symbols('A B J1 J2')
A:sympy.solvers.tests.test_solveset.Augmatrix->Matrix([[0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0]])
A:sympy.solvers.tests.test_solveset.(x0, x1, x2, _x0)->symbols('tau00 tau01 tau02 tau1')
A:sympy.solvers.tests.test_solveset.(x0, x2, x4)->symbols('x0, x2, x4')
A:sympy.solvers.tests.test_solveset.Augmatrix[-1, -1]->symbols('_x0')
A:sympy.solvers.tests.test_solveset.xs->symbols('x:{}'.format(n))
A:sympy.solvers.tests.test_solveset.ys->symbols('y:{}'.format(n))
A:sympy.solvers.tests.test_solveset.(eqs, syms, sol)->_mk_eqs_sol(n)
A:sympy.solvers.tests.test_solveset.f4->sin(x + 1)
A:sympy.solvers.tests.test_solveset.s1->ImageSet(Lambda(n, 2 * n * pi), S.Integers)
A:sympy.solvers.tests.test_solveset.s2->ImageSet(Lambda(n, 2 * n * pi + pi), S.Integers)
A:sympy.solvers.tests.test_solveset.s3->ImageSet(Lambda(n, 2 * n * pi + pi / 2), S.Integers)
A:sympy.solvers.tests.test_solveset.s4->ImageSet(Lambda(n, 2 * n * pi - 1), S.Integers)
A:sympy.solvers.tests.test_solveset.s5->ImageSet(Lambda(n, 2 * n * pi - 1 + pi), S.Integers)
A:sympy.solvers.tests.test_solveset.soln->solveset_real(eq, x)
A:sympy.solvers.tests.test_solveset.soln_1->FiniteSet(soln_1)
A:sympy.solvers.tests.test_solveset.soln_2->FiniteSet(soln_2)
A:sympy.solvers.tests.test_solveset.soln_x->Union(ImageSet(Lambda(n, 2 * n * pi + pi / 3), S.Integers), ImageSet(Lambda(n, 2 * n * pi + pi * Rational(2, 3)), S.Integers))
A:sympy.solvers.tests.test_solveset.soln_y->Union(ImageSet(Lambda(n, 2 * n * pi + pi / 6), S.Integers), ImageSet(Lambda(n, 2 * n * pi + pi * Rational(5, 6)), S.Integers))
A:sympy.solvers.tests.test_solveset.(x, y, a, b, c, d)->symbols('x, y, a, b, c, d', extended_real=True)
A:sympy.solvers.tests.test_solveset.soln_real->FiniteSet((s_real_y, s_real_z), (s_real_y, -s_real_z))
A:sympy.solvers.tests.test_solveset.soln_complex->FiniteSet((s_complex_y, s_complex_z_1), (s_complex_y, s_complex_z_2))
A:sympy.solvers.tests.test_solveset.(x, y, z, n)->symbols('x, y, z, n', real=True)
A:sympy.solvers.tests.test_solveset.(x, y)->symbols('x y', real=True)
A:sympy.solvers.tests.test_solveset.soln1->FiniteSet((2 * LambertW(y / 2), y))
A:sympy.solvers.tests.test_solveset.soln2->FiniteSet((-x * sqrt(exp(x)), y), (x * sqrt(exp(x)), y))
A:sympy.solvers.tests.test_solveset.soln3->FiniteSet((x * exp(x / 2), x))
A:sympy.solvers.tests.test_solveset.soln4->FiniteSet(2 * LambertW(y / 2), y)
A:sympy.solvers.tests.test_solveset.V(ax, bx, cx, gx, jx, lx, mx, nx, q)->symbols('ax bx cx gx jx lx mx nx q')
A:sympy.solvers.tests.test_solveset.solutions->solveset(sqrt(-x ** 2 - 2.0), x)
A:sympy.solvers.tests.test_solveset.(n, m)->symbols('n m')
A:sympy.solvers.tests.test_solveset.s_real_z->sqrt(-exp(2 * x) - sin(log(3)))
A:sympy.solvers.tests.test_solveset.lam->Lambda(n, -sqrt(-exp(2 * x) + sin(2 * n * I * pi + -log(3))))
A:sympy.solvers.tests.test_solveset.s_complex_y->ImageSet(lam, S.Integers)
A:sympy.solvers.tests.test_solveset.s_complex_z_1->ImageSet(lam, S.Integers)
A:sympy.solvers.tests.test_solveset.s_complex_z_2->ImageSet(lam, S.Integers)
A:sympy.solvers.tests.test_solveset.img->ImageSet(lam, S.Integers)
A:sympy.solvers.tests.test_solveset.s_x->sqrt(r / (tan(t) ** 2 + 1))
A:sympy.solvers.tests.test_solveset.(lam, a0, conc)->symbols('lam a0 conc')
A:sympy.solvers.tests.test_solveset.syms->Tuple(x, y)
A:sympy.solvers.tests.test_solveset.(x, y, z, r, t)->symbols('x, y, z, r, t', real=True)
A:sympy.solvers.tests.test_solveset.s_x_1->Complement(FiniteSet(-sqrt(r / (tan(t) ** 2 + 1))), FiniteSet(0))
A:sympy.solvers.tests.test_solveset.s_x_2->Complement(FiniteSet(sqrt(r / (tan(t) ** 2 + 1))), FiniteSet(0))
A:sympy.solvers.tests.test_solveset.efg->Symbol('efg')
A:sympy.solvers.tests.test_solveset.syb->list(ordered(set.union(*[x.free_symbols for x in eqs])))
A:sympy.solvers.tests.test_solveset.k1->Dummy('k1')
A:sympy.solvers.tests.test_solveset.ap->Symbol('ap', positive=True)
A:sympy.solvers.tests.test_solveset.bn->Symbol('bn', negative=True)
A:sympy.solvers.tests.test_solveset.eq5->Ge(2 * (x - 2) ** 2 / (3 * (x + 1) ** (Integer(1) / 3)) + 2 * (x - 2) * (x + 1) ** (Integer(2) / 3), 0).subs(x, log(x))
A:sympy.solvers.tests.test_solveset.cset->ConditionSet(x, Eq(eq1, 0), s1)
A:sympy.solvers.tests.test_solveset.i->Interval(1, 10)
A:sympy.solvers.tests.test_solveset.C->Dummy('C')
A:sympy.solvers.tests.test_solveset.a1->FiniteSet(-log(-y + 1) / 18000000)
A:sympy.solvers.tests.test_solveset.number->CRootOf(x ** 4 + x - 1, 2)
A:sympy.solvers.tests.test_solveset.(C1, C2)->symbols('C1 C2')
A:sympy.solvers.tests.test_solveset.union1->imageset(Lambda(n, I * (2 * n * pi - pi * Rational(2, 3)) / log(2)), S.Integers)
A:sympy.solvers.tests.test_solveset.union2->imageset(Lambda(n, I * (2 * n * pi + pi * Rational(2, 3)) / log(2)), S.Integers)
A:sympy.solvers.tests.test_solveset.(xr, zr)->symbols('xr, zr', real=True)
A:sympy.solvers.tests.test_solveset.xpos->symbols('x', positive=True)
A:sympy.solvers.tests.test_solveset.(a, b, c)->symbols('a,b,c')
A:sympy.solvers.tests.test_solveset.(A, b)->linear_eq_to_matrix(eqs, variables)
A:sympy.solvers.tests.test_solveset.linsolve_expected->FiniteSet(Tuple(*expected))
A:sympy.solvers.tests.test_solveset.(gj_solve, new_vars)->nonlinsolve(F, v).gauss_jordan_solve(b)
A:sympy.solvers.tests.test_solveset.gj_solve->list(gj_solve)
A:sympy.solvers.tests.test_solveset.gj_expected->FiniteSet(Tuple(*expected)).subs(zip([x3, x7, y7, y9, y11], new_vars))
A:sympy.solvers.tests.test_solveset.nonlinsolve_expected->FiniteSet((38 - x3, x3 - 10, 23 - x3, x3, 12 - x7, x7 + 6, 16 - x7, x7, 8, 20, 2, 5, 1, 6, 1, 21, 12, 20, -y5 + y7 - 1, y5 - y7 + 24, 21 - y5, y5, 33 - y7, y7, 27 - y9, y9, -y5 + y7 - y9 + 24, y5 - y7 + y9 + 3))
A:sympy.solvers.tests.test_solveset.(a00, a01, a10, a11, l0, l1, l2, l3, m0, m1, m2, m3, m4, m5, m6, m7, c00, c01, c10, c11, p00, p01, p10, p11)->symbols('a00, a01, a10, a11, l0, l1, l2, l3, m0, m1, m2, m3, m4, m5, m6, m7, c00, c01, c10, c11, p00, p01, p10, p11')
A:sympy.solvers.tests.test_solveset.c1->Piecewise((0, x < 0), (Min(1, x) / 2 - Min(2, x) / 2 + Min(3, x) / 2, True))
A:sympy.solvers.tests.test_solveset.c2->Piecewise((Piecewise((0, x < 0), (Min(1, x) / 2 - Min(2, x) / 2 + Min(3, x) / 2, True)), x >= 0), (0, True))
A:sympy.solvers.tests.test_solveset.correct_result->Interval(1, 2)
A:sympy.solvers.tests.test_solveset.result1->solveset(c1 - Rational(1, 2), x, Interval(0, 3))
A:sympy.solvers.tests.test_solveset.result2->solveset(c2 - Rational(1, 2), x, Interval(0, 3))
A:sympy.solvers.tests.test_solveset.(x, z)->symbols('x z')
A:sympy.solvers.tests.test_solveset.(e1, e2)->symbols('e1 e2', even=True)
A:sympy.solvers.tests.test_solveset.soln_expr1->nonlinsolve(expr1, [x, y])
A:sympy.solvers.tests.test_solveset.soln_eq1->nonlinsolve(eq1, [x, y])
A:sympy.solvers.tests.test_solveset.soln_expr2->nonlinsolve(expr2, [x, y])
A:sympy.solvers.tests.test_solveset.soln_eq2->nonlinsolve(eq2, [x, y])
A:sympy.solvers.tests.test_solveset.sols->FiniteSet((x, S.Zero), (-exp(y) - S.Half, y))
A:sympy.solvers.tests.test_solveset.logterm->log(1.91196789933362e-07 * z / (5.0 - 1.91196789933362e-07 * z) + 1)
A:sympy.solvers.tests.test_solveset.(rx, ry)->symbols('x y', real=True)
sympy.solvers.tests.test_solveset._test_issue_5335()
sympy.solvers.tests.test_solveset.assert_close_nl(sol1,sol2)
sympy.solvers.tests.test_solveset.assert_close_ss(sol1,sol2)
sympy.solvers.tests.test_solveset.dumeq(i,j)
sympy.solvers.tests.test_solveset.test__is_finite_with_finite_vars()
sympy.solvers.tests.test_solveset.test__solveset_multi()
sympy.solvers.tests.test_solveset.test_abs_invert_solvify()
sympy.solvers.tests.test_solveset.test_atan2()
sympy.solvers.tests.test_solveset.test_conditionset()
sympy.solvers.tests.test_solveset.test_conditionset_equality()
sympy.solvers.tests.test_solveset.test_domain_check()
sympy.solvers.tests.test_solveset.test_errorinverses()
sympy.solvers.tests.test_solveset.test_expo_conditionset()
sympy.solvers.tests.test_solveset.test_exponential_complex()
sympy.solvers.tests.test_solveset.test_exponential_real()
sympy.solvers.tests.test_solveset.test_exponential_symbols()
sympy.solvers.tests.test_solveset.test_garbage_input()
sympy.solvers.tests.test_solveset.test_ignore_assumptions()
sympy.solvers.tests.test_solveset.test_improve_coverage()
sympy.solvers.tests.test_solveset.test_integer_domain_relational()
sympy.solvers.tests.test_solveset.test_invert_complex()
sympy.solvers.tests.test_solveset.test_invert_modular()
sympy.solvers.tests.test_solveset.test_invert_real()
sympy.solvers.tests.test_solveset.test_is_exponential()
sympy.solvers.tests.test_solveset.test_is_function_class_equation()
sympy.solvers.tests.test_solveset.test_is_lambert()
sympy.solvers.tests.test_solveset.test_is_logarithmic()
sympy.solvers.tests.test_solveset.test_is_modular()
sympy.solvers.tests.test_solveset.test_issue_10069()
sympy.solvers.tests.test_solveset.test_issue_10085()
sympy.solvers.tests.test_solveset.test_issue_10158()
sympy.solvers.tests.test_solveset.test_issue_10214()
sympy.solvers.tests.test_solveset.test_issue_10397()
sympy.solvers.tests.test_solveset.test_issue_10426()
sympy.solvers.tests.test_solveset.test_issue_10477()
sympy.solvers.tests.test_solveset.test_issue_10555()
sympy.solvers.tests.test_solveset.test_issue_10671()
sympy.solvers.tests.test_solveset.test_issue_10864()
sympy.solvers.tests.test_solveset.test_issue_10876()
sympy.solvers.tests.test_solveset.test_issue_11064()
sympy.solvers.tests.test_solveset.test_issue_11174()
sympy.solvers.tests.test_solveset.test_issue_11184()
sympy.solvers.tests.test_solveset.test_issue_11534()
sympy.solvers.tests.test_solveset.test_issue_11536()
sympy.solvers.tests.test_solveset.test_issue_12032()
sympy.solvers.tests.test_solveset.test_issue_12429()
sympy.solvers.tests.test_solveset.test_issue_12478()
sympy.solvers.tests.test_solveset.test_issue_13396()
sympy.solvers.tests.test_solveset.test_issue_13550()
sympy.solvers.tests.test_solveset.test_issue_13849()
sympy.solvers.tests.test_solveset.test_issue_13961()
sympy.solvers.tests.test_solveset.test_issue_14223()
sympy.solvers.tests.test_solveset.test_issue_14300()
sympy.solvers.tests.test_solveset.test_issue_14454()
sympy.solvers.tests.test_solveset.test_issue_14541()
sympy.solvers.tests.test_solveset.test_issue_14565()
sympy.solvers.tests.test_solveset.test_issue_14642()
sympy.solvers.tests.test_solveset.test_issue_14987()
sympy.solvers.tests.test_solveset.test_issue_15024()
sympy.solvers.tests.test_solveset.test_issue_15350()
sympy.solvers.tests.test_solveset.test_issue_16577()
sympy.solvers.tests.test_solveset.test_issue_16618()
sympy.solvers.tests.test_solveset.test_issue_16643()
sympy.solvers.tests.test_solveset.test_issue_16876()
sympy.solvers.tests.test_solveset.test_issue_16877()
sympy.solvers.tests.test_solveset.test_issue_17276()
sympy.solvers.tests.test_solveset.test_issue_17479()
sympy.solvers.tests.test_solveset.test_issue_17565()
sympy.solvers.tests.test_solveset.test_issue_17566()
sympy.solvers.tests.test_solveset.test_issue_17566_actual()
sympy.solvers.tests.test_solveset.test_issue_17580()
sympy.solvers.tests.test_solveset.test_issue_17604()
sympy.solvers.tests.test_solveset.test_issue_17882()
sympy.solvers.tests.test_solveset.test_issue_17906()
sympy.solvers.tests.test_solveset.test_issue_17933()
sympy.solvers.tests.test_solveset.test_issue_17940()
sympy.solvers.tests.test_solveset.test_issue_18208()
sympy.solvers.tests.test_solveset.test_issue_18359()
sympy.solvers.tests.test_solveset.test_issue_18449()
sympy.solvers.tests.test_solveset.test_issue_19050()
sympy.solvers.tests.test_solveset.test_issue_19144()
sympy.solvers.tests.test_solveset.test_issue_19506()
sympy.solvers.tests.test_solveset.test_issue_19587()
sympy.solvers.tests.test_solveset.test_issue_19814()
sympy.solvers.tests.test_solveset.test_issue_20097()
sympy.solvers.tests.test_solveset.test_issue_21022()
sympy.solvers.tests.test_solveset.test_issue_21047()
sympy.solvers.tests.test_solveset.test_issue_21236()
sympy.solvers.tests.test_solveset.test_issue_21276()
sympy.solvers.tests.test_solveset.test_issue_21890()
sympy.solvers.tests.test_solveset.test_issue_21908()
sympy.solvers.tests.test_solveset.test_issue_22058()
sympy.solvers.tests.test_solveset.test_issue_22413()
sympy.solvers.tests.test_solveset.test_issue_22628()
sympy.solvers.tests.test_solveset.test_issue_23318()
sympy.solvers.tests.test_solveset.test_issue_2777()
sympy.solvers.tests.test_solveset.test_issue_5114_solveset()
sympy.solvers.tests.test_solveset.test_issue_5132_1()
sympy.solvers.tests.test_solveset.test_issue_5132_2()
sympy.solvers.tests.test_solveset.test_issue_5132_substitution()
sympy.solvers.tests.test_solveset.test_issue_6752()
sympy.solvers.tests.test_solveset.test_issue_8715()
sympy.solvers.tests.test_solveset.test_issue_8828()
sympy.solvers.tests.test_solveset.test_issue_9522()
sympy.solvers.tests.test_solveset.test_issue_9556()
sympy.solvers.tests.test_solveset.test_issue_9557()
sympy.solvers.tests.test_solveset.test_issue_9565()
sympy.solvers.tests.test_solveset.test_issue_9611()
sympy.solvers.tests.test_solveset.test_issue_9616()
sympy.solvers.tests.test_solveset.test_issue_9778()
sympy.solvers.tests.test_solveset.test_issue_9824()
sympy.solvers.tests.test_solveset.test_issue_9849()
sympy.solvers.tests.test_solveset.test_issue_9913()
sympy.solvers.tests.test_solveset.test_issue_9953()
sympy.solvers.tests.test_solveset.test_linear_coeffs()
sympy.solvers.tests.test_solveset.test_linear_eq_to_matrix()
sympy.solvers.tests.test_solveset.test_linsolve()
sympy.solvers.tests.test_solveset.test_linsolve_immutable()
sympy.solvers.tests.test_solveset.test_linsolve_large_sparse()
sympy.solvers.tests.test_solveset.test_logarithmic()
sympy.solvers.tests.test_solveset.test_multi_exp()
sympy.solvers.tests.test_solveset.test_no_sol()
sympy.solvers.tests.test_solveset.test_no_sol_rational_extragenous()
sympy.solvers.tests.test_solveset.test_nonlinsolve_abs()
sympy.solvers.tests.test_solveset.test_nonlinsolve_basic()
sympy.solvers.tests.test_solveset.test_nonlinsolve_complex()
sympy.solvers.tests.test_solveset.test_nonlinsolve_conditionset()
sympy.solvers.tests.test_solveset.test_nonlinsolve_inexact()
sympy.solvers.tests.test_solveset.test_nonlinsolve_polysys()
sympy.solvers.tests.test_solveset.test_nonlinsolve_positive_dimensional()
sympy.solvers.tests.test_solveset.test_nonlinsolve_radical()
sympy.solvers.tests.test_solveset.test_nonlinsolve_using_substitution()
sympy.solvers.tests.test_solveset.test_other_lambert()
sympy.solvers.tests.test_solveset.test_piecewise_solveset()
sympy.solvers.tests.test_solveset.test_poly_gens()
sympy.solvers.tests.test_solveset.test_raise_exception_nonlinsolve()
sympy.solvers.tests.test_solveset.test_raises_substitution()
sympy.solvers.tests.test_solveset.test_real_imag_splitting()
sympy.solvers.tests.test_solveset.test_return_root_of()
sympy.solvers.tests.test_solveset.test_simplification()
sympy.solvers.tests.test_solveset.test_sol_zero_complex()
sympy.solvers.tests.test_solveset.test_sol_zero_real()
sympy.solvers.tests.test_solveset.test_solve_abs()
sympy.solvers.tests.test_solveset.test_solve_complex_log()
sympy.solvers.tests.test_solveset.test_solve_complex_sqrt()
sympy.solvers.tests.test_solveset.test_solve_decomposition()
sympy.solvers.tests.test_solveset.test_solve_exponential()
sympy.solvers.tests.test_solveset.test_solve_hyperbolic()
sympy.solvers.tests.test_solveset.test_solve_invalid_sol()
sympy.solvers.tests.test_solveset.test_solve_invert()
sympy.solvers.tests.test_solveset.test_solve_lambert()
sympy.solvers.tests.test_solveset.test_solve_logarithm()
sympy.solvers.tests.test_solveset.test_solve_modular()
sympy.solvers.tests.test_solveset.test_solve_mul()
sympy.solvers.tests.test_solveset.test_solve_nonlinear_trans()
sympy.solvers.tests.test_solveset.test_solve_only_exp_1()
sympy.solvers.tests.test_solveset.test_solve_only_exp_2()
sympy.solvers.tests.test_solveset.test_solve_polynomial()
sympy.solvers.tests.test_solveset.test_solve_polynomial_cv_1a()
sympy.solvers.tests.test_solveset.test_solve_polynomial_symbolic_param()
sympy.solvers.tests.test_solveset.test_solve_quintics()
sympy.solvers.tests.test_solveset.test_solve_rational()
sympy.solvers.tests.test_solveset.test_solve_sqrt_3()
sympy.solvers.tests.test_solveset.test_solve_sqrt_fail()
sympy.solvers.tests.test_solveset.test_solve_trig()
sympy.solvers.tests.test_solveset.test_solve_trig_hyp_symbolic()
sympy.solvers.tests.test_solveset.test_solve_trig_simplified()
sympy.solvers.tests.test_solveset.test_solveset()
sympy.solvers.tests.test_solveset.test_solveset_arg()
sympy.solvers.tests.test_solveset.test_solveset_complex_exp()
sympy.solvers.tests.test_solveset.test_solveset_complex_polynomial()
sympy.solvers.tests.test_solveset.test_solveset_complex_rational()
sympy.solvers.tests.test_solveset.test_solveset_complex_tan()
sympy.solvers.tests.test_solveset.test_solveset_conjugate()
sympy.solvers.tests.test_solveset.test_solveset_domain()
sympy.solvers.tests.test_solveset.test_solveset_real_exp()
sympy.solvers.tests.test_solveset.test_solveset_real_gen_is_pow()
sympy.solvers.tests.test_solveset.test_solveset_real_log()
sympy.solvers.tests.test_solveset.test_solveset_real_rational()
sympy.solvers.tests.test_solveset.test_solveset_sqrt_1()
sympy.solvers.tests.test_solveset.test_solveset_sqrt_2()
sympy.solvers.tests.test_solveset.test_solvify()
sympy.solvers.tests.test_solveset.test_solvify_piecewise()
sympy.solvers.tests.test_solveset.test_substitution_basic()
sympy.solvers.tests.test_solveset.test_substitution_incorrect()
sympy.solvers.tests.test_solveset.test_substitution_redundant()
sympy.solvers.tests.test_solveset.test_substitution_with_infeasible_solution()
sympy.solvers.tests.test_solveset.test_term_factors()
sympy.solvers.tests.test_solveset.test_transolve()
sympy.solvers.tests.test_solveset.test_trig_system()
sympy.solvers.tests.test_solveset.test_trig_system_fail()
sympy.solvers.tests.test_solveset.test_units()
sympy.solvers.tests.test_solveset.test_uselogcombine_2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_pde.py----------------------------------------
A:sympy.solvers.tests.test_pde.(a, b, c, x, y)->symbols('a b c x y')
A:sympy.solvers.tests.test_pde.(x, y, z, t)->symbols('x,y,z,t')
A:sympy.solvers.tests.test_pde.(F, T, X, Y, Z, u)->map(Function, 'FTXYZu')
A:sympy.solvers.tests.test_pde.eq->Eq(res[1], c)
A:sympy.solvers.tests.test_pde.res->pde_separate(eq, u, [T(x), X(t)])
A:sympy.solvers.tests.test_pde.c->Symbol('C', real=True)
A:sympy.solvers.tests.test_pde.Phi->Function('Phi')
A:sympy.solvers.tests.test_pde.(F, R, T, X, Y, Z, u)->map(Function, 'FRTXYZu')
A:sympy.solvers.tests.test_pde.(r, theta, z)->symbols('r,theta,z')
A:sympy.solvers.tests.test_pde.wave->Eq(D(u(x, t), t, t), c ** 2 * D(u(x, t), x, x))
A:sympy.solvers.tests.test_pde.(x, t)->symbols('x t')
A:sympy.solvers.tests.test_pde.f->Function('f')
A:sympy.solvers.tests.test_pde.(X, T)->symbols('X T', cls=Function)
A:sympy.solvers.tests.test_pde.u->f(x, y)
A:sympy.solvers.tests.test_pde.(f, F)->map(Function, ['f', 'F'])
A:sympy.solvers.tests.test_pde.sol->pdsolve(eq, hint='1st_linear_variable_coeff')
A:sympy.solvers.tests.test_pde.sol4->Eq(sol.lhs - sol.rhs, 0)
A:sympy.solvers.tests.test_pde.(f, F, G, H)->map(Function, ['f', 'F', 'G', 'H'])
sympy.solvers.tests.test_pde.test_checkpdesol()
sympy.solvers.tests.test_pde.test_issue_11726()
sympy.solvers.tests.test_pde.test_pde_1st_linear_constant_coeff()
sympy.solvers.tests.test_pde.test_pde_1st_linear_constant_coeff_homogeneous()
sympy.solvers.tests.test_pde.test_pde_classify()
sympy.solvers.tests.test_pde.test_pde_separate()
sympy.solvers.tests.test_pde.test_pde_separate_add()
sympy.solvers.tests.test_pde.test_pde_separate_mul()
sympy.solvers.tests.test_pde.test_pdsolve_all()
sympy.solvers.tests.test_pde.test_pdsolve_variable_coeff()
sympy.solvers.tests.test_pde.test_solvefun()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_inequalities.py----------------------------------------
A:sympy.solvers.tests.test_inequalities.inf->sympy.core.numbers.oo.evalf()
A:sympy.solvers.tests.test_inequalities.s->sqrt(2)
A:sympy.solvers.tests.test_inequalities.ans->And(Lt(1, x), Lt(x, oo))
A:sympy.solvers.tests.test_inequalities.nr->Symbol('nr', extended_real=False)
A:sympy.solvers.tests.test_inequalities.sol->solve(eq >= 0)
A:sympy.solvers.tests.test_inequalities.tru->Or(And(rootof(eq, 1) <= x, x < oo), And(-oo < x, x <= rootof(eq, 0)))
A:sympy.solvers.tests.test_inequalities.f->Function('f')
A:sympy.solvers.tests.test_inequalities.e->Eq(1 - x, x * (1 / x - 1))
A:sympy.solvers.tests.test_inequalities.den->((x - 1) * (x - 2)).expand()
A:sympy.solvers.tests.test_inequalities.n->Dummy('n')
A:sympy.solvers.tests.test_inequalities.c1->Dummy('c1', positive=True)
A:sympy.solvers.tests.test_inequalities.r->rootof(x ** 5 - x ** 2 + 1, 0)
A:sympy.solvers.tests.test_inequalities.dom->FiniteSet(0, 3)
A:sympy.solvers.tests.test_inequalities.x->Symbol('x')
A:sympy.solvers.tests.test_inequalities.i->Interval(1, 10)
A:sympy.solvers.tests.test_inequalities.ie->Eq(S.One, y)
A:sympy.solvers.tests.test_inequalities.nz->Symbol('nz', nonzero=True)
A:sympy.solvers.tests.test_inequalities.a->Symbol('a', positive=True)
sympy.solvers.tests.test_inequalities.test__pt()
sympy.solvers.tests.test_inequalities.test__solve_inequalities()
sympy.solvers.tests.test_inequalities.test__solve_inequality()
sympy.solvers.tests.test_inequalities.test_integer_domain_relational_isolve()
sympy.solvers.tests.test_inequalities.test_isolve_Sets()
sympy.solvers.tests.test_inequalities.test_issue_10047()
sympy.solvers.tests.test_inequalities.test_issue_10198()
sympy.solvers.tests.test_inequalities.test_issue_10268()
sympy.solvers.tests.test_inequalities.test_issue_10671_12466()
sympy.solvers.tests.test_inequalities.test_issue_5526()
sympy.solvers.tests.test_inequalities.test_issue_6343()
sympy.solvers.tests.test_inequalities.test_issue_8235()
sympy.solvers.tests.test_inequalities.test_issue_8545()
sympy.solvers.tests.test_inequalities.test_issue_8974()
sympy.solvers.tests.test_inequalities.test_issue_9954()
sympy.solvers.tests.test_inequalities.test_reduce_abs_inequalities()
sympy.solvers.tests.test_inequalities.test_reduce_inequalities_boolean()
sympy.solvers.tests.test_inequalities.test_reduce_inequalities_errors()
sympy.solvers.tests.test_inequalities.test_reduce_inequalities_general()
sympy.solvers.tests.test_inequalities.test_reduce_inequalities_multivariate()
sympy.solvers.tests.test_inequalities.test_reduce_poly_inequalities_complex_relational()
sympy.solvers.tests.test_inequalities.test_reduce_poly_inequalities_real_interval()
sympy.solvers.tests.test_inequalities.test_reduce_rational_inequalities_real_relational()
sympy.solvers.tests.test_inequalities.test_slow_general_univariate()
sympy.solvers.tests.test_inequalities.test_solve_poly_inequality()
sympy.solvers.tests.test_inequalities.test_solve_univariate_inequality()
sympy.solvers.tests.test_inequalities.test_trig_inequalities()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/tests/test_numeric.py----------------------------------------
A:sympy.solvers.tests.test_numeric.x->Matrix(symbols('t s'))
A:sympy.solvers.tests.test_numeric.ans->nsolve((x ** 2 + 3 * x + 2) / (x + 2), -2.1)
A:sympy.solvers.tests.test_numeric.x1->Symbol('x1')
A:sympy.solvers.tests.test_numeric.x2->Symbol('x2')
A:sympy.solvers.tests.test_numeric.F->lambdify((x, y, z), f.T, modules='mpmath')
A:sympy.solvers.tests.test_numeric.y->Symbol('y')
A:sympy.solvers.tests.test_numeric.z->Symbol('z')
A:sympy.solvers.tests.test_numeric.root->nsolve(f, (x, y, z), x0)
A:sympy.solvers.tests.test_numeric.a->Symbol('a')
A:sympy.solvers.tests.test_numeric.(x, y)->symbols('x y')
A:sympy.solvers.tests.test_numeric.q->nsolve(e1, x, 3.0)
A:sympy.solvers.tests.test_numeric.sol->nsolve(x ** 2 - pi, x, 3, prec=128)
A:sympy.solvers.tests.test_numeric.sols->nsolve((y ** 2 - x, x ** 2 - pi), (x, y), (3, 3), prec=128)
A:sympy.solvers.tests.test_numeric.x0->Matrix([17, 23])
sympy.solvers.tests.test_numeric.test_increased_dps()
sympy.solvers.tests.test_numeric.test_issue_14950()
sympy.solvers.tests.test_numeric.test_issue_6408()
sympy.solvers.tests.test_numeric.test_issue_6408_integral()
sympy.solvers.tests.test_numeric.test_nsolve()
sympy.solvers.tests.test_numeric.test_nsolve_complex()
sympy.solvers.tests.test_numeric.test_nsolve_denominator()
sympy.solvers.tests.test_numeric.test_nsolve_dict_kwarg()
sympy.solvers.tests.test_numeric.test_nsolve_fail()
sympy.solvers.tests.test_numeric.test_nsolve_precision()
sympy.solvers.tests.test_numeric.test_nsolve_rational()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/benchmarks/bench_solvers.py----------------------------------------
A:sympy.solvers.benchmarks.bench_solvers.M->zeros(N, N + 1)
A:sympy.solvers.benchmarks.bench_solvers.M[:, :N]->eye(N)
sympy.solvers.benchmarks.bench_solvers.timeit_linsolve_trivial()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/subscheck.py----------------------------------------
A:sympy.solvers.ode.subscheck.reps[d]->d.xreplace({func: new}).doit(deep=False)
A:sympy.solvers.ode.subscheck.ode->Eq(ode, 0)
A:sympy.solvers.ode.subscheck.(_, func)->_preprocess(ode.lhs)
A:sympy.solvers.ode.subscheck.funcs->list(set(funcs))
A:sympy.solvers.ode.subscheck.func->set().union(*[d.atoms(AppliedUndef) for d in derivs])
A:sympy.solvers.ode.subscheck.sol->Eq(func, sol)
A:sympy.solvers.ode.subscheck.order->ode_order(ode, func)
A:sympy.solvers.ode.subscheck.rhs->solve(sol, func)
A:sympy.solvers.ode.subscheck.Oterm->Eq(func, sol).rhs.getO()
A:sympy.solvers.ode.subscheck.solrhs->Eq(func, sol).rhs.removeO()
A:sympy.solvers.ode.subscheck.odesubs->(ode.lhs - ode.rhs).subs(func, solrhs).doit().expand()
A:sympy.solvers.ode.subscheck.neworder->Order(x ** (sorder - order))
A:sympy.solvers.ode.subscheck.residual->(ode.lhs - ode.rhs).subs(func, solrhs).doit().expand().removeO()
A:sympy.solvers.ode.subscheck.s->simplify(num).xreplace(reps).xreplace({_func: func})
A:sympy.solvers.ode.subscheck.ss->simplify(eq)
A:sympy.solvers.ode.subscheck.ds->Eq(func, sol).diff(x)
A:sympy.solvers.ode.subscheck.sdf->solve(ds, func.diff(x, i))
A:sympy.solvers.ode.subscheck.diffsols[i]->diffsols[i - 1].diff(x)
A:sympy.solvers.ode.subscheck.lhs->sub_func_doit(lhs, func.diff(x, i), diffsols[i])
A:sympy.solvers.ode.subscheck.ode_or_bool->simplify(ode_or_bool)
A:sympy.solvers.ode.subscheck.num->num.subs(func, _func).subs(func, _func)
A:sympy.solvers.ode.subscheck._func->Dummy('func')
A:sympy.solvers.ode.subscheck.(num, reps)->posify(num)
A:sympy.solvers.ode.subscheck.eqs->_sympify(eqs)
A:sympy.solvers.ode.subscheck.derivs->sqrtdenest(eq).simplify().atoms(Derivative)
A:sympy.solvers.ode.subscheck.eq->sqrtdenest(eq).simplify()
sympy.checkodesol(ode,sol,func=None,order='auto',solve_for_func=True)
sympy.solvers.ode.subscheck.checkodesol(ode,sol,func=None,order='auto',solve_for_func=True)
sympy.solvers.ode.subscheck.checksysodesol(eqs,sols,func=None)
sympy.solvers.ode.subscheck.sub_func_doit(eq,func,new)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/lie_group.py----------------------------------------
A:sympy.solvers.ode.lie_group.xi->Function('xi')(x, func)
A:sympy.solvers.ode.lie_group.eta->Function('eta')(x, func)
A:sympy.solvers.ode.lie_group.inf->separatevars(log(hinv).diff(y).diff(x) / hinv ** 2, dict=True, symbols=[x, y])
A:sympy.solvers.ode.lie_group.xiinf->infsim[xi(x, func)].subs(func, y)
A:sympy.solvers.ode.lie_group.etainf->infsim[eta(x, func)].subs(func, y)
A:sympy.solvers.ode.lie_group.r->Dummy('r')
A:sympy.solvers.ode.lie_group.s->Dummy('s')
A:sympy.solvers.ode.lie_group.C1->Symbol('C1')
A:sympy.solvers.ode.lie_group.sol->solve(check, k)
A:sympy.solvers.ode.lie_group.num->simplify(scoord.diff(x) + scoord.diff(y) * h)
A:sympy.solvers.ode.lie_group.denom->simplify(rcoord.diff(x) + rcoord.diff(y) * h)
A:sympy.solvers.ode.lie_group.diffeq->simplify((num / denom).subs([(x, xsub), (y, ysub)]))
A:sympy.solvers.ode.lie_group.sep->separatevars(frac, dict=True, symbols=[x, y])
A:sympy.solvers.ode.lie_group.deq->deq.subs([(r, rcoord), (s, scoord)]).subs([(r, rcoord), (s, scoord)])
A:sympy.solvers.ode.lie_group.sdeq->solve(deq, y)
A:sympy.solvers.ode.lie_group.df->func.diff(x)
A:sympy.solvers.ode.lie_group.y->Dummy('y')
A:sympy.solvers.ode.lie_group.h->h.subs(func, y).subs(func, y)
A:sympy.solvers.ode.lie_group.(eq, func)->_preprocess(eq)
A:sympy.solvers.ode.lie_group.order->ode_order(eq, func)
A:sympy.solvers.ode.lie_group.a->Wild('a', exclude=[df])
A:sympy.solvers.ode.lie_group.b->Wild('b', exclude=[df])
A:sympy.solvers.ode.lie_group.match->h.subs(func, y).subs(func, y).match(A + B * exp(y / C))
A:sympy.solvers.ode.lie_group.u->Dummy('u')
A:sympy.solvers.ode.lie_group.hx->h.subs(func, y).subs(func, y).diff(x)
A:sympy.solvers.ode.lie_group.hy->h.subs(func, y).subs(func, y).diff(y)
A:sympy.solvers.ode.lie_group.hinv->(1 / h).subs([(x, u), (y, x)]).subs(u, y)
A:sympy.solvers.ode.lie_group.inflist->function(match, comp=True)
A:sympy.solvers.ode.lie_group.xieta->function(match, comp=True)
A:sympy.solvers.ode.lie_group.fx->fx.subs(x, y).subs(x, y)
A:sympy.solvers.ode.lie_group.fy->exp(integrate(factor, y))
A:sympy.solvers.ode.lie_group.gy->gy.subs(y, x).subs(y, x)
A:sympy.solvers.ode.lie_group.u1->Dummy('u1')
A:sympy.solvers.ode.lie_group.etaval->etaval.subs(onedict).subs(onedict)
A:sympy.solvers.ode.lie_group.(etax, etay, etad, xix, xiy, xid)->symbols('etax etay etad xix xiy xid')
A:sympy.solvers.ode.lie_group.(num, denom)->cancel(cpde).as_numer_denom()
A:sympy.solvers.ode.lie_group.deg->Poly(num, x, y).total_degree()
A:sympy.solvers.ode.lie_group.deta->Function('deta')(x, y)
A:sympy.solvers.ode.lie_group.dxi->Function('dxi')(x, y)
A:sympy.solvers.ode.lie_group.xieq->Symbol('xi0')
A:sympy.solvers.ode.lie_group.etaeq->Symbol('eta0')
A:sympy.solvers.ode.lie_group.(pden, denom)->ipde.subs({dxi: xieq, deta: etaeq}).doit().as_numer_denom()
A:sympy.solvers.ode.lie_group.pden->expand(pden)
A:sympy.solvers.ode.lie_group.polyy->Poly(pden, x, y).as_dict()
A:sympy.solvers.ode.lie_group.soldict->solve(sollist, symlist)
A:sympy.solvers.ode.lie_group.xired->Symbol('xi0').subs(soldict)
A:sympy.solvers.ode.lie_group.etared->Symbol('eta0').subs(soldict)
A:sympy.solvers.ode.lie_group.(schi, schix, schiy)->symbols('schi, schix, schiy')
A:sympy.solvers.ode.lie_group.chi->Function('chi')(x, y)
A:sympy.solvers.ode.lie_group.chix->Function('chi')(x, y).diff(x)
A:sympy.solvers.ode.lie_group.chiy->Function('chi')(x, y).diff(y)
A:sympy.solvers.ode.lie_group.chieq->chieq.subs(dict_).subs(dict_)
A:sympy.solvers.ode.lie_group.(cnum, cden)->cancel(cpde.subs({chi: chieq}).doit()).as_numer_denom()
A:sympy.solvers.ode.lie_group.cnum->expand(cnum)
A:sympy.solvers.ode.lie_group.cpoly->Poly(cnum, x, y).as_dict()
A:sympy.solvers.ode.lie_group.(xic, etac)->div(chieq, h)
A:sympy.solvers.ode.lie_group.k->Dummy('k')
A:sympy.solvers.ode.lie_group.check->simplify(fx.diff(x, 2) - fdd)
A:sympy.solvers.ode.lie_group.factor->cancel(hinv.diff(y) / hinv.diff(y, 2))
A:sympy.solvers.ode.lie_group.factorx->cancel(hinv.diff(y) / hinv.diff(y, 2)).diff(x)
A:sympy.solvers.ode.lie_group.factory->cancel(hinv.diff(y) / hinv.diff(y, 2)).diff(y)
A:sympy.solvers.ode.lie_group.A->h.subs(func, y).subs(func, y).diff(x).diff(y)
A:sympy.solvers.ode.lie_group.B->Wild('B', exclude=[y])
A:sympy.solvers.ode.lie_group.C->Wild('C', exclude=[x, y])
A:sympy.solvers.ode.lie_group.gamma->cancel(factorx / factory)
A:sympy.solvers.ode.lie_group.tauint->cancel((gamma * hinv.diff(y) - gamma.diff(x) - hinv.diff(x)) / (hinv + gamma))
A:sympy.solvers.ode.lie_group.tau->exp(integrate(tauint, x))
A:sympy.solvers.ode.lie_group.(base, exp)->atom.as_base_exp()
A:sympy.solvers.ode.lie_group.frac->cancel(f.diff(y) / f.diff(x))
A:sympy.solvers.ode.lie_group.Ax->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(x)
A:sympy.solvers.ode.lie_group.Ay->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(y)
A:sympy.solvers.ode.lie_group.Axy->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(x).diff(y)
A:sympy.solvers.ode.lie_group.Axx->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(x).diff(x)
A:sympy.solvers.ode.lie_group.Ayy->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(y).diff(y)
A:sympy.solvers.ode.lie_group.E1->simplify((2 * Ayy + (2 * B - hy ** 2) * A) * A - 3 * Ay ** 2)
A:sympy.solvers.ode.lie_group.E2->simplify(4 * A ** 3 * D - D ** 2 + E1 * ((2 * Axx - (hx ** 2 + 2 * C) * A) * A - 3 * Ax ** 2))
A:sympy.solvers.ode.lie_group.E3->simplify(-(A * D) * E1.diff(y) + ((E1.diff(x) - hy * D) * A + 3 * Ay * D + (A * hx - 3 * Ax) * E1) * E1)
A:sympy.solvers.ode.lie_group.symbols->numbered_symbols('c', cls=Dummy)
A:sympy.solvers.ode.lie_group.(pde, denom)->powsimp(expand(pde)).as_numer_denom()
A:sympy.solvers.ode.lie_group.pde->powsimp(expand(pde))
A:sympy.solvers.ode.lie_group.rem->Mul(*[m for m in term.args if not m.has(x, y)])
A:sympy.solvers.ode.lie_group.sollist->coeffdict.values()
A:sympy.solvers.ode.lie_group.subval->solve(sollist, symlist).values()
A:sympy.solvers.ode.lie_group.onedict->dict(zip(symlist, [1] * 6))
A:sympy.solvers.ode.lie_group.xival->xival.subs(onedict).subs(onedict)
A:sympy.solvers.ode.lie_group.subfunc->coords.subs(func, 0).atoms(AppliedUndef)
A:sympy.solvers.ode.lie_group.coords->coords.subs(func, 0).subs(func, 0)
A:sympy.solvers.ode.lie_group.(base, expr)->coords.subs(func, 0).subs(func, 0).as_base_exp()
A:sympy.solvers.ode.lie_group.base->_lie_group_remove(base)
A:sympy.solvers.ode.lie_group.expr->_lie_group_remove(expr)
sympy.solvers.ode.infinitesimals(eq,func=None,order=None,hint='default',match=None)
sympy.solvers.ode.lie_group._lie_group_remove(coords)
sympy.solvers.ode.lie_group._ode_lie_group(s,func,order,match)
sympy.solvers.ode.lie_group._ode_lie_group_try_heuristic(eq,heuristic,func,match,inf)
sympy.solvers.ode.lie_group.infinitesimals(eq,func=None,order=None,hint='default',match=None)
sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product(match,comp=False)
sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple(match,comp=False)
sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar(match,comp=False)
sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general(match,comp=False)
sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown(match,comp=False)
sympy.solvers.ode.lie_group.lie_heuristic_bivariate(match,comp=False)
sympy.solvers.ode.lie_group.lie_heuristic_chi(match,comp=False)
sympy.solvers.ode.lie_group.lie_heuristic_function_sum(match,comp=False)
sympy.solvers.ode.lie_group.lie_heuristic_linear(match,comp=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/systems.py----------------------------------------
A:sympy.solvers.ode.systems.sol->simpsol(sol, [t], constants, doit=doit)
A:sympy.solvers.ode.systems.gens->linodesolve(A, t, b=rhs, B=B, type=type, tau=tau).atoms(exp)
A:sympy.solvers.ode.systems.p->Poly(sol, *gens, expand=False)
A:sympy.solvers.ode.systems.coeff->together(coeff)
A:sympy.solvers.ode.systems.monom->Mul(*(g ** i for (g, i) in zip(gens, monom)))
A:sympy.solvers.ode.systems.(no_t, has_t)->powsimp(expand_mul(e)).as_independent(t)
A:sympy.solvers.ode.systems.no_t->ratsimp(no_t)
A:sympy.solvers.ode.systems.has_t->has_t.replace(exp, lambda a: exp(factor_terms(a))).replace(exp, lambda a: exp(factor_terms(a)))
A:sympy.solvers.ode.systems.rhs->_match_second_order_type(A1, A0, t).get('rhs', None)
A:sympy.solvers.ode.systems.terms->_factor_matrix(As[-1], t)
A:sympy.solvers.ode.systems.(coeff, dep)->_factor_matrix(A, t).as_independent(*wrt1, as_Add=False)
A:sympy.solvers.ode.systems.dep->simpdep(dep, wrt1)
A:sympy.solvers.ode.systems.dep2->factor_terms(dep)
A:sympy.solvers.ode.systems.a->factor_terms(a)
A:sympy.solvers.ode.systems.(num, den)->factor_terms(a).as_numer_denom()
A:sympy.solvers.ode.systems.num->collect(num, wrt1)
A:sympy.solvers.ode.systems.term->_factor_matrix(A, t)
A:sympy.solvers.ode.systems.syms->list(ordered(coeff.free_symbols))
A:sympy.solvers.ode.systems.integrals->set().union(*(s.atoms(Integral) for s in sol))
A:sympy.solvers.ode.systems.type->_match_second_order_type(A1, A0, t).get('type_of_equation', 'type0')
A:sympy.solvers.ode.systems.(B, is_commuting)->_is_commutative_anti_derivative(A, t)
A:sympy.solvers.ode.systems.factor_terms->_factor_matrix(A, t)
A:sympy.solvers.ode.systems.t_->Symbol('{}_'.format(t))
A:sympy.solvers.ode.systems.F_t->integrate(factor_terms[0], t)
A:sympy.solvers.ode.systems.inverse->solveset(Eq(t_, F_t), t)
A:sympy.solvers.ode.systems.b->kwargs.get('b', None)
A:sympy.solvers.ode.systems.(Ai, b)->linear_eq_to_matrix(eqs, syms)
A:sympy.solvers.ode.systems.Ai->Ai.applyfunc(expand_mul).applyfunc(expand_mul)
A:sympy.solvers.ode.systems.(P, expJ)->matrix_exp_jordan_form(A, t)
A:sympy.solvers.ode.systems.(P, blocks)->A.jordan_cells()
A:sympy.solvers.ode.systems.eigenchains->jordan_chains(A)
A:sympy.solvers.ode.systems.eigenchains_iter->sorted(eigenchains.items(), key=default_sort_key)
A:sympy.solvers.ode.systems.seen_conjugate->set()
A:sympy.solvers.ode.systems.n->len(chain)
A:sympy.solvers.ode.systems.exprt->exp(re(e) * t)
A:sympy.solvers.ode.systems.imblock->Matrix([[cos(imrt), sin(imrt)], [-sin(imrt), cos(imrt)]])
A:sympy.solvers.ode.systems.expJblock2->Matrix(n, n, lambda i, j: imblock * t ** (j - i) / factorial(j - i) if j >= i else zeros(2, 2))
A:sympy.solvers.ode.systems.expJblock->Matrix(n, n, fun)
A:sympy.solvers.ode.systems.expJ->sympy.matrices.Matrix.diag(*blocks)
A:sympy.solvers.ode.systems.P->kwargs.get('P', None)
A:sympy.solvers.ode.systems.Cvect->Matrix([Dummy() for _ in range(n)])
A:sympy.solvers.ode.systems.system_info->linodesolve_type(A, t, b=b)
A:sympy.solvers.ode.systems.(P, J)->terms[1].jordan_form()
A:sympy.solvers.ode.systems.Jinv->kwargs.get('J', None).subs(t, -t)
A:sympy.solvers.ode.systems.(B, _)->_is_commutative_anti_derivative(A, t)
A:sympy.solvers.ode.systems.sol_vector->linodesolve(A, t, b=rhs, B=B, type=type, tau=tau)
A:sympy.solvers.ode.systems.order->_get_func_order(eqs, funcs)
A:sympy.solvers.ode.systems.canon_eqs->canonical_odes(eqs, funcs, t)
A:sympy.solvers.ode.systems.B->_match_second_order_type(A1, A0, t).get('commutative_antiderivative', None)
A:sympy.solvers.ode.systems.A_factored->(A / term).applyfunc(ratsimp)
A:sympy.solvers.ode.systems.can_factor->_matrix_is_constant(A_factored, t)
A:sympy.solvers.ode.systems.is_type2->_factor_matrix(A, t).is_polynomial()
A:sympy.solvers.ode.systems.poly->Poly(term.expand(), t)
A:sympy.solvers.ode.systems.monoms->Poly(term.expand(), t).monoms()
A:sympy.solvers.ode.systems.cs->_get_poly_coeffs(poly, 4)
A:sympy.solvers.ode.systems.a1->powdenest(sqrt(a), force=True)
A:sympy.solvers.ode.systems.c1->powdenest(sqrt(e), force=True)
A:sympy.solvers.ode.systems.b1->powdenest(sqrt(c - 2 * a1 * c1), force=True)
A:sympy.solvers.ode.systems.(is_type2, term)->_is_second_order_type2(A0, t)
A:sympy.solvers.ode.systems.(a, b, c)->_get_poly_coeffs(Poly(term, t), 2)
A:sympy.solvers.ode.systems.tau->_match_second_order_type(A1, A0, t).get('tau', None)
A:sympy.solvers.ode.systems.U->Matrix([t * func.diff(t) - func for func in funcs])
A:sympy.solvers.ode.systems.system_order->max((order[func] for func in funcs))
A:sympy.solvers.ode.systems.(As, b)->linear_ode_to_matrix(canon_eqs[0], funcs, t, system_order)
A:sympy.solvers.ode.systems.is_constant->_matrix_is_constant(A, t)
A:sympy.solvers.ode.systems.antiderivative->_match_second_order_type(A1, A0, t).pop('antiderivative')
A:sympy.solvers.ode.systems.match_second_order->_match_second_order_type(A1, A0, t)
A:sympy.solvers.ode.systems.is_euler->_is_euler_system(As, t)
A:sympy.solvers.ode.systems.funcset->set(funcs)
A:sympy.solvers.ode.systems.(f1,)->eq.lhs.atoms(AppliedUndef)
A:sympy.solvers.ode.systems.nodes->list(d)
A:sympy.solvers.ode.systems.((A1, A0), b)->linear_ode_to_matrix(eqs, funcs, t, 1)
A:sympy.solvers.ode.systems.remove->set()
A:sympy.solvers.ode.systems.(eqsmap, eqsorig)->_eqs2dict(eqs, funcs)
A:sympy.solvers.ode.systems.sccs->strongly_connected_components(_dict2graph(eqsmap_c))
A:sympy.solvers.ode.systems.subsystem->_combine_type1_subsystems(subsystem, sccs, t)
A:sympy.solvers.ode.systems.is_second_order->_match_second_order_type(A1, A0, t).get('is_second_order', False)
A:sympy.solvers.ode.systems.is_transformed->_match_second_order_type(A1, A0, t).get('is_transformed', False)
A:sympy.solvers.ode.systems.(new_eqs, new_funcs)->_higher_order_to_first_order(eqs, sysorder, t, funcs=funcs, type=type, J=match.get('J', None), f_t=match.get('f(t)', None), P=match.get('P', None), b=match.get('rhs', None))
A:sympy.solvers.ode.systems.t->_match_second_order_type(A1, A0, t).get('t_', t)
A:sympy.solvers.ode.systems.new_eqs->_select_equations(new_eqs, [f.diff(t) for f in new_funcs])
A:sympy.solvers.ode.systems.match->_match_second_order_type(A1, A0, t)
A:sympy.solvers.ode.systems.funcs->_extract_funcs(eqs)
A:sympy.solvers.ode.systems.scc_sol->_strong_component_solver(comp_eqs, funcs, t)
A:sympy.solvers.ode.systems.components->_component_division(eqs, funcs, t)
A:sympy.solvers.ode.systems.((A2, A1, A0), b)->linear_ode_to_matrix(eqs, funcs, t, 2)
A:sympy.solvers.ode.systems.A1->_match_second_order_type(A1, A0, t).get('A1', None)
A:sympy.solvers.ode.systems.A0->_match_second_order_type(A1, A0, t).get('A0', None)
A:sympy.solvers.ode.systems.eqs->_preprocess_eqs(eqs)
A:sympy.solvers.ode.systems.(eqs, funcs)->_second_order_subs_type2(A0, funcs, t_)
A:sympy.solvers.ode.systems.new_funcs->Matrix([Function(Dummy('{}__0'.format(f.func.__name__)))(t) for f in funcs])
A:sympy.solvers.ode.systems.max_order->max((sys_order[func] for func in funcs))
A:sympy.solvers.ode.systems.subs_dict[t]->exp(t_)
A:sympy.solvers.ode.systems.free_function->Function(Dummy())
A:sympy.solvers.ode.systems.coeff_dict->_get_coeffs_from_subs_expression(expr)
A:sympy.solvers.ode.systems.J->kwargs.get('J', None)
A:sympy.solvers.ode.systems.f_t->kwargs.get('f_t', None)
A:sympy.solvers.ode.systems.func->Function(Dummy('{}_0'.format(func_name)))(t)
A:sympy.solvers.ode.systems.new_func->Function(Dummy('{}_{}'.format(func_name, i)))(t)
A:sympy.solvers.ode.systems.new_eq->Eq(prev_f.diff(t), new_func)
A:sympy.solvers.ode.systems.solved_constants->solve_ics(sol, funcs, constants, ics)
sympy.solvers.ode.canonical_odes(eqs,funcs,t)
sympy.solvers.ode.linear_ode_to_matrix(eqs,funcs,t,order)
sympy.solvers.ode.linodesolve(A,t,b=None,B=None,type='auto',doit=False,tau=None)
sympy.solvers.ode.systems.ODENonlinearError(NonlinearError)
sympy.solvers.ode.systems.ODEOrderError(ValueError)
sympy.solvers.ode.systems._classify_linear_system(eqs,funcs,t,is_canon=False)
sympy.solvers.ode.systems._combine_type1_subsystems(subsystem,funcs,t)
sympy.solvers.ode.systems._component_division(eqs,funcs,t)
sympy.solvers.ode.systems._component_solver(eqs,funcs,t)
sympy.solvers.ode.systems._dict2graph(d)
sympy.solvers.ode.systems._eqs2dict(eqs,funcs)
sympy.solvers.ode.systems._factor_matrix(A,t)
sympy.solvers.ode.systems._first_order_type5_6_subs(A,t,b=None)
sympy.solvers.ode.systems._get_func_order(eqs,funcs)
sympy.solvers.ode.systems._get_funcs_from_canon(eqs)
sympy.solvers.ode.systems._get_poly_coeffs(poly,order)
sympy.solvers.ode.systems._higher_order_ode_solver(match)
sympy.solvers.ode.systems._higher_order_to_first_order(eqs,sys_order,t,funcs=None,type='type0',**kwargs)
sympy.solvers.ode.systems._higher_order_type2_to_sub_systems(J,f_t,funcs,t,max_order,b=None,P=None)
sympy.solvers.ode.systems._is_commutative_anti_derivative(A,t)
sympy.solvers.ode.systems._is_euler_system(As,t)
sympy.solvers.ode.systems._is_second_order_type2(A,t)
sympy.solvers.ode.systems._is_type1(scc,t)
sympy.solvers.ode.systems._linear_ode_solver(match)
sympy.solvers.ode.systems._match_second_order_type(A1,A0,t,b=None)
sympy.solvers.ode.systems._matrix_is_constant(M,t)
sympy.solvers.ode.systems._preprocess_eqs(eqs)
sympy.solvers.ode.systems._second_order_subs_type1(A,b,funcs,t)
sympy.solvers.ode.systems._second_order_subs_type2(A,funcs,t_)
sympy.solvers.ode.systems._second_order_to_first_order(eqs,funcs,t,type='auto',A1=None,A0=None,b=None,t_=None)
sympy.solvers.ode.systems._select_equations(eqs,funcs,key=lambdax:x)
sympy.solvers.ode.systems._simpsol(soleq)
sympy.solvers.ode.systems._solsimp(e,t)
sympy.solvers.ode.systems._strong_component_solver(eqs,funcs,t)
sympy.solvers.ode.systems._weak_component_solver(wcc,t)
sympy.solvers.ode.systems.canonical_odes(eqs,funcs,t)
sympy.solvers.ode.systems.dsolve_system(eqs,funcs=None,t=None,ics=None,doit=False,simplify=True)
sympy.solvers.ode.systems.linear_ode_to_matrix(eqs,funcs,t,order)
sympy.solvers.ode.systems.linodesolve(A,t,b=None,B=None,type='auto',doit=False,tau=None)
sympy.solvers.ode.systems.linodesolve_type(A,t,b=None)
sympy.solvers.ode.systems.matrix_exp(A,t)
sympy.solvers.ode.systems.matrix_exp_jordan_form(A,t)
sympy.solvers.ode.systems.simpsol(sol,wrt1,wrt2,doit=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/ode.py----------------------------------------
A:sympy.solvers.ode.ode.ncs->iter_numbered_constants(eq, start, prefix)
A:sympy.solvers.ode.ode.atom_set->set().union(*[i.free_symbols for i in eq])
A:sympy.solvers.ode.ode.func_set->set().union(*[i.atoms(Function) for i in eq])
A:sympy.solvers.ode.ode.sol->_nonlinear_3eq_order1_type5(x, y, z, t, eq)
A:sympy.solvers.ode.ode.match->collect(expand(eq), df).match(a * df + b)
A:sympy.solvers.ode.ode.sols->solve(sol, func)
A:sympy.solvers.ode.ode.solved_constants->solve(subs_sols, constants, dict=True)
A:sympy.solvers.ode.ode.hints->_desolve(eq, func=func, hint=hint, simplify=True, xi=xi, eta=eta, type='ode', ics=ics, x0=x0, n=n, **kwargs)
A:sympy.solvers.ode.ode.eq->Eq(lhs, rhs)
A:sympy.solvers.ode.ode.all_->_desolve(eq, func=func, hint=hint, simplify=True, xi=xi, eta=eta, type='ode', ics=ics, x0=x0, n=n, **kwargs).pop('all', False)
A:sympy.solvers.ode.ode.gethints->classify_ode(eq, dict=True, hint='all')
A:sympy.solvers.ode.ode.rv->rv.subs(solved_constants).subs(solved_constants)
A:sympy.solvers.ode.ode.retdict['best']->min(list(retdict.values()), key=lambda x: ode_sol_simplicity(x, func, trysolving=not simplify))
A:sympy.solvers.ode.ode.exprs->solvefunc(eq, func, order, match)
A:sympy.solvers.ode.ode.diff_variables->set()
A:sympy.solvers.ode.ode.funcarg->funcarg.doit().doit()
A:sympy.solvers.ode.ode.matching_func->deriv.subs(x0, x)
A:sympy.solvers.ode.ode.sol2->dsolve(b * diff(y(t), t) - (c - a) * z_y * x_y * r[f])
A:sympy.solvers.ode.ode.ics->sympify(ics)
A:sympy.solvers.ode.ode.(eq, func_)->_preprocess(eq, func)
A:sympy.solvers.ode.ode.y->Dummy('y')
A:sympy.solvers.ode.ode.order->ode_order(eq, func)
A:sympy.solvers.ode.ode.df->func.diff(x)
A:sympy.solvers.ode.ode.a->vals[0].subs(w, c)
A:sympy.solvers.ode.ode.d->Dummy('d')
A:sympy.solvers.ode.ode.e->Wild('e', exclude=[df])
A:sympy.solvers.ode.ode.n->Wild('n', exclude=[x(t), y(t)])
A:sympy.solvers.ode.ode.c1->Wild('c1', exclude=[x])
A:sympy.solvers.ode.ode.a3->Wild('a3', exclude=[f(x), df, f(x).diff(x, 2)])
A:sympy.solvers.ode.ode.b3->Wild('b3', exclude=[f(x), df, f(x).diff(x, 2)])
A:sympy.solvers.ode.ode.c3->Wild('c3', exclude=[f(x), df, f(x).diff(x, 2)])
A:sympy.solvers.ode.ode.C1->get_numbered_constants(eq, num=1)
A:sympy.solvers.ode.ode.dorder->ode_order(deriv, x)
A:sympy.solvers.ode.ode.ode->SingleODEProblem(eq_orig, func, x, prep=prep, xi=xi, eta=eta)
A:sympy.solvers.ode.ode.user_hint->kwargs.get('hint', 'default')
A:sympy.solvers.ode.ode.solver->user_map[hint](ode)
A:sympy.solvers.ode.ode.deriv_coef->Eq(lhs, rhs).coeff(f(x).diff(x, order))
A:sympy.solvers.ode.ode.r->collect_const(r1[F2]).match(s * F2)
A:sympy.solvers.ode.ode.reduced_eq->expand(n)
A:sympy.solvers.ode.ode.r[d]->r[d].subs(f(x), y).subs(f(x), y)
A:sympy.solvers.ode.ode.r[e]->r[e].subs(f(x), y).subs(f(x), y)
A:sympy.solvers.ode.ode.point->kwargs.get('x0', 0)
A:sympy.solvers.ode.ode.value->boundary.get('f0val', C1)
A:sympy.solvers.ode.ode.check->rhs.diff(var).subs(n, startiter)
A:sympy.solvers.ode.ode.check1->rhs.diff(var).subs(n, startiter).subs({x: point, y: value})
A:sympy.solvers.ode.ode.check2->rhs.diff(var).subs(n, startiter).subs({x: point, y: value}).diff(x).subs({x: point, y: value})
A:sympy.solvers.ode.ode.rseries->collect_const(r1[F2]).match(s * F2).copy()
A:sympy.solvers.ode.ode.(n, d)->expand(n).as_numer_denom()
A:sympy.solvers.ode.ode.p->Wild('p', exclude=[x(t), y(t), z(t), t])
A:sympy.solvers.ode.ode.q->Wild('q', exclude=[x(t), y(t), z(t), t])
A:sympy.solvers.ode.ode.matching_hints['ordered_hints']->tuple(retlist)
A:sympy.solvers.ode.ode.funcs->list(uniq(funcs))
A:sympy.solvers.ode.ode.order_->ode_order(eqs_, func)
A:sympy.solvers.ode.ode.func_coef[j, func, k]->collect(eqs.expand(), [diff(func, t, k)]).coeff(diff(func, t, k))
A:sympy.solvers.ode.ode.is_linear->linearity_check(eqs, j, func, is_linear)
A:sympy.solvers.ode.ode.type_of_equation->check_nonlinear_3eq_order1(eq, funcs, func_coef)
A:sympy.solvers.ode.ode.p1->cancel(r['c'] / cancel(r['c'] / r['d']).as_numer_denom()[0])
A:sympy.solvers.ode.ode.p2->cancel(r['a'] / cancel(r['a'] / r['b']).as_numer_denom()[0])
A:sympy.solvers.ode.ode.f->Wild('f')
A:sympy.solvers.ode.ode.g->Wild('g')
A:sympy.solvers.ode.ode.(u, v)->symbols('u, v')
A:sympy.solvers.ode.ode.r1->eq[0].match(diff(x(t), t) - x(t) * F2 + x(t) * F3)
A:sympy.solvers.ode.ode.r2->(-eq[1]).match(diff(y(t), t) - y(t) / t + g / t)
A:sympy.solvers.ode.ode.eq_type->check_type(y, x)
A:sympy.solvers.ode.ode.f1->Wild('f1', exclude=[v, t])
A:sympy.solvers.ode.ode.f2->Wild('f2', exclude=[v, t])
A:sympy.solvers.ode.ode.g1->Wild('g1', exclude=[u, t])
A:sympy.solvers.ode.ode.g2->Wild('g2', exclude=[u, t])
A:sympy.solvers.ode.ode.(num, den)->(r1[f].subs(x(t), u).subs(y(t), v) / r2[g].subs(x(t), u).subs(y(t), v)).as_numer_denom()
A:sympy.solvers.ode.ode.R1->num.match(f1 * g1)
A:sympy.solvers.ode.ode.R2->den.match(f2 * g2)
A:sympy.solvers.ode.ode.(u, v, w)->symbols('u, v, w')
A:sympy.solvers.ode.ode.b->vals[1].subs(w, c)
A:sympy.solvers.ode.ode.c->lcm(vals[0].as_numer_denom()[1], vals[1].as_numer_denom()[1])
A:sympy.solvers.ode.ode.F1->r[F1].subs(x(t), u).subs(y(t), v).subs(z(t), w)
A:sympy.solvers.ode.ode.F2->r[F2].subs(x(t), u).subs(y(t), v).subs(z(t), w)
A:sympy.solvers.ode.ode.F3->r[F3].subs(x(t), u).subs(y(t), v).subs(z(t), w)
A:sympy.solvers.ode.ode.r3->((diff(z(t), t) - eq[2]) / r1[f]).match(c * x(t) * y(t))
A:sympy.solvers.ode.ode.(num1, den1)->r1[a].as_numer_denom()
A:sympy.solvers.ode.ode.(num2, den2)->r2[b].as_numer_denom()
A:sympy.solvers.ode.ode.(num3, den3)->r3[c].as_numer_denom()
A:sympy.solvers.ode.ode.floats->any((i.is_Float for i in eq.atoms(Number)))
A:sympy.solvers.ode.ode.eqsol->solve(eq, func, force=True, rational=False if floats else None)
A:sympy.solvers.ode.ode.(numer, denom)->expr.subs(subs_dict, simultaneous=True).as_numer_denom()
A:sympy.solvers.ode.ode.newi->Eq(newi.lhs.args[0] / C1, C1)
A:sympy.solvers.ode.ode.eq[i]->Add(*[terms / fc[i, func[i], 1] for terms in Add.make_args(eq[i])])
A:sympy.solvers.ode.ode.Cs->set(Cs)
A:sympy.solvers.ode.ode.expr->expr.subs(subs_dict, simultaneous=True).subs(subs_dict, simultaneous=True)
A:sympy.solvers.ode.ode.x->expr.subs(subs_dict, simultaneous=True).subs(subs_dict, simultaneous=True).func(*d[True])
A:sympy.solvers.ode.ode.dlhs->sift([lhs] if isinstance(lhs, AtomicExpr) else lhs.args, f)
A:sympy.solvers.ode.ode.drhs->sift([rhs] if isinstance(rhs, AtomicExpr) else rhs.args, f)
A:sympy.solvers.ode.ode.lhs->lhs.diff(var).diff(var)
A:sympy.solvers.ode.ode.constant_subexprs->_get_constant_subexpressions(expr, Cs)
A:sympy.solvers.ode.ode.xes->list(xe.free_symbols)
A:sympy.solvers.ode.ode.(commons, rexpr)->cse(expr)
A:sympy.solvers.ode.ode.cs->list(s[1].atoms(Symbol))
A:sympy.solvers.ode.ode.rexpr->rexpr.subs(*s).subs(*s)
A:sympy.solvers.ode.ode.new_expr->terms_gcd(expr, clear=False, deep=True, expand=False)
A:sympy.solvers.ode.ode.infac->any((isinstance(fi, exp) for t in m.args for fi in Mul.make_args(t)))
A:sympy.solvers.ode.ode.variables->set()
A:sympy.solvers.ode.ode.constantsymbols->list(free_symbols - variables)
A:sympy.solvers.ode.ode.iter_constants->numbered_symbols(start=1, prefix='C', exclude=variables)
A:sympy.solvers.ode.ode.sortedargs->list(expr.args)
A:sympy.solvers.ode.ode.symset->set(symbols)
A:sympy.solvers.ode.ode.dum->numbered_symbols(prefix='d', cls=Dummy)
A:sympy.solvers.ode.ode.newsyms->set()
A:sympy.solvers.ode.ode.iargs->set(i.args)
A:sympy.solvers.ode.ode.dummyvar->next(dum)
A:sympy.solvers.ode.ode.t->Dummy('t', positive=True)
A:sympy.solvers.ode.ode.(i, d)->eqs.as_independent(t, as_Add=False)
A:sympy.solvers.ode.ode.(b, e)->Dummy('d').as_base_exp()
A:sympy.solvers.ode.ode.(C0, C1)->get_numbered_constants(eq, num=2)
A:sympy.solvers.ode.ode.s->Wild('s', exclude=[x(t), y(t), z(t), t])
A:sympy.solvers.ode.ode.k->Wild('k', exclude=[x])
A:sympy.solvers.ode.ode.recurr->Function('r')
A:sympy.solvers.ode.ode.powm->arg.match(s * x ** k)
A:sympy.solvers.ode.ode.term->series(term, x=x, n=1, x0=x0)
A:sympy.solvers.ode.ode.startind->powm[k].subs(n, index)
A:sympy.solvers.ode.ode.suminit->seriesdict.values()
A:sympy.solvers.ode.ode.rkeys->seriesdict.keys()
A:sympy.solvers.ode.ode.req->Add(*rkeys)
A:sympy.solvers.ode.ode.maxval->max(suminit)
A:sympy.solvers.ode.ode.fargs->Add(*rkeys).atoms(AppliedUndef)
A:sympy.solvers.ode.ode.maxf->max(fargs, key=lambda x: x.args[0])
A:sympy.solvers.ode.ode.minf->min(fargs, key=lambda x: x.args[0])
A:sympy.solvers.ode.ode.rhs->rhs.diff(var).diff(var)
A:sympy.solvers.ode.ode.tcounter->len([t for t in finaldict.values() if t])
A:sympy.solvers.ode.ode.nlhs->lhs.diff(var).diff(var).subs(n, startiter)
A:sympy.solvers.ode.ode.nrhs->rhs.diff(var).subs(n, startiter).subs(finaldict)
A:sympy.solvers.ode.ode.m->Dummy('m')
A:sympy.solvers.ode.ode.sollist->solve(m * (m - 1) + m * p0 + q0, m)
A:sympy.solvers.ode.ode.m1m2->solve(m * (m - 1) + m * p0 + q0, m).pop()
A:sympy.solvers.ode.ode.serdict1->_frobenius(terms - m1 - 1, m1, p0, q0, p, q, x0, x, C0)
A:sympy.solvers.ode.ode.serdict2->_frobenius(terms - m2 - 1, m2, p0, q0, p, q, x0, x, C1, check=m1)
A:sympy.solvers.ode.ode.power->int(key.name[1:])
A:sympy.solvers.ode.ode.numsyms->numbered_symbols('C', start=0)
A:sympy.solvers.ode.ode.ser->ser.subs(x, x + x0).subs(x, x + x0)
A:sympy.solvers.ode.ode.dict_->Poly(list(ordered(tseries.args))[:-1], x).as_dict()
A:sympy.solvers.ode.ode.tseries->series(ser, x=x0, n=n + 1)
A:sympy.solvers.ode.ode.sym->Symbol('C' + str(j))
A:sympy.solvers.ode.ode.soln1->soln1.subs(c_old, c_new).subs(c_old, c_new)
A:sympy.solvers.ode.ode.soln2->soln2.removeO().removeO()
A:sympy.solvers.ode.ode.constants1->soln1.subs(c_old, c_new).subs(c_old, c_new).free_symbols.difference(eq.free_symbols)
A:sympy.solvers.ode.ode.constants2->soln2.removeO().removeO().free_symbols.difference(eq.free_symbols)
A:sympy.solvers.ode.ode.constants1_new->get_numbered_constants(Tuple(soln1, soln2), len(constants1))
A:sympy.solvers.ode.ode.constant_solns->solve(eqns, constants2)
A:sympy.solvers.ode.ode.hc->h.subs(func, y).subs({x: point, y: value})
A:sympy.solvers.ode.ode.Fnewc->Fnew.subs({x: point, y: value})
A:sympy.solvers.ode.ode.(eq, func)->_preprocess(eq)
A:sympy.solvers.ode.ode.h->h.subs(func, y).subs(func, y)
A:sympy.solvers.ode.ode.xi->Function('xi')(x, y)
A:sympy.solvers.ode.ode.eta->Function('eta')(x, y)
A:sympy.solvers.ode.ode.dxi->Function('xi')(x, func)
A:sympy.solvers.ode.ode.deta->Function('eta')(x, func)
A:sympy.solvers.ode.ode.(C1, C2, C3, C4)->get_numbered_constants(eq, num=4)
A:sympy.solvers.ode.ode.x0->Function('x0')(t)
A:sympy.solvers.ode.ode.y0->Function('y0')(t)
A:sympy.solvers.ode.ode.F->r1[f].subs(x(t), u).subs(y(t), v(u))
A:sympy.solvers.ode.ode.P->exp(Integral(r['d'], t))
A:sympy.solvers.ode.ode.(C1, C2)->get_numbered_constants(eq, num=2)
A:sympy.solvers.ode.ode.phi->phi.doit().doit()
A:sympy.solvers.ode.ode.v->Function('v')
A:sympy.solvers.ode.ode.u->Symbol('u')
A:sympy.solvers.ode.ode.G->r2[g].subs(x(t), u).subs(y(t), v(u))
A:sympy.solvers.ode.ode.sol2r->solve(Integral(F2 / F1, u).doit() - Integral(G1 / G2, v).doit() - C1, v)
A:sympy.solvers.ode.ode.sol1->dsolve(a * diff(x(t), t) - (b - c) * y_x * z_x * r[f])
A:sympy.solvers.ode.ode.(U, V)->symbols('U, V', cls=Function)
A:sympy.solvers.ode.ode.sol1r->solve(Integral(F2 / F1, u).doit() - Integral(G1 / G2, v).doit() - C1, u)
A:sympy.solvers.ode.ode.[r1, r2]->check_type(y, x)
A:sympy.solvers.ode.ode.x1->diff(x(t), t)
A:sympy.solvers.ode.ode.y1->diff(y(t), t)
A:sympy.solvers.ode.ode.(n1, d1)->r[p].as_numer_denom()
A:sympy.solvers.ode.ode.(n2, d2)->r[q].as_numer_denom()
A:sympy.solvers.ode.ode.(n3, d3)->r[s].as_numer_denom()
A:sympy.solvers.ode.ode.val->solve([n1 * u - d1 * v + d1 * w, d2 * u + n2 * v - d2 * w, -d3 * u + d3 * v + n3 * w], [u, v])
A:sympy.solvers.ode.ode.y_x->sqrt((c * C1 - C2 - a * (c - a) * x(t) ** 2) / (b * (c - b)))
A:sympy.solvers.ode.ode.z_x->sqrt((b * C1 - C2 - a * (b - a) * x(t) ** 2) / (c * (b - c)))
A:sympy.solvers.ode.ode.z_y->sqrt((a * C1 - C2 - b * (a - b) * y(t) ** 2) / (c * (a - c)))
A:sympy.solvers.ode.ode.x_y->sqrt((c * C1 - C2 - b * (c - b) * y(t) ** 2) / (a * (c - a)))
A:sympy.solvers.ode.ode.x_z->sqrt((b * C1 - C2 - c * (b - c) * z(t) ** 2) / (a * (b - a)))
A:sympy.solvers.ode.ode.y_z->sqrt((a * C1 - C2 - c * (a - c) * z(t) ** 2) / (b * (a - b)))
A:sympy.solvers.ode.ode.sol3->dsolve(c * diff(z(t), t) - (a - b) * x_z * y_z * r[f])
A:sympy.solvers.ode.ode.(fu, fv, fw)->symbols('u, v, w', cls=Function)
A:sympy.solvers.ode.ode.(F1, F2, F3)->symbols('F1, F2, F3', cls=Wild)
A:sympy.solvers.ode.ode.x_yz->sqrt((C1 - b * v ** 2 - c * w ** 2) / a)
A:sympy.solvers.ode.ode.y_zx->sqrt((C1 - c * w ** 2 - a * u ** 2) / b)
A:sympy.solvers.ode.ode.z_xy->sqrt((C1 - a * u ** 2 - b * v ** 2) / c)
sympy.classify_ode(eq,func=None,dict=False,ics=None,*,prep=True,xi=None,eta=None,n=None,**kwargs)
sympy.dsolve(eq,func=None,hint='default',simplify=True,ics=None,xi=None,eta=None,x0=0,n=6,**kwargs)
sympy.homogeneous_order(eq,*symbols)
sympy.solvers.ode.checkinfsol(eq,infinitesimals,func=None,order=None)
sympy.solvers.ode.constantsimp(expr,constants)
sympy.solvers.ode.ode.__remove_linear_redundancies(expr,Cs)
sympy.solvers.ode.ode._extract_funcs(eqs)
sympy.solvers.ode.ode._frobenius(n,m,p0,q0,p,q,x0,x,c,check=None)
sympy.solvers.ode.ode._get_constant_subexpressions(expr,Cs)
sympy.solvers.ode.ode._handle_Integral(expr,func,hint)
sympy.solvers.ode.ode._helper_simplify(eq,hint,match,simplify=True,ics=None,**kwargs)
sympy.solvers.ode.ode._is_special_case_of(soln1,soln2,eq,order,var)
sympy.solvers.ode.ode._linear_2eq_order1_type6(x,y,t,r,eq)
sympy.solvers.ode.ode._linear_2eq_order1_type7(x,y,t,r,eq)
sympy.solvers.ode.ode._nonlinear_2eq_order1_type1(x,y,t,eq)
sympy.solvers.ode.ode._nonlinear_2eq_order1_type2(x,y,t,eq)
sympy.solvers.ode.ode._nonlinear_2eq_order1_type3(x,y,t,eq)
sympy.solvers.ode.ode._nonlinear_2eq_order1_type4(x,y,t,eq)
sympy.solvers.ode.ode._nonlinear_2eq_order1_type5(func,t,eq)
sympy.solvers.ode.ode._nonlinear_3eq_order1_type1(x,y,z,t,eq)
sympy.solvers.ode.ode._nonlinear_3eq_order1_type2(x,y,z,t,eq)
sympy.solvers.ode.ode._nonlinear_3eq_order1_type3(x,y,z,t,eq)
sympy.solvers.ode.ode._nonlinear_3eq_order1_type4(x,y,z,t,eq)
sympy.solvers.ode.ode._nonlinear_3eq_order1_type5(x,y,z,t,eq)
sympy.solvers.ode.ode._remove_redundant_solutions(eq,solns,order,var)
sympy.solvers.ode.ode.check_linear_2eq_order1(eq,func,func_coef)
sympy.solvers.ode.ode.check_nonlinear_2eq_order1(eq,func,func_coef)
sympy.solvers.ode.ode.check_nonlinear_2eq_order2(eq,func,func_coef)
sympy.solvers.ode.ode.check_nonlinear_3eq_order1(eq,func,func_coef)
sympy.solvers.ode.ode.check_nonlinear_3eq_order2(eq,func,func_coef)
sympy.solvers.ode.ode.checkinfsol(eq,infinitesimals,func=None,order=None)
sympy.solvers.ode.ode.classify_ode(eq,func=None,dict=False,ics=None,*,prep=True,xi=None,eta=None,n=None,**kwargs)
sympy.solvers.ode.ode.classify_sysode(eq,funcs=None,**kwargs)
sympy.solvers.ode.ode.constant_renumber(expr,variables=None,newconstants=None)
sympy.solvers.ode.ode.constantsimp(expr,constants)
sympy.solvers.ode.ode.dsolve(eq,func=None,hint='default',simplify=True,ics=None,xi=None,eta=None,x0=0,n=6,**kwargs)
sympy.solvers.ode.ode.get_numbered_constants(eq,num=1,start=1,prefix='C')
sympy.solvers.ode.ode.homogeneous_order(eq,*symbols)
sympy.solvers.ode.ode.iter_numbered_constants(eq,start=1,prefix='C')
sympy.solvers.ode.ode.ode_1st_power_series(eq,func,order,match)
sympy.solvers.ode.ode.ode_2nd_power_series_ordinary(eq,func,order,match)
sympy.solvers.ode.ode.ode_2nd_power_series_regular(eq,func,order,match)
sympy.solvers.ode.ode.ode_sol_simplicity(sol,func,trysolving=True)
sympy.solvers.ode.ode.odesimp(ode,eq,func,hint)
sympy.solvers.ode.ode.solve_ics(sols,funcs,constants,ics)
sympy.solvers.ode.ode.sysode_linear_2eq_order1(match_)
sympy.solvers.ode.ode.sysode_nonlinear_2eq_order1(match_)
sympy.solvers.ode.ode.sysode_nonlinear_3eq_order1(match_)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/single.py----------------------------------------
A:sympy.solvers.ode.single.a->Wild('a', exclude=[f, df])
A:sympy.solvers.ode.single.c1->Wild('c1', exclude=[self.sym])
A:sympy.solvers.ode.single.deriv_coef->self.eq.coeff(self.func.diff(self.sym, self.order))
A:sympy.solvers.ode.single.r->collect(eq, df, exact=True).match(d + e * df)
A:sympy.solvers.ode.single.reduced_eq->expand(self.eq)
A:sympy.solvers.ode.single.(process_eq, process_func)->_preprocess(self.eq, self.func)
A:sympy.solvers.ode.single.ncs->self.iter_numbered_constants(start, prefix)
A:sympy.solvers.ode.single.func_set->self.eq.atoms(Function)
A:sympy.solvers.ode.single.u->Dummy('u')
A:sympy.solvers.ode.single.(rhs, lhs_terms)->_lin_eq2dict(eq, symset)
A:sympy.solvers.ode.single.self._matched->self._matches()
A:sympy.solvers.ode.single.df->func.diff(x)
A:sympy.solvers.ode.single.pattern->self._equation(f(x), x, order)
A:sympy.solvers.ode.single.eq->expand(n)
A:sympy.solvers.ode.single.self._wilds_matchmatch->expand(n).match(pattern)
A:sympy.solvers.ode.single.diffx->self._get_diffx(var)
A:sympy.solvers.ode.single.toreplace->Derivative(toreplace, v)
A:sympy.solvers.ode.single.subs_eqn->replace(eq, var)
A:sympy.solvers.ode.single.solns->solve(subs_eqn, func, simplify=False)
A:sympy.solvers.ode.single.diffcls->NthAlgebraic._diffx_stored.setdefault(var, diffx)
A:sympy.solvers.ode.single.P->Wild('P', exclude=[f(x)])
A:sympy.solvers.ode.single.Q->Wild('Q', exclude=[f(x)])
A:sympy.solvers.ode.single.(P, Q)->self.wilds()
A:sympy.solvers.ode.single.y->Dummy('y')
A:sympy.solvers.ode.single.(m, n)->self.wilds_match()
A:sympy.solvers.ode.single.m->abc(d)
A:sympy.solvers.ode.single.n->sqrt(n ** 2 + Rational(1, 4) * (c4 - 1) ** 2)
A:sympy.solvers.ode.single.numerator->cancel(m.diff(y) - n.diff(x))
A:sympy.solvers.ode.single.factor_n->cancel(numerator / n)
A:sympy.solvers.ode.single.factor_m->cancel(-numerator / m)
A:sympy.solvers.ode.single.factor->simplify(x / fx * num / den)
A:sympy.solvers.ode.single.self._wilds_match[P]->abc(d).subs(y, fx)
A:sympy.solvers.ode.single.self._wilds_match[Q]->sqrt(n ** 2 + Rational(1, 4) * (c4 - 1) ** 2).subs(y, fx)
A:sympy.solvers.ode.single.(C1,)->self.ode_problem.get_numbered_constants(num=1)
A:sympy.solvers.ode.single.gen_sol->_ode_lie_group(s, func, order, match=self.r3).subs(fx, u).subs(((u, u - yarg), (x, x - xarg), (u, fx)))
A:sympy.solvers.ode.single.gensol->Eq(fx, (a - c - mu * tan(mu / (2 * a) * log(x) + C1)) / (2 * b * x))
A:sympy.solvers.ode.single.(a, b)->self.wilds()
A:sympy.solvers.ode.single.(P, Q, n)->self.wilds_match()
A:sympy.solvers.ode.single.factors->sympy.core.mul.Mul.make_args(factor(eq))
A:sympy.solvers.ode.single.roots->solve(eq, df)
A:sympy.solvers.ode.single.sol->_ode_lie_group(s, func, order, match=self.r3)
A:sympy.solvers.ode.single.b->Wild('b', exclude=[x, f, df])
A:sympy.solvers.ode.single.c->Wild('c', exclude=[x, f(x), f(x).diff(x)])
A:sympy.solvers.ode.single.d->Wild('d', exclude=[df, f(x).diff(x, 2)])
A:sympy.solvers.ode.single.(a, b, c, d)->self.wilds_match()
A:sympy.solvers.ode.single.mu->sqrt(4 * d * b - (a - c) ** 2)
A:sympy.solvers.ode.single.b0->Wild('b0', exclude=[f(x), f(x).diff(x)])
A:sympy.solvers.ode.single.b1->Wild('b1', exclude=[f(x), f(x).diff(x)])
A:sympy.solvers.ode.single.b2->Wild('b2', exclude=[f(x), f(x).diff(x)])
A:sympy.solvers.ode.single.(b0, b1, b2)->self.wilds_match()
A:sympy.solvers.ode.single.(match, funcs)->match_riccati(eq, f, x)
A:sympy.solvers.ode.single.fy->Wild('fy', exclude=[0, f(x).diff(x), f(x).diff(x, 2)])
A:sympy.solvers.ode.single.g->Function(name)
A:sympy.solvers.ode.single.(C1, C2)->self.ode_problem.get_numbered_constants(num=2)
A:sympy.solvers.ode.single.lhs->Integral(1 / sqrt(inside), (u, fx))
A:sympy.solvers.ode.single.e->Wild('e', exclude=[df])
A:sympy.solvers.ode.single.k->Wild('k', exclude=[f(x).diff(x)])
A:sympy.solvers.ode.single.(d, e, k)->self.wilds_match()
A:sympy.solvers.ode.single.self.y->Dummy('y')
A:sympy.solvers.ode.single.self.g->simplify(e / d).subs(fx, self.y)
A:sympy.solvers.ode.single.self.h->simplify(k / d).subs(fx, self.y)
A:sympy.solvers.ode.single.int->Integral(simplify((-d / (e + u1 * d)).subs({x: u1, y: 1})), (u1, None, x / fx))
A:sympy.solvers.ode.single.(d, e)->self.wilds()
A:sympy.solvers.ode.single.self.m1->separatevars(d, dict=True, symbols=(x, self.y))
A:sympy.solvers.ode.single.self.m2->separatevars(e, dict=True, symbols=(x, self.y))
A:sympy.solvers.ode.single.(m1, m2, x, fx)->self._get_match_object()
A:sympy.solvers.ode.single.pows->list(pows)
A:sympy.solvers.ode.single.exprs->expr.atoms(Pow)
A:sympy.solvers.ode.single.(_, u)->arg.as_independent(x, fx)
A:sympy.solvers.ode.single.(num, den)->self.wilds_match()
A:sympy.solvers.ode.single.(num, dem)->simplify(x / fx * num / den).as_numer_denom()
A:sympy.solvers.ode.single.num->num.subs(x ** pows[0] * fx, self.t).subs(x ** pows[0] * fx, self.t)
A:sympy.solvers.ode.single.dem->dem.subs(x ** pows[0] * fx, self.t).subs(x ** pows[0] * fx, self.t)
A:sympy.solvers.ode.single.self.t->Dummy('t')
A:sympy.solvers.ode.single.(self.d, self.e)->self.wilds_match()
A:sympy.solvers.ode.single.self.d->self.d.subs(fx, self.y)
A:sympy.solvers.ode.single.self.e->self.e.subs(fx, self.y)
A:sympy.solvers.ode.single.ordera->homogeneous_order(self.d, x, self.y)
A:sympy.solvers.ode.single.orderb->homogeneous_order(self.e, x, self.y)
A:sympy.solvers.ode.single.self.u->Dummy('u')
A:sympy.solvers.ode.single.self.u1->Dummy('u1')
A:sympy.solvers.ode.single.(d, e, fx, x, u, u1, y, xarg, yarg)->self._get_match_object()
A:sympy.solvers.ode.single.sol1->odesimp(self.ode_problem.eq, *sol1, fx, '1st_homogeneous_coeff_subs_indep_div_dep')
A:sympy.solvers.ode.single.sol2->odesimp(self.ode_problem.eq, *sol2, fx, '1st_homogeneous_coeff_subs_dep_div_indep')
A:sympy.solvers.ode.single.params->self._linear_coeff_match(F, fx)
A:sympy.solvers.ode.single.t->Dummy('t')
A:sympy.solvers.ode.single.dummy_eq->simplify(dummy_eq.subs(reps))
A:sympy.solvers.ode.single.r2->collect(expand(dummy_eq), [fx.diff(x), fx]).match(a * fx.diff(x) + b)
A:sympy.solvers.ode.single.orderd->homogeneous_order(self.d, x, fx)
A:sympy.solvers.ode.single.ordere->homogeneous_order(self.e, x, fx)
A:sympy.solvers.ode.single.(n, d)->expand(n).as_numer_denom()
A:sympy.solvers.ode.single.m1->match(m.pop())
A:sympy.solvers.ode.single.self.smallest->min(ords)
A:sympy.solvers.ode.single.D->Dummy()
A:sympy.solvers.ode.single.w->f(x).diff(x, n)
A:sympy.solvers.ode.single.geq->expand(n).subs(w, g(x))
A:sympy.solvers.ode.single.gsol->_get_simplified_sol([gsol], f(x), collectterms)
A:sympy.solvers.ode.single.fsoli->dsolve(gsoli.subs(g(x), w), f(x))
A:sympy.solvers.ode.single.self.match_object->match_2nd_2F1_hypergeometric(d['I0'], d['k'], d['sing_point'], func)
A:sympy.solvers.ode.single.self.r->self.ode_problem.get_linear_coefficients(eq, func, order)
A:sympy.solvers.ode.single.(roots, collectterms)->_get_const_characteristic_eq_sols(self.r, f(x), order)
A:sympy.solvers.ode.single.constants->self.ode_problem.get_numbered_constants(num=len(roots))
A:sympy.solvers.ode.single.homogen_sol->Eq(f(x), homogen_sol)
A:sympy.solvers.ode.single.eq_homogeneous->Add(eq, -self.r[-1])
A:sympy.solvers.ode.single.undetcoeff->_undetermined_coefficients_match(e.subs(re), x)
A:sympy.solvers.ode.single.match->self.ode_problem.get_linear_coefficients(eq, f, order)
A:sympy.solvers.ode.single.(homogen_sol, roots)->_get_euler_characteristic_eq_sols(eq, f(x), self.r)
A:sympy.solvers.ode.single.(e, re)->posify(self.r[-1].subs(x, exp(x)))
A:sympy.solvers.ode.single.self.const_undet_instance->NthLinearConstantCoeffUndeterminedCoefficients(SingleODEProblem(eq, f(x), x))
A:sympy.solvers.ode.single.a4->Wild('a4', exclude=[x, f, df])
A:sympy.solvers.ode.single.b4->Wild('b4', exclude=[x, f, df])
A:sympy.solvers.ode.single.c4->Wild('c4', exclude=[x, f, df])
A:sympy.solvers.ode.single.d4->Wild('d4', exclude=[x, f, df])
A:sympy.solvers.ode.single.a3->Wild('a3', exclude=[f, df, f.diff(x, 2)])
A:sympy.solvers.ode.single.b3->Wild('b3', exclude=[f, df, f.diff(x, 2)])
A:sympy.solvers.ode.single.c3->Wild('c3', exclude=[f, df, f.diff(x, 2)])
A:sympy.solvers.ode.single.coeff->factor(r[a3]).match(a4 * (x - b) ** b4)
A:sympy.solvers.ode.single.r[a3]->cancel(r[a3] / (coeff[a4] * x ** (-2 + coeff[b4])))
A:sympy.solvers.ode.single.r[b3]->cancel(r[b3] / (coeff[a4] * x ** (-2 + coeff[b4])))
A:sympy.solvers.ode.single.r[c3]->cancel(r[c3] / (coeff[a4] * x ** (-2 + coeff[b4])))
A:sympy.solvers.ode.single.coeff1->factor(r[b3]).match(a4 * x)
A:sympy.solvers.ode.single._coeff2->cancel(r[c3] / (coeff[a4] * x ** (-2 + coeff[b4]))).match(a - b)
A:sympy.solvers.ode.single.coeff2->factor(_coeff2[a]).match(c4 ** 2 * x ** (2 * a4))
A:sympy.solvers.ode.single.self.rn->cancel(match[0] / match[2]).match(a4 + b4 * x)
A:sympy.solvers.ode.single.r[d]->r[d].subs(f(x), y).subs(f(x), y)
A:sympy.solvers.ode.single.r[e]->r[e].subs(f(x), y).subs(f(x), y)
A:sympy.solvers.ode.single.eqsol->solve(eq, df)
sympy.solvers.ode.single.AlmostLinear(SinglePatternODESolver)
sympy.solvers.ode.single.AlmostLinear._equation(self,fx,x,order)
sympy.solvers.ode.single.AlmostLinear._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.AlmostLinear._verify(self,fx)
sympy.solvers.ode.single.AlmostLinear._wilds(self,f,x,order)
sympy.solvers.ode.single.Bernoulli(SinglePatternODESolver)
sympy.solvers.ode.single.Bernoulli._equation(self,fx,x,order)
sympy.solvers.ode.single.Bernoulli._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.Bernoulli._wilds(self,f,x,order)
sympy.solvers.ode.single.Factorable(SingleODESolver)
sympy.solvers.ode.single.Factorable._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.Factorable._matches(self)
sympy.solvers.ode.single.FirstExact(SinglePatternODESolver)
sympy.solvers.ode.single.FirstExact._equation(self,fx,x,order)
sympy.solvers.ode.single.FirstExact._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.FirstExact._verify(self,fx)->bool
sympy.solvers.ode.single.FirstExact._wilds(self,f,x,order)
sympy.solvers.ode.single.FirstLinear(SinglePatternODESolver)
sympy.solvers.ode.single.FirstLinear._equation(self,fx,x,order)
sympy.solvers.ode.single.FirstLinear._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.FirstLinear._wilds(self,f,x,order)
sympy.solvers.ode.single.HomogeneousCoeffBest(HomogeneousCoeffSubsIndepDivDep,HomogeneousCoeffSubsDepDivIndep)
sympy.solvers.ode.single.HomogeneousCoeffBest._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.HomogeneousCoeffBest._verify(self,fx)
sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep(SinglePatternODESolver)
sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep._equation(self,fx,x,order)
sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep._get_match_object(self)
sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep._verify(self,fx)
sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep._wilds(self,f,x,order)
sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep(SinglePatternODESolver)
sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep._equation(self,fx,x,order)
sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep._get_match_object(self)
sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep._verify(self,fx)
sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep._wilds(self,f,x,order)
sympy.solvers.ode.single.LieGroup(SingleODESolver)
sympy.solvers.ode.single.LieGroup._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.LieGroup._has_additional_params(self)
sympy.solvers.ode.single.LieGroup._matches(self)
sympy.solvers.ode.single.LinearCoefficients(HomogeneousCoeffBest)
sympy.solvers.ode.single.LinearCoefficients._equation(self,fx,x,order)
sympy.solvers.ode.single.LinearCoefficients._get_match_object(self)
sympy.solvers.ode.single.LinearCoefficients._linear_coeff_match(self,expr,func)
sympy.solvers.ode.single.LinearCoefficients._verify(self,fx)
sympy.solvers.ode.single.LinearCoefficients._wilds(self,f,x,order)
sympy.solvers.ode.single.Liouville(SinglePatternODESolver)
sympy.solvers.ode.single.Liouville._equation(self,fx,x,order)
sympy.solvers.ode.single.Liouville._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.Liouville._verify(self,fx)
sympy.solvers.ode.single.Liouville._wilds(self,f,x,order)
sympy.solvers.ode.single.NthAlgebraic(SingleODESolver)
sympy.solvers.ode.single.NthAlgebraic._get_diffx(var)
sympy.solvers.ode.single.NthAlgebraic._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.NthAlgebraic._matches(self)
sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous(SingleODESolver)
sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous._matches(self)
sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients(SingleODESolver)
sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients._matches(self)
sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters(SingleODESolver)
sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters._matches(self)
sympy.solvers.ode.single.NthLinearEulerEqHomogeneous(SingleODESolver)
sympy.solvers.ode.single.NthLinearEulerEqHomogeneous._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.NthLinearEulerEqHomogeneous._matches(self)
sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients(SingleODESolver)
sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients._matches(self)
sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters(SingleODESolver)
sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters._matches(self)
sympy.solvers.ode.single.NthOrderReducible(SingleODESolver)
sympy.solvers.ode.single.NthOrderReducible._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.NthOrderReducible._matches(self)
sympy.solvers.ode.single.ODEMatchError(NotImplementedError)
sympy.solvers.ode.single.RationalRiccati(SinglePatternODESolver)
sympy.solvers.ode.single.RationalRiccati._equation(self,fx,x,order)
sympy.solvers.ode.single.RationalRiccati._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.RationalRiccati._matches(self)
sympy.solvers.ode.single.RationalRiccati._wilds(self,f,x,order)
sympy.solvers.ode.single.RiccatiSpecial(SinglePatternODESolver)
sympy.solvers.ode.single.RiccatiSpecial._equation(self,fx,x,order)
sympy.solvers.ode.single.RiccatiSpecial._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.RiccatiSpecial._wilds(self,f,x,order)
sympy.solvers.ode.single.SecondHypergeometric(SingleODESolver)
sympy.solvers.ode.single.SecondHypergeometric._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.SecondHypergeometric._matches(self)
sympy.solvers.ode.single.SecondLinearAiry(SingleODESolver)
sympy.solvers.ode.single.SecondLinearAiry._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.SecondLinearAiry._matches(self)
sympy.solvers.ode.single.SecondLinearBessel(SingleODESolver)
sympy.solvers.ode.single.SecondLinearBessel._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.SecondLinearBessel._matches(self)
sympy.solvers.ode.single.SecondNonlinearAutonomousConserved(SinglePatternODESolver)
sympy.solvers.ode.single.SecondNonlinearAutonomousConserved._equation(self,fx,x,order)
sympy.solvers.ode.single.SecondNonlinearAutonomousConserved._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.SecondNonlinearAutonomousConserved._verify(self,fx)
sympy.solvers.ode.single.SecondNonlinearAutonomousConserved._wilds(self,f,x,order)
sympy.solvers.ode.single.Separable(SinglePatternODESolver)
sympy.solvers.ode.single.Separable._equation(self,fx,x,order)
sympy.solvers.ode.single.Separable._get_general_solution(self,*,simplify_flag:bool=True)
sympy.solvers.ode.single.Separable._get_match_object(self)
sympy.solvers.ode.single.Separable._verify(self,fx)
sympy.solvers.ode.single.Separable._wilds(self,f,x,order)
sympy.solvers.ode.single.SeparableReduced(Separable)
sympy.solvers.ode.single.SeparableReduced._degree(self,expr,x)
sympy.solvers.ode.single.SeparableReduced._get_match_object(self)
sympy.solvers.ode.single.SeparableReduced._powers(self,expr)
sympy.solvers.ode.single.SeparableReduced._verify(self,fx)
sympy.solvers.ode.single.SingleODEProblem(self,eq,func,sym,prep=True,**kwargs)
sympy.solvers.ode.single.SingleODEProblem._get_eq_preprocessed(self)->Expr
sympy.solvers.ode.single.SingleODEProblem.eq_expanded(self)->Expr
sympy.solvers.ode.single.SingleODEProblem.eq_high_order_free(self)->Expr
sympy.solvers.ode.single.SingleODEProblem.eq_preprocessed(self)->Expr
sympy.solvers.ode.single.SingleODEProblem.get_linear_coefficients(self,eq,func,order)
sympy.solvers.ode.single.SingleODEProblem.get_numbered_constants(self,num=1,start=1,prefix='C')->list[Symbol]
sympy.solvers.ode.single.SingleODEProblem.is_autonomous(self)
sympy.solvers.ode.single.SingleODEProblem.iter_numbered_constants(self,start=1,prefix='C')->Iterator[Symbol]
sympy.solvers.ode.single.SingleODEProblem.order(self)->int
sympy.solvers.ode.single.SingleODESolver(self,ode_problem)
sympy.solvers.ode.single.SingleODESolver._get_general_solution(self,*,simplify_flag:bool=True)->list[Equality]
sympy.solvers.ode.single.SingleODESolver._matches(self)->bool
sympy.solvers.ode.single.SingleODESolver.get_general_solution(self,*,simplify:bool=True)->list[Equality]
sympy.solvers.ode.single.SingleODESolver.matches(self)->bool
sympy.solvers.ode.single.SinglePatternODESolver(SingleODESolver)
sympy.solvers.ode.single.SinglePatternODESolver._equation(self,fx,x,order)
sympy.solvers.ode.single.SinglePatternODESolver._matches(self)
sympy.solvers.ode.single.SinglePatternODESolver._verify(self,fx)->bool
sympy.solvers.ode.single.SinglePatternODESolver._wilds(self,f,x,order)
sympy.solvers.ode.single.SinglePatternODESolver.wilds(self)
sympy.solvers.ode.single.SinglePatternODESolver.wilds_match(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/hypergeometric.py----------------------------------------
A:sympy.solvers.ode.hypergeometric.df->func.diff(x)
A:sympy.solvers.ode.hypergeometric.a3->Wild('a3', exclude=[func, func.diff(x), func.diff(x, 2)])
A:sympy.solvers.ode.hypergeometric.b3->Wild('b3', exclude=[func, func.diff(x), func.diff(x, 2)])
A:sympy.solvers.ode.hypergeometric.c3->Wild('c3', exclude=[func, func.diff(x), func.diff(x, 2)])
A:sympy.solvers.ode.hypergeometric.r->Wild('r')
A:sympy.solvers.ode.hypergeometric.(n, d)->expand(n).as_numer_denom()
A:sympy.solvers.ode.hypergeometric.eq->expand(n)
A:sympy.solvers.ode.hypergeometric.A->cancel(r[b3] / r[a3])
A:sympy.solvers.ode.hypergeometric.B->cancel(r[c3] / r[a3])
A:sympy.solvers.ode.hypergeometric.I1->factor(cancel(A.diff(x) / 2 + A ** 2 / 4 - B))
A:sympy.solvers.ode.hypergeometric.J1->factor(cancel(x ** 2 * I1 + S(1) / 4))
A:sympy.solvers.ode.hypergeometric.(num, dem)->factor(cancel(powdenest(I0.subs(x, x ** (S(1) / k)), force=True))).as_numer_denom()
A:sympy.solvers.ode.hypergeometric.num->powdenest(expand(num))
A:sympy.solvers.ode.hypergeometric.dem->powdenest(expand(dem))
A:sympy.solvers.ode.hypergeometric.pow_num->_power_counting((num,))
A:sympy.solvers.ode.hypergeometric.pow_dem->_power_counting((dem,))
A:sympy.solvers.ode.hypergeometric.k->gcd(_pow)
A:sympy.solvers.ode.hypergeometric.I0->factor(cancel(powdenest(I0.subs(x, x ** (S(1) / k)), force=True)))
A:sympy.solvers.ode.hypergeometric.max_num_pow->max(_power_counting((num,)))
A:sympy.solvers.ode.hypergeometric.a->Wild('a')
A:sympy.solvers.ode.hypergeometric.b->Wild('b')
A:sympy.solvers.ode.hypergeometric.c->Wild('c')
A:sympy.solvers.ode.hypergeometric.t->cancel(t.subs(beta, _beta).subs(delta, _delta).subs(gamma, _gamma))
A:sympy.solvers.ode.hypergeometric.s->Wild('s')
A:sympy.solvers.ode.hypergeometric.alpha->Wild('alpha')
A:sympy.solvers.ode.hypergeometric.beta->Wild('beta')
A:sympy.solvers.ode.hypergeometric.gamma->Wild('gamma')
A:sympy.solvers.ode.hypergeometric.delta->Wild('delta')
A:sympy.solvers.ode.hypergeometric.mob->cancel(mob)
A:sympy.solvers.ode.hypergeometric.I->factor(I)
A:sympy.solvers.ode.hypergeometric.(I0_num, I0_dem)->factor(cancel(powdenest(I0.subs(x, x ** (S(1) / k)), force=True))).as_numer_denom()
A:sympy.solvers.ode.hypergeometric._c->min(list(roots(eqs[2], c)))
A:sympy.solvers.ode.hypergeometric._s->factor(sqrt(eqs[0].lhs + 1))
A:sympy.solvers.ode.hypergeometric.(C0, C1)->get_numbered_constants(eq, num=2)
A:sympy.solvers.ode.hypergeometric.dtdx->simplify(1 / subs.diff(x))
A:sympy.solvers.ode.hypergeometric._B->factor(_B + (x ** 2 - x).subs(x, subs) * (dtdx.diff(x) * dtdx))
A:sympy.solvers.ode.hypergeometric._A->factor((x ** 2 - x).subs(x, subs) * dtdx ** 2)
A:sympy.solvers.ode.hypergeometric.e->e.subs(x, x ** match_object['k']).subs(x, x ** match_object['k'])
A:sympy.solvers.ode.hypergeometric.sol->Eq(func, sol)
A:sympy.solvers.ode.hypergeometric.e1->exp(logcombine(e1, force=True))
sympy.solvers.ode.hypergeometric.equivalence(max_num_pow,dem_pow)
sympy.solvers.ode.hypergeometric.equivalence_hypergeometric(A,B,func)
sympy.solvers.ode.hypergeometric.get_sol_2F1_hypergeometric(eq,func,match_object)
sympy.solvers.ode.hypergeometric.match_2nd_2F1_hypergeometric(I,k,sing_point,func)
sympy.solvers.ode.hypergeometric.match_2nd_hypergeometric(eq,func)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/nonhomogeneous.py----------------------------------------
A:sympy.solvers.ode.nonhomogeneous.chareq->Poly(chareq, symbol)
A:sympy.solvers.ode.nonhomogeneous.constants->list(get_numbered_constants(eq, num=chareq.degree() * 2))
A:sympy.solvers.ode.nonhomogeneous.charroots->defaultdict(int)
A:sympy.solvers.ode.nonhomogeneous.reroot->re(root)
A:sympy.solvers.ode.nonhomogeneous.imroot->im(root)
A:sympy.solvers.ode.nonhomogeneous.gsol->Eq(f(x), gsol)
A:sympy.solvers.ode.nonhomogeneous.wr->trigsimp(wr, deep=True, recursive=True)
A:sympy.solvers.ode.nonhomogeneous.psol->trialfunc.subs(coeffvals)
A:sympy.solvers.ode.nonhomogeneous.chareqroots->roots(chareq, multiple=True)
A:sympy.solvers.ode.nonhomogeneous.multiplicity->defaultdict(int).pop(root)
A:sympy.solvers.ode.nonhomogeneous.sol->powsimp(sol)
A:sympy.solvers.ode.nonhomogeneous.a->Wild('a', exclude=[x])
A:sympy.solvers.ode.nonhomogeneous.b->Wild('b', exclude=[x])
A:sympy.solvers.ode.nonhomogeneous.expr->expr.diff(x).diff(x)
A:sympy.solvers.ode.nonhomogeneous.exprs->exprs.union(_get_trial_set(term, x, exprs)).union(_get_trial_set(term, x, exprs))
A:sympy.solvers.ode.nonhomogeneous.term->_remove_coefficient(expr, x)
A:sympy.solvers.ode.nonhomogeneous.tmpset->tmpset.union(_get_trial_set(term, x, tmpset)).union(_get_trial_set(term, x, tmpset))
A:sympy.solvers.ode.nonhomogeneous.oldset->tmpset.union(_get_trial_set(term, x, tmpset)).union(_get_trial_set(term, x, tmpset)).copy()
A:sympy.solvers.ode.nonhomogeneous.retdict['test']->_test_term(expr, x)
A:sympy.solvers.ode.nonhomogeneous.temp_set->temp_set.union(act).union(act)
A:sympy.solvers.ode.nonhomogeneous.act->_get_trial_set(i, x)
A:sympy.solvers.ode.nonhomogeneous.coeffs->numbered_symbols('a', cls=Dummy)
A:sympy.solvers.ode.nonhomogeneous.c->next(coeffs)
A:sympy.solvers.ode.nonhomogeneous.eqs->_mexpand(eqs)
A:sympy.solvers.ode.nonhomogeneous.coeffsdict->dict(list(zip(trialset, [0] * (len(trialset) + 1))))
A:sympy.solvers.ode.nonhomogeneous.s->separatevars(i, dict=True, symbols=[x])
A:sympy.solvers.ode.nonhomogeneous.coeffvals->solve(list(coeffsdict.values()), coefflist)
sympy.solvers.ode.nonhomogeneous._get_const_characteristic_eq_sols(r,func,order)
sympy.solvers.ode.nonhomogeneous._get_euler_characteristic_eq_sols(eq,func,match_obj)
sympy.solvers.ode.nonhomogeneous._get_simplified_sol(sol,func,collectterms)
sympy.solvers.ode.nonhomogeneous._solve_undetermined_coefficients(eq,func,order,match,trialset)
sympy.solvers.ode.nonhomogeneous._solve_variation_of_parameters(eq,func,roots,homogen_sol,order,match_obj,simplify_flag=True)
sympy.solvers.ode.nonhomogeneous._test_term(coeff,func,order)
sympy.solvers.ode.nonhomogeneous._undetermined_coefficients_match(expr,x,func=None,eq_homogeneous=S.Zero)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/riccati.py----------------------------------------
A:sympy.solvers.ode.riccati.(match, funcs)->match_riccati(eq, f, x)
A:sympy.solvers.ode.riccati.sol->linsolve(eq, syms)
A:sympy.solvers.ode.riccati.eq->Add(*((x / cf).cancel() for x in eq.args)).collect(f(x))
A:sympy.solvers.ode.riccati.cf->Add(*((x / cf).cancel() for x in eq.args)).collect(f(x)).coeff(f(x).diff(x))
A:sympy.solvers.ode.riccati.b0->(f(x).diff(x) - b1 * f(x) - b2 * f(x) ** 2 - eq).expand()
A:sympy.solvers.ode.riccati.one->Poly(1, x, extension=True)
A:sympy.solvers.ode.riccati.xpoly->Poly(x, x)
A:sympy.solvers.ode.riccati.pwr->val_at_inf(num, den, x)
A:sympy.solvers.ode.riccati.den->den.transform(Poly(x + r, x, extension=True), one).transform(Poly(x + r, x, extension=True), one)
A:sympy.solvers.ode.riccati.num->num.transform(Poly(x + r, x, extension=True), one).transform(Poly(x + r, x, extension=True), one)
A:sympy.solvers.ode.riccati.(num1, den1)->(num * Poly((x - pole) ** 2, x, extension=True)).cancel(den, include=True)
A:sympy.solvers.ode.riccati.ser->rational_laurent_series(num, den, x, oo, mul, 1)
A:sympy.solvers.ode.riccati.cplus[ri - 1]->sqrt(ser[2 * ri])
A:sympy.solvers.ode.riccati.dplus[N]->sqrt(ser[2 * N])
A:sympy.solvers.ode.riccati.dplus[0]->sqrt(ser[0])
A:sympy.solvers.ode.riccati.s_inf->limit_at_inf(Poly(x ** 2, x) * num, den, x)
A:sympy.solvers.ode.riccati.d->construct_d(num, den, x, val_inf)
A:sympy.solvers.ode.riccati.(num, den)->num.transform(Poly(x + r, x, extension=True), one).transform(Poly(x + r, x, extension=True), one).cancel(den, include=True)
A:sympy.solvers.ode.riccati.r->S(0)
A:sympy.solvers.ode.riccati.syms->list(e.atoms(Symbol, Dummy))
A:sympy.solvers.ode.riccati.(coeffs,)->linsolve(coeff_diffs, syms)
A:sympy.solvers.ode.riccati.series->list(coeffs)
A:sympy.solvers.ode.riccati.m->Poly(choice[-1][-1], x, extension=True)
A:sympy.solvers.ode.riccati.psyms->symbols(f'C0:{m}', cls=Dummy)
A:sympy.solvers.ode.riccati.px->psol.xreplace(coeffs).diff(x)
A:sympy.solvers.ode.riccati.syms1->sol1.atoms(Symbol, Dummy)
A:sympy.solvers.ode.riccati.syms2->sol2.atoms(Symbol, Dummy)
A:sympy.solvers.ode.riccati.redn->linsolve(e.all_coeffs(), syms)
A:sympy.solvers.ode.riccati.i->exp(Integral(2 * y1, x))
A:sympy.solvers.ode.riccati.z->z.doit().doit()
A:sympy.solvers.ode.riccati.u->exp(Integral(y2 - y1, x)).doit()
A:sympy.solvers.ode.riccati.C1->Dummy('C1')
A:sympy.solvers.ode.riccati.a_t->a.together()
A:sympy.solvers.ode.riccati.poles->roots(den, x)
A:sympy.solvers.ode.riccati.val_inf->val_at_inf(num, den, x)
A:sympy.solvers.ode.riccati.c->construct_c(num, den, x, poles, muls)
A:sympy.solvers.ode.riccati.choices->product(*c)
A:sympy.solvers.ode.riccati.(m, ybar)->compute_m_ybar(x, poles, choice, -val_inf // 2)
A:sympy.solvers.ode.riccati.(psol, coeffs, exists)->solve_aux_eq(num, den, numy, deny, x, m)
A:sympy.solvers.ode.riccati.psol->psol.xreplace(coeffs).xreplace(coeffs)
A:sympy.solvers.ode.riccati.remove->set()
A:sympy.solvers.ode.riccati.rem->remove_redundant_sols(presol[i], presol[j], x)
sympy.solvers.ode.riccati.check_necessary_conds(val_inf,muls)
sympy.solvers.ode.riccati.compute_m_ybar(x,poles,choice,N)
sympy.solvers.ode.riccati.construct_c(num,den,x,poles,muls)
sympy.solvers.ode.riccati.construct_c_case_1(num,den,x,pole)
sympy.solvers.ode.riccati.construct_c_case_2(num,den,x,pole,mul)
sympy.solvers.ode.riccati.construct_c_case_3()
sympy.solvers.ode.riccati.construct_d(num,den,x,val_inf)
sympy.solvers.ode.riccati.construct_d_case_4(ser,N)
sympy.solvers.ode.riccati.construct_d_case_5(ser)
sympy.solvers.ode.riccati.construct_d_case_6(num,den,x)
sympy.solvers.ode.riccati.get_gen_sol_from_part_sol(part_sols,a,x)
sympy.solvers.ode.riccati.inverse_transform_poly(num,den,x)
sympy.solvers.ode.riccati.limit_at_inf(num,den,x)
sympy.solvers.ode.riccati.linsolve_dict(eq,syms)
sympy.solvers.ode.riccati.match_riccati(eq,f,x)
sympy.solvers.ode.riccati.rational_laurent_series(num,den,x,r,m,n)
sympy.solvers.ode.riccati.remove_redundant_sols(sol1,sol2,x)
sympy.solvers.ode.riccati.riccati_inverse_normal(y,x,b1,b2,bp=None)
sympy.solvers.ode.riccati.riccati_normal(w,x,b1,b2)
sympy.solvers.ode.riccati.riccati_reduced(eq,f,x)
sympy.solvers.ode.riccati.solve_aux_eq(numa,dena,numy,deny,x,m)
sympy.solvers.ode.riccati.solve_riccati(fx,x,b0,b1,b2,gensol=False)
sympy.solvers.ode.riccati.val_at_inf(num,den,x)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/tests/test_subscheck.py----------------------------------------
A:sympy.solvers.ode.tests.test_subscheck.(C0, C1, C2, C3, C4)->symbols('C0:5')
A:sympy.solvers.ode.tests.test_subscheck.(u, x, y, z)->symbols('u,x:z', real=True)
A:sympy.solvers.ode.tests.test_subscheck.f->Function('f')
A:sympy.solvers.ode.tests.test_subscheck.g->Function('g')
A:sympy.solvers.ode.tests.test_subscheck.h->Function('h')
A:sympy.solvers.ode.tests.test_subscheck.sol1->Eq(f(x) ** 5 + 11 * f(x) - 2 * f(x) + x, 0)
A:sympy.solvers.ode.tests.test_subscheck.sol3->Eq(f(x), log(log(C1 / x) ** (-x)))
A:sympy.solvers.ode.tests.test_subscheck.eqn->Eq(Derivative(x * Derivative(f(x), x), x) / x, exp(x))
A:sympy.solvers.ode.tests.test_subscheck.sol->Eq(f(x), C1 * besselj(5 * I, sqrt(2) * x) + C2 * bessely(5 * I, sqrt(2) * x))
A:sympy.solvers.ode.tests.test_subscheck.(x, y, z)->symbols('x, y, z', cls=Function)
A:sympy.solvers.ode.tests.test_subscheck.t->Symbol('t')
A:sympy.solvers.ode.tests.test_subscheck.root1->sqrt(-sqrt(109) / 2 + Rational(15, 2))
A:sympy.solvers.ode.tests.test_subscheck.root3->sqrt(sqrt(109) / 2 + Rational(15, 2))
sympy.solvers.ode.tests.test_subscheck.test_checkodesol()
sympy.solvers.ode.tests.test_subscheck.test_checksysodesol()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/tests/test_lie_group.py----------------------------------------
A:sympy.solvers.ode.tests.test_lie_group.C1->Symbol('C1')
A:sympy.solvers.ode.tests.test_lie_group.(x, y)->symbols('x y')
A:sympy.solvers.ode.tests.test_lie_group.f->Function('f')
A:sympy.solvers.ode.tests.test_lie_group.xi->Function('xi')
A:sympy.solvers.ode.tests.test_lie_group.eta->Function('eta')
A:sympy.solvers.ode.tests.test_lie_group.(a, b, c, a4, a3, a2, a1, a0)->symbols('a b c a4 a3 a2 a1 a0')
A:sympy.solvers.ode.tests.test_lie_group.df->f(x).diff(x)
A:sympy.solvers.ode.tests.test_lie_group.eq->Eq(df, x ** 2 * f(x))
A:sympy.solvers.ode.tests.test_lie_group.i->infinitesimals(eq, hint='sum_function')
A:sympy.solvers.ode.tests.test_lie_group.i1->infinitesimals(eq1, hint='abaco1_simple')
A:sympy.solvers.ode.tests.test_lie_group.i2->infinitesimals(eq2, hint='abaco1_simple')
A:sympy.solvers.ode.tests.test_lie_group.i3->infinitesimals(eq3, hint='abaco1_simple')
A:sympy.solvers.ode.tests.test_lie_group.i4->infinitesimals(eq4, hint='abaco1_simple')
A:sympy.solvers.ode.tests.test_lie_group.i5->infinitesimals(eq5, hint='abaco1_simple')
A:sympy.solvers.ode.tests.test_lie_group.check->checkinfsol(eq, i)
A:sympy.solvers.ode.tests.test_lie_group.(a, b)->symbols('a b')
A:sympy.solvers.ode.tests.test_lie_group.F->Function('F')
A:sympy.solvers.ode.tests.test_lie_group.(a, b, m, n)->symbols('a b m n')
A:sympy.solvers.ode.tests.test_lie_group.(a, b, alpha, c)->symbols('a b alpha c')
A:sympy.solvers.ode.tests.test_lie_group.x->Symbol('x')
A:sympy.solvers.ode.tests.test_lie_group.sol->Eq(f(x), (C1 + x ** 2) / (C1 - x ** 2))
A:sympy.solvers.ode.tests.test_lie_group.eqn->exp(f(x).diff(x) - f(x))
sympy.solvers.ode.tests.test_lie_group.test_heuristic1()
sympy.solvers.ode.tests.test_lie_group.test_heuristic3()
sympy.solvers.ode.tests.test_lie_group.test_heuristic_abaco2_similar()
sympy.solvers.ode.tests.test_lie_group.test_heuristic_abaco2_unique_unknown()
sympy.solvers.ode.tests.test_lie_group.test_heuristic_function_sum()
sympy.solvers.ode.tests.test_lie_group.test_heuristic_linear()
sympy.solvers.ode.tests.test_lie_group.test_kamke()
sympy.solvers.ode.tests.test_lie_group.test_lie_group_issue15219()
sympy.solvers.ode.tests.test_lie_group.test_user_infinitesimals()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/tests/test_riccati.py----------------------------------------
A:sympy.solvers.ode.tests.test_riccati.f->Function('f')
A:sympy.solvers.ode.tests.test_riccati.x->symbols('x')
A:sympy.solvers.ode.tests.test_riccati.degnum->randint(1, degree)
A:sympy.solvers.ode.tests.test_riccati.degden->randint(1, degree)
A:sympy.solvers.ode.tests.test_riccati.num->rand_poly(x, degnum, maxint)
A:sympy.solvers.ode.tests.test_riccati.den->rand_poly(x, degden, maxint)
A:sympy.solvers.ode.tests.test_riccati.yp->y.diff(x)
A:sympy.solvers.ode.tests.test_riccati.q1->rand_rational_function(x, 1, 3)
A:sympy.solvers.ode.tests.test_riccati.q2->rand_rational_function(x, 1, 3)
A:sympy.solvers.ode.tests.test_riccati.q0->ratsimp(yp - q1 * y - q2 * y ** 2)
A:sympy.solvers.ode.tests.test_riccati.eq->Eq(yf.diff(), q0 + q1 * yf + q2 * yf ** 2)
A:sympy.solvers.ode.tests.test_riccati.sol->Eq(yf, y)
A:sympy.solvers.ode.tests.test_riccati.(match, funcs)->match_riccati(eq, f, x)
A:sympy.solvers.ode.tests.test_riccati.(num, den)->inverse_transform_poly(num, den, x)
A:sympy.solvers.ode.tests.test_riccati.ser->rational_laurent_series(num, den, x, oo, 0, 1)
A:sympy.solvers.ode.tests.test_riccati.(_, funcs)->match_riccati(eq, f, x)
A:sympy.solvers.ode.tests.test_riccati.sols->solve_riccati(f(x), x, *funcs)
A:sympy.solvers.ode.tests.test_riccati.C1->Dummy('C1')
A:sympy.solvers.ode.tests.test_riccati.C0->Dummy('C0')
sympy.solvers.ode.tests.test_riccati.check_dummy_sol(eq,solse,dummy_sym)
sympy.solvers.ode.tests.test_riccati.find_riccati_ode(ratfunc,x,yf)
sympy.solvers.ode.tests.test_riccati.rand_poly(x,degree,maxint)
sympy.solvers.ode.tests.test_riccati.rand_rational(maxint)
sympy.solvers.ode.tests.test_riccati.rand_rational_function(x,degree,maxint)
sympy.solvers.ode.tests.test_riccati.test_construct_c_case_1()
sympy.solvers.ode.tests.test_riccati.test_construct_c_case_2()
sympy.solvers.ode.tests.test_riccati.test_construct_c_case_3()
sympy.solvers.ode.tests.test_riccati.test_construct_d_case_4()
sympy.solvers.ode.tests.test_riccati.test_construct_d_case_5()
sympy.solvers.ode.tests.test_riccati.test_construct_d_case_6()
sympy.solvers.ode.tests.test_riccati.test_inverse_transform_poly()
sympy.solvers.ode.tests.test_riccati.test_limit_at_inf()
sympy.solvers.ode.tests.test_riccati.test_match_riccati()
sympy.solvers.ode.tests.test_riccati.test_necessary_conds()
sympy.solvers.ode.tests.test_riccati.test_rational_laurent_series()
sympy.solvers.ode.tests.test_riccati.test_riccati_reduced()
sympy.solvers.ode.tests.test_riccati.test_riccati_transformation()
sympy.solvers.ode.tests.test_riccati.test_solve_riccati()
sympy.solvers.ode.tests.test_riccati.test_solve_riccati_slow()
sympy.solvers.ode.tests.test_riccati.test_val_at_inf()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/tests/test_systems.py----------------------------------------
A:sympy.solvers.ode.tests.test_systems.(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)->symbols('C0:11')
A:sympy.solvers.ode.tests.test_systems.x->symbols('x')
A:sympy.solvers.ode.tests.test_systems.f->Function('f')
A:sympy.solvers.ode.tests.test_systems.g->Function('g')
A:sympy.solvers.ode.tests.test_systems.h->Function('h')
A:sympy.solvers.ode.tests.test_systems.(f, g, h)->symbols('f, g, h', cls=Function)
A:sympy.solvers.ode.tests.test_systems.t->Symbol('t')
A:sympy.solvers.ode.tests.test_systems.f1->f(t).diff(t)
A:sympy.solvers.ode.tests.test_systems.g1->g(t).diff(t)
A:sympy.solvers.ode.tests.test_systems.h1->h(t).diff(t)
A:sympy.solvers.ode.tests.test_systems.f2->f(t).diff(t, 2)
A:sympy.solvers.ode.tests.test_systems.g2->g(t).diff(t, 2)
A:sympy.solvers.ode.tests.test_systems.h2->h(t).diff(t, 2)
A:sympy.solvers.ode.tests.test_systems.(x, y, z, w)->symbols('x, y, z, w', cls=Function)
A:sympy.solvers.ode.tests.test_systems.(t, k, l)->symbols('t k l')
A:sympy.solvers.ode.tests.test_systems.x1->Function('x1')
A:sympy.solvers.ode.tests.test_systems.y1->diff(y(t), t)
A:sympy.solvers.ode.tests.test_systems.z1->diff(z(t), t)
A:sympy.solvers.ode.tests.test_systems.w1->diff(w(t), t)
A:sympy.solvers.ode.tests.test_systems.x2->Function('x2')
A:sympy.solvers.ode.tests.test_systems.y2->diff(y(t), t, t)
A:sympy.solvers.ode.tests.test_systems.t_->symbols('t_')
A:sympy.solvers.ode.tests.test_systems.(f, g)->symbols('f g', cls=Function)
A:sympy.solvers.ode.tests.test_systems.(y, t_)->symbols('y t_')
A:sympy.solvers.ode.tests.test_systems.A->Matrix([[0, I], [I, 0]])
A:sympy.solvers.ode.tests.test_systems.expAt->Matrix([[exp(I * t) / 2 + exp(-I * t) / 2, exp(I * t) / 2 - exp(-I * t) / 2], [exp(I * t) / 2 - exp(-I * t) / 2, exp(I * t) / 2 + exp(-I * t) / 2]])
A:sympy.solvers.ode.tests.test_systems.M->Matrix([[1, 2, 3], [4, 5, 6], [7, 7, 7]])
A:sympy.solvers.ode.tests.test_systems.M1->Matrix([[t, 1], [1, 1]])
A:sympy.solvers.ode.tests.test_systems.(f, g, x, y, h)->symbols('f g x y h', cls=Function)
A:sympy.solvers.ode.tests.test_systems.(a, b, c, t)->symbols('a b c t')
A:sympy.solvers.ode.tests.test_systems.Z0->Function('Z0')
A:sympy.solvers.ode.tests.test_systems.Z1->Function('Z1')
A:sympy.solvers.ode.tests.test_systems.Z2->Function('Z2')
A:sympy.solvers.ode.tests.test_systems.Z3->Function('Z3')
A:sympy.solvers.ode.tests.test_systems.(k01, k10, k20, k21, k23, k30)->symbols('k01 k10 k20 k21 k23 k30')
A:sympy.solvers.ode.tests.test_systems.(x, y, z, u, v, w)->symbols('x y z u v w', cls=Function)
A:sympy.solvers.ode.tests.test_systems.(k2, k3)->symbols('k2 k3')
A:sympy.solvers.ode.tests.test_systems.(a_b, a_c)->symbols('a_b a_c', real=True)
A:sympy.solvers.ode.tests.test_systems.(a, b, c)->symbols('a b c')
A:sympy.solvers.ode.tests.test_systems.a->Symbol('a', real=True)
A:sympy.solvers.ode.tests.test_systems.(f, g, h, k)->symbols('f g h k', cls=Function)
A:sympy.solvers.ode.tests.test_systems.(x, t, a, b, c, d, y)->symbols('x t a b c d y')
A:sympy.solvers.ode.tests.test_systems.(k1, k2)->symbols('k1 k2')
A:sympy.solvers.ode.tests.test_systems.n->symbols('n', positive=True)
A:sympy.solvers.ode.tests.test_systems.x0->symbols('x_0')
A:sympy.solvers.ode.tests.test_systems.t0->symbols('t_0')
A:sympy.solvers.ode.tests.test_systems.x_0->symbols('x_0')
A:sympy.solvers.ode.tests.test_systems.t_0->symbols('t_0')
A:sympy.solvers.ode.tests.test_systems.y->symbols('y', real=True)
A:sympy.solvers.ode.tests.test_systems.T->symbols('T')
A:sympy.solvers.ode.tests.test_systems.(f, g, h, k, x0, y0)->symbols('f g h k x0 y0', cls=Function)
A:sympy.solvers.ode.tests.test_systems.(x, t, a)->symbols('x t a')
A:sympy.solvers.ode.tests.test_systems.r->symbols('r', real=True)
A:sympy.solvers.ode.tests.test_systems.(x, x_)->symbols('x x_')
A:sympy.solvers.ode.tests.test_systems.(x, y)->symbols('x y', cls=Function)
A:sympy.solvers.ode.tests.test_systems.(t, l)->symbols('t, l')
A:sympy.solvers.ode.tests.test_systems.(x, t, x_, t_, d, a, m)->symbols('x t x_ t_ d a m')
A:sympy.solvers.ode.tests.test_systems.(t, x, a)->symbols('t x a')
A:sympy.solvers.ode.tests.test_systems.A1->Matrix([[t, 1], [t, -1]])
A:sympy.solvers.ode.tests.test_systems.A2->Matrix([[t, t, t], [t, t, t], [t, t, t]])
A:sympy.solvers.ode.tests.test_systems.ceq->canonical_odes(eq, func, x)
A:sympy.solvers.ode.tests.test_systems.((A1, A0), b)->linear_ode_to_matrix(ceq[0], func, x, 1)
A:sympy.solvers.ode.tests.test_systems.b1->Matrix([t, t ** 2])
A:sympy.solvers.ode.tests.test_systems.b2->Matrix([t, 1, t ** 2])
A:sympy.solvers.ode.tests.test_systems.(B1, _)->_is_commutative_anti_derivative(A1, t)
A:sympy.solvers.ode.tests.test_systems.(B2, _)->_is_commutative_anti_derivative(A2, t)
A:sympy.solvers.ode.tests.test_systems._x1->exp(-3 * x ** 2 / 2)
A:sympy.solvers.ode.tests.test_systems._x2->exp(3 * x ** 2 / 2)
A:sympy.solvers.ode.tests.test_systems._x3->Integral(2 * _x1 * x / 3 + _x1 / 3 + x / 3 - Rational(1, 3), x)
A:sympy.solvers.ode.tests.test_systems._x5->Integral(2 * _x1 * x / 3 + _x1 / 3 - 2 * x / 3 + Rational(2, 3), x)
A:sympy.solvers.ode.tests.test_systems.(x, y, z)->symbols('x, y, z', cls=Function)
A:sympy.solvers.ode.tests.test_systems.(i, r1, c1, r2, c2, t)->symbols('i, r1, c1, r2, c2, t')
A:sympy.solvers.ode.tests.test_systems.[sol]->dsolve_system(system, simplify=False, doit=False)
A:sympy.solvers.ode.tests.test_systems.m->Symbol('m', real=True)
A:sympy.solvers.ode.tests.test_systems.q->Symbol('q', real=True)
A:sympy.solvers.ode.tests.test_systems.(e1, e2, e3)->symbols('e1:4', real=True)
A:sympy.solvers.ode.tests.test_systems.(b1, b2, b3)->symbols('b1:4', real=True)
A:sympy.solvers.ode.tests.test_systems.(v1, v2, v3)->symbols('v1:4', cls=Function, real=True)
A:sympy.solvers.ode.tests.test_systems.sol->dsolve(eqs)
A:sympy.solvers.ode.tests.test_systems.(RC, t, C, Vs, L, R1, V0, I0)->symbols('RC t C Vs L R1 V0 I0')
A:sympy.solvers.ode.tests.test_systems.V->Function('V')
A:sympy.solvers.ode.tests.test_systems.I->Function('I')
A:sympy.solvers.ode.tests.test_systems.dsolve_sol->dsolve(eq)
A:sympy.solvers.ode.tests.test_systems.x_1->sqrt(-t ** 6 - 8 * t ** 3 * log(t) + 8 * t ** 3 - 16 * log(t) ** 2 + 32 * log(t) - 16)
A:sympy.solvers.ode.tests.test_systems.x_2->sqrt(3)
A:sympy.solvers.ode.tests.test_systems.x_5->exp(t ** 3 / 3 + t * x_1 * x_2 / 4 - cos(t))
A:sympy.solvers.ode.tests.test_systems.x_6->exp(t ** 3 / 3 - t * x_1 * x_2 / 4 - cos(t))
A:sympy.solvers.ode.tests.test_systems.x_7->exp(t ** 4 / 2 + t ** 3 / 3 + 2 * t * log(t) - 2 * t - cos(t))
A:sympy.solvers.ode.tests.test_systems.(eqs, sol)->_neq_order1_type4_slow3()
A:sympy.solvers.ode.tests.test_systems.(eq, sol)->_linear_3eq_order1_type4_long()
A:sympy.solvers.ode.tests.test_systems.(sol,)->dsolve_system(eq, simplify=False, doit=False)
A:sympy.solvers.ode.tests.test_systems.res->res.subs({d: d.doit(deep=False) for d in res.atoms(Derivative)}).subs({d: d.doit(deep=False) for d in res.atoms(Derivative)})
A:sympy.solvers.ode.tests.test_systems.(k, l, m, n)->symbols('k, l, m, n', Integer=True)
A:sympy.solvers.ode.tests.test_systems.(x0, y0)->symbols('x0, y0', cls=Function)
A:sympy.solvers.ode.tests.test_systems.s->dsolve(eq6)
A:sympy.solvers.ode.tests.test_systems.tt->Rational(2, 3)
A:sympy.solvers.ode.tests.test_systems.(t, u)->symbols('t u')
A:sympy.solvers.ode.tests.test_systems.C1->Function('C1')
A:sympy.solvers.ode.tests.test_systems.C2->Function('C2')
A:sympy.solvers.ode.tests.test_systems.C3->Symbol('C3')
A:sympy.solvers.ode.tests.test_systems.C4->Symbol('C4')
A:sympy.solvers.ode.tests.test_systems.eps->Symbol('epsilon', positive=True)
sympy.solvers.ode.tests.test_systems._linear_3eq_order1_type4_long()
sympy.solvers.ode.tests.test_systems._neq_order1_type4_slow3()
sympy.solvers.ode.tests.test_systems.test_C1_function_9239()
sympy.solvers.ode.tests.test_systems.test__classify_linear_system()
sympy.solvers.ode.tests.test_systems.test_canonical_odes()
sympy.solvers.ode.tests.test_systems.test_component_division()
sympy.solvers.ode.tests.test_systems.test_dsolve()
sympy.solvers.ode.tests.test_systems.test_dsolve_linsystem_symbol()
sympy.solvers.ode.tests.test_systems.test_dsolve_system()
sympy.solvers.ode.tests.test_systems.test_higher_order1_slow1()
sympy.solvers.ode.tests.test_systems.test_higher_order_to_first_order()
sympy.solvers.ode.tests.test_systems.test_higher_order_to_first_order_12()
sympy.solvers.ode.tests.test_systems.test_higher_order_to_first_order_9()
sympy.solvers.ode.tests.test_systems.test_linear_2eq_order1()
sympy.solvers.ode.tests.test_systems.test_linear_3eq_order1_type4_long_check()
sympy.solvers.ode.tests.test_systems.test_linear_3eq_order1_type4_long_dsolve_dotprodsimp()
sympy.solvers.ode.tests.test_systems.test_linear_3eq_order1_type4_long_dsolve_slow_xfail()
sympy.solvers.ode.tests.test_systems.test_linear_3eq_order1_type4_slow()
sympy.solvers.ode.tests.test_systems.test_linear_neq_order1_type2_slow1()
sympy.solvers.ode.tests.test_systems.test_linear_neq_order1_type2_slow_check()
sympy.solvers.ode.tests.test_systems.test_linear_new_order1_type2_de_lorentz_slow_check()
sympy.solvers.ode.tests.test_systems.test_linear_ode_to_matrix()
sympy.solvers.ode.tests.test_systems.test_linodesolve()
sympy.solvers.ode.tests.test_systems.test_matrix_exp()
sympy.solvers.ode.tests.test_systems.test_neq_order1_type4_slow3()
sympy.solvers.ode.tests.test_systems.test_neq_order1_type4_slow_check1()
sympy.solvers.ode.tests.test_systems.test_neq_order1_type4_slow_check2()
sympy.solvers.ode.tests.test_systems.test_neq_order1_type4_slow_check3()
sympy.solvers.ode.tests.test_systems.test_nonlinear_2eq_order1()
sympy.solvers.ode.tests.test_systems.test_nonlinear_3eq_order1()
sympy.solvers.ode.tests.test_systems.test_nonlinear_3eq_order1_type1()
sympy.solvers.ode.tests.test_systems.test_nonlinear_3eq_order1_type3()
sympy.solvers.ode.tests.test_systems.test_nonlinear_3eq_order1_type4()
sympy.solvers.ode.tests.test_systems.test_nonlinear_3eq_order1_type5()
sympy.solvers.ode.tests.test_systems.test_second_order_to_first_order_2()
sympy.solvers.ode.tests.test_systems.test_second_order_to_first_order_slow1()
sympy.solvers.ode.tests.test_systems.test_second_order_to_first_order_slow4()
sympy.solvers.ode.tests.test_systems.test_second_order_type2_slow1()
sympy.solvers.ode.tests.test_systems.test_sysode_linear_neq_order1_type1()
sympy.solvers.ode.tests.test_systems.test_sysode_linear_neq_order1_type1_slow()
sympy.solvers.ode.tests.test_systems.test_sysode_linear_neq_order1_type2()
sympy.solvers.ode.tests.test_systems.test_sysode_linear_neq_order1_type3()
sympy.solvers.ode.tests.test_systems.test_sysode_linear_neq_order1_type4()
sympy.solvers.ode.tests.test_systems.test_sysode_linear_neq_order1_type5_type6()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/tests/test_single.py----------------------------------------
A:sympy.solvers.ode.tests.test_single.x->Symbol('x')
A:sympy.solvers.ode.tests.test_single.u->symbols('u', cls=Function)
A:sympy.solvers.ode.tests.test_single._u->Dummy('u')
A:sympy.solvers.ode.tests.test_single.y->Dummy('y')
A:sympy.solvers.ode.tests.test_single.f->Function('f')
A:sympy.solvers.ode.tests.test_single.g->exp(-x)
A:sympy.solvers.ode.tests.test_single.(C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)->symbols('C1:11')
A:sympy.solvers.ode.tests.test_single.solver->FirstLinear(problem)
A:sympy.solvers.ode.tests.test_single.result->_test_particular_example(our_hint, ode_example)
A:sympy.solvers.ode.tests.test_single.all_examples->_get_all_examples()
A:sympy.solvers.ode.tests.test_single.message->checkodesol_msg.format(example=example, eq=eq)
A:sympy.solvers.ode.tests.test_single.dsolve_sol->dsolve(eq, func, simplify=simplify_flag, hint=our_hint)
A:sympy.solvers.ode.tests.test_single.result['msg']->exception_msg.format(e=str(e), hint=our_hint, example=example, eq=eq)
A:sympy.solvers.ode.tests.test_single.match_count->len(match_list)
A:sympy.solvers.ode.tests.test_single.msg->check_hint_msg.format(hint=our_hint, matched=match_count, solve=solved, unsolve=unsolve_list, exceptions=exception_list)
A:sympy.solvers.ode.tests.test_single.problem->SingleODEProblem(f(x).diff(x, 3) + x * f(x).diff(x, 2) - f(x) ** 2, f(x), x)
A:sympy.solvers.ode.tests.test_single.c1->classify_ode(eq1, f(x))
A:sympy.solvers.ode.tests.test_single.c2->classify_ode(eq2, f(x))
A:sympy.solvers.ode.tests.test_single.df->f(x).diff(x)
A:sympy.solvers.ode.tests.test_single.sol->Eq(f(x), (C1 + C2 * Integral(exp(Integral((1 - x / 2) / (x * (x - 1)), x)) / (1 - x / 2) ** 2, x)) * exp(Integral(1 / (x - 1), x) / 4) * exp(-Integral(7 / (x - 1), x) / 4) * hyper((S(1) / 2, -1), (1,), x))
A:sympy.solvers.ode.tests.test_single.solved->dsolve(eq, hint='2nd_nonlinear_autonomous_conserved_Integral', simplify=False)
A:sympy.solvers.ode.tests.test_single.solns_final->_remove_redundant_solutions(eqn, solns, 2, x)
A:sympy.solvers.ode.tests.test_single.sol_simp->dsolve(eq, f(x), hint=our_hint, simplify=True)
A:sympy.solvers.ode.tests.test_single.sol_nsimp->dsolve(eq, f(x), hint=our_hint, simplify=False)
A:sympy.solvers.ode.tests.test_single.sol_1->dsolve(eq, f(x), simplify=False, hint='1st_exact_Integral')
A:sympy.solvers.ode.tests.test_single.eq->Eq(a * x ** 3 * diff(f(x), x, 3) + b * x ** 2 * diff(f(x), x, 2) + c * x * diff(f(x), x) + d * f(x), x * log(x))
A:sympy.solvers.ode.tests.test_single.not_Liouville1->classify_ode(diff(f(x), x) / x + f(x) * diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, f(x))
A:sympy.solvers.ode.tests.test_single.not_Liouville2->classify_ode(diff(f(x), x) / x + diff(f(x), x, x) / 2 - x * diff(f(x), x) ** 2 / 2, f(x))
A:sympy.solvers.ode.tests.test_single.(x, t, a, b, c)->symbols('x t a b c')
A:sympy.solvers.ode.tests.test_single.(x, t)->symbols('x, t')
A:sympy.solvers.ode.tests.test_single.(a, b, c, d)->symbols('a, b, c, d', integer=True)
A:sympy.solvers.ode.tests.test_single.(a0, a1, a2, a3, a4)->symbols('a0, a1, a2, a3, a4')
A:sympy.solvers.ode.tests.test_single.A->Symbol('A', positive=True)
A:sympy.solvers.ode.tests.test_single.d->f(x).diff(x)
A:sympy.solvers.ode.tests.test_single.n->Symbol('n')
A:sympy.solvers.ode.tests.test_single._y->Dummy('y')
A:sympy.solvers.ode.tests.test_single.(M, m, r, t)->symbols('M m r t')
A:sympy.solvers.ode.tests.test_single.phi->Function('phi')
A:sympy.solvers.ode.tests.test_single.k->Symbol('k', real=True)
A:sympy.solvers.ode.tests.test_single.f2->f(x).diff(x, 2)
A:sympy.solvers.ode.tests.test_single.t->symbols('t')
A:sympy.solvers.ode.tests.test_single.(R, L, C, E_0, alpha)->symbols('R L C E_0 alpha', positive=True)
A:sympy.solvers.ode.tests.test_single.omega->Symbol('omega')
A:sympy.solvers.ode.tests.test_single.(t, a)->symbols('a,t')
A:sympy.solvers.ode.tests.test_single.v->Function('v')
A:sympy.solvers.ode.tests.test_single.(a, b, c)->symbols('a b c')
A:sympy.solvers.ode.tests.test_single.a->Symbol('a', positive=True)
A:sympy.solvers.ode.tests.test_single.E->exp(1)
sympy.solvers.ode.tests.test_single._add_example_keys(func)
sympy.solvers.ode.tests.test_single._get_all_examples()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_1st_exact()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_1st_homogeneous_coeff_best()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_1st_linear()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_1st_rational_riccati()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_2nd_2F1_hypergeometric()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_2nd_linear_airy()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_2nd_linear_bessel()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_2nd_nonlinear_autonomous_conserved()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_almost_linear()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_bernoulli()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_euler_homogeneous()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_euler_undetermined_coeff()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_euler_var_para()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_factorable()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_lie_group()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_linear_coefficients()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_liouville()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_nth_algebraic()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_nth_linear_constant_coeff_homogeneous()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_nth_linear_undetermined_coefficients()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_nth_linear_var_of_parameters()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_nth_order_reducible()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_riccati()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_separable()
sympy.solvers.ode.tests.test_single._get_examples_ode_sol_separable_reduced()
sympy.solvers.ode.tests.test_single._ode_solver_test(ode_examples,run_slow_test=False)
sympy.solvers.ode.tests.test_single._test_all_examples_for_one_hint(our_hint,all_examples=[],runxfail=None)
sympy.solvers.ode.tests.test_single._test_all_hints(runxfail=False)
sympy.solvers.ode.tests.test_single._test_an_example(our_hint,example_name)
sympy.solvers.ode.tests.test_single._test_dummy_sol(expected_sol,dsolve_sol)
sympy.solvers.ode.tests.test_single._test_particular_example(our_hint,ode_example,solver_flag=False)
sympy.solvers.ode.tests.test_single.test_1st_exact()
sympy.solvers.ode.tests.test_single.test_1st_exact_integral()
sympy.solvers.ode.tests.test_single.test_1st_homogeneous_coeff_ode()
sympy.solvers.ode.tests.test_single.test_1st_linear()
sympy.solvers.ode.tests.test_single.test_1st_rational_riccati()
sympy.solvers.ode.tests.test_single.test_2nd_2F1_hypergeometric()
sympy.solvers.ode.tests.test_single.test_2nd_2F1_hypergeometric_integral()
sympy.solvers.ode.tests.test_single.test_2nd_linear_bessel_equation()
sympy.solvers.ode.tests.test_single.test_2nd_nonlinear_autonomous_conserved()
sympy.solvers.ode.tests.test_single.test_2nd_nonlinear_autonomous_conserved_integral()
sympy.solvers.ode.tests.test_single.test_Airy_equation()
sympy.solvers.ode.tests.test_single.test_Bernoulli()
sympy.solvers.ode.tests.test_single.test_Liouville_ODE()
sympy.solvers.ode.tests.test_single.test_Riccati_special_minus2()
sympy.solvers.ode.tests.test_single.test_SingleODESolver()
sympy.solvers.ode.tests.test_single.test_almost_linear()
sympy.solvers.ode.tests.test_single.test_factorable()
sympy.solvers.ode.tests.test_single.test_lie_group()
sympy.solvers.ode.tests.test_single.test_linear_coefficients()
sympy.solvers.ode.tests.test_single.test_nth_algebraic()
sympy.solvers.ode.tests.test_single.test_nth_linear_constant_coeff_homogeneous()
sympy.solvers.ode.tests.test_single.test_nth_linear_constant_coeff_undetermined_coefficients()
sympy.solvers.ode.tests.test_single.test_nth_linear_constant_coeff_var_of_parameters()
sympy.solvers.ode.tests.test_single.test_nth_linear_constant_coeff_variation_of_parameters__integral()
sympy.solvers.ode.tests.test_single.test_nth_order_linear_euler_eq_homogeneous()
sympy.solvers.ode.tests.test_single.test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients()
sympy.solvers.ode.tests.test_single.test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters()
sympy.solvers.ode.tests.test_single.test_nth_order_reducible()
sympy.solvers.ode.tests.test_single.test_separable()
sympy.solvers.ode.tests.test_single.test_separable_reduced()
sympy.solvers.ode.tests.test_single.test_slow_examples_1st_exact()
sympy.solvers.ode.tests.test_single.test_slow_examples_1st_homogeneous_coeff_ode()
sympy.solvers.ode.tests.test_single.test_slow_examples_factorable()
sympy.solvers.ode.tests.test_single.test_slow_examples_nth_linear_constant_coeff_homogeneous()
sympy.solvers.ode.tests.test_single.test_slow_examples_nth_linear_constant_coeff_undetermined_coefficients()
sympy.solvers.ode.tests.test_single.test_slow_examples_nth_linear_constant_coeff_var_of_parameters()
sympy.solvers.ode.tests.test_single.test_slow_examples_nth_order_reducible()
sympy.solvers.ode.tests.test_single.test_slow_examples_separable()
sympy.solvers.ode.tests.test_single.test_slow_examples_separable_reduced()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/tests/test_ode.py----------------------------------------
A:sympy.solvers.ode.tests.test_ode.(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)->symbols('C0:11')
A:sympy.solvers.ode.tests.test_ode.(u, x, y, z)->symbols('u,x:z', real=True)
A:sympy.solvers.ode.tests.test_ode.f->Function('f')
A:sympy.solvers.ode.tests.test_ode.g->Function('g')
A:sympy.solvers.ode.tests.test_ode.h->Function('h')
A:sympy.solvers.ode.tests.test_ode.eq->Eq(-E ** x * y(x).diff().diff() + y(x).diff(), 0)
A:sympy.solvers.ode.tests.test_ode.output->dsolve(eq, hint='all')
A:sympy.solvers.ode.tests.test_ode.a->Symbol('a')
A:sympy.solvers.ode.tests.test_ode.b->classify_ode(f(x).diff(x) * f(x) + f(x) * f(x) - x * f(x), f(x))
A:sympy.solvers.ode.tests.test_ode.c->classify_ode(f(x).diff(x) / f(x) + f(x) / f(x) - x / f(x), f(x))
A:sympy.solvers.ode.tests.test_ode.k->Symbol('k', real=True)
A:sympy.solvers.ode.tests.test_ode.(k, l, m, n)->symbols('k, l, m, n', Integer=True)
A:sympy.solvers.ode.tests.test_ode.(k1, k2, k3, l1, l2, l3, m1, m2, m3)->symbols('k1, k2, k3, l1, l2, l3, m1, m2, m3', Integer=True)
A:sympy.solvers.ode.tests.test_ode.(P, Q, R, p, q, r)->symbols('P, Q, R, p, q, r', cls=Function)
A:sympy.solvers.ode.tests.test_ode.(P1, P2, P3, Q1, Q2, R1, R2)->symbols('P1, P2, P3, Q1, Q2, R1, R2', cls=Function)
A:sympy.solvers.ode.tests.test_ode.(x, y, z)->symbols('x, y, z', cls=Function)
A:sympy.solvers.ode.tests.test_ode.t->Symbol('t')
A:sympy.solvers.ode.tests.test_ode.x1->diff(x(t), t)
A:sympy.solvers.ode.tests.test_ode.y1->diff(y(t), t)
A:sympy.solvers.ode.tests.test_ode.(K, r, f0)->symbols('K r f0')
A:sympy.solvers.ode.tests.test_ode.sol->dsolve(eqn, hint='2nd_power_series_ordinary')
A:sympy.solvers.ode.tests.test_ode.(EI, q, L)->symbols('EI q L')
A:sympy.solvers.ode.tests.test_ode.solved_constants1->solve_ics(sols, funcs, constants, ics1)
A:sympy.solvers.ode.tests.test_ode.solved_constants2->solve_ics(sols, funcs, constants, ics2)
A:sympy.solvers.ode.tests.test_ode.x->symbols('x')
A:sympy.solvers.ode.tests.test_ode.y->Function('y')
A:sympy.solvers.ode.tests.test_ode.(e1, e2, x, y)->symbols('e1:3 x y')
A:sympy.solvers.ode.tests.test_ode.w->Function('w')
A:sympy.solvers.ode.tests.test_ode.eq1->Eq(m1 * diff(x1(t), t, 2) + k1 * x1(t) - k2 * (x2(t) - x1(t)), 0)
A:sympy.solvers.ode.tests.test_ode.eq2->Eq(m2 * diff(x2(t), t, 2) + k2 * (x2(t) - x1(t)), 0)
A:sympy.solvers.ode.tests.test_ode.eq3->log(sin(rat))
A:sympy.solvers.ode.tests.test_ode.eq4->log((3 * x + 4 * f(x)) / (5 * f(x) + 7 * x))
A:sympy.solvers.ode.tests.test_ode.eq5->exp(2 * x ** 2 / (3 * f(x) ** 2))
A:sympy.solvers.ode.tests.test_ode.eq6->log((3 * x + 4 * f(x)) / (5 * f(x) + 7 * x) + exp(2 * x ** 2 / (3 * f(x) ** 2)))
A:sympy.solvers.ode.tests.test_ode.eq7->sin(3 * x / (5 * f(x) + x ** 2))
A:sympy.solvers.ode.tests.test_ode.obj1->LinearCoefficients(eq1)
A:sympy.solvers.ode.tests.test_ode.obj2->LinearCoefficients(eq2)
A:sympy.solvers.ode.tests.test_ode.obj3->LinearCoefficients(eq3)
A:sympy.solvers.ode.tests.test_ode.obj4->LinearCoefficients(eq4)
A:sympy.solvers.ode.tests.test_ode.obj5->LinearCoefficients(eq5)
A:sympy.solvers.ode.tests.test_ode.obj6->LinearCoefficients(eq6)
A:sympy.solvers.ode.tests.test_ode.obj7->LinearCoefficients(eq7)
A:sympy.solvers.ode.tests.test_ode.C1->Symbol('C1')
A:sympy.solvers.ode.tests.test_ode.(C1, C2)->symbols('C1,C2')
A:sympy.solvers.ode.tests.test_ode.(C1, C2, a)->symbols('C1 C2 a')
A:sympy.solvers.ode.tests.test_ode.C3->Symbol('C3')
A:sympy.solvers.ode.tests.test_ode.(A, B)->symbols('A B', cls=Function)
A:sympy.solvers.ode.tests.test_ode.(N, s)->symbols('N s')
A:sympy.solvers.ode.tests.test_ode.rho->Function('rho')
A:sympy.solvers.ode.tests.test_ode.match->classify_ode(eqn, dict=True, hint='all')
A:sympy.solvers.ode.tests.test_ode.(x1, x2)->symbols('x1, x2', cls=Function)
A:sympy.solvers.ode.tests.test_ode.(t, k1, k2, m1, m2)->symbols('t k1 k2 m1 m2', real=True)
A:sympy.solvers.ode.tests.test_ode.[x1sol, x2sol]->dsolve(eqs, [x1(t), x2(t)], ics={x1(0): 0, x1(t).diff().subs(t, 0): 0, x2(0): 1, x2(t).diff().subs(t, 0): 0})
sympy.solvers.ode.tests.test_ode.test_2nd_power_series_ordinary()
sympy.solvers.ode.tests.test_ode.test_2nd_power_series_regular()
sympy.solvers.ode.tests.test_ode.test_classify_ode()
sympy.solvers.ode.tests.test_ode.test_classify_ode_ics()
sympy.solvers.ode.tests.test_ode.test_classify_sysode()
sympy.solvers.ode.tests.test_ode.test_collect_respecting_exponentials()
sympy.solvers.ode.tests.test_ode.test_constant_renumber()
sympy.solvers.ode.tests.test_ode.test_constant_renumber_order_issue_5308()
sympy.solvers.ode.tests.test_ode.test_constantsimp_take_problem()
sympy.solvers.ode.tests.test_ode.test_dsolve_all_hint()
sympy.solvers.ode.tests.test_ode.test_dsolve_ics()
sympy.solvers.ode.tests.test_ode.test_dsolve_options()
sympy.solvers.ode.tests.test_ode.test_dsolve_remove_redundant_solutions()
sympy.solvers.ode.tests.test_ode.test_get_numbered_constants()
sympy.solvers.ode.tests.test_ode.test_homogeneous_function()
sympy.solvers.ode.tests.test_ode.test_homogeneous_order()
sympy.solvers.ode.tests.test_ode.test_issue_13060()
sympy.solvers.ode.tests.test_ode.test_issue_15056()
sympy.solvers.ode.tests.test_ode.test_issue_15913()
sympy.solvers.ode.tests.test_ode.test_issue_16146()
sympy.solvers.ode.tests.test_ode.test_issue_22462()
sympy.solvers.ode.tests.test_ode.test_issue_22523()
sympy.solvers.ode.tests.test_ode.test_issue_22604()
sympy.solvers.ode.tests.test_ode.test_issue_23425()
sympy.solvers.ode.tests.test_ode.test_issue_4785_22462()
sympy.solvers.ode.tests.test_ode.test_issue_4825()
sympy.solvers.ode.tests.test_ode.test_issue_5095()
sympy.solvers.ode.tests.test_ode.test_issue_5112_5430()
sympy.solvers.ode.tests.test_ode.test_issue_5770()
sympy.solvers.ode.tests.test_ode.test_linear_coeff_match()
sympy.solvers.ode.tests.test_ode.test_noncircularized_real_imaginary_parts()
sympy.solvers.ode.tests.test_ode.test_ode_order()
sympy.solvers.ode.tests.test_ode.test_series()
sympy.solvers.ode.tests.test_ode.test_solve_ics()
sympy.solvers.ode.tests.test_ode.test_undetermined_coefficients_match()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/ode/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/diophantine/diophantine.py----------------------------------------
A:sympy.solvers.diophantine.diophantine.self.symbols->tuple(symbols_seq)
A:sympy.solvers.diophantine.diophantine.self.parameters->tuple(parameters)
A:sympy.solvers.diophantine.diophantine.result->result(*[0] * len(result.parameters))
A:sympy.solvers.diophantine.diophantine.self.equation->_sympify(equation).expand(force=True)
A:sympy.solvers.diophantine.diophantine.self.free_symbols->list(self.equation.free_symbols)
A:sympy.solvers.diophantine.diophantine.self.coeff->self.equation.as_coefficients_dict()
A:sympy.solvers.diophantine.diophantine.self.total_degree->Poly(self.equation).total_degree()
A:sympy.solvers.diophantine.diophantine.self.dimension->len(self.free_symbols)
A:sympy.solvers.diophantine.diophantine.self._parameters->symbols('t_:%i' % (self.n_parameters,), integer=True)
A:sympy.solvers.diophantine.diophantine.(q, r)->divmod(D * E - B * F, d)
A:sympy.solvers.diophantine.diophantine.gcd->igcd(B[0], A[i])
A:sympy.solvers.diophantine.diophantine.(k, p)->arg.as_coeff_Mul()
A:sympy.solvers.diophantine.diophantine.sol(sol_x, sol_y)->base_solution_linear(k, Ai, Bi, pnew)
A:sympy.solvers.diophantine.diophantine.c->Add(*tot_y)
A:sympy.solvers.diophantine.diophantine.div->divisors(Q)
A:sympy.solvers.diophantine.diophantine.(x0, r)->divmod(d - E, B)
A:sympy.solvers.diophantine.diophantine.(y0, r)->divmod(q - D, B)
A:sympy.solvers.diophantine.diophantine.s->sqrt(coeff[v ** 2])
A:sympy.solvers.diophantine.diophantine.e->sign(B / A)
A:sympy.solvers.diophantine.diophantine.sqa->isqrt(a)
A:sympy.solvers.diophantine.diophantine.sqc->isqrt(c)
A:sympy.solvers.diophantine.diophantine.z->Rational(z_0 * A - 2 * w * B, k)
A:sympy.solvers.diophantine.diophantine.roots->solveset_real(eq, z).intersect(S.Integers)
A:sympy.solvers.diophantine.diophantine.ans->check_param(x_0, y_0, 4 * A * r, parameters)
A:sympy.solvers.diophantine.diophantine.r->Rational(p, q)
A:sympy.solvers.diophantine.diophantine.(u, v)->symbols('u, v', integer=True)
A:sympy.solvers.diophantine.diophantine.eq->sum([i * coeff[i] for i in coeff])
A:sympy.solvers.diophantine.diophantine.solution->iter(solution)
A:sympy.solvers.diophantine.diophantine.(P, Q)->_transformation_to_DN(var, coeff)
A:sympy.solvers.diophantine.diophantine.(D, N)->_find_DN(var, coeff)
A:sympy.solvers.diophantine.diophantine.solns_pell->set(solns_pell)
A:sympy.solvers.diophantine.diophantine.a->diop_DN(D, 1)
A:sympy.solvers.diophantine.diophantine.x_n->_mexpand(S(_a + _b) / 2)
A:sympy.solvers.diophantine.diophantine.y_n->_mexpand(S(_a - _b) / (2 * sqrt(D)))
A:sympy.solvers.diophantine.diophantine.L->ilcm(*[_.q for _ in P[:4] + Q[:2]])
A:sympy.solvers.diophantine.diophantine.((sqf_of_a, sqf_of_b, sqf_of_c), (a_1, b_1, c_1), (a_2, b_2, c_2))->sqf_normal(a, b, c, steps=True)
A:sympy.solvers.diophantine.diophantine.(z_0, x_0, y_0)->descent(A, B)
A:sympy.solvers.diophantine.diophantine.(z_0, q)->_rational_pq(z_0, abs(c_2))
A:sympy.solvers.diophantine.diophantine.(x_0, y_0, z_0)->unpack_sol(_diop_ternary_quadratic_normal(var, coeff))
A:sympy.solvers.diophantine.diophantine.(x_0, z_0, y_0)->holzer(x_0, z_0, y_0, abs(a_2), abs(c_2), abs(b_2))
A:sympy.solvers.diophantine.diophantine.(y_0, z_0, x_0)->holzer(y_0, z_0, x_0, abs(b_2), abs(c_2), abs(a_2))
A:sympy.solvers.diophantine.diophantine.x_0->abs(x_0 * sq_lcm // sqf_of_a)
A:sympy.solvers.diophantine.diophantine.y_0->abs(y_0 * sq_lcm // sqf_of_b)
A:sympy.solvers.diophantine.diophantine.z_0->abs(z_0 * sq_lcm // sqf_of_c)
A:sympy.solvers.diophantine.diophantine.sq_lcm->ilcm(sqf_of_a, sqf_of_b, sqf_of_c)
A:sympy.solvers.diophantine.diophantine.sols->set()
A:sympy.solvers.diophantine.diophantine.(y_0, x_0, z_0)->unpack_sol(_diop_ternary_quadratic(var, coeff))
A:sympy.solvers.diophantine.diophantine.(z_0, y_0, x_0)->unpack_sol(_diop_ternary_quadratic(var, coeff))
A:sympy.solvers.diophantine.diophantine.(p, q)->_rational_pq(B * y_0 + C * z_0, 2 * A)
A:sympy.solvers.diophantine.diophantine.(b, a)->_rational_pq(-E, A)
A:sympy.solvers.diophantine.diophantine.ith->sum((m_i ** 2 for m_i in m))
A:sympy.solvers.diophantine.diophantine.lcm->ilcm(lcm, s if _odd(s) else s // 2)
A:sympy.solvers.diophantine.diophantine.k->len(var)
A:sympy.solvers.diophantine.diophantine.g->igcd(*[i.as_content_primitive()[0] for i in fx])
A:sympy.solvers.diophantine.diophantine.fx->list(filter(None, x))
A:sympy.solvers.diophantine.diophantine.(w, r)->divmod(p, q)
A:sympy.solvers.diophantine.diophantine.var->list(eq.expand(force=True).free_symbols)
A:sympy.solvers.diophantine.diophantine.dict_sym_index->dict(zip(syms, range(len(syms))))
A:sympy.solvers.diophantine.diophantine.(n, d)->sum([i * coeff[i] for i in coeff]).as_numer_denom()
A:sympy.solvers.diophantine.diophantine.dsol->diophantine(d)
A:sympy.solvers.diophantine.diophantine.p->Poly(eq)
A:sympy.solvers.diophantine.diophantine.(v, c, t)->classify_diop(eq)
A:sympy.solvers.diophantine.diophantine.len_var->len(v)
A:sympy.solvers.diophantine.diophantine.var_mul->list(subsets(v, 1))
A:sympy.solvers.diophantine.diophantine.fl->factor_list(eq)
A:sympy.solvers.diophantine.diophantine.(var_t, _, eq_type)->classify_diop(base, _dict=False)
A:sympy.solvers.diophantine.diophantine.(_, base)->signsimp(base, evaluate=False).as_coeff_Mul()
A:sympy.solvers.diophantine.diophantine.null->tuple([0] * len(var))
A:sympy.solvers.diophantine.diophantine.final_soln->set()
A:sympy.solvers.diophantine.diophantine.permuted_sign->set(lst)
A:sympy.solvers.diophantine.diophantine.lst->list(filter(lambda x: x[0] * x[1] == sol[1] * sol[0], lst))
A:sympy.solvers.diophantine.diophantine.permuted_sign_var->set(signed_permutations(sol))
A:sympy.solvers.diophantine.diophantine.params->symbols('%s1:%i' % (param, len(var)), integer=True)
A:sympy.solvers.diophantine.diophantine.(var, coeff, eq_type)->classify_diop(eq, _dict=False)
A:sympy.solvers.diophantine.diophantine.diop_type->diop_class(eq)
A:sympy.solvers.diophantine.diophantine.(var, coeff, diop_type)->classify_diop(eq, _dict=False)
A:sympy.solvers.diophantine.diophantine.parameters->symbols('%s_0:%i' % (param, len(var)), integer=True)
A:sympy.solvers.diophantine.diophantine.(a, b, c)->_remove_gcd(a, b, c)
A:sympy.solvers.diophantine.diophantine.(x0, y0, d)->igcdex(abs(a), abs(b))
A:sympy.solvers.diophantine.diophantine.reps->dict(zip(var, (u, v)))
A:sympy.solvers.diophantine.diophantine.(sN, _exact)->integer_nthroot(N, 2)
A:sympy.solvers.diophantine.diophantine.(sD, _exact)->integer_nthroot(D, 2)
A:sympy.solvers.diophantine.diophantine.(sq, _exact)->integer_nthroot(D * y ** 2 + N, 2)
A:sympy.solvers.diophantine.diophantine.pqa->PQa(z, abs(m), D)
A:sympy.solvers.diophantine.diophantine.i->tuple(i)
A:sympy.solvers.diophantine.diophantine.zs->sqrt_mod(D, abs(m), all_roots=True)
A:sympy.solvers.diophantine.diophantine.sqrt_D->sqrt(D)
A:sympy.solvers.diophantine.diophantine.(n, r)->divmod(N, f2)
A:sympy.solvers.diophantine.diophantine.v->multiplicity(4, n)
A:sympy.solvers.diophantine.diophantine.(s, _exact)->integer_nthroot(n, 2)
A:sympy.solvers.diophantine.diophantine.a_i->floor((P_i + sqrt(D)) / Q_i)
A:sympy.solvers.diophantine.diophantine.D->as_int(D)
A:sympy.solvers.diophantine.diophantine.N->as_int(N)
A:sympy.solvers.diophantine.diophantine.(L1, _exact)->integer_nthroot(-int(N / D), 2)
A:sympy.solvers.diophantine.diophantine.(x, _exact)->integer_nthroot(N + D * y ** 2, 2)
A:sympy.solvers.diophantine.diophantine.rpt->len(v[-1])
A:sympy.solvers.diophantine.diophantine.nonrpt->len(v)
A:sympy.solvers.diophantine.diophantine.(X, Y)->symbols('X, Y', integer=True)
A:sympy.solvers.diophantine.diophantine.(B, C)->_rational_pq(2 * c, e)
A:sympy.solvers.diophantine.diophantine.(A, T)->_rational_pq(c, B ** 2)
A:sympy.solvers.diophantine.diophantine.(A_0, B_0)->_transformation_to_DN([X, Y], coeff)
A:sympy.solvers.diophantine.diophantine.(A, B)->_mexpand(eq.subs(zip((x, y, z), (r * x_0, r * y_0 + p, r * z_0 + q)))).as_independent(r, as_Add=True)
A:sympy.solvers.diophantine.diophantine.simplified->_mexpand(eq.subs(zip((x, y), (u, v))))
A:sympy.solvers.diophantine.diophantine.coeff->_mexpand(eq.subs(zip((x, y), (u, v)))).as_coefficients_dict()
A:sympy.solvers.diophantine.diophantine.(m, n)->symbols('m, n', integer=True)
A:sympy.solvers.diophantine.diophantine.(c, p)->(m * x + n * y).as_content_primitive()
A:sympy.solvers.diophantine.diophantine.(junk, eq)->sum([i * coeff[i] for i in coeff]).as_content_primitive()
A:sympy.solvers.diophantine.diophantine.sol->_diop_ternary_quadratic_normal(var, coeff)
A:sympy.solvers.diophantine.diophantine._var->list(var)
A:sympy.solvers.diophantine.diophantine.T->_transformation_to_normal(_var, coeff)
A:sympy.solvers.diophantine.diophantine.T_0->_transformation_to_normal(_var, _coeff)
A:sympy.solvers.diophantine.diophantine.(y_p, x_p, z_p)->_parametrize_ternary_quadratic((y_0, x_0, z_0), v, coeff)
A:sympy.solvers.diophantine.diophantine.(r, p, q)->symbols('r, p, q', integer=True)
A:sympy.solvers.diophantine.diophantine.eq_1->_mexpand(eq.subs(zip((x, y, z), (r * x_0, r * y_0 + p, r * z_0 + q))))
A:sympy.solvers.diophantine.diophantine.ABC->_remove_gcd(a, b, c)
A:sympy.solvers.diophantine.diophantine.sq->tuple((square_factor(i) for i in ABC))
A:sympy.solvers.diophantine.diophantine.sqf(A, B, C)->tuple([i // j ** 2 for (i, j) in zip(ABC, sq)])
A:sympy.solvers.diophantine.diophantine.pc->igcd(A, B)
A:sympy.solvers.diophantine.diophantine.pa->igcd(B, C)
A:sympy.solvers.diophantine.diophantine.pb->igcd(A, C)
A:sympy.solvers.diophantine.diophantine.f->factorint(n)
A:sympy.solvers.diophantine.diophantine.(w, y, x)->ldescent(B, A)
A:sympy.solvers.diophantine.diophantine.(sQ, _exact)->integer_nthroot(abs(Q) // i, 2)
A:sympy.solvers.diophantine.diophantine.(W, X, Y)->ldescent(A, B_0)
A:sympy.solvers.diophantine.diophantine.(x, y, z)->sum_of_three_squares(n)
A:sympy.solvers.diophantine.diophantine.(x, z, y)->descent(-1, A)
A:sympy.solvers.diophantine.diophantine.w->_nint_or_floor(p, q)
A:sympy.solvers.diophantine.diophantine.(x_0, z_0)->gaussian_reduce(w, A, B)
A:sympy.solvers.diophantine.diophantine.t_2->square_factor(t)
A:sympy.solvers.diophantine.diophantine.(x_1, z_1, y_1)->descent(A, t_1)
A:sympy.solvers.diophantine.diophantine.uv(u, v)->base_solution_linear(k, y_0, -x_0)
A:sympy.solvers.diophantine.diophantine.x->Rational(x_0 * A - 2 * u * B, k)
A:sympy.solvers.diophantine.diophantine.y->Rational(y_0 * A - 2 * v * B, k)
A:sympy.solvers.diophantine.diophantine.b->pow(b, (p - 1) // 4, p)
A:sympy.solvers.diophantine.diophantine.(y, z)->prime_as_sum_of_two_squares(N)
A:sympy.solvers.diophantine.diophantine.be->perfect_power(n)
A:sympy.solvers.diophantine.diophantine.(d, r)->divmod(e, p)
A:sympy.solvers.diophantine.diophantine.feasible->_can_do_sum_of_squares(n, k)
A:sympy.solvers.diophantine.diophantine.(next_term, exact)->integer_nthroot(n_remaining, p)
sympy.diophantine(eq,param=symbols('t',integer=True),syms=None,permute=False)
sympy.solvers.diophantine.classify_diop(eq,_dict=True)
sympy.solvers.diophantine.diop_solve(eq,param=symbols('t',integer=True))
sympy.solvers.diophantine.diophantine.BinaryQuadratic(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.BinaryQuadratic.matches(self)
sympy.solvers.diophantine.diophantine.BinaryQuadratic.solve(self,parameters=None,limit=None)->DiophantineSolutionSet
sympy.solvers.diophantine.diophantine.CubicThue(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.CubicThue.matches(self)
sympy.solvers.diophantine.diophantine.DiophantineEquationType(self,equation,free_symbols=None)
sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches(self)
sympy.solvers.diophantine.diophantine.DiophantineEquationType.n_parameters(self)
sympy.solvers.diophantine.diophantine.DiophantineEquationType.parameters(self)
sympy.solvers.diophantine.diophantine.DiophantineEquationType.pre_solve(self,parameters=None)
sympy.solvers.diophantine.diophantine.DiophantineEquationType.solve(self,parameters=None,limit=None)->DiophantineSolutionSet
sympy.solvers.diophantine.diophantine.DiophantineSolutionSet(self,symbols_seq,parameters)
sympy.solvers.diophantine.diophantine.DiophantineSolutionSet.add(self,solution)
sympy.solvers.diophantine.diophantine.DiophantineSolutionSet.dict_iterator(self)
sympy.solvers.diophantine.diophantine.DiophantineSolutionSet.subs(self,*args,**kwargs)
sympy.solvers.diophantine.diophantine.DiophantineSolutionSet.update(self,*solutions)
sympy.solvers.diophantine.diophantine.GeneralPythagorean(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.GeneralPythagorean.matches(self)
sympy.solvers.diophantine.diophantine.GeneralPythagorean.n_parameters(self)
sympy.solvers.diophantine.diophantine.GeneralPythagorean.solve(self,parameters=None,limit=1)
sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers.matches(self)
sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers.solve(self,parameters=None,limit=1)
sympy.solvers.diophantine.diophantine.GeneralSumOfSquares(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.GeneralSumOfSquares.matches(self)
sympy.solvers.diophantine.diophantine.GeneralSumOfSquares.solve(self,parameters=None,limit=1)
sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic.matches(self)
sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic.matches(self)
sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic.solve(self,parameters=None,limit=None)
sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal.matches(self)
sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal.solve(self,parameters=None,limit=None)->DiophantineSolutionSet
sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic.matches(self)
sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic.matches(self)
sympy.solvers.diophantine.diophantine.Linear(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.Linear.matches(self)
sympy.solvers.diophantine.diophantine.Linear.solve(self,parameters=None,limit=None)
sympy.solvers.diophantine.diophantine.PQa(P_0,Q_0,D)
sympy.solvers.diophantine.diophantine.Univariate(DiophantineEquationType)
sympy.solvers.diophantine.diophantine.Univariate.matches(self)
sympy.solvers.diophantine.diophantine.Univariate.solve(self,parameters=None,limit=None)
sympy.solvers.diophantine.diophantine._can_do_sum_of_squares(n,k)
sympy.solvers.diophantine.diophantine._diop_solve(eq,params=None)
sympy.solvers.diophantine.diophantine._diop_ternary_quadratic(_var,coeff)
sympy.solvers.diophantine.diophantine._diop_ternary_quadratic_normal(var,coeff)
sympy.solvers.diophantine.diophantine._even(i)
sympy.solvers.diophantine.diophantine._find_DN(var,coeff)
sympy.solvers.diophantine.diophantine._is_int(i)
sympy.solvers.diophantine.diophantine._nint_or_floor(p,q)
sympy.solvers.diophantine.diophantine._odd(i)
sympy.solvers.diophantine.diophantine._parametrize_ternary_quadratic(solution,_var,coeff)
sympy.solvers.diophantine.diophantine._rational_pq(a,b)
sympy.solvers.diophantine.diophantine._remove_gcd(*x)
sympy.solvers.diophantine.diophantine._sorted_tuple(*i)
sympy.solvers.diophantine.diophantine._special_diop_DN(D,N)
sympy.solvers.diophantine.diophantine._transformation_to_DN(var,coeff)
sympy.solvers.diophantine.diophantine._transformation_to_normal(var,coeff)
sympy.solvers.diophantine.diophantine.base_solution_linear(c,a,b,t=None)
sympy.solvers.diophantine.diophantine.check_param(x,y,a,params)
sympy.solvers.diophantine.diophantine.classify_diop(eq,_dict=True)
sympy.solvers.diophantine.diophantine.cornacchia(a,b,m)
sympy.solvers.diophantine.diophantine.descent(A,B)
sympy.solvers.diophantine.diophantine.diop_DN(D,N,t=symbols('t',integer=True))
sympy.solvers.diophantine.diophantine.diop_bf_DN(D,N,t=symbols('t',integer=True))
sympy.solvers.diophantine.diophantine.diop_general_pythagorean(eq,param=symbols('m',integer=True))
sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers(eq,limit=1)
sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares(eq,limit=1)
sympy.solvers.diophantine.diophantine.diop_linear(eq,param=symbols('t',integer=True))
sympy.solvers.diophantine.diophantine.diop_quadratic(eq,param=symbols('t',integer=True))
sympy.solvers.diophantine.diophantine.diop_solve(eq,param=symbols('t',integer=True))
sympy.solvers.diophantine.diophantine.diop_ternary_quadratic(eq,parameterize=False)
sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal(eq,parameterize=False)
sympy.solvers.diophantine.diophantine.diop_univariate(eq)
sympy.solvers.diophantine.diophantine.diophantine(eq,param=symbols('t',integer=True),syms=None,permute=False)
sympy.solvers.diophantine.diophantine.divisible(a,b)
sympy.solvers.diophantine.diophantine.dot(u,v,w,a,b)
sympy.solvers.diophantine.diophantine.equivalent(u,v,r,s,D,N)
sympy.solvers.diophantine.diophantine.find_DN(eq)
sympy.solvers.diophantine.diophantine.gaussian_reduce(w,a,b)
sympy.solvers.diophantine.diophantine.holzer(x,y,z,a,b,c)
sympy.solvers.diophantine.diophantine.is_solution_quad(var,coeff,u,v)
sympy.solvers.diophantine.diophantine.ldescent(A,B)
sympy.solvers.diophantine.diophantine.length(P,Q,D)
sympy.solvers.diophantine.diophantine.merge_solution(var,var_t,solution)
sympy.solvers.diophantine.diophantine.norm(u,w,a,b)
sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic(eq)
sympy.solvers.diophantine.diophantine.partition(n,k=None,zeros=False)
sympy.solvers.diophantine.diophantine.pow_rep_recursive(n_i,k,n_remaining,terms,p)
sympy.solvers.diophantine.diophantine.power_representation(n,p,k,zeros=False)
sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares(p)
sympy.solvers.diophantine.diophantine.reconstruct(A,B,z)
sympy.solvers.diophantine.diophantine.sqf_normal(a,b,c,steps=False)
sympy.solvers.diophantine.diophantine.square_factor(a)
sympy.solvers.diophantine.diophantine.sum_of_four_squares(n)
sympy.solvers.diophantine.diophantine.sum_of_squares(n,k,zeros=False)
sympy.solvers.diophantine.diophantine.sum_of_three_squares(n)
sympy.solvers.diophantine.diophantine.transformation_to_DN(eq)
sympy.solvers.diophantine.diophantine.transformation_to_normal(eq)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/diophantine/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/diophantine/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/solvers/diophantine/tests/test_diophantine.py----------------------------------------
A:sympy.solvers.diophantine.tests.test_diophantine.(a, b, c, d, p, q, x, y, z, w, t, u, v, X, Y, Z)->symbols('a, b, c, d, p, q, x, y, z, w, t, u, v, X, Y, Z', integer=True)
A:sympy.solvers.diophantine.tests.test_diophantine.(t_0, t_1, t_2, t_3, t_4, t_5, t_6)->symbols('t_:7', integer=True)
A:sympy.solvers.diophantine.tests.test_diophantine.(m1, m2, m3)->symbols('m1:4', integer=True)
A:sympy.solvers.diophantine.tests.test_diophantine.n1->symbols('n1', integer=True)
A:sympy.solvers.diophantine.tests.test_diophantine.(A, B)->transformation_to_DN(eq)
A:sympy.solvers.diophantine.tests.test_diophantine.simplified->diop_simplify(eq.subs(zip((x, y, z), (X, Y, Z))))
A:sympy.solvers.diophantine.tests.test_diophantine.coeff->eq.as_coefficients_dict()
A:sympy.solvers.diophantine.tests.test_diophantine.(w, x, y)->descent(a, b)
A:sympy.solvers.diophantine.tests.test_diophantine.A->transformation_to_normal(eq)
A:sympy.solvers.diophantine.tests.test_diophantine.complete_soln->set(signed_permutations(base_sol.pop()))
A:sympy.solvers.diophantine.tests.test_diophantine.(a, b)->symbols('a b', integer=True, positive=False)
A:sympy.solvers.diophantine.tests.test_diophantine.ans->diop_general_sum_of_squares(eq, oo)
A:sympy.solvers.diophantine.tests.test_diophantine.(a, b, c)->sum_of_three_squares(i)
A:sympy.solvers.diophantine.tests.test_diophantine.n->randint(1, 100000000000000)
A:sympy.solvers.diophantine.tests.test_diophantine.f->power_representation(n, p, k)
A:sympy.solvers.diophantine.tests.test_diophantine.l->next(f)
A:sympy.solvers.diophantine.tests.test_diophantine.(m, n)->symbols('m n', integer=True, positive=True)
A:sympy.solvers.diophantine.tests.test_diophantine.diof->diophantine(a * b + 2 * a + 3 * b - 6)
A:sympy.solvers.diophantine.tests.test_diophantine.s->diophantine(3 * x ** 2 + 72 * y ** 2 - 27 * z ** 2)
A:sympy.solvers.diophantine.tests.test_diophantine.factors->sympy.core.mul.Mul.make_args(eq)
A:sympy.solvers.diophantine.tests.test_diophantine.var->list(eq.free_symbols)
A:sympy.solvers.diophantine.tests.test_diophantine.solution->BinaryQuadratic(eq).solve(parameters=[t, u])
A:sympy.solvers.diophantine.tests.test_diophantine.h->holzer(x, y, z, a, b, c)
A:sympy.solvers.diophantine.tests.test_diophantine.neg->symbols('neg', negative=True)
A:sympy.solvers.diophantine.tests.test_diophantine.s1->DiophantineSolutionSet([], [])
A:sympy.solvers.diophantine.tests.test_diophantine.s2->DiophantineSolutionSet([x, y], [t, u])
A:sympy.solvers.diophantine.tests.test_diophantine.(p, q, r)->ordered(S(s).free_symbols)
A:sympy.solvers.diophantine.tests.test_diophantine.s3->DiophantineSolutionSet([x, y, z], [t, u])
A:sympy.solvers.diophantine.tests.test_diophantine.s4->DiophantineSolutionSet([x, y], [t, u])
sympy.solvers.diophantine.tests.test_diophantine.check_solutions(eq)
sympy.solvers.diophantine.tests.test_diophantine.diop_simplify(eq)
sympy.solvers.diophantine.tests.test_diophantine.is_normal_transformation_ok(eq)
sympy.solvers.diophantine.tests.test_diophantine.is_pell_transformation_ok(eq)
sympy.solvers.diophantine.tests.test_diophantine.test_DN()
sympy.solvers.diophantine.tests.test_diophantine.test__can_do_sum_of_squares()
sympy.solvers.diophantine.tests.test_diophantine.test_assumptions()
sympy.solvers.diophantine.tests.test_diophantine.test_bf_pell()
sympy.solvers.diophantine.tests.test_diophantine.test_classify_diop()
sympy.solvers.diophantine.tests.test_diophantine.test_descent()
sympy.solvers.diophantine.tests.test_diophantine.test_diop_general_sum_of_squares_quick()
sympy.solvers.diophantine.tests.test_diophantine.test_diop_partition()
sympy.solvers.diophantine.tests.test_diophantine.test_diop_sum_of_even_powers()
sympy.solvers.diophantine.tests.test_diophantine.test_diop_ternary_quadratic()
sympy.solvers.diophantine.tests.test_diophantine.test_diop_ternary_quadratic_normal()
sympy.solvers.diophantine.tests.test_diophantine.test_diopcoverage()
sympy.solvers.diophantine.tests.test_diophantine.test_diophantine()
sympy.solvers.diophantine.tests.test_diophantine.test_diophantine_permute_sign()
sympy.solvers.diophantine.tests.test_diophantine.test_diophantine_solution_set()
sympy.solvers.diophantine.tests.test_diophantine.test_fail_holzer()
sympy.solvers.diophantine.tests.test_diophantine.test_find_DN()
sympy.solvers.diophantine.tests.test_diophantine.test_general_pythagorean()
sympy.solvers.diophantine.tests.test_diophantine.test_holzer()
sympy.solvers.diophantine.tests.test_diophantine.test_input_format()
sympy.solvers.diophantine.tests.test_diophantine.test_issue_18138()
sympy.solvers.diophantine.tests.test_diophantine.test_issue_23807()
sympy.solvers.diophantine.tests.test_diophantine.test_issue_8943()
sympy.solvers.diophantine.tests.test_diophantine.test_issue_9106()
sympy.solvers.diophantine.tests.test_diophantine.test_issue_9538()
sympy.solvers.diophantine.tests.test_diophantine.test_issue_9539()
sympy.solvers.diophantine.tests.test_diophantine.test_ldescent()
sympy.solvers.diophantine.tests.test_diophantine.test_length()
sympy.solvers.diophantine.tests.test_diophantine.test_linear()
sympy.solvers.diophantine.tests.test_diophantine.test_no_square_ternary_quadratic()
sympy.solvers.diophantine.tests.test_diophantine.test_nosols()
sympy.solvers.diophantine.tests.test_diophantine.test_not_implemented()
sympy.solvers.diophantine.tests.test_diophantine.test_parametrize_ternary_quadratic()
sympy.solvers.diophantine.tests.test_diophantine.test_power_representation()
sympy.solvers.diophantine.tests.test_diophantine.test_prime_as_sum_of_two_squares()
sympy.solvers.diophantine.tests.test_diophantine.test_quadratic_elliptical_case()
sympy.solvers.diophantine.tests.test_diophantine.test_quadratic_non_perfect_slow()
sympy.solvers.diophantine.tests.test_diophantine.test_quadratic_non_perfect_square()
sympy.solvers.diophantine.tests.test_diophantine.test_quadratic_parabolic_case()
sympy.solvers.diophantine.tests.test_diophantine.test_quadratic_parameter_passing()
sympy.solvers.diophantine.tests.test_diophantine.test_quadratic_perfect_square()
sympy.solvers.diophantine.tests.test_diophantine.test_quadratic_simple_hyperbolic_case()
sympy.solvers.diophantine.tests.test_diophantine.test_square_factor()
sympy.solvers.diophantine.tests.test_diophantine.test_sum_of_four_squares()
sympy.solvers.diophantine.tests.test_diophantine.test_sum_of_squares_powers()
sympy.solvers.diophantine.tests.test_diophantine.test_sum_of_three_squares()
sympy.solvers.diophantine.tests.test_diophantine.test_ternary_quadratic()
sympy.solvers.diophantine.tests.test_diophantine.test_transformation_to_normal()
sympy.solvers.diophantine.tests.test_diophantine.test_transformation_to_pell()
sympy.solvers.diophantine.tests.test_diophantine.test_univariate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/matrix_nodes.py----------------------------------------
A:sympy.codegen.matrix_nodes._construct_matrix->staticmethod(sympify)
sympy.codegen.matrix_nodes.MatrixSolve(Token,MatrixExpr)
sympy.codegen.matrix_nodes.MatrixSolve.shape(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/numpy_nodes.py----------------------------------------
A:sympy.codegen.numpy_nodes._ln2->log(_two)
A:sympy.codegen.numpy_nodes.candidate->_logaddexp2(a, b)
sympy.codegen.numpy_nodes._exp2(x,*,evaluate=True)
sympy.codegen.numpy_nodes._lb(x,*,evaluate=True)
sympy.codegen.numpy_nodes._logaddexp(x1,x2,*,evaluate=True)
sympy.codegen.numpy_nodes._logaddexp2(x1,x2,*,evaluate=True)
sympy.codegen.numpy_nodes.logaddexp(cls,*args)
sympy.codegen.numpy_nodes.logaddexp._eval_evalf(self,*args,**kwargs)
sympy.codegen.numpy_nodes.logaddexp._eval_rewrite_as_log(self,x1,x2,**kwargs)
sympy.codegen.numpy_nodes.logaddexp._eval_simplify(self,*args,**kwargs)
sympy.codegen.numpy_nodes.logaddexp.fdiff(self,argindex=1)
sympy.codegen.numpy_nodes.logaddexp2(cls,*args)
sympy.codegen.numpy_nodes.logaddexp2._eval_evalf(self,*args,**kwargs)
sympy.codegen.numpy_nodes.logaddexp2._eval_rewrite_as_log(self,x1,x2,**kwargs)
sympy.codegen.numpy_nodes.logaddexp2._eval_simplify(self,*args,**kwargs)
sympy.codegen.numpy_nodes.logaddexp2.fdiff(self,argindex=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/rewriting.py----------------------------------------
A:sympy.codegen.rewriting.new_expr->optim(expr)
A:sympy.codegen.rewriting.expr->optim.cheapest(expr, new_expr)
A:sympy.codegen.rewriting.exp2_opt->ReplaceOptim(lambda p: p.is_Pow and p.base == 2, lambda p: exp2(p.exp))
A:sympy.codegen.rewriting._d->Wild('d', properties=[lambda x: x.is_Dummy])
A:sympy.codegen.rewriting._u->Wild('u', properties=[lambda x: not x.is_number and (not x.is_Add)])
A:sympy.codegen.rewriting._v->Wild('v')
A:sympy.codegen.rewriting._w->Wild('w')
A:sympy.codegen.rewriting._n->Wild('n', properties=[lambda x: x.is_number])
A:sympy.codegen.rewriting.sinc_opt1->ReplaceOptim(sin(_w) / _w, sinc(_w))
A:sympy.codegen.rewriting.sinc_opt2->ReplaceOptim(sin(_n * _w) / _w, _n * sinc(_n * _w))
A:sympy.codegen.rewriting.log2_opt->ReplaceOptim(_v * log(_w) / log(2), _v * log2(_w), cost_function=lambda expr: expr.count(lambda e: e.is_Pow and e.exp.is_negative or (isinstance(e, (log, log2)) and (not e.args[0].is_number))))
A:sympy.codegen.rewriting.log2const_opt->ReplaceOptim(log(2) * log2(_w), log(_w))
A:sympy.codegen.rewriting.logsumexp_2terms_opt->ReplaceOptim(lambda l: isinstance(l, log) and l.args[0].is_Add and (len(l.args[0].args) == 2) and all((isinstance(t, exp) for t in l.args[0].args)), lambda l: Max(*[e.args[0] for e in l.args[0].args]) + log1p(exp(Min(*[e.args[0] for e in l.args[0].args]))))
A:sympy.codegen.rewriting.(numbers, non_num)->sift(add.args, lambda arg: arg.is_number, binary=True)
A:sympy.codegen.rewriting.numsum->sum(numbers)
A:sympy.codegen.rewriting.(terms_with_func, other)->sift(non_num, lambda arg: arg.has(self.func), binary=True)
A:sympy.codegen.rewriting.(numsum, terms_with_func, other_non_num_terms)->self._group_Add_terms(e)
A:sympy.codegen.rewriting.(func, coeff)->sift(with_func.args, lambda arg: arg.func == self.func, binary=True)
A:sympy.codegen.rewriting.alt1->super().__call__(expr)
A:sympy.codegen.rewriting.alt2->super().__call__(expr.factor())
A:sympy.codegen.rewriting.expm1_opt->FuncMinusOneOptim(exp, expm1)
A:sympy.codegen.rewriting.cosm1_opt->FuncMinusOneOptim(cos, cosm1)
A:sympy.codegen.rewriting.powm1_opt->FuncMinusOneOptim(Pow, powm1)
A:sympy.codegen.rewriting.log1p_opt->ReplaceOptim(lambda e: isinstance(e, log), lambda l: expand_log(l.replace(log, lambda arg: log(arg.factor()))).replace(log(_u + 1), log1p(_u)))
A:sympy.codegen.rewriting.matinv_opt->ReplaceOptim(_matinv_predicate, _matinv_transform)
A:sympy.codegen.rewriting.logaddexp_opt->ReplaceOptim(log(exp(_v) + exp(_w)), logaddexp(_v, _w))
A:sympy.codegen.rewriting.logaddexp2_opt->ReplaceOptim(log(Pow(2, _v) + Pow(2, _w)), logaddexp2(_v, _w) * log(2))
sympy.codegen.rewriting.FuncMinusOneOptim(self,func,func_m_1,opportunistic=True)
sympy.codegen.rewriting.FuncMinusOneOptim._group_Add_terms(self,add)
sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add(self,e)
sympy.codegen.rewriting.Optimization(self,cost_function=None,priority=1)
sympy.codegen.rewriting.Optimization.cheapest(self,*args)
sympy.codegen.rewriting.ReplaceOptim(self,query,value,**kwargs)
sympy.codegen.rewriting._matinv_predicate(expr)
sympy.codegen.rewriting._matinv_transform(expr)
sympy.codegen.rewriting.create_expand_pow_optimization(limit,*,base_req=lambdab:b.is_symbol)
sympy.codegen.rewriting.optimize(expr,optimizations)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/fnodes.py----------------------------------------
A:sympy.codegen.fnodes.pure->Attribute('pure')
A:sympy.codegen.fnodes.elemental->Attribute('elemental')
A:sympy.codegen.fnodes.intent_in->Attribute('intent_in')
A:sympy.codegen.fnodes.intent_out->Attribute('intent_out')
A:sympy.codegen.fnodes.intent_inout->Attribute('intent_inout')
A:sympy.codegen.fnodes.allocatable->Attribute('allocatable')
A:sympy.codegen.fnodes._construct_body->staticmethod(lambda body: CodeBlock(*body))
A:sympy.codegen.fnodes._construct_namespace->staticmethod(_name)
A:sympy.codegen.fnodes._construct_rename->staticmethod(lambda args: Tuple(*[arg if isinstance(arg, use_rename) else use_rename(*arg) for arg in args]))
A:sympy.codegen.fnodes._construct_only->staticmethod(lambda args: Tuple(*[arg if isinstance(arg, use_rename) else _name(arg) for arg in args]))
A:sympy.codegen.fnodes._construct_definitions->staticmethod(lambda arg: CodeBlock(*arg))
A:sympy.codegen.fnodes._construct_parameters->staticmethod(lambda params: Tuple(*map(Variable.deduced, params)))
A:sympy.codegen.fnodes._construct_name->staticmethod(_name)
A:sympy.codegen.fnodes._construct_subroutine_args->staticmethod(_mk_Tuple)
A:sympy.codegen.fnodes._construct_counter->staticmethod(sympify)
A:sympy.codegen.fnodes._construct_first->staticmethod(sympify)
A:sympy.codegen.fnodes._construct_last->staticmethod(sympify)
A:sympy.codegen.fnodes._construct_step->staticmethod(sympify)
A:sympy.codegen.fnodes._construct_concurrent->staticmethod(lambda arg: true if arg else false)
A:sympy.codegen.fnodes._construct_elements->staticmethod(_mk_Tuple)
A:sympy.codegen.fnodes._construct_expr->staticmethod(sympify)
A:sympy.codegen.fnodes.assumed_extent->Extent()
A:sympy.codegen.fnodes.assumed_size->dimension('*')
A:sympy.codegen.fnodes.dim->dimension(*dim)
A:sympy.codegen.fnodes._construct_labels->staticmethod(_mk_Tuple)
A:sympy.codegen.fnodes._construct_return_value->staticmethod(sympify)
A:sympy.codegen.fnodes.(mantissa, sgnd_ex)->('%.{}e'.format(self._decimals) % self).split('e')
A:sympy.codegen.fnodes.mantissa->mantissa.strip('0').rstrip('.').strip('0').rstrip('.')
A:sympy.codegen.fnodes._construct_array->staticmethod(sympify)
A:sympy.codegen.fnodes._construct_dim->staticmethod(sympify)
sympy.codegen.fnodes.ArrayConstructor(Token)
sympy.codegen.fnodes.Do(Token)
sympy.codegen.fnodes.Extent(cls,*args)
sympy.codegen.fnodes.Extent._sympystr(self,printer)
sympy.codegen.fnodes.F95Function(FFunction)
sympy.codegen.fnodes.FFunction(Function)
sympy.codegen.fnodes.FFunction._fcode(self,printer)
sympy.codegen.fnodes.FortranReturn(Token)
sympy.codegen.fnodes.GoTo(Token)
sympy.codegen.fnodes.ImpliedDoLoop(Token)
sympy.codegen.fnodes.Module(Token)
sympy.codegen.fnodes.Module._construct_declarations(cls,args)
sympy.codegen.fnodes.Program(Token)
sympy.codegen.fnodes.Subroutine(Node)
sympy.codegen.fnodes.Subroutine._construct_body(cls,itr)
sympy.codegen.fnodes.SubroutineCall(Token)
sympy.codegen.fnodes._literal(Float)
sympy.codegen.fnodes._literal._fcode(self,printer,*args,**kwargs)
sympy.codegen.fnodes._name(arg)
sympy.codegen.fnodes._printable(arg)
sympy.codegen.fnodes.allocated(array)
sympy.codegen.fnodes.array(symbol,dim,intent=None,*,attrs=(),value=None,type=None)
sympy.codegen.fnodes.bind_C(name=None)
sympy.codegen.fnodes.cmplx(FFunction)
sympy.codegen.fnodes.dimension(*args)
sympy.codegen.fnodes.dsign(FFunction)
sympy.codegen.fnodes.isign(FFunction)
sympy.codegen.fnodes.kind(FFunction)
sympy.codegen.fnodes.lbound(array,dim=None,kind=None)
sympy.codegen.fnodes.literal_dp(_literal)
sympy.codegen.fnodes.literal_sp(_literal)
sympy.codegen.fnodes.merge(F95Function)
sympy.codegen.fnodes.product_(Token,Expr)
sympy.codegen.fnodes.reshape(source,shape,pad=None,order=None)
sympy.codegen.fnodes.shape(source,kind=None)
sympy.codegen.fnodes.size(array,dim=None,kind=None)
sympy.codegen.fnodes.sum_(Token,Expr)
sympy.codegen.fnodes.ubound(array,dim=None,kind=None)
sympy.codegen.fnodes.use(Token)
sympy.codegen.fnodes.use_rename(Token)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/abstract_nodes.py----------------------------------------
sympy.codegen.abstract_nodes.List(Tuple)
sympy.codegen.abstract_nodes.List.__eq__(self,other)
sympy.codegen.abstract_nodes.List.__hash__(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/ast.py----------------------------------------
A:sympy.codegen.ast.argval->kwargs.pop(attrname)
A:sympy.codegen.ast.obj->CodegenAST.__new__(cls, *args)
A:sympy.codegen.ast.joined->joiner.join(map(printer._print, self.args))
A:sympy.codegen.ast.exclude->kwargs.get('exclude', ())
A:sympy.codegen.ast.indent_level->printer._context.get('indent_level', 0)
A:sympy.codegen.ast.indented->self._indented(printer, attr, value, *args, **kwargs)
A:sympy.codegen.ast.break_->BreakToken()
A:sympy.codegen.ast.continue_->ContinueToken()
A:sympy.codegen.ast.none->NoneToken()
A:sympy.codegen.ast.lhs->_sympify(lhs)
A:sympy.codegen.ast.rhs->_sympify(rhs)
A:sympy.codegen.ast.obj.left_hand_sides->Tuple(*left_hand_sides)
A:sympy.codegen.ast.obj.right_hand_sides->Tuple(*right_hand_sides)
A:sympy.codegen.ast.il->printer._context.get('indent_level', 0)
A:sympy.codegen.ast.A->list(enumerate(assignments))
A:sympy.codegen.ast.var_map->defaultdict(list)
A:sympy.codegen.ast.ordered_assignments->topological_sort([A, E])
A:sympy.codegen.ast.existing_symbols->self.atoms(Symbol)
A:sympy.codegen.ast.symbols->filter_symbols(symbols, existing_symbols)
A:sympy.codegen.ast.(replacements, reduced_exprs)->cse(list(self.right_hand_sides), symbols=symbols, optimizations=optimizations, postprocess=postprocess, order=order)
A:sympy.codegen.ast._construct_target->staticmethod(_sympify)
A:sympy.codegen.ast.itr->tuple(itr)
A:sympy.codegen.ast._construct_attrs->staticmethod(_mk_Tuple)
A:sympy.codegen.ast.val->sympify(value)
A:sympy.codegen.ast.ten->Integer(10)
A:sympy.codegen.ast.exp10->getattr(self, 'decimal_dig', None)
A:sympy.codegen.ast.new_val->self.cast_nocheck(value)
A:sympy.codegen.ast.type_name->latex_escape(self.__class__.__name__)
A:sympy.codegen.ast.name->latex_escape(self.name.text)
A:sympy.codegen.ast.two->Integer(2)
A:sympy.codegen.ast.intc->IntBaseType('intc')
A:sympy.codegen.ast.intp->IntBaseType('intp')
A:sympy.codegen.ast.int8->SignedIntType('int8', 8)
A:sympy.codegen.ast.int16->SignedIntType('int16', 16)
A:sympy.codegen.ast.int32->SignedIntType('int32', 32)
A:sympy.codegen.ast.int64->SignedIntType('int64', 64)
A:sympy.codegen.ast.uint8->UnsignedIntType('uint8', 8)
A:sympy.codegen.ast.uint16->UnsignedIntType('uint16', 16)
A:sympy.codegen.ast.uint32->UnsignedIntType('uint32', 32)
A:sympy.codegen.ast.uint64->UnsignedIntType('uint64', 64)
A:sympy.codegen.ast.float16->FloatType('float16', 16, nexp=5, nmant=10)
A:sympy.codegen.ast.float32->FloatType('float32', 32, nexp=8, nmant=23)
A:sympy.codegen.ast.float64->FloatType('float64', 64, nexp=11, nmant=52)
A:sympy.codegen.ast.float80->FloatType('float80', 80, nexp=15, nmant=63)
A:sympy.codegen.ast.float128->FloatType('float128', 128, nexp=15, nmant=112)
A:sympy.codegen.ast.float256->FloatType('float256', 256, nexp=19, nmant=236)
A:sympy.codegen.ast.complex64->ComplexType('complex64', nbits=64, **float32.kwargs(exclude=('name', 'nbits')))
A:sympy.codegen.ast.complex128->ComplexType('complex128', nbits=128, **float64.kwargs(exclude=('name', 'nbits')))
A:sympy.codegen.ast.untyped->Type('untyped')
A:sympy.codegen.ast.real->FloatBaseType('real')
A:sympy.codegen.ast.integer->IntBaseType('integer')
A:sympy.codegen.ast.complex_->ComplexBaseType('complex')
A:sympy.codegen.ast.bool_->Type('bool')
A:sympy.codegen.ast._construct_parameters->staticmethod(_mk_Tuple)
A:sympy.codegen.ast.result->str(self.name)
A:sympy.codegen.ast.value_const->Attribute('value_const')
A:sympy.codegen.ast.pointer_const->Attribute('pointer_const')
A:sympy.codegen.ast.defaults->Node.defaults.copy()
A:sympy.codegen.ast._construct_symbol->staticmethod(sympify)
A:sympy.codegen.ast._construct_value->staticmethod(sympify)
A:sympy.codegen.ast.type_->Type.from_expr(value)
A:sympy.codegen.ast.value->Type.from_expr(value).cast_check(value)
A:sympy.codegen.ast.kw->self.kwargs()
A:sympy.codegen.ast._construct_indices->staticmethod(lambda arg: Tuple(*arg))
A:sympy.codegen.ast._construct_strides->staticmethod(lambda arg: Tuple(*arg))
A:sympy.codegen.ast._construct_offset->staticmethod(sympify)
A:sympy.codegen.ast._construct_condition->staticmethod(lambda cond: _sympify(cond))
A:sympy.codegen.ast.stdout->Stream('stdout')
A:sympy.codegen.ast.stderr->Stream('stderr')
A:sympy.codegen.ast._construct_print_args->staticmethod(_mk_Tuple)
A:sympy.codegen.ast._construct_return->staticmethod(_sympify)
A:sympy.codegen.ast._construct_function_args->staticmethod(lambda args: Tuple(*args))
sympy.codegen.Assignment(AssignmentBase)
sympy.codegen.Attribute(Token)
sympy.codegen.CodeBlock(cls,*args)
sympy.codegen.Declaration(Token)
sympy.codegen.For(Token)
sympy.codegen.FunctionCall(Token,Expr)
sympy.codegen.FunctionDefinition(FunctionPrototype)
sympy.codegen.FunctionPrototype(Node)
sympy.codegen.Print(Token)
sympy.codegen.Scope(Token)
sympy.codegen.Variable(Node)
sympy.codegen.While(Token)
sympy.codegen.ast.AddAugmentedAssignment(AugmentedAssignment)
sympy.codegen.ast.Assignment(AssignmentBase)
sympy.codegen.ast.AssignmentBase(cls,lhs,rhs)
sympy.codegen.ast.AssignmentBase._check_args(cls,lhs,rhs)
sympy.codegen.ast.AssignmentBase.lhs(self)
sympy.codegen.ast.AssignmentBase.rhs(self)
sympy.codegen.ast.Attribute(Token)
sympy.codegen.ast.Attribute._sympystr(self,printer,*args,**kwargs)
sympy.codegen.ast.AugmentedAssignment(AssignmentBase)
sympy.codegen.ast.AugmentedAssignment.op(self)
sympy.codegen.ast.BreakToken(Token)
sympy.codegen.ast.CodeBlock(cls,*args)
sympy.codegen.ast.CodeBlock.__iter__(self)
sympy.codegen.ast.CodeBlock._sympyrepr(self,printer,*args,**kwargs)
sympy.codegen.ast.CodeBlock.cse(self,symbols=None,optimizations=None,postprocess=None,order='canonical')
sympy.codegen.ast.CodeBlock.free_symbols(self)
sympy.codegen.ast.CodeBlock.topological_sort(cls,assignments)
sympy.codegen.ast.CodegenAST(Basic)
sympy.codegen.ast.Comment(String)
sympy.codegen.ast.ComplexBaseType(FloatBaseType)
sympy.codegen.ast.ComplexBaseType._check(self,value)
sympy.codegen.ast.ComplexBaseType.cast_nocheck(self,value)
sympy.codegen.ast.ComplexType(ComplexBaseType,FloatType)
sympy.codegen.ast.ContinueToken(Token)
sympy.codegen.ast.Declaration(Token)
sympy.codegen.ast.DivAugmentedAssignment(AugmentedAssignment)
sympy.codegen.ast.Element(Token)
sympy.codegen.ast.FloatBaseType(Type)
sympy.codegen.ast.FloatType(FloatBaseType)
sympy.codegen.ast.FloatType._check(self,value)
sympy.codegen.ast.FloatType.cast_nocheck(self,value)
sympy.codegen.ast.FloatType.decimal_dig(self)
sympy.codegen.ast.FloatType.dig(self)
sympy.codegen.ast.FloatType.eps(self)
sympy.codegen.ast.FloatType.max(self)
sympy.codegen.ast.FloatType.max_exponent(self)
sympy.codegen.ast.FloatType.min_exponent(self)
sympy.codegen.ast.FloatType.tiny(self)
sympy.codegen.ast.For(Token)
sympy.codegen.ast.For._construct_body(cls,itr)
sympy.codegen.ast.For._construct_iterable(cls,itr)
sympy.codegen.ast.FunctionCall(Token,Expr)
sympy.codegen.ast.FunctionDefinition(FunctionPrototype)
sympy.codegen.ast.FunctionDefinition._construct_body(cls,itr)
sympy.codegen.ast.FunctionDefinition.from_FunctionPrototype(cls,func_proto,body)
sympy.codegen.ast.FunctionPrototype(Node)
sympy.codegen.ast.FunctionPrototype._construct_parameters(args)
sympy.codegen.ast.FunctionPrototype.from_FunctionDefinition(cls,func_def)
sympy.codegen.ast.IntBaseType(Type)
sympy.codegen.ast.ModAugmentedAssignment(AugmentedAssignment)
sympy.codegen.ast.MulAugmentedAssignment(AugmentedAssignment)
sympy.codegen.ast.Node(Token)
sympy.codegen.ast.Node.attr_params(self,looking_for)
sympy.codegen.ast.NoneToken(Token)
sympy.codegen.ast.NoneToken.__eq__(self,other)
sympy.codegen.ast.NoneToken.__hash__(self)
sympy.codegen.ast.NoneToken._hashable_content(self)
sympy.codegen.ast.Pointer(Variable)
sympy.codegen.ast.Pointer.__getitem__(self,key)
sympy.codegen.ast.Print(Token)
sympy.codegen.ast.QuotedString(String)
sympy.codegen.ast.Return(Token)
sympy.codegen.ast.Scope(Token)
sympy.codegen.ast.Scope._construct_body(cls,itr)
sympy.codegen.ast.SignedIntType(_SizedIntType)
sympy.codegen.ast.SignedIntType.max(self)
sympy.codegen.ast.SignedIntType.min(self)
sympy.codegen.ast.Stream(Token)
sympy.codegen.ast.String(Atom,Token)
sympy.codegen.ast.String._construct_text(cls,text)
sympy.codegen.ast.String._latex(self,printer)
sympy.codegen.ast.String._sympystr(self,printer,*args,**kwargs)
sympy.codegen.ast.String.func(self)
sympy.codegen.ast.String.kwargs(self,exclude=(),apply=None)
sympy.codegen.ast.SubAugmentedAssignment(AugmentedAssignment)
sympy.codegen.ast.Token(cls,*args,**kwargs)
sympy.codegen.ast.Token.__eq__(self,other)
sympy.codegen.ast.Token.__hash__(self)
sympy.codegen.ast.Token.__repr__(self)
sympy.codegen.ast.Token._construct(cls,attr,arg)
sympy.codegen.ast.Token._get_constructor(cls,attr)
sympy.codegen.ast.Token._hashable_content(self)
sympy.codegen.ast.Token._indented(self,printer,k,v,*args,**kwargs)
sympy.codegen.ast.Token._joiner(self,k,indent_level)
sympy.codegen.ast.Token._sympyrepr(self,printer,*args,joiner=',',**kwargs)
sympy.codegen.ast.Token.is_Atom(self)
sympy.codegen.ast.Token.kwargs(self,exclude=(),apply=None)
sympy.codegen.ast.Type(Token)
sympy.codegen.ast.Type._check(self,value)
sympy.codegen.ast.Type._latex(self,printer)
sympy.codegen.ast.Type._sympystr(self,printer,*args,**kwargs)
sympy.codegen.ast.Type.cast_check(self,value,rtol=None,atol=0,precision_targets=None)
sympy.codegen.ast.Type.from_expr(cls,expr)
sympy.codegen.ast.UnsignedIntType(_SizedIntType)
sympy.codegen.ast.UnsignedIntType.max(self)
sympy.codegen.ast.UnsignedIntType.min(self)
sympy.codegen.ast.Variable(Node)
sympy.codegen.ast.Variable._relation(self,rhs,op)
sympy.codegen.ast.Variable.as_Declaration(self,**kwargs)
sympy.codegen.ast.Variable.deduced(cls,symbol,value=None,attrs=Tuple(),cast_check=True)
sympy.codegen.ast.While(Token)
sympy.codegen.ast.While._construct_body(cls,itr)
sympy.codegen.ast._SizedIntType(IntBaseType)
sympy.codegen.ast._SizedIntType._check(self,value)
sympy.codegen.ast._mk_Tuple(args)
sympy.codegen.ast.aug_assign(lhs,op,rhs)
sympy.codegen.aug_assign(lhs,op,rhs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/pynodes.py----------------------------------------
sympy.codegen.pynodes.List(AbstractList)
sympy.codegen.pynodes.NumExprEvaluate(Token)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/cutils.py----------------------------------------
A:sympy.codegen.cutils.printer->Printer(settings or {})
A:sympy.codegen.cutils.code_str->Printer(settings or {}).doprint(content)
A:sympy.codegen.cutils.includes->'\n'.join(['#include <%s>' % h for h in printer.headers])
sympy.codegen.cutils.render_as_source_file(content,Printer=C99CodePrinter,settings=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/cxxnodes.py----------------------------------------
A:sympy.codegen.cxxnodes.constexpr->Attribute('constexpr')
sympy.codegen.cxxnodes.using(Token)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/scipy_nodes.py----------------------------------------
A:sympy.codegen.scipy_nodes.candidate->_powm1(x.simplify(**kwargs), y.simplify(**kwargs))
sympy.codegen.scipy_nodes._cosm1(x,*,evaluate=True)
sympy.codegen.scipy_nodes._powm1(x,y,*,evaluate=True)
sympy.codegen.scipy_nodes.cosm1(Function)
sympy.codegen.scipy_nodes.cosm1._eval_evalf(self,*args,**kwargs)
sympy.codegen.scipy_nodes.cosm1._eval_rewrite_as_cos(self,x,**kwargs)
sympy.codegen.scipy_nodes.cosm1._eval_simplify(self,**kwargs)
sympy.codegen.scipy_nodes.cosm1.fdiff(self,argindex=1)
sympy.codegen.scipy_nodes.powm1(Function)
sympy.codegen.scipy_nodes.powm1._eval_evalf(self,*args,**kwargs)
sympy.codegen.scipy_nodes.powm1._eval_rewrite_as_Pow(self,x,y,**kwargs)
sympy.codegen.scipy_nodes.powm1._eval_simplify(self,**kwargs)
sympy.codegen.scipy_nodes.powm1.fdiff(self,argindex=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/algorithms.py----------------------------------------
A:sympy.codegen.algorithms.delta->Symbol('d_' + wrt.name)
A:sympy.codegen.algorithms.prnt->Print([wrt, delta], '{}=%12.5g {}=%12.5g\\n'.format(wrt.name, name_d))
A:sympy.codegen.algorithms.req->And(req, Lt(counter, itermax))
A:sympy.codegen.algorithms.v_counter->sympy.codegen.ast.Variable.deduced(counter, 0)
A:sympy.codegen.algorithms.whl->While(req, CodeBlock(*whl_bdy))
A:sympy.codegen.algorithms.algo->newtons_method(expr, wrt, delta=delta, **kwargs).xreplace(pointer_subs)
A:sympy.codegen.algorithms.not_in_params->expr.free_symbols.difference({_symbol_of(p) for p in params})
A:sympy.codegen.algorithms.declars->tuple((Variable(p, real) for p in params))
A:sympy.codegen.algorithms.body->CodeBlock(algo, Return(wrt))
sympy.codegen.algorithms._symbol_of(arg)
sympy.codegen.algorithms.newtons_method(expr,wrt,atol=1e-12,delta=None,debug=False,itermax=None,counter=None)
sympy.codegen.algorithms.newtons_method_function(expr,wrt,params=None,func_name='newton',attrs=Tuple(),*,delta=None,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/cnodes.py----------------------------------------
A:sympy.codegen.cnodes.void->Type('void')
A:sympy.codegen.cnodes.restrict->Attribute('restrict')
A:sympy.codegen.cnodes.volatile->Attribute('volatile')
A:sympy.codegen.cnodes.static->Attribute('static')
sympy.codegen.cnodes.CommaOperator(cls,*args)
sympy.codegen.cnodes.Label(Node)
sympy.codegen.cnodes.Label._construct_body(cls,itr)
sympy.codegen.cnodes.PostDecrement(Basic)
sympy.codegen.cnodes.PostIncrement(Basic)
sympy.codegen.cnodes.PreDecrement(Basic)
sympy.codegen.cnodes.PreIncrement(Basic)
sympy.codegen.cnodes.alignof(arg)
sympy.codegen.cnodes.goto(Token)
sympy.codegen.cnodes.sizeof(arg)
sympy.codegen.cnodes.struct(Node)
sympy.codegen.cnodes.struct._construct_declarations(cls,args)
sympy.codegen.cnodes.union(struct)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/futils.py----------------------------------------
A:sympy.codegen.futils.printer->FCodePrinter(printer_settings)
A:sympy.codegen.futils.dummy->Dummy()
A:sympy.codegen.futils.mod->Module(name, chain(declarations, [dummy]), definitions)
A:sympy.codegen.futils.fstr->FCodePrinter(printer_settings).doprint(mod)
sympy.codegen.futils.render_as_module(definitions,name,declarations=(),printer_settings=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/approximations.py----------------------------------------
A:sympy.codegen.approximations.intrvl->Interval(*self.bounds[fs])
A:sympy.codegen.approximations.largest_abs_guarantee->max(largest_abs_guarantee, min(abs(lo), abs(hi)))
A:sympy.codegen.approximations.self._prec->math.ceil(-math.log10(self.reltol))
A:sympy.codegen.approximations.fseri->fexpr.series(symb, x0=x0, n=n).removeO()
A:sympy.codegen.approximations.val->fexpr.series(symb, x0=x0, n=n).removeO().xreplace({symb: x})
A:sympy.codegen.approximations.ref->fexpr.xreplace({symb: x})
sympy.codegen.approximations.SeriesApprox(self,bounds,reltol,max_order=4,n_point_checks=4,**kwargs)
sympy.codegen.approximations.SeriesApprox.query(self,expr)
sympy.codegen.approximations.SeriesApprox.value(self,fexpr)
sympy.codegen.approximations.SumApprox(self,bounds,reltol,**kwargs)
sympy.codegen.approximations.SumApprox.query(self,expr)
sympy.codegen.approximations.SumApprox.value(self,add)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/pyutils.py----------------------------------------
A:sympy.codegen.pyutils.printer->PythonCodePrinter({'standard': standard})
A:sympy.codegen.pyutils.pystr->PythonCodePrinter({'standard': standard}).doprint(content)
A:sympy.codegen.pyutils.module_imports_str->'\n'.join(['from %s import %s' % (k, ', '.join(v)) for (k, v) in printer.module_imports.items()])
sympy.codegen.pyutils.render_as_module(content,standard='python3')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/cfunctions.py----------------------------------------
A:sympy.codegen.cfunctions.exp_arg->sympy.functions.elementary.exponential.exp.eval(arg)
A:sympy.codegen.cfunctions._Two->S(2)
A:sympy.codegen.cfunctions.result->sympy.functions.elementary.exponential.log.eval(arg, base=_Ten)
A:sympy.codegen.cfunctions._Ten->S(10)
sympy.codegen.cfunctions.Cbrt(Function)
sympy.codegen.cfunctions.Cbrt._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.Cbrt._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.codegen.cfunctions.Cbrt.fdiff(self,argindex=1)
sympy.codegen.cfunctions.Sqrt(Function)
sympy.codegen.cfunctions.Sqrt._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.Sqrt._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.codegen.cfunctions.Sqrt.fdiff(self,argindex=1)
sympy.codegen.cfunctions._Cbrt(x)
sympy.codegen.cfunctions._Sqrt(x)
sympy.codegen.cfunctions._exp2(x)
sympy.codegen.cfunctions._expm1(x)
sympy.codegen.cfunctions._fma(x,y,z)
sympy.codegen.cfunctions._hypot(x,y)
sympy.codegen.cfunctions._log10(x)
sympy.codegen.cfunctions._log1p(x)
sympy.codegen.cfunctions._log2(x)
sympy.codegen.cfunctions.exp2(Function)
sympy.codegen.cfunctions.exp2._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.exp2._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.codegen.cfunctions.exp2.eval(cls,arg)
sympy.codegen.cfunctions.exp2.fdiff(self,argindex=1)
sympy.codegen.cfunctions.expm1(Function)
sympy.codegen.cfunctions.expm1._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.expm1._eval_is_finite(self)
sympy.codegen.cfunctions.expm1._eval_is_real(self)
sympy.codegen.cfunctions.expm1._eval_rewrite_as_exp(self,arg,**kwargs)
sympy.codegen.cfunctions.expm1.eval(cls,arg)
sympy.codegen.cfunctions.expm1.fdiff(self,argindex=1)
sympy.codegen.cfunctions.fma(Function)
sympy.codegen.cfunctions.fma._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.fma._eval_rewrite_as_tractable(self,arg,limitvar=None,**kwargs)
sympy.codegen.cfunctions.fma.fdiff(self,argindex=1)
sympy.codegen.cfunctions.hypot(Function)
sympy.codegen.cfunctions.hypot._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.hypot._eval_rewrite_as_Pow(self,arg,**kwargs)
sympy.codegen.cfunctions.hypot.fdiff(self,argindex=1)
sympy.codegen.cfunctions.log10(Function)
sympy.codegen.cfunctions.log10._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.log10._eval_rewrite_as_log(self,arg,**kwargs)
sympy.codegen.cfunctions.log10.eval(cls,arg)
sympy.codegen.cfunctions.log10.fdiff(self,argindex=1)
sympy.codegen.cfunctions.log1p(Function)
sympy.codegen.cfunctions.log1p._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.log1p._eval_is_finite(self)
sympy.codegen.cfunctions.log1p._eval_is_nonnegative(self)
sympy.codegen.cfunctions.log1p._eval_is_positive(self)
sympy.codegen.cfunctions.log1p._eval_is_real(self)
sympy.codegen.cfunctions.log1p._eval_is_zero(self)
sympy.codegen.cfunctions.log1p._eval_rewrite_as_log(self,arg,**kwargs)
sympy.codegen.cfunctions.log1p.eval(cls,arg)
sympy.codegen.cfunctions.log1p.fdiff(self,argindex=1)
sympy.codegen.cfunctions.log2(Function)
sympy.codegen.cfunctions.log2._eval_evalf(self,*args,**kwargs)
sympy.codegen.cfunctions.log2._eval_expand_func(self,**hints)
sympy.codegen.cfunctions.log2._eval_rewrite_as_log(self,arg,**kwargs)
sympy.codegen.cfunctions.log2.eval(cls,arg)
sympy.codegen.cfunctions.log2.fdiff(self,argindex=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_numpy_nodes.py----------------------------------------
A:sympy.codegen.tests.test_numpy_nodes.(x, y, z)->symbols('x y z')
A:sympy.codegen.tests.test_numpy_nodes.lae_xy->logaddexp(x, y)
A:sympy.codegen.tests.test_numpy_nodes.ref_xy->log(exp(x) + exp(y))
A:sympy.codegen.tests.test_numpy_nodes.logThirdE->log(one_third_e)
A:sympy.codegen.tests.test_numpy_nodes.logTwoThirdsE->log(two_thirds_e)
A:sympy.codegen.tests.test_numpy_nodes.lae_sum_to_e->logaddexp(logThirdE, logTwoThirdsE)
A:sympy.codegen.tests.test_numpy_nodes.was->logaddexp2(x, y)
A:sympy.codegen.tests.test_numpy_nodes.lae2_xy->logaddexp2(x, y)
A:sympy.codegen.tests.test_numpy_nodes.lbTwoThirds->lb(two_thirds)
A:sympy.codegen.tests.test_numpy_nodes.lbFourThirds->lb(four_thirds)
A:sympy.codegen.tests.test_numpy_nodes.lae2_sum_to_2->logaddexp2(lbTwoThirds, lbFourThirds)
sympy.codegen.tests.test_numpy_nodes.test_logaddexp()
sympy.codegen.tests.test_numpy_nodes.test_logaddexp2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_pynodes.py----------------------------------------
A:sympy.codegen.tests.test_pynodes.l->List(x ** 2, y ** 3, z ** 4)
A:sympy.codegen.tests.test_pynodes.(x, y, z)->symbols('x y z')
A:sympy.codegen.tests.test_pynodes.m->List(x ** 2, y ** 3, z ** 4).replace(lambda arg: arg.is_Pow and arg.exp > 2, lambda p: p.base - p.exp)
sympy.codegen.tests.test_pynodes.test_List()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_algorithms.py----------------------------------------
A:sympy.codegen.tests.test_algorithms.cython->import_module('cython')
A:sympy.codegen.tests.test_algorithms.wurlitzer->import_module('wurlitzer')
A:sympy.codegen.tests.test_algorithms.(x, dx, atol)->sympy.symbols('x dx atol')
A:sympy.codegen.tests.test_algorithms.algo->newtons_method(expr, x, atol, dx)
A:sympy.codegen.tests.test_algorithms.x->sympy.Symbol('x', real=True)
A:sympy.codegen.tests.test_algorithms.func->newtons_method_function(expr, x, args, debug=use_wurlitzer)
A:sympy.codegen.tests.test_algorithms.(mod, info)->compile_link_import_strings([('newton_par.c', '#include <math.h>\n#include <stdio.h>\n' + ccode(func)), ('_newton_par.pyx', '#cython: language_level={}\n'.format('3') + 'cdef extern double newton(double, double, double, double)\ndef py_newton(x, A=1, k=1, p=1):\n    return newton(x, A, k, p)\n')], compile_kwargs=compile_kw, build_dir=folder)
A:sympy.codegen.tests.test_algorithms.f_mod->f_module([func], 'mod_newton')
A:sympy.codegen.tests.test_algorithms.py_mod->py_module(func)
A:sympy.codegen.tests.test_algorithms.res->eval('newton(0.5)', namespace)
A:sympy.codegen.tests.test_algorithms.args(x, A, k, p)->sympy.symbols('x A k p')
A:sympy.codegen.tests.test_algorithms.result->mod.py_newton(0.5)
sympy.codegen.tests.test_algorithms.test_newtons_method()
sympy.codegen.tests.test_algorithms.test_newtons_method_function__ccode()
sympy.codegen.tests.test_algorithms.test_newtons_method_function__ccode_parameters()
sympy.codegen.tests.test_algorithms.test_newtons_method_function__fcode()
sympy.codegen.tests.test_algorithms.test_newtons_method_function__pycode()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_fnodes.py----------------------------------------
A:sympy.codegen.tests.test_fnodes.cython->import_module('cython')
A:sympy.codegen.tests.test_fnodes.np->import_module('numpy')
A:sympy.codegen.tests.test_fnodes.x->Symbol('x')
A:sympy.codegen.tests.test_fnodes.sx->size(x)
A:sympy.codegen.tests.test_fnodes.a->Symbol('a', real=True)
A:sympy.codegen.tests.test_fnodes.arr->array(a, dim=[s], intent='in')
A:sympy.codegen.tests.test_fnodes.fd->FunctionDefinition(real, 'rms', [arr, s], body, attrs=[bind_C('rms')])
A:sympy.codegen.tests.test_fnodes.((stdout, stderr), info)->compile_run_strings([('a.f90', fcode(mod, standard=90)), ('b.f90', fcode(prog, standard=90))], clean=True)
A:sympy.codegen.tests.test_fnodes.(a, i)->symbols('a i', integer=True)
A:sympy.codegen.tests.test_fnodes.idl->ImpliedDoLoop(i ** 3, i, -3, 3, 2)
A:sympy.codegen.tests.test_fnodes.ac->ArrayConstructor([-28, idl, 28])
A:sympy.codegen.tests.test_fnodes.prog->Program('foo', [use(mod, only=[sub]), Declaration(v_x3), SubroutineCall(sub, [v_x3]), Print([sum_(v_x3), v_x3])])
A:sympy.codegen.tests.test_fnodes.fsrc->fcode(prog, standard=2003, source_format='free')
A:sympy.codegen.tests.test_fnodes.vx->sympy.codegen.ast.Variable.deduced(x, 42)
A:sympy.codegen.tests.test_fnodes.decl->Declaration(vx)
A:sympy.codegen.tests.test_fnodes.prnt->Print([x, x + 1])
A:sympy.codegen.tests.test_fnodes.v_x->sympy.codegen.ast.Variable.deduced(x)
A:sympy.codegen.tests.test_fnodes.sq->FunctionDefinition(real, 'sqr', [v_x], [Return(x ** 2)])
A:sympy.codegen.tests.test_fnodes.mod_sq->Module('mod_sq', [], [sq])
A:sympy.codegen.tests.test_fnodes.sq_call->FunctionCall('sqr', [42.0])
A:sympy.codegen.tests.test_fnodes.prg_sq->Program('foobar', [use('mod_sq', only=['sqr']), Print(['"Square of 42 = "', sq_call])])
A:sympy.codegen.tests.test_fnodes.r->Symbol('r', real=True)
A:sympy.codegen.tests.test_fnodes.i->Symbol('i', integer=True)
A:sympy.codegen.tests.test_fnodes.v_r->sympy.codegen.ast.Variable.deduced(r, attrs=(dimension(assumed_extent), intent_out))
A:sympy.codegen.tests.test_fnodes.v_i->sympy.codegen.ast.Variable.deduced(i)
A:sympy.codegen.tests.test_fnodes.v_n->Variable('n', integer)
A:sympy.codegen.tests.test_fnodes.do_loop->Do([Assignment(Element(r, [i]), literal_dp(1) / i ** 2)], i, 1, v_n)
A:sympy.codegen.tests.test_fnodes.sub->Subroutine('f', [v_r], [Declaration(v_n), Declaration(v_i), Assignment(v_n, size(r)), do_loop])
A:sympy.codegen.tests.test_fnodes.v_x3->sympy.codegen.ast.Variable.deduced(x, attrs=[dimension(3)])
A:sympy.codegen.tests.test_fnodes.mod->Module('mymod', definitions=[sub])
A:sympy.codegen.tests.test_fnodes.s->Symbol('s', integer=True)
A:sympy.codegen.tests.test_fnodes.f_mod->render_as_module([fd], 'mod_rms')
A:sympy.codegen.tests.test_fnodes.(mod, info)->compile_link_import_strings([('rms.f90', f_mod), ('_rms.pyx', '#cython: language_level={}\n'.format('3') + 'cdef extern double rms(double*, int*)\ndef py_rms(double[::1] x):\n    cdef int s = x.size\n    return rms(&x[0], &s)\n')], build_dir=folder)
sympy.codegen.tests.test_fnodes.test_ImpliedDoLoop()
sympy.codegen.tests.test_fnodes.test_Module()
sympy.codegen.tests.test_fnodes.test_Program()
sympy.codegen.tests.test_fnodes.test_Subroutine()
sympy.codegen.tests.test_fnodes.test_bind_C()
sympy.codegen.tests.test_fnodes.test_cmplx()
sympy.codegen.tests.test_fnodes.test_dsign()
sympy.codegen.tests.test_fnodes.test_isign()
sympy.codegen.tests.test_fnodes.test_kind()
sympy.codegen.tests.test_fnodes.test_literal_dp()
sympy.codegen.tests.test_fnodes.test_size()
sympy.codegen.tests.test_fnodes.test_size_assumed_shape()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_approximations.py----------------------------------------
A:sympy.codegen.tests.test_approximations.x->symbols('x')
A:sympy.codegen.tests.test_approximations.sum_approx->SumApprox(bounds={x: (-1e-20, 1e-20)}, reltol=1e-16)
A:sympy.codegen.tests.test_approximations.apx1->optimize(expr1, [sum_approx])
A:sympy.codegen.tests.test_approximations.(x, y, z)->symbols('x y z')
A:sympy.codegen.tests.test_approximations.sum_approx_m2->SumApprox(bounds=bnds1, reltol=0.01)
A:sympy.codegen.tests.test_approximations.sum_approx_m5->SumApprox(bounds=bnds1, reltol=1e-05)
A:sympy.codegen.tests.test_approximations.sum_approx_m11->SumApprox(bounds=bnds1, reltol=1e-11)
A:sympy.codegen.tests.test_approximations.(x, z)->symbols('x z')
A:sympy.codegen.tests.test_approximations.series_approx_50->SeriesApprox(bounds=bnds1, reltol=0.5)
A:sympy.codegen.tests.test_approximations.series_approx_10->SeriesApprox(bounds=bnds1, reltol=0.1)
A:sympy.codegen.tests.test_approximations.series_approx_05->SeriesApprox(bounds=bnds1, reltol=0.05)
A:sympy.codegen.tests.test_approximations.f0->math.exp(c)
A:sympy.codegen.tests.test_approximations.res_50->optimize(expr1, [series_approx_50])
A:sympy.codegen.tests.test_approximations.res_10->optimize(expr1, [series_approx_10])
A:sympy.codegen.tests.test_approximations.res_05->optimize(expr1, [series_approx_05])
A:sympy.codegen.tests.test_approximations.max_ord3->SeriesApprox(bounds=bnds1, reltol=0.05, max_order=3)
sympy.codegen.tests.test_approximations.test_SeriesApprox_trivial()
sympy.codegen.tests.test_approximations.test_SumApprox_monotone_terms()
sympy.codegen.tests.test_approximations.test_SumApprox_trivial()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_cxxnodes.py----------------------------------------
A:sympy.codegen.tests.test_cxxnodes.x->Symbol('x')
A:sympy.codegen.tests.test_cxxnodes.v->Type('std::vector')
A:sympy.codegen.tests.test_cxxnodes.u1->using(v)
A:sympy.codegen.tests.test_cxxnodes.u2->using(v, 'vec')
sympy.codegen.tests.test_cxxnodes.test_using()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_ast.py----------------------------------------
A:sympy.codegen.tests.test_ast.(x, y, z, t, x0, x1, x2, a, b)->symbols('x, y, z, t, x0, x1, x2, a, b')
A:sympy.codegen.tests.test_ast.n->Variable('n', integer)
A:sympy.codegen.tests.test_ast.A->MatrixSymbol('A', 3, 1)
A:sympy.codegen.tests.test_ast.mat->Matrix([1, 2, 3])
A:sympy.codegen.tests.test_ast.B->IndexedBase('B')
A:sympy.codegen.tests.test_ast.i->symbols('i', integer=True)
A:sympy.codegen.tests.test_ast.A22->MatrixSymbol('A22', 2, 2)
A:sympy.codegen.tests.test_ast.B22->MatrixSymbol('B22', 2, 2)
A:sympy.codegen.tests.test_ast.a->cls(lhs, rhs)
A:sympy.codegen.tests.test_ast.b->cls(x, y)
A:sympy.codegen.tests.test_ast.c->Comment('foobar')
A:sympy.codegen.tests.test_ast.c1->CodeBlock(Assignment(y, 1), Assignment(x, sin(y)), Assignment(z, sin(y)), Assignment(t, x * z))
A:sympy.codegen.tests.test_ast.c2->CodeBlock(Assignment(x0, sin(y) + 1), Assignment(x1, 2 * sin(y)), Assignment(z, x * y))
A:sympy.codegen.tests.test_ast.f->For(n, (1, 2, 3, 4, 5), (Assignment(A[n, 0], x + n),))
A:sympy.codegen.tests.test_ast.foo->Foo()
A:sympy.codegen.tests.test_ast.st->String('foobar')
A:sympy.codegen.tests.test_ast.si->Signifier('foobar')
A:sympy.codegen.tests.test_ast.s->String('foo')
A:sympy.codegen.tests.test_ast.t->Type('MyType')
A:sympy.codegen.tests.test_ast.t1->Type('t1')
A:sympy.codegen.tests.test_ast.t2->Type('t2')
A:sympy.codegen.tests.test_ast.t1b->Type('t1')
A:sympy.codegen.tests.test_ast.u->symbols('u', real=True)
A:sympy.codegen.tests.test_ast.noexcept->Attribute('noexcept')
A:sympy.codegen.tests.test_ast.alignas16->Attribute('alignas', [16])
A:sympy.codegen.tests.test_ast.alignas32->Attribute('alignas', [32])
A:sympy.codegen.tests.test_ast.v->Variable(x, type=real)
A:sympy.codegen.tests.test_ast.w->Variable(y, f32, attrs={value_const})
A:sympy.codegen.tests.test_ast.v_n->Variable(n, type=Type.from_expr(n))
A:sympy.codegen.tests.test_ast.v_i->Variable(i, type=Type.from_expr(n))
A:sympy.codegen.tests.test_ast.a_i->sympy.codegen.ast.Variable.deduced(i)
A:sympy.codegen.tests.test_ast.v_n2->sympy.codegen.ast.Variable.deduced(n, value=3.5, cast_check=False)
A:sympy.codegen.tests.test_ast.v_n3->sympy.codegen.ast.Variable.deduced(n)
A:sympy.codegen.tests.test_ast.p->Pointer(x)
A:sympy.codegen.tests.test_ast.pu->Pointer(u, type=Type.from_expr(u), attrs={value_const, pointer_const})
A:sympy.codegen.tests.test_ast.vu->Variable(u, type=Type.from_expr(u))
A:sympy.codegen.tests.test_ast.vn->Variable(n, type=integer)
A:sympy.codegen.tests.test_ast.vuc->Variable(u, Type.from_expr(u), value=3.0, attrs={value_const})
A:sympy.codegen.tests.test_ast.decl->Declaration(vuc)
A:sympy.codegen.tests.test_ast.vy->Variable(y, type=integer, value=3)
A:sympy.codegen.tests.test_ast.decl2->Declaration(vy)
A:sympy.codegen.tests.test_ast.vi->Variable(i, type=Type.from_expr(i), value=3.0)
A:sympy.codegen.tests.test_ast.decl3->Declaration(vi)
A:sympy.codegen.tests.test_ast.dcm21->Float('0.123456789012345670499')
A:sympy.codegen.tests.test_ast.xpp->AddAugmentedAssignment(x, 1)
A:sympy.codegen.tests.test_ast.whl1->While(x < 2, [xpp])
A:sympy.codegen.tests.test_ast.cblk->CodeBlock(assign, incr)
A:sympy.codegen.tests.test_ast.whl2->While(x < 2, cblk)
A:sympy.codegen.tests.test_ast.assign->Assignment(x, y)
A:sympy.codegen.tests.test_ast.incr->AddAugmentedAssignment(x, 1)
A:sympy.codegen.tests.test_ast.scp->Scope([assign, incr])
A:sympy.codegen.tests.test_ast.ps->Print([n, x], fmt)
A:sympy.codegen.tests.test_ast.ps2->Print([n, x])
A:sympy.codegen.tests.test_ast.vx->Variable(x, type=real)
A:sympy.codegen.tests.test_ast.fp1->FunctionPrototype(real, 'power', [vx, vn])
A:sympy.codegen.tests.test_ast.fd1->FunctionDefinition(real, 'power', [vx, vn], body)
A:sympy.codegen.tests.test_ast.fp2->sympy.codegen.ast.FunctionPrototype.from_FunctionDefinition(fd1)
A:sympy.codegen.tests.test_ast.fd2->sympy.codegen.ast.FunctionDefinition.from_FunctionPrototype(fp1, body)
A:sympy.codegen.tests.test_ast.rs->Return(x)
A:sympy.codegen.tests.test_ast.fc->FunctionCall('power', (x, 3))
A:sympy.codegen.tests.test_ast.fc2->FunctionCall('fma', [2, 3, 4])
A:sympy.codegen.tests.test_ast.x->Variable('x', real)
A:sympy.codegen.tests.test_ast.y->Variable('y', real)
A:sympy.codegen.tests.test_ast.pwer->FunctionDefinition(real, 'pwer', [x, n], [pow(x.symbol, n.symbol)])
A:sympy.codegen.tests.test_ast.pcall->FunctionCall('pwer', [y, 3])
A:sympy.codegen.tests.test_ast.tree1->CodeBlock(pwer, pcall)
A:sympy.codegen.tests.test_ast.tree2->CodeBlock(pwer, pcall).replace(pname, String('power'))
sympy.codegen.tests.test_ast.test_Assignment()
sympy.codegen.tests.test_ast.test_Assignment_printing()
sympy.codegen.tests.test_ast.test_Attribute()
sympy.codegen.tests.test_ast.test_AugAssign()
sympy.codegen.tests.test_ast.test_CodeBlock()
sympy.codegen.tests.test_ast.test_CodeBlock_cse()
sympy.codegen.tests.test_ast.test_CodeBlock_cse__issue_14118()
sympy.codegen.tests.test_ast.test_CodeBlock_free_symbols()
sympy.codegen.tests.test_ast.test_CodeBlock_topological_sort()
sympy.codegen.tests.test_ast.test_Comment()
sympy.codegen.tests.test_ast.test_Declaration()
sympy.codegen.tests.test_ast.test_FloatType()
sympy.codegen.tests.test_ast.test_For()
sympy.codegen.tests.test_ast.test_FunctionCall()
sympy.codegen.tests.test_ast.test_FunctionPrototype_and_FunctionDefinition()
sympy.codegen.tests.test_ast.test_IntBaseType()
sympy.codegen.tests.test_ast.test_Node()
sympy.codegen.tests.test_ast.test_Pointer()
sympy.codegen.tests.test_ast.test_Print()
sympy.codegen.tests.test_ast.test_Return()
sympy.codegen.tests.test_ast.test_Scope()
sympy.codegen.tests.test_ast.test_String()
sympy.codegen.tests.test_ast.test_Type()
sympy.codegen.tests.test_ast.test_Type__cast_check__complex_floating_point()
sympy.codegen.tests.test_ast.test_Type__cast_check__floating_point()
sympy.codegen.tests.test_ast.test_Type__cast_check__integers()
sympy.codegen.tests.test_ast.test_Type__from_expr()
sympy.codegen.tests.test_ast.test_Variable()
sympy.codegen.tests.test_ast.test_While()
sympy.codegen.tests.test_ast.test_ast_replace()
sympy.codegen.tests.test_ast.test_none()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_abstract_nodes.py----------------------------------------
A:sympy.codegen.tests.test_abstract_nodes.l->List(x ** 2, y ** 3, z ** 4)
A:sympy.codegen.tests.test_abstract_nodes.(x, y, z)->symbols('x y z')
A:sympy.codegen.tests.test_abstract_nodes.m->List(x ** 2, y ** 3, z ** 4).replace(lambda arg: arg.is_Pow and arg.exp > 2, lambda p: p.base - p.exp)
sympy.codegen.tests.test_abstract_nodes.test_List()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_rewriting.py----------------------------------------
A:sympy.codegen.tests.test_rewriting.cython->import_module('cython')
A:sympy.codegen.tests.test_rewriting.numpy->import_module('numpy')
A:sympy.codegen.tests.test_rewriting.scipy->import_module('scipy')
A:sympy.codegen.tests.test_rewriting.x->Symbol('x')
A:sympy.codegen.tests.test_rewriting.opt1->optimize(expr1, [logaddexp2_opt])
A:sympy.codegen.tests.test_rewriting.opt2->optimize(expr2, optims_c99)
A:sympy.codegen.tests.test_rewriting.opt3->optimize(expr3, optims_c99)
A:sympy.codegen.tests.test_rewriting.opt4->optimize(expr4, optims_c99).simplify()
A:sympy.codegen.tests.test_rewriting.expr5->log(17)
A:sympy.codegen.tests.test_rewriting.opt5->optimize(expr5, optims_c99)
A:sympy.codegen.tests.test_rewriting.opt6->optimize(expr6, optims_c99)
A:sympy.codegen.tests.test_rewriting.expm1_opt_non_opportunistic->FuncMinusOneOptim(exp, expm1, opportunistic=False)
A:sympy.codegen.tests.test_rewriting.y->Symbol('y')
A:sympy.codegen.tests.test_rewriting.opt7->optimize(expr7, optims_c99)
A:sympy.codegen.tests.test_rewriting.opt8->optimize(expr8, optims_c99)
A:sympy.codegen.tests.test_rewriting.expr9->sin(expr8)
A:sympy.codegen.tests.test_rewriting.opt9->optimize(expr9, [expm1_opt])
A:sympy.codegen.tests.test_rewriting.tgt9a->sin(tgt8a)
A:sympy.codegen.tests.test_rewriting.tgt9b->sin(tgt8b)
A:sympy.codegen.tests.test_rewriting.(x, y)->map(Symbol, 'x y'.split())
A:sympy.codegen.tests.test_rewriting.cosm1_opt_non_opportunistic->FuncMinusOneOptim(cos, cosm1, opportunistic=False)
A:sympy.codegen.tests.test_rewriting.num_ref->expr.subs(val_subs).evalf()
A:sympy.codegen.tests.test_rewriting.f1->lambdify(list(val_subs.keys()), opt, **lambdify_kw or {})
A:sympy.codegen.tests.test_rewriting.args_float->tuple(map(float, val_subs.values()))
A:sympy.codegen.tests.test_rewriting.num_err1->abs(f1(*args_float) - approx_ref)
A:sympy.codegen.tests.test_rewriting.f2->lambdify(list(val_subs.keys()), expr, **lambdify_kw or {})
A:sympy.codegen.tests.test_rewriting.num_err2->abs(f2(*args_float) - approx_ref)
A:sympy.codegen.tests.test_rewriting.args(x, y)->map(Symbol, 'xy')
A:sympy.codegen.tests.test_rewriting.expr1->log(exp(x) + exp(y))
A:sympy.codegen.tests.test_rewriting.expr2->log(3 * x + 3)
A:sympy.codegen.tests.test_rewriting.expr3->log(2 * x + 1)
A:sympy.codegen.tests.test_rewriting.expr4->log(x + 3)
A:sympy.codegen.tests.test_rewriting.expr7->log(3 * x + 3)
A:sympy.codegen.tests.test_rewriting.expr8->log(2 * x + 3)
A:sympy.codegen.tests.test_rewriting.i->Symbol('i', integer=True)
A:sympy.codegen.tests.test_rewriting.n->Symbol('n', integer=True)
A:sympy.codegen.tests.test_rewriting.A->MatrixSymbol('A', n, n)
A:sympy.codegen.tests.test_rewriting.ref->unchanged.subs(x, xval).n(19)
A:sympy.codegen.tests.test_rewriting.rewritten->optimize(2 * exp(x) - about_two, [expm1_opt])
A:sympy.codegen.tests.test_rewriting.(mod, info)->compile_link_import_strings([('func.c', func_c), ('_func.pyx', func_pyx)], build_dir=folder, compile_kwargs={'std': 'c99'})
A:sympy.codegen.tests.test_rewriting.err_rewritten->abs(mod.py_rewritten(1e-11) - ref)
A:sympy.codegen.tests.test_rewriting.err_unchanged->abs(mod.py_unchanged(1e-11) - ref)
sympy.codegen.tests.test_rewriting._check_num_lambdify(expr,opt,val_subs,approx_ref,lambdify_kw=None,poorness=10000000000.0)
sympy.codegen.tests.test_rewriting.test_compiled_ccode_with_rewriting()
sympy.codegen.tests.test_rewriting.test_cosm1_apart()
sympy.codegen.tests.test_rewriting.test_cosm1_opt()
sympy.codegen.tests.test_rewriting.test_cosm1_two_cos_terms()
sympy.codegen.tests.test_rewriting.test_create_expand_pow_optimization()
sympy.codegen.tests.test_rewriting.test_exp2_opt()
sympy.codegen.tests.test_rewriting.test_expm1_cosm1_mixed()
sympy.codegen.tests.test_rewriting.test_expm1_opt()
sympy.codegen.tests.test_rewriting.test_expm1_two_exp_terms()
sympy.codegen.tests.test_rewriting.test_log1p_opt()
sympy.codegen.tests.test_rewriting.test_log2_opt()
sympy.codegen.tests.test_rewriting.test_logaddexp2_opt()
sympy.codegen.tests.test_rewriting.test_logaddexp_opt()
sympy.codegen.tests.test_rewriting.test_matsolve()
sympy.codegen.tests.test_rewriting.test_optims_c99()
sympy.codegen.tests.test_rewriting.test_optims_numpy()
sympy.codegen.tests.test_rewriting.test_optims_numpy_TODO()
sympy.codegen.tests.test_rewriting.test_powm1()
sympy.codegen.tests.test_rewriting.test_sinc_opts()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_cnodes.py----------------------------------------
A:sympy.codegen.tests.test_cnodes.(x, y)->symbols('x y')
A:sympy.codegen.tests.test_cnodes.ax->alignof(x)
A:sympy.codegen.tests.test_cnodes.expr->CommaOperator(PreIncrement(x), 2 * x)
A:sympy.codegen.tests.test_cnodes.g->goto(s)
A:sympy.codegen.tests.test_cnodes.l1->Label(s)
A:sympy.codegen.tests.test_cnodes.l2->Label(s, body)
A:sympy.codegen.tests.test_cnodes.p->PostIncrement(x)
A:sympy.codegen.tests.test_cnodes.sz->sizeof(typename)
A:sympy.codegen.tests.test_cnodes.s->struct('vec2', [vx, vy])
A:sympy.codegen.tests.test_cnodes.u->union('dualuse', [vx, vy])
sympy.codegen.tests.test_cnodes.test_CommaOperator()
sympy.codegen.tests.test_cnodes.test_PostDecrement()
sympy.codegen.tests.test_cnodes.test_PostIncrement()
sympy.codegen.tests.test_cnodes.test_PreDecrement()
sympy.codegen.tests.test_cnodes.test_PreIncrement()
sympy.codegen.tests.test_cnodes.test_alignof()
sympy.codegen.tests.test_cnodes.test_goto_Label()
sympy.codegen.tests.test_cnodes.test_sizeof()
sympy.codegen.tests.test_cnodes.test_struct()
sympy.codegen.tests.test_cnodes.test_union()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_applications.py----------------------------------------
A:sympy.codegen.tests.test_applications.cython->import_module('cython')
A:sympy.codegen.tests.test_applications.np->import_module('numpy')
A:sympy.codegen.tests.test_applications.i->Variable('i', integer)
A:sympy.codegen.tests.test_applications.whl->While(i < n, [Assignment(out[i], inp[i]), PreIncrement(i)])
A:sympy.codegen.tests.test_applications.body->CodeBlock(i.as_Declaration(value=0), whl)
A:sympy.codegen.tests.test_applications.code_str->render_as_source_file(funcdef, settings={'contract': False})
A:sympy.codegen.tests.test_applications.declar->ccode(FunctionPrototype.from_FunctionDefinition(funcdef))
A:sympy.codegen.tests.test_applications.(mod, info)->_render_compile_import(_mk_func1(), build_dir=folder)
A:sympy.codegen.tests.test_applications.inp->import_module('numpy').arange(10.0)
A:sympy.codegen.tests.test_applications.out->import_module('numpy').empty_like(inp)
sympy.codegen.tests.test_applications._mk_func1()
sympy.codegen.tests.test_applications._render_compile_import(funcdef,build_dir)
sympy.codegen.tests.test_applications.test_copying_function()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_pyutils.py----------------------------------------
A:sympy.codegen.tests.test_pyutils.ast->Print('x y'.split(), 'coordinate: %12.5g %12.5g')
sympy.codegen.tests.test_pyutils.test_standard()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_cfunctions.py----------------------------------------
A:sympy.codegen.tests.test_cfunctions.x->Symbol('x')
A:sympy.codegen.tests.test_cfunctions.d->S(10)
A:sympy.codegen.tests.test_cfunctions.(x, y, z)->symbols('x y z')
A:sympy.codegen.tests.test_cfunctions.expr->fma(17 * x, 42 * y, 101 * z)
A:sympy.codegen.tests.test_cfunctions.(x, y)->symbols('x y')
sympy.codegen.tests.test_cfunctions.test_Cbrt()
sympy.codegen.tests.test_cfunctions.test_Sqrt()
sympy.codegen.tests.test_cfunctions.test_exp2()
sympy.codegen.tests.test_cfunctions.test_expm1()
sympy.codegen.tests.test_cfunctions.test_fma()
sympy.codegen.tests.test_cfunctions.test_hypot()
sympy.codegen.tests.test_cfunctions.test_log10()
sympy.codegen.tests.test_cfunctions.test_log1p()
sympy.codegen.tests.test_cfunctions.test_log2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/codegen/tests/test_scipy_nodes.py----------------------------------------
A:sympy.codegen.tests.test_scipy_nodes.(x, y, z)->symbols('x y z')
A:sympy.codegen.tests.test_scipy_nodes.cm1_xy->cosm1(x * y)
A:sympy.codegen.tests.test_scipy_nodes.expr_minus2->cosm1(pi)
A:sympy.codegen.tests.test_scipy_nodes.der->pm1_e.diff(wrt, deriv_order)
A:sympy.codegen.tests.test_scipy_nodes.ref->ref_e.diff(wrt, deriv_order)
A:sympy.codegen.tests.test_scipy_nodes.delta->(der - ref).rewrite(Pow)
A:sympy.codegen.tests.test_scipy_nodes.eulers_constant_m1->powm1(x, 1 / log(x))
sympy.codegen.tests.test_scipy_nodes.test_cosm1()
sympy.codegen.tests.test_scipy_nodes.test_powm1()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/densearith.py----------------------------------------
A:sympy.polys.densearith.n->len(f)
A:sympy.polys.densearith.df->dmp_degree(f, u)
A:sympy.polys.densearith.dg->dmp_degree(g, u)
A:sympy.polys.densearith.k->abs(df - dg)
A:sympy.polys.densearith.fh->dup_rshift(dup_slice(f, n2, n, K), n2, K)
A:sympy.polys.densearith.gh->dup_rshift(dup_slice(g, n2, n, K), n2, K)
A:sympy.polys.densearith.mid->dup_sub(mid, dup_add(lo, hi, K), K)
A:sympy.polys.densearith.coeff->dmp_add(coeff, dmp_mul(f[j], g[i - j], v, K), v, K)
A:sympy.polys.densearith.jmin->max(0, i - df)
A:sympy.polys.densearith.jmax->min(i, df)
A:sympy.polys.densearith.c->K.exquo(lc_r, lc_g)
A:sympy.polys.densearith.elem->dmp_sqr(f[jmax + 1], v, K)
A:sympy.polys.densearith.g->dmp_mul(g, f, u, K)
A:sympy.polys.densearith.f->dmp_mul(f, g, u, K)
A:sympy.polys.densearith.lc_g->dup_LC(g, K)
A:sympy.polys.densearith.lc_r->dmp_LC(r, K)
A:sympy.polys.densearith.Q->dmp_mul_term(q, lc_g, 0, u, K)
A:sympy.polys.densearith.q->dmp_add_term(q, c, j, u, K)
A:sympy.polys.densearith.R->dmp_mul_term(r, lc_g, 0, u, K)
A:sympy.polys.densearith.G->dmp_mul_term(g, lc_r, j, u, K)
A:sympy.polys.densearith.r->dmp_sub(r, h, u, K)
A:sympy.polys.densearith.(q, r)->dmp_div(f, g, u, K)
A:sympy.polys.densearith.h->dmp_mul_term(g, c, j, u, K)
A:sympy.polys.densearith.(c, R)->dmp_ff_div(lc_r, lc_g, v, K)
A:sympy.polys.densearith.dr->dup_degree(r)
sympy.polys.densearith.dmp_abs(f,u,K)
sympy.polys.densearith.dmp_add(f,g,u,K)
sympy.polys.densearith.dmp_add_ground(f,c,u,K)
sympy.polys.densearith.dmp_add_mul(f,g,h,u,K)
sympy.polys.densearith.dmp_add_term(f,c,i,u,K)
sympy.polys.densearith.dmp_div(f,g,u,K)
sympy.polys.densearith.dmp_expand(polys,u,K)
sympy.polys.densearith.dmp_exquo(f,g,u,K)
sympy.polys.densearith.dmp_exquo_ground(f,c,u,K)
sympy.polys.densearith.dmp_ff_div(f,g,u,K)
sympy.polys.densearith.dmp_l1_norm(f,u,K)
sympy.polys.densearith.dmp_l2_norm_squared(f,u,K)
sympy.polys.densearith.dmp_max_norm(f,u,K)
sympy.polys.densearith.dmp_mul(f,g,u,K)
sympy.polys.densearith.dmp_mul_ground(f,c,u,K)
sympy.polys.densearith.dmp_mul_term(f,c,i,u,K)
sympy.polys.densearith.dmp_neg(f,u,K)
sympy.polys.densearith.dmp_pdiv(f,g,u,K)
sympy.polys.densearith.dmp_pexquo(f,g,u,K)
sympy.polys.densearith.dmp_pow(f,n,u,K)
sympy.polys.densearith.dmp_pquo(f,g,u,K)
sympy.polys.densearith.dmp_prem(f,g,u,K)
sympy.polys.densearith.dmp_quo(f,g,u,K)
sympy.polys.densearith.dmp_quo_ground(f,c,u,K)
sympy.polys.densearith.dmp_rem(f,g,u,K)
sympy.polys.densearith.dmp_rr_div(f,g,u,K)
sympy.polys.densearith.dmp_sqr(f,u,K)
sympy.polys.densearith.dmp_sub(f,g,u,K)
sympy.polys.densearith.dmp_sub_ground(f,c,u,K)
sympy.polys.densearith.dmp_sub_mul(f,g,h,u,K)
sympy.polys.densearith.dmp_sub_term(f,c,i,u,K)
sympy.polys.densearith.dup_abs(f,K)
sympy.polys.densearith.dup_add(f,g,K)
sympy.polys.densearith.dup_add_ground(f,c,K)
sympy.polys.densearith.dup_add_mul(f,g,h,K)
sympy.polys.densearith.dup_add_term(f,c,i,K)
sympy.polys.densearith.dup_div(f,g,K)
sympy.polys.densearith.dup_expand(polys,K)
sympy.polys.densearith.dup_exquo(f,g,K)
sympy.polys.densearith.dup_exquo_ground(f,c,K)
sympy.polys.densearith.dup_ff_div(f,g,K)
sympy.polys.densearith.dup_l1_norm(f,K)
sympy.polys.densearith.dup_l2_norm_squared(f,K)
sympy.polys.densearith.dup_lshift(f,n,K)
sympy.polys.densearith.dup_max_norm(f,K)
sympy.polys.densearith.dup_mul(f,g,K)
sympy.polys.densearith.dup_mul_ground(f,c,K)
sympy.polys.densearith.dup_mul_term(f,c,i,K)
sympy.polys.densearith.dup_neg(f,K)
sympy.polys.densearith.dup_pdiv(f,g,K)
sympy.polys.densearith.dup_pexquo(f,g,K)
sympy.polys.densearith.dup_pow(f,n,K)
sympy.polys.densearith.dup_pquo(f,g,K)
sympy.polys.densearith.dup_prem(f,g,K)
sympy.polys.densearith.dup_quo(f,g,K)
sympy.polys.densearith.dup_quo_ground(f,c,K)
sympy.polys.densearith.dup_rem(f,g,K)
sympy.polys.densearith.dup_rr_div(f,g,K)
sympy.polys.densearith.dup_rshift(f,n,K)
sympy.polys.densearith.dup_sqr(f,K)
sympy.polys.densearith.dup_sub(f,g,K)
sympy.polys.densearith.dup_sub_ground(f,c,K)
sympy.polys.densearith.dup_sub_mul(f,g,h,K)
sympy.polys.densearith.dup_sub_term(f,c,i,K)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/distributedmodules.py----------------------------------------
A:sympy.polys.distributedmodules.h->NF(sdm_spoly(f, g, O, K), S, O, K)
A:sympy.polys.distributedmodules.(dics, gens)->parallel_dict_from_expr(sympify(vec), **opts)
A:sympy.polys.distributedmodules.dic[(i,) + k]->K.convert(v)
A:sympy.polys.distributedmodules.dic->sdm_to_dict(f)
A:sympy.polys.distributedmodules.LM1->sdm_LM(f)
A:sympy.polys.distributedmodules.LM2->sdm_LM(g)
A:sympy.polys.distributedmodules.lcm->monomial_lcm(LM1, LM2)
A:sympy.polys.distributedmodules.m1->monomial_div(lcm, LM1)
A:sympy.polys.distributedmodules.m2->monomial_div(lcm, LM2)
A:sympy.polys.distributedmodules.c->K.quo(-sdm_LC(f, K), sdm_LC(g, K))
A:sympy.polys.distributedmodules.r1->sdm_add(sdm_mul_term(f, (m1, K.one), O, K), sdm_mul_term(g, (m2, c), O, K), O, K)
A:sympy.polys.distributedmodules.r2->sdm_add(sdm_mul_term(phantom[0], (m1, K.one), O, K), sdm_mul_term(phantom[1], (m2, c), O, K), O, K)
A:sympy.polys.distributedmodules.T->list(G)
A:sympy.polys.distributedmodules.Tp->repeat([])
A:sympy.polys.distributedmodules.(g, _, gp)->min(Th, key=lambda x: x[1])
A:sympy.polys.distributedmodules.(h, hp)->sdm_spoly(h, g, O, K, phantom=(hp, gp))
A:sympy.polys.distributedmodules.(g, gp)->next(((g, gp) for (g, gp) in zip(T, Tp) if sdm_monomial_divides(sdm_LM(g), sdm_LM(h))))
A:sympy.polys.distributedmodules.g->sdm_nf_buchberger(g, G, O, K)
A:sympy.polys.distributedmodules.LMi->sdm_LM(S[i])
A:sympy.polys.distributedmodules.LMj->sdm_LM(S[j])
A:sympy.polys.distributedmodules.k->len(S)
A:sympy.polys.distributedmodules.LMf->sdm_LM(f)
A:sympy.polys.distributedmodules.tik->sdm_monomial_lcm(LMf, sdm_LM(S[i]))
A:sympy.polys.distributedmodules.tjk->sdm_monomial_lcm(LMf, sdm_LM(S[j]))
A:sympy.polys.distributedmodules.remove->set()
A:sympy.polys.distributedmodules.P->update(h, Ssugar(i, j), P)
A:sympy.polys.distributedmodules.(i, j, s, t)->update(h, Ssugar(i, j), P).pop()
A:sympy.polys.distributedmodules.(sp, coeff)->sdm_spoly(f, g, O, K, phantom=(coefficients[i], coefficients[j]))
A:sympy.polys.distributedmodules.(h, hcoeff)->NF(sp, S, O, K, phantom=(coeff, coefficients))
A:sympy.polys.distributedmodules.A->sdm_LM(a)
A:sympy.polys.distributedmodules.B->sdm_LM(b)
A:sympy.polys.distributedmodules.L->sorted(((list(f), i) for (f, i) in S), key=lambda p: O(sdm_LM(p[0])), reverse=True)
sympy.polys.distributedmodules.sdm_LC(f,K)
sympy.polys.distributedmodules.sdm_LM(f)
sympy.polys.distributedmodules.sdm_LT(f)
sympy.polys.distributedmodules.sdm_add(f,g,O,K)
sympy.polys.distributedmodules.sdm_deg(f)
sympy.polys.distributedmodules.sdm_ecart(f)
sympy.polys.distributedmodules.sdm_from_dict(d,O)
sympy.polys.distributedmodules.sdm_from_vector(vec,O,K,**opts)
sympy.polys.distributedmodules.sdm_groebner(G,NF,O,K,extended=False)
sympy.polys.distributedmodules.sdm_monomial_deg(M)
sympy.polys.distributedmodules.sdm_monomial_divides(A,B)
sympy.polys.distributedmodules.sdm_monomial_lcm(A,B)
sympy.polys.distributedmodules.sdm_monomial_mul(M,X)
sympy.polys.distributedmodules.sdm_mul_term(f,term,O,K)
sympy.polys.distributedmodules.sdm_nf_buchberger(f,G,O,K,phantom=None)
sympy.polys.distributedmodules.sdm_nf_buchberger_reduced(f,G,O,K)
sympy.polys.distributedmodules.sdm_nf_mora(f,G,O,K,phantom=None)
sympy.polys.distributedmodules.sdm_sort(f,O)
sympy.polys.distributedmodules.sdm_spoly(f,g,O,K,phantom=None)
sympy.polys.distributedmodules.sdm_strip(f)
sympy.polys.distributedmodules.sdm_to_dict(f)
sympy.polys.distributedmodules.sdm_to_vector(f,gens,K,n=None)
sympy.polys.distributedmodules.sdm_zero()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/groebnertools.py----------------------------------------
A:sympy.polys.groebnertools.method->query('groebner')
A:sympy.polys.groebnertools.G->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(g_terms)
A:sympy.polys.groebnertools.pr->min(P, key=lambda pair: order(monomial_lcm(f[pair[0]].LM, f[pair[1]].LM)))
A:sympy.polys.groebnertools.h->ring.from_terms(h_terms)
A:sympy.polys.groebnertools.I[h]->len(f)
A:sympy.polys.groebnertools.C->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(g_terms).copy()
A:sympy.polys.groebnertools.D->set()
A:sympy.polys.groebnertools.ig->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(g_terms).pop()
A:sympy.polys.groebnertools.LCMhg->monomial_lcm(mh, mg)
A:sympy.polys.groebnertools.m->monomial_lcm(mh, f[ip].LM)
A:sympy.polys.groebnertools.E->set()
A:sympy.polys.groebnertools.(ih, ig)->set().pop()
A:sympy.polys.groebnertools.B_new->set()
A:sympy.polys.groebnertools.(ig1, ig2)->select(CP)
A:sympy.polys.groebnertools.LCM12->ring.monomial_lcm(LM1, LM2)
A:sympy.polys.groebnertools.G_new->set()
A:sympy.polys.groebnertools.r->lbp(Sign(p), Polyn(p).monic(), k + 1).rem(F[:i])
A:sympy.polys.groebnertools.F->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(f_terms)
A:sympy.polys.groebnertools.CP->set()
A:sympy.polys.groebnertools.(G, CP)->update(G, CP, ht[1])
A:sympy.polys.groebnertools.G1->sorted(G, key=lambda g: order(f[g].LM))
A:sympy.polys.groebnertools.ht->normal(f[ig], G - {ig})
A:sympy.polys.groebnertools.Gr->sorted(Gr, key=lambda f: order(f.LM), reverse=True)
A:sympy.polys.groebnertools.m1->ring.monomial_div(LCM12, LM1)
A:sympy.polys.groebnertools.m2->ring.monomial_div(LCM12, LM2)
A:sympy.polys.groebnertools.s1->p1.mul_monom(m1)
A:sympy.polys.groebnertools.s2->p2.mul_monom(m2)
A:sympy.polys.groebnertools.um->term_div(lt, ltf, domain)
A:sympy.polys.groebnertools.vm->term_div(lt, ltg, domain)
A:sympy.polys.groebnertools.fr->lbp_mul_term(lbp(Sign(f), Polyn(f).leading_term(), Num(f)), um)
A:sympy.polys.groebnertools.gr->lbp_mul_term(lbp(Sign(g), Polyn(g).leading_term(), Num(g)), vm)
A:sympy.polys.groebnertools.c0->lbp(c[0], zero, Num(c[2]))
A:sympy.polys.groebnertools.d0->lbp(d[0], zero, Num(d[2]))
A:sympy.polys.groebnertools.c1->lbp(c[3], zero, Num(c[5]))
A:sympy.polys.groebnertools.d1->lbp(d[3], zero, Num(d[5]))
A:sympy.polys.groebnertools.t->Dummy('t')
A:sympy.polys.groebnertools.hp->lbp_mul_term(h, t)
A:sympy.polys.groebnertools.f->lbp_sub(f, hp)
A:sympy.polys.groebnertools.k->len(B)
A:sympy.polys.groebnertools.cp->critical_pair(p, g, ring)
A:sympy.polys.groebnertools.s->s.rem(G).rem(G)
A:sympy.polys.groebnertools.p->lbp(Sign(p), Polyn(p).monic(), k + 1)
A:sympy.polys.groebnertools.H->(f * g).quo([groebner_lcm(f, g)])
A:sympy.polys.groebnertools.f0->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(f_terms).pop()
A:sympy.polys.groebnertools.monom->monomial_lcm(f.LM, g.LM)
A:sympy.polys.groebnertools.coeff->domain.lcm(f.LC, g.LC)
A:sympy.polys.groebnertools.(fc, f)->lbp_sub(f, hp).primitive()
A:sympy.polys.groebnertools.(gc, g)->g.primitive()
A:sympy.polys.groebnertools.lcm->domain.lcm(fc, gc)
A:sympy.polys.groebnertools.t_ring->ring.clone(symbols=(t,) + ring.symbols, order=lex)
A:sympy.polys.groebnertools.basis->groebner([F, G], t_ring)
A:sympy.polys.groebnertools.gcd->domain.gcd(fc, gc)
sympy.groebnertools.groebner(seq,ring,method=None)
sympy.polys.groebnertools.Num(f)
sympy.polys.groebnertools.Polyn(f)
sympy.polys.groebnertools.Sign(f)
sympy.polys.groebnertools._buchberger(f,ring)
sympy.polys.groebnertools._f5b(F,ring)
sympy.polys.groebnertools.cp_cmp(c,d)
sympy.polys.groebnertools.cp_key(c,ring)
sympy.polys.groebnertools.critical_pair(f,g,ring)
sympy.polys.groebnertools.f5_reduce(f,B)
sympy.polys.groebnertools.groebner(seq,ring,method=None)
sympy.polys.groebnertools.groebner_gcd(f,g)
sympy.polys.groebnertools.groebner_lcm(f,g)
sympy.polys.groebnertools.is_groebner(G,ring)
sympy.polys.groebnertools.is_minimal(G,ring)
sympy.polys.groebnertools.is_reduced(G,ring)
sympy.polys.groebnertools.is_rewritable_or_comparable(sign,num,B)
sympy.polys.groebnertools.lbp(signature,polynomial,number)
sympy.polys.groebnertools.lbp_cmp(f,g)
sympy.polys.groebnertools.lbp_key(f)
sympy.polys.groebnertools.lbp_mul_term(f,cx)
sympy.polys.groebnertools.lbp_sub(f,g)
sympy.polys.groebnertools.red_groebner(G,ring)
sympy.polys.groebnertools.s_poly(cp)
sympy.polys.groebnertools.sig(monomial,index)
sympy.polys.groebnertools.sig_cmp(u,v,order)
sympy.polys.groebnertools.sig_key(s,order)
sympy.polys.groebnertools.sig_mult(s,m)
sympy.polys.groebnertools.spoly(p1,p2,ring)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/subresultants_qq_zz.py----------------------------------------
A:sympy.polys.subresultants_qq_zz.fp->Poly(f, x).all_coeffs()
A:sympy.polys.subresultants_qq_zz.gp->Poly(g, x).all_coeffs()
A:sympy.polys.subresultants_qq_zz.M->create_ma(deg_f, deg_g, row1, row0, col_num)
A:sympy.polys.subresultants_qq_zz.mx->max(m, n)
A:sympy.polys.subresultants_qq_zz.d->find_degree(M, deg_f)
A:sympy.polys.subresultants_qq_zz.d_i->degree(L[i], x)
A:sympy.polys.subresultants_qq_zz.ndegF->degree(f, x)
A:sympy.polys.subresultants_qq_zz.mdegG->degree(g, x)
A:sympy.polys.subresultants_qq_zz.S->sylvester(f, g, x, 2)
A:sympy.polys.subresultants_qq_zz.m->zeros(deg_f - deg_g + 2, col_num)
A:sympy.polys.subresultants_qq_zz.n->degree(g, x)
A:sympy.polys.subresultants_qq_zz.r->simplify(r / LC(r, x) * sign_value)
A:sympy.polys.subresultants_qq_zz.s->degree(r, x)
A:sympy.polys.subresultants_qq_zz.l->LC(g, x)
A:sympy.polys.subresultants_qq_zz.y->var('y')
A:sympy.polys.subresultants_qq_zz.poly->simplify(poly / LC(poly, x) * sign_value)
A:sympy.polys.subresultants_qq_zz.B->bezout(f, g, x, 'prs')
A:sympy.polys.subresultants_qq_zz.B[mx - 1 - i, mx - 1 - j]->simplify(poly / LC(poly, x) * sign_value).nth(i, j)
A:sympy.polys.subresultants_qq_zz.B[i, j]->simplify(poly / LC(poly, x) * sign_value).nth(i, j)
A:sympy.polys.subresultants_qq_zz.d0->degree(f, x)
A:sympy.polys.subresultants_qq_zz.d1->degree(g, x)
A:sympy.polys.subresultants_qq_zz.rho1->LC(a1, x)
A:sympy.polys.subresultants_qq_zz.rho2->LC(a2, x)
A:sympy.polys.subresultants_qq_zz.d2->degree(a2, x)
A:sympy.polys.subresultants_qq_zz.rho3->LC(a2, x)
A:sympy.polys.subresultants_qq_zz.prs->sturm_pg(p, q, x, 1)
A:sympy.polys.subresultants_qq_zz.lcf->Abs(LC(prs[0]) ** (degree(prs[0], x) - degree(prs[1], x)))
A:sympy.polys.subresultants_qq_zz.a2->rem(a0, a1, domain=QQ)
A:sympy.polys.subresultants_qq_zz.k->var('k')
A:sympy.polys.subresultants_qq_zz.rho_1->LC(a0)
A:sympy.polys.subresultants_qq_zz.rho_list_minus_1->sign(LC(a0, x))
A:sympy.polys.subresultants_qq_zz.u->summation(k, (k, 1, p_list[len(p_list) - 1]))
A:sympy.polys.subresultants_qq_zz.v->sum(p_list)
A:sympy.polys.subresultants_qq_zz.lst->subresultants_amv(p, q, x)
A:sympy.polys.subresultants_qq_zz.sigma1->LC(a1, x)
A:sympy.polys.subresultants_qq_zz.phi->floor((s + 1) / 2)
A:sympy.polys.subresultants_qq_zz.sigma2->LC(a2, x)
A:sympy.polys.subresultants_qq_zz.sigma3->LC(a2, x)
A:sympy.polys.subresultants_qq_zz.den->sign(mul_fac)
A:sympy.polys.subresultants_qq_zz.sb->sign(base)
A:sympy.polys.subresultants_qq_zz.sgn_den->compute_sign(sigma1, p0 + 1)
A:sympy.polys.subresultants_qq_zz.ndeg_f->degree(f, x)
A:sympy.polys.subresultants_qq_zz.mdeg_g->degree(g, x)
A:sympy.polys.subresultants_qq_zz.s1->sylvester(f, g, x, 1)
A:sympy.polys.subresultants_qq_zz.sign_value->correct_sign(n, m, s1, exp_deg, exp_deg - d)
A:sympy.polys.subresultants_qq_zz.ll->list(L)
A:sympy.polys.subresultants_qq_zz.el->list(L).pop(0)
A:sympy.polys.subresultants_qq_zz.leng->len(row)
A:sympy.polys.subresultants_qq_zz.m[i, :]->rotate_r(row1, i)
A:sympy.polys.subresultants_qq_zz.R->final_touches(s2, r, deg_g).row(r - 1)
A:sympy.polys.subresultants_qq_zz.s2[r + i, :]->rotate_r(row1, r + i)
A:sympy.polys.subresultants_qq_zz.s2->final_touches(s2, r, deg_g)
A:sympy.polys.subresultants_qq_zz.row0->Matrix([row0])
A:sympy.polys.subresultants_qq_zz.leng0->len(row0)
A:sympy.polys.subresultants_qq_zz.row1->Matrix([row1])
A:sympy.polys.subresultants_qq_zz.leng1->len(row1)
A:sympy.polys.subresultants_qq_zz.M1->pivot(M, i, i)
A:sympy.polys.subresultants_qq_zz.temp2->LC(poly, x)
A:sympy.polys.subresultants_qq_zz.s2[1, :]->rotate_r(s2.row(1), 1)
sympy.polys.subresultants_qq_zz.backward_eye(n)
sympy.polys.subresultants_qq_zz.bezout(p,q,x,method='bz')
sympy.polys.subresultants_qq_zz.compute_sign(base,expo)
sympy.polys.subresultants_qq_zz.correct_sign(deg_f,deg_g,s1,rdel,cdel)
sympy.polys.subresultants_qq_zz.create_ma(deg_f,deg_g,row1,row2,col_num)
sympy.polys.subresultants_qq_zz.euclid_amv(f,g,x)
sympy.polys.subresultants_qq_zz.euclid_pg(p,q,x)
sympy.polys.subresultants_qq_zz.euclid_q(p,q,x)
sympy.polys.subresultants_qq_zz.final_touches(s2,r,deg_g)
sympy.polys.subresultants_qq_zz.find_degree(M,deg_f)
sympy.polys.subresultants_qq_zz.modified_subresultants_amv(p,q,x)
sympy.polys.subresultants_qq_zz.modified_subresultants_bezout(p,q,x)
sympy.polys.subresultants_qq_zz.modified_subresultants_pg(p,q,x)
sympy.polys.subresultants_qq_zz.modified_subresultants_sylv(f,g,x)
sympy.polys.subresultants_qq_zz.pivot(M,i,j)
sympy.polys.subresultants_qq_zz.process_matrix_output(poly_seq,x)
sympy.polys.subresultants_qq_zz.quo_z(p,q,x)
sympy.polys.subresultants_qq_zz.rem_z(p,q,x)
sympy.polys.subresultants_qq_zz.res(f,g,x)
sympy.polys.subresultants_qq_zz.res_q(f,g,x)
sympy.polys.subresultants_qq_zz.res_z(f,g,x)
sympy.polys.subresultants_qq_zz.rotate_l(L,k)
sympy.polys.subresultants_qq_zz.rotate_r(L,k)
sympy.polys.subresultants_qq_zz.row2poly(row,deg,x)
sympy.polys.subresultants_qq_zz.sign_seq(poly_seq,x)
sympy.polys.subresultants_qq_zz.sturm_amv(p,q,x,method=0)
sympy.polys.subresultants_qq_zz.sturm_pg(p,q,x,method=0)
sympy.polys.subresultants_qq_zz.sturm_q(p,q,x)
sympy.polys.subresultants_qq_zz.subresultants_amv(f,g,x)
sympy.polys.subresultants_qq_zz.subresultants_amv_q(p,q,x)
sympy.polys.subresultants_qq_zz.subresultants_bezout(p,q,x)
sympy.polys.subresultants_qq_zz.subresultants_pg(p,q,x)
sympy.polys.subresultants_qq_zz.subresultants_rem(p,q,x)
sympy.polys.subresultants_qq_zz.subresultants_sylv(f,g,x)
sympy.polys.subresultants_qq_zz.subresultants_vv(p,q,x,method=0)
sympy.polys.subresultants_qq_zz.subresultants_vv_2(p,q,x)
sympy.polys.subresultants_qq_zz.sylvester(f,g,x,method=1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polytools.py----------------------------------------
A:sympy.polys.polytools.g->g.__class__._from_poly(g, opt).__class__._from_poly(g, opt)
A:sympy.polys.polytools.expr_method->getattr(f.as_expr(), func.__name__)
A:sympy.polys.polytools.result->result.add(Poly._from_expr(term, opt)).add(Poly._from_expr(term, opt))
A:sympy.polys.polytools.opt->sympy.polys.polyoptions.build_options(gens, args)
A:sympy.polys.polytools.rep->dict(list(zip(monoms, coeffs)))
A:sympy.polys.polytools.obj->sympy.core.basic.Basic.__new__(cls)
A:sympy.polys.polytools.(domain, rep)->construct_domain(rep, opt=opt)
A:sympy.polys.polytools.rep[monom]->f.get_domain().convert(coeff)
A:sympy.polys.polytools.(rep, opt)->_dict_from_expr(expr, opt)
A:sympy.polys.polytools.symbols->set()
A:sympy.polys.polytools.(_, per, F, G)->factor_terms(f, radical=True)._unify(g)
A:sympy.polys.polytools.gens->list(f.gens)
A:sympy.polys.polytools.(f_monoms, f_coeffs)->_dict_reorder(f.rep.to_dict(), f.gens, gens)
A:sympy.polys.polytools.F->Poly(f, greedy=False)
A:sympy.polys.polytools.(g_monoms, g_coeffs)->_dict_reorder(g.rep.to_dict(), g.gens, gens)
A:sympy.polys.polytools.G->matrix_fglm(polys, _ring, dst_order)
A:sympy.polys.polytools.modulus->sympy.polys.polyoptions.Modulus.preprocess(modulus)
A:sympy.polys.polytools.domain->factor_terms(f, radical=True).get_domain()
A:sympy.polys.polytools.(J, new)->factor_terms(f, radical=True).rep.exclude()
A:sympy.polys.polytools.dom->factor_terms(f, radical=True).rep.dom.unify(g.rep.dom, gens)
A:sympy.polys.polytools.j->factor_terms(f, radical=True)._gen_to_level(x)
A:sympy.polys.polytools.indices->set()
A:sympy.polys.polytools.index->list(f.gens).index(gen)
A:sympy.polys.polytools.(dom, rep)->construct_domain(f.as_dict(zero=True), field=field, composite=f.domain.is_Composite or None)
A:sympy.polys.polytools.poly->Poly.new(poly, head)
A:sympy.polys.polytools.(J, result)->factor_terms(f, radical=True).rep.terms_gcd()
A:sympy.polys.polytools.k->len(gens)
A:sympy.polys.polytools.n->Poly(p, x, domain='EX').degree()
A:sympy.polys.polytools.(q, r)->Poly(f, greedy=False).div(G, auto=opt.auto)
A:sympy.polys.polytools.(dom, per, F, G)->factor_terms(f, radical=True)._unify(g)
A:sympy.polys.polytools.r->Poly._from_dict(dict(r), opt)
A:sympy.polys.polytools.q->Poly(f, greedy=False).exquo(G, auto=opt.auto)
A:sympy.polys.polytools.length->len(f.gens)
A:sympy.polys.polytools.i->len(f.gens)
A:sympy.polys.polytools.(coeff, result)->factor_terms(f, radical=True).rep.clear_denoms()
A:sympy.polys.polytools.(dom, per, f, g)->factor_terms(f, radical=True)._unify(g)
A:sympy.polys.polytools.f->factor_terms(f, radical=True)
A:sympy.polys.polytools.(a, f)->factor_terms(f, radical=True).clear_denoms(convert=True)
A:sympy.polys.polytools.(b, g)->g.__class__._from_poly(g, opt).__class__._from_poly(g, opt).clear_denoms(convert=True)
A:sympy.polys.polytools.(a_domain, [a])->construct_domain([a])
A:sympy.polys.polytools.new_domain->factor_terms(f, radical=True).get_domain().unify_with_symbols(a_domain, f.gens)
A:sympy.polys.polytools.a->factor_terms(f, radical=True).get_domain().unify_with_symbols(a_domain, f.gens).convert(a, a_domain)
A:sympy.polys.polytools.(s, h)->Poly(f, greedy=False).half_gcdex(G, auto=opt.auto)
A:sympy.polys.polytools.(s, t, h)->Poly(f, greedy=False).gcdex(G, auto=opt.auto)
A:sympy.polys.polytools.(result, R)->Poly(f, greedy=False).resultant(G, includePRS=includePRS)
A:sympy.polys.polytools.(h, cff, cfg)->Poly(f, greedy=False).cofactors(G)
A:sympy.polys.polytools.p->p.as_expr().as_expr()
A:sympy.polys.polytools.(cont, result)->Poly(f, greedy=False).primitive()
A:sympy.polys.polytools.(P, Q)->p.as_expr().as_expr().unify(q)
A:sympy.polys.polytools.(F, P)->factor_terms(f, radical=True).unify(P)
A:sympy.polys.polytools.(F, Q)->Poly(f, greedy=False).unify(Q)
A:sympy.polys.polytools.(s, g, r)->Poly(f, greedy=False).sqf_norm()
A:sympy.polys.polytools.(coeff, factors)->_symbolic_factor_list(together(expr, fraction=opt['fraction']), opt, method)
A:sympy.polys.polytools.factors->factor_list(g.as_expr())
A:sympy.polys.polytools.eps->sympy.polys.polyoptions.build_options(gens, args).domain.convert(eps)
A:sympy.polys.polytools.inf->sympy.polys.polyoptions.build_options(gens, args).domain.convert(inf)
A:sympy.polys.polytools.sup->sympy.polys.polyoptions.build_options(gens, args).domain.convert(sup)
A:sympy.polys.polytools.steps->int(steps)
A:sympy.polys.polytools.(S, T)->factor_terms(f, radical=True).rep.refine_root(s, t, eps=eps, steps=steps, fast=fast)
A:sympy.polys.polytools.(re, im)->sympy.polys.polyoptions.build_options(gens, args).domain.convert(sup).as_real_imag()
A:sympy.polys.polytools.count->factor_terms(f, radical=True).rep.count_complex_roots(inf=inf, sup=sup)
A:sympy.polys.polytools.reals->sympy.polys.rootoftools.CRootOf.real_roots(f, radicals=radicals)
A:sympy.polys.polytools.roots->list(map(sympify, sorted(roots, key=lambda r: (1 if r.imag else 0, r.real, abs(r.imag), sign(r.imag)))))
A:sympy.polys.polytools.fac->factor(p, *gens, **args)
A:sympy.polys.polytools.(a, b)->map(sympify, (f, g))
A:sympy.polys.polytools.N->sympify(n)
A:sympy.polys.polytools.t->Dummy('t')
A:sympy.polys.polytools.dom_delta_sq->factor_terms(f, radical=True).rep.mignotte_sep_bound_squared()
A:sympy.polys.polytools.delta_sq->factor_terms(f, radical=True).domain.get_field().to_sympy(dom_delta_sq)
A:sympy.polys.polytools.(r, _, _, _)->evalf(1 / eps_sq, 1, {})
A:sympy.polys.polytools.cp->factor_terms(f, radical=True).rep.dom.unify(g.rep.dom, gens).to_sympy(cp)
A:sympy.polys.polytools.cq->factor_terms(f, radical=True).rep.dom.unify(g.rep.dom, gens).to_sympy(cq)
A:sympy.polys.polytools.fm->factor_terms(f, radical=True).monic()
A:sympy.polys.polytools.(c, _)->factor_terms(f, radical=True).monic().clear_denoms()
A:sympy.polys.polytools.max_supported->max(gg.keys())
A:sympy.polys.polytools.(g, _)->factor_terms(f, radical=True).make_monic_over_integers_by_scaling_roots()
A:sympy.polys.polytools.(name, alt)->gg[n](g, max_tries=max_tries, randomize=randomize)
A:sympy.polys.polytools.expr->sympify(expr)
A:sympy.polys.polytools.(monoms, coeffs)->list(zip(*list(rep.items())))
A:sympy.polys.polytools.(opt.domain, coeffs)->construct_domain(coeffs, opt=opt)
A:sympy.polys.polytools.coeffs->p.as_expr().as_expr().coeffs()
A:sympy.polys.polytools.(f, g)->factor_terms(f, radical=True).unify(g)
A:sympy.polys.polytools.exprs[i]->exprs[i].as_expr().as_expr()
A:sympy.polys.polytools.(reps, opt)->_parallel_dict_from_expr(exprs, opt)
A:sympy.polys.polytools.(opt.domain, coeffs_list)->construct_domain(coeffs_list, opt=opt)
A:sympy.polys.polytools.coeffs_list->list(map(domain.from_sympy, coeffs_list))
A:sympy.polys.polytools.opt.polys->bool(_polys)
A:sympy.polys.polytools.args->dict(args)
A:sympy.polys.polytools.(p, _)->poly_from_expr(f.as_expr())
A:sympy.polys.polytools.rv->Poly(p, gens).total_degree()
A:sympy.polys.polytools.(F, opt)->poly_from_expr(f, *gens, **args)
A:sympy.polys.polytools.degrees->Poly(f, greedy=False).degree_list()
A:sympy.polys.polytools.monom->Poly(f, greedy=False).LM(order=opt.order)
A:sympy.polys.polytools.(monom, coeff)->Poly(f, greedy=False).LT(order=opt.order)
A:sympy.polys.polytools.((F, G), opt)->parallel_poly_from_expr((f, g), *gens, **args)
A:sympy.polys.polytools.(domain, (a, b))->construct_domain(exc.exprs)
A:sympy.polys.polytools.h->Poly(f, greedy=False).invert(G, auto=opt.auto)
A:sympy.polys.polytools.seq->sympify(seq)
A:sympy.polys.polytools.(domain, numbers)->construct_domain(seq)
A:sympy.polys.polytools.(polys, opt)->parallel_poly_from_expr(F, *gens, **args)
A:sympy.polys.polytools.lc->factor_terms(f, radical=True).LC()
A:sympy.polys.polytools.frc->(a / b).ratsimp()
A:sympy.polys.polytools.orig->sympify(f)
A:sympy.polys.polytools.new->factor_terms(f, radical=True).func(*[terms_gcd(a, *gens, **args) for a in f.args])
A:sympy.polys.polytools.clear->dict(args).pop('clear', True)
A:sympy.polys.polytools.(J, f)->Poly(f, greedy=False).terms_gcd()
A:sympy.polys.polytools.(denom, f)->factor_terms(f, radical=True).clear_denoms(convert=True)
A:sympy.polys.polytools.(coeff, f)->_keep_coeff(coeff, f.as_expr(), clear=False).as_coeff_Mul()
A:sympy.polys.polytools.term->Add(*terms)
A:sympy.polys.polytools.(poly, _)->_poly_from_expr(base, opt)
A:sympy.polys.polytools.func->getattr(poly, method + '_list')
A:sympy.polys.polytools.(_coeff, _factors)->func()
A:sympy.polys.polytools.(numer, denom)->together(expr).as_numer_denom()
A:sympy.polys.polytools.(cp, fp)->_symbolic_factor_list(numer, opt, method)
A:sympy.polys.polytools.(cq, fq)->_symbolic_factor_list(denom, opt, method)
A:sympy.polys.polytools._opt->sympy.polys.polyoptions.build_options(gens, args).clone({'expand': True})
A:sympy.polys.polytools.(f, _)->_poly_from_expr(f, _opt)
A:sympy.polys.polytools.fp->_sorted_factors(fp, method)
A:sympy.polys.polytools.fq->_sorted_factors(fq, method)
A:sympy.polys.polytools.fraction->dict(args).pop('fraction', True)
A:sympy.polys.polytools.rescale1_x->simplify(coeffs[-2] / coeffs[-1])
A:sympy.polys.polytools.coeffx->simplify(coeffs[i] * rescale1_x ** (i + 1))
A:sympy.polys.polytools.rescale_x->simplify(1 / rescale1_x)
A:sympy.polys.polytools.c->simplify(factors[0] * lc * r ** n)
A:sympy.polys.polytools.(rat, nonrat)->sift(c.args, lambda z: z.is_rational is True, binary=True)
A:sympy.polys.polytools.f2->f.monic().shift(alpha)
A:sympy.polys.polytools.f1->factor_terms(f, radical=True).monic()
A:sympy.polys.polytools.p1->Poly(p, x, domain='EX')
A:sympy.polys.polytools.res->to_rational_coeffs(p1)
A:sympy.polys.polytools.r1->simplify(1 / r)
A:sympy.polys.polytools.muladd->factor_terms(f, radical=True).atoms(Mul, Add)
A:sympy.polys.polytools.intervals->dup_isolate_real_roots_list(polys, opt.domain, eps=eps, inf=inf, sup=sup, strict=strict, fast=fast)
A:sympy.polys.polytools.(p, q)->factor_terms(f, radical=True).as_numer_denom()
A:sympy.polys.polytools.opt['polys']->sympy.polys.polyoptions.build_options(gens, args).get('polys', True)
A:sympy.polys.polytools.(R, (F, G))->sring((p, q), *gens, **args)
A:sympy.polys.polytools.(c, nc)->sift(f.args, lambda x: x.is_commutative is True and (not x.has(Piecewise)), binary=True)
A:sympy.polys.polytools.pot->preorder_traversal(f)
A:sympy.polys.polytools.(_ring, _)->xring(opt.gens, opt.domain, opt.order)
A:sympy.polys.polytools.polys[i]->_ring.from_dict(poly)
A:sympy.polys.polytools.(Q, r)->polys[0].div(polys[1:])
A:sympy.polys.polytools.ring->PolyRing(opt.gens, opt.domain, opt.order)
A:sympy.polys.polytools.obj._basis->tuple(basis)
A:sympy.polys.polytools.exponents->Monomial([0] * len(self.gens))
A:sympy.polys.polytools.monomial->Poly.new(poly, head).LM(order=order)
A:sympy.polys.polytools.dst_order->monomial_key(order)
A:sympy.polys.polytools.polys->list(self._basis)
A:sympy.polys.polytools.product->product.mul(Poly._from_expr(factor, opt)).mul(Poly._from_expr(factor, opt))
A:sympy.polys.polytools.factor->Mul(*factors)
A:sympy.polys.polytools.(K, tail)->construct_domain(tail, field=True)
sympy.GroebnerBasis(cls,F,*gens,**args)
sympy.LC(f,*gens,**args)
sympy.LM(f,*gens,**args)
sympy.LT(f,*gens,**args)
sympy.Poly(cls,rep,*gens,**args)
sympy.PurePoly(Poly)
sympy.cancel(f,*gens,_signsimp=True,**args)
sympy.cofactors(f,g,*gens,**args)
sympy.compose(f,g,*gens,**args)
sympy.content(f,*gens,**args)
sympy.count_roots(f,inf=None,sup=None)
sympy.decompose(f,*gens,**args)
sympy.degree(f,gen=0)
sympy.degree_list(f,*gens,**args)
sympy.discriminant(f,*gens,**args)
sympy.div(f,g,*gens,**args)
sympy.exquo(f,g,*gens,**args)
sympy.factor(f,*gens,deep=False,**args)
sympy.factor_list(f,*gens,**args)
sympy.gcd(f,g=None,*gens,**args)
sympy.gcd_list(seq,*gens,**args)
sympy.gcdex(f,g,*gens,**args)
sympy.gff(f,*gens,**args)
sympy.gff_list(f,*gens,**args)
sympy.groebner(F,*gens,**args)
sympy.ground_roots(f,*gens,**args)
sympy.half_gcdex(f,g,*gens,**args)
sympy.intervals(F,all=False,eps=None,inf=None,sup=None,strict=False,fast=False,sqf=False)
sympy.invert(f,g,*gens,**args)
sympy.is_zero_dimensional(F,*gens,**args)
sympy.lcm(f,g=None,*gens,**args)
sympy.lcm_list(seq,*gens,**args)
sympy.monic(f,*gens,**args)
sympy.nroots(f,n=15,maxsteps=50,cleanup=True)
sympy.nth_power_roots_poly(f,n,*gens,**args)
sympy.parallel_poly_from_expr(exprs,*gens,**args)
sympy.pdiv(f,g,*gens,**args)
sympy.pexquo(f,g,*gens,**args)
sympy.poly(expr,*gens,**args)
sympy.poly_from_expr(expr,*gens,**args)
sympy.polys.polytools.GroebnerBasis(cls,F,*gens,**args)
sympy.polys.polytools.GroebnerBasis.__eq__(self,other)
sympy.polys.polytools.GroebnerBasis.__getitem__(self,item)
sympy.polys.polytools.GroebnerBasis.__hash__(self)
sympy.polys.polytools.GroebnerBasis.__iter__(self)
sympy.polys.polytools.GroebnerBasis.__len__(self)
sympy.polys.polytools.GroebnerBasis.__ne__(self,other)
sympy.polys.polytools.GroebnerBasis._new(cls,basis,options)
sympy.polys.polytools.GroebnerBasis.args(self)
sympy.polys.polytools.GroebnerBasis.contains(self,poly)
sympy.polys.polytools.GroebnerBasis.domain(self)
sympy.polys.polytools.GroebnerBasis.exprs(self)
sympy.polys.polytools.GroebnerBasis.fglm(self,order)
sympy.polys.polytools.GroebnerBasis.gens(self)
sympy.polys.polytools.GroebnerBasis.is_zero_dimensional(self)
sympy.polys.polytools.GroebnerBasis.order(self)
sympy.polys.polytools.GroebnerBasis.polys(self)
sympy.polys.polytools.GroebnerBasis.reduce(self,expr,auto=True)
sympy.polys.polytools.LC(f,*gens,**args)
sympy.polys.polytools.LM(f,*gens,**args)
sympy.polys.polytools.LT(f,*gens,**args)
sympy.polys.polytools.Poly(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.EC(f,order=None)
sympy.polys.polytools.Poly.EM(f,order=None)
sympy.polys.polytools.Poly.ET(f,order=None)
sympy.polys.polytools.Poly.LC(f,order=None)
sympy.polys.polytools.Poly.LM(f,order=None)
sympy.polys.polytools.Poly.LT(f,order=None)
sympy.polys.polytools.Poly.TC(f)
sympy.polys.polytools.Poly.__abs__(f)
sympy.polys.polytools.Poly.__add__(f,g)
sympy.polys.polytools.Poly.__bool__(f)
sympy.polys.polytools.Poly.__divmod__(f,g)
sympy.polys.polytools.Poly.__eq__(self,other)
sympy.polys.polytools.Poly.__floordiv__(f,g)
sympy.polys.polytools.Poly.__hash__(self)
sympy.polys.polytools.Poly.__mod__(f,g)
sympy.polys.polytools.Poly.__mul__(f,g)
sympy.polys.polytools.Poly.__ne__(f,g)
sympy.polys.polytools.Poly.__neg__(f)
sympy.polys.polytools.Poly.__pow__(f,n)
sympy.polys.polytools.Poly.__radd__(f,g)
sympy.polys.polytools.Poly.__rdivmod__(f,g)
sympy.polys.polytools.Poly.__rfloordiv__(f,g)
sympy.polys.polytools.Poly.__rmod__(f,g)
sympy.polys.polytools.Poly.__rmul__(f,g)
sympy.polys.polytools.Poly.__rsub__(f,g)
sympy.polys.polytools.Poly.__rtruediv__(f,g)
sympy.polys.polytools.Poly.__sub__(f,g)
sympy.polys.polytools.Poly.__truediv__(f,g)
sympy.polys.polytools.Poly._eval_subs(f,old,new)
sympy.polys.polytools.Poly._from_dict(cls,rep,opt)
sympy.polys.polytools.Poly._from_domain_element(cls,rep,opt)
sympy.polys.polytools.Poly._from_expr(cls,rep,opt)
sympy.polys.polytools.Poly._from_list(cls,rep,opt)
sympy.polys.polytools.Poly._from_poly(cls,rep,opt)
sympy.polys.polytools.Poly._gen_to_level(f,gen)
sympy.polys.polytools.Poly._hashable_content(self)
sympy.polys.polytools.Poly._strict_eq(f,g)
sympy.polys.polytools.Poly._unify(f,g)
sympy.polys.polytools.Poly.abs(f)
sympy.polys.polytools.Poly.add(f,g)
sympy.polys.polytools.Poly.add_ground(f,coeff)
sympy.polys.polytools.Poly.all_coeffs(f)
sympy.polys.polytools.Poly.all_monoms(f)
sympy.polys.polytools.Poly.all_roots(f,multiple=True,radicals=True)
sympy.polys.polytools.Poly.all_terms(f)
sympy.polys.polytools.Poly.args(self)
sympy.polys.polytools.Poly.as_dict(f,native=False,zero=False)
sympy.polys.polytools.Poly.as_expr(f,*gens)
sympy.polys.polytools.Poly.as_list(f,native=False)
sympy.polys.polytools.Poly.as_poly(self,*gens,**args)
sympy.polys.polytools.Poly.cancel(f,g,include=False)
sympy.polys.polytools.Poly.clear_denoms(self,convert=False)
sympy.polys.polytools.Poly.coeff(f,x,n=1,right=False)
sympy.polys.polytools.Poly.coeff_monomial(f,monom)
sympy.polys.polytools.Poly.coeffs(f,order=None)
sympy.polys.polytools.Poly.cofactors(f,g)
sympy.polys.polytools.Poly.compose(f,g)
sympy.polys.polytools.Poly.content(f)
sympy.polys.polytools.Poly.count_roots(f,inf=None,sup=None)
sympy.polys.polytools.Poly.decompose(f)
sympy.polys.polytools.Poly.deflate(f)
sympy.polys.polytools.Poly.degree(f,gen=0)
sympy.polys.polytools.Poly.degree_list(f)
sympy.polys.polytools.Poly.diff(f,*specs,**kwargs)
sympy.polys.polytools.Poly.discriminant(f)
sympy.polys.polytools.Poly.dispersion(f,g=None)
sympy.polys.polytools.Poly.dispersionset(f,g=None)
sympy.polys.polytools.Poly.div(f,g,auto=True)
sympy.polys.polytools.Poly.domain(self)
sympy.polys.polytools.Poly.eject(f,*gens)
sympy.polys.polytools.Poly.eq(f,g,strict=False)
sympy.polys.polytools.Poly.eval(self,x,a=None,auto=True)
sympy.polys.polytools.Poly.exclude(f)
sympy.polys.polytools.Poly.expr(self)
sympy.polys.polytools.Poly.exquo(f,g,auto=True)
sympy.polys.polytools.Poly.exquo_ground(f,coeff)
sympy.polys.polytools.Poly.factor_list(f)
sympy.polys.polytools.Poly.factor_list_include(f)
sympy.polys.polytools.Poly.free_symbols(self)
sympy.polys.polytools.Poly.free_symbols_in_domain(self)
sympy.polys.polytools.Poly.from_dict(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.from_expr(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.from_list(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.from_poly(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.galois_group(f,by_name=False,max_tries=30,randomize=False)
sympy.polys.polytools.Poly.gcd(f,g)
sympy.polys.polytools.Poly.gcdex(f,g,auto=True)
sympy.polys.polytools.Poly.gen(self)
sympy.polys.polytools.Poly.get_domain(f)
sympy.polys.polytools.Poly.get_modulus(f)
sympy.polys.polytools.Poly.gff_list(f)
sympy.polys.polytools.Poly.ground_roots(f)
sympy.polys.polytools.Poly.half_gcdex(f,g,auto=True)
sympy.polys.polytools.Poly.has_only_gens(f,*gens)
sympy.polys.polytools.Poly.homogeneous_order(f)
sympy.polys.polytools.Poly.homogenize(f,s)
sympy.polys.polytools.Poly.inject(f,front=False)
sympy.polys.polytools.Poly.integrate(self,*specs,**args)
sympy.polys.polytools.Poly.intervals(f,all=False,eps=None,inf=None,sup=None,fast=False,sqf=False)
sympy.polys.polytools.Poly.invert(f,g,auto=True)
sympy.polys.polytools.Poly.is_cyclotomic(f)
sympy.polys.polytools.Poly.is_ground(f)
sympy.polys.polytools.Poly.is_homogeneous(f)
sympy.polys.polytools.Poly.is_irreducible(f)
sympy.polys.polytools.Poly.is_linear(f)
sympy.polys.polytools.Poly.is_monic(f)
sympy.polys.polytools.Poly.is_monomial(f)
sympy.polys.polytools.Poly.is_multivariate(f)
sympy.polys.polytools.Poly.is_one(f)
sympy.polys.polytools.Poly.is_primitive(f)
sympy.polys.polytools.Poly.is_quadratic(f)
sympy.polys.polytools.Poly.is_sqf(f)
sympy.polys.polytools.Poly.is_univariate(f)
sympy.polys.polytools.Poly.is_zero(f)
sympy.polys.polytools.Poly.l1_norm(f)
sympy.polys.polytools.Poly.lcm(f,g)
sympy.polys.polytools.Poly.length(f)
sympy.polys.polytools.Poly.lift(f)
sympy.polys.polytools.Poly.ltrim(f,gen)
sympy.polys.polytools.Poly.make_monic_over_integers_by_scaling_roots(f)
sympy.polys.polytools.Poly.match(f,*args,**kwargs)
sympy.polys.polytools.Poly.max_norm(f)
sympy.polys.polytools.Poly.monic(self,auto=True)
sympy.polys.polytools.Poly.monoms(f,order=None)
sympy.polys.polytools.Poly.mul(f,g)
sympy.polys.polytools.Poly.mul_ground(f,coeff)
sympy.polys.polytools.Poly.ne(f,g,strict=False)
sympy.polys.polytools.Poly.neg(f)
sympy.polys.polytools.Poly.new(cls,rep,*gens)
sympy.polys.polytools.Poly.norm(f)
sympy.polys.polytools.Poly.nroots(f,n=15,maxsteps=50,cleanup=True)
sympy.polys.polytools.Poly.nth(f,*N)
sympy.polys.polytools.Poly.nth_power_roots_poly(f,n)
sympy.polys.polytools.Poly.one(self)
sympy.polys.polytools.Poly.pdiv(f,g)
sympy.polys.polytools.Poly.per(f,rep,gens=None,remove=None)
sympy.polys.polytools.Poly.pexquo(f,g)
sympy.polys.polytools.Poly.pow(f,n)
sympy.polys.polytools.Poly.pquo(f,g)
sympy.polys.polytools.Poly.prem(f,g)
sympy.polys.polytools.Poly.primitive(f)
sympy.polys.polytools.Poly.quo(f,g,auto=True)
sympy.polys.polytools.Poly.quo_ground(f,coeff)
sympy.polys.polytools.Poly.rat_clear_denoms(self,g)
sympy.polys.polytools.Poly.real_roots(f,multiple=True,radicals=True)
sympy.polys.polytools.Poly.refine_root(f,s,t,eps=None,steps=None,fast=False,check_sqf=False)
sympy.polys.polytools.Poly.rem(f,g,auto=True)
sympy.polys.polytools.Poly.reorder(f,*gens,**args)
sympy.polys.polytools.Poly.replace(f,x,y=None,**_ignore)
sympy.polys.polytools.Poly.resultant(f,g,includePRS=False)
sympy.polys.polytools.Poly.retract(f,field=None)
sympy.polys.polytools.Poly.revert(f,n)
sympy.polys.polytools.Poly.root(f,index,radicals=True)
sympy.polys.polytools.Poly.same_root(f,a,b)
sympy.polys.polytools.Poly.set_domain(f,domain)
sympy.polys.polytools.Poly.set_modulus(f,modulus)
sympy.polys.polytools.Poly.shift(f,a)
sympy.polys.polytools.Poly.slice(f,x,m,n=None)
sympy.polys.polytools.Poly.sqf_list(f,all=False)
sympy.polys.polytools.Poly.sqf_list_include(f,all=False)
sympy.polys.polytools.Poly.sqf_norm(f)
sympy.polys.polytools.Poly.sqf_part(f)
sympy.polys.polytools.Poly.sqr(f)
sympy.polys.polytools.Poly.sturm(self,auto=True)
sympy.polys.polytools.Poly.sub(f,g)
sympy.polys.polytools.Poly.sub_ground(f,coeff)
sympy.polys.polytools.Poly.subresultants(f,g)
sympy.polys.polytools.Poly.terms(f,order=None)
sympy.polys.polytools.Poly.terms_gcd(f)
sympy.polys.polytools.Poly.termwise(f,func,*gens,**args)
sympy.polys.polytools.Poly.to_exact(f)
sympy.polys.polytools.Poly.to_field(f)
sympy.polys.polytools.Poly.to_ring(f)
sympy.polys.polytools.Poly.total_degree(f)
sympy.polys.polytools.Poly.transform(f,p,q)
sympy.polys.polytools.Poly.trunc(f,p)
sympy.polys.polytools.Poly.unify(f,g)
sympy.polys.polytools.Poly.unit(self)
sympy.polys.polytools.Poly.zero(self)
sympy.polys.polytools.PurePoly(Poly)
sympy.polys.polytools.PurePoly.__eq__(self,other)
sympy.polys.polytools.PurePoly.__hash__(self)
sympy.polys.polytools.PurePoly._hashable_content(self)
sympy.polys.polytools.PurePoly._strict_eq(f,g)
sympy.polys.polytools.PurePoly._unify(f,g)
sympy.polys.polytools.PurePoly.free_symbols(self)
sympy.polys.polytools._factors_product(factors)
sympy.polys.polytools._generic_factor(expr,gens,args,method)
sympy.polys.polytools._generic_factor_list(expr,gens,args,method)
sympy.polys.polytools._parallel_poly_from_expr(exprs,opt)
sympy.polys.polytools._polifyit(func)
sympy.polys.polytools._poly_from_expr(expr,opt)
sympy.polys.polytools._sorted_factors(factors,method)
sympy.polys.polytools._symbolic_factor(expr,opt,method)
sympy.polys.polytools._symbolic_factor_list(expr,opt,method)
sympy.polys.polytools._torational_factor_list(p,x)
sympy.polys.polytools._update_args(args,key,value)
sympy.polys.polytools.cancel(f,*gens,_signsimp=True,**args)
sympy.polys.polytools.cofactors(f,g,*gens,**args)
sympy.polys.polytools.compose(f,g,*gens,**args)
sympy.polys.polytools.content(f,*gens,**args)
sympy.polys.polytools.count_roots(f,inf=None,sup=None)
sympy.polys.polytools.decompose(f,*gens,**args)
sympy.polys.polytools.degree(f,gen=0)
sympy.polys.polytools.degree_list(f,*gens,**args)
sympy.polys.polytools.discriminant(f,*gens,**args)
sympy.polys.polytools.div(f,g,*gens,**args)
sympy.polys.polytools.exquo(f,g,*gens,**args)
sympy.polys.polytools.factor(f,*gens,deep=False,**args)
sympy.polys.polytools.factor_list(f,*gens,**args)
sympy.polys.polytools.gcd(f,g=None,*gens,**args)
sympy.polys.polytools.gcd_list(seq,*gens,**args)
sympy.polys.polytools.gcdex(f,g,*gens,**args)
sympy.polys.polytools.gff(f,*gens,**args)
sympy.polys.polytools.gff_list(f,*gens,**args)
sympy.polys.polytools.groebner(F,*gens,**args)
sympy.polys.polytools.ground_roots(f,*gens,**args)
sympy.polys.polytools.half_gcdex(f,g,*gens,**args)
sympy.polys.polytools.intervals(F,all=False,eps=None,inf=None,sup=None,strict=False,fast=False,sqf=False)
sympy.polys.polytools.invert(f,g,*gens,**args)
sympy.polys.polytools.is_zero_dimensional(F,*gens,**args)
sympy.polys.polytools.lcm(f,g=None,*gens,**args)
sympy.polys.polytools.lcm_list(seq,*gens,**args)
sympy.polys.polytools.monic(f,*gens,**args)
sympy.polys.polytools.named_poly(n,f,K,name,x,polys)
sympy.polys.polytools.nroots(f,n=15,maxsteps=50,cleanup=True)
sympy.polys.polytools.nth_power_roots_poly(f,n,*gens,**args)
sympy.polys.polytools.parallel_poly_from_expr(exprs,*gens,**args)
sympy.polys.polytools.pdiv(f,g,*gens,**args)
sympy.polys.polytools.pexquo(f,g,*gens,**args)
sympy.polys.polytools.poly(expr,*gens,**args)
sympy.polys.polytools.poly_from_expr(expr,*gens,**args)
sympy.polys.polytools.pquo(f,g,*gens,**args)
sympy.polys.polytools.prem(f,g,*gens,**args)
sympy.polys.polytools.primitive(f,*gens,**args)
sympy.polys.polytools.quo(f,g,*gens,**args)
sympy.polys.polytools.real_roots(f,multiple=True)
sympy.polys.polytools.reduced(f,G,*gens,**args)
sympy.polys.polytools.refine_root(f,s,t,eps=None,steps=None,fast=False,check_sqf=False)
sympy.polys.polytools.rem(f,g,*gens,**args)
sympy.polys.polytools.resultant(f,g,*gens,includePRS=False,**args)
sympy.polys.polytools.sqf(f,*gens,**args)
sympy.polys.polytools.sqf_list(f,*gens,**args)
sympy.polys.polytools.sqf_norm(f,*gens,**args)
sympy.polys.polytools.sqf_part(f,*gens,**args)
sympy.polys.polytools.sturm(f,*gens,**args)
sympy.polys.polytools.subresultants(f,g,*gens,**args)
sympy.polys.polytools.terms_gcd(f,*gens,**args)
sympy.polys.polytools.to_rational_coeffs(f)
sympy.polys.polytools.total_degree(f,*gens)
sympy.polys.polytools.trunc(f,p,*gens,**args)
sympy.pquo(f,g,*gens,**args)
sympy.prem(f,g,*gens,**args)
sympy.primitive(f,*gens,**args)
sympy.quo(f,g,*gens,**args)
sympy.real_roots(f,multiple=True)
sympy.reduced(f,G,*gens,**args)
sympy.refine_root(f,s,t,eps=None,steps=None,fast=False,check_sqf=False)
sympy.rem(f,g,*gens,**args)
sympy.resultant(f,g,*gens,includePRS=False,**args)
sympy.sqf(f,*gens,**args)
sympy.sqf_list(f,*gens,**args)
sympy.sqf_norm(f,*gens,**args)
sympy.sqf_part(f,*gens,**args)
sympy.sturm(f,*gens,**args)
sympy.subresultants(f,g,*gens,**args)
sympy.terms_gcd(f,*gens,**args)
sympy.total_degree(f,*gens)
sympy.trunc(f,p,*gens,**args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/compatibility.py----------------------------------------
A:sympy.polys.compatibility.(q, r)->gf_div(self.to_gf_dense(f), self.to_gf_dense(g), self.domain.mod, self.domain.dom)
A:sympy.polys.compatibility.LC->list(map(mv.to_dense, LC))
A:sympy.polys.compatibility.TC->dmp_TC(self.to_dense(f), self.domain)
A:sympy.polys.compatibility.result->dmp_zz_wang_hensel_lifting(self.to_dense(f), H, LC, A, p, self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(c, F, G)->dmp_ground_extract(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(p, q)->dup_real_imag(self.wrap(f).drop(1).to_dense(), self.domain)
A:sympy.polys.compatibility.components->dup_decompose(self.to_dense(f), self.domain)
A:sympy.polys.compatibility.(c, F)->dmp_clear_denoms(self.to_dense(f), self.ngens - 1, self.domain, convert=convert)
A:sympy.polys.compatibility.ring->self.clone(domain=self.domain.get_ring())
A:sympy.polys.compatibility.(s, h)->dmp_half_gcdex(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(s, t, h)->dmp_gcdex(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.prs->dmp_subresultants(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(prs, sres)->dmp_inner_subresultants(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(res, prs)->dmp_prs_resultant(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.res->dmp_resultant(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.disc->dmp_discriminant(self.to_dense(f), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(H, F, G)->dmp_inner_gcd(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.H->list(map(uv.to_dense, H))
A:sympy.polys.compatibility.cont->dmp_ground_content(self.to_dense(f), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(cont, prim)->dmp_ground_primitive(self.to_dense(f), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.factors->gf_shoup(self.to_gf_dense(f), self.domain.mod, self.domain.dom)
A:sympy.polys.compatibility.(G, H, S, T)->dup_zz_hensel_step(m, D(f), D(g), D(h), D(s), D(t), self.domain)
A:sympy.polys.compatibility.polys->dup_zz_hensel_lift(p, D(f), list(map(D, f_list)), l, self.domain)
A:sympy.polys.compatibility.F->dup_zz_cyclotomic_poly(n, self.domain)
A:sympy.polys.compatibility.(f, HH, CC)->dmp_zz_wang_lead_coeffs(self.to_dense(f), T, cs, E, H, A, self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(coeff, factors)->gf_factor(self.to_gf_dense(f), self.domain.mod, self.domain.dom)
A:sympy.polys.compatibility.seq->dup_sturm(self.to_dense(f), self.domain)
A:sympy.polys.compatibility.(s, F, R)->dmp_sqf_norm(self.to_dense(f), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(h, cff, cfg)->gf_cofactors(self.to_gf_dense(f), self.to_gf_dense(g), self.domain.mod, self.domain.dom)
A:sympy.polys.compatibility.a->self.to_gf_dense(a)
A:sympy.polys.compatibility.b->self.to_gf_dense(b)
A:sympy.polys.compatibility.c->self.to_gf_dense(c)
A:sympy.polys.compatibility.f->self.to_gf_dense(f)
A:sympy.polys.compatibility.(U, V)->gf_trace_map(a, b, c, n, f, self.domain.mod, self.domain.dom)
sympy.polys.compatibility.IPolys
sympy.polys.compatibility.IPolys.clone(self,symbols=None,domain=None,order=None)
sympy.polys.compatibility.IPolys.dmp_LC(self,f)
sympy.polys.compatibility.IPolys.dmp_TC(self,f)
sympy.polys.compatibility.IPolys.dmp_abs(self,f)
sympy.polys.compatibility.IPolys.dmp_add(self,f,g)
sympy.polys.compatibility.IPolys.dmp_add_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_add_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.dmp_add_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dmp_cancel(self,f,g,include=True)
sympy.polys.compatibility.IPolys.dmp_clear_denoms(self,f,convert=False)
sympy.polys.compatibility.IPolys.dmp_compose(self,f,g)
sympy.polys.compatibility.IPolys.dmp_content(self,f)
sympy.polys.compatibility.IPolys.dmp_degree(self,f)
sympy.polys.compatibility.IPolys.dmp_degree_in(self,f,j)
sympy.polys.compatibility.IPolys.dmp_diff(self,f,m)
sympy.polys.compatibility.IPolys.dmp_diff_eval_in(self,f,m,a,j)
sympy.polys.compatibility.IPolys.dmp_diff_in(self,f,m,j)
sympy.polys.compatibility.IPolys.dmp_discriminant(self,f)
sympy.polys.compatibility.IPolys.dmp_div(self,f,g)
sympy.polys.compatibility.IPolys.dmp_euclidean_prs(self,f,g)
sympy.polys.compatibility.IPolys.dmp_eval(self,f,a)
sympy.polys.compatibility.IPolys.dmp_eval_in(self,f,a,j)
sympy.polys.compatibility.IPolys.dmp_eval_tail(self,f,A)
sympy.polys.compatibility.IPolys.dmp_expand(self,polys)
sympy.polys.compatibility.IPolys.dmp_exquo(self,f,g)
sympy.polys.compatibility.IPolys.dmp_exquo_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_ext_factor(self,f)
sympy.polys.compatibility.IPolys.dmp_factor_list(self,f)
sympy.polys.compatibility.IPolys.dmp_factor_list_include(self,f)
sympy.polys.compatibility.IPolys.dmp_ff_div(self,f,g)
sympy.polys.compatibility.IPolys.dmp_ff_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dmp_ff_prs_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.dmp_gf_factor(self,f)
sympy.polys.compatibility.IPolys.dmp_gf_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.dmp_gf_sqf_part(self,f)
sympy.polys.compatibility.IPolys.dmp_gff_list(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_LC(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_TC(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_content(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_extract(self,f,g)
sympy.polys.compatibility.IPolys.dmp_ground_monic(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_primitive(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_trunc(self,f,p)
sympy.polys.compatibility.IPolys.dmp_half_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.dmp_inner_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_inner_subresultants(self,f,g)
sympy.polys.compatibility.IPolys.dmp_integrate(self,f,m)
sympy.polys.compatibility.IPolys.dmp_integrate_in(self,f,m,j)
sympy.polys.compatibility.IPolys.dmp_invert(self,f,g)
sympy.polys.compatibility.IPolys.dmp_irreducible_p(self,f)
sympy.polys.compatibility.IPolys.dmp_l1_norm(self,f)
sympy.polys.compatibility.IPolys.dmp_l2_norm_squared(self,f)
sympy.polys.compatibility.IPolys.dmp_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dmp_lift(self,f)
sympy.polys.compatibility.IPolys.dmp_max_norm(self,f)
sympy.polys.compatibility.IPolys.dmp_mul(self,f,g)
sympy.polys.compatibility.IPolys.dmp_mul_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_mul_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dmp_neg(self,f)
sympy.polys.compatibility.IPolys.dmp_pdiv(self,f,g)
sympy.polys.compatibility.IPolys.dmp_pexquo(self,f,g)
sympy.polys.compatibility.IPolys.dmp_pow(self,f,n)
sympy.polys.compatibility.IPolys.dmp_pquo(self,f,g)
sympy.polys.compatibility.IPolys.dmp_prem(self,f,g)
sympy.polys.compatibility.IPolys.dmp_primitive(self,f)
sympy.polys.compatibility.IPolys.dmp_primitive_prs(self,f,g)
sympy.polys.compatibility.IPolys.dmp_prs_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dmp_qq_collins_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dmp_qq_heu_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_qq_i_factor(self,f)
sympy.polys.compatibility.IPolys.dmp_quo(self,f,g)
sympy.polys.compatibility.IPolys.dmp_quo_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_rem(self,f,g)
sympy.polys.compatibility.IPolys.dmp_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dmp_rr_div(self,f,g)
sympy.polys.compatibility.IPolys.dmp_rr_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dmp_rr_prs_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.dmp_sqf_list_include(self,f,all=False)
sympy.polys.compatibility.IPolys.dmp_sqf_norm(self,f)
sympy.polys.compatibility.IPolys.dmp_sqf_p(self,f)
sympy.polys.compatibility.IPolys.dmp_sqf_part(self,f)
sympy.polys.compatibility.IPolys.dmp_sqr(self,f)
sympy.polys.compatibility.IPolys.dmp_sub(self,f,g)
sympy.polys.compatibility.IPolys.dmp_sub_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_sub_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.dmp_sub_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dmp_subresultants(self,f,g)
sympy.polys.compatibility.IPolys.dmp_trial_division(self,f,factors)
sympy.polys.compatibility.IPolys.dmp_trunc(self,f,g)
sympy.polys.compatibility.IPolys.dmp_zz_collins_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dmp_zz_diophantine(self,F,c,A,d,p)
sympy.polys.compatibility.IPolys.dmp_zz_factor(self,f)
sympy.polys.compatibility.IPolys.dmp_zz_heu_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_zz_i_factor(self,f)
sympy.polys.compatibility.IPolys.dmp_zz_mignotte_bound(self,f)
sympy.polys.compatibility.IPolys.dmp_zz_modular_resultant(self,f,g,p)
sympy.polys.compatibility.IPolys.dmp_zz_wang(self,f,mod=None,seed=None)
sympy.polys.compatibility.IPolys.dmp_zz_wang_hensel_lifting(self,f,H,LC,A,p)
sympy.polys.compatibility.IPolys.dmp_zz_wang_lead_coeffs(self,f,T,cs,E,H,A)
sympy.polys.compatibility.IPolys.dmp_zz_wang_non_divisors(self,E,cs,ct)
sympy.polys.compatibility.IPolys.domain_new(self,element)
sympy.polys.compatibility.IPolys.drop(self,gen)
sympy.polys.compatibility.IPolys.dup_LC(self,f)
sympy.polys.compatibility.IPolys.dup_TC(self,f)
sympy.polys.compatibility.IPolys.dup_abs(self,f)
sympy.polys.compatibility.IPolys.dup_add(self,f,g)
sympy.polys.compatibility.IPolys.dup_add_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_add_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.dup_add_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dup_cancel(self,f,g,include=True)
sympy.polys.compatibility.IPolys.dup_clear_denoms(self,f,convert=False)
sympy.polys.compatibility.IPolys.dup_compose(self,f,g)
sympy.polys.compatibility.IPolys.dup_content(self,f)
sympy.polys.compatibility.IPolys.dup_count_complex_roots(self,f,inf=None,sup=None,exclude=None)
sympy.polys.compatibility.IPolys.dup_count_real_roots(self,f,inf=None,sup=None)
sympy.polys.compatibility.IPolys.dup_cyclotomic_p(self,f,irreducible=False)
sympy.polys.compatibility.IPolys.dup_decompose(self,f)
sympy.polys.compatibility.IPolys.dup_degree(self,f)
sympy.polys.compatibility.IPolys.dup_diff(self,f,m)
sympy.polys.compatibility.IPolys.dup_discriminant(self,f)
sympy.polys.compatibility.IPolys.dup_div(self,f,g)
sympy.polys.compatibility.IPolys.dup_euclidean_prs(self,f,g)
sympy.polys.compatibility.IPolys.dup_eval(self,f,a)
sympy.polys.compatibility.IPolys.dup_expand(self,polys)
sympy.polys.compatibility.IPolys.dup_exquo(self,f,g)
sympy.polys.compatibility.IPolys.dup_exquo_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_ext_factor(self,f)
sympy.polys.compatibility.IPolys.dup_extract(self,f,g)
sympy.polys.compatibility.IPolys.dup_factor_list(self,f)
sympy.polys.compatibility.IPolys.dup_factor_list_include(self,f)
sympy.polys.compatibility.IPolys.dup_ff_div(self,f,g)
sympy.polys.compatibility.IPolys.dup_ff_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dup_ff_prs_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.dup_gf_factor(self,f)
sympy.polys.compatibility.IPolys.dup_gf_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.dup_gf_sqf_part(self,f)
sympy.polys.compatibility.IPolys.dup_gff_list(self,f)
sympy.polys.compatibility.IPolys.dup_half_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.dup_inner_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_inner_isolate_negative_roots(self,f,inf=None,sup=None,eps=None,fast=False,mobius=False)
sympy.polys.compatibility.IPolys.dup_inner_isolate_positive_roots(self,f,eps=None,inf=None,sup=None,fast=False,mobius=False)
sympy.polys.compatibility.IPolys.dup_inner_isolate_real_roots(self,f,eps=None,fast=False)
sympy.polys.compatibility.IPolys.dup_inner_refine_real_root(self,f,M,eps=None,steps=None,disjoint=None,fast=False,mobius=False)
sympy.polys.compatibility.IPolys.dup_inner_subresultants(self,f,g)
sympy.polys.compatibility.IPolys.dup_integrate(self,f,m)
sympy.polys.compatibility.IPolys.dup_invert(self,f,g)
sympy.polys.compatibility.IPolys.dup_irreducible_p(self,f)
sympy.polys.compatibility.IPolys.dup_isolate_all_roots(self,f,eps=None,inf=None,sup=None,fast=False)
sympy.polys.compatibility.IPolys.dup_isolate_all_roots_sqf(self,f,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.polys.compatibility.IPolys.dup_isolate_complex_roots_sqf(self,f,eps=None,inf=None,sup=None,blackbox=False)
sympy.polys.compatibility.IPolys.dup_isolate_real_roots(self,f,eps=None,inf=None,sup=None,basis=False,fast=False)
sympy.polys.compatibility.IPolys.dup_isolate_real_roots_list(self,polys,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.polys.compatibility.IPolys.dup_isolate_real_roots_sqf(self,f,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.polys.compatibility.IPolys.dup_l1_norm(self,f)
sympy.polys.compatibility.IPolys.dup_l2_norm_squared(self,f)
sympy.polys.compatibility.IPolys.dup_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dup_lshift(self,f,n)
sympy.polys.compatibility.IPolys.dup_max_norm(self,f)
sympy.polys.compatibility.IPolys.dup_mirror(self,f)
sympy.polys.compatibility.IPolys.dup_monic(self,f)
sympy.polys.compatibility.IPolys.dup_mul(self,f,g)
sympy.polys.compatibility.IPolys.dup_mul_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_mul_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dup_neg(self,f)
sympy.polys.compatibility.IPolys.dup_outer_refine_real_root(self,f,s,t,eps=None,steps=None,disjoint=None,fast=False)
sympy.polys.compatibility.IPolys.dup_pdiv(self,f,g)
sympy.polys.compatibility.IPolys.dup_pexquo(self,f,g)
sympy.polys.compatibility.IPolys.dup_pow(self,f,n)
sympy.polys.compatibility.IPolys.dup_pquo(self,f,g)
sympy.polys.compatibility.IPolys.dup_prem(self,f,g)
sympy.polys.compatibility.IPolys.dup_primitive(self,f)
sympy.polys.compatibility.IPolys.dup_primitive_prs(self,f,g)
sympy.polys.compatibility.IPolys.dup_prs_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dup_qq_heu_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_qq_i_factor(self,f)
sympy.polys.compatibility.IPolys.dup_quo(self,f,g)
sympy.polys.compatibility.IPolys.dup_quo_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_real_imag(self,f)
sympy.polys.compatibility.IPolys.dup_refine_real_root(self,f,s,t,eps=None,steps=None,disjoint=None,fast=False)
sympy.polys.compatibility.IPolys.dup_rem(self,f,g)
sympy.polys.compatibility.IPolys.dup_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dup_revert(self,f,n)
sympy.polys.compatibility.IPolys.dup_root_lower_bound(self,f)
sympy.polys.compatibility.IPolys.dup_root_upper_bound(self,f)
sympy.polys.compatibility.IPolys.dup_rr_div(self,f,g)
sympy.polys.compatibility.IPolys.dup_rr_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dup_rr_prs_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_rshift(self,f,n)
sympy.polys.compatibility.IPolys.dup_scale(self,f,a)
sympy.polys.compatibility.IPolys.dup_shift(self,f,a)
sympy.polys.compatibility.IPolys.dup_sign_variations(self,f)
sympy.polys.compatibility.IPolys.dup_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.dup_sqf_list_include(self,f,all=False)
sympy.polys.compatibility.IPolys.dup_sqf_norm(self,f)
sympy.polys.compatibility.IPolys.dup_sqf_p(self,f)
sympy.polys.compatibility.IPolys.dup_sqf_part(self,f)
sympy.polys.compatibility.IPolys.dup_sqr(self,f)
sympy.polys.compatibility.IPolys.dup_step_refine_real_root(self,f,M,fast=False)
sympy.polys.compatibility.IPolys.dup_sturm(self,f)
sympy.polys.compatibility.IPolys.dup_sub(self,f,g)
sympy.polys.compatibility.IPolys.dup_sub_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_sub_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.dup_sub_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dup_subresultants(self,f,g)
sympy.polys.compatibility.IPolys.dup_transform(self,f,p,q)
sympy.polys.compatibility.IPolys.dup_trial_division(self,f,factors)
sympy.polys.compatibility.IPolys.dup_trunc(self,f,p)
sympy.polys.compatibility.IPolys.dup_zz_cyclotomic_factor(self,f)
sympy.polys.compatibility.IPolys.dup_zz_cyclotomic_poly(self,n)
sympy.polys.compatibility.IPolys.dup_zz_diophantine(self,F,m,p)
sympy.polys.compatibility.IPolys.dup_zz_factor(self,f)
sympy.polys.compatibility.IPolys.dup_zz_factor_sqf(self,f)
sympy.polys.compatibility.IPolys.dup_zz_hensel_lift(self,p,f,f_list,l)
sympy.polys.compatibility.IPolys.dup_zz_hensel_step(self,m,f,g,h,s,t)
sympy.polys.compatibility.IPolys.dup_zz_heu_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_zz_i_factor(self,f)
sympy.polys.compatibility.IPolys.dup_zz_irreducible_p(self,f)
sympy.polys.compatibility.IPolys.dup_zz_mignotte_bound(self,f)
sympy.polys.compatibility.IPolys.dup_zz_zassenhaus(self,f)
sympy.polys.compatibility.IPolys.fateman_poly_F_1(self)
sympy.polys.compatibility.IPolys.fateman_poly_F_2(self)
sympy.polys.compatibility.IPolys.fateman_poly_F_3(self)
sympy.polys.compatibility.IPolys.from_dense(self,element)
sympy.polys.compatibility.IPolys.from_dict(self,d)
sympy.polys.compatibility.IPolys.from_gf_dense(self,element)
sympy.polys.compatibility.IPolys.gf_LC(self,f)
sympy.polys.compatibility.IPolys.gf_Qmatrix(self,f)
sympy.polys.compatibility.IPolys.gf_TC(self,f)
sympy.polys.compatibility.IPolys.gf_add(self,f,g)
sympy.polys.compatibility.IPolys.gf_add_ground(self,f,a)
sympy.polys.compatibility.IPolys.gf_add_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.gf_berlekamp(self,f)
sympy.polys.compatibility.IPolys.gf_cofactors(self,f,g)
sympy.polys.compatibility.IPolys.gf_compose(self,f,g)
sympy.polys.compatibility.IPolys.gf_compose_mod(self,g,h,f)
sympy.polys.compatibility.IPolys.gf_ddf_shoup(self,f)
sympy.polys.compatibility.IPolys.gf_ddf_zassenhaus(self,f)
sympy.polys.compatibility.IPolys.gf_degree(self,f)
sympy.polys.compatibility.IPolys.gf_diff(self,f)
sympy.polys.compatibility.IPolys.gf_div(self,f,g)
sympy.polys.compatibility.IPolys.gf_edf_shoup(self,f,n)
sympy.polys.compatibility.IPolys.gf_edf_zassenhaus(self,f,n)
sympy.polys.compatibility.IPolys.gf_eval(self,f,a)
sympy.polys.compatibility.IPolys.gf_expand(self,F)
sympy.polys.compatibility.IPolys.gf_exquo(self,f,g)
sympy.polys.compatibility.IPolys.gf_factor(self,f)
sympy.polys.compatibility.IPolys.gf_factor_sqf(self,f,method=None)
sympy.polys.compatibility.IPolys.gf_from_dict(self,f)
sympy.polys.compatibility.IPolys.gf_from_int_poly(self,f)
sympy.polys.compatibility.IPolys.gf_gcd(self,f,g)
sympy.polys.compatibility.IPolys.gf_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.gf_irred_p_ben_or(self,f)
sympy.polys.compatibility.IPolys.gf_irred_p_rabin(self,f)
sympy.polys.compatibility.IPolys.gf_irreducible(self,n)
sympy.polys.compatibility.IPolys.gf_irreducible_p(self,f)
sympy.polys.compatibility.IPolys.gf_lcm(self,f,g)
sympy.polys.compatibility.IPolys.gf_lshift(self,f,n)
sympy.polys.compatibility.IPolys.gf_monic(self,f)
sympy.polys.compatibility.IPolys.gf_mul(self,f,g)
sympy.polys.compatibility.IPolys.gf_mul_ground(self,f,a)
sympy.polys.compatibility.IPolys.gf_multi_eval(self,f,A)
sympy.polys.compatibility.IPolys.gf_neg(self,f)
sympy.polys.compatibility.IPolys.gf_normal(self,f)
sympy.polys.compatibility.IPolys.gf_pow(self,f,n)
sympy.polys.compatibility.IPolys.gf_pow_mod(self,f,n,g)
sympy.polys.compatibility.IPolys.gf_quo(self,f,g)
sympy.polys.compatibility.IPolys.gf_quo_ground(self,f,a)
sympy.polys.compatibility.IPolys.gf_random(self,n)
sympy.polys.compatibility.IPolys.gf_rem(self,f,g)
sympy.polys.compatibility.IPolys.gf_rshift(self,f,n)
sympy.polys.compatibility.IPolys.gf_shoup(self,f)
sympy.polys.compatibility.IPolys.gf_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.gf_sqf_p(self,f)
sympy.polys.compatibility.IPolys.gf_sqf_part(self,f)
sympy.polys.compatibility.IPolys.gf_sqr(self,f)
sympy.polys.compatibility.IPolys.gf_strip(self,f)
sympy.polys.compatibility.IPolys.gf_sub(self,f,g)
sympy.polys.compatibility.IPolys.gf_sub_ground(self,f,a)
sympy.polys.compatibility.IPolys.gf_sub_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.gf_to_dict(self,f,symmetric=True)
sympy.polys.compatibility.IPolys.gf_to_int_poly(self,f,symmetric=True)
sympy.polys.compatibility.IPolys.gf_trace_map(self,a,b,c,n,f)
sympy.polys.compatibility.IPolys.gf_trunc(self,f)
sympy.polys.compatibility.IPolys.gf_zassenhaus(self,f)
sympy.polys.compatibility.IPolys.ground_new(self,element)
sympy.polys.compatibility.IPolys.to_dense(self,element)
sympy.polys.compatibility.IPolys.to_gf_dense(self,element)
sympy.polys.compatibility.IPolys.to_ground(self)
sympy.polys.compatibility.IPolys.wrap(self,element)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/ring_series.py----------------------------------------
A:sympy.polys.ring_series.terms->list(p1.items())
A:sympy.polys.ring_series.deg->p.set_ring(R).degree()
A:sympy.polys.ring_series.cv->_rs_series(expr, series, a, prec=prec_do).listcoeffs()
A:sympy.polys.ring_series.mv->_rs_series(expr, series, a, prec=prec_do).listmonoms()
A:sympy.polys.ring_series.res->rs_trunc(res, x, prec)
A:sympy.polys.ring_series.i->R.add_gens([a]).gens.index(a)
A:sympy.polys.ring_series.index->R.add_gens([a]).gens.index(x)
A:sympy.polys.ring_series.(num, den)->power.as_numer_denom()
A:sympy.polys.ring_series.n->len(args)
A:sympy.polys.ring_series.p1->_rs_series(expr, series, a, prec=prec_do)
A:sympy.polys.ring_series.r->rs_puiseux(rs_cot, p, x, prec)
A:sympy.polys.ring_series.n1->QQ(1, n)
A:sympy.polys.ring_series.iv->R.add_gens([a]).gens.index(x)
A:sympy.polys.ring_series.items2->list(p2.items())
A:sympy.polys.ring_series.exp->monomial_mul(exp1, exp2)
A:sympy.polys.ring_series.items->list(p1.items())
A:sympy.polys.ring_series.p->p.set_ring(R).set_ring(R)
A:sympy.polys.ring_series.e2->monomial_mul(expv, expv)
A:sympy.polys.ring_series.np->int(n.p)
A:sympy.polys.ring_series.nq->int(n.q)
A:sympy.polys.ring_series.p2->rs_series_inversion(p1, x, prec)
A:sympy.polys.ring_series.d->R(0)
A:sympy.polys.ring_series.p_keys->sorted(p.keys())
A:sympy.polys.ring_series.(q, r)->divmod(power, 2)
A:sympy.polys.ring_series.d[i, power]->rs_pow(d[i, 1], power, x, prec)
A:sympy.polys.ring_series.miv->tuple(a)
A:sympy.polys.ring_series.prec->int(prec)
A:sympy.polys.ring_series.one->R(1)
A:sympy.polys.ring_series.expv1->tuple(expv1)
A:sympy.polys.ring_series.nx->R.add_gens([a]).gens.index(x)
A:sympy.polys.ring_series.y->R(y)
A:sympy.polys.ring_series.ny->R.add_gens([a]).gens.index(y)
A:sympy.polys.ring_series.a->R(a)
A:sympy.polys.ring_series.sp->rs_subs(p, {x: r}, y, i + 1)
A:sympy.polys.ring_series.q->_invert_monoms(q)
A:sympy.polys.ring_series.J->int(math.sqrt(n) + 1)
A:sympy.polys.ring_series.(K, r)->divmod(n, J)
A:sympy.polys.ring_series.pj->rs_mul(ax[-1], p, x, prec)
A:sympy.polys.ring_series.b->rs_mul(b, pj, x, prec)
A:sympy.polys.ring_series.s->rs_mul(s, p, x, prec)
A:sympy.polys.ring_series.s1->rs_mul(s1, b, x, prec)
A:sympy.polys.ring_series.mn->tuple(mn)
A:sympy.polys.ring_series.e->rs_exp(p1, x, precx)
A:sympy.polys.ring_series.p1[e]->R.add_gens([a]).domain_new(p[expv] / (expv[n] + 1))
A:sympy.polys.ring_series.(R1, _x)->ring('_x', _R.domain)
A:sympy.polys.ring_series.h->int(args[-1])
A:sympy.polys.ring_series.k1->list(k)
A:sympy.polys.ring_series.tmp->rs_mul(tmp, 1 - rs_square(p1, x, prec), x, precx)
A:sympy.polys.ring_series.c_expr->c.set_ring(R).as_expr()
A:sympy.polys.ring_series.const->R(tanh(c))
A:sympy.polys.ring_series.m->QQ(m, n)
A:sympy.polys.ring_series.c->c.set_ring(R).set_ring(R)
A:sympy.polys.ring_series.R->R.add_gens([a]).add_gens([a])
A:sympy.polys.ring_series.x->x.set_ring(R).set_ring(R)
A:sympy.polys.ring_series.dlog->rs_mul(dlog, _series_inversion1(p, x, prec), x, prec - 1)
A:sympy.polys.ring_series.p3->rs_mul(p1.diff(x), p2, x, prec)
A:sympy.polys.ring_series.mo->R(-1)
A:sympy.polys.ring_series.dp->rs_diff(p, x)
A:sympy.polys.ring_series.t2->rs_square(t, x, prec)
A:sympy.polys.ring_series.t->rs_series_inversion(1 + const * t1, x, prec)
A:sympy.polys.ring_series.(i, m)->_check_series_var(p, x, 'cot')
A:sympy.polys.ring_series.(c, s)->rs_cos_sin(p, x, prec1)
A:sympy.polys.ring_series.p_cos->rs_cos(p1, x, prec)
A:sympy.polys.ring_series.p_sin->rs_sin(p1, x, prec)
A:sympy.polys.ring_series.t1->rs_tanh(p1, x, prec)
A:sympy.polys.ring_series.np1->rs_newton(p1, x, prec)
A:sympy.polys.ring_series.np1e->rs_hadamard_exp(np1)
A:sympy.polys.ring_series.np2->rs_newton(p2, x, prec)
A:sympy.polys.ring_series.np2e->rs_hadamard_exp(np2)
A:sympy.polys.ring_series.np3e->rs_mul(np1e, np2e, x, prec)
A:sympy.polys.ring_series.np3->rs_hadamard_exp(np3e, True)
A:sympy.polys.ring_series.series->_rs_series(expr, series, a, prec)
A:sympy.polys.ring_series.(R1, series)->sring(arg, domain=QQ, expand=False, series=True)
A:sympy.polys.ring_series.series_inner->_rs_series(expr.base, R(expr.base), a, prec)
A:sympy.polys.ring_series.(R1, _)->sring(expr.base, domain=QQ, expand=False, series=True)
A:sympy.polys.ring_series.min_pows->list(map(rs_min_pow, args, [R(arg) for arg in args], [a] * len(args)))
A:sympy.polys.ring_series.sum_pows->sum(min_pows)
A:sympy.polys.ring_series._series->_series.set_ring(R).set_ring(R)
A:sympy.polys.ring_series.(R, series)->sring(expr, domain=QQ, expand=False, series=True)
A:sympy.polys.ring_series.gen->gen.set_ring(p1.ring).set_ring(p1.ring)
A:sympy.polys.ring_series.prec_do->ceiling(prec + (prec - prec_got) * more / (new_prec - prec_got))
sympy.polys.ring_series._atan(p,iv,prec)
sympy.polys.ring_series._atanh(p,x,prec)
sympy.polys.ring_series._check_series_var(p,x,name)
sympy.polys.ring_series._coefficient_t(p,t)
sympy.polys.ring_series._exp1(p,x,prec)
sympy.polys.ring_series._get_constant_term(p,x)
sympy.polys.ring_series._giant_steps(target)
sympy.polys.ring_series._has_constant_term(p,x)
sympy.polys.ring_series._invert_monoms(p1)
sympy.polys.ring_series._nth_root1(p,n,x,prec)
sympy.polys.ring_series._rs_series(expr,series_rs,a,prec)
sympy.polys.ring_series._series_inversion1(p,x,prec)
sympy.polys.ring_series._tan1(p,x,prec)
sympy.polys.ring_series._tanh(p,x,prec)
sympy.polys.ring_series.mul_xin(p,i,n)
sympy.polys.ring_series.pow_xin(p,i,n)
sympy.polys.ring_series.rs_LambertW(p,x,prec)
sympy.polys.ring_series.rs_asin(p,x,prec)
sympy.polys.ring_series.rs_atan(p,x,prec)
sympy.polys.ring_series.rs_atanh(p,x,prec)
sympy.polys.ring_series.rs_compose_add(p1,p2)
sympy.polys.ring_series.rs_cos(p,x,prec)
sympy.polys.ring_series.rs_cos_sin(p,x,prec)
sympy.polys.ring_series.rs_cosh(p,x,prec)
sympy.polys.ring_series.rs_cot(p,x,prec)
sympy.polys.ring_series.rs_diff(p,x)
sympy.polys.ring_series.rs_exp(p,x,prec)
sympy.polys.ring_series.rs_fun(p,f,*args)
sympy.polys.ring_series.rs_hadamard_exp(p1,inverse=False)
sympy.polys.ring_series.rs_integrate(p,x)
sympy.polys.ring_series.rs_is_puiseux(p,x)
sympy.polys.ring_series.rs_log(p,x,prec)
sympy.polys.ring_series.rs_min_pow(expr,series_rs,a)
sympy.polys.ring_series.rs_mul(p1,p2,x,prec)
sympy.polys.ring_series.rs_newton(p,x,prec)
sympy.polys.ring_series.rs_nth_root(p,n,x,prec)
sympy.polys.ring_series.rs_pow(p1,n,x,prec)
sympy.polys.ring_series.rs_puiseux(f,p,x,prec)
sympy.polys.ring_series.rs_puiseux2(f,p,q,x,prec)
sympy.polys.ring_series.rs_series(expr,a,prec)
sympy.polys.ring_series.rs_series_from_list(p,c,x,prec,concur=1)
sympy.polys.ring_series.rs_series_inversion(p,x,prec)
sympy.polys.ring_series.rs_series_reversion(p,x,n,y)
sympy.polys.ring_series.rs_sin(p,x,prec)
sympy.polys.ring_series.rs_sinh(p,x,prec)
sympy.polys.ring_series.rs_square(p1,x,prec)
sympy.polys.ring_series.rs_subs(p,rules,x,prec)
sympy.polys.ring_series.rs_tan(p,x,prec)
sympy.polys.ring_series.rs_tanh(p,x,prec)
sympy.polys.ring_series.rs_trunc(p1,x,prec)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/specialpolys.py----------------------------------------
A:sympy.polys.specialpolys.x->Dummy('x')
A:sympy.polys.specialpolys.p->nextprime(p)
A:sympy.polys.specialpolys.poly->Poly(dup_random(n, inf, sup, domain), x, domain=domain)
A:sympy.polys.specialpolys.gens->_analyze_gens(gens)
A:sympy.polys.specialpolys.ok->getattr(x, 'free_symbols', None)
A:sympy.polys.specialpolys.X->symbols('%s:%s' % (X, n))
A:sympy.polys.specialpolys.Y->dmp_raise(f, m, 1, K)
A:sympy.polys.specialpolys.numert->Mul(*[x - X[i] for i in range(n)])
A:sympy.polys.specialpolys.denom->Mul(*[X[i] - X[j] for j in range(n) if i != j])
A:sympy.polys.specialpolys.F->Poly((y_0 ** (n + 1) - u - 2) ** 2, *Y)
A:sympy.polys.specialpolys.G->Poly((y_0 ** (n + 1) + u + 2) ** 2, *Y)
A:sympy.polys.specialpolys.H->Poly((y_0 ** (n + 1) + u + 1) ** 2, *Y)
A:sympy.polys.specialpolys.U->dmp_add_term(u, dmp_ground(K(1), m), 0, n, K)
A:sympy.polys.specialpolys.V->dmp_add_term(u, dmp_ground(K(2), m), 0, n, K)
A:sympy.polys.specialpolys.W->dmp_add_term(v, dmp_ground(K(1), m), 0, n, K)
A:sympy.polys.specialpolys.u->dmp_add_term([u], dmp_one(i, K), n + 1, i + 1, K)
A:sympy.polys.specialpolys.v->dmp_add_term(u, dmp_one(n - 2, K), 0, n - 1, K)
A:sympy.polys.specialpolys.f->dmp_sqr(dmp_add_term([dmp_neg(v, n - 1, K)], dmp_one(n - 1, K), n + 1, n, K), n, K)
A:sympy.polys.specialpolys.g->dmp_sqr(dmp_add_term([v], dmp_one(n - 1, K), n + 1, n, K), n, K)
A:sympy.polys.specialpolys.h->dmp_sqr(dmp_add_term([v], dmp_one(n - 1, K), n + 1, n, K), n, K)
A:sympy.polys.specialpolys.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.specialpolys.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.specialpolys.(R, x, y)->ring('x,y', ZZ)
sympy.cyclotomic_poly(n,x=None,polys=False)
sympy.interpolating_poly(n,x,X='x',Y='y')
sympy.polys.specialpolys._f_0()
sympy.polys.specialpolys._f_1()
sympy.polys.specialpolys._f_2()
sympy.polys.specialpolys._f_3()
sympy.polys.specialpolys._f_4()
sympy.polys.specialpolys._f_5()
sympy.polys.specialpolys._f_6()
sympy.polys.specialpolys._w_1()
sympy.polys.specialpolys._w_2()
sympy.polys.specialpolys.cyclotomic_poly(n,x=None,polys=False)
sympy.polys.specialpolys.dmp_fateman_poly_F_1(n,K)
sympy.polys.specialpolys.dmp_fateman_poly_F_2(n,K)
sympy.polys.specialpolys.dmp_fateman_poly_F_3(n,K)
sympy.polys.specialpolys.f_polys()
sympy.polys.specialpolys.fateman_poly_F_1(n)
sympy.polys.specialpolys.fateman_poly_F_2(n)
sympy.polys.specialpolys.fateman_poly_F_3(n)
sympy.polys.specialpolys.interpolating_poly(n,x,X='x',Y='y')
sympy.polys.specialpolys.random_poly(x,n,inf,sup,domain=ZZ,polys=False)
sympy.polys.specialpolys.swinnerton_dyer_poly(n,x=None,polys=False)
sympy.polys.specialpolys.symmetric_poly(n,*gens,polys=False)
sympy.polys.specialpolys.w_polys()
sympy.random_poly(x,n,inf,sup,domain=ZZ,polys=False)
sympy.swinnerton_dyer_poly(n,x=None,polys=False)
sympy.symmetric_poly(n,*gens,polys=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polyroots.py----------------------------------------
A:sympy.polys.polyroots.z->Symbol('z')
A:sympy.polys.polyroots.dom->f.per(f.rep.convert(EX)).get_domain()
A:sympy.polys.polyroots.r->Pow(coeffs[0], S.One / monoms[0])
A:sympy.polys.polyroots.(a, b, c)->f.per(f.rep.convert(EX)).all_coeffs()
A:sympy.polys.polyroots.d->discriminant(f)
A:sympy.polys.polyroots.co->Mul(*co)
A:sympy.polys.polyroots.r1->roots_quadratic(h1)
A:sympy.polys.polyroots.R->max(xsols)
A:sympy.polys.polyroots.B->_simplify(B)
A:sympy.polys.polyroots.D->factor_terms(_sqrt(d) / A)
A:sympy.polys.polyroots.(a, b, c, d)->f.per(f.rep.convert(EX)).all_coeffs()
A:sympy.polys.polyroots.(_, a, b, c)->f.per(f.rep.convert(EX)).monic().all_coeffs()
A:sympy.polys.polyroots.(x1, x2)->roots([1, a, b], multiple=True)
A:sympy.polys.polyroots.(y1, y2)->roots([1, 0, p], multiple=True)
A:sympy.polys.polyroots.C->root((D1 + sqrt(D1 ** 2 - 4 * D0 ** 3)) / 2, 3)
A:sympy.polys.polyroots.x->Dummy('x')
A:sympy.polys.polyroots.xsols->list(roots(Poly(eq, x), cubics=False).keys())
A:sympy.polys.polyroots.c1->sqrt(R)
A:sympy.polys.polyroots.c2->sqrt(A + B)
A:sympy.polys.polyroots.c3->sqrt(A - B)
A:sympy.polys.polyroots.(_, a, b, c, d)->f.per(f.rep.convert(EX)).monic().all_coeffs()
A:sympy.polys.polyroots.g->Poly(f, extension=root(-1, n))
A:sympy.polys.polyroots.(z1, z2)->roots_quadratic(g)
A:sympy.polys.polyroots.h1->Poly(x ** 2 - z1 * x + m, x)
A:sympy.polys.polyroots.h2->Poly(x ** 2 - z2 * x + m, x)
A:sympy.polys.polyroots.r2->roots_quadratic(h2)
A:sympy.polys.polyroots.f->f.per(f.rep.convert(EX)).per(f.rep.convert(EX))
A:sympy.polys.polyroots.sols->_roots_quartic_euler(e, f, g, aon4)
A:sympy.polys.polyroots.TH->Rational(1, 3)
A:sympy.polys.polyroots.w->sqrt(e + 2 * y)
A:sympy.polys.polyroots.root->sqrt(q ** 2 / 4 + p ** 3 / 27)
A:sympy.polys.polyroots.p->nextprime(p)
A:sympy.polys.polyroots.n->f.per(f.rep.convert(EX)).per(f.rep.convert(EX)).degree()
A:sympy.polys.polyroots.alpha->alpha.expand(complex=True).expand(complex=True)
A:sympy.polys.polyroots.pair->list(reversed(pair))
A:sympy.polys.polyroots.zeta->exp(k * d).expand(complex=True)
A:sympy.polys.polyroots.U->int(math.ceil(m * (float(P) / b)))
A:sympy.polys.polyroots.(L, U)->_inv_totient_estimate(f.degree())
A:sympy.polys.polyroots.(coeff_5, coeff_4, p_, q_, r_, s_)->f.per(f.rep.convert(EX)).per(f.rep.convert(EX)).all_coeffs()
A:sympy.polys.polyroots.(_, coeff_4, p_, q_, r_, s_)->f.per(f.rep.convert(EX)).per(f.rep.convert(EX)).all_coeffs()
A:sympy.polys.polyroots.quintic->PolyQuintic(f)
A:sympy.polys.polyroots.theta->_factor[0].root(0)
A:sympy.polys.polyroots.delta->sqrt(d)
A:sympy.polys.polyroots.T->PolyQuintic(f).T(theta, d)
A:sympy.polys.polyroots.tol->S(1e-10)
A:sympy.polys.polyroots.l0->PolyQuintic(f).l0(theta)
A:sympy.polys.polyroots.Stwo->S(2)
A:sympy.polys.polyroots.l1->_quintic_simplify((-alpha + sqrt(disc)) / Stwo)
A:sympy.polys.polyroots.l4->_quintic_simplify((-alpha - sqrt(disc)) / Stwo)
A:sympy.polys.polyroots.l2->_quintic_simplify((-alpha_bar + sqrt(disc_bar)) / Stwo)
A:sympy.polys.polyroots.l3->_quintic_simplify((-alpha_bar - sqrt(disc_bar)) / Stwo)
A:sympy.polys.polyroots.order->PolyQuintic(f).order(theta, d)
A:sympy.polys.polyroots.R1->R1.as_real_imag().as_real_imag()
A:sympy.polys.polyroots.R2->R2.as_real_imag().as_real_imag()
A:sympy.polys.polyroots.R3->R3.as_real_imag().as_real_imag()
A:sympy.polys.polyroots.R4->R4.as_real_imag().as_real_imag()
A:sympy.polys.polyroots.x1->sqrt(2)
A:sympy.polys.polyroots.x2->sqrt(5)
A:sympy.polys.polyroots.x3->sqrt(5 - x2)
A:sympy.polys.polyroots.Res[1][i]->_quintic_simplify(s.xreplace({z: R1[0] + I * R1[1]}))
A:sympy.polys.polyroots.Res[2][i]->_quintic_simplify(s.xreplace({z: R2[0] + I * R2[1]}))
A:sympy.polys.polyroots.Res[3][i]->_quintic_simplify(s.xreplace({z: R3[0] + I * R3[1]}))
A:sympy.polys.polyroots.Res[4][i]->_quintic_simplify(s.xreplace({z: R4[0] + I * R4[1]}))
A:sympy.polys.polyroots.Res_n[i][j]->_quintic_simplify(Res[i][j]).n()
A:sympy.polys.polyroots.Res[i][j]->_quintic_simplify(Res[i][j])
A:sympy.polys.polyroots.(u, v)->PolyQuintic(f).uv(theta, d)
A:sympy.polys.polyroots.testplus->(u + v * delta * sqrt(5)).n()
A:sympy.polys.polyroots.testminus->(u - v * delta * sqrt(5)).n()
A:sympy.polys.polyroots.r4_n->r4.n()
A:sympy.polys.polyroots.saw->set()
A:sympy.polys.polyroots.expr->cancel(expr)
A:sympy.polys.polyroots.(monoms, coeffs)->list(zip(*poly.terms()))
A:sympy.polys.polyroots.(monoms,)->list(zip(*monoms))
A:sympy.polys.polyroots.coeffs->list(reversed(coeffs))
A:sympy.polys.polyroots.divs->reversed(divisors(gcd_list(coeffs))[1:])
A:sympy.polys.polyroots.div->next(divs)
A:sympy.polys.polyroots.(_, poly)->poly_func(poly).clear_denoms(convert=True)
A:sympy.polys.polyroots.poly->poly_func(poly)
A:sympy.polys.polyroots.strips->list(zip(*poly.monoms()))
A:sympy.polys.polyroots.gens->list(poly.gens[1:])
A:sympy.polys.polyroots.strip->reversed(strip)
A:sympy.polys.polyroots.basis->_integer_basis(poly)
A:sympy.polys.polyroots.flags->dict(flags)
A:sympy.polys.polyroots.F->Poly(f, *gens, **args)
A:sympy.polys.polyroots.(con, dep)->f.per(f.rep.convert(EX)).per(f.rep.convert(EX)).as_expr().as_independent(*f.gens)
A:sympy.polys.polyroots.(b, e)->i.as_base_exp()
A:sympy.polys.polyroots.rv->roots(Poly((dep + con).xreplace(dict(bases)), *f.gens), *F.gens, auto=auto, cubics=cubics, trig=trig, quartics=quartics, quintics=quintics, multiple=multiple, filter=filter, predicate=predicate, **flags)
A:sympy.polys.polyroots.dumgens->symbols('x:%d' % len(f.gens), cls=Dummy)
A:sympy.polys.polyroots.((k,), f)->f.per(f.rep.convert(EX)).per(f.rep.convert(EX)).terms_gcd()
A:sympy.polys.polyroots.(coeff, f)->preprocess_roots(f)
A:sympy.polys.polyroots.(_, factors)->Poly(f.as_expr()).factor_list()
A:sympy.polys.polyroots.res->to_rational_coeffs(f)
A:sympy.polys.polyroots.result->roots(f)
A:sympy.polys.polyroots.args->dict(args)
A:sympy.polys.polyroots.zeros->roots(F, filter=filter)
A:sympy.polys.polyroots.G->reduce(lambda p, q: p * q, factors)
sympy.polys.polyroots._integer_basis(poly)
sympy.polys.polyroots._inv_totient_estimate(m)
sympy.polys.polyroots._quintic_simplify(expr)
sympy.polys.polyroots._roots_quartic_euler(p,q,r,a)
sympy.polys.polyroots.preprocess_roots(poly)
sympy.polys.polyroots.root_factors(f,*gens,filter=None,**args)
sympy.polys.polyroots.roots(f,*gens,auto=True,cubics=True,trig=False,quartics=True,quintics=False,multiple=False,filter=None,predicate=None,strict=False,**flags)
sympy.polys.polyroots.roots_binomial(f)
sympy.polys.polyroots.roots_cubic(f,trig=False)
sympy.polys.polyroots.roots_cyclotomic(f,factor=False)
sympy.polys.polyroots.roots_linear(f)
sympy.polys.polyroots.roots_quadratic(f)
sympy.polys.polyroots.roots_quartic(f)
sympy.polys.polyroots.roots_quintic(f)
sympy.roots(f,*gens,auto=True,cubics=True,trig=False,quartics=True,quintics=False,multiple=False,filter=None,predicate=None,strict=False,**flags)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/densetools.py----------------------------------------
A:sympy.polys.densetools.n->dmp_degree(f, u)
A:sympy.polys.densetools.result->_dup_decompose(f, K)
A:sympy.polys.densetools.e->_rec_eval_tail(f, 0, A, u, K)
A:sympy.polys.densetools.lc->dup_LC(f, K)
A:sympy.polys.densetools.cont->dmp_ground_content(f, u, K)
A:sympy.polys.densetools.fc->dmp_ground_content(f, u, K)
A:sympy.polys.densetools.gc->dmp_ground_content(g, u, K)
A:sympy.polys.densetools.gcd->K.gcd(fc, gc)
A:sympy.polys.densetools.f->dmp_mul_ground(f, common, u, K0)
A:sympy.polys.densetools.g->dup_rem(dup_sub(a, b, K), h, K)
A:sympy.polys.densetools.f1->dmp_sub(f1, h, 1, K)
A:sympy.polys.densetools.f2->dmp_sub(f2, h, 1, K)
A:sympy.polys.densetools.h->dup_lshift(h, dup_degree(h), K)
A:sympy.polys.densetools.H->dup_to_raw_dict(h)
A:sympy.polys.densetools.q->dup_mul_ground(q, c, K)
A:sympy.polys.densetools.g[s - i]->K.quo(coeff, i * r * lc)
A:sympy.polys.densetools.(q, r)->dup_div(f, h, K)
A:sympy.polys.densetools.g[i]->dup_LC(r, K)
A:sympy.polys.densetools.K1->K0.get_ring()
A:sympy.polys.densetools.perms->variations([-1, 1], len(monoms), repetition=True)
A:sympy.polys.densetools.G->dict(F)
A:sympy.polys.densetools.common->_rec_clear_denoms(f, u, K0, K1)
A:sympy.polys.densetools.N->int(_ceil(_log(n, 2)))
A:sympy.polys.densetools.a->dup_mul_ground(g, K(2), K)
A:sympy.polys.densetools.b->dup_mul(f, dup_sqr(g, K), K)
sympy.polys.densetools._dup_decompose(f,K)
sympy.polys.densetools._dup_left_decompose(f,h,K)
sympy.polys.densetools._dup_right_decompose(f,s,K)
sympy.polys.densetools._rec_clear_denoms(g,v,K0,K1)
sympy.polys.densetools._rec_diff_eval(g,m,a,v,i,j,K)
sympy.polys.densetools._rec_diff_in(g,m,v,i,j,K)
sympy.polys.densetools._rec_eval_in(g,a,v,i,j,K)
sympy.polys.densetools._rec_eval_tail(g,i,A,u,K)
sympy.polys.densetools._rec_integrate_in(g,m,v,i,j,K)
sympy.polys.densetools.dmp_clear_denoms(f,u,K0,K1=None,convert=False)
sympy.polys.densetools.dmp_compose(f,g,u,K)
sympy.polys.densetools.dmp_diff(f,m,u,K)
sympy.polys.densetools.dmp_diff_eval_in(f,m,a,j,u,K)
sympy.polys.densetools.dmp_diff_in(f,m,j,u,K)
sympy.polys.densetools.dmp_eval(f,a,u,K)
sympy.polys.densetools.dmp_eval_in(f,a,j,u,K)
sympy.polys.densetools.dmp_eval_tail(f,A,u,K)
sympy.polys.densetools.dmp_ground_content(f,u,K)
sympy.polys.densetools.dmp_ground_extract(f,g,u,K)
sympy.polys.densetools.dmp_ground_monic(f,u,K)
sympy.polys.densetools.dmp_ground_primitive(f,u,K)
sympy.polys.densetools.dmp_ground_trunc(f,p,u,K)
sympy.polys.densetools.dmp_integrate(f,m,u,K)
sympy.polys.densetools.dmp_integrate_in(f,m,j,u,K)
sympy.polys.densetools.dmp_lift(f,u,K)
sympy.polys.densetools.dmp_revert(f,g,u,K)
sympy.polys.densetools.dmp_trunc(f,p,u,K)
sympy.polys.densetools.dup_clear_denoms(f,K0,K1=None,convert=False)
sympy.polys.densetools.dup_compose(f,g,K)
sympy.polys.densetools.dup_content(f,K)
sympy.polys.densetools.dup_decompose(f,K)
sympy.polys.densetools.dup_diff(f,m,K)
sympy.polys.densetools.dup_eval(f,a,K)
sympy.polys.densetools.dup_extract(f,g,K)
sympy.polys.densetools.dup_integrate(f,m,K)
sympy.polys.densetools.dup_mirror(f,K)
sympy.polys.densetools.dup_monic(f,K)
sympy.polys.densetools.dup_primitive(f,K)
sympy.polys.densetools.dup_real_imag(f,K)
sympy.polys.densetools.dup_revert(f,n,K)
sympy.polys.densetools.dup_scale(f,a,K)
sympy.polys.densetools.dup_shift(f,a,K)
sympy.polys.densetools.dup_sign_variations(f,K)
sympy.polys.densetools.dup_transform(f,p,q,K)
sympy.polys.densetools.dup_trunc(f,p,K)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polyoptions.py----------------------------------------
A:sympy.polys.polyoptions.args->dict(args)
A:sympy.polys.polyoptions.defaults->dict(args).pop('defaults', {})
A:sympy.polys.polyoptions.self[option]->cls.preprocess(value)
A:sympy.polys.polyoptions.cls.__order__->topological_sort((vertices, list(edges)))
A:sympy.polys.polyoptions.obj->dict.__new__(self.__class__)
A:sympy.polys.polyoptions.options[option]->getattr(self, option)
A:sympy.polys.polyoptions.flags[option]->getattr(self, option)
A:sympy.polys.polyoptions._re_split->re.compile('\\s*,\\s*|\\s+')
A:sympy.polys.polyoptions.wrt->wrt.strip().strip()
A:sympy.polys.polyoptions._re_realfield->re.compile('^(R|RR)(_(\\d+))?$')
A:sympy.polys.polyoptions._re_complexfield->re.compile('^(C|CC)(_(\\d+))?$')
A:sympy.polys.polyoptions._re_finitefield->re.compile('^(FF|GF)\\((\\d+)\\)$')
A:sympy.polys.polyoptions._re_polynomial->re.compile('^(Z|ZZ|Q|QQ|ZZ_I|QQ_I|R|RR|C|CC)\\[(.+)\\]$')
A:sympy.polys.polyoptions._re_fraction->re.compile('^(Z|ZZ|Q|QQ)\\((.+)\\)$')
A:sympy.polys.polyoptions._re_algebraic->re.compile('^(Q|QQ)\\<(.+)\\>$')
A:sympy.polys.polyoptions.r->cls._re_algebraic.match(domain)
A:sympy.polys.polyoptions.(_, _, prec)->cls._re_algebraic.match(domain).groups()
A:sympy.polys.polyoptions.(ground, gens)->cls._re_algebraic.match(domain).groups()
A:sympy.polys.polyoptions.gens->list(map(sympify, r.groups()[1].split(',')))
A:sympy.polys.polyoptions.extension->set(extension)
A:sympy.polys.polyoptions.options['domain']->sympy.polys.domains.FF(modulus, symmetric)
A:sympy.polys.polyoptions.modulus->sympify(modulus)
A:sympy.polys.polyoptions.symmetric->dict(options).get('symmetric', True)
A:sympy.polys.polyoptions.flags->set(flags)
A:sympy.polys.polyoptions.options->dict(options)
sympy.Options(self,gens,args,flags=None,strict=False)
sympy.polys.polyoptions.All(BooleanOption,Flag,metaclass=OptionType)
sympy.polys.polyoptions.All.default(cls)
sympy.polys.polyoptions.Auto(BooleanOption,Flag,metaclass=OptionType)
sympy.polys.polyoptions.Auto.default(cls)
sympy.polys.polyoptions.Auto.postprocess(cls,options)
sympy.polys.polyoptions.BooleanOption(Option)
sympy.polys.polyoptions.BooleanOption.preprocess(cls,value)
sympy.polys.polyoptions.Composite(BooleanOption,metaclass=OptionType)
sympy.polys.polyoptions.Composite.default(cls)
sympy.polys.polyoptions.Domain(Option,metaclass=OptionType)
sympy.polys.polyoptions.Domain.postprocess(cls,options)
sympy.polys.polyoptions.Domain.preprocess(cls,domain)
sympy.polys.polyoptions.Expand(BooleanOption,metaclass=OptionType)
sympy.polys.polyoptions.Expand.default(cls)
sympy.polys.polyoptions.Extension(Option,metaclass=OptionType)
sympy.polys.polyoptions.Extension.postprocess(cls,options)
sympy.polys.polyoptions.Extension.preprocess(cls,extension)
sympy.polys.polyoptions.Field(BooleanOption,metaclass=OptionType)
sympy.polys.polyoptions.Flag(Option)
sympy.polys.polyoptions.Formal(BooleanOption,Flag,metaclass=OptionType)
sympy.polys.polyoptions.Formal.default(cls)
sympy.polys.polyoptions.Frac(BooleanOption,Flag,metaclass=OptionType)
sympy.polys.polyoptions.Frac.default(cls)
sympy.polys.polyoptions.Gaussian(BooleanOption,metaclass=OptionType)
sympy.polys.polyoptions.Gaussian.postprocess(cls,options)
sympy.polys.polyoptions.Gen(Flag,metaclass=OptionType)
sympy.polys.polyoptions.Gen.default(cls)
sympy.polys.polyoptions.Gen.preprocess(cls,gen)
sympy.polys.polyoptions.Gens(Option,metaclass=OptionType)
sympy.polys.polyoptions.Gens.default(cls)
sympy.polys.polyoptions.Gens.preprocess(cls,gens)
sympy.polys.polyoptions.Greedy(BooleanOption,metaclass=OptionType)
sympy.polys.polyoptions.Include(BooleanOption,Flag,metaclass=OptionType)
sympy.polys.polyoptions.Include.default(cls)
sympy.polys.polyoptions.Method(Flag,metaclass=OptionType)
sympy.polys.polyoptions.Method.preprocess(cls,method)
sympy.polys.polyoptions.Modulus(Option,metaclass=OptionType)
sympy.polys.polyoptions.Modulus.postprocess(cls,options)
sympy.polys.polyoptions.Modulus.preprocess(cls,modulus)
sympy.polys.polyoptions.Option
sympy.polys.polyoptions.Option.default(cls)
sympy.polys.polyoptions.Option.postprocess(cls,options)
sympy.polys.polyoptions.Option.preprocess(cls,option)
sympy.polys.polyoptions.OptionType(cls,*args,**kwargs)
sympy.polys.polyoptions.Options(self,gens,args,flags=None,strict=False)
sympy.polys.polyoptions.Options.__setattr__(self,attr,value)
sympy.polys.polyoptions.Options._init_dependencies_order(cls)
sympy.polys.polyoptions.Options.args(self)
sympy.polys.polyoptions.Options.clone(self,updates={})
sympy.polys.polyoptions.Options.flags(self)
sympy.polys.polyoptions.Options.options(self)
sympy.polys.polyoptions.Order(Option,metaclass=OptionType)
sympy.polys.polyoptions.Order.default(cls)
sympy.polys.polyoptions.Order.preprocess(cls,order)
sympy.polys.polyoptions.Polys(BooleanOption,Flag,metaclass=OptionType)
sympy.polys.polyoptions.Series(BooleanOption,Flag,metaclass=OptionType)
sympy.polys.polyoptions.Series.default(cls)
sympy.polys.polyoptions.Sort(Option,metaclass=OptionType)
sympy.polys.polyoptions.Sort.default(cls)
sympy.polys.polyoptions.Sort.preprocess(cls,sort)
sympy.polys.polyoptions.Split(BooleanOption,metaclass=OptionType)
sympy.polys.polyoptions.Split.postprocess(cls,options)
sympy.polys.polyoptions.Strict(BooleanOption,metaclass=OptionType)
sympy.polys.polyoptions.Strict.default(cls)
sympy.polys.polyoptions.Symbols(Flag,metaclass=OptionType)
sympy.polys.polyoptions.Symbols.default(cls)
sympy.polys.polyoptions.Symbols.preprocess(cls,symbols)
sympy.polys.polyoptions.Symmetric(BooleanOption,metaclass=OptionType)
sympy.polys.polyoptions.Wrt(Option,metaclass=OptionType)
sympy.polys.polyoptions.Wrt.preprocess(cls,wrt)
sympy.polys.polyoptions.allowed_flags(args,flags)
sympy.polys.polyoptions.build_options(gens,args=None)
sympy.polys.polyoptions.set_defaults(options,**defaults)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/orthopolys.py----------------------------------------
A:sympy.polys.orthopolys.p0->dup_mul_ground(m1, f0, K)
A:sympy.polys.orthopolys.p1->dup_mul_ground(dup_lshift(m1, 1, K), K(2) * (a - K.one) / K(i) + K(2), K)
A:sympy.polys.orthopolys.p2->dup_mul_ground(m2, K(2) * (a - K.one) / K(i) + K.one, K)
A:sympy.polys.orthopolys.a->dup_mul(m1, [-K.one / K(i), (alpha - K.one) / K(i) + K(2)], K)
A:sympy.polys.orthopolys.b->dup_mul_ground(m2, (alpha - K.one) / K(i) + K.one, K)
A:sympy.polys.orthopolys.x->Dummy('x')
sympy.chebyshevt_poly(n,x=None,polys=False)
sympy.chebyshevu_poly(n,x=None,polys=False)
sympy.hermite_poly(n,x=None,polys=False)
sympy.hermite_prob_poly(n,x=None,polys=False)
sympy.jacobi_poly(n,a,b,x=None,polys=False)
sympy.laguerre_poly(n,x=None,alpha=0,polys=False)
sympy.legendre_poly(n,x=None,polys=False)
sympy.polys.orthopolys.chebyshevt_poly(n,x=None,polys=False)
sympy.polys.orthopolys.chebyshevu_poly(n,x=None,polys=False)
sympy.polys.orthopolys.dup_chebyshevt(n,K)
sympy.polys.orthopolys.dup_chebyshevu(n,K)
sympy.polys.orthopolys.dup_gegenbauer(n,a,K)
sympy.polys.orthopolys.dup_hermite(n,K)
sympy.polys.orthopolys.dup_hermite_prob(n,K)
sympy.polys.orthopolys.dup_jacobi(n,a,b,K)
sympy.polys.orthopolys.dup_laguerre(n,alpha,K)
sympy.polys.orthopolys.dup_legendre(n,K)
sympy.polys.orthopolys.dup_spherical_bessel_fn(n,K)
sympy.polys.orthopolys.dup_spherical_bessel_fn_minus(n,K)
sympy.polys.orthopolys.gegenbauer_poly(n,a,x=None,polys=False)
sympy.polys.orthopolys.hermite_poly(n,x=None,polys=False)
sympy.polys.orthopolys.hermite_prob_poly(n,x=None,polys=False)
sympy.polys.orthopolys.jacobi_poly(n,a,b,x=None,polys=False)
sympy.polys.orthopolys.laguerre_poly(n,x=None,alpha=0,polys=False)
sympy.polys.orthopolys.legendre_poly(n,x=None,polys=False)
sympy.polys.orthopolys.spherical_bessel_fn(n,x=None,polys=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/densebasic.py----------------------------------------
A:sympy.polys.densebasic.f->dmp_to_dict(p, u)
A:sympy.polys.densebasic.degs[i]->max(degs[i], dmp_degree(g, v))
A:sympy.polys.densebasic.levels->_rec_validate(f, f, 0, K)
A:sympy.polys.densebasic.u->_rec_validate(f, f, 0, K).pop()
A:sympy.polys.densebasic.d->dmp_degree(f, v)
A:sympy.polys.densebasic.coeff->coeffs.get(k)
A:sympy.polys.densebasic.h->dmp_to_dict(f[n - k], v)
A:sympy.polys.densebasic.g->g.to_dict().to_dict()
A:sympy.polys.densebasic.F->dmp_to_dict(f, u)
A:sympy.polys.densebasic.B[i]->igcd(B[i], m)
A:sympy.polys.densebasic.B->tuple(B)
A:sympy.polys.densebasic.G->monomial_min(*list(F.keys()))
A:sympy.polys.densebasic.(M, H)->dup_multi_deflate(polys, K)
A:sympy.polys.densebasic.monom->list(monom)
A:sympy.polys.densebasic.h[monom]->K(c)
A:sympy.polys.densebasic.terms->_rec_list_terms(f, u, ())
A:sympy.polys.densebasic.k->len(f)
A:sympy.polys.densebasic.f[0]->K.convert(random.randint(a, b))
sympy.polys.densebasic._rec_degree_in(g,v,i,j)
sympy.polys.densebasic._rec_degree_list(g,v,i,degs)
sympy.polys.densebasic._rec_inflate(g,M,v,i,K)
sympy.polys.densebasic._rec_list_terms(g,v,monom)
sympy.polys.densebasic._rec_strip(g,v)
sympy.polys.densebasic._rec_validate(f,g,i,K)
sympy.polys.densebasic.dmp_apply_pairs(f,g,h,args,u,K)
sympy.polys.densebasic.dmp_convert(f,u,K0,K1)
sympy.polys.densebasic.dmp_copy(f,u)
sympy.polys.densebasic.dmp_deflate(f,u,K)
sympy.polys.densebasic.dmp_degree(f,u)
sympy.polys.densebasic.dmp_degree_in(f,j,u)
sympy.polys.densebasic.dmp_degree_list(f,u)
sympy.polys.densebasic.dmp_eject(f,u,K,front=False)
sympy.polys.densebasic.dmp_exclude(f,u,K)
sympy.polys.densebasic.dmp_from_dict(f,u,K)
sympy.polys.densebasic.dmp_from_sympy(f,u,K)
sympy.polys.densebasic.dmp_ground(c,u)
sympy.polys.densebasic.dmp_ground_LC(f,u,K)
sympy.polys.densebasic.dmp_ground_TC(f,u,K)
sympy.polys.densebasic.dmp_ground_nth(f,N,u,K)
sympy.polys.densebasic.dmp_ground_p(f,c,u)
sympy.polys.densebasic.dmp_grounds(c,n,u)
sympy.polys.densebasic.dmp_include(f,J,u,K)
sympy.polys.densebasic.dmp_inflate(f,M,u,K)
sympy.polys.densebasic.dmp_inject(f,u,K,front=False)
sympy.polys.densebasic.dmp_list_terms(f,u,K,order=None)
sympy.polys.densebasic.dmp_multi_deflate(polys,u,K)
sympy.polys.densebasic.dmp_negative_p(f,u,K)
sympy.polys.densebasic.dmp_nest(f,l,K)
sympy.polys.densebasic.dmp_normal(f,u,K)
sympy.polys.densebasic.dmp_nth(f,n,u,K)
sympy.polys.densebasic.dmp_one(u,K)
sympy.polys.densebasic.dmp_one_p(f,u,K)
sympy.polys.densebasic.dmp_permute(f,P,u,K)
sympy.polys.densebasic.dmp_positive_p(f,u,K)
sympy.polys.densebasic.dmp_raise(f,l,u,K)
sympy.polys.densebasic.dmp_slice(f,m,n,u,K)
sympy.polys.densebasic.dmp_slice_in(f,m,n,j,u,K)
sympy.polys.densebasic.dmp_strip(f,u)
sympy.polys.densebasic.dmp_swap(f,i,j,u,K)
sympy.polys.densebasic.dmp_terms_gcd(f,u,K)
sympy.polys.densebasic.dmp_to_dict(f,u,K=None,zero=False)
sympy.polys.densebasic.dmp_to_tuple(f,u)
sympy.polys.densebasic.dmp_true_LT(f,u,K)
sympy.polys.densebasic.dmp_validate(f,K=None)
sympy.polys.densebasic.dmp_zero(u)
sympy.polys.densebasic.dmp_zero_p(f,u)
sympy.polys.densebasic.dmp_zeros(n,u,K)
sympy.polys.densebasic.dup_apply_pairs(f,g,h,args,K)
sympy.polys.densebasic.dup_convert(f,K0,K1)
sympy.polys.densebasic.dup_copy(f)
sympy.polys.densebasic.dup_deflate(f,K)
sympy.polys.densebasic.dup_degree(f)
sympy.polys.densebasic.dup_from_dict(f,K)
sympy.polys.densebasic.dup_from_raw_dict(f,K)
sympy.polys.densebasic.dup_from_sympy(f,K)
sympy.polys.densebasic.dup_inflate(f,m,K)
sympy.polys.densebasic.dup_multi_deflate(polys,K)
sympy.polys.densebasic.dup_normal(f,K)
sympy.polys.densebasic.dup_nth(f,n,K)
sympy.polys.densebasic.dup_random(n,a,b,K)
sympy.polys.densebasic.dup_reverse(f)
sympy.polys.densebasic.dup_slice(f,m,n,K)
sympy.polys.densebasic.dup_strip(f)
sympy.polys.densebasic.dup_terms_gcd(f,K)
sympy.polys.densebasic.dup_to_dict(f,K=None,zero=False)
sympy.polys.densebasic.dup_to_raw_dict(f,K=None,zero=False)
sympy.polys.densebasic.dup_to_tuple(f)
sympy.polys.densebasic.poly_LC(f,K)
sympy.polys.densebasic.poly_TC(f,K)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/constructor.py----------------------------------------
A:sympy.polys.constructor.is_complex->pure_complex(coeff)
A:sympy.polys.constructor.(domain, result)->_construct_algebraic(coeffs, opt)
A:sympy.polys.constructor.domain->RealField(prec=max_prec).frac_field(*gens)
A:sympy.polys.constructor.exts->list(ordered(exts))
A:sympy.polys.constructor.trees->build_trees(coeffs)
A:sympy.polys.constructor.(g, span, H)->primitive_element(exts, ex=True, polys=True)
A:sympy.polys.constructor.root->sum([s * ext for (s, ext) in zip(span, exts)])
A:sympy.polys.constructor.exts_map->dict(zip(exts, exts_dom))
A:sympy.polys.constructor.(numer, denom)->coeff.as_numer_denom()
A:sympy.polys.constructor.(polys, gens)->parallel_dict_from_basic(numers + denoms)
A:sympy.polys.constructor.all_symbols->set()
A:sympy.polys.constructor.n->len(gens)
A:sympy.polys.constructor.coeffs->list(map(sympify, coeffs))
A:sympy.polys.constructor.ground->RealField(prec=max_prec)
A:sympy.polys.constructor.numer[monom]->RealField(prec=max_prec).from_sympy(coeff)
A:sympy.polys.constructor.denom[monom]->RealField(prec=max_prec).from_sympy(coeff)
A:sympy.polys.constructor.opt->build_options(args)
A:sympy.polys.constructor.(monoms, coeffs)->list(zip(*list(obj.items())))
A:sympy.polys.constructor.result->_construct_composite(coeffs, opt)
A:sympy.polys.constructor.(domain, coeffs)->_construct_expression(coeffs, opt)
sympy.construct_domain(obj,**args)
sympy.polys.constructor._construct_algebraic(coeffs,opt)
sympy.polys.constructor._construct_composite(coeffs,opt)
sympy.polys.constructor._construct_expression(coeffs,opt)
sympy.polys.constructor._construct_simple(coeffs,opt)
sympy.polys.constructor.construct_domain(obj,**args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polyerrors.py----------------------------------------
sympy.BasePolynomialError(Exception)
sympy.CoercionFailed(BasePolynomialError)
sympy.ComputationFailed(self,func,nargs,exc)
sympy.DomainError(BasePolynomialError)
sympy.EvaluationFailed(BasePolynomialError)
sympy.ExactQuotientFailed(self,f,g,dom=None)
sympy.ExtraneousFactors(BasePolynomialError)
sympy.FlagError(OptionError)
sympy.GeneratorsError(BasePolynomialError)
sympy.GeneratorsNeeded(GeneratorsError)
sympy.HeuristicGCDFailed(BasePolynomialError)
sympy.HomomorphismFailed(BasePolynomialError)
sympy.IsomorphismFailed(BasePolynomialError)
sympy.MultivariatePolynomialError(PolynomialError)
sympy.NotAlgebraic(BasePolynomialError)
sympy.NotInvertible(BasePolynomialError)
sympy.NotReversible(BasePolynomialError)
sympy.OperationNotSupported(self,poly,func)
sympy.OptionError(BasePolynomialError)
sympy.PolificationFailed(self,opt,origs,exprs,seq=False)
sympy.PolynomialDivisionFailed(self,f,g,domain)
sympy.PolynomialError(BasePolynomialError)
sympy.RefinementFailed(BasePolynomialError)
sympy.UnificationFailed(BasePolynomialError)
sympy.UnivariatePolynomialError(PolynomialError)
sympy.polys.polyerrors.BasePolynomialError(Exception)
sympy.polys.polyerrors.BasePolynomialError.new(self,*args)
sympy.polys.polyerrors.CoercionFailed(BasePolynomialError)
sympy.polys.polyerrors.ComputationFailed(self,func,nargs,exc)
sympy.polys.polyerrors.ComputationFailed.__str__(self)
sympy.polys.polyerrors.DomainError(BasePolynomialError)
sympy.polys.polyerrors.EvaluationFailed(BasePolynomialError)
sympy.polys.polyerrors.ExactQuotientFailed(self,f,g,dom=None)
sympy.polys.polyerrors.ExactQuotientFailed.__str__(self)
sympy.polys.polyerrors.ExactQuotientFailed.new(self,f,g)
sympy.polys.polyerrors.ExtraneousFactors(BasePolynomialError)
sympy.polys.polyerrors.FlagError(OptionError)
sympy.polys.polyerrors.GeneratorsError(BasePolynomialError)
sympy.polys.polyerrors.GeneratorsNeeded(GeneratorsError)
sympy.polys.polyerrors.HeuristicGCDFailed(BasePolynomialError)
sympy.polys.polyerrors.HomomorphismFailed(BasePolynomialError)
sympy.polys.polyerrors.IsomorphismFailed(BasePolynomialError)
sympy.polys.polyerrors.ModularGCDFailed(BasePolynomialError)
sympy.polys.polyerrors.MultivariatePolynomialError(PolynomialError)
sympy.polys.polyerrors.NotAlgebraic(BasePolynomialError)
sympy.polys.polyerrors.NotInvertible(BasePolynomialError)
sympy.polys.polyerrors.NotReversible(BasePolynomialError)
sympy.polys.polyerrors.OperationNotSupported(self,poly,func)
sympy.polys.polyerrors.OperationNotSupported.__str__(self)
sympy.polys.polyerrors.OptionError(BasePolynomialError)
sympy.polys.polyerrors.PolificationFailed(self,opt,origs,exprs,seq=False)
sympy.polys.polyerrors.PolificationFailed.__str__(self)
sympy.polys.polyerrors.PolynomialDivisionFailed(self,f,g,domain)
sympy.polys.polyerrors.PolynomialDivisionFailed.__str__(self)
sympy.polys.polyerrors.PolynomialError(BasePolynomialError)
sympy.polys.polyerrors.RefinementFailed(BasePolynomialError)
sympy.polys.polyerrors.UnificationFailed(BasePolynomialError)
sympy.polys.polyerrors.UnivariatePolynomialError(PolynomialError)
sympy.polys.polyerrors.UnsolvableFactorError(BasePolynomialError)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/dispersion.py----------------------------------------
A:sympy.polys.dispersion.p->Poly(p, *gens, **args)
A:sympy.polys.dispersion.q->Poly(q, *gens, **args)
A:sympy.polys.dispersion.fp->Poly(p, *gens, **args).factor_list()
A:sympy.polys.dispersion.J->dispersionset(p, q, *gens, **args)
A:sympy.polys.dispersion.m->s.degree()
A:sympy.polys.dispersion.n->t.degree()
A:sympy.polys.dispersion.an->s.LC()
A:sympy.polys.dispersion.bn->t.LC()
A:sympy.polys.dispersion.anm1->s.coeff_monomial(gen ** (m - 1))
A:sympy.polys.dispersion.bnm1->t.coeff_monomial(gen ** (n - 1))
A:sympy.polys.dispersion.j->max(J)
sympy.polys.dispersion.dispersion(p,q=None,*gens,**args)
sympy.polys.dispersion.dispersionset(p,q=None,*gens,**args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/heuristicgcd.py----------------------------------------
A:sympy.polys.heuristicgcd.(gcd, f, g)->f.extract_ground(g)
A:sympy.polys.heuristicgcd.f_norm->f.max_norm()
A:sympy.polys.heuristicgcd.g_norm->h.trunc_ground(x).max_norm()
A:sympy.polys.heuristicgcd.B->domain(2 * min(f_norm, g_norm) + 29)
A:sympy.polys.heuristicgcd.x->max(min(B, 99 * domain.sqrt(B)), 2 * min(f_norm // abs(f.LC), g_norm // abs(g.LC)) + 4)
A:sympy.polys.heuristicgcd.ff->f.evaluate(x0, x)
A:sympy.polys.heuristicgcd.gg->h.trunc_ground(x).evaluate(x0, x)
A:sympy.polys.heuristicgcd.(h, cff, cfg)->heugcd(ff, gg)
A:sympy.polys.heuristicgcd.h->(h - g).quo_ground(x)
A:sympy.polys.heuristicgcd.(cff_, r)->f.div(h)
A:sympy.polys.heuristicgcd.(cfg_, r)->h.trunc_ground(x).div(h)
A:sympy.polys.heuristicgcd.cff->_gcd_interpolate(cff, x, ring)
A:sympy.polys.heuristicgcd.(h, r)->h.trunc_ground(x).div(cfg)
A:sympy.polys.heuristicgcd.cfg->_gcd_interpolate(cfg, x, ring)
A:sympy.polys.heuristicgcd.g->(h - g).quo_ground(x).trunc_ground(x)
sympy.polys.heuristicgcd._gcd_interpolate(h,x,ring)
sympy.polys.heuristicgcd.heugcd(f,g)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/appellseqs.py----------------------------------------
A:sympy.polys.appellseqs.p->dup_sub_ground(p, dup_eval(p, K.one, K), K)
sympy.polys.andre_poly(n,x=None,polys=False)
sympy.polys.appellseqs.andre_poly(n,x=None,polys=False)
sympy.polys.appellseqs.bernoulli_c_poly(n,x=None,polys=False)
sympy.polys.appellseqs.bernoulli_poly(n,x=None,polys=False)
sympy.polys.appellseqs.dup_andre(n,K)
sympy.polys.appellseqs.dup_bernoulli(n,K)
sympy.polys.appellseqs.dup_bernoulli_c(n,K)
sympy.polys.appellseqs.dup_euler(n,K)
sympy.polys.appellseqs.dup_genocchi(n,K)
sympy.polys.appellseqs.euler_poly(n,x=None,polys=False)
sympy.polys.appellseqs.genocchi_poly(n,x=None,polys=False)
sympy.polys.bernoulli_c_poly(n,x=None,polys=False)
sympy.polys.bernoulli_poly(n,x=None,polys=False)
sympy.polys.euler_poly(n,x=None,polys=False)
sympy.polys.genocchi_poly(n,x=None,polys=False)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/multivariate_resultants.py----------------------------------------
A:sympy.polys.multivariate_resultants.self.n->len(variables)
A:sympy.polys.multivariate_resultants.self.m->len(self.polynomials)
A:sympy.polys.multivariate_resultants.a->IndexedBase('alpha')
A:sympy.polys.multivariate_resultants.temp->list(self.variables)
A:sympy.polys.multivariate_resultants.A->Matrix(rows)
A:sympy.polys.multivariate_resultants.terms->zip(self.variables, self.dummy_variables)
A:sympy.polys.multivariate_resultants.product_of_differences->Mul(*[a - b for (a, b) in terms])
A:sympy.polys.multivariate_resultants.dixon_polynomial->(A.det() / product_of_differences).factor()
A:sympy.polys.multivariate_resultants.product->Poly(product).monoms()
A:sympy.polys.multivariate_resultants.max_degrees->self.get_max_degrees(polynomial)
A:sympy.polys.multivariate_resultants.monomials->sorted(monomials, reverse=True, key=monomial_key('lex', self.variables))
A:sympy.polys.multivariate_resultants.dixon_matrix->Matrix([[Poly(c, *self.variables).coeff_monomial(m) for m in monomials] for c in polynomial.coeffs()])
A:sympy.polys.multivariate_resultants.matrix->self.delete_zero_rows_and_columns(simplify(U))
A:sympy.polys.multivariate_resultants.condition->Matrix([[0] * (n - 1) + [1]])
A:sympy.polys.multivariate_resultants.(_, U, _)->self.delete_zero_rows_and_columns(simplify(U)).LUdecomposition()
A:sympy.polys.multivariate_resultants.self.degree_m->self._get_degree_m()
A:sympy.polys.multivariate_resultants.self.monomials_size->self.get_size()
A:sympy.polys.multivariate_resultants.self.monomial_set->self.get_monomials_of_certain_degree(self.degree_m)
A:sympy.polys.multivariate_resultants.monomial->self.get_monomials_of_certain_degree(degree)
A:sympy.polys.multivariate_resultants.poss_rows->self.get_monomials_of_certain_degree(degree)
A:sympy.polys.multivariate_resultants.row_coefficients->self.get_row_coefficients()
A:sympy.polys.multivariate_resultants.poly->Poly(self.polynomials[i] * multiplier, *self.variables)
A:sympy.polys.multivariate_resultants.macaulay_matrix->Matrix(rows)
A:sympy.polys.multivariate_resultants.(reduced, non_reduced)->self.get_reduced_nonreduced()
sympy.polys.multivariate_resultants.DixonResultant(self,polynomials,variables)
sympy.polys.multivariate_resultants.DixonResultant.KSY_precondition(self,matrix)
sympy.polys.multivariate_resultants.DixonResultant.delete_zero_rows_and_columns(self,matrix)
sympy.polys.multivariate_resultants.DixonResultant.get_KSY_Dixon_resultant(self,matrix)
sympy.polys.multivariate_resultants.DixonResultant.get_dixon_matrix(self,polynomial)
sympy.polys.multivariate_resultants.DixonResultant.get_dixon_polynomial(self)
sympy.polys.multivariate_resultants.DixonResultant.get_max_degrees(self,polynomial)
sympy.polys.multivariate_resultants.DixonResultant.get_upper_degree(self)
sympy.polys.multivariate_resultants.DixonResultant.max_degrees(self)
sympy.polys.multivariate_resultants.DixonResultant.product_leading_entries(self,matrix)
sympy.polys.multivariate_resultants.MacaulayResultant(self,polynomials,variables)
sympy.polys.multivariate_resultants.MacaulayResultant._get_degree_m(self)
sympy.polys.multivariate_resultants.MacaulayResultant.get_matrix(self)
sympy.polys.multivariate_resultants.MacaulayResultant.get_monomials_of_certain_degree(self,degree)
sympy.polys.multivariate_resultants.MacaulayResultant.get_reduced_nonreduced(self)
sympy.polys.multivariate_resultants.MacaulayResultant.get_row_coefficients(self)
sympy.polys.multivariate_resultants.MacaulayResultant.get_size(self)
sympy.polys.multivariate_resultants.MacaulayResultant.get_submatrix(self,matrix)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/rootisolation.py----------------------------------------
A:sympy.polys.rootisolation.f->dup_transform(f, dup_strip([a, b]), dup_strip([c, d]), dom)
A:sympy.polys.rootisolation.s->dup_rem(sturm[-2], sturm[-1], K)
A:sympy.polys.rootisolation.q->min(QL)
A:sympy.polys.rootisolation.bound->dup_root_upper_bound(dup_reverse(f), K)
A:sympy.polys.rootisolation.n->dup_degree(f)
A:sympy.polys.rootisolation.L->K.get_field().get_field()
A:sympy.polys.rootisolation.g->dup_reverse(f)
A:sympy.polys.rootisolation.K->K.get_field().get_field()
A:sympy.polys.rootisolation.b->dup_cauchy_upper_bound(g, K)
A:sympy.polys.rootisolation.D->dup_discriminant(f, K)
A:sympy.polys.rootisolation.l2sq->dup_l2_norm_squared(f, K)
A:sympy.polys.rootisolation.A->K(int(A))
A:sympy.polys.rootisolation.k->dup_sign_variations(f, K)
A:sympy.polys.rootisolation.F->K.get_field().get_field().get_field()
A:sympy.polys.rootisolation.(a, b, c, d)->_mobius_from_interval((s, t), dom.get_field())
A:sympy.polys.rootisolation.(f, (a, b, c, d))->dup_step_refine_real_root(f, (a, b, c, d), K, fast=fast)
A:sympy.polys.rootisolation.(u, v)->_mobius_to_interval(M, F)
A:sympy.polys.rootisolation.(s, t)->dup_outer_refine_real_root(f, s, t, K, eps=eps, steps=steps, disjoint=disjoint, fast=fast)
A:sympy.polys.rootisolation.(a, b, c, d, f, k)->stack.pop()
A:sympy.polys.rootisolation.f1->dup_rshift(f1, 1, K)
A:sympy.polys.rootisolation.k1->dup_sign_variations(f1, K)
A:sympy.polys.rootisolation.f2->dup_rshift(f2, 1, K)
A:sympy.polys.rootisolation.k2->dup_sign_variations(f2, K)
A:sympy.polys.rootisolation.(f, M)->dup_inner_refine_real_root(f, M, K, steps=1, fast=fast, mobius=True)
A:sympy.polys.rootisolation.roots->sorted(I_neg + I_zero + I_pos)
A:sympy.polys.rootisolation.result->_discard_if_outside_interval(f, M, inf, sup, K, True, fast, mobius)
A:sympy.polys.rootisolation.(j, f)->dup_terms_gcd(f, K)
A:sympy.polys.rootisolation.(I_zero, f)->_isolate_zero(f, K, inf, sup, basis=basis, sqf=False)
A:sympy.polys.rootisolation.I_neg->dup_inner_isolate_negative_roots(f, K, eps=eps, inf=inf, sup=sup, fast=fast)
A:sympy.polys.rootisolation.I_pos->dup_inner_isolate_positive_roots(f, K, eps=eps, inf=inf, sup=sup, fast=fast)
A:sympy.polys.rootisolation.(_, factors)->dup_sqf_list(f, K)
A:sympy.polys.rootisolation.(I_neg, I_pos)->_real_isolate_and_disjoin(factors_list, K, eps=eps, inf=inf, sup=sup, strict=strict, basis=basis, fast=fast)
A:sympy.polys.rootisolation.(j, p)->dup_terms_gcd(p, K)
A:sympy.polys.rootisolation.(g, N)->dup_inner_refine_real_root(g, N, K, steps=1, fast=fast, mobius=True)
A:sympy.polys.rootisolation.field->self.dom.get_field()
A:sympy.polys.rootisolation.sturm->dup_sturm(f, K)
A:sympy.polys.rootisolation.signs_inf->dup_sign_variations([dup_eval(s, inf, K) for s in sturm], K)
A:sympy.polys.rootisolation.signs_sup->dup_sign_variations([dup_eval(s, sup, K) for s in sturm], K)
A:sympy.polys.rootisolation.count->abs(signs_inf - signs_sup)
A:sympy.polys.rootisolation.re->dup_eval(f1, a, F)
A:sympy.polys.rootisolation.im->dup_eval(f2, a, F)
A:sympy.polys.rootisolation.cls->_classify_point(re, im)
A:sympy.polys.rootisolation.exclude->set(exclude)
A:sympy.polys.rootisolation.(f1, f2)->dup_real_imag(f, F)
A:sympy.polys.rootisolation.f1L1F->dmp_eval_in(f1, v, 1, 1, F)
A:sympy.polys.rootisolation.f2L1F->dmp_eval_in(f2, v, 1, 1, F)
A:sympy.polys.rootisolation.(_, f1L1R)->dup_clear_denoms(f1L1F, F, R, convert=True)
A:sympy.polys.rootisolation.(_, f2L1R)->dup_clear_denoms(f2L1F, F, R, convert=True)
A:sympy.polys.rootisolation.f1L2F->dmp_eval_in(f1, s, 0, 1, F)
A:sympy.polys.rootisolation.f2L2F->dmp_eval_in(f2, s, 0, 1, F)
A:sympy.polys.rootisolation.(_, f1L2R)->dup_clear_denoms(f1L2F, F, R, convert=True)
A:sympy.polys.rootisolation.(_, f2L2R)->dup_clear_denoms(f2L2F, F, R, convert=True)
A:sympy.polys.rootisolation.f1L3F->dmp_eval_in(f1, t, 1, 1, F)
A:sympy.polys.rootisolation.f2L3F->dmp_eval_in(f2, t, 1, 1, F)
A:sympy.polys.rootisolation.(_, f1L3R)->dup_clear_denoms(f1L3F, F, R, convert=True)
A:sympy.polys.rootisolation.(_, f2L3R)->dup_clear_denoms(f2L3F, F, R, convert=True)
A:sympy.polys.rootisolation.f1L4F->dmp_eval_in(f1, u, 0, 1, F)
A:sympy.polys.rootisolation.f2L4F->dmp_eval_in(f2, u, 0, 1, F)
A:sympy.polys.rootisolation.(_, f1L4R)->dup_clear_denoms(f1L4F, F, R, convert=True)
A:sympy.polys.rootisolation.(_, f2L4R)->dup_clear_denoms(f2L4F, F, R, convert=True)
A:sympy.polys.rootisolation.I_L1->dup_isolate_real_roots_list(S_L1, F, inf=u, sup=s, fast=True, strict=True, basis=True)
A:sympy.polys.rootisolation.I_L2->dup_isolate_real_roots_list(S_L2, F, inf=v, sup=t, fast=True, strict=True, basis=True)
A:sympy.polys.rootisolation.I_L3->_reverse_intervals(I_L3)
A:sympy.polys.rootisolation.I_L4->_reverse_intervals(I_L4)
A:sympy.polys.rootisolation.Q_L1->_intervals_to_quadrants(I_L1, f1L1, f2L1, u, s, F)
A:sympy.polys.rootisolation.Q_L2->_intervals_to_quadrants(I_L2, f1L2, f2L2, v, t, F)
A:sympy.polys.rootisolation.Q_L3->_intervals_to_quadrants(I_L3, f1L3, f2L3, s, u, F)
A:sympy.polys.rootisolation.Q_L4->_intervals_to_quadrants(I_L4, f1L4, f2L4, t, v, F)
A:sympy.polys.rootisolation.T->_traverse_quadrants(Q_L1, Q_L2, Q_L3, Q_L4)
A:sympy.polys.rootisolation.f1V->dmp_eval_in(f1, x, 0, 1, F)
A:sympy.polys.rootisolation.f2V->dmp_eval_in(f2, x, 0, 1, F)
A:sympy.polys.rootisolation.I_V->dup_isolate_real_roots_list([f1V, f2V], F, inf=v, sup=t, fast=True, strict=True, basis=True)
A:sympy.polys.rootisolation.(a, b)->dup_refine_real_root(h, a, b, F.get_ring(), disjoint=y, fast=True)
A:sympy.polys.rootisolation.Q_L1_L->_intervals_to_quadrants(I_L1_L, f1L1F, f2L1F, u, x, F)
A:sympy.polys.rootisolation.Q_L2_L->_intervals_to_quadrants(I_L2_L, f1V, f2V, v, t, F)
A:sympy.polys.rootisolation.Q_L3_L->_intervals_to_quadrants(I_L3_L, f1L3F, f2L3F, x, u, F)
A:sympy.polys.rootisolation.Q_L1_R->_intervals_to_quadrants(I_L1_R, f1L1F, f2L1F, x, s, F)
A:sympy.polys.rootisolation.Q_L3_R->_intervals_to_quadrants(I_L3_R, f1L3F, f2L3F, s, x, F)
A:sympy.polys.rootisolation.Q_L4_R->_intervals_to_quadrants(I_L4_R, f1V, f2V, t, v, F)
A:sympy.polys.rootisolation.T_L->_traverse_quadrants(Q_L1_L, Q_L2_L, Q_L3_L, Q_L4_L, exclude=True)
A:sympy.polys.rootisolation.T_R->_traverse_quadrants(Q_L1_R, Q_L2_R, Q_L3_R, Q_L4_R, exclude=True)
A:sympy.polys.rootisolation.N_L->_winding_number(T_L, F)
A:sympy.polys.rootisolation.N_R->_winding_number(T_R, F)
A:sympy.polys.rootisolation.f1H->dmp_eval_in(f1, y, 1, 1, F)
A:sympy.polys.rootisolation.f2H->dmp_eval_in(f2, y, 1, 1, F)
A:sympy.polys.rootisolation.I_H->dup_isolate_real_roots_list([f1H, f2H], F, inf=u, sup=s, fast=True, strict=True, basis=True)
A:sympy.polys.rootisolation.Q_L2_B->_intervals_to_quadrants(I_L2_B, f1L2F, f2L2F, v, y, F)
A:sympy.polys.rootisolation.Q_L3_B->_intervals_to_quadrants(I_L3_B, f1H, f2H, s, u, F)
A:sympy.polys.rootisolation.Q_L4_B->_intervals_to_quadrants(I_L4_B, f1L4F, f2L4F, y, v, F)
A:sympy.polys.rootisolation.Q_L1_U->_intervals_to_quadrants(I_L1_U, f1H, f2H, u, s, F)
A:sympy.polys.rootisolation.Q_L2_U->_intervals_to_quadrants(I_L2_U, f1L2F, f2L2F, y, t, F)
A:sympy.polys.rootisolation.Q_L4_U->_intervals_to_quadrants(I_L4_U, f1L4F, f2L4F, t, y, F)
A:sympy.polys.rootisolation.T_B->_traverse_quadrants(Q_L1_B, Q_L2_B, Q_L3_B, Q_L4_B, exclude=True)
A:sympy.polys.rootisolation.T_U->_traverse_quadrants(Q_L1_U, Q_L2_U, Q_L3_U, Q_L4_U, exclude=True)
A:sympy.polys.rootisolation.N_B->_winding_number(T_B, F)
A:sympy.polys.rootisolation.N_U->_winding_number(T_U, F)
A:sympy.polys.rootisolation.lc->abs(dup_LC(f, F))
A:sympy.polys.rootisolation.f1L1->dmp_eval_in(f1, v, 1, 1, F)
A:sympy.polys.rootisolation.f2L1->dmp_eval_in(f2, v, 1, 1, F)
A:sympy.polys.rootisolation.f1L2->dmp_eval_in(f1, s, 0, 1, F)
A:sympy.polys.rootisolation.f2L2->dmp_eval_in(f2, s, 0, 1, F)
A:sympy.polys.rootisolation.f1L3->dmp_eval_in(f1, t, 1, 1, F)
A:sympy.polys.rootisolation.f2L3->dmp_eval_in(f2, t, 1, 1, F)
A:sympy.polys.rootisolation.f1L4->dmp_eval_in(f1, u, 0, 1, F)
A:sympy.polys.rootisolation.f2L4->dmp_eval_in(f2, u, 0, 1, F)
A:sympy.polys.rootisolation.N->_winding_number(T, F)
A:sympy.polys.rootisolation.(N, (u, v), (s, t), I, Q, F1, F2)->_depth_first_select(rectangles)
A:sympy.polys.rootisolation.(D_L, D_R)->_vertical_bisection(1, (u, v), (s, t), I, Q, F1, F2, f1, f2, dom)
A:sympy.polys.rootisolation.(D_B, D_U)->_horizontal_bisection(1, (u, v), (s, t), I, Q, F1, F2, f1, f2, dom)
A:sympy.polys.rootisolation.(real_part, complex_part)->dup_isolate_all_roots_sqf(f, K, eps=eps, inf=inf, sup=sup, fast=fast)
A:sympy.polys.rootisolation.(f, mobius)->dup_inner_refine_real_root(self.f, self.mobius, self.dom, steps=1, mobius=True)
A:sympy.polys.rootisolation.expr->expr._inner_refine()._inner_refine()
sympy.polys.rootisolation.ComplexInterval(self,a,b,I,Q,F1,F2,f1,f2,dom,conj=False)
sympy.polys.rootisolation.ComplexInterval.__contains__(self,item)
sympy.polys.rootisolation.ComplexInterval.__eq__(self,other)
sympy.polys.rootisolation.ComplexInterval.__repr__(self)
sympy.polys.rootisolation.ComplexInterval._inner_refine(self)
sympy.polys.rootisolation.ComplexInterval.args(self)
sympy.polys.rootisolation.ComplexInterval.as_tuple(self)
sympy.polys.rootisolation.ComplexInterval.ax(self)
sympy.polys.rootisolation.ComplexInterval.ay(self)
sympy.polys.rootisolation.ComplexInterval.bx(self)
sympy.polys.rootisolation.ComplexInterval.by(self)
sympy.polys.rootisolation.ComplexInterval.center(self)
sympy.polys.rootisolation.ComplexInterval.conjugate(self)
sympy.polys.rootisolation.ComplexInterval.dx(self)
sympy.polys.rootisolation.ComplexInterval.dy(self)
sympy.polys.rootisolation.ComplexInterval.func(self)
sympy.polys.rootisolation.ComplexInterval.is_disjoint(self,other)
sympy.polys.rootisolation.ComplexInterval.max_denom(self)
sympy.polys.rootisolation.ComplexInterval.refine(self)
sympy.polys.rootisolation.ComplexInterval.refine_disjoint(self,other)
sympy.polys.rootisolation.ComplexInterval.refine_size(self,dx,dy=None)
sympy.polys.rootisolation.ComplexInterval.refine_step(self,steps=1)
sympy.polys.rootisolation.RealInterval(self,data,f,dom)
sympy.polys.rootisolation.RealInterval.__contains__(self,item)
sympy.polys.rootisolation.RealInterval.__eq__(self,other)
sympy.polys.rootisolation.RealInterval.__repr__(self)
sympy.polys.rootisolation.RealInterval._inner_refine(self)
sympy.polys.rootisolation.RealInterval.a(self)
sympy.polys.rootisolation.RealInterval.args(self)
sympy.polys.rootisolation.RealInterval.as_tuple(self)
sympy.polys.rootisolation.RealInterval.b(self)
sympy.polys.rootisolation.RealInterval.center(self)
sympy.polys.rootisolation.RealInterval.dx(self)
sympy.polys.rootisolation.RealInterval.func(self)
sympy.polys.rootisolation.RealInterval.is_disjoint(self,other)
sympy.polys.rootisolation.RealInterval.max_denom(self)
sympy.polys.rootisolation.RealInterval.refine(self)
sympy.polys.rootisolation.RealInterval.refine_disjoint(self,other)
sympy.polys.rootisolation.RealInterval.refine_size(self,dx)
sympy.polys.rootisolation.RealInterval.refine_step(self,steps=1)
sympy.polys.rootisolation._classify_point(re,im)
sympy.polys.rootisolation._depth_first_select(rectangles)
sympy.polys.rootisolation._discard_if_outside_interval(f,M,inf,sup,K,negative,fast,mobius)
sympy.polys.rootisolation._disjoint_p(M,N,strict=False)
sympy.polys.rootisolation._horizontal_bisection(N,a,b,I,Q,F1,F2,f1,f2,F)
sympy.polys.rootisolation._intervals_to_quadrants(intervals,f1,f2,s,t,F)
sympy.polys.rootisolation._isolate_zero(f,K,inf,sup,basis=False,sqf=False)
sympy.polys.rootisolation._mobius_from_interval(I,field)
sympy.polys.rootisolation._mobius_to_interval(M,field)
sympy.polys.rootisolation._real_isolate_and_disjoin(factors,K,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.polys.rootisolation._rectangle_small_p(a,b,eps)
sympy.polys.rootisolation._reverse_intervals(intervals)
sympy.polys.rootisolation._traverse_quadrants(Q_L1,Q_L2,Q_L3,Q_L4,exclude=None)
sympy.polys.rootisolation._vertical_bisection(N,a,b,I,Q,F1,F2,f1,f2,F)
sympy.polys.rootisolation._winding_number(T,field)
sympy.polys.rootisolation.dup_cauchy_lower_bound(f,K)
sympy.polys.rootisolation.dup_cauchy_upper_bound(f,K)
sympy.polys.rootisolation.dup_count_complex_roots(f,K,inf=None,sup=None,exclude=None)
sympy.polys.rootisolation.dup_count_real_roots(f,K,inf=None,sup=None)
sympy.polys.rootisolation.dup_inner_isolate_negative_roots(f,K,inf=None,sup=None,eps=None,fast=False,mobius=False)
sympy.polys.rootisolation.dup_inner_isolate_positive_roots(f,K,eps=None,inf=None,sup=None,fast=False,mobius=False)
sympy.polys.rootisolation.dup_inner_isolate_real_roots(f,K,eps=None,fast=False)
sympy.polys.rootisolation.dup_inner_refine_real_root(f,M,K,eps=None,steps=None,disjoint=None,fast=False,mobius=False)
sympy.polys.rootisolation.dup_isolate_all_roots(f,K,eps=None,inf=None,sup=None,fast=False)
sympy.polys.rootisolation.dup_isolate_all_roots_sqf(f,K,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.polys.rootisolation.dup_isolate_complex_roots_sqf(f,K,eps=None,inf=None,sup=None,blackbox=False)
sympy.polys.rootisolation.dup_isolate_real_roots(f,K,eps=None,inf=None,sup=None,basis=False,fast=False)
sympy.polys.rootisolation.dup_isolate_real_roots_list(polys,K,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.polys.rootisolation.dup_isolate_real_roots_sqf(f,K,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.polys.rootisolation.dup_mignotte_sep_bound_squared(f,K)
sympy.polys.rootisolation.dup_outer_refine_real_root(f,s,t,K,eps=None,steps=None,disjoint=None,fast=False)
sympy.polys.rootisolation.dup_refine_real_root(f,s,t,K,eps=None,steps=None,disjoint=None,fast=False)
sympy.polys.rootisolation.dup_root_lower_bound(f,K)
sympy.polys.rootisolation.dup_root_upper_bound(f,K)
sympy.polys.rootisolation.dup_step_refine_real_root(f,M,K,fast=False)
sympy.polys.rootisolation.dup_sturm(f,K)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/galoistools.py----------------------------------------
A:sympy.polys.galoistools.p->prod(M, start=K.one)
A:sympy.polys.galoistools.(s, _, _)->K.gcdex(e, m)
A:sympy.polys.galoistools.a->gf_int(f[n - k], p)
A:sympy.polys.galoistools.df->gf_degree(f)
A:sympy.polys.galoistools.dg->gf_degree(g)
A:sympy.polys.galoistools.k->int(_ceil(_sqrt(n // 2)))
A:sympy.polys.galoistools.jmin->max(0, i - df)
A:sympy.polys.galoistools.jmax->min(i, df)
A:sympy.polys.galoistools.f->gf_quo(f, g, p, K)
A:sympy.polys.galoistools.g->gf_gcd(f, h, p, K)
A:sympy.polys.galoistools.inv->K.invert(Q[k][i], p)
A:sympy.polys.galoistools.(q, r)->gf_div(f, g, p, K)
A:sympy.polys.galoistools.h->gf_pow_mod(H, (q - 1) // 2, f, p, K)
A:sympy.polys.galoistools.n->gf_degree(f)
A:sympy.polys.galoistools.mon->gf_lshift(b[i - 1], p, K)
A:sympy.polys.galoistools.b[i]->gf_rem(b[i], g, p, K)
A:sympy.polys.galoistools.b[1]->gf_pow_mod([K.one, K.zero], p, g, p, K)
A:sympy.polys.galoistools.m->gf_degree(g)
A:sympy.polys.galoistools.v->gf_compose_mod(v, v, f, p, K)
A:sympy.polys.galoistools.sf->gf_add(sf, v, p, K)
A:sympy.polys.galoistools.r->gf_random(N - 1, p, K)
A:sympy.polys.galoistools.res->gf_pow_mod(r, (p - 1) // 2, g, p, K)
A:sympy.polys.galoistools.(p0, r0)->gf_monic(f, p, K)
A:sympy.polys.galoistools.(p1, r1)->gf_monic(g, p, K)
A:sympy.polys.galoistools.(Q, R)->gf_div(r0, r1, p, K)
A:sympy.polys.galoistools.s->gf_sub_mul(s0, s1, Q, p, K)
A:sympy.polys.galoistools.t->gf_sub_mul(t0, t1, Q, p, K)
A:sympy.polys.galoistools.comp->gf_rem(comp, f, p, K)
A:sympy.polys.galoistools.u->gf_add(u, gf_compose_mod(u, v, f, p, K), p, K)
A:sympy.polys.galoistools.U->gf_add(U, gf_compose_mod(u, V, f, p, K), p, K)
A:sympy.polys.galoistools.V->gf_Qbasis(Q, p, K)
A:sympy.polys.galoistools.(_, f)->gf_monic(f, p, K)
A:sympy.polys.galoistools.Hh->gf_frobenius_map([K.one, K.zero], f, b, p, K)
A:sympy.polys.galoistools.b->gf_frobenius_monomial_base(f, p, K)
A:sympy.polys.galoistools.method->query('GF_IRRED_METHOD')
A:sympy.polys.galoistools.irred->gf_irred_p_rabin(f, p, K)
A:sympy.polys.galoistools.(_, sqf)->gf_sqf_list(f, p, K)
A:sympy.polys.galoistools.(lc, f)->gf_monic(f, p, K)
A:sympy.polys.galoistools.F->gf_gcd(g, h, p, K)
A:sympy.polys.galoistools.G->gf_gcd(g, h, p, K)
A:sympy.polys.galoistools.H->_gf_trace_map(r, n, f, b, p, K)
A:sympy.polys.galoistools.Q[i // r]->list(qq)
A:sympy.polys.galoistools.Q->gf_Qmatrix(f, p, K)
A:sympy.polys.galoistools.V[i]->gf_compose_mod(V[i - 1], h, f, p, K)
A:sympy.polys.galoistools.U[i]->gf_frobenius_map(U[i - 1], f, b, p, K)
A:sympy.polys.galoistools.h1->gf_gcd(f, h, p, K)
A:sympy.polys.galoistools.h2->gf_gcd(f, gf_sub_ground(h, K.one, p, K), p, K)
A:sympy.polys.galoistools.h3->gf_quo(f, gf_mul(h1, h2, p, K), p, K)
A:sympy.polys.galoistools.factors->gf_zassenhaus(f, p, K)
A:sympy.polys.galoistools.(r, _, g)->gcdex(a, m)
A:sympy.polys.galoistools.f_f->gf_diff(f, p, ZZ)
A:sympy.polys.galoistools.alpha->gf_value(f_f, x)
A:sympy.polys.galoistools.S->list(zip(X1, [1] * len(X1)))
A:sympy.polys.galoistools.(x, s)->list(zip(X1, [1] * len(X1))).pop()
A:sympy.polys.galoistools.P->factorint(n)
A:sympy.polys.galoistools.pools->list(map(tuple, X))
sympy.polys.galoistools._gf_pow_pnm1d2(f,n,g,b,p,K)
sympy.polys.galoistools._gf_trace_map(f,n,g,b,p,K)
sympy.polys.galoistools._raise_mod_power(x,s,p,f)
sympy.polys.galoistools.csolve_prime(f,p,e=1)
sympy.polys.galoistools.gf_LC(f,K)
sympy.polys.galoistools.gf_Qbasis(Q,p,K)
sympy.polys.galoistools.gf_Qmatrix(f,p,K)
sympy.polys.galoistools.gf_TC(f,K)
sympy.polys.galoistools.gf_add(f,g,p,K)
sympy.polys.galoistools.gf_add_ground(f,a,p,K)
sympy.polys.galoistools.gf_add_mul(f,g,h,p,K)
sympy.polys.galoistools.gf_berlekamp(f,p,K)
sympy.polys.galoistools.gf_cofactors(f,g,p,K)
sympy.polys.galoistools.gf_compose(f,g,p,K)
sympy.polys.galoistools.gf_compose_mod(g,h,f,p,K)
sympy.polys.galoistools.gf_crt(U,M,K=None)
sympy.polys.galoistools.gf_crt1(M,K)
sympy.polys.galoistools.gf_crt2(U,M,p,E,S,K)
sympy.polys.galoistools.gf_csolve(f,n)
sympy.polys.galoistools.gf_ddf_shoup(f,p,K)
sympy.polys.galoistools.gf_ddf_zassenhaus(f,p,K)
sympy.polys.galoistools.gf_degree(f)
sympy.polys.galoistools.gf_diff(f,p,K)
sympy.polys.galoistools.gf_div(f,g,p,K)
sympy.polys.galoistools.gf_edf_shoup(f,n,p,K)
sympy.polys.galoistools.gf_edf_zassenhaus(f,n,p,K)
sympy.polys.galoistools.gf_eval(f,a,p,K)
sympy.polys.galoistools.gf_expand(F,p,K)
sympy.polys.galoistools.gf_exquo(f,g,p,K)
sympy.polys.galoistools.gf_factor(f,p,K)
sympy.polys.galoistools.gf_factor_sqf(f,p,K,method=None)
sympy.polys.galoistools.gf_frobenius_map(f,g,b,p,K)
sympy.polys.galoistools.gf_frobenius_monomial_base(g,p,K)
sympy.polys.galoistools.gf_from_dict(f,p,K)
sympy.polys.galoistools.gf_from_int_poly(f,p)
sympy.polys.galoistools.gf_gcd(f,g,p,K)
sympy.polys.galoistools.gf_gcdex(f,g,p,K)
sympy.polys.galoistools.gf_int(a,p)
sympy.polys.galoistools.gf_irred_p_ben_or(f,p,K)
sympy.polys.galoistools.gf_irred_p_rabin(f,p,K)
sympy.polys.galoistools.gf_irreducible(n,p,K)
sympy.polys.galoistools.gf_irreducible_p(f,p,K)
sympy.polys.galoistools.gf_lcm(f,g,p,K)
sympy.polys.galoistools.gf_lshift(f,n,K)
sympy.polys.galoistools.gf_monic(f,p,K)
sympy.polys.galoistools.gf_mul(f,g,p,K)
sympy.polys.galoistools.gf_mul_ground(f,a,p,K)
sympy.polys.galoistools.gf_multi_eval(f,A,p,K)
sympy.polys.galoistools.gf_neg(f,p,K)
sympy.polys.galoistools.gf_normal(f,p,K)
sympy.polys.galoistools.gf_pow(f,n,p,K)
sympy.polys.galoistools.gf_pow_mod(f,n,g,p,K)
sympy.polys.galoistools.gf_quo(f,g,p,K)
sympy.polys.galoistools.gf_quo_ground(f,a,p,K)
sympy.polys.galoistools.gf_random(n,p,K)
sympy.polys.galoistools.gf_rem(f,g,p,K)
sympy.polys.galoistools.gf_rshift(f,n,K)
sympy.polys.galoistools.gf_shoup(f,p,K)
sympy.polys.galoistools.gf_sqf_list(f,p,K,all=False)
sympy.polys.galoistools.gf_sqf_p(f,p,K)
sympy.polys.galoistools.gf_sqf_part(f,p,K)
sympy.polys.galoistools.gf_sqr(f,p,K)
sympy.polys.galoistools.gf_strip(f)
sympy.polys.galoistools.gf_sub(f,g,p,K)
sympy.polys.galoistools.gf_sub_ground(f,a,p,K)
sympy.polys.galoistools.gf_sub_mul(f,g,h,p,K)
sympy.polys.galoistools.gf_to_dict(f,p,symmetric=True)
sympy.polys.galoistools.gf_to_int_poly(f,p,symmetric=True)
sympy.polys.galoistools.gf_trace_map(a,b,c,n,f,p,K)
sympy.polys.galoistools.gf_trunc(f,p)
sympy.polys.galoistools.gf_value(f,a)
sympy.polys.galoistools.gf_zassenhaus(f,p,K)
sympy.polys.galoistools.linear_congruence(a,b,m)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/rings.py----------------------------------------
A:sympy.polys.rings._ring->PolyRing(opt.gens, opt.domain, opt.order)
A:sympy.polys.rings.exprs->list(map(sympify, exprs))
A:sympy.polys.rings.opt->build_options(symbols, options)
A:sympy.polys.rings.(reps, opt)->_parallel_dict_from_expr(exprs, opt)
A:sympy.polys.rings.coeffs->sum([list(rep.values()) for rep in reps], [])
A:sympy.polys.rings.(opt.domain, coeffs_dom)->construct_domain(coeffs, opt=opt)
A:sympy.polys.rings.coeff_map->dict(zip(coeffs, coeffs_dom))
A:sympy.polys.rings.polys->list(map(_ring.from_dict, reps))
A:sympy.polys.rings.symbols->list(ring.symbols)
A:sympy.polys.rings.ngens->len(symbols)
A:sympy.polys.rings.domain->sympy.polys.polyoptions.Domain.preprocess(domain)
A:sympy.polys.rings.order->sympy.polys.polyoptions.Order.preprocess(order)
A:sympy.polys.rings.obj->object.__new__(cls)
A:sympy.polys.rings.obj._hash->hash(_hash_tuple)
A:sympy.polys.rings.obj.dtype->type('PolyElement', (PolyElement,), {'ring': obj})
A:sympy.polys.rings.obj.gens->object.__new__(cls)._gens()
A:sympy.polys.rings.obj._gens_set->set(obj.gens)
A:sympy.polys.rings.codegen->MonomialOps(ngens)
A:sympy.polys.rings.obj.monomial_mul->MonomialOps(ngens).mul()
A:sympy.polys.rings.obj.monomial_pow->MonomialOps(ngens).pow()
A:sympy.polys.rings.obj.monomial_mulpow->MonomialOps(ngens).mulpow()
A:sympy.polys.rings.obj.monomial_ldiv->MonomialOps(ngens).ldiv()
A:sympy.polys.rings.obj.monomial_div->MonomialOps(ngens).div()
A:sympy.polys.rings.obj.monomial_lcm->MonomialOps(ngens).lcm()
A:sympy.polys.rings.obj.monomial_gcd->MonomialOps(ngens).gcd()
A:sympy.polys.rings.expv->self.leading_expv()
A:sympy.polys.rings.state->self.__dict__.copy()
A:sympy.polys.rings.coeff->domain_new(coeff, orig_domain)
A:sympy.polys.rings.generator->list(zip(ring.gens, polys)).get(expr)
A:sympy.polys.rings.(base, exp)->expr.as_base_exp()
A:sympy.polys.rings.mapping->list(zip(ring.gens, polys))
A:sympy.polys.rings.poly->self.copy().new(terms)
A:sympy.polys.rings.i->ring.index(x)
A:sympy.polys.rings.indices->list(range(n - 1))
A:sympy.polys.rings.syms->set(self.symbols).union(set(symbols))
A:sympy.polys.rings.monom->list(monom)
A:sympy.polys.rings.self._hash_hash->hash((self.ring, frozenset(self.items())))
A:sympy.polys.rings.terms->list(element.iterterms())
A:sympy.polys.rings.ground_ring->sympy.polys.polyoptions.Domain.preprocess(domain).get_ring()
A:sympy.polys.rings.common->lcm(common, denom(coeff))
A:sympy.polys.rings.p2->ring.domain_new(p2)
A:sympy.polys.rings.(i, ring)->self._drop_to_ground(gen)
A:sympy.polys.rings.K->list(k)
A:sympy.polys.rings.poly[mon]->(gen ** monom[i]).mul_ground(coeff)
A:sympy.polys.rings.negative->ring.domain.is_negative(coeff)
A:sympy.polys.rings.scoeff->printer.parenthesize(coeff, prec_mul, strict=True)
A:sympy.polys.rings.symbol->printer.parenthesize(symbols[i], prec_atom, strict=True)
A:sympy.polys.rings.sexp->printer.parenthesize(exp, prec_atom, strict=False)
A:sympy.polys.rings.head->sexpvs.pop(0)
A:sympy.polys.rings.p->p.mul_ground(u).mul_ground(u)
A:sympy.polys.rings.cp2->ring.domain_new(p2)
A:sympy.polys.rings.n->int(n)
A:sympy.polys.rings.p2it->list(p2.items())
A:sympy.polys.rings.exp->monomial_mul(k1, k2)
A:sympy.polys.rings.c->sympy.polys.polyoptions.Domain.preprocess(domain).lcm(fc, gc)
A:sympy.polys.rings.multinomials->multinomial_coefficients(len(self), n).items()
A:sympy.polys.rings.product_monom->monomial_mulpow(product_monom, monom, exp)
A:sympy.polys.rings.keys->list(self.keys())
A:sympy.polys.rings.k2->monomial_mul(k, k)
A:sympy.polys.rings.s->len(fv)
A:sympy.polys.rings.term_div->self.copy()._term_div()
A:sympy.polys.rings.term->term_div((expv, p[expv]), (expvs[i], fv[i][expvs[i]]))
A:sympy.polys.rings.qv[i]->qv[i]._iadd_monom((expv1, c))._iadd_monom((expv1, c))
A:sympy.polys.rings.r->r._iadd_monom((expv, p[expv]))._iadd_monom((expv, p[expv]))
A:sympy.polys.rings.f->self.copy()
A:sympy.polys.rings.tq->term_div(ltf, g.LT)
A:sympy.polys.rings.m1->monomial_mul(mg, m)
A:sympy.polys.rings.ltm->self.copy().leading_expv()
A:sympy.polys.rings.(q, r)->self.copy().div(G)
A:sympy.polys.rings.cpself->self.copy()
A:sympy.polys.rings.p1->p1.copy().copy()
A:sympy.polys.rings.ka->monomial_mul(k, m)
A:sympy.polys.rings.cont->self.copy().content()
A:sympy.polys.rings.fc->self.copy().content()
A:sympy.polys.rings.gc->g.set_ring(new_ring).content()
A:sympy.polys.rings.gcd->self.copy().ring.domain.gcd(fc, gc)
A:sympy.polys.rings.g->g.set_ring(new_ring).set_ring(new_ring)
A:sympy.polys.rings.J[i]->igcd(J[i], m)
A:sympy.polys.rings.J->tuple(J)
A:sympy.polys.rings.(fc, f)->self.copy().primitive()
A:sympy.polys.rings.(gc, g)->g.set_ring(new_ring).set_ring(new_ring).primitive()
A:sympy.polys.rings.h->h.set_ring(ring).set_ring(ring)
A:sympy.polys.rings.(h, cff, cfg)->self.copy()._gcd_ZZ(g)
A:sympy.polys.rings.(h, cfg, cff)->g.set_ring(new_ring).set_ring(new_ring)._gcd_monom(f)
A:sympy.polys.rings.(J, (f, g))->self.copy().deflate(g)
A:sympy.polys.rings._mgcd->monomial_gcd(_mgcd, mg)
A:sympy.polys.rings._cgcd->ground_gcd(_cgcd, cg)
A:sympy.polys.rings.cff->cff.set_ring(ring).mul_ground(ring.domain.quo(c, cf)).set_ring(ring).mul_ground(ring.domain.quo(c, cf))
A:sympy.polys.rings.cfg->cfg.set_ring(ring).mul_ground(ring.domain.quo(c, cg)).set_ring(ring).mul_ground(ring.domain.quo(c, cg))
A:sympy.polys.rings.new_ring->ring.clone(domain=domain.get_ring())
A:sympy.polys.rings.(cf, f)->self.copy().clear_denoms()
A:sympy.polys.rings.(cg, g)->g.set_ring(new_ring).set_ring(new_ring).clear_denoms()
A:sympy.polys.rings.(_, p, q)->self.copy().cofactors(g)
A:sympy.polys.rings.(cq, f)->self.copy().clear_denoms()
A:sympy.polys.rings.(cp, g)->g.set_ring(new_ring).set_ring(new_ring).clear_denoms()
A:sympy.polys.rings.(_, cp, cq)->ring.clone(domain=domain.get_ring()).domain.cofactors(cp, cq)
A:sympy.polys.rings.q->q.mul_ground(u).mul_ground(u)
A:sympy.polys.rings.u->q.mul_ground(u).mul_ground(u).canonical_unit()
A:sympy.polys.rings.m->ring.monomial_basis(i)
A:sympy.polys.rings.e->ring.monomial_ldiv(expv, m)
A:sympy.polys.rings.g[e]->ring.domain_new(coeff * expv[i])
A:sympy.polys.rings.a->ring.domain.convert(a)
A:sympy.polys.rings.weights->list(range(n, 0, -1))
A:sympy.polys.rings.height->max([n * m for (n, m) in zip(weights, monom)])
A:sympy.polys.rings.gens_map->dict(zip(ring.gens, range(ring.ngens)))
A:sympy.polys.rings.replacements->sorted(x.items(), key=lambda k: gens_map[k[0]])
A:sympy.polys.rings.subpoly->subpoly.mul_term((tuple(monom), coeff)).mul_term((tuple(monom), coeff))
sympy.polys.rings.PolyElement(f,*values)
sympy.polys.rings.PolyElement.LC(self)
sympy.polys.rings.PolyElement.LM(self)
sympy.polys.rings.PolyElement.LT(self)
sympy.polys.rings.PolyElement.__add__(p1,p2)
sympy.polys.rings.PolyElement.__divmod__(p1,p2)
sympy.polys.rings.PolyElement.__eq__(p1,p2)
sympy.polys.rings.PolyElement.__ge__(p1,p2)
sympy.polys.rings.PolyElement.__getnewargs__(self)
sympy.polys.rings.PolyElement.__gt__(p1,p2)
sympy.polys.rings.PolyElement.__hash__(self)
sympy.polys.rings.PolyElement.__le__(p1,p2)
sympy.polys.rings.PolyElement.__lt__(p1,p2)
sympy.polys.rings.PolyElement.__mod__(p1,p2)
sympy.polys.rings.PolyElement.__mul__(p1,p2)
sympy.polys.rings.PolyElement.__ne__(p1,p2)
sympy.polys.rings.PolyElement.__neg__(self)
sympy.polys.rings.PolyElement.__pos__(self)
sympy.polys.rings.PolyElement.__pow__(self,n)
sympy.polys.rings.PolyElement.__radd__(p1,n)
sympy.polys.rings.PolyElement.__rdivmod__(p1,p2)
sympy.polys.rings.PolyElement.__rmod__(p1,p2)
sympy.polys.rings.PolyElement.__rmul__(p1,p2)
sympy.polys.rings.PolyElement.__rsub__(p1,n)
sympy.polys.rings.PolyElement.__rtruediv__(p1,p2)
sympy.polys.rings.PolyElement.__sub__(p1,p2)
sympy.polys.rings.PolyElement.__truediv__(p1,p2)
sympy.polys.rings.PolyElement._cmp(p1,p2,op)
sympy.polys.rings.PolyElement._drop(self,gen)
sympy.polys.rings.PolyElement._drop_to_ground(self,gen)
sympy.polys.rings.PolyElement._gcd(f,g)
sympy.polys.rings.PolyElement._gcd_QQ(self,g)
sympy.polys.rings.PolyElement._gcd_ZZ(f,g)
sympy.polys.rings.PolyElement._gcd_monom(f,g)
sympy.polys.rings.PolyElement._gcd_zero(f,g)
sympy.polys.rings.PolyElement._get_coeff(self,expv)
sympy.polys.rings.PolyElement._iadd_monom(self,mc)
sympy.polys.rings.PolyElement._iadd_poly_monom(self,p2,mc)
sympy.polys.rings.PolyElement._norm(f,norm_func)
sympy.polys.rings.PolyElement._pow_generic(self,n)
sympy.polys.rings.PolyElement._pow_multinomial(self,n)
sympy.polys.rings.PolyElement._sorted(self,seq,order)
sympy.polys.rings.PolyElement._term_div(self)
sympy.polys.rings.PolyElement.almosteq(p1,p2,tolerance=None)
sympy.polys.rings.PolyElement.as_expr(self,*symbols)
sympy.polys.rings.PolyElement.as_expr_dict(self)
sympy.polys.rings.PolyElement.cancel(self,g)
sympy.polys.rings.PolyElement.canonical_unit(f)
sympy.polys.rings.PolyElement.clear_denoms(self)
sympy.polys.rings.PolyElement.coeff(self,element)
sympy.polys.rings.PolyElement.coeffs(self,order=None)
sympy.polys.rings.PolyElement.cofactors(f,g)
sympy.polys.rings.PolyElement.compose(f,x,a=None)
sympy.polys.rings.PolyElement.const(self)
sympy.polys.rings.PolyElement.content(f)
sympy.polys.rings.PolyElement.copy(self)
sympy.polys.rings.PolyElement.decompose(f)
sympy.polys.rings.PolyElement.deflate(f,*G)
sympy.polys.rings.PolyElement.degree(f,x=None)
sympy.polys.rings.PolyElement.degrees(f)
sympy.polys.rings.PolyElement.diff(f,x)
sympy.polys.rings.PolyElement.discriminant(f)
sympy.polys.rings.PolyElement.div(self,fv)
sympy.polys.rings.PolyElement.drop(self,gen)
sympy.polys.rings.PolyElement.drop_to_ground(self,gen)
sympy.polys.rings.PolyElement.evaluate(self,x,a=None)
sympy.polys.rings.PolyElement.exquo(f,G)
sympy.polys.rings.PolyElement.extract_ground(self,g)
sympy.polys.rings.PolyElement.factor_list(f)
sympy.polys.rings.PolyElement.gcd(f,g)
sympy.polys.rings.PolyElement.gcdex(f,g)
sympy.polys.rings.PolyElement.gff_list(f)
sympy.polys.rings.PolyElement.half_gcdex(f,g)
sympy.polys.rings.PolyElement.imul_num(p,c)
sympy.polys.rings.PolyElement.inflate(f,J)
sympy.polys.rings.PolyElement.is_cyclotomic(f)
sympy.polys.rings.PolyElement.is_generator(self)
sympy.polys.rings.PolyElement.is_ground(self)
sympy.polys.rings.PolyElement.is_irreducible(f)
sympy.polys.rings.PolyElement.is_linear(f)
sympy.polys.rings.PolyElement.is_monic(f)
sympy.polys.rings.PolyElement.is_monomial(self)
sympy.polys.rings.PolyElement.is_negative(self)
sympy.polys.rings.PolyElement.is_nonnegative(self)
sympy.polys.rings.PolyElement.is_nonpositive(self)
sympy.polys.rings.PolyElement.is_one(f)
sympy.polys.rings.PolyElement.is_positive(self)
sympy.polys.rings.PolyElement.is_primitive(f)
sympy.polys.rings.PolyElement.is_quadratic(f)
sympy.polys.rings.PolyElement.is_squarefree(f)
sympy.polys.rings.PolyElement.is_term(self)
sympy.polys.rings.PolyElement.is_zero(f)
sympy.polys.rings.PolyElement.itercoeffs(self)
sympy.polys.rings.PolyElement.itermonoms(self)
sympy.polys.rings.PolyElement.iterterms(self)
sympy.polys.rings.PolyElement.l1_norm(f)
sympy.polys.rings.PolyElement.lcm(self,g)
sympy.polys.rings.PolyElement.leading_expv(self)
sympy.polys.rings.PolyElement.leading_monom(self)
sympy.polys.rings.PolyElement.leading_term(self)
sympy.polys.rings.PolyElement.listcoeffs(self)
sympy.polys.rings.PolyElement.listmonoms(self)
sympy.polys.rings.PolyElement.listterms(self)
sympy.polys.rings.PolyElement.max_norm(f)
sympy.polys.rings.PolyElement.monic(f)
sympy.polys.rings.PolyElement.monoms(self,order=None)
sympy.polys.rings.PolyElement.mul_ground(f,x)
sympy.polys.rings.PolyElement.mul_monom(f,monom)
sympy.polys.rings.PolyElement.mul_term(f,term)
sympy.polys.rings.PolyElement.new(self,init)
sympy.polys.rings.PolyElement.parent(self)
sympy.polys.rings.PolyElement.pdiv(f,g)
sympy.polys.rings.PolyElement.pexquo(f,g)
sympy.polys.rings.PolyElement.pquo(f,g)
sympy.polys.rings.PolyElement.prem(f,g)
sympy.polys.rings.PolyElement.primitive(f)
sympy.polys.rings.PolyElement.quo(f,G)
sympy.polys.rings.PolyElement.quo_ground(f,x)
sympy.polys.rings.PolyElement.quo_term(f,term)
sympy.polys.rings.PolyElement.rem(self,G)
sympy.polys.rings.PolyElement.resultant(f,g)
sympy.polys.rings.PolyElement.set_ring(self,new_ring)
sympy.polys.rings.PolyElement.shift(f,a)
sympy.polys.rings.PolyElement.sort_key(self)
sympy.polys.rings.PolyElement.sqf_list(f,all=False)
sympy.polys.rings.PolyElement.sqf_norm(f)
sympy.polys.rings.PolyElement.sqf_part(f)
sympy.polys.rings.PolyElement.square(self)
sympy.polys.rings.PolyElement.str(self,printer,precedence,exp_pattern,mul_symbol)
sympy.polys.rings.PolyElement.strip_zero(self)
sympy.polys.rings.PolyElement.sturm(f)
sympy.polys.rings.PolyElement.subresultants(f,g)
sympy.polys.rings.PolyElement.subs(self,x,a=None)
sympy.polys.rings.PolyElement.symmetrize(self)
sympy.polys.rings.PolyElement.tail_degree(f,x=None)
sympy.polys.rings.PolyElement.tail_degrees(f)
sympy.polys.rings.PolyElement.terms(self,order=None)
sympy.polys.rings.PolyElement.to_dense(self)
sympy.polys.rings.PolyElement.to_dict(self)
sympy.polys.rings.PolyElement.trunc_ground(f,p)
sympy.polys.rings.PolyRing(cls,symbols,domain,order=lex)
sympy.polys.rings.PolyRing.__eq__(self,other)
sympy.polys.rings.PolyRing.__getitem__(self,key)
sympy.polys.rings.PolyRing.__getnewargs__(self)
sympy.polys.rings.PolyRing.__getstate__(self)
sympy.polys.rings.PolyRing.__hash__(self)
sympy.polys.rings.PolyRing.__ne__(self,other)
sympy.polys.rings.PolyRing._gens(self)
sympy.polys.rings.PolyRing._rebuild_expr(self,expr,mapping)
sympy.polys.rings.PolyRing.add(self,*objs)
sympy.polys.rings.PolyRing.add_gens(self,symbols)
sympy.polys.rings.PolyRing.clone(self,symbols=None,domain=None,order=None)
sympy.polys.rings.PolyRing.compose(self,other)
sympy.polys.rings.PolyRing.domain_new(self,element,orig_domain=None)
sympy.polys.rings.PolyRing.drop(self,*gens)
sympy.polys.rings.PolyRing.drop_to_ground(self,*gens)
sympy.polys.rings.PolyRing.from_dict(self,element,orig_domain=None)
sympy.polys.rings.PolyRing.from_expr(self,expr)
sympy.polys.rings.PolyRing.from_list(self,element)
sympy.polys.rings.PolyRing.from_terms(self,element,orig_domain=None)
sympy.polys.rings.PolyRing.ground_new(self,coeff)
sympy.polys.rings.PolyRing.index(self,gen)
sympy.polys.rings.PolyRing.is_multivariate(self)
sympy.polys.rings.PolyRing.is_univariate(self)
sympy.polys.rings.PolyRing.monomial_basis(self,i)
sympy.polys.rings.PolyRing.mul(self,*objs)
sympy.polys.rings.PolyRing.one(self)
sympy.polys.rings.PolyRing.ring_new(self,element)
sympy.polys.rings.PolyRing.symmetric_poly(self,n)
sympy.polys.rings.PolyRing.term_new(self,monom,coeff)
sympy.polys.rings.PolyRing.to_domain(self)
sympy.polys.rings.PolyRing.to_field(self)
sympy.polys.rings.PolyRing.to_ground(self)
sympy.polys.rings.PolyRing.zero(self)
sympy.polys.rings._parse_symbols(symbols)
sympy.polys.rings.ring(symbols,domain,order=lex)
sympy.polys.rings.sring(exprs,*symbols,**options)
sympy.polys.rings.vring(symbols,domain,order=lex)
sympy.polys.rings.xring(symbols,domain,order=lex)
sympy.ring(symbols,domain,order=lex)
sympy.sring(exprs,*symbols,**options)
sympy.vring(symbols,domain,order=lex)
sympy.xring(symbols,domain,order=lex)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/orderings.py----------------------------------------
A:sympy.polys.orderings.lex->LexOrder()
A:sympy.polys.orderings.grlex->GradedLexOrder()
A:sympy.polys.orderings.grevlex->ReversedGradedLexOrder()
A:sympy.polys.orderings.ilex->InverseOrder(lex)
A:sympy.polys.orderings.igrlex->InverseOrder(grlex)
A:sympy.polys.orderings.igrevlex->InverseOrder(grevlex)
A:sympy.polys.orderings.order->str(order)
A:sympy.polys.orderings.self.seq->tuple(seq)
sympy.polys.orderings.GradedLexOrder(self,monomial)
sympy.polys.orderings.InverseOrder(self,O)
sympy.polys.orderings.InverseOrder.__eq__(self,other)
sympy.polys.orderings.InverseOrder.__hash__(self)
sympy.polys.orderings.InverseOrder.__str__(self)
sympy.polys.orderings.InverseOrder.is_global(self)
sympy.polys.orderings.LexOrder(self,monomial)
sympy.polys.orderings.MonomialOrder(self,monomial)
sympy.polys.orderings.MonomialOrder.__eq__(self,other)
sympy.polys.orderings.MonomialOrder.__hash__(self)
sympy.polys.orderings.MonomialOrder.__ne__(self,other)
sympy.polys.orderings.MonomialOrder.__repr__(self)
sympy.polys.orderings.MonomialOrder.__str__(self)
sympy.polys.orderings.ProductOrder(self,*args)
sympy.polys.orderings.ProductOrder.__eq__(self,other)
sympy.polys.orderings.ProductOrder.__hash__(self)
sympy.polys.orderings.ProductOrder.__repr__(self)
sympy.polys.orderings.ProductOrder.__str__(self)
sympy.polys.orderings.ProductOrder.is_global(self)
sympy.polys.orderings.ReversedGradedLexOrder(self,monomial)
sympy.polys.orderings._ItemGetter(self,seq)
sympy.polys.orderings._ItemGetter.__eq__(self,other)
sympy.polys.orderings.build_product_order(arg,gens)
sympy.polys.orderings.monomial_key(order=None,gens=None)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/rationaltools.py----------------------------------------
A:sympy.polys.rationaltools.base->_together(expr.base)
A:sympy.polys.rationaltools.exp->_together(expr.exp)
sympy.polys.rationaltools.together(expr,deep=False,fraction=True)
sympy.together(expr,deep=False,fraction=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polyquinticconst.py----------------------------------------
A:sympy.polys.polyquinticconst.x->Symbol('x')
A:sympy.polys.polyquinticconst.(_, _, self.p, self.q, self.r, self.s)->poly.all_coeffs()
sympy.polys.polyquinticconst.PolyQuintic(self,poly)
sympy.polys.polyquinticconst.PolyQuintic.F(self)
sympy.polys.polyquinticconst.PolyQuintic.T(self,theta,d)
sympy.polys.polyquinticconst.PolyQuintic.a(self)
sympy.polys.polyquinticconst.PolyQuintic.b(self)
sympy.polys.polyquinticconst.PolyQuintic.c(self)
sympy.polys.polyquinticconst.PolyQuintic.f20(self)
sympy.polys.polyquinticconst.PolyQuintic.l0(self,theta)
sympy.polys.polyquinticconst.PolyQuintic.o(self)
sympy.polys.polyquinticconst.PolyQuintic.order(self,theta,d)
sympy.polys.polyquinticconst.PolyQuintic.uv(self,theta,d)
sympy.polys.polyquinticconst.PolyQuintic.zeta(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/fglmtools.py----------------------------------------
A:sympy.polys.fglmtools.ring_to->ring.clone(order=O_to)
A:sympy.polys.fglmtools.old_basis->_basis(F, ring)
A:sympy.polys.fglmtools.M->_representing_matrices(old_basis, F, ring)
A:sympy.polys.fglmtools.t->candidates.pop()
A:sympy.polys.fglmtools.P->_update(s, _lambda, P)
A:sympy.polys.fglmtools.s->len(S)
A:sympy.polys.fglmtools.v->_matrix_mul(M[t[0]], V[t[1]])
A:sympy.polys.fglmtools._lambda->_matrix_mul(P, v)
A:sympy.polys.fglmtools.lt->ring.term_new(_incr_k(S[t[1]], t[0]), domain.one)
A:sympy.polys.fglmtools.rest->ring.from_dict({S[i]: _lambda[i] for i in range(s)})
A:sympy.polys.fglmtools.g->(lt - rest).set_ring(ring_to)
A:sympy.polys.fglmtools.L->list(set(L))
A:sympy.polys.fglmtools.k->min([j for j in range(s, len(_lambda)) if _lambda[j] != 0])
A:sympy.polys.fglmtools.r->ring.term_new(monomial_mul(m, v), domain.one).rem(G)
A:sympy.polys.fglmtools.j->list(set(basis)).index(monom)
A:sympy.polys.fglmtools.basis->list(set(basis))
sympy.polys.fglmtools._basis(G,ring)
sympy.polys.fglmtools._identity_matrix(n,domain)
sympy.polys.fglmtools._incr_k(m,k)
sympy.polys.fglmtools._matrix_mul(M,v)
sympy.polys.fglmtools._representing_matrices(basis,G,ring)
sympy.polys.fglmtools._update(s,_lambda,P)
sympy.polys.fglmtools.matrix_fglm(F,ring,O_to)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polyclasses.py----------------------------------------
A:sympy.polys.polyclasses.rep->dmp_to_dict(f.rep, 0, f.dom)
A:sympy.polys.polyclasses.(rep, lev)->dmp_validate(rep)
A:sympy.polys.polyclasses.ring->ring.unify(g.ring).unify(g.ring)
A:sympy.polys.polyclasses.F->dup_convert(f.rep, f.dom, dom)
A:sympy.polys.polyclasses.G->dup_convert(g.rep, g.dom, dom)
A:sympy.polys.polyclasses.rep[k]->f.dom.to_sympy(v)
A:sympy.polys.polyclasses.n->dup_degree(f.rep)
A:sympy.polys.polyclasses.(J, F)->dmp_terms_gcd(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(F, lev)->dmp_inject(f.rep, f.lev, f.dom, front=front)
A:sympy.polys.polyclasses.(J, F, u)->dmp_exclude(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(lev, dom, per, F, G)->f.frac_unify(g)
A:sympy.polys.polyclasses.(q, r)->dmp_div(F, G, lev, dom)
A:sympy.polys.polyclasses.res->f.per(f.den, f.num, cancel=False)
A:sympy.polys.polyclasses.td->f.total_degree()
A:sympy.polys.polyclasses.d->sum(term[0])
A:sympy.polys.polyclasses.l->list(term[0])
A:sympy.polys.polyclasses.monoms->f.monoms()
A:sympy.polys.polyclasses.tdeg->sum(monoms[0])
A:sympy.polys.polyclasses._tdeg->sum(monom)
A:sympy.polys.polyclasses.(coeff, F)->dmp_clear_denoms(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(s, h)->dup_half_gcdex(G, mod, dom)
A:sympy.polys.polyclasses.(s, t, h)->dup_gcdex(F, G, dom)
A:sympy.polys.polyclasses.R->dmp_subresultants(F, G, lev, dom)
A:sympy.polys.polyclasses.(res, R)->dmp_resultant(F, G, lev, dom, includePRS=includePRS)
A:sympy.polys.polyclasses.(h, cff, cfg)->dmp_inner_gcd(F, G, lev, dom)
A:sympy.polys.polyclasses.(F, G)->dmp_cancel(F, G, lev, dom, include=True)
A:sympy.polys.polyclasses.(cF, cG, F, G)->dmp_cancel(F, G, lev, dom, include=False)
A:sympy.polys.polyclasses.(cont, F)->dmp_ground_primitive(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(lev, dom, per, P, Q)->p.unify(q)
A:sympy.polys.polyclasses.(lev, dom, per, F, P)->f.unify(per(P, dom, lev))
A:sympy.polys.polyclasses.(lev, dom, per, F, Q)->per(F, dom, lev).unify(per(Q, dom, lev))
A:sympy.polys.polyclasses.r->dmp_norm(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(s, g, r)->dmp_sqf_norm(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(coeff, factors)->dmp_factor_list(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.factors->dmp_factor_list_include(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.g->f.ring.convert(g)
A:sympy.polys.polyclasses.(_, _, _, F, G)->f.frac_unify(g)
A:sympy.polys.polyclasses.(num, den, lev)->cls._parse(rep, dom, lev)
A:sympy.polys.polyclasses.(num, den)->dmp_cancel(num, den, lev, dom)
A:sympy.polys.polyclasses.obj->object.__new__(cls)
A:sympy.polys.polyclasses.num->dmp_mul(F_num, G_den, lev, dom)
A:sympy.polys.polyclasses.den->dmp_mul(F_den, G_num, lev, dom)
A:sympy.polys.polyclasses.(num, num_lev)->dmp_validate(num)
A:sympy.polys.polyclasses.(den, den_lev)->dmp_validate(den)
A:sympy.polys.polyclasses.(num, lev)->dmp_validate(num)
A:sympy.polys.polyclasses.(lev, dom, per, (F_num, F_den), G)->f.poly_unify(g)
A:sympy.polys.polyclasses.(_, _, _, (F_num, F_den), G)->f.poly_unify(g)
A:sympy.polys.polyclasses.self.rep->dup_strip(rep)
A:sympy.polys.polyclasses.self.mod->dup_strip(mod)
A:sympy.polys.polyclasses.dom->f.dom.unify(g.dom)
A:sympy.polys.polyclasses.mod->dup_convert(f.mod, f.dom, dom)
A:sympy.polys.polyclasses.(dom, per, F, G, mod)->f.unify(g)
A:sympy.polys.polyclasses.(dom, _, _, G, mod)->f.unify(g)
A:sympy.polys.polyclasses.(_, _, F, G, _)->f.unify(g)
sympy.polys.polyclasses.ANP(self,rep,mod,dom)
sympy.polys.polyclasses.ANP.LC(f)
sympy.polys.polyclasses.ANP.TC(f)
sympy.polys.polyclasses.ANP.__add__(f,g)
sympy.polys.polyclasses.ANP.__bool__(f)
sympy.polys.polyclasses.ANP.__divmod__(f,g)
sympy.polys.polyclasses.ANP.__eq__(f,g)
sympy.polys.polyclasses.ANP.__ge__(f,g)
sympy.polys.polyclasses.ANP.__gt__(f,g)
sympy.polys.polyclasses.ANP.__hash__(f)
sympy.polys.polyclasses.ANP.__le__(f,g)
sympy.polys.polyclasses.ANP.__lt__(f,g)
sympy.polys.polyclasses.ANP.__mod__(f,g)
sympy.polys.polyclasses.ANP.__mul__(f,g)
sympy.polys.polyclasses.ANP.__ne__(f,g)
sympy.polys.polyclasses.ANP.__neg__(f)
sympy.polys.polyclasses.ANP.__pos__(f)
sympy.polys.polyclasses.ANP.__pow__(f,n)
sympy.polys.polyclasses.ANP.__radd__(f,g)
sympy.polys.polyclasses.ANP.__repr__(f)
sympy.polys.polyclasses.ANP.__rmul__(f,g)
sympy.polys.polyclasses.ANP.__rsub__(f,g)
sympy.polys.polyclasses.ANP.__sub__(f,g)
sympy.polys.polyclasses.ANP.__truediv__(f,g)
sympy.polys.polyclasses.ANP.add(f,g)
sympy.polys.polyclasses.ANP.div(f,g)
sympy.polys.polyclasses.ANP.from_list(cls,rep,mod,dom)
sympy.polys.polyclasses.ANP.is_ground(f)
sympy.polys.polyclasses.ANP.is_one(f)
sympy.polys.polyclasses.ANP.is_zero(f)
sympy.polys.polyclasses.ANP.mul(f,g)
sympy.polys.polyclasses.ANP.neg(f)
sympy.polys.polyclasses.ANP.one(cls,mod,dom)
sympy.polys.polyclasses.ANP.per(f,rep,mod=None,dom=None)
sympy.polys.polyclasses.ANP.pow(f,n)
sympy.polys.polyclasses.ANP.quo(f,g)
sympy.polys.polyclasses.ANP.rem(f,g)
sympy.polys.polyclasses.ANP.sub(f,g)
sympy.polys.polyclasses.ANP.to_dict(f)
sympy.polys.polyclasses.ANP.to_list(f)
sympy.polys.polyclasses.ANP.to_sympy_dict(f)
sympy.polys.polyclasses.ANP.to_sympy_list(f)
sympy.polys.polyclasses.ANP.to_tuple(f)
sympy.polys.polyclasses.ANP.unify(f,g)
sympy.polys.polyclasses.ANP.zero(cls,mod,dom)
sympy.polys.polyclasses.DMF(self,rep,dom,lev=None,ring=None)
sympy.polys.polyclasses.DMF.__add__(f,g)
sympy.polys.polyclasses.DMF.__bool__(f)
sympy.polys.polyclasses.DMF.__eq__(f,g)
sympy.polys.polyclasses.DMF.__ge__(f,g)
sympy.polys.polyclasses.DMF.__gt__(f,g)
sympy.polys.polyclasses.DMF.__hash__(f)
sympy.polys.polyclasses.DMF.__le__(f,g)
sympy.polys.polyclasses.DMF.__lt__(f,g)
sympy.polys.polyclasses.DMF.__mul__(f,g)
sympy.polys.polyclasses.DMF.__ne__(f,g)
sympy.polys.polyclasses.DMF.__neg__(f)
sympy.polys.polyclasses.DMF.__pow__(f,n)
sympy.polys.polyclasses.DMF.__radd__(f,g)
sympy.polys.polyclasses.DMF.__repr__(f)
sympy.polys.polyclasses.DMF.__rmul__(f,g)
sympy.polys.polyclasses.DMF.__rsub__(f,g)
sympy.polys.polyclasses.DMF.__rtruediv__(self,g)
sympy.polys.polyclasses.DMF.__sub__(f,g)
sympy.polys.polyclasses.DMF.__truediv__(f,g)
sympy.polys.polyclasses.DMF._parse(cls,rep,dom,lev=None)
sympy.polys.polyclasses.DMF.add(f,g)
sympy.polys.polyclasses.DMF.cancel(f)
sympy.polys.polyclasses.DMF.denom(f)
sympy.polys.polyclasses.DMF.frac_unify(f,g)
sympy.polys.polyclasses.DMF.half_per(f,rep,kill=False)
sympy.polys.polyclasses.DMF.invert(f,check=True)
sympy.polys.polyclasses.DMF.is_one(f)
sympy.polys.polyclasses.DMF.is_zero(f)
sympy.polys.polyclasses.DMF.mul(f,g)
sympy.polys.polyclasses.DMF.neg(f)
sympy.polys.polyclasses.DMF.new(cls,rep,dom,lev=None,ring=None)
sympy.polys.polyclasses.DMF.numer(f)
sympy.polys.polyclasses.DMF.one(cls,lev,dom,ring=None)
sympy.polys.polyclasses.DMF.per(f,num,den,cancel=True,kill=False,ring=None)
sympy.polys.polyclasses.DMF.poly_unify(f,g)
sympy.polys.polyclasses.DMF.pow(f,n)
sympy.polys.polyclasses.DMF.quo(f,g)
sympy.polys.polyclasses.DMF.sub(f,g)
sympy.polys.polyclasses.DMF.zero(cls,lev,dom,ring=None)
sympy.polys.polyclasses.DMP(self,rep,dom,lev=None,ring=None)
sympy.polys.polyclasses.DMP.LC(f)
sympy.polys.polyclasses.DMP.TC(f)
sympy.polys.polyclasses.DMP.__abs__(f)
sympy.polys.polyclasses.DMP.__add__(f,g)
sympy.polys.polyclasses.DMP.__bool__(f)
sympy.polys.polyclasses.DMP.__divmod__(f,g)
sympy.polys.polyclasses.DMP.__eq__(f,g)
sympy.polys.polyclasses.DMP.__floordiv__(f,g)
sympy.polys.polyclasses.DMP.__ge__(f,g)
sympy.polys.polyclasses.DMP.__gt__(f,g)
sympy.polys.polyclasses.DMP.__hash__(f)
sympy.polys.polyclasses.DMP.__le__(f,g)
sympy.polys.polyclasses.DMP.__lt__(f,g)
sympy.polys.polyclasses.DMP.__mod__(f,g)
sympy.polys.polyclasses.DMP.__mul__(f,g)
sympy.polys.polyclasses.DMP.__ne__(f,g)
sympy.polys.polyclasses.DMP.__neg__(f)
sympy.polys.polyclasses.DMP.__pow__(f,n)
sympy.polys.polyclasses.DMP.__radd__(f,g)
sympy.polys.polyclasses.DMP.__repr__(f)
sympy.polys.polyclasses.DMP.__rmul__(f,g)
sympy.polys.polyclasses.DMP.__rsub__(f,g)
sympy.polys.polyclasses.DMP.__rtruediv__(f,g)
sympy.polys.polyclasses.DMP.__sub__(f,g)
sympy.polys.polyclasses.DMP.__truediv__(f,g)
sympy.polys.polyclasses.DMP._strict_eq(f,g)
sympy.polys.polyclasses.DMP.abs(f)
sympy.polys.polyclasses.DMP.add(f,g)
sympy.polys.polyclasses.DMP.add_ground(f,c)
sympy.polys.polyclasses.DMP.all_coeffs(f)
sympy.polys.polyclasses.DMP.all_monoms(f)
sympy.polys.polyclasses.DMP.all_terms(f)
sympy.polys.polyclasses.DMP.cancel(f,g,include=True)
sympy.polys.polyclasses.DMP.cauchy_lower_bound(f)
sympy.polys.polyclasses.DMP.cauchy_upper_bound(f)
sympy.polys.polyclasses.DMP.clear_denoms(f)
sympy.polys.polyclasses.DMP.coeffs(f,order=None)
sympy.polys.polyclasses.DMP.cofactors(f,g)
sympy.polys.polyclasses.DMP.compose(f,g)
sympy.polys.polyclasses.DMP.content(f)
sympy.polys.polyclasses.DMP.convert(f,dom)
sympy.polys.polyclasses.DMP.count_complex_roots(f,inf=None,sup=None)
sympy.polys.polyclasses.DMP.count_real_roots(f,inf=None,sup=None)
sympy.polys.polyclasses.DMP.decompose(f)
sympy.polys.polyclasses.DMP.deflate(f)
sympy.polys.polyclasses.DMP.degree(f,j=0)
sympy.polys.polyclasses.DMP.degree_list(f)
sympy.polys.polyclasses.DMP.diff(f,m=1,j=0)
sympy.polys.polyclasses.DMP.discriminant(f)
sympy.polys.polyclasses.DMP.div(f,g)
sympy.polys.polyclasses.DMP.eject(f,dom,front=False)
sympy.polys.polyclasses.DMP.eq(f,g,strict=False)
sympy.polys.polyclasses.DMP.eval(f,a,j=0)
sympy.polys.polyclasses.DMP.exclude(f)
sympy.polys.polyclasses.DMP.exquo(f,g)
sympy.polys.polyclasses.DMP.exquo_ground(f,c)
sympy.polys.polyclasses.DMP.factor_list(f)
sympy.polys.polyclasses.DMP.factor_list_include(f)
sympy.polys.polyclasses.DMP.from_dict(cls,rep,lev,dom)
sympy.polys.polyclasses.DMP.from_list(cls,rep,lev,dom)
sympy.polys.polyclasses.DMP.from_monoms_coeffs(cls,monoms,coeffs,lev,dom,ring=None)
sympy.polys.polyclasses.DMP.from_sympy_list(cls,rep,lev,dom)
sympy.polys.polyclasses.DMP.gcd(f,g)
sympy.polys.polyclasses.DMP.gcdex(f,g)
sympy.polys.polyclasses.DMP.gff_list(f)
sympy.polys.polyclasses.DMP.half_gcdex(f,g)
sympy.polys.polyclasses.DMP.homogeneous_order(f)
sympy.polys.polyclasses.DMP.homogenize(f,s)
sympy.polys.polyclasses.DMP.inject(f,front=False)
sympy.polys.polyclasses.DMP.integrate(f,m=1,j=0)
sympy.polys.polyclasses.DMP.intervals(f,all=False,eps=None,inf=None,sup=None,fast=False,sqf=False)
sympy.polys.polyclasses.DMP.invert(f,g)
sympy.polys.polyclasses.DMP.is_cyclotomic(f)
sympy.polys.polyclasses.DMP.is_ground(f)
sympy.polys.polyclasses.DMP.is_homogeneous(f)
sympy.polys.polyclasses.DMP.is_irreducible(f)
sympy.polys.polyclasses.DMP.is_linear(f)
sympy.polys.polyclasses.DMP.is_monic(f)
sympy.polys.polyclasses.DMP.is_monomial(f)
sympy.polys.polyclasses.DMP.is_one(f)
sympy.polys.polyclasses.DMP.is_primitive(f)
sympy.polys.polyclasses.DMP.is_quadratic(f)
sympy.polys.polyclasses.DMP.is_sqf(f)
sympy.polys.polyclasses.DMP.is_zero(f)
sympy.polys.polyclasses.DMP.l1_norm(f)
sympy.polys.polyclasses.DMP.l2_norm_squared(f)
sympy.polys.polyclasses.DMP.lcm(f,g)
sympy.polys.polyclasses.DMP.lift(f)
sympy.polys.polyclasses.DMP.max_norm(f)
sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared(f)
sympy.polys.polyclasses.DMP.monic(f)
sympy.polys.polyclasses.DMP.monoms(f,order=None)
sympy.polys.polyclasses.DMP.mul(f,g)
sympy.polys.polyclasses.DMP.mul_ground(f,c)
sympy.polys.polyclasses.DMP.ne(f,g,strict=False)
sympy.polys.polyclasses.DMP.neg(f)
sympy.polys.polyclasses.DMP.norm(f)
sympy.polys.polyclasses.DMP.nth(f,*N)
sympy.polys.polyclasses.DMP.one(cls,lev,dom,ring=None)
sympy.polys.polyclasses.DMP.pdiv(f,g)
sympy.polys.polyclasses.DMP.per(f,rep,dom=None,kill=False,ring=None)
sympy.polys.polyclasses.DMP.permute(f,P)
sympy.polys.polyclasses.DMP.pexquo(f,g)
sympy.polys.polyclasses.DMP.pow(f,n)
sympy.polys.polyclasses.DMP.pquo(f,g)
sympy.polys.polyclasses.DMP.prem(f,g)
sympy.polys.polyclasses.DMP.primitive(f)
sympy.polys.polyclasses.DMP.quo(f,g)
sympy.polys.polyclasses.DMP.quo_ground(f,c)
sympy.polys.polyclasses.DMP.refine_root(f,s,t,eps=None,steps=None,fast=False)
sympy.polys.polyclasses.DMP.rem(f,g)
sympy.polys.polyclasses.DMP.resultant(f,g,includePRS=False)
sympy.polys.polyclasses.DMP.revert(f,n)
sympy.polys.polyclasses.DMP.shift(f,a)
sympy.polys.polyclasses.DMP.slice(f,m,n,j=0)
sympy.polys.polyclasses.DMP.sqf_list(f,all=False)
sympy.polys.polyclasses.DMP.sqf_list_include(f,all=False)
sympy.polys.polyclasses.DMP.sqf_norm(f)
sympy.polys.polyclasses.DMP.sqf_part(f)
sympy.polys.polyclasses.DMP.sqr(f)
sympy.polys.polyclasses.DMP.sturm(f)
sympy.polys.polyclasses.DMP.sub(f,g)
sympy.polys.polyclasses.DMP.sub_ground(f,c)
sympy.polys.polyclasses.DMP.subresultants(f,g)
sympy.polys.polyclasses.DMP.terms(f,order=None)
sympy.polys.polyclasses.DMP.terms_gcd(f)
sympy.polys.polyclasses.DMP.to_dict(f,zero=False)
sympy.polys.polyclasses.DMP.to_exact(f)
sympy.polys.polyclasses.DMP.to_field(f)
sympy.polys.polyclasses.DMP.to_list(f)
sympy.polys.polyclasses.DMP.to_ring(f)
sympy.polys.polyclasses.DMP.to_sympy_dict(f,zero=False)
sympy.polys.polyclasses.DMP.to_sympy_list(f)
sympy.polys.polyclasses.DMP.to_tuple(f)
sympy.polys.polyclasses.DMP.total_degree(f)
sympy.polys.polyclasses.DMP.transform(f,p,q)
sympy.polys.polyclasses.DMP.trunc(f,p)
sympy.polys.polyclasses.DMP.unify(f,g)
sympy.polys.polyclasses.DMP.zero(cls,lev,dom,ring=None)
sympy.polys.polyclasses.GenericPoly(PicklableWithSlots)
sympy.polys.polyclasses.GenericPoly._perify_factors(per,result,include)
sympy.polys.polyclasses.GenericPoly.ground_to_exact(f)
sympy.polys.polyclasses.GenericPoly.ground_to_field(f)
sympy.polys.polyclasses.GenericPoly.ground_to_ring(f)
sympy.polys.polyclasses.init_normal_ANP(rep,mod,dom)
sympy.polys.polyclasses.init_normal_DMF(num,den,lev,dom)
sympy.polys.polyclasses.init_normal_DMP(rep,lev,dom)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polymatrix.py----------------------------------------
A:sympy.polys.polymatrix.(p, _)->p.unify(p2)
A:sympy.polys.polymatrix.(items, info)->parallel_poly_from_expr(items, gens, field=True)
A:sympy.polys.polymatrix.p_ring->Poly(0, ring.symbols, domain=ring.domain)
A:sympy.polys.polymatrix.dm->sympy.polys.matrices.DomainMatrix.vstack(self._dm, other._dm)
A:sympy.polys.polymatrix.obj->super().__new__(cls)
A:sympy.polys.polymatrix.(i, j)->divmod(key, self.cols)
A:sympy.polys.polymatrix.other->self.domain.from_sympy(other)
A:sympy.polys.polymatrix.other_ds->sympy.polys.matrices.domainscalar.DomainScalar.from_sympy(other)
A:sympy.polys.polymatrix.inverse->DomainScalar(inverse, self.ring)
A:sympy.polys.polymatrix.M->self.to_Matrix().applyfunc(func)
A:sympy.polys.polymatrix.dm_ground->sympy.polys.matrices.DomainMatrix.vstack(self._dm, other._dm).convert_to(dm.domain.domain)
A:sympy.polys.polymatrix.(dm_rref, pivots)->sympy.polys.matrices.DomainMatrix.vstack(self._dm, other._dm).convert_to(dm.domain.domain).rref()
A:sympy.polys.polymatrix.dm_rref->dm_rref.convert_to(dm.domain).convert_to(dm.domain)
A:sympy.polys.polymatrix.dm_null_rows->sympy.polys.matrices.DomainMatrix.vstack(self._dm, other._dm).convert_to(K).nullspace().convert_to(Kx)
A:sympy.polys.polymatrix.dm_null->sympy.polys.matrices.DomainMatrix.vstack(self._dm, other._dm).convert_to(K).nullspace().convert_to(Kx).transpose()
sympy.polys.polymatrix.MutablePolyDenseMatrix(cls,*args,ring=None)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__add__(self,other)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__eq__(self,other)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__getitem__(self,key)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__len__(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__mul__(self,other)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__neg__(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__repr__(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__rmul__(self,other)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__sub__(self,other)
sympy.polys.polymatrix.MutablePolyDenseMatrix.__truediv__(self,other)
sympy.polys.polymatrix.MutablePolyDenseMatrix.applyfunc(self,func)
sympy.polys.polymatrix.MutablePolyDenseMatrix.col_join(self,other)
sympy.polys.polymatrix.MutablePolyDenseMatrix.cols(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.eye(cls,n,gens)
sympy.polys.polymatrix.MutablePolyDenseMatrix.from_Matrix(cls,other,*gens,ring=None)
sympy.polys.polymatrix.MutablePolyDenseMatrix.from_dm(cls,dm)
sympy.polys.polymatrix.MutablePolyDenseMatrix.from_list(cls,rows,cols,items,gens,ring)
sympy.polys.polymatrix.MutablePolyDenseMatrix.nullspace(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.rank(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.row_join(self,other)
sympy.polys.polymatrix.MutablePolyDenseMatrix.rows(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.rref(self,simplify='ignore',normalize_last='ignore')
sympy.polys.polymatrix.MutablePolyDenseMatrix.set_gens(self,gens)
sympy.polys.polymatrix.MutablePolyDenseMatrix.shape(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.to_Matrix(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.transpose(self)
sympy.polys.polymatrix.MutablePolyDenseMatrix.zeros(cls,m,n,gens)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polyfuncs.py----------------------------------------
A:sympy.polys.polyfuncs.(R, F)->sring(F, *gens, **args)
A:sympy.polys.polyfuncs.opt->build_options(gens, args)
A:sympy.polys.polyfuncs.(p, r, m)->f.symmetrize()
A:sympy.polys.polyfuncs.(F, opt)->poly_from_expr(f, *gens, **args)
A:sympy.polys.polyfuncs.n->f.degree()
A:sympy.polys.polyfuncs.(X, Y)->list(zip(*data))
A:sympy.polys.polyfuncs.Y->list(data)
A:sympy.polys.polyfuncs.X->list(range(1, n + 1))
A:sympy.polys.polyfuncs.d->Dummy()
A:sympy.polys.polyfuncs.(xdata, ydata)->list(zip(*data))
A:sympy.polys.polyfuncs.c->ones(degnum + k + 1, degnum + k + 2)
A:sympy.polys.polyfuncs.(f, opt)->poly_from_expr(f, *gens, **args)
A:sympy.polys.polyfuncs.roots->take(roots, n)
A:sympy.polys.polyfuncs.poly->symmetric_poly(i + 1, roots)
sympy.horner(f,*gens,**args)
sympy.interpolate(data,x)
sympy.polys.polyfuncs.horner(f,*gens,**args)
sympy.polys.polyfuncs.interpolate(data,x)
sympy.polys.polyfuncs.rational_interpolate(data,degnum,X=symbols('x'))
sympy.polys.polyfuncs.symmetrize(F,*gens,**args)
sympy.polys.polyfuncs.viete(f,roots=None,*gens,**args)
sympy.rational_interpolate(data,degnum,X=symbols('x'))
sympy.symmetrize(F,*gens,**args)
sympy.viete(f,roots=None,*gens,**args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polyutils.py----------------------------------------
A:sympy.polys.polyutils._re_gen->re.compile('^(.*?)(\\d*)$', re.MULTILINE)
A:sympy.polys.polyutils.key->sorted(zip(key, roots))
A:sympy.polys.polyutils.(_, roots)->zip(*key)
A:sympy.polys.polyutils.opt->build_options(args)
A:sympy.polys.polyutils.gen->str(gen)
A:sympy.polys.polyutils.(name, index)->re.compile('^(.*?)(\\d*)$', re.MULTILINE).match(gen).groups()
A:sympy.polys.polyutils.index->int(index)
A:sympy.polys.polyutils.gens->list(gens)
A:sympy.polys.polyutils.f_gens->list(f_gens)
A:sympy.polys.polyutils.g_gens->list(g_gens)
A:sympy.polys.polyutils.i->list(g_gens).index(gen)
A:sympy.polys.polyutils.(base, exp)->decompose_power_rat(factor)
A:sympy.polys.polyutils.monom->tuple(monom)
A:sympy.polys.polyutils.poly[monom]->Mul(*coeff)
A:sympy.polys.polyutils.((poly,), gens)->_parallel_dict_from_expr_no_gens((expr,), opt)
A:sympy.polys.polyutils.(reps, opt)->_parallel_dict_from_expr(exprs, build_options(args))
A:sympy.polys.polyutils.(reps, gens)->_parallel_dict_from_expr_no_gens(exprs, opt)
A:sympy.polys.polyutils.(rep, opt)->_dict_from_expr(expr, build_options(args))
A:sympy.polys.polyutils.expr->expand_mul(expr)
A:sympy.polys.polyutils.(rep, gens)->_dict_from_expr_no_gens(expr, opt)
A:sympy.polys.polyutils.monoms->rep.keys()
A:sympy.polys.polyutils.coeffs->rep.values()
A:sympy.polys.polyutils.used_indices->set()
A:sympy.polys.polyutils.j->list(gens).index(gen)
A:sympy.polys.polyutils.getstate->getattr(c, '__getstate__', None)
A:sympy.polys.polyutils.objstate->getattr(object, '__getstate__', None)
A:sympy.polys.polyutils.d[name]->getattr(self, name)
A:sympy.polys.polyutils.n->len(bits)
sympy.polys.polyutils.IntegerPowerable
sympy.polys.polyutils.IntegerPowerable.__pow__(self,e,modulo=None)
sympy.polys.polyutils.IntegerPowerable._first_power(self)
sympy.polys.polyutils.IntegerPowerable._negative_power(self,e,modulo=None)
sympy.polys.polyutils.IntegerPowerable._zeroth_power(self)
sympy.polys.polyutils.PicklableWithSlots
sympy.polys.polyutils.PicklableWithSlots.__getstate__(self,cls=None)
sympy.polys.polyutils.PicklableWithSlots.__setstate__(self,d)
sympy.polys.polyutils._analyze_gens(gens)
sympy.polys.polyutils._dict_from_expr(expr,opt)
sympy.polys.polyutils._dict_from_expr_if_gens(expr,opt)
sympy.polys.polyutils._dict_from_expr_no_gens(expr,opt)
sympy.polys.polyutils._dict_reorder(rep,gens,new_gens)
sympy.polys.polyutils._not_a_coeff(expr)
sympy.polys.polyutils._nsort(roots,separated=False)
sympy.polys.polyutils._parallel_dict_from_expr(exprs,opt)
sympy.polys.polyutils._parallel_dict_from_expr_if_gens(exprs,opt)
sympy.polys.polyutils._parallel_dict_from_expr_no_gens(exprs,opt)
sympy.polys.polyutils._sort_factors(factors,**args)
sympy.polys.polyutils._sort_gens(gens,**args)
sympy.polys.polyutils._unify_gens(f_gens,g_gens)
sympy.polys.polyutils.dict_from_expr(expr,**args)
sympy.polys.polyutils.expr_from_dict(rep,*gens)
sympy.polys.polyutils.parallel_dict_from_expr(exprs,**args)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/partfrac.py----------------------------------------
A:sympy.polys.partfrac.f->sympify(f)
A:sympy.polys.partfrac.(P, Q)->cancel(H[j]).as_numer_denom()
A:sympy.polys.partfrac._options->set_defaults(options, extension=True).copy()
A:sympy.polys.partfrac.options->set_defaults(options, extension=True)
A:sympy.polys.partfrac.((P, Q), opt)->parallel_poly_from_expr((P, Q), x, **options)
A:sympy.polys.partfrac.(c, nc)->sympify(f).args_cnc(split_1=False)
A:sympy.polys.partfrac.nc->sympify(f).func(*nc)
A:sympy.polys.partfrac.c->apart(f.func._from_args(c), x=x, full=full, **_options)
A:sympy.polys.partfrac.pot->preorder_traversal(f)
A:sympy.polys.partfrac.fc->sympify(f).cancel()
A:sympy.polys.partfrac.(common, P, Q)->Poly(P, x).cancel(Q)
A:sympy.polys.partfrac.(poly, P)->Poly(P, x).div(Q, auto=True)
A:sympy.polys.partfrac.partial->apart_full_decomposition(P, Q)
A:sympy.polys.partfrac.X->numbered_symbols(cls=Dummy)
A:sympy.polys.partfrac.(_, factors)->Poly(Q, x).factor_list()
A:sympy.polys.partfrac.dom->Poly(Q, x).get_domain().inject(*symbols)
A:sympy.polys.partfrac.F->Poly(0, Q.gen, domain=dom)
A:sympy.polys.partfrac.h->h.as_expr().subs(solution).as_expr().subs(solution)
A:sympy.polys.partfrac.q->q.set_domain(dom).set_domain(dom)
A:sympy.polys.partfrac.solution->solve(system, symbols)
A:sympy.polys.partfrac.d->Dummy(name)
A:sympy.polys.partfrac.dummies->dummies('w')
A:sympy.polys.partfrac.rationalpart->apart_list_full_decomposition(P, Q, dummies)
A:sympy.polys.partfrac.u->Function('u')(x)
A:sympy.polys.partfrac.a->Dummy('a')
A:sympy.polys.partfrac.b->(P * B.quo(g)).rem(D)
A:sympy.polys.partfrac.P->Poly(P, x)
A:sympy.polys.partfrac.Q->Poly(Q, x)
A:sympy.polys.partfrac.G->Poly(P, x).gcd(d)
A:sympy.polys.partfrac.D->Dummy(name).quo(G)
A:sympy.polys.partfrac.(B, g)->Poly(Q, x).half_gcdex(D)
A:sympy.polys.partfrac.Dw->Dummy(name).quo(G).subs(x, next(dummygen))
A:sympy.polys.partfrac.numer->Lambda(a, b.as_expr().subs(x, a))
A:sympy.polys.partfrac.denom->Lambda(a, x - a)
A:sympy.polys.partfrac.pfd->polypart.as_expr()
A:sympy.polys.partfrac.de->de.subs(ad[0], an[0]).subs(ad[0], an[0])
A:sympy.polys.partfrac.func->Lambda(tuple(an), nu / de ** ex)
sympy.apart(f,x=None,full=False,**options)
sympy.apart_list(f,x=None,dummies=None,**options)
sympy.assemble_partfrac_list(partial_list)
sympy.polys.partfrac.apart(f,x=None,full=False,**options)
sympy.polys.partfrac.apart_full_decomposition(P,Q)
sympy.polys.partfrac.apart_list(f,x=None,dummies=None,**options)
sympy.polys.partfrac.apart_list_full_decomposition(P,Q,dummygen)
sympy.polys.partfrac.apart_undetermined_coeffs(P,Q)
sympy.polys.partfrac.assemble_partfrac_list(partial_list)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/polyconfig.py----------------------------------------
A:sympy.polys.polyconfig.key->key.upper().upper()
A:sympy.polys.polyconfig.value->getenv('SYMPY_' + key)
A:sympy.polys.polyconfig._current_config[key]->eval(value)
sympy.polys.polyconfig.configure()
sympy.polys.polyconfig.query(key)
sympy.polys.polyconfig.setup(key,value=None)
sympy.polys.polyconfig.using(**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/monomials.py----------------------------------------
A:sympy.polys.monomials.n->int(other)
A:sympy.polys.monomials.C->monomial_ldiv(A, B)
A:sympy.polys.monomials.M->list(monoms[0])
A:sympy.polys.monomials.M[i]->min(M[i], n)
A:sympy.polys.monomials.monom->monomial_div(a_lm, b_lm)
A:sympy.polys.monomials.template->dedent('        def %(name)s(A, B):\n            (%(A)s,) = A\n            (%(B)s,) = B\n            return (%(AB)s,)\n        ')
A:sympy.polys.monomials.A->self._vars('a')
A:sympy.polys.monomials.B->self._vars('b')
A:sympy.polys.monomials.R->self._vars('r')
A:sympy.polys.monomials.(rep, gens)->dict_from_expr(sympify(monom), gens=gens)
A:sympy.polys.monomials.self.exponents->tuple(map(int, monom))
A:sympy.polys.monomials.result->monomial_div(self.exponents, exponents)
A:sympy.polys.monomials.exponents->monomial_mul(exponents, self.exponents)
sympy.Monomial(self,monom,gens=None)
sympy.itermonomials(variables,max_degrees,min_degrees=None)
sympy.polys.monomials.Monomial(self,monom,gens=None)
sympy.polys.monomials.Monomial.__eq__(self,other)
sympy.polys.monomials.Monomial.__getitem__(self,item)
sympy.polys.monomials.Monomial.__hash__(self)
sympy.polys.monomials.Monomial.__iter__(self)
sympy.polys.monomials.Monomial.__len__(self)
sympy.polys.monomials.Monomial.__mul__(self,other)
sympy.polys.monomials.Monomial.__ne__(self,other)
sympy.polys.monomials.Monomial.__pow__(self,other)
sympy.polys.monomials.Monomial.__str__(self)
sympy.polys.monomials.Monomial.__truediv__(self,other)
sympy.polys.monomials.Monomial.as_expr(self,*gens)
sympy.polys.monomials.Monomial.gcd(self,other)
sympy.polys.monomials.Monomial.lcm(self,other)
sympy.polys.monomials.Monomial.rebuild(self,exponents,gens=None)
sympy.polys.monomials.MonomialOps(self,ngens)
sympy.polys.monomials.MonomialOps._build(self,code,name)
sympy.polys.monomials.MonomialOps._vars(self,name)
sympy.polys.monomials.MonomialOps.div(self)
sympy.polys.monomials.MonomialOps.gcd(self)
sympy.polys.monomials.MonomialOps.lcm(self)
sympy.polys.monomials.MonomialOps.ldiv(self)
sympy.polys.monomials.MonomialOps.mul(self)
sympy.polys.monomials.MonomialOps.mulpow(self)
sympy.polys.monomials.MonomialOps.pow(self)
sympy.polys.monomials.itermonomials(variables,max_degrees,min_degrees=None)
sympy.polys.monomials.monomial_count(V,N)
sympy.polys.monomials.monomial_deg(M)
sympy.polys.monomials.monomial_div(A,B)
sympy.polys.monomials.monomial_divides(A,B)
sympy.polys.monomials.monomial_gcd(A,B)
sympy.polys.monomials.monomial_lcm(A,B)
sympy.polys.monomials.monomial_ldiv(A,B)
sympy.polys.monomials.monomial_max(*monoms)
sympy.polys.monomials.monomial_min(*monoms)
sympy.polys.monomials.monomial_mul(A,B)
sympy.polys.monomials.monomial_pow(A,n)
sympy.polys.monomials.term_div(a,b,domain)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/sqfreetools.py----------------------------------------
A:sympy.polys.sqfreetools.(h, _)->dmp_inject(f, u, K, front=True)
A:sympy.polys.sqfreetools.r->dmp_resultant(g, h, u + 1, K.dom)
A:sympy.polys.sqfreetools.g->dup_mul(g, dup_shift(h, -K(k), K), K)
A:sympy.polys.sqfreetools.F->dmp_raise([K.one, -K.unit], u, 0, K)
A:sympy.polys.sqfreetools.f->dup_quo(f, g, K)
A:sympy.polys.sqfreetools.gcd->dmp_gcd(gcd, dmp_diff_in(f, 1, i, u, K), u, K)
A:sympy.polys.sqfreetools.sqf->dmp_quo(f, gcd, u, K)
A:sympy.polys.sqfreetools.(coeff, factors)->dmp_sqf_list(f, u, K, all=all)
A:sympy.polys.sqfreetools.coeff->dmp_ground_LC(f, u, K)
A:sympy.polys.sqfreetools.(coeff, f)->dmp_ground_primitive(f, u, K)
A:sympy.polys.sqfreetools.h->dmp_sub(q, d, u, K)
A:sympy.polys.sqfreetools.(g, p, q)->dmp_inner_gcd(p, h, u, K)
A:sympy.polys.sqfreetools.d->dmp_diff(p, 1, u, K)
A:sympy.polys.sqfreetools.H->dup_gff_list(g, K)
sympy.polys.sqfreetools.dmp_gf_sqf_list(f,u,K,all=False)
sympy.polys.sqfreetools.dmp_gf_sqf_part(f,u,K)
sympy.polys.sqfreetools.dmp_gff_list(f,u,K)
sympy.polys.sqfreetools.dmp_norm(f,u,K)
sympy.polys.sqfreetools.dmp_sqf_list(f,u,K,all=False)
sympy.polys.sqfreetools.dmp_sqf_list_include(f,u,K,all=False)
sympy.polys.sqfreetools.dmp_sqf_norm(f,u,K)
sympy.polys.sqfreetools.dmp_sqf_p(f,u,K)
sympy.polys.sqfreetools.dmp_sqf_part(f,u,K)
sympy.polys.sqfreetools.dup_gf_sqf_list(f,K,all=False)
sympy.polys.sqfreetools.dup_gf_sqf_part(f,K)
sympy.polys.sqfreetools.dup_gff_list(f,K)
sympy.polys.sqfreetools.dup_sqf_list(f,K,all=False)
sympy.polys.sqfreetools.dup_sqf_list_include(f,K,all=False)
sympy.polys.sqfreetools.dup_sqf_norm(f,K)
sympy.polys.sqfreetools.dup_sqf_p(f,K)
sympy.polys.sqfreetools.dup_sqf_part(f,K)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/rootoftools.py----------------------------------------
A:sympy.polys.rootoftools.k->PurePoly(k, expand=False)
A:sympy.polys.rootoftools._reals_cache->_pure_key_dict()
A:sympy.polys.rootoftools._complexes_cache->_pure_key_dict()
A:sympy.polys.rootoftools.(_, factors)->PurePoly(expr, x, greedy=False).factor_list()
A:sympy.polys.rootoftools.even->sympy.polys.polytools.Poly.from_dict(dict(even), Dummy('x'))
A:sympy.polys.rootoftools.x->symbols('x')
A:sympy.polys.rootoftools.index->int(index)
A:sympy.polys.rootoftools.poly->PurePoly(expr, x, greedy=False)
A:sympy.polys.rootoftools.degree->PurePoly(expr, x, greedy=False).degree()
A:sympy.polys.rootoftools.dom->PurePoly(expr, x, greedy=False).get_domain()
A:sympy.polys.rootoftools.roots->symbols('r:%d' % poly.degree())
A:sympy.polys.rootoftools.(coeff, poly)->cls._transform(expr, x)
A:sympy.polys.rootoftools.root->mpc(mpf('0'), root.real)
A:sympy.polys.rootoftools.obj->sympy.core.Expr.__new__(cls)
A:sympy.polys.rootoftools.obj.poly->PurePoly(poly)
A:sympy.polys.rootoftools.ivl->self._get_interval()
A:sympy.polys.rootoftools._reals_cache[currentfactor]real_part->dup_isolate_real_roots_sqf(currentfactor.rep.rep, currentfactor.rep.dom, blackbox=True)
A:sympy.polys.rootoftools._complexes_cache[currentfactor]complex_part->dup_isolate_complex_roots_sqf(currentfactor.rep.rep, currentfactor.rep.dom, blackbox=True)
A:sympy.polys.rootoftools.real_part->cls._get_reals_sqf(currentfactor, use_cache)
A:sympy.polys.rootoftools.reals->cls._get_reals(factors, use_cache=use_cache)
A:sympy.polys.rootoftools.complex_part->cls._get_complexes_sqf(currentfactor, use_cache)
A:sympy.polys.rootoftools.complexes->cls._get_complexes(factors, use_cache=use_cache)
A:sympy.polys.rootoftools.(u, v)->u.refine().refine_disjoint(v)
A:sympy.polys.rootoftools.sifted->sift(complexes, lambda c: c[1])
A:sympy.polys.rootoftools.nimag->_imag_count_of_factor(f)
A:sympy.polys.rootoftools.u->u.refine().refine()
A:sympy.polys.rootoftools.potential_imag->list(range(len(sifted[f])))
A:sympy.polys.rootoftools.factors->_pure_factors(poly)
A:sympy.polys.rootoftools.reals_count->len(_reals_cache[self.poly])
A:sympy.polys.rootoftools.complexes_count->cls._count_roots(complexes)
A:sympy.polys.rootoftools.d->Dummy('x')
A:sympy.polys.rootoftools.prec->dps_to_prec(n)
A:sympy.polys.rootoftools.func->Lambda(var, expr.diff(x))
A:sympy.polys.rootoftools.expr->expr.subs(var, coeff * var).subs(var, coeff * var)
A:sympy.polys.rootoftools.interval->interval.refine_size(dx, dy).refine_size(dx, dy)
A:sympy.polys.rootoftools.a->mpf(str(interval.ay))
A:sympy.polys.rootoftools.b->mpf(str(interval.by))
A:sympy.polys.rootoftools.x0->mpc(*map(str, interval.center))
A:sympy.polys.rootoftools.ax->mpf(str(interval.ax))
A:sympy.polys.rootoftools.bx->mpf(str(interval.bx))
A:sympy.polys.rootoftools.ay->mpf(str(interval.ay))
A:sympy.polys.rootoftools.by->mpf(str(interval.by))
A:sympy.polys.rootoftools.dx->abs(interval.center[0] * rtol)
A:sympy.polys.rootoftools.real->Rational(c)
A:sympy.polys.rootoftools.dy->abs(interval.center[1] * rtol)
A:sympy.polys.rootoftools.imag->Rational(c)
A:sympy.polys.rootoftools.(real, imag)->map(Rational, c)
A:sympy.polys.rootoftools.(re, im)->rhs.as_real_imag()
A:sympy.polys.rootoftools.i->lhs._get_interval()
A:sympy.polys.rootoftools.is_func->getattr(func, 'is_Function', False)
A:sympy.polys.rootoftools.deg->PurePoly(expr, x, greedy=False).degree()
A:sympy.polys.rootoftools.(add_const, expr)->expr.subs(var, coeff * var).subs(var, coeff * var).as_independent(var)
A:sympy.polys.rootoftools.(mul_const, expr)->expr.subs(var, coeff * var).subs(var, coeff * var).as_independent(var)
A:sympy.polys.rootoftools.rational->cls._is_func_rational(poly, func)
A:sympy.polys.rootoftools.term->cls._rational_case(poly, func)
A:sympy.polys.rootoftools.f->sum((expr.subs(var, r) for r in roots))
A:sympy.polys.rootoftools.(p, q)->together(f).as_numer_denom()
A:sympy.polys.rootoftools.p->Poly(dict(zip(p_monom, p_coeff)), *p.gens).as_expr()
A:sympy.polys.rootoftools.q->Poly(dict(zip(q_monom, q_coeff)), *q.gens).as_expr()
A:sympy.polys.rootoftools.(p_monom, p_coeff)->zip(*p.terms())
A:sympy.polys.rootoftools.(q_monom, q_coeff)->zip(*q.terms())
A:sympy.polys.rootoftools.(coeffs, mapping)->symmetrize(p_coeff + q_coeff, formal=True)
A:sympy.polys.rootoftools.coeffs[i]->coeff.subs(values)
A:sympy.polys.rootoftools.n->len(p_coeff)
A:sympy.polys.rootoftools._roots->self.poly.nroots(n=prec_to_dps(prec))
sympy.ComplexRootOf(cls,f,x,index=None,radicals=False,expand=True)
sympy.RootOf(cls,f,x,index=None,radicals=True,expand=True)
sympy.RootSum(cls,expr,func=None,x=None,auto=True,quadratic=False)
sympy.polys.rootoftools.ComplexRootOf(cls,f,x,index=None,radicals=False,expand=True)
sympy.polys.rootoftools.ComplexRootOf._all_roots(cls,poly,use_cache=True)
sympy.polys.rootoftools.ComplexRootOf._complexes_index(cls,complexes,index)
sympy.polys.rootoftools.ComplexRootOf._complexes_sorted(cls,complexes)
sympy.polys.rootoftools.ComplexRootOf._count_roots(cls,roots)
sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init(self)
sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init(self)
sympy.polys.rootoftools.ComplexRootOf._eval_conjugate(self)
sympy.polys.rootoftools.ComplexRootOf._eval_evalf(self,prec,**kwargs)
sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary(self)
sympy.polys.rootoftools.ComplexRootOf._eval_is_real(self)
sympy.polys.rootoftools.ComplexRootOf._eval_subs(self,old,new)
sympy.polys.rootoftools.ComplexRootOf._get_complexes(cls,factors,use_cache=True)
sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf(cls,currentfactor,use_cache=True)
sympy.polys.rootoftools.ComplexRootOf._get_interval(self)
sympy.polys.rootoftools.ComplexRootOf._get_reals(cls,factors,use_cache=True)
sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf(cls,currentfactor,use_cache=True)
sympy.polys.rootoftools.ComplexRootOf._get_roots(cls,method,poly,radicals)
sympy.polys.rootoftools.ComplexRootOf._hashable_content(self)
sympy.polys.rootoftools.ComplexRootOf._indexed_root(cls,poly,index,lazy=False)
sympy.polys.rootoftools.ComplexRootOf._new(cls,poly,index)
sympy.polys.rootoftools.ComplexRootOf._postprocess_root(cls,root,radicals)
sympy.polys.rootoftools.ComplexRootOf._preprocess_roots(cls,poly)
sympy.polys.rootoftools.ComplexRootOf._real_roots(cls,poly)
sympy.polys.rootoftools.ComplexRootOf._reals_index(cls,reals,index)
sympy.polys.rootoftools.ComplexRootOf._reals_sorted(cls,reals)
sympy.polys.rootoftools.ComplexRootOf._refine_complexes(cls,complexes)
sympy.polys.rootoftools.ComplexRootOf._refine_imaginary(cls,complexes)
sympy.polys.rootoftools.ComplexRootOf._reset(self)
sympy.polys.rootoftools.ComplexRootOf._roots_trivial(cls,poly,radicals)
sympy.polys.rootoftools.ComplexRootOf._set_interval(self,interval)
sympy.polys.rootoftools.ComplexRootOf.all_roots(cls,poly,radicals=True)
sympy.polys.rootoftools.ComplexRootOf.args(self)
sympy.polys.rootoftools.ComplexRootOf.clear_cache(cls)
sympy.polys.rootoftools.ComplexRootOf.eval_approx(self,n,return_mpmath=False)
sympy.polys.rootoftools.ComplexRootOf.eval_rational(self,dx=None,dy=None,n=15)
sympy.polys.rootoftools.ComplexRootOf.expr(self)
sympy.polys.rootoftools.ComplexRootOf.free_symbols(self)
sympy.polys.rootoftools.ComplexRootOf.real_roots(cls,poly,radicals=True)
sympy.polys.rootoftools.RootOf(cls,f,x,index=None,radicals=True,expand=True)
sympy.polys.rootoftools.RootSum(cls,expr,func=None,x=None,auto=True,quadratic=False)
sympy.polys.rootoftools.RootSum._eval_derivative(self,x)
sympy.polys.rootoftools.RootSum._eval_evalf(self,prec)
sympy.polys.rootoftools.RootSum._hashable_content(self)
sympy.polys.rootoftools.RootSum._is_func_rational(cls,poly,func)
sympy.polys.rootoftools.RootSum._new(cls,poly,func,auto=True)
sympy.polys.rootoftools.RootSum._rational_case(cls,poly,func)
sympy.polys.rootoftools.RootSum._transform(cls,expr,x)
sympy.polys.rootoftools.RootSum.args(self)
sympy.polys.rootoftools.RootSum.doit(self,**hints)
sympy.polys.rootoftools.RootSum.expr(self)
sympy.polys.rootoftools.RootSum.free_symbols(self)
sympy.polys.rootoftools.RootSum.is_commutative(self)
sympy.polys.rootoftools.RootSum.new(cls,poly,func,auto=True)
sympy.polys.rootoftools._eval_is_eq(lhs,rhs)
sympy.polys.rootoftools._eval_is_eq(lhs,rhs)
sympy.polys.rootoftools._imag_count_of_factor(f)
sympy.polys.rootoftools._pure_factors(poly)
sympy.polys.rootoftools._pure_key_dict(self)
sympy.polys.rootoftools._pure_key_dict.__contains__(self,k)
sympy.polys.rootoftools._pure_key_dict.__getitem__(self,k)
sympy.polys.rootoftools._pure_key_dict.__setitem__(self,k,v)
sympy.polys.rootoftools.rootof(f,x,index=None,radicals=True,expand=True)
sympy.rootof(f,x,index=None,radicals=True,expand=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/factortools.py----------------------------------------
A:sympy.polys.factortools.(q, r)->dup_div(dup_mul(s, e, K), h, K)
A:sympy.polys.factortools.d->max(dmp_degree_list(f, u)[1:])
A:sympy.polys.factortools.delta->_ceil(d / 2)
A:sympy.polys.factortools.delta2->_ceil(delta / 2)
A:sympy.polys.factortools.eucl_norm->K0.get_ring().sqrt(sum([cf ** 2 for cf in f]))
A:sympy.polys.factortools.t1->binomial(delta - 1, delta2)
A:sympy.polys.factortools.t2->binomial(delta - 1, delta2 - 1)
A:sympy.polys.factortools.lc->dmp_ground_LC(f, u, K)
A:sympy.polys.factortools.a->dmp_max_norm(f, u, K)
A:sympy.polys.factortools.b->dmp_zz_mignotte_bound(f, u, K)
A:sympy.polys.factortools.n->len(A)
A:sympy.polys.factortools.e->dmp_expand(F, u, K)
A:sympy.polys.factortools.q->abs(q)
A:sympy.polys.factortools.r->len(H)
A:sympy.polys.factortools.u->dup_add(dup_mul(t, b, K), dup_mul(c, G, K), K)
A:sympy.polys.factortools.G->dup_sqf_part(F, K)
A:sympy.polys.factortools.H->dmp_raise([K.one, s * K.unit], u, 0, K)
A:sympy.polys.factortools.(c, d)->dup_div(dup_mul(s, b, K), H, K)
A:sympy.polys.factortools.c->dmp_ground_trunc(h, p, w, K)
A:sympy.polys.factortools.S->dmp_zz_diophantine(G, C, A, d, p, v, K)
A:sympy.polys.factortools.T->dmp_zz_diophantine(G, C, I, d, p, w - 1, K)
A:sympy.polys.factortools.F->_dup_cyclotomic_decompose(n, K)
A:sympy.polys.factortools.g->dmp_mul_ground(factors[0][0], coeff, u, K)
A:sympy.polys.factortools.h->dmp_compose(h, H, u, K)
A:sympy.polys.factortools.(s, t, _)->gf_gcdex(g, h, p, K)
A:sympy.polys.factortools.s->dmp_eval_in(S[0], a, n - i, u - i, K)
A:sympy.polys.factortools.t->dup_mul_ground(t, coeff, K)
A:sympy.polys.factortools.A->dup_max_norm(f, K)
A:sympy.polys.factortools.B->int(abs(K.sqrt(K(n + 1)) * 2 ** n * A * b))
A:sympy.polys.factortools.C->dmp_quo_ground(C, K.factorial(k + 1), w - 1, K)
A:sympy.polys.factortools.gamma->int(_ceil(2 * _log(C, 2)))
A:sympy.polys.factortools.bound->int(2 * gamma * _log(gamma))
A:sympy.polys.factortools.px->K0.get_ring().convert(px)
A:sympy.polys.factortools.(p, fsqf)->min(a, key=lambda x: len(x[1]))
A:sympy.polys.factortools.l->int(_ceil(_log(2 * B + 1, p)))
A:sympy.polys.factortools.sorted_T->range(len(g))
A:sympy.polys.factortools.G_norm->dup_l1_norm(G, K)
A:sympy.polys.factortools.H_norm->dup_l1_norm(H, K)
A:sympy.polys.factortools.tc->dup_TC(f, K)
A:sympy.polys.factortools.e_fc->dup_content(f[1:], K)
A:sympy.polys.factortools.e_ff->factorint(int(e_fc))
A:sympy.polys.factortools.f->dmp_convert(f, u, K0, K0_inexact)
A:sympy.polys.factortools.(coeff, factors)->dmp_factor_list(f, u, K)
A:sympy.polys.factortools.(cont, g)->dmp_ground_primitive(f, u, K)
A:sympy.polys.factortools.factors->dmp_factor_list_include(r, u, K.dom)
A:sympy.polys.factortools.(c, h)->dup_primitive(g, K)
A:sympy.polys.factortools.D->dmp_zz_wang_non_divisors(E, c, ct, K)
A:sympy.polys.factortools.(s, t, G)->gf_gcdex(g, f, p, K)
A:sympy.polys.factortools.(q, s)->gf_div(s, f, p, K)
A:sympy.polys.factortools.(t, s)->dmp_zz_diophantine([g, f], T[-1], [], 0, p, 1, K)
A:sympy.polys.factortools.S[j]->dup_trunc(dup_add(s, t, K), p, K)
A:sympy.polys.factortools.m->dmp_nest([K.one, -a], w, K)
A:sympy.polys.factortools.M->dmp_mul(M, m, w, K)
A:sympy.polys.factortools.T[i]->dmp_mul(dmp_raise(t, 1, v, K), M, u, K)
A:sympy.polys.factortools.S[i]->dmp_add(s, t, u, K)
A:sympy.polys.factortools.dj->dmp_degree_in(s, w, w)
A:sympy.polys.factortools.H[i]->dmp_ground_trunc(h, p, w, K)
A:sympy.polys.factortools.randint->_randint(seed)
A:sympy.polys.factortools.(ct, T)->dmp_zz_factor(dmp_LC(f, K), u - 1, K)
A:sympy.polys.factortools.p->K(nextprime(b))
A:sympy.polys.factortools.(cs, s, E)->dmp_zz_wang_test_points(f, T, ct, A, u, K)
A:sympy.polys.factortools.(_, H)->dup_zz_factor_sqf(s, K)
A:sympy.polys.factortools.eez_num_configs->query('EEZ_NUMBER_OF_CONFIGS')
A:sympy.polys.factortools.eez_num_tries->query('EEZ_NUMBER_OF_TRIES')
A:sympy.polys.factortools.eez_mod_step->query('EEZ_MODULUS_STEP')
A:sympy.polys.factortools.rr->len(H)
A:sympy.polys.factortools._s_norm->dup_max_norm(s, K)
A:sympy.polys.factortools.(f, H, LC)->dmp_zz_wang_lead_coeffs(f, T, cs, E, H, A, u, K)
A:sympy.polys.factortools.(_, f)->dmp_ground_primitive(f, u, K)
A:sympy.polys.factortools.(G, g)->dmp_primitive(g, u, K)
A:sympy.polys.factortools.K1->K0.get_field()
A:sympy.polys.factortools.coeff->K0_inexact.convert(coeff, K0)
A:sympy.polys.factortools.(fac_denom, fac_num)->dmp_clear_denoms(fac, u, K1)
A:sympy.polys.factortools.fac_num_ZZ_I->dmp_convert(fac_num, u, K1, K0)
A:sympy.polys.factortools.(content, fac_prim)->dmp_ground_primitive(fac_num_ZZ_I, u, K1)
A:sympy.polys.factortools.(s, g, r)->dmp_sqf_norm(f, u, K)
A:sympy.polys.factortools.(h, _, g)->dmp_inner_gcd(h, g, u, K)
A:sympy.polys.factortools.(j, f)->dup_terms_gcd(f, K0)
A:sympy.polys.factortools.(cont, f)->dmp_ground_primitive(f, u, K0)
A:sympy.polys.factortools.K->K0.get_ring()
A:sympy.polys.factortools.(denom, f)->dmp_clear_denoms(f, u, K0, K)
A:sympy.polys.factortools.(f, u)->dmp_inject(f, 0, K)
A:sympy.polys.factortools.max_norm->dmp_max_norm(f, u, K0)
A:sympy.polys.factortools.(J, f)->dmp_terms_gcd(f, u, K0)
A:sympy.polys.factortools.(levels, f, v)->dmp_exclude(f, u, K)
A:sympy.polys.factortools.(f, v)->dmp_inject(f, u, K)
A:sympy.polys.factortools.(_, factors)->dmp_factor_list(f, u, K)
sympy.polys.factortools._dup_cyclotomic_decompose(n,K)
sympy.polys.factortools._test_pl(fc,q,pl)
sympy.polys.factortools.dmp_ext_factor(f,u,K)
sympy.polys.factortools.dmp_factor_list(f,u,K0)
sympy.polys.factortools.dmp_factor_list_include(f,u,K)
sympy.polys.factortools.dmp_gf_factor(f,u,K)
sympy.polys.factortools.dmp_irreducible_p(f,u,K)
sympy.polys.factortools.dmp_qq_i_factor(f,u,K0)
sympy.polys.factortools.dmp_trial_division(f,factors,u,K)
sympy.polys.factortools.dmp_zz_diophantine(F,c,A,d,p,u,K)
sympy.polys.factortools.dmp_zz_factor(f,u,K)
sympy.polys.factortools.dmp_zz_i_factor(f,u,K0)
sympy.polys.factortools.dmp_zz_mignotte_bound(f,u,K)
sympy.polys.factortools.dmp_zz_wang(f,u,K,mod=None,seed=None)
sympy.polys.factortools.dmp_zz_wang_hensel_lifting(f,H,LC,A,p,u,K)
sympy.polys.factortools.dmp_zz_wang_lead_coeffs(f,T,cs,E,H,A,u,K)
sympy.polys.factortools.dmp_zz_wang_non_divisors(E,cs,ct,K)
sympy.polys.factortools.dmp_zz_wang_test_points(f,T,ct,A,u,K)
sympy.polys.factortools.dup_cyclotomic_p(f,K,irreducible=False)
sympy.polys.factortools.dup_ext_factor(f,K)
sympy.polys.factortools.dup_factor_list(f,K0)
sympy.polys.factortools.dup_factor_list_include(f,K)
sympy.polys.factortools.dup_gf_factor(f,K)
sympy.polys.factortools.dup_irreducible_p(f,K)
sympy.polys.factortools.dup_qq_i_factor(f,K0)
sympy.polys.factortools.dup_trial_division(f,factors,K)
sympy.polys.factortools.dup_zz_cyclotomic_factor(f,K)
sympy.polys.factortools.dup_zz_cyclotomic_poly(n,K)
sympy.polys.factortools.dup_zz_diophantine(F,m,p,K)
sympy.polys.factortools.dup_zz_factor(f,K)
sympy.polys.factortools.dup_zz_factor_sqf(f,K)
sympy.polys.factortools.dup_zz_hensel_lift(p,f,f_list,l,K)
sympy.polys.factortools.dup_zz_hensel_step(m,f,g,h,s,t,K)
sympy.polys.factortools.dup_zz_i_factor(f,K0)
sympy.polys.factortools.dup_zz_irreducible_p(f,K)
sympy.polys.factortools.dup_zz_mignotte_bound(f,K)
sympy.polys.factortools.dup_zz_zassenhaus(f,K)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domainmatrix.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/solvers.py----------------------------------------
A:sympy.polys.solvers._sympify->staticmethod(lambda x: x)
A:sympy.polys.solvers.val_sympy->val.parent().to_sympy(val)
A:sympy.polys.solvers.K->val.parent()
A:sympy.polys.solvers.domain->domain.unify(K).unify(K)
A:sympy.polys.solvers.nrows->len(eqs_coeffs)
A:sympy.polys.solvers.row[sym2index[sym]]->domain.unify(K).unify(K).convert(coeff)
A:sympy.polys.solvers.(K, eqs_K)->sring(eqs, symbols, domain=EX)
A:sympy.polys.solvers.eq_rhs->eq_dict.pop(one_monom, zero)
A:sympy.polys.solvers.result->_solve_lin_sys(eqs_coeffs, eqs_rhs, ring)
A:sympy.polys.solvers.as_expr->getattr(x, 'as_expr', None)
A:sympy.polys.solvers.(c, s)->k.as_coeff_Mul()
A:sympy.polys.solvers.syms->list(eq_coeffs)
A:sympy.polys.solvers.components->connected_components(G)
A:sympy.polys.solvers.sym->next(iter(eq_coeff), None)
A:sympy.polys.solvers.subsol->_solve_lin_sys_component(subsystem[0], subsystem[1], ring)
A:sympy.polys.solvers.matrix->matrix.to_field().to_field()
A:sympy.polys.solvers.(echelon, pivots)->matrix.to_field().to_field().rref()
A:sympy.polys.solvers.sols->dict(zip(keys, sol))
A:sympy.polys.solvers.echelon->echelon.rep.to_ddm().rep.to_ddm()
sympy.polys.solvers.PolyNonlinearError(Exception)
sympy.polys.solvers.RawMatrix(self,*args,**kwargs)
sympy.polys.solvers._solve_lin_sys(eqs_coeffs,eqs_rhs,ring)
sympy.polys.solvers._solve_lin_sys_component(eqs_coeffs,eqs_rhs,ring)
sympy.polys.solvers.eqs_to_matrix(eqs_coeffs,eqs_rhs,gens,domain)
sympy.polys.solvers.solve_lin_sys(eqs,ring,_raw=True)
sympy.polys.solvers.sympy_eqs_to_ring(eqs,symbols)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/euclidtools.py----------------------------------------
A:sympy.polys.euclidtools.(q, r)->dup_div(f, g, K)
A:sympy.polys.euclidtools.a->dmp_ground_LC(f, u, K)
A:sympy.polys.euclidtools.f->dmp_convert(f, u, K, exact)
A:sympy.polys.euclidtools.(s, h)->dup_half_gcdex(f, g, K)
A:sympy.polys.euclidtools.F->dmp_content(f, u, K)
A:sympy.polys.euclidtools.t->dup_quo(F, g, K)
A:sympy.polys.euclidtools.h->dmp_quo(dmp_mul(f, g, u, K), dmp_gcd(f, g, u, K), u, K)
A:sympy.polys.euclidtools.(_, h)->dmp_primitive(h, u, K)
A:sympy.polys.euclidtools.n->dmp_degree(f, u)
A:sympy.polys.euclidtools.m->dmp_degree(g, u)
A:sympy.polys.euclidtools.lc->dmp_LC(g, K)
A:sympy.polys.euclidtools.k->dmp_degree(h, u)
A:sympy.polys.euclidtools.c->K.lcm(fc, gc)
A:sympy.polys.euclidtools.(R, S)->dmp_inner_subresultants(f, g, u, K)
A:sympy.polys.euclidtools.b->dmp_ground_LC(g, u, K)
A:sympy.polys.euclidtools.p->dmp_mul_ground(p, cp, u, K)
A:sympy.polys.euclidtools.q->dmp_mul_ground(q, cq, u, K)
A:sympy.polys.euclidtools.N->dmp_degree_in(f, 1, u)
A:sympy.polys.euclidtools.M->dmp_degree_in(g, 1, u)
A:sympy.polys.euclidtools.r->dmp_resultant(f, dmp_diff(f, 1, u, K), u, K)
A:sympy.polys.euclidtools.G->dmp_LC(g, K)
A:sympy.polys.euclidtools.R->dmp_zz_modular_resultant(F, G, p, u, K)
A:sympy.polys.euclidtools.e->dup_strip([e])
A:sympy.polys.euclidtools.d->dup_degree(f)
A:sympy.polys.euclidtools.D->dup_trunc(D, p, K)
A:sympy.polys.euclidtools.A->dmp_max_norm(f, u, K)
A:sympy.polys.euclidtools.B->K(2 * min(f_norm, g_norm) + 29)
A:sympy.polys.euclidtools.K1->K0.get_ring()
A:sympy.polys.euclidtools.(cf, f)->dmp_clear_denoms(f, u, K0, K1)
A:sympy.polys.euclidtools.(cg, g)->dmp_clear_denoms(g, u, K0, K1)
A:sympy.polys.euclidtools.g->dmp_convert(g, u, K, exact)
A:sympy.polys.euclidtools.zero_f->dmp_zero_p(f, u)
A:sympy.polys.euclidtools.zero_g->dmp_zero_p(g, u)
A:sympy.polys.euclidtools.df->dup_degree(f)
A:sympy.polys.euclidtools.dg->dup_degree(g)
A:sympy.polys.euclidtools.result->_dmp_ff_trivial_gcd(f, g, u, K0)
A:sympy.polys.euclidtools.(fc, F)->dmp_primitive(f, u, K)
A:sympy.polys.euclidtools.(gc, G)->dmp_primitive(g, u, K)
A:sympy.polys.euclidtools.cff->dmp_convert(cff, u, exact, K)
A:sympy.polys.euclidtools.cfg->dmp_convert(cfg, u, exact, K)
A:sympy.polys.euclidtools.(c, _, _)->dmp_ff_prs_gcd(fc, gc, u - 1, K)
A:sympy.polys.euclidtools.(gcd, f, g)->dmp_ground_extract(f, g, u, K)
A:sympy.polys.euclidtools.f_norm->dmp_max_norm(f, u, K)
A:sympy.polys.euclidtools.g_norm->dmp_max_norm(g, u, K)
A:sympy.polys.euclidtools.x->max(min(B, 99 * K.sqrt(B)), 2 * min(f_norm // abs(dmp_ground_LC(f, u, K)), g_norm // abs(dmp_ground_LC(g, u, K))) + 2)
A:sympy.polys.euclidtools.ff->dmp_eval(f, x, u, K)
A:sympy.polys.euclidtools.gg->dmp_eval(g, x, u, K)
A:sympy.polys.euclidtools.(cff_, r)->dmp_div(f, h, u, K)
A:sympy.polys.euclidtools.(cfg_, r)->dmp_div(g, h, u, K)
A:sympy.polys.euclidtools.(h, r)->dmp_div(g, cfg, u, K)
A:sympy.polys.euclidtools.(h, cff, cfg)->_dmp_inner_gcd(f, g, u, K)
A:sympy.polys.euclidtools.exact->K.get_exact()
A:sympy.polys.euclidtools.(J, (f, g))->dmp_multi_deflate((f, g), u, K)
A:sympy.polys.euclidtools.(fc, f)->dmp_ground_primitive(f, u, K)
A:sympy.polys.euclidtools.(gc, g)->dmp_ground_primitive(g, u, K)
A:sympy.polys.euclidtools.cont->dmp_gcd(cont, c, v, K)
A:sympy.polys.euclidtools.(cq, f)->dmp_clear_denoms(f, u, K0, K, convert=True)
A:sympy.polys.euclidtools.(cp, g)->dmp_clear_denoms(g, u, K0, K, convert=True)
A:sympy.polys.euclidtools.(_, p, q)->dmp_inner_gcd(f, g, u, K)
A:sympy.polys.euclidtools.(_, cp, cq)->K.cofactors(cp, cq)
A:sympy.polys.euclidtools.p_neg->K.is_negative(dmp_ground_LC(p, u, K))
A:sympy.polys.euclidtools.q_neg->K.is_negative(dmp_ground_LC(q, u, K))
sympy.polys.euclidtools._collins_crt(r,R,P,p,K)
sympy.polys.euclidtools._dmp_ff_trivial_gcd(f,g,u,K)
sympy.polys.euclidtools._dmp_inner_gcd(f,g,u,K)
sympy.polys.euclidtools._dmp_rr_trivial_gcd(f,g,u,K)
sympy.polys.euclidtools._dmp_simplify_gcd(f,g,u,K)
sympy.polys.euclidtools._dmp_zz_gcd_interpolate(h,x,v,K)
sympy.polys.euclidtools._dup_ff_trivial_gcd(f,g,K)
sympy.polys.euclidtools._dup_rr_trivial_gcd(f,g,K)
sympy.polys.euclidtools._dup_zz_gcd_interpolate(h,x,K)
sympy.polys.euclidtools.dmp_cancel(f,g,u,K,include=True)
sympy.polys.euclidtools.dmp_content(f,u,K)
sympy.polys.euclidtools.dmp_discriminant(f,u,K)
sympy.polys.euclidtools.dmp_euclidean_prs(f,g,u,K)
sympy.polys.euclidtools.dmp_ff_lcm(f,g,u,K)
sympy.polys.euclidtools.dmp_ff_prs_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_gcdex(f,g,u,K)
sympy.polys.euclidtools.dmp_half_gcdex(f,g,u,K)
sympy.polys.euclidtools.dmp_inner_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_inner_subresultants(f,g,u,K)
sympy.polys.euclidtools.dmp_invert(f,g,u,K)
sympy.polys.euclidtools.dmp_lcm(f,g,u,K)
sympy.polys.euclidtools.dmp_primitive(f,u,K)
sympy.polys.euclidtools.dmp_primitive_prs(f,g,u,K)
sympy.polys.euclidtools.dmp_prs_resultant(f,g,u,K)
sympy.polys.euclidtools.dmp_qq_collins_resultant(f,g,u,K0)
sympy.polys.euclidtools.dmp_qq_heu_gcd(f,g,u,K0)
sympy.polys.euclidtools.dmp_resultant(f,g,u,K,includePRS=False)
sympy.polys.euclidtools.dmp_rr_lcm(f,g,u,K)
sympy.polys.euclidtools.dmp_rr_prs_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_subresultants(f,g,u,K)
sympy.polys.euclidtools.dmp_zz_collins_resultant(f,g,u,K)
sympy.polys.euclidtools.dmp_zz_heu_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_zz_modular_resultant(f,g,p,u,K)
sympy.polys.euclidtools.dup_cancel(f,g,K,include=True)
sympy.polys.euclidtools.dup_discriminant(f,K)
sympy.polys.euclidtools.dup_euclidean_prs(f,g,K)
sympy.polys.euclidtools.dup_ff_lcm(f,g,K)
sympy.polys.euclidtools.dup_ff_prs_gcd(f,g,K)
sympy.polys.euclidtools.dup_gcd(f,g,K)
sympy.polys.euclidtools.dup_gcdex(f,g,K)
sympy.polys.euclidtools.dup_half_gcdex(f,g,K)
sympy.polys.euclidtools.dup_inner_gcd(f,g,K)
sympy.polys.euclidtools.dup_inner_subresultants(f,g,K)
sympy.polys.euclidtools.dup_invert(f,g,K)
sympy.polys.euclidtools.dup_lcm(f,g,K)
sympy.polys.euclidtools.dup_primitive_prs(f,g,K)
sympy.polys.euclidtools.dup_prs_resultant(f,g,K)
sympy.polys.euclidtools.dup_qq_heu_gcd(f,g,K0)
sympy.polys.euclidtools.dup_resultant(f,g,K,includePRS=False)
sympy.polys.euclidtools.dup_rr_lcm(f,g,K)
sympy.polys.euclidtools.dup_rr_prs_gcd(f,g,K)
sympy.polys.euclidtools.dup_subresultants(f,g,K)
sympy.polys.euclidtools.dup_zz_heu_gcd(f,g,K)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/fields.py----------------------------------------
A:sympy.polys.fields._field->FracField(opt.gens, opt.domain, opt.order)
A:sympy.polys.fields.exprs->list(map(sympify, exprs))
A:sympy.polys.fields.opt->build_options(symbols, options)
A:sympy.polys.fields.(reps, opt)->_parallel_dict_from_expr(numdens, opt)
A:sympy.polys.fields.coeffs->sum([list(rep.values()) for rep in reps], [])
A:sympy.polys.fields.(opt.domain, _)->construct_domain(coeffs, opt=opt)
A:sympy.polys.fields.ring->PolyRing(symbols, domain, order)
A:sympy.polys.fields.obj->object.__new__(cls)
A:sympy.polys.fields.obj._hash->hash(_hash_tuple)
A:sympy.polys.fields.obj.dtype->type('FracElement', (FracElement,), {'field': obj})
A:sympy.polys.fields.obj.zero->object.__new__(cls).dtype(ring.zero)
A:sympy.polys.fields.obj.one->object.__new__(cls).dtype(ring.one)
A:sympy.polys.fields.obj.gens->object.__new__(cls)._gens()
A:sympy.polys.fields.(numer, denom)->list(map(self.ring.ring_new, element))
A:sympy.polys.fields.ground_field->domain.get_field()
A:sympy.polys.fields.element->domain.get_field().convert(element)
A:sympy.polys.fields.numer->self.numer.set_ring(new_ring)
A:sympy.polys.fields.denom->self.denom.set_ring(new_ring)
A:sympy.polys.fields.(denom, numer)->domain.get_field().convert(element).clear_denoms()
A:sympy.polys.fields.powers->tuple(((gen, gen.as_base_exp()) for gen in mapping.keys() if gen.is_Pow or isinstance(gen, ExpBase)))
A:sympy.polys.fields.generator->dict(list(zip(self.symbols, self.gens))).get(expr)
A:sympy.polys.fields.(b, e)->expr.as_base_exp()
A:sympy.polys.fields.mapping->dict(list(zip(self.symbols, self.gens)))
A:sympy.polys.fields.frac->self._rebuild_expr(sympify(expr), mapping)
A:sympy.polys.fields.self._hash_hash->hash((self.field, self.numer, self.denom))
A:sympy.polys.fields.(op, g_numer, g_denom)->f._extract_ground(c)
A:sympy.polys.fields.x->x.to_poly().to_poly()
A:sympy.polys.fields.field->self.numer.set_ring(new_ring).ring.to_field()
sympy.field(symbols,domain,order=lex)
sympy.polys.fields.FracElement(self,numer,denom=None)
sympy.polys.fields.FracElement.__add__(f,g)
sympy.polys.fields.FracElement.__bool__(f)
sympy.polys.fields.FracElement.__eq__(f,g)
sympy.polys.fields.FracElement.__ge__(f1,f2)
sympy.polys.fields.FracElement.__getnewargs__(self)
sympy.polys.fields.FracElement.__gt__(f1,f2)
sympy.polys.fields.FracElement.__hash__(self)
sympy.polys.fields.FracElement.__le__(f1,f2)
sympy.polys.fields.FracElement.__lt__(f1,f2)
sympy.polys.fields.FracElement.__mul__(f,g)
sympy.polys.fields.FracElement.__ne__(f,g)
sympy.polys.fields.FracElement.__neg__(f)
sympy.polys.fields.FracElement.__pos__(f)
sympy.polys.fields.FracElement.__pow__(f,n)
sympy.polys.fields.FracElement.__radd__(f,c)
sympy.polys.fields.FracElement.__rmul__(f,c)
sympy.polys.fields.FracElement.__rsub__(f,c)
sympy.polys.fields.FracElement.__rtruediv__(f,c)
sympy.polys.fields.FracElement.__sub__(f,g)
sympy.polys.fields.FracElement.__truediv__(f,g)
sympy.polys.fields.FracElement._cmp(f1,f2,op)
sympy.polys.fields.FracElement._extract_ground(self,element)
sympy.polys.fields.FracElement.as_expr(self,*symbols)
sympy.polys.fields.FracElement.compose(f,x,a=None)
sympy.polys.fields.FracElement.copy(self)
sympy.polys.fields.FracElement.diff(f,x)
sympy.polys.fields.FracElement.evaluate(f,x,a=None)
sympy.polys.fields.FracElement.new(f,numer,denom)
sympy.polys.fields.FracElement.parent(self)
sympy.polys.fields.FracElement.raw_new(f,numer,denom)
sympy.polys.fields.FracElement.set_field(self,new_field)
sympy.polys.fields.FracElement.sort_key(self)
sympy.polys.fields.FracElement.subs(f,x,a=None)
sympy.polys.fields.FracElement.to_poly(f)
sympy.polys.fields.FracField(cls,symbols,domain,order=lex)
sympy.polys.fields.FracField.__eq__(self,other)
sympy.polys.fields.FracField.__getnewargs__(self)
sympy.polys.fields.FracField.__hash__(self)
sympy.polys.fields.FracField.__ne__(self,other)
sympy.polys.fields.FracField._gens(self)
sympy.polys.fields.FracField._rebuild_expr(self,expr,mapping)
sympy.polys.fields.FracField.domain_new(self,element)
sympy.polys.fields.FracField.field_new(self,element)
sympy.polys.fields.FracField.from_expr(self,expr)
sympy.polys.fields.FracField.ground_new(self,element)
sympy.polys.fields.FracField.index(self,gen)
sympy.polys.fields.FracField.new(self,numer,denom=None)
sympy.polys.fields.FracField.raw_new(self,numer,denom=None)
sympy.polys.fields.FracField.to_domain(self)
sympy.polys.fields.FracField.to_ring(self)
sympy.polys.fields.field(symbols,domain,order=lex)
sympy.polys.fields.sfield(exprs,*symbols,**options)
sympy.polys.fields.vfield(symbols,domain,order=lex)
sympy.polys.fields.xfield(symbols,domain,order=lex)
sympy.sfield(exprs,*symbols,**options)
sympy.vfield(symbols,domain,order=lex)
sympy.xfield(symbols,domain,order=lex)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/modulargcd.py----------------------------------------
A:sympy.polys.modulargcd.deg->_trunc(g, minpoly, p).degree(0)
A:sympy.polys.modulargcd.lcinv->domain.invert(lc, p)
A:sympy.polys.modulargcd.degrem->rem.trunc_ground(p).degree()
A:sympy.polys.modulargcd.rem->rem.trunc_ground(p).trunc_ground(p)
A:sympy.polys.modulargcd.gamma->fring.drop_to_ground(*range(1, fring.ngens)).domain.gcd(f.LC, g.LC)
A:sympy.polys.modulargcd.p->nextprime(p)
A:sympy.polys.modulargcd.fp->_trunc(f, minpoly, p).trunc_ground(p)
A:sympy.polys.modulargcd.gp->_trunc(g, minpoly, p).trunc_ground(p)
A:sympy.polys.modulargcd.hp->_func_field_modgcd_p(fp, gp, minpolyp, p)
A:sympy.polys.modulargcd.deghp->_func_field_modgcd_p(fp, gp, minpolyp, p).degree()
A:sympy.polys.modulargcd.n->len(coeff)
A:sympy.polys.modulargcd.result->_trivial_gcd(f, g)
A:sympy.polys.modulargcd.(cf, f)->_trunc(f, minpoly, p).primitive()
A:sympy.polys.modulargcd.(cg, g)->_trunc(g, minpoly, p).primitive()
A:sympy.polys.modulargcd.ch->_rational_function_reconstruction(c, p, m)
A:sympy.polys.modulargcd.bound->sqrt(m / 2)
A:sympy.polys.modulargcd.hm->_rational_reconstruction_int_coeffs(hm, m, QQring)
A:sympy.polys.modulargcd.h->h.quo_ground(h.LC).quo_ground(h.LC)
A:sympy.polys.modulargcd.(fquo, frem)->_trunc(f, minpoly, p).div(h)
A:sympy.polys.modulargcd.(gquo, grem)->_trunc(g, minpoly, p).div(h)
A:sympy.polys.modulargcd.cff->fquo.mul_ground(cf // ch)
A:sympy.polys.modulargcd.cfg->gquo.mul_ground(cg // ch)
A:sympy.polys.modulargcd.cont->gf_gcd(cont, gf_from_dict(coeff, p, dom), p, dom)
A:sympy.polys.modulargcd.yring->fring.drop_to_ground(*range(1, fring.ngens)).clone(symbols=ring.symbols[k - 1])
A:sympy.polys.modulargcd.contf->fring.drop_to_ground(*range(1, fring.ngens)).clone(symbols=ring.symbols[k - 1]).from_dense(cont).trunc_ground(p)
A:sympy.polys.modulargcd.degf->_deg(f)
A:sympy.polys.modulargcd.gamma1->fring.drop_to_ground(*range(1, fring.ngens)).domain.gcd(f.LC, g.LC)
A:sympy.polys.modulargcd.gamma2->fring.drop_to_ground(*range(1, fring.ngens)).domain.gcd(fswap.LC, gswap.LC)
A:sympy.polys.modulargcd.(contfp, fp)->_primitive(fp, p)
A:sympy.polys.modulargcd.(contgp, gp)->_primitive(gp, p)
A:sympy.polys.modulargcd.conthp->_gf_gcd(contfp, contgp, p)
A:sympy.polys.modulargcd.ycontbound->_gf_gcd(contfp, contgp, p).degree()
A:sympy.polys.modulargcd.delta->_gf_gcd(lcf, lcg, p)
A:sympy.polys.modulargcd.fpa->_trunc(f, minpoly, p).trunc_ground(p).evaluate(1, a).trunc_ground(p)
A:sympy.polys.modulargcd.gpa->_trunc(g, minpoly, p).trunc_ground(p).evaluate(1, a).trunc_ground(p)
A:sympy.polys.modulargcd.hpa->hpa.mul_ground(deltaa).trunc_ground(p).mul_ground(deltaa).trunc_ground(p)
A:sympy.polys.modulargcd.xbound->hpa.mul_ground(deltaa).trunc_ground(p).mul_ground(deltaa).trunc_ground(p).degree()
A:sympy.polys.modulargcd.hpmonoms->set(hp.monoms())
A:sympy.polys.modulargcd.hqmonoms->set(hq.monoms())
A:sympy.polys.modulargcd.monoms->set(hp.monoms()).intersection(hqmonoms)
A:sympy.polys.modulargcd.hpq[monom]->crt_(zero, hq[monom], p, q)
A:sympy.polys.modulargcd.denom->domain.invert(denom, p)
A:sympy.polys.modulargcd.coeff->numer.mul_ground(denom)
A:sympy.polys.modulargcd.(xbound, ycontbound)->_degree_bound_bivariate(f, g)
A:sympy.polys.modulargcd.fswap->_swap(f, 1)
A:sympy.polys.modulargcd.gswap->_swap(g, 1)
A:sympy.polys.modulargcd.degyf->_trunc(f, minpoly, p).degree(k - 1)
A:sympy.polys.modulargcd.degyg->_trunc(g, minpoly, p).degree(k - 1)
A:sympy.polys.modulargcd.(ybound, xcontbound)->_degree_bound_bivariate(fswap, gswap)
A:sympy.polys.modulargcd.degconthp->_gf_gcd(contfp, contgp, p).degree()
A:sympy.polys.modulargcd.degcontfp->contfp.degree()
A:sympy.polys.modulargcd.degcontgp->contgp.degree()
A:sympy.polys.modulargcd.degdelta->_gf_gcd(lcf, lcg, p).degree()
A:sympy.polys.modulargcd.deltaa->_gf_gcd(lcf, lcg, p).evaluate(0, a)
A:sympy.polys.modulargcd.deghpa->hpa.mul_ground(deltaa).trunc_ground(p).mul_ground(deltaa).trunc_ground(p).degree()
A:sympy.polys.modulargcd.degyhp->_func_field_modgcd_p(fp, gp, minpolyp, p).degree(1)
A:sympy.polys.modulargcd.degh->h.quo_ground(h.LC).quo_ground(h.LC).degree()
A:sympy.polys.modulargcd.(contf, f)->_primitive(f, p)
A:sympy.polys.modulargcd.(contg, g)->_primitive(g, p)
A:sympy.polys.modulargcd.conth->_gf_gcd(contf, contg, p)
A:sympy.polys.modulargcd.degcontf->fring.drop_to_ground(*range(1, fring.ngens)).clone(symbols=ring.symbols[k - 1]).from_dense(cont).trunc_ground(p).degree()
A:sympy.polys.modulargcd.degcontg->contg.degree()
A:sympy.polys.modulargcd.degconth->_gf_gcd(contf, contg, p).degree()
A:sympy.polys.modulargcd.lcf->_LC(f)
A:sympy.polys.modulargcd.lcg->_LC(g)
A:sympy.polys.modulargcd.points->list(range(p))
A:sympy.polys.modulargcd.fa->_evaluate_ground(f, k - 1, a)
A:sympy.polys.modulargcd.ga->_evaluate_ground(g, k - 1, a)
A:sympy.polys.modulargcd.ha->_func_field_modgcd_p(fa, ga, minpolya, p)
A:sympy.polys.modulargcd.degyh->h.quo_ground(h.LC).quo_ground(h.LC).degree(k - 1)
A:sympy.polys.modulargcd.contbound->list(degbound)
A:sympy.polys.modulargcd.(densequo, denserem)->gf_div(f.to_dense(), g.to_dense(), p, ring.domain)
A:sympy.polys.modulargcd.M->m.mul_monom(monom[1:]).degree()
A:sympy.polys.modulargcd.a->a.mul_ground(lcinv).trunc_ground(p).mul_ground(lcinv).trunc_ground(p)
A:sympy.polys.modulargcd.b->b.mul_ground(lcinv).trunc_ground(p).mul_ground(lcinv).trunc_ground(p)
A:sympy.polys.modulargcd.field->domain.get_field()
A:sympy.polys.modulargcd.coeffh->reconstruction(coeff, m, domain)
A:sympy.polys.modulargcd.(s, t, h)->gf_gcdex(f.to_dense(), g.to_dense(), p, ring.domain)
A:sympy.polys.modulargcd.minpoly->_minpoly_from_dense(domain.mod, ZZring_.drop(0))
A:sympy.polys.modulargcd.p_->fring.drop_to_ground(*range(1, fring.ngens)).ground_new(p)
A:sympy.polys.modulargcd.f->_trunc(f, minpoly, p)
A:sympy.polys.modulargcd.g->_trunc(g, minpoly, p)
A:sympy.polys.modulargcd.(lcinv, _, gcd)->_gf_gcdex(ring.dmp_LC(g), minpoly, p)
A:sympy.polys.modulargcd.quo->(lcinv * ring.dmp_LC(rem)).set_ring(ring)
A:sympy.polys.modulargcd.lcfinv->_gf_gcdex(ring.dmp_LC(f), minpoly, p)[0].set_ring(ring)
A:sympy.polys.modulargcd.zxring->fring.drop_to_ground(*range(1, fring.ngens)).clone(symbols=(ring.symbols[1], ring.symbols[0]))
A:sympy.polys.modulargcd.degm->_minpoly_from_dense(domain.mod, ZZring_.drop(0)).degree(1)
A:sympy.polys.modulargcd.lch->_LC(h).set_ring(ring)
A:sympy.polys.modulargcd.lcrem->_LC(rem.set_ring(zxring)).set_ring(ring)
A:sympy.polys.modulargcd.ring->fring.drop_to_ground(*range(1, fring.ngens))
A:sympy.polys.modulargcd.fa[monom]->numer.mul_ground(denom).evaluate(i, a)
A:sympy.polys.modulargcd.qdomain->qdomain.clone(domain=qdomain.domain.ring.to_field()).clone(domain=qdomain.domain.ring.to_field())
A:sympy.polys.modulargcd.qring->fring.drop_to_ground(*range(1, fring.ngens)).clone(domain=qdomain)
A:sympy.polys.modulargcd.gammaa->_evaluate_ground(gamma, k - 1, a)
A:sympy.polys.modulargcd.minpolya->_evaluate_ground(minpoly, k - 1, a)
A:sympy.polys.modulargcd.m->m.mul_monom(monom[1:]).mul_monom(monom[1:])
A:sympy.polys.modulargcd.den->domain.lcm(den, c.denominator)
A:sympy.polys.modulargcd.QQdomain->domain.ring.clone(domain=domain.domain.get_field())
A:sympy.polys.modulargcd.QQring->fring.drop_to_ground(*range(1, fring.ngens)).clone(domain=ring.domain.get_field())
A:sympy.polys.modulargcd.minpolyp->_minpoly_from_dense(domain.mod, ZZring_.drop(0)).trunc_ground(p)
A:sympy.polys.modulargcd.c->domain([domain.domain(coeff)] + [0] * monom[1])
A:sympy.polys.modulargcd.minpoly_[monom]->fring.drop_to_ground(*range(1, fring.ngens)).domain(coeff)
A:sympy.polys.modulargcd.f_->_to_ZZ_poly(f, ZZring_)
A:sympy.polys.modulargcd.z->Dummy('z')
A:sympy.polys.modulargcd.ZZring->fring.drop_to_ground(*range(1, fring.ngens)).clone(symbols=ring.symbols + (z,), domain=domain.domain.get_ring())
A:sympy.polys.modulargcd.g_->_to_ZZ_poly(g, ZZring_)
A:sympy.polys.modulargcd.(contx0f, f)->_primitive_in_x0(f)
A:sympy.polys.modulargcd.(contx0g, g)->_primitive_in_x0(g)
A:sympy.polys.modulargcd.ZZring_->fring.drop_to_ground(*range(1, fring.ngens)).clone(symbols=ring.symbols + (z,), domain=domain.domain.get_ring()).drop_to_ground(*range(1, n))
A:sympy.polys.modulargcd.(contx0h_, h)->_primitive_in_x0(h)
sympy.polys.modulargcd._LC(f)
sympy.polys.modulargcd._chinese_remainder_reconstruction_multivariate(hp,hq,p,q)
sympy.polys.modulargcd._chinese_remainder_reconstruction_univariate(hp,hq,p,q)
sympy.polys.modulargcd._deg(f)
sympy.polys.modulargcd._degree_bound_bivariate(f,g)
sympy.polys.modulargcd._degree_bound_univariate(f,g)
sympy.polys.modulargcd._euclidean_algorithm(f,g,minpoly,p)
sympy.polys.modulargcd._evaluate_ground(f,i,a)
sympy.polys.modulargcd._func_field_modgcd_m(f,g,minpoly)
sympy.polys.modulargcd._func_field_modgcd_p(f,g,minpoly,p)
sympy.polys.modulargcd._gf_div(f,g,p)
sympy.polys.modulargcd._gf_gcd(fp,gp,p)
sympy.polys.modulargcd._gf_gcdex(f,g,p)
sympy.polys.modulargcd._integer_rational_reconstruction(c,m,domain)
sympy.polys.modulargcd._interpolate_multivariate(evalpoints,hpeval,ring,i,p,ground=False)
sympy.polys.modulargcd._minpoly_from_dense(minpoly,ring)
sympy.polys.modulargcd._modgcd_multivariate_p(f,g,p,degbound,contbound)
sympy.polys.modulargcd._primitive(f,p)
sympy.polys.modulargcd._primitive_in_x0(f)
sympy.polys.modulargcd._rational_function_reconstruction(c,p,m)
sympy.polys.modulargcd._rational_reconstruction_func_coeffs(hm,p,m,ring,k)
sympy.polys.modulargcd._rational_reconstruction_int_coeffs(hm,m,ring)
sympy.polys.modulargcd._swap(f,i)
sympy.polys.modulargcd._to_ANP_poly(f,ring)
sympy.polys.modulargcd._to_ZZ_poly(f,ring)
sympy.polys.modulargcd._trial_division(f,h,minpoly,p=None)
sympy.polys.modulargcd._trivial_gcd(f,g)
sympy.polys.modulargcd._trunc(f,minpoly,p)
sympy.polys.modulargcd.func_field_modgcd(f,g)
sympy.polys.modulargcd.modgcd_bivariate(f,g)
sympy.polys.modulargcd.modgcd_multivariate(f,g)
sympy.polys.modulargcd.modgcd_univariate(f,g)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_polyoptions.py----------------------------------------
A:sympy.polys.tests.test_polyoptions.opt->Options((x, y, z), {'domain': 'ZZ'})
A:sympy.polys.tests.test_polyoptions.new_opt->Options((x, y, z), {'domain': 'ZZ'}).clone({'gens': (x, y), 'order': 'lex'})
A:sympy.polys.tests.test_polyoptions.a->Symbol('a', commutative=False)
sympy.polys.tests.test_polyoptions.test_All_postprocess()
sympy.polys.tests.test_polyoptions.test_All_preprocess()
sympy.polys.tests.test_polyoptions.test_Auto_postprocess()
sympy.polys.tests.test_polyoptions.test_Auto_preprocess()
sympy.polys.tests.test_polyoptions.test_Domain_postprocess()
sympy.polys.tests.test_polyoptions.test_Domain_preprocess()
sympy.polys.tests.test_polyoptions.test_Expand_postprocess()
sympy.polys.tests.test_polyoptions.test_Expand_preprocess()
sympy.polys.tests.test_polyoptions.test_Extension_postprocess()
sympy.polys.tests.test_polyoptions.test_Extension_preprocess()
sympy.polys.tests.test_polyoptions.test_Field_postprocess()
sympy.polys.tests.test_polyoptions.test_Field_preprocess()
sympy.polys.tests.test_polyoptions.test_Formal_postprocess()
sympy.polys.tests.test_polyoptions.test_Formal_preprocess()
sympy.polys.tests.test_polyoptions.test_Frac_postprocess()
sympy.polys.tests.test_polyoptions.test_Frac_preprocess()
sympy.polys.tests.test_polyoptions.test_Gaussian_postprocess()
sympy.polys.tests.test_polyoptions.test_Gaussian_preprocess()
sympy.polys.tests.test_polyoptions.test_Gen_postprocess()
sympy.polys.tests.test_polyoptions.test_Gens_postprocess()
sympy.polys.tests.test_polyoptions.test_Gens_preprocess()
sympy.polys.tests.test_polyoptions.test_Greedy_postprocess()
sympy.polys.tests.test_polyoptions.test_Greedy_preprocess()
sympy.polys.tests.test_polyoptions.test_Include_postprocess()
sympy.polys.tests.test_polyoptions.test_Include_preprocess()
sympy.polys.tests.test_polyoptions.test_Method_postprocess()
sympy.polys.tests.test_polyoptions.test_Method_preprocess()
sympy.polys.tests.test_polyoptions.test_Modulus_postprocess()
sympy.polys.tests.test_polyoptions.test_Modulus_preprocess()
sympy.polys.tests.test_polyoptions.test_Options_clone()
sympy.polys.tests.test_polyoptions.test_Order_postprocess()
sympy.polys.tests.test_polyoptions.test_Order_preprocess()
sympy.polys.tests.test_polyoptions.test_Polys_postprocess()
sympy.polys.tests.test_polyoptions.test_Polys_preprocess()
sympy.polys.tests.test_polyoptions.test_Sort_postprocess()
sympy.polys.tests.test_polyoptions.test_Sort_preprocess()
sympy.polys.tests.test_polyoptions.test_Split_postprocess()
sympy.polys.tests.test_polyoptions.test_Split_preprocess()
sympy.polys.tests.test_polyoptions.test_Strict_postprocess()
sympy.polys.tests.test_polyoptions.test_Strict_preprocess()
sympy.polys.tests.test_polyoptions.test_Symbols_postprocess()
sympy.polys.tests.test_polyoptions.test_Symbols_preprocess()
sympy.polys.tests.test_polyoptions.test_Symmetric_postprocess()
sympy.polys.tests.test_polyoptions.test_Symmetric_preprocess()
sympy.polys.tests.test_polyoptions.test_Wrt_postprocess()
sympy.polys.tests.test_polyoptions.test_Wrt_preprocess()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_sqfreetools.py----------------------------------------
A:sympy.polys.tests.test_sqfreetools.(f_0, f_1, f_2, f_3, f_4, f_5, f_6)->f_polys()
A:sympy.polys.tests.test_sqfreetools.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_sqfreetools.(R1, x)->ring('x', ZZ)
A:sympy.polys.tests.test_sqfreetools.(R2, y)->ring('y', FF(3))
A:sympy.polys.tests.test_sqfreetools.(R, x, y)->ring('x,y', FF(2))
A:sympy.polys.tests.test_sqfreetools.res->R.dmp_resultant(f, g)
A:sympy.polys.tests.test_sqfreetools.h->(4 * y ** 2 + 1).drop(x)
A:sympy.polys.tests.test_sqfreetools.(Rt, t)->ring('t', ZZ)
A:sympy.polys.tests.test_sqfreetools.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_sqfreetools.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
sympy.polys.tests.test_sqfreetools.test_dmp_sqf()
sympy.polys.tests.test_sqfreetools.test_dup_gff_list()
sympy.polys.tests.test_sqfreetools.test_dup_sqf()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_distributedmodules.py----------------------------------------
A:sympy.polys.tests.test_distributedmodules.f->sdm_from_vector([x * z, y ** 2 + y * z - z, y], lex, QQ, gens=[x, y, z])
A:sympy.polys.tests.test_distributedmodules.f1->sdm_from_vector([1, x], grlex, QQ, gens=gens)
A:sympy.polys.tests.test_distributedmodules.f2->sdm_from_vector([0, x - 2], grlex, QQ, gens=gens)
A:sympy.polys.tests.test_distributedmodules.G->sdm_groebner(S, sdm_nf_mora, igrlex, QQ)
A:sympy.polys.tests.test_distributedmodules.igrlex->InverseOrder(grlex)
A:sympy.polys.tests.test_distributedmodules.f3->sdm_from_vector([0, y], lex, QQ, gens=gens)
sympy.polys.tests.test_distributedmodules.test_chain_criterion()
sympy.polys.tests.test_distributedmodules.test_conversion()
sympy.polys.tests.test_distributedmodules.test_local()
sympy.polys.tests.test_distributedmodules.test_nontrivial()
sympy.polys.tests.test_distributedmodules.test_sdm_LC()
sympy.polys.tests.test_distributedmodules.test_sdm_LM()
sympy.polys.tests.test_distributedmodules.test_sdm_LT()
sympy.polys.tests.test_distributedmodules.test_sdm_add()
sympy.polys.tests.test_distributedmodules.test_sdm_deg()
sympy.polys.tests.test_distributedmodules.test_sdm_ecart()
sympy.polys.tests.test_distributedmodules.test_sdm_from_dict()
sympy.polys.tests.test_distributedmodules.test_sdm_monomial_deg()
sympy.polys.tests.test_distributedmodules.test_sdm_monomial_divides()
sympy.polys.tests.test_distributedmodules.test_sdm_monomial_lcm()
sympy.polys.tests.test_distributedmodules.test_sdm_monomial_mul()
sympy.polys.tests.test_distributedmodules.test_sdm_mul_term()
sympy.polys.tests.test_distributedmodules.test_sdm_nf_mora()
sympy.polys.tests.test_distributedmodules.test_sdm_spoly()
sympy.polys.tests.test_distributedmodules.test_sdm_zero()
sympy.polys.tests.test_distributedmodules.test_uncovered_line()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_polyfuncs.py----------------------------------------
A:sympy.polys.tests.test_polyfuncs.U[u0, u1, u2]->symbols('u:3')
A:sympy.polys.tests.test_polyfuncs.(x, y)->symbols('x,y')
A:sympy.polys.tests.test_polyfuncs.xdata->list(range(1, 11))
A:sympy.polys.tests.test_polyfuncs.(r1, r2)->symbols('r1, r2')
sympy.polys.tests.test_polyfuncs.test_horner()
sympy.polys.tests.test_polyfuncs.test_interpolate()
sympy.polys.tests.test_polyfuncs.test_rational_interpolate()
sympy.polys.tests.test_polyfuncs.test_symmetrize()
sympy.polys.tests.test_polyfuncs.test_viete()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_densetools.py----------------------------------------
A:sympy.polys.tests.test_densetools.f->dmp_normal([[2930944], [], [2198208], [], [549552], [], [45796]], 1, ZZ)
A:sympy.polys.tests.test_densetools.K->FF(23)
A:sympy.polys.tests.test_densetools.F_6->dmp_normal(f_6, 3, K)
A:sympy.polys.tests.test_densetools.g->dmp_normal([[17585664], [], [8792832], [], [1099104], []], 1, ZZ)
A:sympy.polys.tests.test_densetools.F->dmp_normal([[64], [], [48], [], [12], [], [1]], 1, ZZ)
A:sympy.polys.tests.test_densetools.G->dmp_normal([[384], [], [192], [], [24], []], 1, ZZ)
A:sympy.polys.tests.test_densetools.(R, t)->ring('t', ZZ)
sympy.polys.tests.test_densetools.test_dmp_clear_denoms()
sympy.polys.tests.test_densetools.test_dmp_compose()
sympy.polys.tests.test_densetools.test_dmp_diff()
sympy.polys.tests.test_densetools.test_dmp_diff_eval_in()
sympy.polys.tests.test_densetools.test_dmp_diff_in()
sympy.polys.tests.test_densetools.test_dmp_eval()
sympy.polys.tests.test_densetools.test_dmp_eval_in()
sympy.polys.tests.test_densetools.test_dmp_eval_tail()
sympy.polys.tests.test_densetools.test_dmp_ground_content()
sympy.polys.tests.test_densetools.test_dmp_ground_extract()
sympy.polys.tests.test_densetools.test_dmp_ground_monic()
sympy.polys.tests.test_densetools.test_dmp_ground_primitive()
sympy.polys.tests.test_densetools.test_dmp_ground_trunc()
sympy.polys.tests.test_densetools.test_dmp_integrate()
sympy.polys.tests.test_densetools.test_dmp_integrate_in()
sympy.polys.tests.test_densetools.test_dmp_lift()
sympy.polys.tests.test_densetools.test_dmp_revert()
sympy.polys.tests.test_densetools.test_dmp_trunc()
sympy.polys.tests.test_densetools.test_dup_clear_denoms()
sympy.polys.tests.test_densetools.test_dup_compose()
sympy.polys.tests.test_densetools.test_dup_content()
sympy.polys.tests.test_densetools.test_dup_decompose()
sympy.polys.tests.test_densetools.test_dup_diff()
sympy.polys.tests.test_densetools.test_dup_eval()
sympy.polys.tests.test_densetools.test_dup_extract()
sympy.polys.tests.test_densetools.test_dup_integrate()
sympy.polys.tests.test_densetools.test_dup_mirror()
sympy.polys.tests.test_densetools.test_dup_monic()
sympy.polys.tests.test_densetools.test_dup_primitive()
sympy.polys.tests.test_densetools.test_dup_real_imag()
sympy.polys.tests.test_densetools.test_dup_revert()
sympy.polys.tests.test_densetools.test_dup_scale()
sympy.polys.tests.test_densetools.test_dup_shift()
sympy.polys.tests.test_densetools.test_dup_sign_variations()
sympy.polys.tests.test_densetools.test_dup_transform()
sympy.polys.tests.test_densetools.test_dup_trunc()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_orthopolys.py----------------------------------------
A:sympy.polys.tests.test_orthopolys.(x, z)->symbols('x z')
sympy.polys.tests.test_orthopolys.test_chebyshevt_poly()
sympy.polys.tests.test_orthopolys.test_chebyshevu_poly()
sympy.polys.tests.test_orthopolys.test_gegenbauer_poly()
sympy.polys.tests.test_orthopolys.test_hermite_poly()
sympy.polys.tests.test_orthopolys.test_hermite_prob_poly()
sympy.polys.tests.test_orthopolys.test_jacobi_poly()
sympy.polys.tests.test_orthopolys.test_laguerre_poly()
sympy.polys.tests.test_orthopolys.test_legendre_poly()
sympy.polys.tests.test_orthopolys.test_spherical_bessel_fn()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_modulargcd.py----------------------------------------
A:sympy.polys.tests.test_modulargcd.(R, x)->ring('x', A)
A:sympy.polys.tests.test_modulargcd.(R, x, y)->ring('x, y', A)
A:sympy.polys.tests.test_modulargcd.hpq->_chinese_remainder_reconstruction_multivariate(hp, hq, p, q)
A:sympy.polys.tests.test_modulargcd.(T, z)->ring('z', R)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, u)->ring('x,y,z,u', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z)->ring('x, y, z', A)
A:sympy.polys.tests.test_modulargcd.(f, g, h)->R.fateman_poly_F_3()
A:sympy.polys.tests.test_modulargcd.(H, cff, cfg)->modgcd_multivariate(f, g)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, u, v)->ring('x,y,z,u,v', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, u, v, a, b)->ring('x,y,z,u,v,a,b', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, u, v, a, b, c, d)->ring('x,y,z,u,v,a,b,c,d', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.tests.test_modulargcd.A->AlgebraicField(QQ, sqrt(2) ** (-1) * sqrt(3))
A:sympy.polys.tests.test_modulargcd.(T, x_, z_)->ring('x_, z_', D)
A:sympy.polys.tests.test_modulargcd.(R, x, t, s)->ring('x, t, s', A)
A:sympy.polys.tests.test_modulargcd.(D, t_, s_)->ring('t_, s_', ZZ)
A:sympy.polys.tests.test_modulargcd.(D, t)->ring('t', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, z)->ring('x, z', D)
A:sympy.polys.tests.test_modulargcd.minpoly->(z ** 2 * t ** 2 + z ** 2 * t - 1).drop(0)
sympy.polys.tests.test_modulargcd.test_chinese_remainder()
sympy.polys.tests.test_modulargcd.test_modgcd_algebraic_field()
sympy.polys.tests.test_modulargcd.test_modgcd_bivariate_integers()
sympy.polys.tests.test_modulargcd.test_modgcd_func_field()
sympy.polys.tests.test_modulargcd.test_modgcd_multivariate_integers()
sympy.polys.tests.test_modulargcd.test_modgcd_univariate_integers()
sympy.polys.tests.test_modulargcd.test_to_ZZ_ANP_poly()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_pythonrational.py----------------------------------------
sympy.polys.tests.test_pythonrational.test_PythonRational__abs__()
sympy.polys.tests.test_pythonrational.test_PythonRational__add__()
sympy.polys.tests.test_pythonrational.test_PythonRational__eq__()
sympy.polys.tests.test_pythonrational.test_PythonRational__float__()
sympy.polys.tests.test_pythonrational.test_PythonRational__hash__()
sympy.polys.tests.test_pythonrational.test_PythonRational__init__()
sympy.polys.tests.test_pythonrational.test_PythonRational__int__()
sympy.polys.tests.test_pythonrational.test_PythonRational__lt_le_gt_ge__()
sympy.polys.tests.test_pythonrational.test_PythonRational__mul__()
sympy.polys.tests.test_pythonrational.test_PythonRational__neg__()
sympy.polys.tests.test_pythonrational.test_PythonRational__pos__()
sympy.polys.tests.test_pythonrational.test_PythonRational__pow__()
sympy.polys.tests.test_pythonrational.test_PythonRational__sub__()
sympy.polys.tests.test_pythonrational.test_PythonRational__truediv__()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_appellseqs.py----------------------------------------
sympy.polys.tests.test_appellseqs.test_andre_poly()
sympy.polys.tests.test_appellseqs.test_bernoulli_c_poly()
sympy.polys.tests.test_appellseqs.test_bernoulli_poly()
sympy.polys.tests.test_appellseqs.test_euler_poly()
sympy.polys.tests.test_appellseqs.test_genocchi_poly()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_rationaltools.py----------------------------------------
A:sympy.polys.tests.test_rationaltools.(A, B)->symbols('A,B', commutative=False)
sympy.polys.tests.test_rationaltools.test_together()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_heuristicgcd.py----------------------------------------
A:sympy.polys.tests.test_heuristicgcd.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, u)->ring('x,y,z,u', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(f, g, h)->R.fateman_poly_F_3()
A:sympy.polys.tests.test_heuristicgcd.(H, cff, cfg)->heugcd(f, g)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, u, v)->ring('x,y,z,u,v', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, u, v, a, b)->ring('x,y,z,u,v,a,b', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, u, v, a, b, c, d)->ring('x,y,z,u,v,a,b,c,d', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
sympy.polys.tests.test_heuristicgcd.test_heugcd_multivariate_integers()
sympy.polys.tests.test_heuristicgcd.test_heugcd_univariate_integers()
sympy.polys.tests.test_heuristicgcd.test_issue_10996()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_polytools.py----------------------------------------
A:sympy.polys.tests.test_polytools.p->poly(x - 1)
A:sympy.polys.tests.test_polytools.K->FF(3)
A:sympy.polys.tests.test_polytools.f->Poly(x ** 4 - 2)
A:sympy.polys.tests.test_polytools.g->Poly(2 * x ** 2 * y, y, domain='ZZ(x)')
A:sympy.polys.tests.test_polytools.h->Poly(x + y, x, y, domain=ZZ)
A:sympy.polys.tests.test_polytools.F3->FF(3)
A:sympy.polys.tests.test_polytools.dom->sympy.polys.domains.QQ.algebraic_field(I)
A:sympy.polys.tests.test_polytools.F5->FF(5)
A:sympy.polys.tests.test_polytools.(F, A, B)->field('a,b', ZZ)
A:sympy.polys.tests.test_polytools.t0->Symbol('t0')
A:sympy.polys.tests.test_polytools.(coeff, poly)->Poly(x / 3 + sqrt(2), x, domain='EX').clear_denoms(convert=True)
A:sympy.polys.tests.test_polytools.alpha->Symbol('alpha')
A:sympy.polys.tests.test_polytools.(q, r)->div(a, 0.408248290463863 * a)
A:sympy.polys.tests.test_polytools.r->Poly(x ** 2 + y ** 2 + y, x, y)
A:sympy.polys.tests.test_polytools.q->S('(2*1*(x - 1/x)/(x*(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x -\n        1/x)) - 2/x)) - 2*1*((x - 1/x)/((x*(x - 1/x)**2)) - 1/(x*(x -\n        1/x)))*((-x + 1/x)*((x - 1/x)/((x*(x - 1/x)**2)) - 1/(x*(x -\n        1/x)))/(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x - 1/x)) -\n        2/x) + 1)*((x - 1/x)/((x - 1/x)**2) - ((x - 1/x)/((x*(x - 1/x)**2)) -\n        1/(x*(x - 1/x)))**2/(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x\n        - 1/x)) - 2/x) - 1/(x - 1/x))*(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) -\n        1/(x**2*(x - 1/x)) - 2/x)/x - 1/x)*(((-x + 1/x)/((x*(x - 1/x)**2)) +\n        1/(x*(x - 1/x)))*((-(x - 1/x)/(x*(x - 1/x)) - 1/x)*((x - 1/x)/((x*(x -\n        1/x)**2)) - 1/(x*(x - 1/x)))/(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) -\n        1/(x**2*(x - 1/x)) - 2/x) - 1 + (x - 1/x)/(x - 1/x))/((x*((x -\n        1/x)/((x - 1/x)**2) - ((x - 1/x)/((x*(x - 1/x)**2)) - 1/(x*(x -\n        1/x)))**2/(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x - 1/x)) -\n        2/x) - 1/(x - 1/x))*(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x\n        - 1/x)) - 2/x))) + ((x - 1/x)/((x*(x - 1/x))) + 1/x)/((x*(2*x - (-x +\n        1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x - 1/x)) - 2/x))) + 1/x)/(2*x +\n        2*((x - 1/x)/((x*(x - 1/x)**2)) - 1/(x*(x - 1/x)))*((-(x - 1/x)/(x*(x\n        - 1/x)) - 1/x)*((x - 1/x)/((x*(x - 1/x)**2)) - 1/(x*(x - 1/x)))/(2*x -\n        (-x + 1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x - 1/x)) - 2/x) - 1 + (x -\n        1/x)/(x - 1/x))/((x*((x - 1/x)/((x - 1/x)**2) - ((x - 1/x)/((x*(x -\n        1/x)**2)) - 1/(x*(x - 1/x)))**2/(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2)\n        - 1/(x**2*(x - 1/x)) - 2/x) - 1/(x - 1/x))*(2*x - (-x + 1/x)/(x**2*(x\n        - 1/x)**2) - 1/(x**2*(x - 1/x)) - 2/x))) - 2*((x - 1/x)/((x*(x -\n        1/x))) + 1/x)/(x*(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x -\n        1/x)) - 2/x)) - 2/x) - ((x - 1/x)/((x*(x - 1/x)**2)) - 1/(x*(x -\n        1/x)))*((-x + 1/x)*((x - 1/x)/((x*(x - 1/x)**2)) - 1/(x*(x -\n        1/x)))/(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x - 1/x)) -\n        2/x) + 1)/(x*((x - 1/x)/((x - 1/x)**2) - ((x - 1/x)/((x*(x - 1/x)**2))\n        - 1/(x*(x - 1/x)))**2/(2*x - (-x + 1/x)/(x**2*(x - 1/x)**2) -\n        1/(x**2*(x - 1/x)) - 2/x) - 1/(x - 1/x))*(2*x - (-x + 1/x)/(x**2*(x -\n        1/x)**2) - 1/(x**2*(x - 1/x)) - 2/x)) + (x - 1/x)/((x*(2*x - (-x +\n        1/x)/(x**2*(x - 1/x)**2) - 1/(x**2*(x - 1/x)) - 2/x))) - 1/x', evaluate=False)
A:sympy.polys.tests.test_polytools.F->Poly(x + a, x, domain='ZZ[a]')
A:sympy.polys.tests.test_polytools.fp->poly(x ** 4 - 3 * x ** 2 + 1, x)
A:sympy.polys.tests.test_polytools.gp->poly(x ** 4 - 3 * x ** 2 + 1, x).shift(-3)
A:sympy.polys.tests.test_polytools.gcd->gcd_list([], x, polys=True)
A:sympy.polys.tests.test_polytools.a->Add(2, p, evaluate=False)
A:sympy.polys.tests.test_polytools.lcm->lcm_list([], x, polys=True)
A:sympy.polys.tests.test_polytools.eq->Eq(2 * x, 2 * y + 2 * z * y)
A:sympy.polys.tests.test_polytools.(F, G, H)->map(Poly, (f, g, h))
A:sympy.polys.tests.test_polytools.(F, G, H, P)->map(Poly, (f, g, h, p))
A:sympy.polys.tests.test_polytools.(F, U, V, W)->map(Poly, (f, u, v, w))
A:sympy.polys.tests.test_polytools.i->Symbol('i', integer=True)
A:sympy.polys.tests.test_polytools.(real_part, complex_part)->intervals(f, all=True, sqf=True, eps=Rational(1, 10))
A:sympy.polys.tests.test_polytools.roots->nroots(x ** 2 - 1)
A:sympy.polys.tests.test_polytools.eps->Float('1e-6')
A:sympy.polys.tests.test_polytools.r0->exp(2 * I * pi / 5)
A:sympy.polys.tests.test_polytools.G->groebner(F, x, y, order='grevlex', polys=True)
A:sympy.polys.tests.test_polytools.P->tanh(x - 3.0)
A:sympy.polys.tests.test_polytools.Q->tanh(x + 3.0)
A:sympy.polys.tests.test_polytools.A->Symbol('A', commutative=False)
A:sympy.polys.tests.test_polytools.p1->Piecewise((A * (x ** 2 - 1) / (x + 1), x > 1), ((x + 2) / (x ** 2 + 2 * x), True))
A:sympy.polys.tests.test_polytools.p2->Piecewise((A * (x - 1), x > 1), (1 / x, True))
A:sympy.polys.tests.test_polytools.p3->Piecewise(((x ** 2 - 1) / (x + 1), x > 1), ((x + 2) / (x ** 2 + 2 * x), True))
A:sympy.polys.tests.test_polytools.p4->Piecewise((x - 1, x > 1), (1 / x, True))
A:sympy.polys.tests.test_polytools.M->Matrix([[poly(x + 1), poly(x + 1)]])
A:sympy.polys.tests.test_polytools.(g, c)->Poly(x ** 4 - 2).make_monic_over_integers_by_scaling_roots()
A:sympy.polys.tests.test_polytools.(G, alt)->Poly(x ** 4 - 2).galois_group(by_name=True)
A:sympy.polys.tests.test_polytools.H->groebner(G, polys=True)
A:sympy.polys.tests.test_polytools.(Q, r)->reduced(f, G, x, y, z, modulus=7, symmetric=False, polys=True)
A:sympy.polys.tests.test_polytools.u->Mul(2, x + 1, evaluate=False)
A:sympy.polys.tests.test_polytools.x->Symbol('x')
A:sympy.polys.tests.test_polytools.poly->Poly(1.0 + I * w / R, w, 1 / R)
A:sympy.polys.tests.test_polytools.copy->Poly(1.0 + I * w / R, w, 1 / R).copy()
A:sympy.polys.tests.test_polytools.deserialized->pickle.loads(pickle.dumps(poly))
A:sympy.polys.tests.test_polytools.result->degree(x * (x + 1) - x ** 2 - x, x)
A:sympy.polys.tests.test_polytools.(w, R)->symbols('w R')
sympy.polys.tests.test_polytools._epsilon_eq(a,b)
sympy.polys.tests.test_polytools._strict_eq(a,b)
sympy.polys.tests.test_polytools.test_GroebnerBasis()
sympy.polys.tests.test_polytools.test_Poly_EC()
sympy.polys.tests.test_polytools.test_Poly_EM()
sympy.polys.tests.test_polytools.test_Poly_ET()
sympy.polys.tests.test_polytools.test_Poly_LC()
sympy.polys.tests.test_polytools.test_Poly_LM()
sympy.polys.tests.test_polytools.test_Poly_LM_custom_order()
sympy.polys.tests.test_polytools.test_Poly_LT()
sympy.polys.tests.test_polytools.test_Poly_TC()
sympy.polys.tests.test_polytools.test_Poly___call__()
sympy.polys.tests.test_polytools.test_Poly__args()
sympy.polys.tests.test_polytools.test_Poly__eq__()
sympy.polys.tests.test_polytools.test_Poly__gen_to_level()
sympy.polys.tests.test_polytools.test_Poly__gens()
sympy.polys.tests.test_polytools.test_Poly__new__()
sympy.polys.tests.test_polytools.test_Poly__unify()
sympy.polys.tests.test_polytools.test_Poly_abs()
sympy.polys.tests.test_polytools.test_Poly_add()
sympy.polys.tests.test_polytools.test_Poly_add_ground()
sympy.polys.tests.test_polytools.test_Poly_all_coeffs()
sympy.polys.tests.test_polytools.test_Poly_all_monoms()
sympy.polys.tests.test_polytools.test_Poly_all_terms()
sympy.polys.tests.test_polytools.test_Poly_as_dict()
sympy.polys.tests.test_polytools.test_Poly_as_expr()
sympy.polys.tests.test_polytools.test_Poly_clear_denoms()
sympy.polys.tests.test_polytools.test_Poly_coeff()
sympy.polys.tests.test_polytools.test_Poly_coeffs()
sympy.polys.tests.test_polytools.test_Poly_deflate()
sympy.polys.tests.test_polytools.test_Poly_degree()
sympy.polys.tests.test_polytools.test_Poly_degree_list()
sympy.polys.tests.test_polytools.test_Poly_diff()
sympy.polys.tests.test_polytools.test_Poly_divmod()
sympy.polys.tests.test_polytools.test_Poly_eject()
sympy.polys.tests.test_polytools.test_Poly_eq_ne()
sympy.polys.tests.test_polytools.test_Poly_eval()
sympy.polys.tests.test_polytools.test_Poly_exclude()
sympy.polys.tests.test_polytools.test_Poly_exquo_ground()
sympy.polys.tests.test_polytools.test_Poly_free_symbols()
sympy.polys.tests.test_polytools.test_Poly_from_dict()
sympy.polys.tests.test_polytools.test_Poly_from_expr()
sympy.polys.tests.test_polytools.test_Poly_from_list()
sympy.polys.tests.test_polytools.test_Poly_from_poly()
sympy.polys.tests.test_polytools.test_Poly_get_domain()
sympy.polys.tests.test_polytools.test_Poly_get_modulus()
sympy.polys.tests.test_polytools.test_Poly_has_only_gens()
sympy.polys.tests.test_polytools.test_Poly_homogeneous_order()
sympy.polys.tests.test_polytools.test_Poly_homogenize()
sympy.polys.tests.test_polytools.test_Poly_inject()
sympy.polys.tests.test_polytools.test_Poly_integrate()
sympy.polys.tests.test_polytools.test_Poly_is_irreducible()
sympy.polys.tests.test_polytools.test_Poly_l1_norm()
sympy.polys.tests.test_polytools.test_Poly_length()
sympy.polys.tests.test_polytools.test_Poly_lift()
sympy.polys.tests.test_polytools.test_Poly_ltrim()
sympy.polys.tests.test_polytools.test_Poly_max_norm()
sympy.polys.tests.test_polytools.test_Poly_mixed_operations()
sympy.polys.tests.test_polytools.test_Poly_monoms()
sympy.polys.tests.test_polytools.test_Poly_mul()
sympy.polys.tests.test_polytools.test_Poly_mul_ground()
sympy.polys.tests.test_polytools.test_Poly_neg()
sympy.polys.tests.test_polytools.test_Poly_nonzero()
sympy.polys.tests.test_polytools.test_Poly_nth()
sympy.polys.tests.test_polytools.test_Poly_one()
sympy.polys.tests.test_polytools.test_Poly_pow()
sympy.polys.tests.test_polytools.test_Poly_precision()
sympy.polys.tests.test_polytools.test_Poly_properties()
sympy.polys.tests.test_polytools.test_Poly_quo_ground()
sympy.polys.tests.test_polytools.test_Poly_rat_clear_denoms()
sympy.polys.tests.test_polytools.test_Poly_reorder()
sympy.polys.tests.test_polytools.test_Poly_replace()
sympy.polys.tests.test_polytools.test_Poly_retract()
sympy.polys.tests.test_polytools.test_Poly_root()
sympy.polys.tests.test_polytools.test_Poly_set_domain()
sympy.polys.tests.test_polytools.test_Poly_set_modulus()
sympy.polys.tests.test_polytools.test_Poly_slice()
sympy.polys.tests.test_polytools.test_Poly_sqr()
sympy.polys.tests.test_polytools.test_Poly_sub()
sympy.polys.tests.test_polytools.test_Poly_sub_ground()
sympy.polys.tests.test_polytools.test_Poly_subs()
sympy.polys.tests.test_polytools.test_Poly_terms()
sympy.polys.tests.test_polytools.test_Poly_termwise()
sympy.polys.tests.test_polytools.test_Poly_to_exact()
sympy.polys.tests.test_polytools.test_Poly_to_field()
sympy.polys.tests.test_polytools.test_Poly_to_ring()
sympy.polys.tests.test_polytools.test_Poly_total_degree()
sympy.polys.tests.test_polytools.test_Poly_zero()
sympy.polys.tests.test_polytools.test_PurePoly_Poly()
sympy.polys.tests.test_polytools.test_PurePoly__eq__()
sympy.polys.tests.test_polytools.test_PurePoly_free_symbols()
sympy.polys.tests.test_polytools.test_all_roots()
sympy.polys.tests.test_polytools.test_as_list()
sympy.polys.tests.test_polytools.test_cancel()
sympy.polys.tests.test_polytools.test_compose()
sympy.polys.tests.test_polytools.test_content()
sympy.polys.tests.test_polytools.test_count_roots()
sympy.polys.tests.test_polytools.test_deserialized_poly_equals_original()
sympy.polys.tests.test_polytools.test_discriminant()
sympy.polys.tests.test_polytools.test_dispersion()
sympy.polys.tests.test_polytools.test_div()
sympy.polys.tests.test_polytools.test_factor()
sympy.polys.tests.test_polytools.test_factor_large()
sympy.polys.tests.test_polytools.test_factor_noeval()
sympy.polys.tests.test_polytools.test_factor_terms()
sympy.polys.tests.test_polytools.test_fglm()
sympy.polys.tests.test_polytools.test_galois_group()
sympy.polys.tests.test_polytools.test_gcd()
sympy.polys.tests.test_polytools.test_gcd_list()
sympy.polys.tests.test_polytools.test_gcd_numbers_vs_polys()
sympy.polys.tests.test_polytools.test_gcdex()
sympy.polys.tests.test_polytools.test_gff()
sympy.polys.tests.test_polytools.test_groebner()
sympy.polys.tests.test_polytools.test_ground_roots()
sympy.polys.tests.test_polytools.test_intervals()
sympy.polys.tests.test_polytools.test_is_zero_dimensional()
sympy.polys.tests.test_polytools.test_issue_11198()
sympy.polys.tests.test_polytools.test_issue_12400()
sympy.polys.tests.test_polytools.test_issue_13079()
sympy.polys.tests.test_polytools.test_issue_14364()
sympy.polys.tests.test_polytools.test_issue_15669()
sympy.polys.tests.test_polytools.test_issue_17988()
sympy.polys.tests.test_polytools.test_issue_18205()
sympy.polys.tests.test_polytools.test_issue_19113()
sympy.polys.tests.test_polytools.test_issue_19360()
sympy.polys.tests.test_polytools.test_issue_20389()
sympy.polys.tests.test_polytools.test_issue_20427()
sympy.polys.tests.test_polytools.test_issue_20985()
sympy.polys.tests.test_polytools.test_issue_5786()
sympy.polys.tests.test_polytools.test_issue_7864()
sympy.polys.tests.test_polytools.test_issue_8695()
sympy.polys.tests.test_polytools.test_issue_9585()
sympy.polys.tests.test_polytools.test_keep_coeff()
sympy.polys.tests.test_polytools.test_lcm_list()
sympy.polys.tests.test_polytools.test_make_monic_over_integers_by_scaling_roots()
sympy.polys.tests.test_polytools.test_monic()
sympy.polys.tests.test_polytools.test_noncommutative()
sympy.polys.tests.test_polytools.test_norm()
sympy.polys.tests.test_polytools.test_nroots()
sympy.polys.tests.test_polytools.test_nth_power_roots_poly()
sympy.polys.tests.test_polytools.test_parallel_poly_from_expr()
sympy.polys.tests.test_polytools.test_pdiv()
sympy.polys.tests.test_polytools.test_poly()
sympy.polys.tests.test_polytools.test_poly_copy_equals_original()
sympy.polys.tests.test_polytools.test_poly_from_domain_element()
sympy.polys.tests.test_polytools.test_poly_matching_consistency()
sympy.polys.tests.test_polytools.test_primitive()
sympy.polys.tests.test_polytools.test_real_roots()
sympy.polys.tests.test_polytools.test_reduced()
sympy.polys.tests.test_polytools.test_refine_root()
sympy.polys.tests.test_polytools.test_resultant()
sympy.polys.tests.test_polytools.test_revert()
sympy.polys.tests.test_polytools.test_same_root()
sympy.polys.tests.test_polytools.test_shift()
sympy.polys.tests.test_polytools.test_sqf()
sympy.polys.tests.test_polytools.test_sqf_norm()
sympy.polys.tests.test_polytools.test_sturm()
sympy.polys.tests.test_polytools.test_subresultants()
sympy.polys.tests.test_polytools.test_terms_gcd()
sympy.polys.tests.test_polytools.test_to_rational_coeffs()
sympy.polys.tests.test_polytools.test_torational_factor_list()
sympy.polys.tests.test_polytools.test_transform()
sympy.polys.tests.test_polytools.test_trunc()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_rings.py----------------------------------------
A:sympy.polys.tests.test_rings.(x, y, z, t)->symbols('x,y,z,t')
A:sympy.polys.tests.test_rings._lex->Symbol('lex')
A:sympy.polys.tests.test_rings.R1->PolyRing('x,y', ZZ, lex)
A:sympy.polys.tests.test_rings.R2->PolyRing('x,y', ZZ, lex)
A:sympy.polys.tests.test_rings.R3->PolyRing('x,y,z', ZZ, lex)
A:sympy.polys.tests.test_rings.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_rings.(R,)->ring('', ZZ)
A:sympy.polys.tests.test_rings.R->PolyRing('x,y,z', Rt, lex)
A:sympy.polys.tests.test_rings.(R, x)->ring('x', FF(2))
A:sympy.polys.tests.test_rings.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.tests.test_rings.Rt->FracField('t', ZZ, lex)
A:sympy.polys.tests.test_rings.(R, a)->sring(items, extension=True)
A:sympy.polys.tests.test_rings.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_rings.(Rt, t)->ring('t', Fx)
A:sympy.polys.tests.test_rings.(x, y)->symbols('x, y')
A:sympy.polys.tests.test_rings.(R, t)->ring('t', ZZ)
A:sympy.polys.tests.test_rings.g->R.from_expr(3).copy()
A:sympy.polys.tests.test_rings.(U, V, W)->symbols('u,v,w')
A:sympy.polys.tests.test_rings.(x, y, z)->symbols('x,y,z')
A:sympy.polys.tests.test_rings.(R, X, Y, Z)->ring((x, y, z), ZZ)
A:sympy.polys.tests.test_rings.f->PolyRing('x,y,z', Rt, lex).from_expr(3)
A:sympy.polys.tests.test_rings.(r, F)->sring([exp(2)])
A:sympy.polys.tests.test_rings.terms->(x ** 2 / 3 + y ** 3 / 4 + z ** 4 / 5).terms()
A:sympy.polys.tests.test_rings.monoms->(x ** 2 / 3 + y ** 3 / 4 + z ** 4 / 5).monoms()
A:sympy.polys.tests.test_rings.coeffs->(x ** 2 / 3 + y ** 3 / 4 + z ** 4 / 5).coeffs()
A:sympy.polys.tests.test_rings.(Ruv, u, v)->ring('u,v', ZZ)
A:sympy.polys.tests.test_rings.(Rxyz, x, y, z)->ring('x,y,z', Ruv)
A:sympy.polys.tests.test_rings.(Fuv, u, v)->field('u,v', ZZ)
A:sympy.polys.tests.test_rings.(rQQ, x, t)->ring('x,t', QQ, lex)
A:sympy.polys.tests.test_rings.(rZZ, X, T)->ring('x,t', ZZ, lex)
A:sympy.polys.tests.test_rings.(Fx, x)->field('x', ZZ)
A:sympy.polys.tests.test_rings.(R, X)->xring('x:11', QQ)
A:sympy.polys.tests.test_rings.Ry->PolyRing('x,y,z', Rt, lex).drop(x)
A:sympy.polys.tests.test_rings.r->(x ** 3 + 4 * x ** 2 + 2 * x * y * z + 3).compose(x, y * z ** 2 - 1)
A:sympy.polys.tests.test_rings.(sym, rem, m)->PolyRing('x,y,z', Rt, lex).from_expr(3).symmetrize()
A:sympy.polys.tests.test_rings.(R, f)->sring(3)
A:sympy.polys.tests.test_rings.(_, t)->ring('t', FF(11))
A:sympy.polys.tests.test_rings.(_, u)->ring('u', ZZ)
A:sympy.polys.tests.test_rings.(_, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_rings.(_, x)->ring('x', ZZ)
A:sympy.polys.tests.test_rings.(F, a, b, c)->ring('a,b,c', ZZ)
A:sympy.polys.tests.test_rings.(F, t)->field('t', ZZ)
sympy.polys.tests.test_rings.test_PolyElement_LC()
sympy.polys.tests.test_rings.test_PolyElement_LM()
sympy.polys.tests.test_rings.test_PolyElement_LT()
sympy.polys.tests.test_rings.test_PolyElement___add__()
sympy.polys.tests.test_rings.test_PolyElement___call__()
sympy.polys.tests.test_rings.test_PolyElement___eq__()
sympy.polys.tests.test_rings.test_PolyElement___hash__()
sympy.polys.tests.test_rings.test_PolyElement___mul__()
sympy.polys.tests.test_rings.test_PolyElement___pow__()
sympy.polys.tests.test_rings.test_PolyElement___sub__()
sympy.polys.tests.test_rings.test_PolyElement___truediv__()
sympy.polys.tests.test_rings.test_PolyElement__lt_le_gt_ge__()
sympy.polys.tests.test_rings.test_PolyElement__str__()
sympy.polys.tests.test_rings.test_PolyElement_as_expr()
sympy.polys.tests.test_rings.test_PolyElement_cancel()
sympy.polys.tests.test_rings.test_PolyElement_clear_denoms()
sympy.polys.tests.test_rings.test_PolyElement_coeff()
sympy.polys.tests.test_rings.test_PolyElement_coeffs()
sympy.polys.tests.test_rings.test_PolyElement_cofactors()
sympy.polys.tests.test_rings.test_PolyElement_compose()
sympy.polys.tests.test_rings.test_PolyElement_copy()
sympy.polys.tests.test_rings.test_PolyElement_decompose()
sympy.polys.tests.test_rings.test_PolyElement_deflate()
sympy.polys.tests.test_rings.test_PolyElement_degree()
sympy.polys.tests.test_rings.test_PolyElement_degrees()
sympy.polys.tests.test_rings.test_PolyElement_diff()
sympy.polys.tests.test_rings.test_PolyElement_discriminant()
sympy.polys.tests.test_rings.test_PolyElement_div()
sympy.polys.tests.test_rings.test_PolyElement_drop()
sympy.polys.tests.test_rings.test_PolyElement_evaluate()
sympy.polys.tests.test_rings.test_PolyElement_factor_list()
sympy.polys.tests.test_rings.test_PolyElement_from_expr()
sympy.polys.tests.test_rings.test_PolyElement_gcd()
sympy.polys.tests.test_rings.test_PolyElement_gcdex()
sympy.polys.tests.test_rings.test_PolyElement_gff_list()
sympy.polys.tests.test_rings.test_PolyElement_is_()
sympy.polys.tests.test_rings.test_PolyElement_l1_norm()
sympy.polys.tests.test_rings.test_PolyElement_leading_monom()
sympy.polys.tests.test_rings.test_PolyElement_leading_term()
sympy.polys.tests.test_rings.test_PolyElement_max_norm()
sympy.polys.tests.test_rings.test_PolyElement_monoms()
sympy.polys.tests.test_rings.test_PolyElement_pdiv()
sympy.polys.tests.test_rings.test_PolyElement_rem()
sympy.polys.tests.test_rings.test_PolyElement_resultant()
sympy.polys.tests.test_rings.test_PolyElement_shift()
sympy.polys.tests.test_rings.test_PolyElement_sqf_list()
sympy.polys.tests.test_rings.test_PolyElement_sqf_norm()
sympy.polys.tests.test_rings.test_PolyElement_sturm()
sympy.polys.tests.test_rings.test_PolyElement_subresultants()
sympy.polys.tests.test_rings.test_PolyElement_subs()
sympy.polys.tests.test_rings.test_PolyElement_symmetrize()
sympy.polys.tests.test_rings.test_PolyElement_tail_degree()
sympy.polys.tests.test_rings.test_PolyElement_tail_degrees()
sympy.polys.tests.test_rings.test_PolyElement_terms()
sympy.polys.tests.test_rings.test_PolyRing___eq__()
sympy.polys.tests.test_rings.test_PolyRing___getitem__()
sympy.polys.tests.test_rings.test_PolyRing___hash__()
sympy.polys.tests.test_rings.test_PolyRing___init__()
sympy.polys.tests.test_rings.test_PolyRing_add()
sympy.polys.tests.test_rings.test_PolyRing_drop()
sympy.polys.tests.test_rings.test_PolyRing_is_()
sympy.polys.tests.test_rings.test_PolyRing_mul()
sympy.polys.tests.test_rings.test_PolyRing_ring_new()
sympy.polys.tests.test_rings.test_PolyRing_symmetric_poly()
sympy.polys.tests.test_rings.test_issue_18894()
sympy.polys.tests.test_rings.test_issue_21410()
sympy.polys.tests.test_rings.test_sring()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_monomials.py----------------------------------------
A:sympy.polys.tests.test_monomials.(i, j, k)->symbols('i j k', commutative=False)
A:sympy.polys.tests.test_monomials.m->Monomial((3, 4, 1), (x, y, z))
A:sympy.polys.tests.test_monomials.n->Monomial((1, 2, 0), (x, y, z))
A:sympy.polys.tests.test_monomials.mm->Monomial((1, 2, 3))
sympy.polys.tests.test_monomials.test_Monomial()
sympy.polys.tests.test_monomials.test_monomial_count()
sympy.polys.tests.test_monomials.test_monomial_div()
sympy.polys.tests.test_monomials.test_monomial_divides()
sympy.polys.tests.test_monomials.test_monomial_gcd()
sympy.polys.tests.test_monomials.test_monomial_lcm()
sympy.polys.tests.test_monomials.test_monomial_max()
sympy.polys.tests.test_monomials.test_monomial_min()
sympy.polys.tests.test_monomials.test_monomial_mul()
sympy.polys.tests.test_monomials.test_monomial_pow()
sympy.polys.tests.test_monomials.test_monomials()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_groebnertools.py----------------------------------------
A:sympy.polys.tests.test_groebnertools.(R, x, y)->ring('x,y', QQ, lex)
A:sympy.polys.tests.test_groebnertools.(R, y, x)->ring('y,x', QQ, lex)
A:sympy.polys.tests.test_groebnertools.(R, x, y, z)->ring('x,y,z', QQ)
A:sympy.polys.tests.test_groebnertools.V->range(1, 12 + 1)
A:sympy.polys.tests.test_groebnertools.(R, V)->xring(['x%d' % v for v in V], QQ, lex)
A:sympy.polys.tests.test_groebnertools.(R, x0, x1, x2)->ring('x:3', ZZ, grlex)
A:sympy.polys.tests.test_groebnertools.(R, x0, x1, x2, x3)->ring('x:4', ZZ, grlex)
A:sympy.polys.tests.test_groebnertools.(R, x, t)->ring('x,t', ZZ, grlex)
A:sympy.polys.tests.test_groebnertools.(R, a, b, c, d)->ring('a,b,c,d', ZZ, grlex)
A:sympy.polys.tests.test_groebnertools.s1->sig((0,) * 3, 2)
A:sympy.polys.tests.test_groebnertools.s2->sig((1,) * 3, 4)
A:sympy.polys.tests.test_groebnertools.s3->sig((2,) * 3, 2)
A:sympy.polys.tests.test_groebnertools.(R, x, y, z, t)->ring('x,y,z,t', QQ, grlex)
A:sympy.polys.tests.test_groebnertools.p1->lbp(sig((0,) * 4, 3), R.zero, 12)
A:sympy.polys.tests.test_groebnertools.p2->lbp(sig((0,) * 4, 4), R.zero, 13)
A:sympy.polys.tests.test_groebnertools.p3->lbp(sig((0,) * 4, 4), R.zero, 12)
A:sympy.polys.tests.test_groebnertools.cp1->critical_pair(p1, p2, R)
A:sympy.polys.tests.test_groebnertools.cp2->critical_pair(q1, q2, R)
A:sympy.polys.tests.test_groebnertools.p->lbp(sig((0, 1, 1, 0), 2), R.zero, 7)
A:sympy.polys.tests.test_groebnertools.cp->critical_pair(F[0], F[1], R)
A:sympy.polys.tests.test_groebnertools.s->lbp(sig(Sign(s)[0], 100), Polyn(s), Num(s))
A:sympy.polys.tests.test_groebnertools.G->groebner([f, g], R)
sympy.polys.tests.test_groebnertools._do_test_benchmark_cyclic_4()
sympy.polys.tests.test_groebnertools._do_test_benchmark_czichowski()
sympy.polys.tests.test_groebnertools._do_test_benchmark_katsura_3()
sympy.polys.tests.test_groebnertools._do_test_benchmark_katsura_4()
sympy.polys.tests.test_groebnertools._do_test_benchmark_minpoly()
sympy.polys.tests.test_groebnertools._do_test_groebner()
sympy.polys.tests.test_groebnertools.test_benchmark_coloring()
sympy.polys.tests.test_groebnertools.test_benchmark_cyclic_4_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_cyclic_4_f5b()
sympy.polys.tests.test_groebnertools.test_benchmark_czichowski_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_czichowski_f5b()
sympy.polys.tests.test_groebnertools.test_benchmark_kastura_4_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_kastura_4_f5b()
sympy.polys.tests.test_groebnertools.test_benchmark_katsura3_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_katsura3_f5b()
sympy.polys.tests.test_groebnertools.test_benchmark_minpoly_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_minpoly_f5b()
sympy.polys.tests.test_groebnertools.test_cp_key()
sympy.polys.tests.test_groebnertools.test_critical_pair()
sympy.polys.tests.test_groebnertools.test_f5_reduce()
sympy.polys.tests.test_groebnertools.test_groebner_buchberger()
sympy.polys.tests.test_groebnertools.test_groebner_f5b()
sympy.polys.tests.test_groebnertools.test_groebner_gcd()
sympy.polys.tests.test_groebnertools.test_groebner_lcm()
sympy.polys.tests.test_groebnertools.test_is_groebner()
sympy.polys.tests.test_groebnertools.test_is_reduced()
sympy.polys.tests.test_groebnertools.test_is_rewritable_or_comparable()
sympy.polys.tests.test_groebnertools.test_lbp_key()
sympy.polys.tests.test_groebnertools.test_representing_matrices()
sympy.polys.tests.test_groebnertools.test_sig_key()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_orderings.py----------------------------------------
A:sympy.polys.tests.test_orderings.ilex->InverseOrder(lex)
A:sympy.polys.tests.test_orderings.igrlex->InverseOrder(grlex)
A:sympy.polys.tests.test_orderings.P->ProductOrder((grlex, lambda m: m[:2]), (grlex, lambda m: m[2:]))
sympy.polys.tests.test_orderings.test_InverseOrder()
sympy.polys.tests.test_orderings.test_ProductOrder()
sympy.polys.tests.test_orderings.test_build_product_order()
sympy.polys.tests.test_orderings.test_grevlex_order()
sympy.polys.tests.test_orderings.test_grlex_order()
sympy.polys.tests.test_orderings.test_lex_order()
sympy.polys.tests.test_orderings.test_monomial_key()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_polymatrix.py----------------------------------------
A:sympy.polys.tests.test_polymatrix.pm1->PolyMatrix([[Poly(x ** 2, x), Poly(-x, x)], [Poly(x ** 3, x), Poly(-1 + x, x)]])
A:sympy.polys.tests.test_polymatrix.v1->PolyMatrix([[1, 0], [-1, 0]], ring='ZZ[x]')
A:sympy.polys.tests.test_polymatrix.m1->PolyMatrix([[1, 0], [-1, 0]], ring='ZZ[x]')
A:sympy.polys.tests.test_polymatrix.A->PolyMatrix([[Poly(x ** 2 + x, x), Poly(0, x)], [Poly(x ** 3 - x + 1, x), Poly(0, x)]])
A:sympy.polys.tests.test_polymatrix.B->PolyMatrix([[Poly(x ** 2, x), Poly(-x, x)], [Poly(-x ** 2, x), Poly(x, x)]])
A:sympy.polys.tests.test_polymatrix.pm2->PolyMatrix([[Poly(x ** 2, x, domain='QQ'), Poly(0, x, domain='QQ'), Poly(-x ** 2, x, domain='QQ'), Poly(x ** 3, x, domain='QQ'), Poly(0, x, domain='QQ'), Poly(-x ** 3, x, domain='QQ')]])
A:sympy.polys.tests.test_polymatrix.v2->PolyMatrix([1, 0, 0, 0, 0, 0], ring='ZZ[x]')
A:sympy.polys.tests.test_polymatrix.m2->PolyMatrix([1, 0, 0, 0, 0, 0], ring='ZZ[x]')
A:sympy.polys.tests.test_polymatrix.C->PolyMatrix([[Poly(x ** 2, x, domain='QQ')]])
A:sympy.polys.tests.test_polymatrix.pm3->PolyMatrix([[Poly(x ** 2, x), S.One]], ring='ZZ[x]')
A:sympy.polys.tests.test_polymatrix.pm4->PolyMatrix([[Poly(x ** 2, x, domain='ZZ'), Poly(-x ** 2, x, domain='ZZ')]])
A:sympy.polys.tests.test_polymatrix.v4->PolyMatrix([1, -1], ring='ZZ[x]')
A:sympy.polys.tests.test_polymatrix.M1->PolyMatrix([[1, 2], [3, 4]], x)
A:sympy.polys.tests.test_polymatrix.M2->PolyMatrix([[5, 6], [7, 8]], x)
A:sympy.polys.tests.test_polymatrix.pmx->PolyMatrix([1, 2], x)
A:sympy.polys.tests.test_polymatrix.pmy->PolyMatrix([1, 2], y)
A:sympy.polys.tests.test_polymatrix.M->PolyMatrix([[1, 2], [3, 6]], x)
sympy.polys.tests.test_polymatrix._test_polymatrix()
sympy.polys.tests.test_polymatrix.test_polymatrix_arithmetic()
sympy.polys.tests.test_polymatrix.test_polymatrix_constructor()
sympy.polys.tests.test_polymatrix.test_polymatrix_eq()
sympy.polys.tests.test_polymatrix.test_polymatrix_from_Matrix()
sympy.polys.tests.test_polymatrix.test_polymatrix_getitem()
sympy.polys.tests.test_polymatrix.test_polymatrix_manipulations()
sympy.polys.tests.test_polymatrix.test_polymatrix_nullspace()
sympy.polys.tests.test_polymatrix.test_polymatrix_ones_zeros()
sympy.polys.tests.test_polymatrix.test_polymatrix_repr()
sympy.polys.tests.test_polymatrix.test_polymatrix_rref()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_specialpolys.py----------------------------------------
A:sympy.polys.tests.test_specialpolys.poly->random_poly(x, 10, -100, 100, polys=True)
A:sympy.polys.tests.test_specialpolys.(x0, x1, x2, x3, y0, y1, y2, y3)->symbols('x:4, y:4')
A:sympy.polys.tests.test_specialpolys.(f, g, h)->fateman_poly_F_3(3)
A:sympy.polys.tests.test_specialpolys.(F, G, H)->dmp_fateman_poly_F_3(3, ZZ)
sympy.polys.tests.test_specialpolys.test_cyclotomic_poly()
sympy.polys.tests.test_specialpolys.test_fateman_poly_F_1()
sympy.polys.tests.test_specialpolys.test_fateman_poly_F_2()
sympy.polys.tests.test_specialpolys.test_fateman_poly_F_3()
sympy.polys.tests.test_specialpolys.test_interpolating_poly()
sympy.polys.tests.test_specialpolys.test_random_poly()
sympy.polys.tests.test_specialpolys.test_swinnerton_dyer_poly()
sympy.polys.tests.test_specialpolys.test_symmetric_poly()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_densearith.py----------------------------------------
A:sympy.polys.tests.test_densearith.F_0->dmp_mul_ground(dmp_normal(f_0, 2, QQ), QQ(1, 7), 2, QQ)
A:sympy.polys.tests.test_densearith.f->dmp_normal([[1], [], [1, 0, 0]], 1, QQ)
A:sympy.polys.tests.test_densearith.g->dmp_normal([[2], [-2, 0]], 1, QQ)
A:sympy.polys.tests.test_densearith.h->dup_normal([4, 0, 0, 4, 28, 0, 1, 14, 49], ZZ)
A:sympy.polys.tests.test_densearith.K->GMPYRationalField()
A:sympy.polys.tests.test_densearith.p1->dup_normal([83, -61, -86, -24, 12, 43, -88, -9, 42, 55, -66, 74, 95, -25, -12, 68, -99, 4, 45, 6, -15, -19, 78, 65, -55, 47, -13, 17, 86, 81, -58, -27, 50, -40, -24, 39, -41, -92, 75, 90, -1, 40, -15, -27, -35, 68, 70, -64, -40, 78, -88, -58, -39, 69, 46, 12, 28, -94, -37, -50, -80, -96, -61, 25, 1, 71, 4, 12, 48, 4, 34, -47, -75, 5, 48, 82, 88, 23, 98, 35, 17, -10, 48, -61, -95, 47, 65, -19, -66, -57, -6, -51, -42, -89, 66, -13, 18, 37, 90, -23, 72, 96, -53, 0, 40, -73, -52, -68, 32, -25, -53, 79, -52, 18, 44, 73, -81, 31, -90, 70, 3, 36, 48, 76, -24, -44, 23, 98, -4, 73, 69, 88, -70, 14, -68, 94, -78, -15, -64, -97, -70, -35, 65, 88, 49, -53, -7, 12, -45, -7, 59, -94, 99, -2, 67, -60, -71, 29, -62, -77, 1, 51, 17, 80, -20, -47, -19, 24, -9, 39, -23, 21, -84, 10, 84, 56, -17, -21, -66, 85, 70, 46, -51, -22, -95, 78, -60, -96, -97, -45, 72, 35, 30, -61, -92, -93, -60, -61, 4, -4, -81, -73, 46, 53, -11, 26, 94, 45, 14, -78, 55, 84, -68, 98, 60, 23, 100, -63, 68, 96, -16, 3, 56, 21, -58, 62, -67, 66, 85, 41, -79, -22, 97, -67, 82, 82, -96, -20, -7, 48, -67, 48, -9, -39, 78], ZZ)
A:sympy.polys.tests.test_densearith.p2->dup_normal([52, 88, 76, 66, 9, -64, 46, -20, -28, 69, 60, 96, -36, -92, -30, -11, -35, 35, 55, 63, -92, -7, 25, -58, 74, 55, -6, 4, 47, -92, -65, 67, -45, 74, -76, 59, -6, 69, 39, 24, -71, -7, 39, -45, 60, -68, 98, 97, -79, 17, 4, 94, -64, 68, -100, -96, -2, 3, 22, 96, 54, -77, -86, 67, 6, 57, 37, 40, 89, -78, 64, -94, -45, -92, 57, 87, -26, 36, 19, 97, 25, 77, -87, 24, 43, -5, 35, 57, 83, 71, 35, 63, 61, 96, -22, 8, -1, 96, 43, 45, 94, -93, 36, 71, -41, -99, 85, -48, 59, 52, -17, 5, 87, -16, -68, -54, 76, -18, 100, 91, -42, -70, -66, -88, -12, 1, 95, -82, 52, 43, -29, 3, 12, 72, -99, -43, -32, -93, -51, 16, -20, -12, -11, 5, 33, -38, 93, -5, -74, 25, 74, -58, 93, 59, -63, -86, 63, -20, -4, -74, -73, -95, 29, -28, 93, -91, -2, -38, -62, 77, -58, -85, -28, 95, 38, 19, -69, 86, 94, 25, -2, -4, 47, 34, -59, 35, -48, 29, -63, -53, 34, 29, 66, 73, 6, 92, -84, 89, 15, 81, 93, 97, 51, -72, -78, 25, 60, 90, -45, 39, 67, -84, -62, 57, 26, -32, -56, -14, -83, 76, 5, -2, 99, -100, 28, 46, 94, -7, 53, -25, 16, -23, -36, 89, -78, -63, 31, 1, 84, -99, -52, 76, 48, 90, -76, 44, -19, 54, -36, -9, -73, -100, -69, 31, 42, 25, -39, 76, -26, -8, -14, 51, 3, 37, 45, 2, -54, 13, -34, -92, 17, -25, -65, 53, -63, 30, 4, -70, -67, 90, 52, 51, 18, -3, 31, -45, -9, 59, 63, -87, 22, -32, 29, -38, 21, 36, -82, 27, -11], ZZ)
A:sympy.polys.tests.test_densearith.res->dup_normal([4316, 4132, -3532, -7974, -11303, -10069, 5484, -3330, -5874, 7734, 4673, 11327, -9884, -8031, 17343, 21035, -10570, -9285, 15893, 3780, -14083, 8819, 17592, 10159, 7174, -11587, 8598, -16479, 3602, 25596, 9781, 12163, 150, 18749, -21782, -12307, 27578, -2757, -12573, 12565, 6345, -18956, 19503, -15617, 1443, -16778, 36851, 23588, -28474, 5749, 40695, -7521, -53669, -2497, -18530, 6770, 57038, 3926, -6927, -15399, 1848, -64649, -27728, 3644, 49608, 15187, -8902, -9480, -7398, -40425, 4824, 23767, -7594, -6905, 33089, 18786, 12192, 24670, 31114, 35334, -4501, -14676, 7107, -59018, -21352, 20777, 19661, 20653, 33754, -885, -43758, 6269, 51897, -28719, -97488, -9527, 13746, 11644, 17644, -21720, 23782, -10481, 47867, 20752, 33810, -1875, 39918, -7710, -40840, 19808, -47075, 23066, 46616, 25201, 9287, 35436, -1602, 9645, -11978, 13273, 15544, 33465, 20063, 44539, 11687, 27314, -6538, -37467, 14031, 32970, -27086, 41323, 29551, 65910, -39027, -37800, -22232, 8212, 46316, -28981, -55282, 50417, -44929, -44062, 73879, 37573, -2596, -10877, -21893, -133218, -33707, -25753, -9531, 17530, 61126, 2748, -56235, 43874, -10872, -90459, -30387, 115267, -7264, -44452, 122626, 14839, -599, 10337, 57166, -67467, -54957, 63669, 1202, 18488, 52594, 7205, -97822, 612, 78069, -5403, -63562, 47236, 36873, -154827, -26188, 82427, -39521, 5628, 7416, 5276, -53095, 47050, 26121, -42207, 79021, -13035, 2499, -66943, 29040, -72355, -23480, 23416, -12885, -44225, -42688, -4224, 19858, 55299, 15735, 11465, 101876, -39169, 51786, 14723, 43280, -68697, 16410, 92295, 56767, 7183, 111850, 4550, 115451, -38443, -19642, -35058, 10230, 93829, 8925, 63047, 3146, 29250, 8530, 5255, -98117, -115517, -76817, -8724, 41044, 1312, -35974, 79333, -28567, 7547, -10580, -24559, -16238, 10794, -3867, 24848, 57770, -51536, -35040, 71033, 29853, 62029, -7125, -125585, -32169, -47907, 156811, -65176, -58006, -15757, -57861, 11963, 30225, -41901, -41681, 31310, 27982, 18613, 61760, 60746, -59096, 33499, 30097, -17997, 24032, 56442, -83042, 23747, -20931, -21978, -158752, -9883, -73598, -7987, -7333, -125403, -116329, 30585, 53281, 51018, -29193, 88575, 8264, -40147, -16289, 113088, 12810, -6508, 101552, -13037, 34440, -41840, 101643, 24263, 80532, 61748, 65574, 6423, -20672, 6591, -10834, -71716, 86919, -92626, 39161, 28490, 81319, 46676, 106720, 43530, 26998, 57456, -8862, 60989, 13982, 3119, -2224, 14743, 55415, -49093, -29303, 28999, 1789, 55953, -84043, -7780, -65013, 57129, -47251, 61484, 61994, -78361, -82778, 22487, -26894, 9756, -74637, -15519, -4360, 30115, 42433, 35475, 15286, 69768, 21509, -20214, 78675, -21163, 13596, 11443, -10698, -53621, -53867, -24155, 64500, -42784, -33077, -16500, 873, -52788, 14546, -38011, 36974, -39849, -34029, -94311, 83068, -50437, -26169, -46746, 59185, 42259, -101379, -12943, 30089, -59086, 36271, 22723, -30253, -52472, -70826, -23289, 3331, -31687, 14183, -857, -28627, 35246, -51284, 5636, -6933, 66539, 36654, 50927, 24783, 3457, 33276, 45281, 45650, -4938, -9968, -22590, 47995, 69229, 5214, -58365, -17907, -14651, 18668, 18009, 12649, -11851, -13387, 20339, 52472, -1087, -21458, -68647, 52295, 15849, 40608, 15323, 25164, -29368, 10352, -7055, 7159, 21695, -5373, -54849, 101103, -24963, -10511, 33227, 7659, 41042, -69588, 26718, -20515, 6441, 38135, -63, 24088, -35364, -12785, -18709, 47843, 48533, -48575, 17251, -19394, 32878, -9010, -9050, 504, -12407, 28076, -3429, 25324, -4210, -26119, 752, -29203, 28251, -11324, -32140, -3366, -25135, 18702, -31588, -7047, -24267, 49987, -14975, -33169, 37744, -7720, -9035, 16964, -2807, -421, 14114, -17097, -13662, 40628, -12139, -9427, 5369, 17551, -13232, -16211, 9804, -7422, 2677, 28635, -8280, -4906, 2908, -22558, 5604, 12459, 8756, -3980, -4745, -18525, 7913, 5970, -16457, 20230, -6247, -13812, 2505, 11899, 1409, -15094, 22540, -18863, 137, 11123, -4516, 2290, -8594, 12150, -10380, 3005, 5235, -7350, 2535, -858], ZZ)
A:sympy.polys.tests.test_densearith.q->dmp_normal([[-1], [-1, 0]], 1, ZZ)
A:sympy.polys.tests.test_densearith.r->dmp_normal([[2, 0, 0]], 1, ZZ)
sympy.polys.tests.test_densearith.test_dmp_abs()
sympy.polys.tests.test_densearith.test_dmp_add()
sympy.polys.tests.test_densearith.test_dmp_add_ground()
sympy.polys.tests.test_densearith.test_dmp_add_term()
sympy.polys.tests.test_densearith.test_dmp_div()
sympy.polys.tests.test_densearith.test_dmp_expand()
sympy.polys.tests.test_densearith.test_dmp_exquo_ground()
sympy.polys.tests.test_densearith.test_dmp_ff_div()
sympy.polys.tests.test_densearith.test_dmp_l1_norm()
sympy.polys.tests.test_densearith.test_dmp_l2_norm_squared()
sympy.polys.tests.test_densearith.test_dmp_max_norm()
sympy.polys.tests.test_densearith.test_dmp_mul()
sympy.polys.tests.test_densearith.test_dmp_mul_ground()
sympy.polys.tests.test_densearith.test_dmp_mul_term()
sympy.polys.tests.test_densearith.test_dmp_neg()
sympy.polys.tests.test_densearith.test_dmp_pdiv()
sympy.polys.tests.test_densearith.test_dmp_pow()
sympy.polys.tests.test_densearith.test_dmp_quo_ground()
sympy.polys.tests.test_densearith.test_dmp_rr_div()
sympy.polys.tests.test_densearith.test_dmp_sqr()
sympy.polys.tests.test_densearith.test_dmp_sub()
sympy.polys.tests.test_densearith.test_dmp_sub_ground()
sympy.polys.tests.test_densearith.test_dmp_sub_term()
sympy.polys.tests.test_densearith.test_dup_abs()
sympy.polys.tests.test_densearith.test_dup_add()
sympy.polys.tests.test_densearith.test_dup_add_ground()
sympy.polys.tests.test_densearith.test_dup_add_mul()
sympy.polys.tests.test_densearith.test_dup_add_term()
sympy.polys.tests.test_densearith.test_dup_div()
sympy.polys.tests.test_densearith.test_dup_expand()
sympy.polys.tests.test_densearith.test_dup_exquo_ground()
sympy.polys.tests.test_densearith.test_dup_ff_div()
sympy.polys.tests.test_densearith.test_dup_ff_div_gmpy2()
sympy.polys.tests.test_densearith.test_dup_l1_norm()
sympy.polys.tests.test_densearith.test_dup_l2_norm_squared()
sympy.polys.tests.test_densearith.test_dup_lshift()
sympy.polys.tests.test_densearith.test_dup_max_norm()
sympy.polys.tests.test_densearith.test_dup_mul()
sympy.polys.tests.test_densearith.test_dup_mul_ground()
sympy.polys.tests.test_densearith.test_dup_mul_term()
sympy.polys.tests.test_densearith.test_dup_neg()
sympy.polys.tests.test_densearith.test_dup_pdiv()
sympy.polys.tests.test_densearith.test_dup_pow()
sympy.polys.tests.test_densearith.test_dup_quo_ground()
sympy.polys.tests.test_densearith.test_dup_rr_div()
sympy.polys.tests.test_densearith.test_dup_rshift()
sympy.polys.tests.test_densearith.test_dup_sqr()
sympy.polys.tests.test_densearith.test_dup_sub()
sympy.polys.tests.test_densearith.test_dup_sub_ground()
sympy.polys.tests.test_densearith.test_dup_sub_mul()
sympy.polys.tests.test_densearith.test_dup_sub_term()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_multivariate_resultants.py----------------------------------------
A:sympy.polys.tests.test_multivariate_resultants.(c, d)->symbols('a, b')
A:sympy.polys.tests.test_multivariate_resultants.(x, y)->symbols('x, y')
A:sympy.polys.tests.test_multivariate_resultants.dixon->DixonResultant([p, q, h], [x, y])
A:sympy.polys.tests.test_multivariate_resultants.macaulay->MacaulayResultant(polynomials=[p, q], variables=[x, y])
A:sympy.polys.tests.test_multivariate_resultants.a->IndexedBase('alpha')
A:sympy.polys.tests.test_multivariate_resultants.dixon_polynomial->DixonResultant([p, q, h], [x, y]).get_dixon_polynomial()
A:sympy.polys.tests.test_multivariate_resultants.polynomial->DixonResultant([p, q, h], [x, y]).get_dixon_polynomial()
A:sympy.polys.tests.test_multivariate_resultants.(x, y, z)->symbols('x, y, z')
A:sympy.polys.tests.test_multivariate_resultants.example_two->DixonResultant([f, g, h], [y, z])
A:sympy.polys.tests.test_multivariate_resultants.poly->DixonResultant([f, g, h], [y, z]).get_dixon_polynomial()
A:sympy.polys.tests.test_multivariate_resultants.matrix->MacaulayResultant([f, g, h], [x, y, z]).get_matrix()
A:sympy.polys.tests.test_multivariate_resultants.(A, B, C)->symbols('A, B, C')
A:sympy.polys.tests.test_multivariate_resultants.m1->Matrix([[1, 2, 3], [0, 4, 5], [0, 0, 6]])
A:sympy.polys.tests.test_multivariate_resultants.m2->Matrix([[0, 0, 1], [2, 0, 3]])
A:sympy.polys.tests.test_multivariate_resultants.m3->Matrix([[0, 0, 0], [1, 2, 3], [0, 0, 0]])
A:sympy.polys.tests.test_multivariate_resultants.m4->Matrix([[0, 0, A], [1, 2, 3], [B, 0, 0]])
A:sympy.polys.tests.test_multivariate_resultants.m5->Matrix([[0, 0, 0, 1], [0, 0, 0, 2], [0, 0, 0, 3], [0, 0, 0, 4]])
A:sympy.polys.tests.test_multivariate_resultants.m6->Matrix([[0, 0, A], [B, 0, 0], [0, 0, C]])
A:sympy.polys.tests.test_multivariate_resultants.(A, B)->symbols('A, B')
A:sympy.polys.tests.test_multivariate_resultants.dixon_poly->DixonResultant([p, q, h], [x, y]).get_dixon_polynomial()
A:sympy.polys.tests.test_multivariate_resultants.dixon_matrix->DixonResultant([p, q, h], [x, y]).get_dixon_matrix(dixon_poly)
A:sympy.polys.tests.test_multivariate_resultants.D->factor(dixon.get_KSY_Dixon_resultant(dixon_matrix))
A:sympy.polys.tests.test_multivariate_resultants.(x, y, A)->symbols('x, y, A')
A:sympy.polys.tests.test_multivariate_resultants.(a_1_1, a_1_2, a_1_3)->symbols('a_1_1, a_1_2, a_1_3')
A:sympy.polys.tests.test_multivariate_resultants.(a_2_2, a_2_3, a_3_3)->symbols('a_2_2, a_2_3, a_3_3')
A:sympy.polys.tests.test_multivariate_resultants.(b_1_1, b_1_2, b_1_3)->symbols('b_1_1, b_1_2, b_1_3')
A:sympy.polys.tests.test_multivariate_resultants.(b_2_2, b_2_3, b_3_3)->symbols('b_2_2, b_2_3, b_3_3')
A:sympy.polys.tests.test_multivariate_resultants.(c_1, c_2, c_3)->symbols('c_1, c_2, c_3')
A:sympy.polys.tests.test_multivariate_resultants.mac->MacaulayResultant([f, g, h], [x, y, z])
A:sympy.polys.tests.test_multivariate_resultants.(a_0, a_1, a_2)->symbols('a_0, a_1, a_2')
A:sympy.polys.tests.test_multivariate_resultants.(b_0, b_1, b_2)->symbols('b_0, b_1, b_2')
A:sympy.polys.tests.test_multivariate_resultants.(c_0, c_1, c_2, c_3, c_4)->symbols('c_0, c_1, c_2, c_3, c_4')
sympy.polys.tests.test_multivariate_resultants.test_KSY_precondition()
sympy.polys.tests.test_multivariate_resultants.test_delete_zero_rows_and_columns()
sympy.polys.tests.test_multivariate_resultants.test_dixon_resultant_init()
sympy.polys.tests.test_multivariate_resultants.test_get_KSY_Dixon_resultant_example_one()
sympy.polys.tests.test_multivariate_resultants.test_get_KSY_Dixon_resultant_example_two()
sympy.polys.tests.test_multivariate_resultants.test_get_degree_m()
sympy.polys.tests.test_multivariate_resultants.test_get_dixon_matrix()
sympy.polys.tests.test_multivariate_resultants.test_get_dixon_matrix_example_two()
sympy.polys.tests.test_multivariate_resultants.test_get_dixon_polynomial_numerical()
sympy.polys.tests.test_multivariate_resultants.test_get_max_degrees()
sympy.polys.tests.test_multivariate_resultants.test_get_size()
sympy.polys.tests.test_multivariate_resultants.test_macaulay_example_one()
sympy.polys.tests.test_multivariate_resultants.test_macaulay_example_two()
sympy.polys.tests.test_multivariate_resultants.test_macaulay_resultant_init()
sympy.polys.tests.test_multivariate_resultants.test_product_leading_entries()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_euclidtools.py----------------------------------------
A:sympy.polys.tests.test_euclidtools.(f_0, f_1, f_2, f_3, f_4, f_5, f_6)->f_polys()
A:sympy.polys.tests.test_euclidtools.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_euclidtools.(s, t, h)->R.dup_gcdex(f, g)
A:sympy.polys.tests.test_euclidtools.(S, T, H)->R.dup_gcdex(g, f)
A:sympy.polys.tests.test_euclidtools.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_euclidtools.r->R.dmp_LC(b)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, u, v)->ring('x,y,z,u,v', ZZ)
A:sympy.polys.tests.test_euclidtools.(Rt, t)->ring('t', ZZ)
A:sympy.polys.tests.test_euclidtools.(Rx, x)->ring('x', Rt)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, u)->ring('x,y,z,u', ZZ)
A:sympy.polys.tests.test_euclidtools.(f, g, h)->map(R.from_dense, dmp_fateman_poly_F_3(4, ZZ))
A:sympy.polys.tests.test_euclidtools.(H, cff, cfg)->R.dmp_inner_gcd(f, g)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, u, v, a, b)->ring('x,y,z,u,v,a,b', ZZ)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, u, v, a, b, c, d)->ring('x,y,z,u,v,a,b,c,d', ZZ)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.tests.test_euclidtools.(cont, f)->R.dmp_primitive(f_6)
sympy.polys.tests.test_euclidtools.test_dmp_cancel()
sympy.polys.tests.test_euclidtools.test_dmp_content()
sympy.polys.tests.test_euclidtools.test_dmp_discriminant()
sympy.polys.tests.test_euclidtools.test_dmp_gcd()
sympy.polys.tests.test_euclidtools.test_dmp_lcm()
sympy.polys.tests.test_euclidtools.test_dmp_primitive()
sympy.polys.tests.test_euclidtools.test_dmp_subresultants()
sympy.polys.tests.test_euclidtools.test_dup_cancel()
sympy.polys.tests.test_euclidtools.test_dup_discriminant()
sympy.polys.tests.test_euclidtools.test_dup_euclidean_prs()
sympy.polys.tests.test_euclidtools.test_dup_gcd()
sympy.polys.tests.test_euclidtools.test_dup_gcdex()
sympy.polys.tests.test_euclidtools.test_dup_invert()
sympy.polys.tests.test_euclidtools.test_dup_lcm()
sympy.polys.tests.test_euclidtools.test_dup_primitive_prs()
sympy.polys.tests.test_euclidtools.test_dup_subresultants()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_solvers.py----------------------------------------
A:sympy.polys.tests.test_solvers.(domain, x1, x2)->ring('x1,x2', QQ)
A:sympy.polys.tests.test_solvers._sol->solve_lin_sys(eqs, domain)
A:sympy.polys.tests.test_solvers.(domain, x1, x2, x3)->ring('x1,x2,x3', QQ)
A:sympy.polys.tests.test_solvers.(domain, x1, x2, x3, x4)->ring('x1,x2,x3,x4', QQ)
A:sympy.polys.tests.test_solvers.(domain, x1, x2, x3, x4, x5, x6, x7)->ring('x1,x2,x3,x4,x5,x6,x7', QQ)
A:sympy.polys.tests.test_solvers.(domain, x1, x2, x3, x4, x5)->ring('x1,x2,x3,x4,x5', QQ)
A:sympy.polys.tests.test_solvers.(ground, d, r, e, g, i, j, l, o, m, p, q)->field('d,r,e,g,i,j,l,o,m,p,q', ZZ)
A:sympy.polys.tests.test_solvers.(domain, c, f, h, k, n, b)->ring('c,f,h,k,n,b', ground)
A:sympy.polys.tests.test_solvers.M->eqs_to_matrix(eqs_coeff, eqs_rhs, [x1, x2], QQ)
sympy.polys.tests.test_solvers.test_eqs_to_matrix()
sympy.polys.tests.test_solvers.test_solve_lin_sys_2x2_one()
sympy.polys.tests.test_solvers.test_solve_lin_sys_2x4_none()
sympy.polys.tests.test_solvers.test_solve_lin_sys_3x3_inf()
sympy.polys.tests.test_solvers.test_solve_lin_sys_3x4_none()
sympy.polys.tests.test_solvers.test_solve_lin_sys_3x4_one()
sympy.polys.tests.test_solvers.test_solve_lin_sys_4x7_inf()
sympy.polys.tests.test_solvers.test_solve_lin_sys_5x5_inf()
sympy.polys.tests.test_solvers.test_solve_lin_sys_6x6_1()
sympy.polys.tests.test_solvers.test_solve_lin_sys_6x6_2()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_rootoftools.py----------------------------------------
A:sympy.polys.tests.test_rootoftools.r->rootof(x ** 5 - x + 1, 0)
A:sympy.polys.tests.test_rootoftools.f->Poly(7 * x ** 8 - 10)
A:sympy.polys.tests.test_rootoftools.r1->RootSum(x ** 4 - b, h, x)
A:sympy.polys.tests.test_rootoftools.sol->solve(eq)
A:sympy.polys.tests.test_rootoftools.real->rootof(x ** 3 + x + 3, 0).evalf(n=20)
A:sympy.polys.tests.test_rootoftools.(re, im)->rootof(x ** 5 - 5 * x + 12, 4).evalf(n=20).as_real_imag()
A:sympy.polys.tests.test_rootoftools.p->Integral(x, (x, 1, y))
A:sympy.polys.tests.test_rootoftools.re->rootof(x ** 5 - 5 * x + 12, 0).evalf(n=20)
A:sympy.polys.tests.test_rootoftools.(a, b)->rootof(eq, 1).n(2).as_real_imag()
A:sympy.polys.tests.test_rootoftools.(c, d)->rootof(eq, 2).n(2).as_real_imag()
A:sympy.polys.tests.test_rootoftools.r0->RootSum(x ** 3 - a, h, x)
A:sympy.polys.tests.test_rootoftools.c->CRootOf(90720 * x ** 6 - 4032 * x ** 4 + 84 * x ** 2 - 1, 0)
A:sympy.polys.tests.test_rootoftools.i->rootof(x ** 5 - x + 1, 0)._get_interval()
A:sympy.polys.tests.test_rootoftools.a->rootof(x ** 5 - x + 1, 0)._get_interval()
A:sympy.polys.tests.test_rootoftools.b->rootof(x ** 5 - x + 1, 0)._get_interval()
A:sympy.polys.tests.test_rootoftools.g->Lambda(x, 5 * tan(x) + 7)
A:sympy.polys.tests.test_rootoftools.s->RootSum(f, g)
A:sympy.polys.tests.test_rootoftools.rs->RootSum(x ** 2 + a, exp, x)
A:sympy.polys.tests.test_rootoftools.h->Lambda(x, tan(x))
A:sympy.polys.tests.test_rootoftools.G->Lambda(r, exp(r * y))
A:sympy.polys.tests.test_rootoftools.l1->Poly(x ** 6 - x + 1, x).all_roots()
A:sympy.polys.tests.test_rootoftools.ir->rootof(eq, 0)._get_interval()
A:sympy.polys.tests.test_rootoftools.ii->rootof(eq, 1)._get_interval()
sympy.polys.tests.test_rootoftools.test_CRootOf___eq__()
sympy.polys.tests.test_rootoftools.test_CRootOf___eval_Eq__()
sympy.polys.tests.test_rootoftools.test_CRootOf___new__()
sympy.polys.tests.test_rootoftools.test_CRootOf_all_roots()
sympy.polys.tests.test_rootoftools.test_CRootOf_attributes()
sympy.polys.tests.test_rootoftools.test_CRootOf_diff()
sympy.polys.tests.test_rootoftools.test_CRootOf_eval_rational()
sympy.polys.tests.test_rootoftools.test_CRootOf_evalf()
sympy.polys.tests.test_rootoftools.test_CRootOf_evalf_caching_bug()
sympy.polys.tests.test_rootoftools.test_CRootOf_is_complex()
sympy.polys.tests.test_rootoftools.test_CRootOf_is_real()
sympy.polys.tests.test_rootoftools.test_CRootOf_lazy()
sympy.polys.tests.test_rootoftools.test_CRootOf_real_roots()
sympy.polys.tests.test_rootoftools.test_CRootOf_subs()
sympy.polys.tests.test_rootoftools.test_RootOf_is_imaginary()
sympy.polys.tests.test_rootoftools.test_RootSum___eq__()
sympy.polys.tests.test_rootoftools.test_RootSum___new__()
sympy.polys.tests.test_rootoftools.test_RootSum_diff()
sympy.polys.tests.test_rootoftools.test_RootSum_doit()
sympy.polys.tests.test_rootoftools.test_RootSum_evalf()
sympy.polys.tests.test_rootoftools.test_RootSum_free_symbols()
sympy.polys.tests.test_rootoftools.test_RootSum_independent()
sympy.polys.tests.test_rootoftools.test_RootSum_rational()
sympy.polys.tests.test_rootoftools.test_RootSum_subs()
sympy.polys.tests.test_rootoftools.test__imag_count()
sympy.polys.tests.test_rootoftools.test_eval_approx_relative()
sympy.polys.tests.test_rootoftools.test_is_disjoint()
sympy.polys.tests.test_rootoftools.test_issue_15920()
sympy.polys.tests.test_rootoftools.test_issue_19113()
sympy.polys.tests.test_rootoftools.test_issue_7876()
sympy.polys.tests.test_rootoftools.test_issue_8316()
sympy.polys.tests.test_rootoftools.test_pure_key_dict()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_densebasic.py----------------------------------------
A:sympy.polys.tests.test_densebasic.g->dmp_normal([[1, 0, 0, 0, 0], [1, 0, 0], [1]], 1, ZZ)
A:sympy.polys.tests.test_densebasic.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_densebasic.K->R.to_domain()
A:sympy.polys.tests.test_densebasic.f->dup_random(3, -40, 40, ZZ)
sympy.polys.tests.test_densebasic.test_dmp_LC()
sympy.polys.tests.test_densebasic.test_dmp_TC()
sympy.polys.tests.test_densebasic.test_dmp_apply_pairs()
sympy.polys.tests.test_densebasic.test_dmp_convert()
sympy.polys.tests.test_densebasic.test_dmp_copy()
sympy.polys.tests.test_densebasic.test_dmp_deflate()
sympy.polys.tests.test_densebasic.test_dmp_degree()
sympy.polys.tests.test_densebasic.test_dmp_degree_in()
sympy.polys.tests.test_densebasic.test_dmp_degree_list()
sympy.polys.tests.test_densebasic.test_dmp_eject()
sympy.polys.tests.test_densebasic.test_dmp_exclude()
sympy.polys.tests.test_densebasic.test_dmp_from_sympy()
sympy.polys.tests.test_densebasic.test_dmp_from_to_dict()
sympy.polys.tests.test_densebasic.test_dmp_ground()
sympy.polys.tests.test_densebasic.test_dmp_ground_LC()
sympy.polys.tests.test_densebasic.test_dmp_ground_TC()
sympy.polys.tests.test_densebasic.test_dmp_ground_nth()
sympy.polys.tests.test_densebasic.test_dmp_ground_p()
sympy.polys.tests.test_densebasic.test_dmp_grounds()
sympy.polys.tests.test_densebasic.test_dmp_include()
sympy.polys.tests.test_densebasic.test_dmp_inflate()
sympy.polys.tests.test_densebasic.test_dmp_inject()
sympy.polys.tests.test_densebasic.test_dmp_list_terms()
sympy.polys.tests.test_densebasic.test_dmp_multi_deflate()
sympy.polys.tests.test_densebasic.test_dmp_negative_p()
sympy.polys.tests.test_densebasic.test_dmp_nest()
sympy.polys.tests.test_densebasic.test_dmp_normal()
sympy.polys.tests.test_densebasic.test_dmp_nth()
sympy.polys.tests.test_densebasic.test_dmp_one()
sympy.polys.tests.test_densebasic.test_dmp_one_p()
sympy.polys.tests.test_densebasic.test_dmp_permute()
sympy.polys.tests.test_densebasic.test_dmp_positive_p()
sympy.polys.tests.test_densebasic.test_dmp_raise()
sympy.polys.tests.test_densebasic.test_dmp_strip()
sympy.polys.tests.test_densebasic.test_dmp_swap()
sympy.polys.tests.test_densebasic.test_dmp_terms_gcd()
sympy.polys.tests.test_densebasic.test_dmp_true_LT()
sympy.polys.tests.test_densebasic.test_dmp_validate()
sympy.polys.tests.test_densebasic.test_dmp_zero()
sympy.polys.tests.test_densebasic.test_dmp_zero_p()
sympy.polys.tests.test_densebasic.test_dmp_zeros()
sympy.polys.tests.test_densebasic.test_dup_LC()
sympy.polys.tests.test_densebasic.test_dup_TC()
sympy.polys.tests.test_densebasic.test_dup_convert()
sympy.polys.tests.test_densebasic.test_dup_copy()
sympy.polys.tests.test_densebasic.test_dup_deflate()
sympy.polys.tests.test_densebasic.test_dup_degree()
sympy.polys.tests.test_densebasic.test_dup_from_sympy()
sympy.polys.tests.test_densebasic.test_dup_from_to_dict()
sympy.polys.tests.test_densebasic.test_dup_inflate()
sympy.polys.tests.test_densebasic.test_dup_multi_deflate()
sympy.polys.tests.test_densebasic.test_dup_normal()
sympy.polys.tests.test_densebasic.test_dup_nth()
sympy.polys.tests.test_densebasic.test_dup_random()
sympy.polys.tests.test_densebasic.test_dup_reverse()
sympy.polys.tests.test_densebasic.test_dup_slice()
sympy.polys.tests.test_densebasic.test_dup_strip()
sympy.polys.tests.test_densebasic.test_dup_terms_gcd()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_rootisolation.py----------------------------------------
A:sympy.polys.tests.test_rootisolation.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_rootisolation.((u, v), B, C, (s, t))->R.dup_isolate_real_roots_sqf(f, fast=True)
A:sympy.polys.tests.test_rootisolation.g->R.dup_sqf_part(f)
sympy.polys.tests.test_rootisolation.test_dup_cauchy_lower_bound()
sympy.polys.tests.test_rootisolation.test_dup_cauchy_upper_bound()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_1()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_2()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_3()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_4()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_5()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_6()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_7()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_8()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_exclude()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_implicit()
sympy.polys.tests.test_rootisolation.test_dup_count_real_roots()
sympy.polys.tests.test_rootisolation.test_dup_isolate_all_roots()
sympy.polys.tests.test_rootisolation.test_dup_isolate_all_roots_sqf()
sympy.polys.tests.test_rootisolation.test_dup_isolate_complex_roots_sqf()
sympy.polys.tests.test_rootisolation.test_dup_isolate_real_roots()
sympy.polys.tests.test_rootisolation.test_dup_isolate_real_roots_list()
sympy.polys.tests.test_rootisolation.test_dup_isolate_real_roots_list_QQ()
sympy.polys.tests.test_rootisolation.test_dup_isolate_real_roots_sqf()
sympy.polys.tests.test_rootisolation.test_dup_mignotte_sep_bound_squared()
sympy.polys.tests.test_rootisolation.test_dup_refine_real_root()
sympy.polys.tests.test_rootisolation.test_dup_sturm()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_subresultants_qq_zz.py----------------------------------------
A:sympy.polys.tests.test_subresultants_qq_zz.x->var('x')
A:sympy.polys.tests.test_subresultants_qq_zz.y->var('y')
sympy.polys.tests.test_subresultants_qq_zz.test_bezout()
sympy.polys.tests.test_subresultants_qq_zz.test_euclid_amv()
sympy.polys.tests.test_subresultants_qq_zz.test_euclid_pg()
sympy.polys.tests.test_subresultants_qq_zz.test_euclid_q()
sympy.polys.tests.test_subresultants_qq_zz.test_modified_subresultants_amv()
sympy.polys.tests.test_subresultants_qq_zz.test_modified_subresultants_bezout()
sympy.polys.tests.test_subresultants_qq_zz.test_modified_subresultants_pg()
sympy.polys.tests.test_subresultants_qq_zz.test_modified_subresultants_sylv()
sympy.polys.tests.test_subresultants_qq_zz.test_quo_z()
sympy.polys.tests.test_subresultants_qq_zz.test_rem_z()
sympy.polys.tests.test_subresultants_qq_zz.test_res()
sympy.polys.tests.test_subresultants_qq_zz.test_res_q()
sympy.polys.tests.test_subresultants_qq_zz.test_res_z()
sympy.polys.tests.test_subresultants_qq_zz.test_sturm_amv()
sympy.polys.tests.test_subresultants_qq_zz.test_sturm_pg()
sympy.polys.tests.test_subresultants_qq_zz.test_sturm_q()
sympy.polys.tests.test_subresultants_qq_zz.test_subresultants_amv()
sympy.polys.tests.test_subresultants_qq_zz.test_subresultants_amv_q()
sympy.polys.tests.test_subresultants_qq_zz.test_subresultants_bezout()
sympy.polys.tests.test_subresultants_qq_zz.test_subresultants_pg()
sympy.polys.tests.test_subresultants_qq_zz.test_subresultants_rem()
sympy.polys.tests.test_subresultants_qq_zz.test_subresultants_sylv()
sympy.polys.tests.test_subresultants_qq_zz.test_subresultants_vv()
sympy.polys.tests.test_subresultants_qq_zz.test_subresultants_vv_2()
sympy.polys.tests.test_subresultants_qq_zz.test_sylvester()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_galoistools.py----------------------------------------
A:sympy.polys.tests.test_galoistools.f->sympy.polys.domains.ZZ.map([1, 2, 5, 26, 41, 39, 38])
A:sympy.polys.tests.test_galoistools.g->sympy.polys.domains.ZZ.map([[1, 0, 0, 1, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 1, 1]])
A:sympy.polys.tests.test_galoistools.h->gf_frobenius_map(f, g, b, p, ZZ)
A:sympy.polys.tests.test_galoistools.c->sympy.polys.domains.ZZ.map([1, 0])
A:sympy.polys.tests.test_galoistools.b->gf_frobenius_monomial_base(g, p, ZZ)
A:sympy.polys.tests.test_galoistools.h1->gf_pow_mod(f, p, g, p, ZZ)
A:sympy.polys.tests.test_galoistools.Q->sympy.polys.domains.ZZ.map([[1, 0, 0, 0, 0, 0, 0, 0], [2, 1, 7, 11, 10, 12, 5, 11], [3, 6, 4, 3, 0, 4, 7, 2], [4, 3, 6, 5, 1, 6, 2, 3], [2, 11, 8, 8, 3, 1, 3, 11], [6, 11, 8, 6, 2, 7, 10, 9], [5, 11, 7, 10, 0, 11, 7, 12], [3, 3, 12, 5, 0, 11, 9, 12]])
A:sympy.polys.tests.test_galoistools.p->ZZ(nextprime(int((2 ** 4 * pi).evalf())))
sympy.polys.tests.test_galoistools.test_gf_LC()
sympy.polys.tests.test_galoistools.test_gf_TC()
sympy.polys.tests.test_galoistools.test_gf_arith()
sympy.polys.tests.test_galoistools.test_gf_berlekamp()
sympy.polys.tests.test_galoistools.test_gf_cofactors()
sympy.polys.tests.test_galoistools.test_gf_compose()
sympy.polys.tests.test_galoistools.test_gf_crt()
sympy.polys.tests.test_galoistools.test_gf_csolve()
sympy.polys.tests.test_galoistools.test_gf_ddf()
sympy.polys.tests.test_galoistools.test_gf_degree()
sympy.polys.tests.test_galoistools.test_gf_diff()
sympy.polys.tests.test_galoistools.test_gf_division()
sympy.polys.tests.test_galoistools.test_gf_edf()
sympy.polys.tests.test_galoistools.test_gf_eval()
sympy.polys.tests.test_galoistools.test_gf_expand()
sympy.polys.tests.test_galoistools.test_gf_factor()
sympy.polys.tests.test_galoistools.test_gf_frobenius_map()
sympy.polys.tests.test_galoistools.test_gf_from_to_dict()
sympy.polys.tests.test_galoistools.test_gf_from_to_int_poly()
sympy.polys.tests.test_galoistools.test_gf_gcd()
sympy.polys.tests.test_galoistools.test_gf_gcdex()
sympy.polys.tests.test_galoistools.test_gf_int()
sympy.polys.tests.test_galoistools.test_gf_irreducible()
sympy.polys.tests.test_galoistools.test_gf_irreducible_p()
sympy.polys.tests.test_galoistools.test_gf_lcm()
sympy.polys.tests.test_galoistools.test_gf_monic()
sympy.polys.tests.test_galoistools.test_gf_normal()
sympy.polys.tests.test_galoistools.test_gf_powering()
sympy.polys.tests.test_galoistools.test_gf_shift()
sympy.polys.tests.test_galoistools.test_gf_squarefree()
sympy.polys.tests.test_galoistools.test_gf_strip()
sympy.polys.tests.test_galoistools.test_gf_trace_map()
sympy.polys.tests.test_galoistools.test_gf_trunc()
sympy.polys.tests.test_galoistools.test_issue_23174()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_ring_series.py----------------------------------------
A:sympy.polys.tests.test_ring_series.(R, x)->ring('x', QQ)
A:sympy.polys.tests.test_ring_series.(R, x, y)->ring('x, y', QQ)
A:sympy.polys.tests.test_ring_series.(R, x, y, t)->ring('x, y, t', QQ)
A:sympy.polys.tests.test_ring_series.p1->rs_exp(p, x, prec)
A:sympy.polys.tests.test_ring_series.p->tan(sin(a ** 2 + 4) + b + c)
A:sympy.polys.tests.test_ring_series.(R1, z)->ring('z', QQ)
A:sympy.polys.tests.test_ring_series.p2->rs_series_inversion(p, x, 9)
A:sympy.polys.tests.test_ring_series.(R, x, y, z)->ring('x, y, z', QQ)
A:sympy.polys.tests.test_ring_series.r->rs_series(cos(p), a, 2)
A:sympy.polys.tests.test_ring_series.pc->R.from_list(list(reversed(c)))
A:sympy.polys.tests.test_ring_series.r1->rs_trunc(pc.compose(x, p), x, 5)
A:sympy.polys.tests.test_ring_series.p3->rs_log(p2, x, 9)
A:sympy.polys.tests.test_ring_series.a->symbols('a')
A:sympy.polys.tests.test_ring_series.q1->rs_log(p1, x, h)
A:sympy.polys.tests.test_ring_series.(cos, sin)->rs_cos_sin(x + x * y, x, 5)
A:sympy.polys.tests.test_ring_series.q->((2 + a) ** QQ(1, 5)).series(a, 0, 5).removeO()
A:sympy.polys.tests.test_ring_series.K->sympy.polys.domains.QQ.algebraic_field(sqrt(2))
A:sympy.polys.tests.test_ring_series.sqrt2->sympy.polys.domains.QQ.algebraic_field(sqrt(2)).from_sympy(sqrt(2))
A:sympy.polys.tests.test_ring_series.(x, y)->symbols('x, y')
A:sympy.polys.tests.test_ring_series.(R, xr, yr)->ring([x, y], K)
A:sympy.polys.tests.test_ring_series.(R, y)->ring('y', QQ)
A:sympy.polys.tests.test_ring_series.(S, x)->ring('x', R)
A:sympy.polys.tests.test_ring_series.(x, a, b, c)->symbols('x, a, b, c')
sympy.polys.tests.test_ring_series.is_close(a,b)
sympy.polys.tests.test_ring_series.test1()
sympy.polys.tests.test_ring_series.test_RR()
sympy.polys.tests.test_ring_series.test_asin()
sympy.polys.tests.test_ring_series.test_atan()
sympy.polys.tests.test_ring_series.test_atanh()
sympy.polys.tests.test_ring_series.test_compose_add()
sympy.polys.tests.test_ring_series.test_cos()
sympy.polys.tests.test_ring_series.test_cos_sin()
sympy.polys.tests.test_ring_series.test_cosh()
sympy.polys.tests.test_ring_series.test_cot()
sympy.polys.tests.test_ring_series.test_exp()
sympy.polys.tests.test_ring_series.test_fun()
sympy.polys.tests.test_ring_series.test_has_constant_term()
sympy.polys.tests.test_ring_series.test_inversion()
sympy.polys.tests.test_ring_series.test_is_regular()
sympy.polys.tests.test_ring_series.test_log()
sympy.polys.tests.test_ring_series.test_mul_trunc()
sympy.polys.tests.test_ring_series.test_newton()
sympy.polys.tests.test_ring_series.test_nth_root()
sympy.polys.tests.test_ring_series.test_pow_trunc()
sympy.polys.tests.test_ring_series.test_puiseux()
sympy.polys.tests.test_ring_series.test_puiseux2()
sympy.polys.tests.test_ring_series.test_puiseux_algebraic()
sympy.polys.tests.test_ring_series.test_ring_series1()
sympy.polys.tests.test_ring_series.test_rs_series()
sympy.polys.tests.test_ring_series.test_series_from_list()
sympy.polys.tests.test_ring_series.test_series_reversion()
sympy.polys.tests.test_ring_series.test_sin()
sympy.polys.tests.test_ring_series.test_sinh()
sympy.polys.tests.test_ring_series.test_square_trunc()
sympy.polys.tests.test_ring_series.test_tan()
sympy.polys.tests.test_ring_series.test_tanh()
sympy.polys.tests.test_ring_series.test_trunc()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_polyclasses.py----------------------------------------
A:sympy.polys.tests.test_polyclasses.f->ANP([1, 0.5], mod, QQ)
A:sympy.polys.tests.test_polyclasses.g->DMF(([[1]], [[1, 0]]), ZZ)
A:sympy.polys.tests.test_polyclasses.h->DMF(([[1, 0]], [[1]]), ZZ)
A:sympy.polys.tests.test_polyclasses.q->DMP([[1], [1, 0]], ZZ)
A:sympy.polys.tests.test_polyclasses.r->DMP([675, 675, 225, 25], ZZ)
A:sympy.polys.tests.test_polyclasses.u->DMP([[QQ(45), QQ(30), QQ(5)]], QQ)
A:sympy.polys.tests.test_polyclasses.v->DMP([[QQ(1), QQ(2, 3), QQ(1, 9)]], QQ)
A:sympy.polys.tests.test_polyclasses.s->DMP([QQ(1, 32), QQ(0)], QQ)
A:sympy.polys.tests.test_polyclasses.t->DMP([QQ(-1, 16)], QQ)
A:sympy.polys.tests.test_polyclasses.a->ANP([QQ(1)], mod, QQ)
A:sympy.polys.tests.test_polyclasses.b->ANP([ZZ(1)], mod, ZZ)
A:sympy.polys.tests.test_polyclasses.c->ANP([], [1, 0, 0, -2], QQ)
A:sympy.polys.tests.test_polyclasses.r1->ANP([QQ(1)], mod, QQ).rem(b)
A:sympy.polys.tests.test_polyclasses.(q, r2)->ANP([QQ(1)], mod, QQ).div(b)
sympy.polys.tests.test_polyclasses.test_ANP___bool__()
sympy.polys.tests.test_polyclasses.test_ANP___eq__()
sympy.polys.tests.test_polyclasses.test_ANP___init__()
sympy.polys.tests.test_polyclasses.test_ANP_arithmetics()
sympy.polys.tests.test_polyclasses.test_ANP_properties()
sympy.polys.tests.test_polyclasses.test_ANP_unify()
sympy.polys.tests.test_polyclasses.test_DMF__bool__()
sympy.polys.tests.test_polyclasses.test_DMF__init__()
sympy.polys.tests.test_polyclasses.test_DMF_arithmetics()
sympy.polys.tests.test_polyclasses.test_DMF_properties()
sympy.polys.tests.test_polyclasses.test_DMP___bool__()
sympy.polys.tests.test_polyclasses.test_DMP___eq__()
sympy.polys.tests.test_polyclasses.test_DMP___init__()
sympy.polys.tests.test_polyclasses.test_DMP_arithmetics()
sympy.polys.tests.test_polyclasses.test_DMP_exclude()
sympy.polys.tests.test_polyclasses.test_DMP_functionality()
sympy.polys.tests.test_polyclasses.test_DMP_properties()
sympy.polys.tests.test_polyclasses.test_DMP_to_dict()
sympy.polys.tests.test_polyclasses.test___hash__()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_factortools.py----------------------------------------
A:sympy.polys.tests.test_factortools.(f_0, f_1, f_2, f_3, f_4, f_5, f_6)->f_polys()
A:sympy.polys.tests.test_factortools.(w_1, w_2)->w_polys()
A:sympy.polys.tests.test_factortools.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_factortools.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_factortools.(G, H, S, T)->R.dup_zz_hensel_step(5, f, g, h, s, t)
A:sympy.polys.tests.test_factortools.F_0->R.dup_zz_factor(f)
A:sympy.polys.tests.test_factortools.F_1->R.dup_zz_factor(f)
A:sympy.polys.tests.test_factortools.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_factortools.(UV, _x)->ring('x', ZZ)
A:sympy.polys.tests.test_factortools.p->ZZ(nextprime(R.dmp_zz_mignotte_bound(w_1)))
A:sympy.polys.tests.test_factortools.T->zip([t.drop(x) for t in T], K)
A:sympy.polys.tests.test_factortools.S->R.dmp_eval_tail(w_1, A)
A:sympy.polys.tests.test_factortools.(cs, s)->UV.dup_primitive(S)
A:sympy.polys.tests.test_factortools.(_, H)->UV.dup_zz_factor_sqf(s)
A:sympy.polys.tests.test_factortools.factors->R.dmp_zz_wang_hensel_lifting(w_1, H, LC, A, p)
A:sympy.polys.tests.test_factortools.(R, x, y, z, u)->ring('x,y,z,u', ZZ)
A:sympy.polys.tests.test_factortools.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.tests.test_factortools.i->ZZ_I(0, 1)
A:sympy.polys.tests.test_factortools.(coeff, factors)->R.dmp_factor_list(f)
A:sympy.polys.tests.test_factortools.(Rt, t)->ring('t', QQ)
A:sympy.polys.tests.test_factortools.(R, X)->xring('x:200', ZZ)
sympy.polys.tests.test_factortools.test_dmp_ext_factor()
sympy.polys.tests.test_factortools.test_dmp_factor_list()
sympy.polys.tests.test_factortools.test_dmp_irreducible_p()
sympy.polys.tests.test_factortools.test_dmp_qq_i_factor()
sympy.polys.tests.test_factortools.test_dmp_trial_division()
sympy.polys.tests.test_factortools.test_dmp_zz_factor()
sympy.polys.tests.test_factortools.test_dmp_zz_i_factor()
sympy.polys.tests.test_factortools.test_dmp_zz_mignotte_bound()
sympy.polys.tests.test_factortools.test_dmp_zz_wang()
sympy.polys.tests.test_factortools.test_dmp_zz_wang_fail()
sympy.polys.tests.test_factortools.test_dup_cyclotomic_p()
sympy.polys.tests.test_factortools.test_dup_ext_factor()
sympy.polys.tests.test_factortools.test_dup_factor_list()
sympy.polys.tests.test_factortools.test_dup_irreducible_p()
sympy.polys.tests.test_factortools.test_dup_qq_i_factor()
sympy.polys.tests.test_factortools.test_dup_trial_division()
sympy.polys.tests.test_factortools.test_dup_zz_cyclotomic_factor()
sympy.polys.tests.test_factortools.test_dup_zz_cyclotomic_poly()
sympy.polys.tests.test_factortools.test_dup_zz_factor()
sympy.polys.tests.test_factortools.test_dup_zz_hensel_lift()
sympy.polys.tests.test_factortools.test_dup_zz_hensel_step()
sympy.polys.tests.test_factortools.test_dup_zz_i_factor()
sympy.polys.tests.test_factortools.test_dup_zz_irreducible_p()
sympy.polys.tests.test_factortools.test_dup_zz_mignotte_bound()
sympy.polys.tests.test_factortools.test_issue_6355()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_polyroots.py----------------------------------------
A:sympy.polys.tests.test_polyroots.(a, b, c, d, e, q, t, x, y, z)->symbols('a,b,c,d,e,q,t,x,y,z')
A:sympy.polys.tests.test_polyroots.nreal->sum([1 if i.is_real else 0 for i in roots])
A:sympy.polys.tests.test_polyroots.f->(x ** 2 + 2 * x + 3).subs(x, 2 * x ** 2 + 3 * x).subs(x, 5 * x - 4)
A:sympy.polys.tests.test_polyroots.r->roots(x ** 3 + 40 * x + 64)
A:sympy.polys.tests.test_polyroots.roots->Poly(x ** 5 + 3 * x + 1, x).nroots(n=5)
A:sympy.polys.tests.test_polyroots.eq->Poly(x ** 3 - 2 * x ** 2 + 6 * sqrt(2) * x ** 2 - 8 * sqrt(2) * x + 23 * x - 14 + 14 * sqrt(2), x, domain='EX')
A:sympy.polys.tests.test_polyroots.p->Poly(x ** 5 + 3 * x + 1, x)
A:sympy.polys.tests.test_polyroots.roots_d->roots(eq)
A:sympy.polys.tests.test_polyroots.roots_eq->roots(eq)
A:sympy.polys.tests.test_polyroots.sol->roots_quartic(Poly(eq.subs(rep), x))
A:sympy.polys.tests.test_polyroots.lhs->roots_quartic(Poly(x ** 4 + x, x))
A:sympy.polys.tests.test_polyroots.ans->roots_binomial(p)
A:sympy.polys.tests.test_polyroots.z->symbols('z', negative=True)
A:sympy.polys.tests.test_polyroots.zans->roots_quartic(Poly(eq, x))
A:sympy.polys.tests.test_polyroots.a1->Symbol('a1', nonnegative=True)
A:sympy.polys.tests.test_polyroots.b1->Symbol('b1', nonnegative=True)
A:sympy.polys.tests.test_polyroots.r0->roots_quadratic(Poly(a1 * x ** 2 + b1, x))
A:sympy.polys.tests.test_polyroots.r1->roots_binomial(Poly(a1 * x ** 2 + b1, x))
A:sympy.polys.tests.test_polyroots.(coeff, poly)->preprocess_roots(Poly(f, x))
A:sympy.polys.tests.test_polyroots.(E, F, J, L)->symbols('E,F,J,L')
A:sympy.polys.tests.test_polyroots.g->((x ** 2 + 1) * f ** 2).expand()
A:sympy.polys.tests.test_polyroots.s2->sqrt(2)
A:sympy.polys.tests.test_polyroots.(ar, br)->symbols('a, b', real=True)
A:sympy.polys.tests.test_polyroots.(a, b, c, d, x)->symbols('a,b,c,d,x')
A:sympy.polys.tests.test_polyroots.(zz, yy, xx, zy, zx, yx, k)->symbols('zz,yy,xx,zy,zx,yx,k')
A:sympy.polys.tests.test_polyroots.R->list(roots(f).keys())
A:sympy.polys.tests.test_polyroots.R1->roots(f.evalf(), x, multiple=True)
A:sympy.polys.tests.test_polyroots.R2->roots(x ** 2 + x + 1.0, x, multiple=True)
A:sympy.polys.tests.test_polyroots.w->Wild('w')
A:sympy.polys.tests.test_polyroots.match->roots_binomial(Poly(a1 * x ** 2 + b1, x)).match(p)
A:sympy.polys.tests.test_polyroots.(_re, _im)->intervals(f, all=True)
A:sympy.polys.tests.test_polyroots._nroots->sorted(_nroots, key=lambda x: x.sort_key())
A:sympy.polys.tests.test_polyroots._sroots->sorted(_sroots, key=lambda x: x.sort_key())
A:sympy.polys.tests.test_polyroots.e->Rational(1, 3)
sympy.polys.tests.test_polyroots._check(roots)
sympy.polys.tests.test_polyroots.test_issue_13340()
sympy.polys.tests.test_polyroots.test_issue_14291()
sympy.polys.tests.test_polyroots.test_issue_14522()
sympy.polys.tests.test_polyroots.test_issue_15076()
sympy.polys.tests.test_polyroots.test_issue_16589()
sympy.polys.tests.test_polyroots.test_issue_17454()
sympy.polys.tests.test_polyroots.test_issue_19113()
sympy.polys.tests.test_polyroots.test_issue_20913()
sympy.polys.tests.test_polyroots.test_issue_21287()
sympy.polys.tests.test_polyroots.test_issue_22768()
sympy.polys.tests.test_polyroots.test_issue_7724()
sympy.polys.tests.test_polyroots.test_issue_8285()
sympy.polys.tests.test_polyroots.test_issue_8289()
sympy.polys.tests.test_polyroots.test_issue_8438()
sympy.polys.tests.test_polyroots.test_nroots1()
sympy.polys.tests.test_polyroots.test_nroots2()
sympy.polys.tests.test_polyroots.test_root_factors()
sympy.polys.tests.test_polyroots.test_roots0()
sympy.polys.tests.test_polyroots.test_roots_binomial()
sympy.polys.tests.test_polyroots.test_roots_composite()
sympy.polys.tests.test_polyroots.test_roots_cubic()
sympy.polys.tests.test_polyroots.test_roots_cyclotomic()
sympy.polys.tests.test_polyroots.test_roots_inexact()
sympy.polys.tests.test_polyroots.test_roots_linear()
sympy.polys.tests.test_polyroots.test_roots_mixed()
sympy.polys.tests.test_polyroots.test_roots_preprocessed()
sympy.polys.tests.test_polyroots.test_roots_preprocessing()
sympy.polys.tests.test_polyroots.test_roots_quadratic()
sympy.polys.tests.test_polyroots.test_roots_quartic()
sympy.polys.tests.test_polyroots.test_roots_quintic()
sympy.polys.tests.test_polyroots.test_roots_slow()
sympy.polys.tests.test_polyroots.test_roots_strict()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_constructor.py----------------------------------------
A:sympy.polys.tests.test_constructor.result->construct_domain([f2])
A:sympy.polys.tests.test_constructor.alg->sympy.polys.domains.QQ.algebraic_field(w)
A:sympy.polys.tests.test_constructor.dom->sympy.polys.domains.RR.frac_field(x, y)
A:sympy.polys.tests.test_constructor.w->exp(-I * 2 * pi / 3, evaluate=False)
A:sympy.polys.tests.test_constructor.f1->Float('1.01')
A:sympy.polys.tests.test_constructor.f2->Float('1.0000000000000000000001')
A:sympy.polys.tests.test_constructor.v->float(result[1][0])
sympy.polys.tests.test_constructor.test_complex_exponential()
sympy.polys.tests.test_constructor.test_composite_option()
sympy.polys.tests.test_constructor.test_construct_domain()
sympy.polys.tests.test_constructor.test_issue_11538()
sympy.polys.tests.test_constructor.test_precision()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_polyutils.py----------------------------------------
A:sympy.polys.tests.test_polyutils.(x, y, z, p, q, r, s, t, u, v, w)->symbols('x,y,z,p,q,r,s,t,u,v,w')
A:sympy.polys.tests.test_polyutils.(A, B)->symbols('A,B', commutative=False)
A:sympy.polys.tests.test_polyutils.r->S('[3/2 + sqrt(-14/3 - 2*(-415/216 + 13*I/12)**(1/3) - 4/sqrt(-7/3 +\n    61/(18*(-415/216 + 13*I/12)**(1/3)) + 2*(-415/216 + 13*I/12)**(1/3)) -\n    61/(18*(-415/216 + 13*I/12)**(1/3)))/2 - sqrt(-7/3 + 61/(18*(-415/216\n    + 13*I/12)**(1/3)) + 2*(-415/216 + 13*I/12)**(1/3))/2, 3/2 - sqrt(-7/3\n    + 61/(18*(-415/216 + 13*I/12)**(1/3)) + 2*(-415/216 +\n    13*I/12)**(1/3))/2 - sqrt(-14/3 - 2*(-415/216 + 13*I/12)**(1/3) -\n    4/sqrt(-7/3 + 61/(18*(-415/216 + 13*I/12)**(1/3)) + 2*(-415/216 +\n    13*I/12)**(1/3)) - 61/(18*(-415/216 + 13*I/12)**(1/3)))/2, 3/2 +\n    sqrt(-14/3 - 2*(-415/216 + 13*I/12)**(1/3) + 4/sqrt(-7/3 +\n    61/(18*(-415/216 + 13*I/12)**(1/3)) + 2*(-415/216 + 13*I/12)**(1/3)) -\n    61/(18*(-415/216 + 13*I/12)**(1/3)))/2 + sqrt(-7/3 + 61/(18*(-415/216\n    + 13*I/12)**(1/3)) + 2*(-415/216 + 13*I/12)**(1/3))/2, 3/2 + sqrt(-7/3\n    + 61/(18*(-415/216 + 13*I/12)**(1/3)) + 2*(-415/216 +\n    13*I/12)**(1/3))/2 - sqrt(-14/3 - 2*(-415/216 + 13*I/12)**(1/3) +\n    4/sqrt(-7/3 + 61/(18*(-415/216 + 13*I/12)**(1/3)) + 2*(-415/216 +\n    13*I/12)**(1/3)) - 61/(18*(-415/216 + 13*I/12)**(1/3)))/2]')
A:sympy.polys.tests.test_polyutils.n1->Symbol('\n1')
A:sympy.polys.tests.test_polyutils.X->symbols('x0,x1,x2,x10,x11,x12,x20,x21,x22')
sympy.polys.tests.test_polyutils.test__analyze_gens()
sympy.polys.tests.test_polyutils.test__dict_from_expr_if_gens()
sympy.polys.tests.test_polyutils.test__dict_from_expr_no_gens()
sympy.polys.tests.test_polyutils.test__nsort()
sympy.polys.tests.test_polyutils.test__parallel_dict_from_expr_if_gens()
sympy.polys.tests.test_polyutils.test__parallel_dict_from_expr_no_gens()
sympy.polys.tests.test_polyutils.test__sort_factors()
sympy.polys.tests.test_polyutils.test__sort_gens()
sympy.polys.tests.test_polyutils.test__unify_gens()
sympy.polys.tests.test_polyutils.test_dict_from_expr()
sympy.polys.tests.test_polyutils.test_parallel_dict_from_expr()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_dispersion.py----------------------------------------
A:sympy.polys.tests.test_dispersion.x->Symbol('x')
A:sympy.polys.tests.test_dispersion.a->Symbol('a')
A:sympy.polys.tests.test_dispersion.fp->poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x)
A:sympy.polys.tests.test_dispersion.gp->poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x).as_expr().subs(x, x - 3 * a).as_poly(x)
A:sympy.polys.tests.test_dispersion.fpa->poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x).as_expr().subs(a, 2).as_poly(x)
A:sympy.polys.tests.test_dispersion.gpa->poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x).as_expr().subs(x, x - 3 * a).as_poly(x).as_expr().subs(a, 2).as_poly(x)
sympy.polys.tests.test_dispersion.test_dispersion()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_injections.py----------------------------------------
sympy.polys.tests.test_injections.test_vfield()
sympy.polys.tests.test_injections.test_vring()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_fields.py----------------------------------------
A:sympy.polys.tests.test_fields.F1->sympy.polys.domains.ZZ.frac_field(a, b)
A:sympy.polys.tests.test_fields.F2->sympy.polys.domains.ZZ.frac_field(a, b).frac_field(x)
A:sympy.polys.tests.test_fields.F3->sympy.polys.domains.ZZ.poly_ring(a, b)
A:sympy.polys.tests.test_fields.(F, x, y, z)->field('x y z', QQ)
A:sympy.polys.tests.test_fields.x->symbols('x')
A:sympy.polys.tests.test_fields.F->FracField((x, log(x), sqrt(x + log(x))), ZZ, lex)
A:sympy.polys.tests.test_fields.g->F.from_expr(x ** 3 * y * z + x ** 2 * y ** 7 + 1).copy()
A:sympy.polys.tests.test_fields.(X, Y, Z)->symbols('x,y,z')
A:sympy.polys.tests.test_fields.(x, y, z)->symbols('x,y,z')
A:sympy.polys.tests.test_fields.(F, X, Y, Z)->field((x, y, z), ZZ)
A:sympy.polys.tests.test_fields.f->FracField((x, log(x), sqrt(x + log(x))), ZZ, lex).from_expr(x ** 3 * y * z + x ** 2 * y ** 7 + 1)
A:sympy.polys.tests.test_fields.(a, b, x)->symbols('a b x')
A:sympy.polys.tests.test_fields.frac->F4(F1(a + b))
A:sympy.polys.tests.test_fields.F4->sympy.polys.domains.ZZ.poly_ring(a, b).frac_field(x)
A:sympy.polys.tests.test_fields.(F, x, y)->field('x,y', QQ)
A:sympy.polys.tests.test_fields.(Fuv, u, v)->field('u,v', ZZ)
A:sympy.polys.tests.test_fields.(Fxyzt, x, y, z, t)->field('x,y,z,t', Ruv)
A:sympy.polys.tests.test_fields.(Ruv, u, v)->ring('u,v', ZZ)
A:sympy.polys.tests.test_fields.r->f(1, 1, 1)
A:sympy.polys.tests.test_fields.a->symbols('a')
sympy.polys.tests.test_fields.test_FracElement___add__()
sympy.polys.tests.test_fields.test_FracElement___call__()
sympy.polys.tests.test_fields.test_FracElement___hash__()
sympy.polys.tests.test_fields.test_FracElement___mul__()
sympy.polys.tests.test_fields.test_FracElement___neg__()
sympy.polys.tests.test_fields.test_FracElement___pow__()
sympy.polys.tests.test_fields.test_FracElement___sub__()
sympy.polys.tests.test_fields.test_FracElement___truediv__()
sympy.polys.tests.test_fields.test_FracElement__lt_le_gt_ge__()
sympy.polys.tests.test_fields.test_FracElement_as_expr()
sympy.polys.tests.test_fields.test_FracElement_compose()
sympy.polys.tests.test_fields.test_FracElement_copy()
sympy.polys.tests.test_fields.test_FracElement_diff()
sympy.polys.tests.test_fields.test_FracElement_evaluate()
sympy.polys.tests.test_fields.test_FracElement_from_expr()
sympy.polys.tests.test_fields.test_FracElement_subs()
sympy.polys.tests.test_fields.test_FracField___eq__()
sympy.polys.tests.test_fields.test_FracField___hash__()
sympy.polys.tests.test_fields.test_FracField___init__()
sympy.polys.tests.test_fields.test_FracField_index()
sympy.polys.tests.test_fields.test_FracField_nested()
sympy.polys.tests.test_fields.test_sfield()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/tests/test_partfrac.py----------------------------------------
A:sympy.polys.tests.test_partfrac.M->Matrix(2, 2, lambda i, j: 1 / (x + i + 1) / (x + j))
A:sympy.polys.tests.test_partfrac.(f, g)->_make_extension_example()
A:sympy.polys.tests.test_partfrac.p->Poly(1, x, domain='ZZ[a,b]')
A:sympy.polys.tests.test_partfrac.q->Poly((x + a) * (x + b), x, domain='ZZ[a,b]')
A:sympy.polys.tests.test_partfrac._a->Dummy('a')
A:sympy.polys.tests.test_partfrac.got->apart_list(f, x, dummies=numbered_symbols('w'))
A:sympy.polys.tests.test_partfrac.pfd->apart_list(f)
A:sympy.polys.tests.test_partfrac.a->Dummy('a')
sympy.polys.tests.test_partfrac._make_extension_example()
sympy.polys.tests.test_partfrac.test_apart()
sympy.polys.tests.test_partfrac.test_apart_extension()
sympy.polys.tests.test_partfrac.test_apart_extension_xfail()
sympy.polys.tests.test_partfrac.test_apart_full()
sympy.polys.tests.test_partfrac.test_apart_list()
sympy.polys.tests.test_partfrac.test_apart_matrix()
sympy.polys.tests.test_partfrac.test_apart_symbolic()
sympy.polys.tests.test_partfrac.test_apart_undetermined_coeffs()
sympy.polys.tests.test_partfrac.test_assemble_partfrac_list()
sympy.polys.tests.test_partfrac.test_issue_5798()
sympy.polys.tests.test_partfrac.test_noncommutative()
sympy.polys.tests.test_partfrac.test_noncommutative_pseudomultivariate()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/ideals.py----------------------------------------
A:sympy.polys.agca.ideals.R->self.ring.quotient_ring(self)
A:sympy.polys.agca.ideals.e->self.ring.ideal(e)
sympy.polys.agca.ideals.Ideal(self,ring)
sympy.polys.agca.ideals.Ideal.__add__(self,e)
sympy.polys.agca.ideals.Ideal.__eq__(self,e)
sympy.polys.agca.ideals.Ideal.__mul__(self,e)
sympy.polys.agca.ideals.Ideal.__ne__(self,e)
sympy.polys.agca.ideals.Ideal._check_ideal(self,J)
sympy.polys.agca.ideals.Ideal._contains_elem(self,x)
sympy.polys.agca.ideals.Ideal._contains_ideal(self,I)
sympy.polys.agca.ideals.Ideal._equals(self,J)
sympy.polys.agca.ideals.Ideal._first_power(self)
sympy.polys.agca.ideals.Ideal._intersect(self,J)
sympy.polys.agca.ideals.Ideal._quotient(self,J)
sympy.polys.agca.ideals.Ideal._zeroth_power(self)
sympy.polys.agca.ideals.Ideal.contains(self,elem)
sympy.polys.agca.ideals.Ideal.depth(self)
sympy.polys.agca.ideals.Ideal.height(self)
sympy.polys.agca.ideals.Ideal.intersect(self,J)
sympy.polys.agca.ideals.Ideal.is_maximal(self)
sympy.polys.agca.ideals.Ideal.is_primary(self)
sympy.polys.agca.ideals.Ideal.is_prime(self)
sympy.polys.agca.ideals.Ideal.is_principal(self)
sympy.polys.agca.ideals.Ideal.is_radical(self)
sympy.polys.agca.ideals.Ideal.is_whole_ring(self)
sympy.polys.agca.ideals.Ideal.is_zero(self)
sympy.polys.agca.ideals.Ideal.product(self,J)
sympy.polys.agca.ideals.Ideal.quotient(self,J,**opts)
sympy.polys.agca.ideals.Ideal.radical(self)
sympy.polys.agca.ideals.Ideal.reduce_element(self,x)
sympy.polys.agca.ideals.Ideal.saturate(self,J)
sympy.polys.agca.ideals.Ideal.subset(self,other)
sympy.polys.agca.ideals.Ideal.union(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal(self,ring,module)
sympy.polys.agca.ideals.ModuleImplementedIdeal.__repr__(self)
sympy.polys.agca.ideals.ModuleImplementedIdeal._contains_elem(self,x)
sympy.polys.agca.ideals.ModuleImplementedIdeal._contains_ideal(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal._intersect(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal._product(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal._quotient(self,J,**opts)
sympy.polys.agca.ideals.ModuleImplementedIdeal._union(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal.gens(self)
sympy.polys.agca.ideals.ModuleImplementedIdeal.in_terms_of_generators(self,e)
sympy.polys.agca.ideals.ModuleImplementedIdeal.is_whole_ring(self)
sympy.polys.agca.ideals.ModuleImplementedIdeal.is_zero(self)
sympy.polys.agca.ideals.ModuleImplementedIdeal.reduce_element(self,x,**options)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/modules.py----------------------------------------
A:sympy.polys.agca.modules.e->self.convert(e)
A:sympy.polys.agca.modules.om->self.module.convert(om)
A:sympy.polys.agca.modules.o->self.module.ring.convert(o)
A:sympy.polys.agca.modules.tpl->tuple((self.ring.convert(x) for x in elem))
A:sympy.polys.agca.modules.M->self.ring.free_module(self.rank + 1).submodule(*[g1] + gi, order='ilex', TOP=False)
A:sympy.polys.agca.modules.F->self.ring.free_module(r + k).submodule(*newgens, order='ilex', TOP=False)
A:sympy.polys.agca.modules.self.gens->tuple((container.convert(x) for x in gens))
A:sympy.polys.agca.modules.r->copy(self.container.convert(elem, M))
A:sympy.polys.agca.modules.self.base->self.container.base.submodule(*[x.data for x in self.gens], **opts).union(self.killed_module)
A:sympy.polys.agca.modules.self.order->ModuleOrder(monomial_key(order), self.ring.order, TOP)
A:sympy.polys.agca.modules.(gb, gbe)->self._groebner(extended=True)
A:sympy.polys.agca.modules.self._gb->tuple(sdm_groebner([self.ring._vector_to_sdm(x, self.order) for x in self.gens], sdm_nf_mora, self.order, self.ring.dom))
A:sympy.polys.agca.modules.k->len(self.gens)
A:sympy.polys.agca.modules.zero->self.ring.convert(0)
A:sympy.polys.agca.modules.one->self.ring.convert(1)
A:sympy.polys.agca.modules.Rkr->self.ring.free_module(r + k)
A:sympy.polys.agca.modules.m->FreeModuleElement(Rkr, tuple(m))
A:sympy.polys.agca.modules.G->M.syzygy_module(order='ilex', TOP=False)._groebner_vec()
A:sympy.polys.agca.modules.S->self.ring.free_module(self.rank + 1).submodule(*[g1] + gi, order='ilex', TOP=False).syzygy_module(order='ilex', TOP=False)
A:sympy.polys.agca.modules.syz->self.ring.free_module(2 * r).submodule(*ci + di + ei)._syzygies()
A:sympy.polys.agca.modules.res->self.container.submodule(*([-y for y in x[:r]] for x in nonzero))
A:sympy.polys.agca.modules.(G, R)->self.ring.free_module(self.rank + 1).submodule(*[g1] + gi, order='ilex', TOP=False)._groebner_vec(extended=True)
A:sympy.polys.agca.modules.self.quot->self.container.quot.submodule(*[self.container.lift(x) for x in self.gens])
sympy.polys.agca.modules.FreeModule(self,ring,rank)
sympy.polys.agca.modules.FreeModule.__repr__(self)
sympy.polys.agca.modules.FreeModule.basis(self)
sympy.polys.agca.modules.FreeModule.convert(self,elem,M=None)
sympy.polys.agca.modules.FreeModule.identity_hom(self)
sympy.polys.agca.modules.FreeModule.is_submodule(self,other)
sympy.polys.agca.modules.FreeModule.is_zero(self)
sympy.polys.agca.modules.FreeModule.multiply_ideal(self,other)
sympy.polys.agca.modules.FreeModule.quotient_module(self,submodule)
sympy.polys.agca.modules.FreeModuleElement(ModuleElement)
sympy.polys.agca.modules.FreeModuleElement.__getitem__(self,idx)
sympy.polys.agca.modules.FreeModuleElement.__iter__(self)
sympy.polys.agca.modules.FreeModuleElement.__repr__(self)
sympy.polys.agca.modules.FreeModuleElement.add(self,d1,d2)
sympy.polys.agca.modules.FreeModuleElement.div(self,d,p)
sympy.polys.agca.modules.FreeModuleElement.mul(self,d,p)
sympy.polys.agca.modules.FreeModulePolyRing(self,ring,rank)
sympy.polys.agca.modules.FreeModulePolyRing.submodule(self,*gens,**opts)
sympy.polys.agca.modules.FreeModuleQuotientRing(self,ring,rank)
sympy.polys.agca.modules.FreeModuleQuotientRing.__repr__(self)
sympy.polys.agca.modules.FreeModuleQuotientRing.lift(self,elem)
sympy.polys.agca.modules.FreeModuleQuotientRing.submodule(self,*gens,**opts)
sympy.polys.agca.modules.FreeModuleQuotientRing.unlift(self,elem)
sympy.polys.agca.modules.Module(self,ring)
sympy.polys.agca.modules.Module.__contains__(self,elem)
sympy.polys.agca.modules.Module.__eq__(self,other)
sympy.polys.agca.modules.Module.__mul__(self,e)
sympy.polys.agca.modules.Module.__ne__(self,other)
sympy.polys.agca.modules.Module.__truediv__(self,e)
sympy.polys.agca.modules.Module.contains(self,elem)
sympy.polys.agca.modules.Module.convert(self,elem,M=None)
sympy.polys.agca.modules.Module.identity_hom(self)
sympy.polys.agca.modules.Module.is_submodule(self,other)
sympy.polys.agca.modules.Module.is_zero(self)
sympy.polys.agca.modules.Module.multiply_ideal(self,other)
sympy.polys.agca.modules.Module.quotient_module(self,other)
sympy.polys.agca.modules.Module.submodule(self,*gens)
sympy.polys.agca.modules.Module.subset(self,other)
sympy.polys.agca.modules.ModuleElement(self,module,data)
sympy.polys.agca.modules.ModuleElement.__add__(self,om)
sympy.polys.agca.modules.ModuleElement.__eq__(self,om)
sympy.polys.agca.modules.ModuleElement.__mul__(self,o)
sympy.polys.agca.modules.ModuleElement.__ne__(self,om)
sympy.polys.agca.modules.ModuleElement.__neg__(self)
sympy.polys.agca.modules.ModuleElement.__rsub__(self,om)
sympy.polys.agca.modules.ModuleElement.__sub__(self,om)
sympy.polys.agca.modules.ModuleElement.__truediv__(self,o)
sympy.polys.agca.modules.ModuleElement.add(self,d1,d2)
sympy.polys.agca.modules.ModuleElement.div(self,m,d)
sympy.polys.agca.modules.ModuleElement.eq(self,d1,d2)
sympy.polys.agca.modules.ModuleElement.mul(self,m,d)
sympy.polys.agca.modules.ModuleOrder(self,o1,o2,TOP)
sympy.polys.agca.modules.QuotientModule(self,ring,base,submodule)
sympy.polys.agca.modules.QuotientModule.__repr__(self)
sympy.polys.agca.modules.QuotientModule.convert(self,elem,M=None)
sympy.polys.agca.modules.QuotientModule.identity_hom(self)
sympy.polys.agca.modules.QuotientModule.is_submodule(self,other)
sympy.polys.agca.modules.QuotientModule.is_zero(self)
sympy.polys.agca.modules.QuotientModule.quotient_hom(self)
sympy.polys.agca.modules.QuotientModule.submodule(self,*gens,**opts)
sympy.polys.agca.modules.QuotientModuleElement(ModuleElement)
sympy.polys.agca.modules.QuotientModuleElement.__repr__(self)
sympy.polys.agca.modules.QuotientModuleElement.eq(self,d1,d2)
sympy.polys.agca.modules.SubModule(self,gens,container)
sympy.polys.agca.modules.SubModule.__add__(self,oth)
sympy.polys.agca.modules.SubModule.__repr__(self)
sympy.polys.agca.modules.SubModule._contains(self,other)
sympy.polys.agca.modules.SubModule._in_terms_of_generators(self,e)
sympy.polys.agca.modules.SubModule._intersect(self,other)
sympy.polys.agca.modules.SubModule._module_quotient(self,other)
sympy.polys.agca.modules.SubModule._syzygies(self)
sympy.polys.agca.modules.SubModule.convert(self,elem,M=None)
sympy.polys.agca.modules.SubModule.identity_hom(self)
sympy.polys.agca.modules.SubModule.in_terms_of_generators(self,e)
sympy.polys.agca.modules.SubModule.inclusion_hom(self)
sympy.polys.agca.modules.SubModule.intersect(self,other,**options)
sympy.polys.agca.modules.SubModule.is_full_module(self)
sympy.polys.agca.modules.SubModule.is_submodule(self,other)
sympy.polys.agca.modules.SubModule.is_zero(self)
sympy.polys.agca.modules.SubModule.module_quotient(self,other,**options)
sympy.polys.agca.modules.SubModule.multiply_ideal(self,I)
sympy.polys.agca.modules.SubModule.quotient_module(self,other,**opts)
sympy.polys.agca.modules.SubModule.reduce_element(self,x)
sympy.polys.agca.modules.SubModule.submodule(self,*gens)
sympy.polys.agca.modules.SubModule.syzygy_module(self,**opts)
sympy.polys.agca.modules.SubModule.union(self,other)
sympy.polys.agca.modules.SubModulePolyRing(self,gens,container,order='lex',TOP=True)
sympy.polys.agca.modules.SubModulePolyRing.__eq__(self,other)
sympy.polys.agca.modules.SubModulePolyRing._contains(self,x)
sympy.polys.agca.modules.SubModulePolyRing._groebner(self,extended=False)
sympy.polys.agca.modules.SubModulePolyRing._groebner_vec(self,extended=False)
sympy.polys.agca.modules.SubModulePolyRing._in_terms_of_generators(self,e)
sympy.polys.agca.modules.SubModulePolyRing._intersect(self,other,relations=False)
sympy.polys.agca.modules.SubModulePolyRing._module_quotient(self,other,relations=False)
sympy.polys.agca.modules.SubModulePolyRing._syzygies(self)
sympy.polys.agca.modules.SubModulePolyRing.reduce_element(self,x,NF=None)
sympy.polys.agca.modules.SubModuleQuotientRing(self,gens,container)
sympy.polys.agca.modules.SubModuleQuotientRing._contains(self,elem)
sympy.polys.agca.modules.SubModuleQuotientRing._in_terms_of_generators(self,elem)
sympy.polys.agca.modules.SubModuleQuotientRing._syzygies(self)
sympy.polys.agca.modules.SubQuotientModule(self,gens,container,**opts)
sympy.polys.agca.modules.SubQuotientModule._contains(self,elem)
sympy.polys.agca.modules.SubQuotientModule._in_terms_of_generators(self,e)
sympy.polys.agca.modules.SubQuotientModule._syzygies(self)
sympy.polys.agca.modules.SubQuotientModule.is_full_module(self)
sympy.polys.agca.modules.SubQuotientModule.quotient_hom(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/extensions.py----------------------------------------
A:sympy.polys.agca.extensions.g->f.ext.convert(g)
A:sympy.polys.agca.extensions.rep->self.ring.exquo(f.rep, g.rep)
A:sympy.polys.agca.extensions.invrep->R.exquo(R.one, f.rep)
A:sympy.polys.agca.extensions.ginv->f.ext.convert(g).inverse()
A:sympy.polys.agca.extensions.[c]->f.rep.to_list()
A:sympy.polys.agca.extensions.mod->self.modulus.set_domain(K)
A:sympy.polys.agca.extensions.self.rank->self.modulus.set_domain(K).degree()
A:sympy.polys.agca.extensions.self.zero->self.convert(self.ring.zero)
A:sympy.polys.agca.extensions.self.one->self.convert(self.ring.one)
A:sympy.polys.agca.extensions.self.generator->self.convert(gen)
A:sympy.polys.agca.extensions.self.basis->tuple((self.convert(gen ** i) for i in range(self.rank)))
A:sympy.polys.agca.extensions.K->self.domain.drop(*symbols)
sympy.polys.agca.extensions.ExtensionElement(self,rep,ext)
sympy.polys.agca.extensions.ExtensionElement.__add__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__bool__(f)
sympy.polys.agca.extensions.ExtensionElement.__eq__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__hash__(f)
sympy.polys.agca.extensions.ExtensionElement.__mod__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__mul__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__ne__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__neg__(f)
sympy.polys.agca.extensions.ExtensionElement.__pos__(f)
sympy.polys.agca.extensions.ExtensionElement.__pow__(f,n)
sympy.polys.agca.extensions.ExtensionElement.__rmod__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__rsub__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__rtruediv__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__str__(f)
sympy.polys.agca.extensions.ExtensionElement.__sub__(f,g)
sympy.polys.agca.extensions.ExtensionElement.__truediv__(f,g)
sympy.polys.agca.extensions.ExtensionElement._divcheck(f)
sympy.polys.agca.extensions.ExtensionElement._get_rep(f,g)
sympy.polys.agca.extensions.ExtensionElement.inverse(f)
sympy.polys.agca.extensions.ExtensionElement.is_ground(f)
sympy.polys.agca.extensions.ExtensionElement.parent(f)
sympy.polys.agca.extensions.ExtensionElement.to_ground(f)
sympy.polys.agca.extensions.MonogenicFiniteExtension(self,mod)
sympy.polys.agca.extensions.MonogenicFiniteExtension.__eq__(self,other)
sympy.polys.agca.extensions.MonogenicFiniteExtension.__hash__(self)
sympy.polys.agca.extensions.MonogenicFiniteExtension.__str__(self)
sympy.polys.agca.extensions.MonogenicFiniteExtension.convert(self,f,base=None)
sympy.polys.agca.extensions.MonogenicFiniteExtension.convert_from(self,f,base)
sympy.polys.agca.extensions.MonogenicFiniteExtension.drop(self,*symbols)
sympy.polys.agca.extensions.MonogenicFiniteExtension.exquo(self,f,g)
sympy.polys.agca.extensions.MonogenicFiniteExtension.from_sympy(self,f)
sympy.polys.agca.extensions.MonogenicFiniteExtension.is_negative(self,a)
sympy.polys.agca.extensions.MonogenicFiniteExtension.is_unit(self,a)
sympy.polys.agca.extensions.MonogenicFiniteExtension.new(self,arg)
sympy.polys.agca.extensions.MonogenicFiniteExtension.quo(self,f,g)
sympy.polys.agca.extensions.MonogenicFiniteExtension.set_domain(self,K)
sympy.polys.agca.extensions.MonogenicFiniteExtension.to_sympy(self,f)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/homomorphisms.py----------------------------------------
A:sympy.polys.agca.homomorphisms.self._ker->self._kernel()
A:sympy.polys.agca.homomorphisms.self._img->self._image()
A:sympy.polys.agca.homomorphisms.self.matrix->tuple((converter(x) for x in matrix))
A:sympy.polys.agca.homomorphisms.lines->repr(self._sympy_matrix()).split('\n')
A:sympy.polys.agca.homomorphisms.n->len(lines)
A:sympy.polys.agca.homomorphisms.syz->self.image().syzygy_module()
A:sympy.polys.agca.homomorphisms.(SF, SS, SQ, _)->freepres(domain)
A:sympy.polys.agca.homomorphisms.(TF, TS, TQ, c)->freepres(codomain)
sympy.polys.agca.homomorphism(domain,codomain,matrix)
sympy.polys.agca.homomorphisms.FreeModuleHomomorphism(MatrixHomomorphism)
sympy.polys.agca.homomorphisms.FreeModuleHomomorphism._apply(self,elem)
sympy.polys.agca.homomorphisms.FreeModuleHomomorphism._image(self)
sympy.polys.agca.homomorphisms.FreeModuleHomomorphism._kernel(self)
sympy.polys.agca.homomorphisms.MatrixHomomorphism(self,domain,codomain,matrix)
sympy.polys.agca.homomorphisms.MatrixHomomorphism.__repr__(self)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._add(self,oth)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._compose(self,oth)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._mul_scalar(self,c)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._quotient_codomain(self,sm)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._quotient_domain(self,sm)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._restrict_codomain(self,sm)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._restrict_domain(self,sm)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._sympy_matrix(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism(self,domain,codomain)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__add__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__eq__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__mul__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__ne__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__sub__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__truediv__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._add(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._apply(self,elem)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._check_hom(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._compose(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._image(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._kernel(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._mul_scalar(self,c)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._quotient_codomain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._quotient_domain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._restrict_codomain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._restrict_domain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.image(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain(self,sm)
sympy.polys.agca.homomorphisms.SubModuleHomomorphism(MatrixHomomorphism)
sympy.polys.agca.homomorphisms.SubModuleHomomorphism._apply(self,elem)
sympy.polys.agca.homomorphisms.SubModuleHomomorphism._image(self)
sympy.polys.agca.homomorphisms.SubModuleHomomorphism._kernel(self)
sympy.polys.agca.homomorphisms.homomorphism(domain,codomain,matrix)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/tests/test_modules.py----------------------------------------
A:sympy.polys.agca.tests.test_modules.M->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2])
A:sympy.polys.agca.tests.test_modules.e->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).convert([x ** 2, 2, 0])
A:sympy.polys.agca.tests.test_modules.g->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).convert([x, 0, 0])
A:sympy.polys.agca.tests.test_modules.R->sympy.polys.QQ.old_poly_ring(x, y, z)
A:sympy.polys.agca.tests.test_modules.M1->R.free_module(2).submodule([x, y], [y, 1])
A:sympy.polys.agca.tests.test_modules.M2->R.free_module(2).submodule([0, y - 1], [x, 1], [y, x])
A:sympy.polys.agca.tests.test_modules.X->sympy.polys.QQ.old_poly_ring(x, order='ilex').convert(x)
A:sympy.polys.agca.tests.test_modules.M3->R2.free_module(1).submodule([x * y], [y * z], [x * z])
A:sympy.polys.agca.tests.test_modules.o1->ModuleOrder(lex, grlex, False)
A:sympy.polys.agca.tests.test_modules.o2->ModuleOrder(ilex, lex, False)
A:sympy.polys.agca.tests.test_modules.F->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2)
A:sympy.polys.agca.tests.test_modules.Fd->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2).submodule([x ** 2, 0, 0], [1, 2, 0], [1, 2, 3])
A:sympy.polys.agca.tests.test_modules.m->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2).convert([x ** 2 + y ** 2, 1, 0])
A:sympy.polys.agca.tests.test_modules.n->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).convert(m)
A:sympy.polys.agca.tests.test_modules.S->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([0, x, -y], [z, -x, 0])
A:sympy.polys.agca.tests.test_modules.S2->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).submodule([x ** 2, 0], [0, x ** 2])
A:sympy.polys.agca.tests.test_modules.S3->R2.free_module(3).submodule([z, 0, 0], [0, x, 0], [0, 0, y])
A:sympy.polys.agca.tests.test_modules.SM->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).submodule([x, 0], [0, y])
A:sympy.polys.agca.tests.test_modules.N->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2).submodule([x + y, x + y])
A:sympy.polys.agca.tests.test_modules.G->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2)
A:sympy.polys.agca.tests.test_modules.S1->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).submodule([x, 0], [0, x])
A:sympy.polys.agca.tests.test_modules.I->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2).submodule([x, y], [y ** 2 - y, y - 1], [x * y + y, x + 1])
A:sympy.polys.agca.tests.test_modules.(I1, rel1, rel2)->R.free_module(2).submodule([x, y], [y, 1]).intersect(M2, relations=True)
A:sympy.polys.agca.tests.test_modules.(q, rel)->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).module_quotient(N, relations=True)
A:sympy.polys.agca.tests.test_modules.(G, R)->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2])._groebner_vec(extended=True)
sympy.polys.agca.tests.test_modules.test_FreeModule()
sympy.polys.agca.tests.test_modules.test_FreeModuleElement()
sympy.polys.agca.tests.test_modules.test_ModuleOrder()
sympy.polys.agca.tests.test_modules.test_ModulesQuotientRing()
sympy.polys.agca.tests.test_modules.test_QuotientModule()
sympy.polys.agca.tests.test_modules.test_QuotientModuleElement()
sympy.polys.agca.tests.test_modules.test_SubModulePolyRing_global()
sympy.polys.agca.tests.test_modules.test_SubModulePolyRing_local()
sympy.polys.agca.tests.test_modules.test_SubModulePolyRing_nontriv_global()
sympy.polys.agca.tests.test_modules.test_SubModulePolyRing_nontriv_local()
sympy.polys.agca.tests.test_modules.test_groebner_extendend()
sympy.polys.agca.tests.test_modules.test_in_terms_of_generators()
sympy.polys.agca.tests.test_modules.test_intersection()
sympy.polys.agca.tests.test_modules.test_module_mul()
sympy.polys.agca.tests.test_modules.test_quotient()
sympy.polys.agca.tests.test_modules.test_syzygy()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/tests/test_ideals.py----------------------------------------
A:sympy.polys.agca.tests.test_ideals.R->sympy.polys.QQ.old_poly_ring(x, y)
A:sympy.polys.agca.tests.test_ideals.I->sympy.polys.QQ.old_poly_ring(x, y).ideal(x ** 5, y)
A:sympy.polys.agca.tests.test_ideals.J->sympy.polys.QQ.old_poly_ring(y).ideal(1)
A:sympy.polys.agca.tests.test_ideals.S->sympy.polys.QQ.old_poly_ring(x, y).ideal(x * y)
A:sympy.polys.agca.tests.test_ideals.T->sympy.polys.QQ.old_poly_ring(x, y).ideal(x, y)
A:sympy.polys.agca.tests.test_ideals.e->sympy.polys.QQ.old_poly_ring(x, y).convert(x ** 3 + y ** 2)
sympy.polys.agca.tests.test_ideals.test_exceptions()
sympy.polys.agca.tests.test_ideals.test_ideal_operations()
sympy.polys.agca.tests.test_ideals.test_intersection()
sympy.polys.agca.tests.test_ideals.test_nontriv_global()
sympy.polys.agca.tests.test_ideals.test_nontriv_local()
sympy.polys.agca.tests.test_ideals.test_quotient()
sympy.polys.agca.tests.test_ideals.test_reduction()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/tests/test_homomorphisms.py----------------------------------------
A:sympy.polys.agca.tests.test_homomorphisms.R->sympy.polys.domains.rationalfield.QQ.old_poly_ring(x, y)
A:sympy.polys.agca.tests.test_homomorphisms.F->R2.free_module(2)
A:sympy.polys.agca.tests.test_homomorphisms.G->sympy.polys.domains.rationalfield.QQ.old_poly_ring(x).free_module(2)
A:sympy.polys.agca.tests.test_homomorphisms.f->R2.free_module(2).identity_hom()
A:sympy.polys.agca.tests.test_homomorphisms.g->homomorphism(F, F, [0, [1, x]])
A:sympy.polys.agca.tests.test_homomorphisms.h->homomorphism(F, F, [[x, 0], [y, y + 1]])
A:sympy.polys.agca.tests.test_homomorphisms.i->homomorphism(F, G, [[1, 0, 0], [0, 1, 0]])
A:sympy.polys.agca.tests.test_homomorphisms.h1->homomorphism(F, F, [[x, 0], [y, y + 1]]).quotient_domain(F.submodule([0, 1]))
A:sympy.polys.agca.tests.test_homomorphisms.SM->R2.free_module(2).submodule([1, 1, 1])
A:sympy.polys.agca.tests.test_homomorphisms.SQ->Q.submodule([1, 0, 0])
A:sympy.polys.agca.tests.test_homomorphisms.h2->homomorphism(Q, G, matrix)
A:sympy.polys.agca.tests.test_homomorphisms.container->conv()
sympy.polys.agca.tests.test_homomorphisms.test_creation()
sympy.polys.agca.tests.test_homomorphisms.test_operations()
sympy.polys.agca.tests.test_homomorphisms.test_printing()
sympy.polys.agca.tests.test_homomorphisms.test_properties()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/agca/tests/test_extensions.py----------------------------------------
A:sympy.polys.agca.tests.test_extensions.A->FiniteExtension(Poly(x ** 2 + 1, x))
A:sympy.polys.agca.tests.test_extensions.F->FiniteExtension(Poly(x ** 3 - x + 1, x, modulus=3))
A:sympy.polys.agca.tests.test_extensions.K->FiniteExtension(Poly(sin(t) ** 2 + cos(t) ** 2 - 1, sin(t), domain=K[cos(t)]))
A:sympy.polys.agca.tests.test_extensions.p1->Poly(x ** 2 - 2, x, domain=ZZ)
A:sympy.polys.agca.tests.test_extensions.p2->Poly(x ** 2 - 2, x, domain=QQ)
A:sympy.polys.agca.tests.test_extensions.K1->FiniteExtension(Poly(x ** 2 + 1))
A:sympy.polys.agca.tests.test_extensions.K2->FiniteExtension(Poly(t ** 2 - 2, t, domain=K))
A:sympy.polys.agca.tests.test_extensions.xf->K(x)
A:sympy.polys.agca.tests.test_extensions.KZ->FiniteExtension(Poly(x ** 2 - 1, x, domain=ZZ))
A:sympy.polys.agca.tests.test_extensions.KQ->FiniteExtension(Poly(x ** 2 - 1, x, domain=QQ))
A:sympy.polys.agca.tests.test_extensions.KQt->FiniteExtension(Poly(x ** 2 - 1, x, domain=QQ[t]))
A:sympy.polys.agca.tests.test_extensions.KQtf->FiniteExtension(Poly(x ** 2 - 1, x, domain=QQ.frac_field(t)))
A:sympy.polys.agca.tests.test_extensions.xK->FiniteExtension(Poly(sin(t) ** 2 + cos(t) ** 2 - 1, sin(t), domain=K[cos(t)])).convert(x)
A:sympy.polys.agca.tests.test_extensions.p->Poly(x + t, y, domain=K2)
A:sympy.polys.agca.tests.test_extensions.eK->FiniteExtension(Poly(t ** 2 - 2, t, domain=K)).convert(x + t)
A:sympy.polys.agca.tests.test_extensions.(r, p, t)->symbols('rho, phi, theta')
A:sympy.polys.agca.tests.test_extensions.Ksc1->make_extension(ZZ[r])
A:sympy.polys.agca.tests.test_extensions.J->DomainMatrix(elements_K, (3, 3), K)
sympy.polys.agca.tests.test_extensions.test_FiniteExtension()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_Poly()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_convert()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_division_ring()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_eq_hash()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_exquo()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_from_sympy()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_mod()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_set_domain()
sympy.polys.agca.tests.test_extensions.test_FiniteExtension_sincos_jacobian()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/groundtypes.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/realfield.py----------------------------------------
A:sympy.polys.domains.realfield.context->MPContext(prec, dps, tol, True)
A:sympy.polys.domains.realfield.self.zero->self.dtype(0)
A:sympy.polys.domains.realfield.self.one->self.dtype(1)
A:sympy.polys.domains.realfield.number->expr.evalf(n=self.dps)
A:sympy.polys.domains.realfield.RR->RealField()
sympy.RealField(self,prec=_default_precision,dps=None,tol=None)
sympy.polys.domains.realfield.RealField(self,prec=_default_precision,dps=None,tol=None)
sympy.polys.domains.realfield.RealField.__eq__(self,other)
sympy.polys.domains.realfield.RealField.__hash__(self)
sympy.polys.domains.realfield.RealField.almosteq(self,a,b,tolerance=None)
sympy.polys.domains.realfield.RealField.dps(self)
sympy.polys.domains.realfield.RealField.from_AlgebraicField(self,element,base)
sympy.polys.domains.realfield.RealField.from_ComplexField(self,element,base)
sympy.polys.domains.realfield.RealField.from_QQ(self,element,base)
sympy.polys.domains.realfield.RealField.from_QQ_gmpy(self,element,base)
sympy.polys.domains.realfield.RealField.from_QQ_python(self,element,base)
sympy.polys.domains.realfield.RealField.from_RealField(self,element,base)
sympy.polys.domains.realfield.RealField.from_ZZ(self,element,base)
sympy.polys.domains.realfield.RealField.from_ZZ_gmpy(self,element,base)
sympy.polys.domains.realfield.RealField.from_ZZ_python(self,element,base)
sympy.polys.domains.realfield.RealField.from_sympy(self,expr)
sympy.polys.domains.realfield.RealField.gcd(self,a,b)
sympy.polys.domains.realfield.RealField.get_exact(self)
sympy.polys.domains.realfield.RealField.get_ring(self)
sympy.polys.domains.realfield.RealField.has_default_precision(self)
sympy.polys.domains.realfield.RealField.lcm(self,a,b)
sympy.polys.domains.realfield.RealField.precision(self)
sympy.polys.domains.realfield.RealField.to_rational(self,element,limit=True)
sympy.polys.domains.realfield.RealField.to_sympy(self,element)
sympy.polys.domains.realfield.RealField.tolerance(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/domainelement.py----------------------------------------
sympy.polys.domains.domainelement.DomainElement
sympy.polys.domains.domainelement.DomainElement.parent(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/mpelements.py----------------------------------------
A:sympy.polys.domains.mpelements._mpf_->property(lambda self: self.__mpf__, _set_mpf)
A:sympy.polys.domains.mpelements._mpc_->property(lambda self: self.__mpc__, _set_mpc)
A:sympy.polys.domains.mpelements.ctx.tol->ctx._convert_tol(tol)
A:sympy.polys.domains.mpelements.ctx.tolerance->ctx.make_mpf(ctx.tol)
A:sympy.polys.domains.mpelements.ctx.max_denom->int(1 / ctx.tolerance)
A:sympy.polys.domains.mpelements.ctx.zero->ctx.make_mpf(fzero)
A:sympy.polys.domains.mpelements.ctx.one->ctx.make_mpf(fone)
A:sympy.polys.domains.mpelements.ctx.j->ctx.make_mpc((fzero, fone))
A:sympy.polys.domains.mpelements.ctx.inf->ctx.make_mpf(finf)
A:sympy.polys.domains.mpelements.ctx.ninf->ctx.make_mpf(fninf)
A:sympy.polys.domains.mpelements.ctx.nan->ctx.make_mpf(fnan)
A:sympy.polys.domains.mpelements.(p, q)->to_rational(s._mpf_)
A:sympy.polys.domains.mpelements.number->mpq(p, q)
A:sympy.polys.domains.mpelements.bound1->mpq(p0 + k * p1, q0 + k * q1)
A:sympy.polys.domains.mpelements.bound2->mpq(p1, q1)
A:sympy.polys.domains.mpelements.t->ctx.convert(t)
A:sympy.polys.domains.mpelements.abs_eps->ctx.convert(rel_eps)
A:sympy.polys.domains.mpelements.rel_eps->ctx.convert(abs_eps)
A:sympy.polys.domains.mpelements.diff->abs(s - t)
A:sympy.polys.domains.mpelements.abss->abs(s)
A:sympy.polys.domains.mpelements.abst->abs(t)
sympy.polys.domains.mpelements.ComplexElement(_mpc,DomainElement)
sympy.polys.domains.mpelements.ComplexElement._set_mpc(self,val)
sympy.polys.domains.mpelements.ComplexElement.parent(self)
sympy.polys.domains.mpelements.MPContext(ctx,prec=53,dps=None,tol=None,real=False)
sympy.polys.domains.mpelements.MPContext._convert_fallback(ctx,x,strings)
sympy.polys.domains.mpelements.MPContext._convert_tol(ctx,tol)
sympy.polys.domains.mpelements.MPContext._make_tol(ctx)
sympy.polys.domains.mpelements.MPContext._repr_digits(ctx)
sympy.polys.domains.mpelements.MPContext._str_digits(ctx)
sympy.polys.domains.mpelements.MPContext.almosteq(ctx,s,t,rel_eps=None,abs_eps=None)
sympy.polys.domains.mpelements.MPContext.make_tol(ctx)
sympy.polys.domains.mpelements.MPContext.to_rational(ctx,s,limit=True)
sympy.polys.domains.mpelements.RealElement(_mpf,DomainElement)
sympy.polys.domains.mpelements.RealElement._set_mpf(self,val)
sympy.polys.domains.mpelements.RealElement.parent(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/pythonfinitefield.py----------------------------------------
sympy.PythonFiniteField(self,mod,symmetric=True)
sympy.polys.domains.pythonfinitefield.PythonFiniteField(self,mod,symmetric=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/gmpyrationalfield.py----------------------------------------
A:sympy.polys.domains.gmpyrationalfield.zero->dtype(0)
A:sympy.polys.domains.gmpyrationalfield.one->dtype(1)
A:sympy.polys.domains.gmpyrationalfield.tp->type(one)
sympy.GMPYRationalField(self)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField(self)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.denom(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.div(self,a,b)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.exquo(self,a,b)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.factorial(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_GaussianRationalField(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_QQ_python(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_RealField(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_sympy(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.get_ring(self)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.numer(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.quo(self,a,b)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.rem(self,a,b)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/old_polynomialring.py----------------------------------------
A:sympy.polys.domains.old_polynomialring.self.ngens->len(gens)
A:sympy.polys.domains.old_polynomialring.self.zero->self.dtype.zero(lev, dom, ring=self)
A:sympy.polys.domains.old_polynomialring.self.one->self.dtype.one(lev, dom, ring=self)
A:sympy.polys.domains.old_polynomialring.self.order->opts.get('order', monomial_key(self.default_order))
A:sympy.polys.domains.old_polynomialring.s_order->str(self.order)
A:sympy.polys.domains.old_polynomialring.(monoms, coeffs)->_dict_reorder(a.to_dict(), K0.gens, K1.gens)
A:sympy.polys.domains.old_polynomialring.dic->sdm_to_dict(s)
A:sympy.polys.domains.old_polynomialring.dics->self._sdm_to_dics(s, n)
A:sympy.polys.domains.old_polynomialring.(rep, _)->dict_from_basic(a, gens=self.gens)
A:sympy.polys.domains.old_polynomialring.rep[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_polynomialring.res->self.dtype(a, self.dom, len(self.gens) - 1, ring=self)
A:sympy.polys.domains.old_polynomialring.a->self.convert(a)
A:sympy.polys.domains.old_polynomialring.dmf->K1.get_field().from_FractionField(a, K0)
A:sympy.polys.domains.old_polynomialring.(p, q)->self.convert(a).as_numer_denom()
A:sympy.polys.domains.old_polynomialring.(num, _)->dict_from_basic(p, gens=self.gens)
A:sympy.polys.domains.old_polynomialring.(den, _)->dict_from_basic(q, gens=self.gens)
A:sympy.polys.domains.old_polynomialring.num[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_polynomialring.den[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_polynomialring.u->self.one.numer()
A:sympy.polys.domains.old_polynomialring.order->monomial_key(order)
sympy.polys.domains.old_PolynomialRing(dom,*gens,**opts)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing(PolynomialRingBase)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.__contains__(self,a)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing._vector_to_sdm(self,v,order)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.from_FractionField(K1,a,K0)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.from_sympy(self,a)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.new(self,a)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.to_sympy(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing(PolynomialRingBase)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing._vector_to_sdm(self,v,order)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.from_FractionField(K1,a,K0)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.from_sympy(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.is_negative(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.is_nonnegative(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.is_nonpositive(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.is_positive(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.to_sympy(self,a)
sympy.polys.domains.old_polynomialring.PolynomialRing(dom,*gens,**opts)
sympy.polys.domains.old_polynomialring.PolynomialRingBase(self,dom,*gens,**opts)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.__eq__(self,other)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.__hash__(self)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.__str__(self)
sympy.polys.domains.old_polynomialring.PolynomialRingBase._sdm_to_dics(self,s,n)
sympy.polys.domains.old_polynomialring.PolynomialRingBase._sdm_to_vector(self,s,n)
sympy.polys.domains.old_polynomialring.PolynomialRingBase._vector_to_sdm(self,v,order)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.factorial(self,a)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.frac_field(self,*gens)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.free_module(self,rank)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_GlobalPolynomialRing(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_QQ(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_QQ_python(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_RealField(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_ZZ(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_ZZ_python(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.gcd(self,a,b)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.gcdex(self,a,b)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.get_field(self)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.lcm(self,a,b)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.new(self,element)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.poly_ring(self,*gens)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.revert(self,a)
sympy.polys.domains.old_polynomialring._vector_to_sdm_helper(v,order)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/gmpyfinitefield.py----------------------------------------
sympy.GMPYFiniteField(self,mod,symmetric=True)
sympy.polys.domains.gmpyfinitefield.GMPYFiniteField(self,mod,symmetric=True)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/complexfield.py----------------------------------------
A:sympy.polys.domains.complexfield.context->MPContext(prec, dps, tol, False)
A:sympy.polys.domains.complexfield.self.zero->self.dtype(0)
A:sympy.polys.domains.complexfield.self.one->self.dtype(1)
A:sympy.polys.domains.complexfield.number->expr.evalf(n=self.dps)
A:sympy.polys.domains.complexfield.(real, imag)->expr.evalf(n=self.dps).as_real_imag()
A:sympy.polys.domains.complexfield.CC->ComplexField()
sympy.ComplexField(self,prec=_default_precision,dps=None,tol=None)
sympy.polys.domains.complexfield.ComplexField(self,prec=_default_precision,dps=None,tol=None)
sympy.polys.domains.complexfield.ComplexField.__eq__(self,other)
sympy.polys.domains.complexfield.ComplexField.__hash__(self)
sympy.polys.domains.complexfield.ComplexField.almosteq(self,a,b,tolerance=None)
sympy.polys.domains.complexfield.ComplexField.dps(self)
sympy.polys.domains.complexfield.ComplexField.from_AlgebraicField(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_ComplexField(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_GaussianIntegerRing(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_GaussianRationalField(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_QQ(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_QQ_gmpy(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_QQ_python(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_RealField(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_ZZ(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_ZZ_gmpy(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_ZZ_python(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_sympy(self,expr)
sympy.polys.domains.complexfield.ComplexField.gcd(self,a,b)
sympy.polys.domains.complexfield.ComplexField.get_exact(self)
sympy.polys.domains.complexfield.ComplexField.get_ring(self)
sympy.polys.domains.complexfield.ComplexField.has_default_precision(self)
sympy.polys.domains.complexfield.ComplexField.is_negative(self,element)
sympy.polys.domains.complexfield.ComplexField.is_nonnegative(self,element)
sympy.polys.domains.complexfield.ComplexField.is_nonpositive(self,element)
sympy.polys.domains.complexfield.ComplexField.is_positive(self,element)
sympy.polys.domains.complexfield.ComplexField.lcm(self,a,b)
sympy.polys.domains.complexfield.ComplexField.precision(self)
sympy.polys.domains.complexfield.ComplexField.to_sympy(self,element)
sympy.polys.domains.complexfield.ComplexField.tolerance(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/field.py----------------------------------------
A:sympy.polys.domains.field.ring->self.get_ring()
A:sympy.polys.domains.field.p->self.get_ring().lcm(self.numer(a), self.numer(b))
A:sympy.polys.domains.field.q->self.get_ring().gcd(self.denom(a), self.denom(b))
sympy.polys.domains.field.Field(Ring)
sympy.polys.domains.field.Field.div(self,a,b)
sympy.polys.domains.field.Field.exquo(self,a,b)
sympy.polys.domains.field.Field.gcd(self,a,b)
sympy.polys.domains.field.Field.get_field(self)
sympy.polys.domains.field.Field.get_ring(self)
sympy.polys.domains.field.Field.is_unit(self,a)
sympy.polys.domains.field.Field.lcm(self,a,b)
sympy.polys.domains.field.Field.quo(self,a,b)
sympy.polys.domains.field.Field.rem(self,a,b)
sympy.polys.domains.field.Field.revert(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/characteristiczero.py----------------------------------------
sympy.polys.domains.characteristiczero.CharacteristicZero(Domain)
sympy.polys.domains.characteristiczero.CharacteristicZero.characteristic(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/old_fractionfield.py----------------------------------------
A:sympy.polys.domains.old_fractionfield.self.ngens->len(gens)
A:sympy.polys.domains.old_fractionfield.self.zero->self.dtype.zero(lev, dom, ring=self)
A:sympy.polys.domains.old_fractionfield.self.one->self.dtype.one(lev, dom, ring=self)
A:sympy.polys.domains.old_fractionfield.(p, q)->a.as_numer_denom()
A:sympy.polys.domains.old_fractionfield.(num, _)->dict_from_basic(p, gens=self.gens)
A:sympy.polys.domains.old_fractionfield.(den, _)->dict_from_basic(q, gens=self.gens)
A:sympy.polys.domains.old_fractionfield.num[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_fractionfield.den[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_fractionfield.(monoms, coeffs)->_dict_reorder(a.to_dict(), K0.gens, K1.gens)
A:sympy.polys.domains.old_fractionfield.(nmonoms, ncoeffs)->_dict_reorder(a.numer().to_dict(), K0.gens, K1.gens)
A:sympy.polys.domains.old_fractionfield.(dmonoms, dcoeffs)->_dict_reorder(a.denom().to_dict(), K0.gens, K1.gens)
sympy.polys.domains.old_FractionField(self,dom,*gens)
sympy.polys.domains.old_fractionfield.FractionField(self,dom,*gens)
sympy.polys.domains.old_fractionfield.FractionField.__eq__(self,other)
sympy.polys.domains.old_fractionfield.FractionField.__hash__(self)
sympy.polys.domains.old_fractionfield.FractionField.__str__(self)
sympy.polys.domains.old_fractionfield.FractionField.denom(self,a)
sympy.polys.domains.old_fractionfield.FractionField.factorial(self,a)
sympy.polys.domains.old_fractionfield.FractionField.frac_field(self,*gens)
sympy.polys.domains.old_fractionfield.FractionField.from_FractionField(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_GlobalPolynomialRing(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_QQ_python(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_RealField(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_ZZ(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_sympy(self,a)
sympy.polys.domains.old_fractionfield.FractionField.get_ring(self)
sympy.polys.domains.old_fractionfield.FractionField.is_negative(self,a)
sympy.polys.domains.old_fractionfield.FractionField.is_nonnegative(self,a)
sympy.polys.domains.old_fractionfield.FractionField.is_nonpositive(self,a)
sympy.polys.domains.old_fractionfield.FractionField.is_positive(self,a)
sympy.polys.domains.old_fractionfield.FractionField.new(self,element)
sympy.polys.domains.old_fractionfield.FractionField.numer(self,a)
sympy.polys.domains.old_fractionfield.FractionField.poly_ring(self,*gens)
sympy.polys.domains.old_fractionfield.FractionField.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/pythonrationalfield.py----------------------------------------
A:sympy.polys.domains.pythonrationalfield.zero->dtype(0)
A:sympy.polys.domains.pythonrationalfield.one->dtype(1)
A:sympy.polys.domains.pythonrationalfield.(p, q)->K0.to_rational(a)
sympy.polys.domains.PythonRationalField(self)
sympy.polys.domains.pythonrationalfield.PythonRationalField(self)
sympy.polys.domains.pythonrationalfield.PythonRationalField.denom(self,a)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_QQ_python(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_RealField(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_sympy(self,a)
sympy.polys.domains.pythonrationalfield.PythonRationalField.get_ring(self)
sympy.polys.domains.pythonrationalfield.PythonRationalField.numer(self,a)
sympy.polys.domains.pythonrationalfield.PythonRationalField.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/compositedomain.py----------------------------------------
A:sympy.polys.domains.compositedomain.symset->set(symbols)
A:sympy.polys.domains.compositedomain.newsyms->tuple((s for s in self.symbols if s not in symset))
A:sympy.polys.domains.compositedomain.domain->self.domain.drop(*symbols)
sympy.polys.domains.compositedomain.CompositeDomain(Domain)
sympy.polys.domains.compositedomain.CompositeDomain.drop(self,*symbols)
sympy.polys.domains.compositedomain.CompositeDomain.inject(self,*symbols)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/modularinteger.py----------------------------------------
A:sympy.polys.domains.modularinteger.val->self._get_val(other)
A:sympy.polys.domains.modularinteger._mod->_dom.convert(_mod)
sympy.polys.domains.modularinteger.ModularInteger(self,val)
sympy.polys.domains.modularinteger.ModularInteger.__add__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__bool__(self)
sympy.polys.domains.modularinteger.ModularInteger.__eq__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__ge__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__gt__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__hash__(self)
sympy.polys.domains.modularinteger.ModularInteger.__int__(self)
sympy.polys.domains.modularinteger.ModularInteger.__le__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__lt__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__mod__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__mul__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__ne__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__neg__(self)
sympy.polys.domains.modularinteger.ModularInteger.__pos__(self)
sympy.polys.domains.modularinteger.ModularInteger.__pow__(self,exp)
sympy.polys.domains.modularinteger.ModularInteger.__radd__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__repr__(self)
sympy.polys.domains.modularinteger.ModularInteger.__rmod__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__rmul__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__rsub__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__rtruediv__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__str__(self)
sympy.polys.domains.modularinteger.ModularInteger.__sub__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__truediv__(self,other)
sympy.polys.domains.modularinteger.ModularInteger._compare(self,other,op)
sympy.polys.domains.modularinteger.ModularInteger._get_val(cls,other)
sympy.polys.domains.modularinteger.ModularInteger._invert(cls,value)
sympy.polys.domains.modularinteger.ModularInteger.invert(self)
sympy.polys.domains.modularinteger.ModularInteger.parent(self)
sympy.polys.domains.modularinteger.ModularInteger.to_int(self)
sympy.polys.domains.modularinteger.ModularIntegerFactory(_mod,_dom,_sym,parent)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/gmpyintegerring.py----------------------------------------
A:sympy.polys.domains.gmpyintegerring.zero->dtype(0)
A:sympy.polys.domains.gmpyintegerring.one->dtype(1)
A:sympy.polys.domains.gmpyintegerring.tp->type(one)
A:sympy.polys.domains.gmpyintegerring.(p, q)->K0.to_rational(a)
A:sympy.polys.domains.gmpyintegerring.(h, s, t)->gmpy_gcdex(a, b)
sympy.GMPYIntegerRing(self)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing(self)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.factorial(self,a)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_FF_gmpy(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_FF_python(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_GaussianIntegerRing(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_QQ(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_QQ_python(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_RealField(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_ZZ_python(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_sympy(self,a)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.gcd(self,a,b)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.gcdex(self,a,b)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.lcm(self,a,b)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.sqrt(self,a)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/fractionfield.py----------------------------------------
A:sympy.polys.domains.fractionfield.field->FracField(symbols, domain_or_field, order)
A:sympy.polys.domains.fractionfield.a->K1.domain.convert_from(a, K0)
sympy.FractionField(self,domain_or_field,symbols=None,order=None)
sympy.polys.domains.fractionfield.FractionField(self,domain_or_field,symbols=None,order=None)
sympy.polys.domains.fractionfield.FractionField.__eq__(self,other)
sympy.polys.domains.fractionfield.FractionField.__hash__(self)
sympy.polys.domains.fractionfield.FractionField.__str__(self)
sympy.polys.domains.fractionfield.FractionField.denom(self,a)
sympy.polys.domains.fractionfield.FractionField.factorial(self,a)
sympy.polys.domains.fractionfield.FractionField.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_ComplexField(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_FractionField(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_GaussianIntegerRing(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_GaussianRationalField(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_QQ(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_QQ_python(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_RealField(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_ZZ(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_sympy(self,a)
sympy.polys.domains.fractionfield.FractionField.get_exact(self)
sympy.polys.domains.fractionfield.FractionField.get_ring(self)
sympy.polys.domains.fractionfield.FractionField.is_Exact(self)
sympy.polys.domains.fractionfield.FractionField.is_negative(self,a)
sympy.polys.domains.fractionfield.FractionField.is_nonnegative(self,a)
sympy.polys.domains.fractionfield.FractionField.is_nonpositive(self,a)
sympy.polys.domains.fractionfield.FractionField.is_positive(self,a)
sympy.polys.domains.fractionfield.FractionField.new(self,element)
sympy.polys.domains.fractionfield.FractionField.numer(self,a)
sympy.polys.domains.fractionfield.FractionField.one(self)
sympy.polys.domains.fractionfield.FractionField.order(self)
sympy.polys.domains.fractionfield.FractionField.to_sympy(self,a)
sympy.polys.domains.fractionfield.FractionField.zero(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/polynomialring.py----------------------------------------
A:sympy.polys.domains.polynomialring.ring->PolyRing(symbols, domain_or_ring, order)
A:sympy.polys.domains.polynomialring.u->self.domain.canonical_unit(a.LC)
A:sympy.polys.domains.polynomialring.a->K1.domain.convert_from(a, K0)
A:sympy.polys.domains.polynomialring.(q, r)->K0.numer(a).div(K0.denom(a))
A:sympy.polys.domains.polynomialring.ad->K1.domain.convert_from(a, K0).to_dict()
sympy.PolynomialRing(self,domain_or_ring,symbols=None,order=None)
sympy.polys.domains.polynomialring.PolynomialRing(self,domain_or_ring,symbols=None,order=None)
sympy.polys.domains.polynomialring.PolynomialRing.__eq__(self,other)
sympy.polys.domains.polynomialring.PolynomialRing.__hash__(self)
sympy.polys.domains.polynomialring.PolynomialRing.__str__(self)
sympy.polys.domains.polynomialring.PolynomialRing.canonical_unit(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.factorial(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_ComplexField(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_FractionField(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_GaussianIntegerRing(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_GaussianRationalField(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_GlobalPolynomialRing(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_QQ(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_QQ_python(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_RealField(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_ZZ(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_ZZ_python(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_sympy(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.gcd(self,a,b)
sympy.polys.domains.polynomialring.PolynomialRing.gcdex(self,a,b)
sympy.polys.domains.polynomialring.PolynomialRing.get_field(self)
sympy.polys.domains.polynomialring.PolynomialRing.is_negative(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.is_nonnegative(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.is_nonpositive(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.is_positive(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.is_unit(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.lcm(self,a,b)
sympy.polys.domains.polynomialring.PolynomialRing.new(self,element)
sympy.polys.domains.polynomialring.PolynomialRing.one(self)
sympy.polys.domains.polynomialring.PolynomialRing.order(self)
sympy.polys.domains.polynomialring.PolynomialRing.to_sympy(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.zero(self)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/pythonrational.py----------------------------------------
A:sympy.polys.domains.pythonrational.PythonRational->public(PythonMPQ)
sympy.polys.domains.pythonrational.sympify_pythonrational(arg)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/quotientring.py----------------------------------------
A:sympy.polys.domains.quotientring.om->self.ring.convert(om)
A:sympy.polys.domains.quotientring.o->self.ring.convert(o)
A:sympy.polys.domains.quotientring.self.zero->self(self.ring.zero)
A:sympy.polys.domains.quotientring.self.one->self(self.ring.one)
A:sympy.polys.domains.quotientring.a->self.ring(a)
sympy.polys.domains.quotientring.QuotientRing(self,ring,ideal)
sympy.polys.domains.quotientring.QuotientRing.__eq__(self,other)
sympy.polys.domains.quotientring.QuotientRing.__hash__(self)
sympy.polys.domains.quotientring.QuotientRing.__str__(self)
sympy.polys.domains.quotientring.QuotientRing.frac_field(self,*gens)
sympy.polys.domains.quotientring.QuotientRing.free_module(self,rank)
sympy.polys.domains.quotientring.QuotientRing.from_QuotientRing(self,a,K0)
sympy.polys.domains.quotientring.QuotientRing.from_ZZ(K1,a,K0)
sympy.polys.domains.quotientring.QuotientRing.from_sympy(self,a)
sympy.polys.domains.quotientring.QuotientRing.is_zero(self,a)
sympy.polys.domains.quotientring.QuotientRing.new(self,a)
sympy.polys.domains.quotientring.QuotientRing.poly_ring(self,*gens)
sympy.polys.domains.quotientring.QuotientRing.revert(self,a)
sympy.polys.domains.quotientring.QuotientRing.to_sympy(self,a)
sympy.polys.domains.quotientring.QuotientRingElement(self,ring,data)
sympy.polys.domains.quotientring.QuotientRingElement.__add__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__bool__(self)
sympy.polys.domains.quotientring.QuotientRingElement.__eq__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__mul__(self,o)
sympy.polys.domains.quotientring.QuotientRingElement.__ne__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__neg__(self)
sympy.polys.domains.quotientring.QuotientRingElement.__pow__(self,oth)
sympy.polys.domains.quotientring.QuotientRingElement.__rsub__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__rtruediv__(self,o)
sympy.polys.domains.quotientring.QuotientRingElement.__str__(self)
sympy.polys.domains.quotientring.QuotientRingElement.__sub__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__truediv__(self,o)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/finitefield.py----------------------------------------
A:sympy.polys.domains.finitefield.self.dtype->ModularIntegerFactory(mod, dom, symmetric, self)
A:sympy.polys.domains.finitefield.self.zero->self.dtype(0)
A:sympy.polys.domains.finitefield.self.one->self.dtype(1)
A:sympy.polys.domains.finitefield.(p, q)->K0.to_rational(a)
sympy.FiniteField(self,mod,symmetric=True)
sympy.polys.domains.finitefield.FiniteField(self,mod,symmetric=True)
sympy.polys.domains.finitefield.FiniteField.__eq__(self,other)
sympy.polys.domains.finitefield.FiniteField.__hash__(self)
sympy.polys.domains.finitefield.FiniteField.__str__(self)
sympy.polys.domains.finitefield.FiniteField.characteristic(self)
sympy.polys.domains.finitefield.FiniteField.from_FF(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_FF_gmpy(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_FF_python(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_QQ(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_QQ_gmpy(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_QQ_python(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_RealField(K1,a,K0)
sympy.polys.domains.finitefield.FiniteField.from_ZZ(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_ZZ_gmpy(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_ZZ_python(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_sympy(self,a)
sympy.polys.domains.finitefield.FiniteField.get_field(self)
sympy.polys.domains.finitefield.FiniteField.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/rationalfield.py----------------------------------------
A:sympy.polys.domains.rationalfield.zero->dtype(0)
A:sympy.polys.domains.rationalfield.one->dtype(1)
A:sympy.polys.domains.rationalfield.tp->type(one)
A:sympy.polys.domains.rationalfield.QQ->RationalField()
sympy.RationalField(self)
sympy.polys.domains.rationalfield.RationalField(self)
sympy.polys.domains.rationalfield.RationalField.algebraic_field(self,*extension,alias=None)
sympy.polys.domains.rationalfield.RationalField.denom(self,a)
sympy.polys.domains.rationalfield.RationalField.div(self,a,b)
sympy.polys.domains.rationalfield.RationalField.exquo(self,a,b)
sympy.polys.domains.rationalfield.RationalField.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_GaussianRationalField(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_QQ(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_QQ_python(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_RealField(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_ZZ(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField.from_sympy(self,a)
sympy.polys.domains.rationalfield.RationalField.get_ring(self)
sympy.polys.domains.rationalfield.RationalField.numer(self,a)
sympy.polys.domains.rationalfield.RationalField.quo(self,a,b)
sympy.polys.domains.rationalfield.RationalField.rem(self,a,b)
sympy.polys.domains.rationalfield.RationalField.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/pythonintegerring.py----------------------------------------
A:sympy.polys.domains.pythonintegerring.zero->dtype(0)
A:sympy.polys.domains.pythonintegerring.one->dtype(1)
A:sympy.polys.domains.pythonintegerring.(p, q)->K0.to_rational(a)
sympy.PythonIntegerRing(self)
sympy.polys.domains.pythonintegerring.PythonIntegerRing(self)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.factorial(self,a)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_FF_gmpy(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_FF_python(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_QQ(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_QQ_python(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_RealField(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_ZZ_python(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_sympy(self,a)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.gcd(self,a,b)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.gcdex(self,a,b)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.lcm(self,a,b)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.sqrt(self,a)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/expressionrawdomain.py----------------------------------------
A:sympy.polys.domains.expressionrawdomain.EXRAW->ExpressionRawDomain()
sympy.polys.domains.expressionrawdomain.ExpressionRawDomain(self)
sympy.polys.domains.expressionrawdomain.ExpressionRawDomain.convert_from(self,a,K)
sympy.polys.domains.expressionrawdomain.ExpressionRawDomain.from_sympy(self,a)
sympy.polys.domains.expressionrawdomain.ExpressionRawDomain.get_field(self)
sympy.polys.domains.expressionrawdomain.ExpressionRawDomain.new(self,a)
sympy.polys.domains.expressionrawdomain.ExpressionRawDomain.sum(self,items)
sympy.polys.domains.expressionrawdomain.ExpressionRawDomain.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/algebraicfield.py----------------------------------------
A:sympy.polys.domains.algebraicfield.alias->getattr(ext[0], 'alias', None)
A:sympy.polys.domains.algebraicfield.self.ext->to_number_field(ext, alias=alias)
A:sympy.polys.domains.algebraicfield.self.unit->self([dom(1), dom(0)])
A:sympy.polys.domains.algebraicfield.self.zero->self.dtype.zero(self.mod.rep, dom)
A:sympy.polys.domains.algebraicfield.self.one->self.dtype.one(self.mod.rep, dom)
A:sympy.polys.domains.algebraicfield.self._converter->_make_converter(self)
A:sympy.polys.domains.algebraicfield.(ZK, dK)->round_two(self, radicals=self._nilradicals_mod_p)
A:sympy.polys.domains.algebraicfield.ZK->self.maximal_order()
A:sympy.polys.domains.algebraicfield.dK->self.discriminant()
A:sympy.polys.domains.algebraicfield.rad->self._nilradicals_mod_p.get(p)
A:sympy.polys.domains.algebraicfield.gen->K.ext.as_expr()
A:sympy.polys.domains.algebraicfield.algebraics->set().union(*terms)
A:sympy.polys.domains.algebraicfield.res->Add(*(Mul(c, a) for (c, a) in zip(coeffs_sympy, algebraics)))
sympy.AlgebraicField(self,dom,*ext,alias=None)
sympy.polys.domains.algebraicfield.AlgebraicField(self,dom,*ext,alias=None)
sympy.polys.domains.algebraicfield.AlgebraicField.__eq__(self,other)
sympy.polys.domains.algebraicfield.AlgebraicField.__hash__(self)
sympy.polys.domains.algebraicfield.AlgebraicField.__str__(self)
sympy.polys.domains.algebraicfield.AlgebraicField._do_round_two(self)
sympy.polys.domains.algebraicfield.AlgebraicField.algebraic_field(self,*extension,alias=None)
sympy.polys.domains.algebraicfield.AlgebraicField.denom(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.discriminant(self)
sympy.polys.domains.algebraicfield.AlgebraicField.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_GaussianIntegerRing(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_GaussianRationalField(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_QQ(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_QQ_python(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_RealField(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_ZZ(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_sympy(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.galois_group(self,by_name=False,max_tries=30,randomize=False)
sympy.polys.domains.algebraicfield.AlgebraicField.get_ring(self)
sympy.polys.domains.algebraicfield.AlgebraicField.integral_basis(self,fmt=None)
sympy.polys.domains.algebraicfield.AlgebraicField.is_negative(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.is_nonnegative(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.is_nonpositive(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.is_positive(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.maximal_order(self)
sympy.polys.domains.algebraicfield.AlgebraicField.new(self,element)
sympy.polys.domains.algebraicfield.AlgebraicField.numer(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.primes_above(self,p)
sympy.polys.domains.algebraicfield.AlgebraicField.to_alg_num(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.to_sympy(self,a)
sympy.polys.domains.algebraicfield._make_converter(K)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/domain.py----------------------------------------
A:sympy.polys.domains.domain._convert->getattr(self, method)
A:sympy.polys.domains.domain.result->_convert(element, base)
A:sympy.polys.domains.domain.parent->ComplexField(tol=False)
A:sympy.polys.domains.domain.element->sympify(element, strict=True)
A:sympy.polys.domains.domain.K1->K1.get_field().get_field()
A:sympy.polys.domains.domain.domain->domain.get_ring().get_ring()
A:sympy.polys.domains.domain.symbols->_unify_gens(K0_symbols, K1_symbols)
A:sympy.polys.domains.domain.prec->max(K0.precision, K1.precision)
A:sympy.polys.domains.domain.tol->max(K0.tolerance, K1.tolerance)
A:sympy.polys.domains.domain.K0->K0.get_field().get_field()
A:sympy.polys.domains.domain.root->CRootOf(poly, root_index)
A:sympy.polys.domains.domain.alpha->AlgebraicNumber(root, alias=alias)
A:sympy.polys.domains.domain.(s, t, h)->self.gcdex(a, b)
A:sympy.polys.domains.domain.gcd->self.gcd(a, b)
A:sympy.polys.domains.domain.cfa->self.quo(a, gcd)
A:sympy.polys.domains.domain.cfb->self.quo(b, gcd)
sympy.Domain(self)
sympy.polys.domains.domain.Domain(self)
sympy.polys.domains.domain.Domain.__contains__(self,a)
sympy.polys.domains.domain.Domain.__eq__(self,other)
sympy.polys.domains.domain.Domain.__getitem__(self,symbols)
sympy.polys.domains.domain.Domain.__hash__(self)
sympy.polys.domains.domain.Domain.__ne__(self,other)
sympy.polys.domains.domain.Domain.__repr__(self)
sympy.polys.domains.domain.Domain.__str__(self)
sympy.polys.domains.domain.Domain.abs(self,a)
sympy.polys.domains.domain.Domain.add(self,a,b)
sympy.polys.domains.domain.Domain.alg_field_from_poly(self,poly,alias=None,root_index=-1)
sympy.polys.domains.domain.Domain.algebraic_field(self,*extension,alias=None)
sympy.polys.domains.domain.Domain.almosteq(self,a,b,tolerance=None)
sympy.polys.domains.domain.Domain.canonical_unit(self,a)
sympy.polys.domains.domain.Domain.characteristic(self)
sympy.polys.domains.domain.Domain.cofactors(self,a,b)
sympy.polys.domains.domain.Domain.convert(self,element,base=None)
sympy.polys.domains.domain.Domain.convert_from(self,element,base)
sympy.polys.domains.domain.Domain.cyclotomic_field(self,n,ss=False,alias='zeta',gen=None,root_index=-1)
sympy.polys.domains.domain.Domain.denom(self,a)
sympy.polys.domains.domain.Domain.div(self,a,b)
sympy.polys.domains.domain.Domain.drop(self,*symbols)
sympy.polys.domains.domain.Domain.evalf(self,a,prec=None,**options)
sympy.polys.domains.domain.Domain.exquo(self,a,b)
sympy.polys.domains.domain.Domain.frac_field(self,*symbols,order=lex)
sympy.polys.domains.domain.Domain.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ComplexField(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ExpressionDomain(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ExpressionRawDomain(K1,a,K0)
sympy.polys.domains.domain.Domain.from_FF(K1,a,K0)
sympy.polys.domains.domain.Domain.from_FF_gmpy(K1,a,K0)
sympy.polys.domains.domain.Domain.from_FF_python(K1,a,K0)
sympy.polys.domains.domain.Domain.from_FractionField(K1,a,K0)
sympy.polys.domains.domain.Domain.from_GeneralizedPolynomialRing(K1,a,K0)
sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing(K1,a,K0)
sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension(K1,a,K0)
sympy.polys.domains.domain.Domain.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.domain.Domain.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.domain.Domain.from_QQ_python(K1,a,K0)
sympy.polys.domains.domain.Domain.from_RealField(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ZZ_python(K1,a,K0)
sympy.polys.domains.domain.Domain.from_sympy(self,a)
sympy.polys.domains.domain.Domain.gcd(self,a,b)
sympy.polys.domains.domain.Domain.gcdex(self,a,b)
sympy.polys.domains.domain.Domain.get_exact(self)
sympy.polys.domains.domain.Domain.get_field(self)
sympy.polys.domains.domain.Domain.get_ring(self)
sympy.polys.domains.domain.Domain.half_gcdex(self,a,b)
sympy.polys.domains.domain.Domain.imag(self,a)
sympy.polys.domains.domain.Domain.inject(self,*symbols)
sympy.polys.domains.domain.Domain.invert(self,a,b)
sympy.polys.domains.domain.Domain.is_negative(self,a)
sympy.polys.domains.domain.Domain.is_nonnegative(self,a)
sympy.polys.domains.domain.Domain.is_nonpositive(self,a)
sympy.polys.domains.domain.Domain.is_one(self,a)
sympy.polys.domains.domain.Domain.is_positive(self,a)
sympy.polys.domains.domain.Domain.is_zero(self,a)
sympy.polys.domains.domain.Domain.lcm(self,a,b)
sympy.polys.domains.domain.Domain.log(self,a,b)
sympy.polys.domains.domain.Domain.map(self,seq)
sympy.polys.domains.domain.Domain.mul(self,a,b)
sympy.polys.domains.domain.Domain.neg(self,a)
sympy.polys.domains.domain.Domain.new(self,*args)
sympy.polys.domains.domain.Domain.normal(self,*args)
sympy.polys.domains.domain.Domain.numer(self,a)
sympy.polys.domains.domain.Domain.of_type(self,element)
sympy.polys.domains.domain.Domain.old_frac_field(self,*symbols,**kwargs)
sympy.polys.domains.domain.Domain.old_poly_ring(self,*symbols,**kwargs)
sympy.polys.domains.domain.Domain.poly_ring(self,*symbols,order=lex)
sympy.polys.domains.domain.Domain.pos(self,a)
sympy.polys.domains.domain.Domain.pow(self,a,b)
sympy.polys.domains.domain.Domain.quo(self,a,b)
sympy.polys.domains.domain.Domain.real(self,a)
sympy.polys.domains.domain.Domain.rem(self,a,b)
sympy.polys.domains.domain.Domain.revert(self,a)
sympy.polys.domains.domain.Domain.sqrt(self,a)
sympy.polys.domains.domain.Domain.sub(self,a,b)
sympy.polys.domains.domain.Domain.sum(self,args)
sympy.polys.domains.domain.Domain.to_sympy(self,a)
sympy.polys.domains.domain.Domain.tp(self)
sympy.polys.domains.domain.Domain.unify(K0,K1,symbols=None)
sympy.polys.domains.domain.Domain.unify_with_symbols(K0,K1,symbols)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/simpledomain.py----------------------------------------
sympy.polys.domains.simpledomain.SimpleDomain(Domain)
sympy.polys.domains.simpledomain.SimpleDomain.inject(self,*gens)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/gaussiandomains.py----------------------------------------
A:sympy.polys.domains.gaussiandomains.obj->super().__new__(cls)
A:sympy.polys.domains.gaussiandomains.other->self._parent.convert(other)
A:sympy.polys.domains.gaussiandomains.(x, y)->self._get_xy(other)
A:sympy.polys.domains.gaussiandomains.qr->self.__rdivmod__(other)
A:sympy.polys.domains.gaussiandomains.q->GaussianInteger(qx, qy)
A:sympy.polys.domains.gaussiandomains.(r, b)->b.as_coeff_Mul()
A:sympy.polys.domains.gaussiandomains.x->self.dom.from_sympy(r)
A:sympy.polys.domains.gaussiandomains.y->self.dom.from_sympy(r)
A:sympy.polys.domains.gaussiandomains.zero->dtype(QQ(0), QQ(0))
A:sympy.polys.domains.gaussiandomains.one->dtype(QQ(1), QQ(0))
A:sympy.polys.domains.gaussiandomains.imag_unit->dtype(QQ(0), QQ(1))
A:sympy.polys.domains.gaussiandomains.unit->self.canonical_unit(d)
A:sympy.polys.domains.gaussiandomains.args->tuple((a * unit for a in args))
A:sympy.polys.domains.gaussiandomains.ZZ_IGaussianInteger._parent->GaussianIntegerRing()
A:sympy.polys.domains.gaussiandomains.ZZ_I->self.get_ring()
A:sympy.polys.domains.gaussiandomains.ZZ->self.dom.get_ring()
A:sympy.polys.domains.gaussiandomains.denom_ZZ->self.dom.get_ring().lcm(QQ.denom(a.x), QQ.denom(a.y))
A:sympy.polys.domains.gaussiandomains.QQ_IGaussianRational._parent->GaussianRationalField()
sympy.polys.domains.gaussiandomains.GaussianDomain
sympy.polys.domains.gaussiandomains.GaussianDomain.canonical_unit(self,d)
sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy(self,a)
sympy.polys.domains.gaussiandomains.GaussianDomain.inject(self,*gens)
sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative(self,element)
sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative(self,element)
sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive(self,element)
sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive(self,element)
sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy(self,a)
sympy.polys.domains.gaussiandomains.GaussianElement(cls,x,y=0)
sympy.polys.domains.gaussiandomains.GaussianElement.__add__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__bool__(self)
sympy.polys.domains.gaussiandomains.GaussianElement.__eq__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__floordiv__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__hash__(self)
sympy.polys.domains.gaussiandomains.GaussianElement.__lt__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__mod__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__mul__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__neg__(self)
sympy.polys.domains.gaussiandomains.GaussianElement.__pos__(self)
sympy.polys.domains.gaussiandomains.GaussianElement.__pow__(self,exp)
sympy.polys.domains.gaussiandomains.GaussianElement.__rdivmod__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__repr__(self)
sympy.polys.domains.gaussiandomains.GaussianElement.__rfloordiv__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__rmod__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__rsub__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__rtruediv__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement.__str__(self)
sympy.polys.domains.gaussiandomains.GaussianElement.__sub__(self,other)
sympy.polys.domains.gaussiandomains.GaussianElement._get_xy(cls,other)
sympy.polys.domains.gaussiandomains.GaussianElement.new(cls,x,y)
sympy.polys.domains.gaussiandomains.GaussianElement.parent(self)
sympy.polys.domains.gaussiandomains.GaussianElement.quadrant(self)
sympy.polys.domains.gaussiandomains.GaussianInteger(GaussianElement)
sympy.polys.domains.gaussiandomains.GaussianInteger.__divmod__(self,other)
sympy.polys.domains.gaussiandomains.GaussianInteger.__truediv__(self,other)
sympy.polys.domains.gaussiandomains.GaussianIntegerRing(self)
sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd(self,a,b)
sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field(self)
sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring(self)
sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm(self,a,b)
sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize(self,d,*args)
sympy.polys.domains.gaussiandomains.GaussianRational(GaussianElement)
sympy.polys.domains.gaussiandomains.GaussianRational.__divmod__(self,other)
sympy.polys.domains.gaussiandomains.GaussianRational.__truediv__(self,other)
sympy.polys.domains.gaussiandomains.GaussianRationalField(self)
sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField(self)
sympy.polys.domains.gaussiandomains.GaussianRationalField.denom(self,a)
sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField(K1,a,K0)
sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field(self)
sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring(self)
sympy.polys.domains.gaussiandomains.GaussianRationalField.numer(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/ring.py----------------------------------------
A:sympy.polys.domains.ring.(s, t, h)->self.gcdex(a, b)
A:sympy.polys.domains.ring.e->self.ideal(*e)
sympy.polys.domains.ring.Ring(Domain)
sympy.polys.domains.ring.Ring.__truediv__(self,e)
sympy.polys.domains.ring.Ring.denom(self,a)
sympy.polys.domains.ring.Ring.div(self,a,b)
sympy.polys.domains.ring.Ring.exquo(self,a,b)
sympy.polys.domains.ring.Ring.free_module(self,rank)
sympy.polys.domains.ring.Ring.get_ring(self)
sympy.polys.domains.ring.Ring.ideal(self,*gens)
sympy.polys.domains.ring.Ring.invert(self,a,b)
sympy.polys.domains.ring.Ring.is_unit(self,a)
sympy.polys.domains.ring.Ring.numer(self,a)
sympy.polys.domains.ring.Ring.quo(self,a,b)
sympy.polys.domains.ring.Ring.quotient_ring(self,e)
sympy.polys.domains.ring.Ring.rem(self,a,b)
sympy.polys.domains.ring.Ring.revert(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/integerring.py----------------------------------------
A:sympy.polys.domains.integerring.zero->dtype(0)
A:sympy.polys.domains.integerring.one->dtype(1)
A:sympy.polys.domains.integerring.tp->type(one)
A:sympy.polys.domains.integerring.(p, q)->K0.to_rational(a)
A:sympy.polys.domains.integerring.(h, s, t)->gcdex(a, b)
A:sympy.polys.domains.integerring.ZZ->IntegerRing()
sympy.IntegerRing(self)
sympy.polys.domains.integerring.IntegerRing(self)
sympy.polys.domains.integerring.IntegerRing.algebraic_field(self,*extension,alias=None)
sympy.polys.domains.integerring.IntegerRing.factorial(self,a)
sympy.polys.domains.integerring.IntegerRing.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_FF(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_FF_gmpy(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_FF_python(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_GaussianIntegerRing(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_QQ(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_QQ_python(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_RealField(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_ZZ(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_ZZ_python(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.from_sympy(self,a)
sympy.polys.domains.integerring.IntegerRing.gcd(self,a,b)
sympy.polys.domains.integerring.IntegerRing.gcdex(self,a,b)
sympy.polys.domains.integerring.IntegerRing.get_field(self)
sympy.polys.domains.integerring.IntegerRing.lcm(self,a,b)
sympy.polys.domains.integerring.IntegerRing.log(self,a,b)
sympy.polys.domains.integerring.IntegerRing.sqrt(self,a)
sympy.polys.domains.integerring.IntegerRing.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/expressiondomain.py----------------------------------------
A:sympy.polys.domains.expressiondomain.self.ex->sympify(ex)
A:sympy.polys.domains.expressiondomain.g->f._to_ex(g)
A:sympy.polys.domains.expressiondomain.n->f._to_ex(n)
A:sympy.polys.domains.expressiondomain.zero->Expression(0)
A:sympy.polys.domains.expressiondomain.one->Expression(1)
A:sympy.polys.domains.expressiondomain.EX->ExpressionDomain()
sympy.ExpressionDomain(self)
sympy.polys.domains.expressiondomain.ExpressionDomain(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression(self,ex)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__abs__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__add__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__bool__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__eq__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__hash__(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__mul__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__ne__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__neg__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__pow__(f,n)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__radd__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__repr__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__rmul__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__rsub__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__rtruediv__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__str__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__sub__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__truediv__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression._to_ex(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.as_expr(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.denom(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.gcd(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.lcm(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.numer(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.simplify(f,ex)
sympy.polys.domains.expressiondomain.ExpressionDomain.denom(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_ExpressionDomain(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_FractionField(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_GaussianIntegerRing(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_GaussianRationalField(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_QQ(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_QQ_python(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_RealField(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_ZZ(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_ZZ_python(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_sympy(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.gcd(self,a,b)
sympy.polys.domains.expressiondomain.ExpressionDomain.get_field(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.get_ring(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.is_negative(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.is_nonnegative(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.is_nonpositive(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.is_positive(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.lcm(self,a,b)
sympy.polys.domains.expressiondomain.ExpressionDomain.numer(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.to_sympy(self,a)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/tests/test_polynomialring.py----------------------------------------
A:sympy.polys.domains.tests.test_polynomialring.R->sympy.polys.domains.ZZ.old_poly_ring(x)
A:sympy.polys.domains.tests.test_polynomialring.Qxy->sympy.polys.domains.QQ.old_frac_field(x, y)
A:sympy.polys.domains.tests.test_polynomialring.X->sympy.polys.domains.ZZ.old_poly_ring(x).convert(x)
A:sympy.polys.domains.tests.test_polynomialring.Y->sympy.polys.domains.ZZ.old_poly_ring(x).convert(y)
A:sympy.polys.domains.tests.test_polynomialring.L->sympy.polys.domains.QQ.old_poly_ring(x, y, order='ilex')
A:sympy.polys.domains.tests.test_polynomialring.G->sympy.polys.domains.QQ.old_poly_ring(x, y)
sympy.polys.domains.tests.test_polynomialring.test_build_order()
sympy.polys.domains.tests.test_polynomialring.test_conversion()
sympy.polys.domains.tests.test_polynomialring.test_globalring()
sympy.polys.domains.tests.test_polynomialring.test_localring()
sympy.polys.domains.tests.test_polynomialring.test_units()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/tests/test_domains.py----------------------------------------
A:sympy.polys.domains.tests.test_domains.ALG->sympy.polys.domains.QQ.algebraic_field(sqrt(2), sqrt(3))
A:sympy.polys.domains.tests.test_domains.F3->FF(3)
A:sympy.polys.domains.tests.test_domains.sqrt5->sympy.polys.domains.QQ.algebraic_field(sqrt(5))
A:sympy.polys.domains.tests.test_domains.sqrt7->sympy.polys.domains.QQ.algebraic_field(sqrt(7))
A:sympy.polys.domains.tests.test_domains.sqrt57->sympy.polys.domains.QQ.algebraic_field(sqrt(5), sqrt(7))
A:sympy.polys.domains.tests.test_domains.KxZZ->FiniteExtension(Poly(x ** 2 - 2, x, domain=ZZ))
A:sympy.polys.domains.tests.test_domains.KxQQ->FiniteExtension(Poly(x ** 2 - 2, x, domain=QQ))
A:sympy.polys.domains.tests.test_domains.KxZZy->FiniteExtension(Poly(x ** 2 - 2, x, domain=ZZ[y]))
A:sympy.polys.domains.tests.test_domains.KxQQy->FiniteExtension(Poly(x ** 2 - 2, x, domain=QQ[y]))
A:sympy.polys.domains.tests.test_domains.K->sympy.polys.domains.gaussiandomains.ZZ_I.frac_field(x, y)
A:sympy.polys.domains.tests.test_domains.Kz->FiniteExtension(Poly(x ** 2 - 2, x, domain=ZZ[y, z]))
A:sympy.polys.domains.tests.test_domains.Kx->FiniteExtension(Poly(x ** 2 - 2, x, domain=ZZ))
A:sympy.polys.domains.tests.test_domains.Ky->FiniteExtension(Poly(x ** 2 - 1, x, domain=ZZ[y]))
A:sympy.polys.domains.tests.test_domains.Kxy->FiniteExtension(Poly(y ** 2 - 2, y, domain=Kx))
A:sympy.polys.domains.tests.test_domains.K3->sympy.polys.domains.ZZ.old_poly_ring(x, y).unify(K2)
A:sympy.polys.domains.tests.test_domains.QQ2->sympy.polys.domains.QQ.algebraic_field(sqrt(2))
A:sympy.polys.domains.tests.test_domains.QQ3->sympy.polys.domains.QQ.algebraic_field(sqrt(3))
A:sympy.polys.domains.tests.test_domains.(R, xr)->ring('x', ZZ)
A:sympy.polys.domains.tests.test_domains.K1->sympy.polys.domains.ZZ.old_poly_ring(x, y)
A:sympy.polys.domains.tests.test_domains.K2->sympy.polys.domains.ZZ.frac_field(x)
A:sympy.polys.domains.tests.test_domains.(R,)->ring('', ZZ)
A:sympy.polys.domains.tests.test_domains.(F,)->field('', ZZ)
A:sympy.polys.domains.tests.test_domains.seq->sympy.polys.domains.ZZ.map([[1, 2, 3, 4]])
A:sympy.polys.domains.tests.test_domains.alg->alg.alg_field_from_poly(g).alg_field_from_poly(g)
A:sympy.polys.domains.tests.test_domains.f->Poly(x ** 2 - 2)
A:sympy.polys.domains.tests.test_domains.g->Poly(x ** 2 - 3)
A:sympy.polys.domains.tests.test_domains.h->Poly(x ** 4 - 10 * x ** 2 + 1)
A:sympy.polys.domains.tests.test_domains.F->sympy.polys.domains.QQ.cyclotomic_field(3)
A:sympy.polys.domains.tests.test_domains.E->sympy.polys.domains.QQ.cyclotomic_field(3).cyclotomic_field(4)
A:sympy.polys.domains.tests.test_domains.(F, x, y)->field('x,y', QQ)
A:sympy.polys.domains.tests.test_domains.(R, X, Y)->ring('x,y', QQ)
A:sympy.polys.domains.tests.test_domains.(R, x, y)->ring('x,y', QQ)
A:sympy.polys.domains.tests.test_domains.(F, X, Y)->field('x,y', ZZ)
A:sympy.polys.domains.tests.test_domains.a->F3(F3(4))
A:sympy.polys.domains.tests.test_domains.F7->FF(7)
A:sympy.polys.domains.tests.test_domains.F5->FF(5)
A:sympy.polys.domains.tests.test_domains.f1->Float('1.01')
A:sympy.polys.domains.tests.test_domains.f2->Float('1.0000000000000000000001')
A:sympy.polys.domains.tests.test_domains.RR2->RealField(prec=f2._prec)
A:sympy.polys.domains.tests.test_domains.q->G(3, 4)
A:sympy.polys.domains.tests.test_domains.(i, r)->divmod(2, q)
A:sympy.polys.domains.tests.test_domains.PR->G.inject(x)
A:sympy.polys.domains.tests.test_domains.AF->G.as_AlgebraicField()
A:sympy.polys.domains.tests.test_domains.q2->G(S(3) / 2, S(5) / 3)
A:sympy.polys.domains.tests.test_domains.i->sympy.polys.domains.gaussiandomains.ZZ_I.frac_field(x, y).from_sympy(I)
A:sympy.polys.domains.tests.test_domains.eK->sympy.polys.domains.gaussiandomains.ZZ_I.frac_field(x, y).from_sympy(E)
A:sympy.polys.domains.tests.test_domains.k->sympy.polys.domains.QQ.algebraic_field(alpha)
A:sympy.polys.domains.tests.test_domains.alpha->AlgebraicNumber(sqrt(2), alias='alpha')
A:sympy.polys.domains.tests.test_domains.beta->sympy.polys.domains.QQ.algebraic_field(alpha).to_alg_num(k([1, 2, 3]))
sympy.polys.domains.tests.test_domains.test_AlgebraicField_alias()
sympy.polys.domains.tests.test_domains.test_CC_double()
sympy.polys.domains.tests.test_domains.test_Domain___eq__()
sympy.polys.domains.tests.test_domains.test_Domain__algebraic_field()
sympy.polys.domains.tests.test_domains.test_Domain__contains__()
sympy.polys.domains.tests.test_domains.test_Domain_alg_field_from_poly()
sympy.polys.domains.tests.test_domains.test_Domain_convert()
sympy.polys.domains.tests.test_domains.test_Domain_cyclotomic_field()
sympy.polys.domains.tests.test_domains.test_Domain_get_exact()
sympy.polys.domains.tests.test_domains.test_Domain_get_field()
sympy.polys.domains.tests.test_domains.test_Domain_get_ring()
sympy.polys.domains.tests.test_domains.test_Domain_is_negative()
sympy.polys.domains.tests.test_domains.test_Domain_is_nonnegative()
sympy.polys.domains.tests.test_domains.test_Domain_is_nonpositive()
sympy.polys.domains.tests.test_domains.test_Domain_is_positive()
sympy.polys.domains.tests.test_domains.test_Domain_is_unit()
sympy.polys.domains.tests.test_domains.test_Domain_map()
sympy.polys.domains.tests.test_domains.test_Domain_unify()
sympy.polys.domains.tests.test_domains.test_Domain_unify_FiniteExtension()
sympy.polys.domains.tests.test_domains.test_Domain_unify_algebraic()
sympy.polys.domains.tests.test_domains.test_Domain_unify_composite()
sympy.polys.domains.tests.test_domains.test_Domain_unify_with_symbols()
sympy.polys.domains.tests.test_domains.test_EX_EXRAW()
sympy.polys.domains.tests.test_domains.test_FF_of_type()
sympy.polys.domains.tests.test_domains.test_FractionField__init()
sympy.polys.domains.tests.test_domains.test_FractionField_convert()
sympy.polys.domains.tests.test_domains.test_FractionField_from_PolynomialRing()
sympy.polys.domains.tests.test_domains.test_GlobalPolynomialRing_convert()
sympy.polys.domains.tests.test_domains.test_ModularInteger()
sympy.polys.domains.tests.test_domains.test_PolynomialRing__init()
sympy.polys.domains.tests.test_domains.test_PolynomialRing_from_FractionField()
sympy.polys.domains.tests.test_domains.test_QQ_int()
sympy.polys.domains.tests.test_domains.test_RR_Float()
sympy.polys.domains.tests.test_domains.test_RR_double()
sympy.polys.domains.tests.test_domains.test_RealField_from_sympy()
sympy.polys.domains.tests.test_domains.test___eq__()
sympy.polys.domains.tests.test_domains.test_canonical_unit()
sympy.polys.domains.tests.test_domains.test_drop()
sympy.polys.domains.tests.test_domains.test_exponential_domain()
sympy.polys.domains.tests.test_domains.test_gaussian_domains()
sympy.polys.domains.tests.test_domains.test_inject()
sympy.polys.domains.tests.test_domains.test_issue_14433()
sympy.polys.domains.tests.test_domains.test_issue_18278()
sympy.polys.domains.tests.test_domains.test_not_in_any_domain()
sympy.polys.domains.tests.test_domains.unify(K0,K1)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/domains/tests/test_quotientring.py----------------------------------------
A:sympy.polys.domains.tests.test_quotientring.X->sympy.polys.domains.rationalfield.QQ.old_poly_ring(x, order='ilex').convert(x)
A:sympy.polys.domains.tests.test_quotientring.I->sympy.polys.domains.rationalfield.QQ.old_poly_ring(x, order='ilex').ideal(x)
A:sympy.polys.domains.tests.test_quotientring.Y->sympy.polys.domains.rationalfield.QQ.old_poly_ring(x).convert(x)
A:sympy.polys.domains.tests.test_quotientring.R->sympy.polys.domains.rationalfield.QQ.old_poly_ring(x, order='ilex')
sympy.polys.domains.tests.test_quotientring.test_QuotientRing()
sympy.polys.domains.tests.test_quotientring.test_QuotientRingElement()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/benchmarks/bench_groebnertools.py----------------------------------------
A:sympy.polys.benchmarks.bench_groebnertools.(R, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)->ring('x1:13', QQ)
sympy.polys.benchmarks.bench_groebnertools.time_vertex_color_12_vertices_23_edges()
sympy.polys.benchmarks.bench_groebnertools.time_vertex_color_12_vertices_24_edges()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/benchmarks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/benchmarks/bench_galoispolys.py----------------------------------------
A:sympy.polys.benchmarks.bench_galoispolys.p_10->genprime(10, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.f_10->gathen_poly(10, p_10, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.p_20->genprime(20, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.f_20->gathen_poly(20, p_20, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.P_08->genprime(8, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.F_10->shoup_poly(10, P_08, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.P_18->genprime(18, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.F_20->shoup_poly(20, P_18, ZZ)
sympy.polys.benchmarks.bench_galoispolys.gathen_poly(n,p,K)
sympy.polys.benchmarks.bench_galoispolys.genprime(n,K)
sympy.polys.benchmarks.bench_galoispolys.shoup_poly(n,p,K)
sympy.polys.benchmarks.bench_galoispolys.timeit_gathen_poly_f10_shoup()
sympy.polys.benchmarks.bench_galoispolys.timeit_gathen_poly_f10_zassenhaus()
sympy.polys.benchmarks.bench_galoispolys.timeit_gathen_poly_f20_shoup()
sympy.polys.benchmarks.bench_galoispolys.timeit_gathen_poly_f20_zassenhaus()
sympy.polys.benchmarks.bench_galoispolys.timeit_shoup_poly_F10_shoup()
sympy.polys.benchmarks.bench_galoispolys.timeit_shoup_poly_F10_zassenhaus()
sympy.polys.benchmarks.bench_galoispolys.timeit_shoup_poly_F20_shoup()
sympy.polys.benchmarks.bench_galoispolys.timeit_shoup_poly_F20_zassenhaus()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/benchmarks/bench_solvers.py----------------------------------------
A:sympy.polys.benchmarks.bench_solvers.(R_165, uk_0, uk_1, uk_2, uk_3, uk_4, uk_5, uk_6, uk_7, uk_8, uk_9, uk_10, uk_11, uk_12, uk_13, uk_14, uk_15, uk_16, uk_17, uk_18, uk_19, uk_20, uk_21, uk_22, uk_23, uk_24, uk_25, uk_26, uk_27, uk_28, uk_29, uk_30, uk_31, uk_32, uk_33, uk_34, uk_35, uk_36, uk_37, uk_38, uk_39, uk_40, uk_41, uk_42, uk_43, uk_44, uk_45, uk_46, uk_47, uk_48, uk_49, uk_50, uk_51, uk_52, uk_53, uk_54, uk_55, uk_56, uk_57, uk_58, uk_59, uk_60, uk_61, uk_62, uk_63, uk_64, uk_65, uk_66, uk_67, uk_68, uk_69, uk_70, uk_71, uk_72, uk_73, uk_74, uk_75, uk_76, uk_77, uk_78, uk_79, uk_80, uk_81, uk_82, uk_83, uk_84, uk_85, uk_86, uk_87, uk_88, uk_89, uk_90, uk_91, uk_92, uk_93, uk_94, uk_95, uk_96, uk_97, uk_98, uk_99, uk_100, uk_101, uk_102, uk_103, uk_104, uk_105, uk_106, uk_107, uk_108, uk_109, uk_110, uk_111, uk_112, uk_113, uk_114, uk_115, uk_116, uk_117, uk_118, uk_119, uk_120, uk_121, uk_122, uk_123, uk_124, uk_125, uk_126, uk_127, uk_128, uk_129, uk_130, uk_131, uk_132, uk_133, uk_134, uk_135, uk_136, uk_137, uk_138, uk_139, uk_140, uk_141, uk_142, uk_143, uk_144, uk_145, uk_146, uk_147, uk_148, uk_149, uk_150, uk_151, uk_152, uk_153, uk_154, uk_155, uk_156, uk_157, uk_158, uk_159, uk_160, uk_161, uk_162, uk_163, uk_164)->ring('uk_:165', QQ)
A:sympy.polys.benchmarks.bench_solvers.eqs->eqs_10x8()
A:sympy.polys.benchmarks.bench_solvers.sol->sol_10x8()
A:sympy.polys.benchmarks.bench_solvers.(F_abc, a, b, c)->field('a,b,c', ZZ)
A:sympy.polys.benchmarks.bench_solvers.(R_49, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49)->ring('k1:50', F_abc)
A:sympy.polys.benchmarks.bench_solvers.(F_a5_5, a_11, a_12, a_13, a_14, a_21, a_22, a_23, a_24, a_31, a_32, a_33, a_34, a_41, a_42, a_43, a_44)->field('a_(1:5)(1:5)', ZZ)
A:sympy.polys.benchmarks.bench_solvers.(R_8, x0, x1, x2, x3, x4, x5, x6, x7)->ring('x:8', F_a5_5)
sympy.polys.benchmarks.bench_solvers.eqs_10x8()
sympy.polys.benchmarks.bench_solvers.eqs_165x165()
sympy.polys.benchmarks.bench_solvers.eqs_189x49()
sympy.polys.benchmarks.bench_solvers.sol_10x8()
sympy.polys.benchmarks.bench_solvers.sol_165x165()
sympy.polys.benchmarks.bench_solvers.sol_189x49()
sympy.polys.benchmarks.bench_solvers.time_eqs_10x8()
sympy.polys.benchmarks.bench_solvers.time_eqs_165x165()
sympy.polys.benchmarks.bench_solvers.time_eqs_189x49()
sympy.polys.benchmarks.bench_solvers.time_solve_lin_sys_10x8()
sympy.polys.benchmarks.bench_solvers.time_solve_lin_sys_165x165()
sympy.polys.benchmarks.bench_solvers.time_solve_lin_sys_189x49()
sympy.polys.benchmarks.bench_solvers.time_to_expr_eqs_10x8()
sympy.polys.benchmarks.bench_solvers.time_to_expr_eqs_165x165()
sympy.polys.benchmarks.bench_solvers.time_to_expr_eqs_189x49()
sympy.polys.benchmarks.bench_solvers.time_verify_sol_10x8()
sympy.polys.benchmarks.bench_solvers.time_verify_sol_165x165()
sympy.polys.benchmarks.bench_solvers.time_verify_sol_189x49()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/domainscalar.py----------------------------------------
A:sympy.polys.matrices.domainscalar.obj->super().__new__(cls)
A:sympy.polys.matrices.domainscalar.[domain, [element]]->construct_domain([expr])
A:sympy.polys.matrices.domainscalar.element->self.domain.unify(other.domain).convert_from(self.element, self.domain)
A:sympy.polys.matrices.domainscalar.domain->self.domain.unify(other.domain)
A:sympy.polys.matrices.domainscalar.(self, other)->self.unify(other)
A:sympy.polys.matrices.domainscalar.other->DomainScalar(ZZ(other), ZZ)
A:sympy.polys.matrices.domainscalar.(q, r)->self.domain.div(self.element, other.element)
sympy.polys.matrices.domainscalar.DomainScalar(cls,element,domain)
sympy.polys.matrices.domainscalar.DomainScalar.__add__(self,other)
sympy.polys.matrices.domainscalar.DomainScalar.__divmod__(self,other)
sympy.polys.matrices.domainscalar.DomainScalar.__eq__(self,other)
sympy.polys.matrices.domainscalar.DomainScalar.__floordiv__(self,other)
sympy.polys.matrices.domainscalar.DomainScalar.__mod__(self,other)
sympy.polys.matrices.domainscalar.DomainScalar.__mul__(self,other)
sympy.polys.matrices.domainscalar.DomainScalar.__pos__(self)
sympy.polys.matrices.domainscalar.DomainScalar.__pow__(self,n)
sympy.polys.matrices.domainscalar.DomainScalar.__repr__(self)
sympy.polys.matrices.domainscalar.DomainScalar.__sub__(self,other)
sympy.polys.matrices.domainscalar.DomainScalar.convert_to(self,domain)
sympy.polys.matrices.domainscalar.DomainScalar.from_sympy(cls,expr)
sympy.polys.matrices.domainscalar.DomainScalar.is_one(self)
sympy.polys.matrices.domainscalar.DomainScalar.is_zero(self)
sympy.polys.matrices.domainscalar.DomainScalar.new(cls,element,domain)
sympy.polys.matrices.domainscalar.DomainScalar.to_domain(self,domain)
sympy.polys.matrices.domainscalar.DomainScalar.to_sympy(self)
sympy.polys.matrices.domainscalar.DomainScalar.unify(self,other)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/eigen.py----------------------------------------
A:sympy.polys.matrices.eigen.charpoly->A.charpoly()
A:sympy.polys.matrices.eigen.(_, factors)->dup_factor_list(charpoly, domain)
A:sympy.polys.matrices.eigen.EE->DomainMatrix(EE_items, (rows, cols), field)
A:sympy.polys.matrices.eigen.basis->(AA - EE).nullspace()
A:sympy.polys.matrices.eigen.minpoly->minpoly.as_expr().as_expr()
A:sympy.polys.matrices.eigen.field->FiniteExtension(minpoly)
A:sympy.polys.matrices.eigen.eigenval->field(l)
A:sympy.polys.matrices.eigen.AA->DomainMatrix(AA_items, (rows, cols), field)
A:sympy.polys.matrices.eigen.eigenvects->eigenvects.rep.to_ddm().rep.to_ddm()
A:sympy.polys.matrices.eigen.eigenvalue->FiniteExtension(minpoly).to_sympy(eigenvalue)
A:sympy.polys.matrices.eigen.degree->minpoly.as_expr().as_expr().degree()
A:sympy.polys.matrices.eigen.eigenvals->roots(minpoly, l, **kwargs)
sympy.polys.matrices.eigen.dom_eigenvects(A,l=Dummy('lambda'))
sympy.polys.matrices.eigen.dom_eigenvects_to_sympy(rational_eigenvects,algebraic_eigenvects,Matrix,**kwargs)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/normalforms.py----------------------------------------
A:sympy.polys.matrices.normalforms.invs->invariant_factors(lower_right)
A:sympy.polys.matrices.normalforms.smf->domainmatrix.DomainMatrix.diag(invs, m.domain, m.shape)
A:sympy.polys.matrices.normalforms.m->clear_row(m)
A:sympy.polys.matrices.normalforms.(d, r)->domain.div(m[0][j], pivot)
A:sympy.polys.matrices.normalforms.(a, b, g)->domain.gcdex(pivot, m[0][j])
A:sympy.polys.matrices.normalforms.lower_right->DomainMatrix([r[1:] for r in m[1:]], (rows - 1, cols - 1), domain)
A:sympy.polys.matrices.normalforms.g->domain.gcd(result[i + 1], result[i])
A:sympy.polys.matrices.normalforms.(x, y, g)->sympy.polys.domains.ZZ.gcdex(a, b)
A:sympy.polys.matrices.normalforms.A->A.to_dense().rep.copy().to_dense().rep.copy()
A:sympy.polys.matrices.normalforms.(u, v, d)->_gcdex(b, R)
A:sympy.polys.matrices.normalforms.m[k][i]->symmetric_residue((a * e + b * m[k][j]) % R, R)
A:sympy.polys.matrices.normalforms.m[k][j]->symmetric_residue((c * e + d * m[k][j]) % R, R)
A:sympy.polys.matrices.normalforms.W->defaultdict(dict)
sympy.polys.matrices.normalforms._gcdex(a,b)
sympy.polys.matrices.normalforms._hermite_normal_form(A)
sympy.polys.matrices.normalforms._hermite_normal_form_modulo_D(A,D)
sympy.polys.matrices.normalforms.add_columns(m,i,j,a,b,c,d)
sympy.polys.matrices.normalforms.hermite_normal_form(A,*,D=None,check_rank=False)
sympy.polys.matrices.normalforms.invariant_factors(m)
sympy.polys.matrices.normalforms.smith_normal_form(m)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/_typing.py----------------------------------------
A:sympy.polys.matrices._typing.T->TypeVar('T')
sympy.polys.matrices._typing.RingElement(Protocol)
sympy.polys.matrices._typing.RingElement.__add__(self:T,other:T,/)->T
sympy.polys.matrices._typing.RingElement.__mul__(self:T,other:T,/)->T
sympy.polys.matrices._typing.RingElement.__neg__(self:T,/)->T
sympy.polys.matrices._typing.RingElement.__pow__(self:T,other:int,/)->T
sympy.polys.matrices._typing.RingElement.__sub__(self:T,other:T,/)->T


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/lll.py----------------------------------------
A:sympy.polys.matrices.lll.y->x.copy()
A:sympy.polys.matrices.lll.y_star->x.zeros((m, n), QQ)
A:sympy.polys.matrices.lll.mu->x.zeros((m, m), QQ)
A:sympy.polys.matrices.lll.half->QQ(1, 2)
A:sympy.polys.matrices.lll.r->closest_integer(mu[rows[0]][rows[1]])
A:sympy.polys.matrices.lll.row_dot->dot_rows(y, y_star, (i, j))
A:sympy.polys.matrices.lll.g_star[i]->dot_rows(y_star, y_star, (i, i))
A:sympy.polys.matrices.lll.k->max(k - 1, 1)
sympy.polys.matrices.lll._ddm_lll(x,delta=QQ(3,4),return_transform=False)
sympy.polys.matrices.lll.ddm_lll(x,delta=QQ(3,4))
sympy.polys.matrices.lll.ddm_lll_transform(x,delta=QQ(3,4))


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/dense.py----------------------------------------
A:sympy.polys.matrices.dense.T->TypeVar('T')
A:sympy.polys.matrices.dense.R->TypeVar('R', bound=RingElement)
A:sympy.polys.matrices.dense.cT->list(zip(*c))
A:sympy.polys.matrices.dense.ai[j]->sum(map(mul, bi, cTj), ai[j])
A:sympy.polys.matrices.dense.m->len(M)
A:sympy.polys.matrices.dense.n->len(M[0])
A:sympy.polys.matrices.dense.ip->max(range(i, m), key=lambda ip: abs(a[ip][j]))
A:sympy.polys.matrices.dense.a[i][j]->exquo(a[i][j] * a[k][k] - a[i][k] * a[k][j], akkm1)
A:sympy.polys.matrices.dense.pivots->ddm_irref(Aaug)
A:sympy.polys.matrices.dense.swaps->ddm_ilu(U)
A:sympy.polys.matrices.dense.j->min(i, n)
A:sympy.polys.matrices.dense.m2->len(b)
A:sympy.polys.matrices.dense.o->len(b[0])
A:sympy.polys.matrices.dense.q->ddm_berk(A, K)
sympy.polys.matrices.dense.ddm_berk(M,K)
sympy.polys.matrices.dense.ddm_iadd(a:list[list[R]],b:Sequence[Sequence[R]])->None
sympy.polys.matrices.dense.ddm_idet(a,K)
sympy.polys.matrices.dense.ddm_iinv(ainv,a,K)
sympy.polys.matrices.dense.ddm_ilu(a)
sympy.polys.matrices.dense.ddm_ilu_solve(x,L,U,swaps,b)
sympy.polys.matrices.dense.ddm_ilu_split(L,U,K)
sympy.polys.matrices.dense.ddm_imatmul(a:list[list[R]],b:Sequence[Sequence[R]],c:Sequence[Sequence[R]])->None
sympy.polys.matrices.dense.ddm_imul(a:list[list[R]],b:R)->None
sympy.polys.matrices.dense.ddm_ineg(a:list[list[R]])->None
sympy.polys.matrices.dense.ddm_irmul(a:list[list[R]],b:R)->None
sympy.polys.matrices.dense.ddm_irref(a,_partial_pivot=False)
sympy.polys.matrices.dense.ddm_isub(a:list[list[R]],b:Sequence[Sequence[R]])->None
sympy.polys.matrices.dense.ddm_transpose(matrix:Sequence[Sequence[T]])->list[list[T]]


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/ddm.py----------------------------------------
A:sympy.polys.matrices.ddm.rows->list.__repr__(self)
A:sympy.polys.matrices.ddm.ddm->cls.zeros((size, size), domain)
A:sympy.polys.matrices.ddm.ddmT->ddm_transpose(self)
A:sympy.polys.matrices.ddm.c->a.zeros((m, n), a.domain)
A:sympy.polys.matrices.ddm.b->a.copy()
A:sympy.polys.matrices.ddm.Anew->list(A.copy())
A:sympy.polys.matrices.ddm.pivots->ddm_irref(b, _partial_pivot=partial_pivot)
A:sympy.polys.matrices.ddm.(rref, pivots)->a.rref()
A:sympy.polys.matrices.ddm.deta->ddm_idet(b, K)
A:sympy.polys.matrices.ddm.ainv->a.copy()
A:sympy.polys.matrices.ddm.U->a.copy()
A:sympy.polys.matrices.ddm.L->a.eye(m, K)
A:sympy.polys.matrices.ddm.swaps->ddm_ilu_split(L, U, K)
A:sympy.polys.matrices.ddm.(L, U, swaps)->a.lu()
A:sympy.polys.matrices.ddm.x->a.zeros((n, o), a.domain)
A:sympy.polys.matrices.ddm.vec->ddm_berk(a, K)
sympy.polys.matrices.ddm.DDM(self,rowslist,shape,domain)
sympy.polys.matrices.ddm.DDM.__add__(a,b)
sympy.polys.matrices.ddm.DDM.__eq__(self,other)
sympy.polys.matrices.ddm.DDM.__matmul__(a,b)
sympy.polys.matrices.ddm.DDM.__mul__(a,b)
sympy.polys.matrices.ddm.DDM.__ne__(self,other)
sympy.polys.matrices.ddm.DDM.__neg__(a)
sympy.polys.matrices.ddm.DDM.__repr__(self)
sympy.polys.matrices.ddm.DDM.__rmul__(a,b)
sympy.polys.matrices.ddm.DDM.__str__(self)
sympy.polys.matrices.ddm.DDM.__sub__(a,b)
sympy.polys.matrices.ddm.DDM._check(cls,a,op,b,ashape,bshape)
sympy.polys.matrices.ddm.DDM.add(a,b)
sympy.polys.matrices.ddm.DDM.applyfunc(self,func,domain)
sympy.polys.matrices.ddm.DDM.charpoly(a)
sympy.polys.matrices.ddm.DDM.convert_to(self,K)
sympy.polys.matrices.ddm.DDM.copy(self)
sympy.polys.matrices.ddm.DDM.det(a)
sympy.polys.matrices.ddm.DDM.extract(self,rows,cols)
sympy.polys.matrices.ddm.DDM.extract_slice(self,slice1,slice2)
sympy.polys.matrices.ddm.DDM.eye(cls,size,domain)
sympy.polys.matrices.ddm.DDM.flat(self)
sympy.polys.matrices.ddm.DDM.flatiter(self)
sympy.polys.matrices.ddm.DDM.getitem(self,i,j)
sympy.polys.matrices.ddm.DDM.hstack(A,*B)
sympy.polys.matrices.ddm.DDM.inv(a)
sympy.polys.matrices.ddm.DDM.is_lower(self)
sympy.polys.matrices.ddm.DDM.is_upper(self)
sympy.polys.matrices.ddm.DDM.is_zero_matrix(self)
sympy.polys.matrices.ddm.DDM.lll(A,delta=QQ(3,4))
sympy.polys.matrices.ddm.DDM.lll_transform(A,delta=QQ(3,4))
sympy.polys.matrices.ddm.DDM.lu(a)
sympy.polys.matrices.ddm.DDM.lu_solve(a,b)
sympy.polys.matrices.ddm.DDM.matmul(a,b)
sympy.polys.matrices.ddm.DDM.mul(a,b)
sympy.polys.matrices.ddm.DDM.mul_elementwise(a,b)
sympy.polys.matrices.ddm.DDM.neg(a)
sympy.polys.matrices.ddm.DDM.nullspace(a)
sympy.polys.matrices.ddm.DDM.ones(cls,shape,domain)
sympy.polys.matrices.ddm.DDM.particular(a)
sympy.polys.matrices.ddm.DDM.rmul(a,b)
sympy.polys.matrices.ddm.DDM.rref(a)
sympy.polys.matrices.ddm.DDM.scc(a)
sympy.polys.matrices.ddm.DDM.setitem(self,i,j,value)
sympy.polys.matrices.ddm.DDM.sub(a,b)
sympy.polys.matrices.ddm.DDM.to_ddm(self)
sympy.polys.matrices.ddm.DDM.to_dok(self)
sympy.polys.matrices.ddm.DDM.to_list(self)
sympy.polys.matrices.ddm.DDM.to_list_flat(self)
sympy.polys.matrices.ddm.DDM.to_sdm(self)
sympy.polys.matrices.ddm.DDM.transpose(self)
sympy.polys.matrices.ddm.DDM.vstack(A,*B)
sympy.polys.matrices.ddm.DDM.zeros(cls,shape,domain)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/exceptions.py----------------------------------------
sympy.polys.matrices.exceptions.DMBadInputError(DMError)
sympy.polys.matrices.exceptions.DMDomainError(DMError)
sympy.polys.matrices.exceptions.DMError(Exception)
sympy.polys.matrices.exceptions.DMFormatError(DMError)
sympy.polys.matrices.exceptions.DMNonInvertibleMatrixError(DMError)
sympy.polys.matrices.exceptions.DMNonSquareMatrixError(DMShapeError)
sympy.polys.matrices.exceptions.DMNotAField(DMDomainError)
sympy.polys.matrices.exceptions.DMRankError(DMError)
sympy.polys.matrices.exceptions.DMShapeError(DMError)
sympy.polys.matrices.exceptions.DMValueError(DMError)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/domainmatrix.py----------------------------------------
A:sympy.polys.matrices.domainmatrix.rep->rep.to_ddm().to_ddm()
A:sympy.polys.matrices.domainmatrix.arg->dict(rep)
A:sympy.polys.matrices.domainmatrix.i->slice(i, i + 1)
A:sympy.polys.matrices.domainmatrix.j->slice(j, j + 1)
A:sympy.polys.matrices.domainmatrix.self->super().__new__(cls)
A:sympy.polys.matrices.domainmatrix.nrows->len(rows)
A:sympy.polys.matrices.domainmatrix.(domain, items_domain)->cls.get_domain(items_sympy, **kwargs)
A:sympy.polys.matrices.domainmatrix.(K, items_K)->construct_domain(items_sympy, **kwargs)
A:sympy.polys.matrices.domainmatrix.K->super().__new__(cls).domain.get_field()
A:sympy.polys.matrices.domainmatrix.domain->reduce(lambda x, y: x.unify(y), domains)
A:sympy.polys.matrices.domainmatrix.matrices->DomainMatrix._unify_fmt(*matrices, fmt=fmt)
A:sympy.polys.matrices.domainmatrix.elemlist->super().__new__(cls).rep.to_list()
A:sympy.polys.matrices.domainmatrix.(rref, pivots)->super().__new__(cls).rref()
A:sympy.polys.matrices.domainmatrix.(A, *B)->A.unify(*B, fmt='dense')
A:sympy.polys.matrices.domainmatrix.(A, B)->A.unify(B)
A:sympy.polys.matrices.domainmatrix.lamda->DomainScalar(ZZ(lamda), ZZ)
A:sympy.polys.matrices.domainmatrix.(A, lamda)->A.to_field().unify(lamda)
A:sympy.polys.matrices.domainmatrix.(rref_ddm, pivots)->super().__new__(cls).rep.rref()
A:sympy.polys.matrices.domainmatrix.inv->super().__new__(cls).rep.inv()
A:sympy.polys.matrices.domainmatrix.(L, U, swaps)->super().__new__(cls).rep.lu()
A:sympy.polys.matrices.domainmatrix.sol->super().__new__(cls).rep.lu_solve(rhs.rep)
A:sympy.polys.matrices.domainmatrix.Aaug->A.hstack(b)
A:sympy.polys.matrices.domainmatrix.(Arref, pivots)->A.hstack(b).rref()
A:sympy.polys.matrices.domainmatrix.particular->Arref.from_rep(Arref.rep.particular())
A:sympy.polys.matrices.domainmatrix.(nullspace_rep, nonpivots)->Arref[:, :-1].rep.nullspace()
A:sympy.polys.matrices.domainmatrix.nullspace->Arref.from_rep(nullspace_rep)
A:sympy.polys.matrices.domainmatrix.N->len(diagonal)
A:sympy.polys.matrices.domainmatrix.(reduced, transform)->A.rep.lll_transform(delta=delta)
sympy.polys.matrices.DM(rows,domain)
sympy.polys.matrices.DomainMatrix(cls,rows,shape,domain,*,fmt=None)
sympy.polys.matrices.domainmatrix.DM(rows,domain)
sympy.polys.matrices.domainmatrix.DomainMatrix(cls,rows,shape,domain,*,fmt=None)
sympy.polys.matrices.domainmatrix.DomainMatrix.__add__(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.__eq__(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.__getitem__(self,key)
sympy.polys.matrices.domainmatrix.DomainMatrix.__getnewargs__(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.__mul__(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.__neg__(A)
sympy.polys.matrices.domainmatrix.DomainMatrix.__pow__(A,n)
sympy.polys.matrices.domainmatrix.DomainMatrix.__repr__(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.__rmul__(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.__setitem__(self,key,value)
sympy.polys.matrices.domainmatrix.DomainMatrix.__sub__(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.__truediv__(A,lamda)
sympy.polys.matrices.domainmatrix.DomainMatrix._check(a,op,b,ashape,bshape)
sympy.polys.matrices.domainmatrix.DomainMatrix._scalarmul(A,lamda,reverse)
sympy.polys.matrices.domainmatrix.DomainMatrix._solve(A,b)
sympy.polys.matrices.domainmatrix.DomainMatrix._unify_domain(cls,*matrices)
sympy.polys.matrices.domainmatrix.DomainMatrix._unify_fmt(cls,*matrices,fmt=None)
sympy.polys.matrices.domainmatrix.DomainMatrix.add(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.applyfunc(self,func,domain=None)
sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to(self,K)
sympy.polys.matrices.domainmatrix.DomainMatrix.copy(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.det(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.diag(cls,diagonal,domain,shape=None)
sympy.polys.matrices.domainmatrix.DomainMatrix.extract(self,rowslist,colslist)
sympy.polys.matrices.domainmatrix.DomainMatrix.eye(cls,shape,domain)
sympy.polys.matrices.domainmatrix.DomainMatrix.flat(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix(cls,M,fmt='sparse',**kwargs)
sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy(cls,nrows,ncols,elemsdict,**kwargs)
sympy.polys.matrices.domainmatrix.DomainMatrix.from_list(cls,rows,domain)
sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy(cls,nrows,ncols,rows,**kwargs)
sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep(cls,rep)
sympy.polys.matrices.domainmatrix.DomainMatrix.get_domain(cls,items_sympy,**kwargs)
sympy.polys.matrices.domainmatrix.DomainMatrix.getitem_sympy(self,i,j)
sympy.polys.matrices.domainmatrix.DomainMatrix.hstack(A,*B)
sympy.polys.matrices.domainmatrix.DomainMatrix.inv(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.is_square(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.is_zero_matrix(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.lll(A,delta=QQ(3,4))
sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform(A,delta=QQ(3,4))
sympy.polys.matrices.domainmatrix.DomainMatrix.lu(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve(self,rhs)
sympy.polys.matrices.domainmatrix.DomainMatrix.matmul(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.mul(A,b)
sympy.polys.matrices.domainmatrix.DomainMatrix.mul_elementwise(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.neg(A)
sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.ones(cls,shape,domain)
sympy.polys.matrices.domainmatrix.DomainMatrix.pow(A,n)
sympy.polys.matrices.domainmatrix.DomainMatrix.rank(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.rmul(A,b)
sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.rref(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.rscalarmul(A,lamda)
sympy.polys.matrices.domainmatrix.DomainMatrix.scalarmul(A,lamda)
sympy.polys.matrices.domainmatrix.DomainMatrix.scc(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.sub(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.to_field(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.to_list(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.to_sympy(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.transpose(self)
sympy.polys.matrices.domainmatrix.DomainMatrix.unify(self,*others,fmt=None)
sympy.polys.matrices.domainmatrix.DomainMatrix.unify_eq(A,B)
sympy.polys.matrices.domainmatrix.DomainMatrix.vstack(A,*B)
sympy.polys.matrices.domainmatrix.DomainMatrix.zeros(cls,shape,domain,*,fmt='sparse')


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/linsolve.py----------------------------------------
A:sympy.polys.matrices.linsolve.nsyms->len(syms)
A:sympy.polys.matrices.linsolve.(eqsdict, const)->_linear_eq_to_dict(eqs, syms)
A:sympy.polys.matrices.linsolve.Aaug->Aaug.to_ddm().rref()[0].to_sdm().to_ddm().rref()[0].to_sdm()
A:sympy.polys.matrices.linsolve.(Arref, pivots, nzcols)->sdm_irref(Aaug)
A:sympy.polys.matrices.linsolve.P->sdm_particular_from_rref(Arref, nsyms + 1, pivots)
A:sympy.polys.matrices.linsolve.(V, nonpivots)->sdm_nullspace_from_rref(Arref, K.one, nsyms, pivots, nzcols)
A:sympy.polys.matrices.linsolve.sol->defaultdict(list)
A:sympy.polys.matrices.linsolve.elems->set(eqs_rhs).union(*(e.values() for e in eqs_coeffs))
A:sympy.polys.matrices.linsolve.(K, elems_K)->construct_domain(elems, field=True, extension=True)
A:sympy.polys.matrices.linsolve.elem_map->dict(zip(elems, elems_K))
A:sympy.polys.matrices.linsolve.neqs->len(eqs_coeffs)
A:sympy.polys.matrices.linsolve.sym2index->dict(zip(syms, range(nsyms)))
A:sympy.polys.matrices.linsolve.sdm_aug->SDM(enumerate(eqsdict), (neqs, nsyms + 1), K)
A:sympy.polys.matrices.linsolve.symset->set(syms)
A:sympy.polys.matrices.linsolve.(coeff, terms)->_lin_eq2dict(e.lhs, symset)
A:sympy.polys.matrices.linsolve.(cR, tR)->_lin_eq2dict(e.rhs, symset)
A:sympy.polys.matrices.linsolve.(c, d)->_lin_eq2dict(e, symset)
A:sympy.polys.matrices.linsolve.terms_list->defaultdict(list)
A:sympy.polys.matrices.linsolve.(ci, ti)->_lin_eq2dict(ai, symset)
A:sympy.polys.matrices.linsolve.coeff->sympy.core.mul.Mul._from_args(coeff_list)
sympy.polys.matrices.linsolve._lin_eq2dict(a,symset)
sympy.polys.matrices.linsolve._linear_eq_to_dict(eqs,syms)
sympy.polys.matrices.linsolve._linsolve(eqs,syms)
sympy.polys.matrices.linsolve.sympy_dict_to_dm(eqs_coeffs,eqs_rhs,syms)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/sdm.py----------------------------------------
A:sympy.polys.matrices.sdm.rowi->self.get(i, None)
A:sympy.polys.matrices.sdm.rowmap->defaultdict(list)
A:sympy.polys.matrices.sdm.colmap->defaultdict(list)
A:sympy.polys.matrices.sdm.rowset->set(rowmap)
A:sympy.polys.matrices.sdm.colset->set(colmap)
A:sympy.polys.matrices.sdm.sdm2[i2]->row2.copy()
A:sympy.polys.matrices.sdm.elemsstr->', '.join(('%s: %s' % (j, elem) for (j, elem) in row.items()))
A:sympy.polys.matrices.sdm.rows->dict.__repr__(self)
A:sympy.polys.matrices.sdm.row->dict(zip(range(n), [one] * n))
A:sympy.polys.matrices.sdm.MT->sdm_transpose(M)
A:sympy.polys.matrices.sdm.C->sdm_matmul(A, B, A.domain, m, o)
A:sympy.polys.matrices.sdm.Csdm->unop_dict(A, neg)
A:sympy.polys.matrices.sdm.Ak->unop_dict(A, lambda e: K.convert_from(e, Kold))
A:sympy.polys.matrices.sdm.V->range(rows)
A:sympy.polys.matrices.sdm.(B, pivots, _)->sdm_irref(A)
A:sympy.polys.matrices.sdm.(L, U, swaps)->A.to_ddm().lu()
A:sympy.polys.matrices.sdm.(B, pivots, nzcols)->sdm_irref(A)
A:sympy.polys.matrices.sdm.(K, nonpivots)->sdm_nullspace_from_rref(B, one, ncols, pivots, nzcols)
A:sympy.polys.matrices.sdm.K->dict(enumerate(K))
A:sympy.polys.matrices.sdm.P->sdm_particular_from_rref(B, ncols, pivots)
A:sympy.polys.matrices.sdm.Anew->dict(A.copy())
A:sympy.polys.matrices.sdm.Ai->sorted((Ai.copy() for Ai in A.values()), key=min).pop()
A:sympy.polys.matrices.sdm.(reduced, transform)->ddm_lll_transform(A.to_ddm(), delta=delta)
A:sympy.polys.matrices.sdm.Cij->dict(enumerate(K)).sum(Cij_list)
A:sympy.polys.matrices.sdm.Bij->f(Aij)
A:sympy.polys.matrices.sdm.B_knz->set(B)
A:sympy.polys.matrices.sdm.Ai_knz->set(Ai)
A:sympy.polys.matrices.sdm.Ci_list->defaultdict(list)
A:sympy.polys.matrices.sdm.Aik->A.get(i, {}).get(k, zero)
A:sympy.polys.matrices.sdm.Ci->sdm_matmul(A, B, A.domain, m, o).get(i, {})
A:sympy.polys.matrices.sdm.Arows->sorted((Ai.copy() for Ai in A.values()), key=min)
A:sympy.polys.matrices.sdm.reduced_pivots->set()
A:sympy.polys.matrices.sdm.nonreduced_pivots->set()
A:sympy.polys.matrices.sdm.nonzero_columns->defaultdict(set)
A:sympy.polys.matrices.sdm.Ainz->set(Ai)
A:sympy.polys.matrices.sdm.Ajnz->set(Aj)
A:sympy.polys.matrices.sdm.j->min(Ai)
A:sympy.polys.matrices.sdm.Aknz->set(Ak)
A:sympy.polys.matrices.sdm.pivots->sorted(reduced_pivots | nonreduced_pivots)
A:sympy.polys.matrices.sdm.rref->dict(enumerate(rows))
A:sympy.polys.matrices.sdm.nonpivots->sorted(set(range(ncols)) - set(pivots))
A:sympy.polys.matrices.sdm.Ain->A[i].get(ncols - 1, None)
sympy.polys.matrices.sdm.SDM(self,elemsdict,shape,domain)
sympy.polys.matrices.sdm.SDM.__add__(A,B)
sympy.polys.matrices.sdm.SDM.__mul__(A,B)
sympy.polys.matrices.sdm.SDM.__neg__(A)
sympy.polys.matrices.sdm.SDM.__repr__(self)
sympy.polys.matrices.sdm.SDM.__rmul__(a,b)
sympy.polys.matrices.sdm.SDM.__str__(self)
sympy.polys.matrices.sdm.SDM.__sub__(A,B)
sympy.polys.matrices.sdm.SDM.add(A,B)
sympy.polys.matrices.sdm.SDM.applyfunc(self,func,domain)
sympy.polys.matrices.sdm.SDM.charpoly(A)
sympy.polys.matrices.sdm.SDM.convert_to(A,K)
sympy.polys.matrices.sdm.SDM.copy(A)
sympy.polys.matrices.sdm.SDM.det(A)
sympy.polys.matrices.sdm.SDM.diag(cls,diagonal,domain,shape)
sympy.polys.matrices.sdm.SDM.extract(self,rows,cols)
sympy.polys.matrices.sdm.SDM.extract_slice(self,slice1,slice2)
sympy.polys.matrices.sdm.SDM.eye(cls,shape,domain)
sympy.polys.matrices.sdm.SDM.from_ddm(cls,ddm)
sympy.polys.matrices.sdm.SDM.from_list(cls,ddm,shape,domain)
sympy.polys.matrices.sdm.SDM.getitem(self,i,j)
sympy.polys.matrices.sdm.SDM.hstack(A,*B)
sympy.polys.matrices.sdm.SDM.inv(A)
sympy.polys.matrices.sdm.SDM.is_lower(self)
sympy.polys.matrices.sdm.SDM.is_upper(self)
sympy.polys.matrices.sdm.SDM.is_zero_matrix(self)
sympy.polys.matrices.sdm.SDM.lll(A,delta=QQ(3,4))
sympy.polys.matrices.sdm.SDM.lll_transform(A,delta=QQ(3,4))
sympy.polys.matrices.sdm.SDM.lu(A)
sympy.polys.matrices.sdm.SDM.lu_solve(A,b)
sympy.polys.matrices.sdm.SDM.matmul(A,B)
sympy.polys.matrices.sdm.SDM.mul(A,b)
sympy.polys.matrices.sdm.SDM.mul_elementwise(A,B)
sympy.polys.matrices.sdm.SDM.neg(A)
sympy.polys.matrices.sdm.SDM.new(cls,sdm,shape,domain)
sympy.polys.matrices.sdm.SDM.nullspace(A)
sympy.polys.matrices.sdm.SDM.ones(cls,shape,domain)
sympy.polys.matrices.sdm.SDM.particular(A)
sympy.polys.matrices.sdm.SDM.rmul(A,b)
sympy.polys.matrices.sdm.SDM.rref(A)
sympy.polys.matrices.sdm.SDM.scc(A)
sympy.polys.matrices.sdm.SDM.setitem(self,i,j,value)
sympy.polys.matrices.sdm.SDM.sub(A,B)
sympy.polys.matrices.sdm.SDM.to_ddm(M)
sympy.polys.matrices.sdm.SDM.to_dok(M)
sympy.polys.matrices.sdm.SDM.to_list(M)
sympy.polys.matrices.sdm.SDM.to_list_flat(M)
sympy.polys.matrices.sdm.SDM.to_sdm(M)
sympy.polys.matrices.sdm.SDM.transpose(M)
sympy.polys.matrices.sdm.SDM.vstack(A,*B)
sympy.polys.matrices.sdm.SDM.zeros(cls,shape,domain)
sympy.polys.matrices.sdm.binop_dict(A,B,fab,fa,fb)
sympy.polys.matrices.sdm.sdm_irref(A)
sympy.polys.matrices.sdm.sdm_matmul(A,B,K,m,o)
sympy.polys.matrices.sdm.sdm_matmul_exraw(A,B,K,m,o)
sympy.polys.matrices.sdm.sdm_nullspace_from_rref(A,one,ncols,pivots,nonzero_cols)
sympy.polys.matrices.sdm.sdm_particular_from_rref(A,ncols,pivots)
sympy.polys.matrices.sdm.sdm_transpose(M)
sympy.polys.matrices.sdm.unop_dict(A,f)


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_domainmatrix.py----------------------------------------
A:sympy.polys.matrices.tests.test_domainmatrix.ddm->DDM([[QQ(1, 2), QQ(3, 4)], [QQ(0, 1), QQ(0, 1)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.A->sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix(Matrix([[1, 2], [3, 4]]))
A:sympy.polys.matrices.tests.test_domainmatrix.sdm->SDM({0: {0: K.convert(1 + sqrt(2)), 1: K.convert(2 + sqrt(2))}, 1: {0: K.convert(3 + sqrt(2)), 1: K.convert(4 + sqrt(2))}}, (2, 2), K)
A:sympy.polys.matrices.tests.test_domainmatrix.dom->FF(7)
A:sympy.polys.matrices.tests.test_domainmatrix.K->sympy.polys.domains.QQ.algebraic_field(sqrt(2))
A:sympy.polys.matrices.tests.test_domainmatrix.B->DomainMatrix([[ZZ(2), ZZ(4)]], (1, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.B1->DomainMatrix([[QQ(1), QQ(2)], [QQ(3), QQ(4)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.B2->DomainMatrix([[QQ(1), QQ(3)], [QQ(3), QQ(4)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.B3->DomainMatrix([[ZZ(1)]], (1, 1), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.(K, items)->sympy.polys.matrices.domainmatrix.DomainMatrix.get_domain([1, 2, 3, Rational(1, 2)])
A:sympy.polys.matrices.tests.test_domainmatrix.Aq->DomainMatrix([[QQ(1), QQ(2)], [QQ(3), QQ(4)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.Acopy->sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix(Matrix([[1, 2], [3, 4]])).convert_to(None)
A:sympy.polys.matrices.tests.test_domainmatrix.A_sparse->sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix(Matrix([[1, 2], [3, 4]])).to_sparse()
A:sympy.polys.matrices.tests.test_domainmatrix.A_dense->sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix(Matrix([[1, 2], [3, 4]])).to_dense()
A:sympy.polys.matrices.tests.test_domainmatrix.Az->DomainMatrix([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.As->DomainMatrix([[ZZ(1), ZZ(2), ZZ(3)], [ZZ(0), ZZ(1), ZZ(0)], [ZZ(2), ZZ(0), ZZ(4)]], (3, 3), ZZ).to_sparse()
A:sympy.polys.matrices.tests.test_domainmatrix.Ad->DomainMatrix([[ZZ(1), ZZ(2), ZZ(3)], [ZZ(0), ZZ(1), ZZ(0)], [ZZ(2), ZZ(0), ZZ(4)]], (3, 3), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.(Bs, Bd)->DomainMatrix([[ZZ(1), ZZ(2), ZZ(3)], [ZZ(0), ZZ(1), ZZ(0)], [ZZ(2), ZZ(0), ZZ(4)]], (3, 3), ZZ).to_sparse().unify(Ad, fmt='sparse')
A:sympy.polys.matrices.tests.test_domainmatrix.AT->DomainMatrix([[ZZ(1), ZZ(3)], [ZZ(2), ZZ(4)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.A1->DomainMatrix([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.A2->DomainMatrix([[ZZ(7), ZZ(10)], [ZZ(15), ZZ(22)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.Asum->DomainMatrix([[QQ(2), QQ(4)], [QQ(6), QQ(8)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.Adiff->DomainMatrix([[QQ(0), QQ(0)], [QQ(0), QQ(0)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.Aneg->DomainMatrix([[ZZ(-1), ZZ(-2)], [ZZ(-3), ZZ(-4)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.Aprod->DomainMatrix([[QQ(7), QQ(10)], [QQ(15), QQ(22)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.AA->sympy.polys.matrices.domainmatrix.DomainMatrix.zeros((2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.x->DomainMatrix([[QQ(0)], [QQ(1, 2)]], (2, 1), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.C->DomainMatrix([[ZZ(9), ZZ(10)], [ZZ(11), ZZ(12)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.eye->sympy.polys.matrices.domainmatrix.DomainMatrix.eye(2, ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.A3->DomainMatrix([[ZZ(37), ZZ(54)], [ZZ(81), ZZ(118)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.(Ar, pivots)->sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix(Matrix([[1, 2], [3, 4]])).rref()
A:sympy.polys.matrices.tests.test_domainmatrix.Acol->DomainMatrix({0: {0: QQ(1), 1: QQ(1)}, 1: {0: QQ(2), 1: QQ(3)}}, (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.Anull->DomainMatrix([[QQ(-1), QQ(1)]], (1, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.b->DomainScalar(ZZ(1), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.particular->DomainMatrix([[1, 0]], (1, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.nullspace->DomainMatrix([[-2, 1]], (1, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.b3->DomainMatrix([[QQ(1)], [QQ(1)], [QQ(1)]], (3, 1), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.bz->DomainMatrix([[ZZ(1)], [ZZ(1)]], (2, 1), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.Ainv->DomainMatrix([[QQ(-2), QQ(1)], [QQ(3, 2), QQ(-1, 2)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.Ans->DomainMatrix([[QQ(1), QQ(2)]], (1, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.Aninv->DomainMatrix([[QQ(1), QQ(2)], [QQ(3), QQ(6)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.L->DomainMatrix(to_dom(L, QQ), (4, 4), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.U->DomainMatrix(to_dom(U, QQ), (4, 4), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.Abx->DomainMatrix([], (0, 0), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.AB->DomainMatrix([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)], [ZZ(5), ZZ(6)], [ZZ(7), ZZ(8)]], (4, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.ABC->DomainMatrix([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)], [ZZ(5), ZZ(6)], [ZZ(7), ZZ(8)], [ZZ(9), ZZ(10)], [ZZ(11), ZZ(12)]], (6, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.lamda->DomainScalar(QQ(3) / QQ(2), QQ)
A:sympy.polys.matrices.tests.test_domainmatrix.dM->DomainMatrix([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.val1->DomainMatrix([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)]], (2, 2), ZZ).getitem_sympy(0, 0)
A:sympy.polys.matrices.tests.test_domainmatrix.val2->DomainMatrix([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)]], (2, 2), ZZ).getitem_sympy(2, 2)
A:sympy.polys.matrices.tests.test_domainmatrix.dM1->DomainMatrix([[ZZ(1), ZZ(2), ZZ(3)], [ZZ(4), ZZ(5), ZZ(6)], [ZZ(7), ZZ(8), ZZ(9)]], (3, 3), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.dM2->DomainMatrix([[ZZ(1), ZZ(3)], [ZZ(7), ZZ(9)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.dM3->DomainMatrix([[ZZ(1), ZZ(2), ZZ(2)], [ZZ(4), ZZ(5), ZZ(5)], [ZZ(4), ZZ(5), ZZ(5)]], (3, 3), ZZ)
A:sympy.polys.matrices.tests.test_domainmatrix.dM[2, 2]->ZZ(2)
sympy.polys.matrices.tests.test_domainmatrix.test_DM()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_add()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_applyfunc()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_charpoly()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_columnspace()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_convert_to()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_det()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_diag()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_eq()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_extract()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_eye()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_flat()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_from_Matrix()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_from_dict_sympy()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_from_list()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_from_list_sympy()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_from_rep()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_get_domain()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_getitem()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_getitem_sympy()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_hstack()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_init()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_inv()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_is_lower()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_is_square()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_is_upper()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_is_zero_matrix()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_lu()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_lu_solve()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_mul()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_mul_elementwise()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_neg()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_nullspace()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_ones()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_pickling()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_pow()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_rank()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_repr()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_rowspace()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_rref()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_scalarmul()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_scc()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_setitem()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_solve()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_sub()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_to_Matrix()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_to_dense()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_to_dok()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_to_field()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_to_list()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_to_list_flat()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_to_sparse()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_to_sympy()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_transpose()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_truediv()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_unify()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_unify_eq()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_vstack()
sympy.polys.matrices.tests.test_domainmatrix.test_DomainMatrix_zeros()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_linsolve.py----------------------------------------
A:sympy.polys.matrices.tests.test_linsolve.sol_linsolve->_linsolve(eqs, [x, y, z])
sympy.polys.matrices.tests.test_linsolve.test__linsolve()
sympy.polys.matrices.tests.test_linsolve.test__linsolve_deprecated()
sympy.polys.matrices.tests.test_linsolve.test__linsolve_float()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_normalforms.py----------------------------------------
A:sympy.polys.matrices.tests.test_normalforms.m->DomainMatrix([[QQ(1)]], (1, 1), QQ)
A:sympy.polys.matrices.tests.test_normalforms.smf->DM([[1, 0, 0, 0], [0, 10, 0, 0], [0, 0, -30, 0], [0, 0, 0, 0]], ZZ)
A:sympy.polys.matrices.tests.test_normalforms.x->Symbol('x')
A:sympy.polys.matrices.tests.test_normalforms.zr->DomainMatrix([], (0, 2), ZZ)
A:sympy.polys.matrices.tests.test_normalforms.zc->DomainMatrix([[], []], (2, 0), ZZ)
A:sympy.polys.matrices.tests.test_normalforms.snf->DM([[1, 0, 0, 0], [0, 6, 0, 0], [0, 0, 0, 0]], ZZ)
A:sympy.polys.matrices.tests.test_normalforms.hnf->DM([[2, 1], [0, 1]], ZZ)
sympy.polys.matrices.tests.test_normalforms.test_hermite_normal()
sympy.polys.matrices.tests.test_normalforms.test_smith_normal()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_domainscalar.py----------------------------------------
A:sympy.polys.matrices.tests.test_domainscalar.A->DomainScalar(ZZ(1), ZZ)
A:sympy.polys.matrices.tests.test_domainscalar.B->DomainScalar(ZZ(0), ZZ)
A:sympy.polys.matrices.tests.test_domainscalar.expr->DomainScalar(ZZ(0), ZZ).to_sympy()
A:sympy.polys.matrices.tests.test_domainscalar.(A, B)->DomainScalar(ZZ(1), ZZ).unify(B)
A:sympy.polys.matrices.tests.test_domainscalar.dm->DomainMatrix([[ZZ(1), ZZ(2)], [ZZ(3), ZZ(4)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_domainscalar.C->DomainScalar(ZZ(2), ZZ)
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar___new__()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_add()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_convert_to()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_divmod()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_eq()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_floordiv()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_from_sympy()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_isOne()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_isZero()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_mod()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_mul()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_new()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_pos()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_pow()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_repr()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_sub()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_to_domain()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_to_sympy()
sympy.polys.matrices.tests.test_domainscalar.test_DomainScalar_unify()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_eigen.py----------------------------------------
A:sympy.polys.matrices.tests.test_eigen.A->DomainMatrix([[0, 0, 0, 0, -1], [1, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]], (5, 5), QQ)
A:sympy.polys.matrices.tests.test_eigen.Avects->dom_eigenvects(A)
A:sympy.polys.matrices.tests.test_eigen.irreducible->Poly(lamda ** 5 - lamda + 1, lamda, domain=QQ)
A:sympy.polys.matrices.tests.test_eigen.K->FiniteExtension(irreducible)
sympy.polys.matrices.tests.test_eigen.test_dom_eigenvects_algebraic()
sympy.polys.matrices.tests.test_eigen.test_dom_eigenvects_rational()
sympy.polys.matrices.tests.test_eigen.test_dom_eigenvects_rootof()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_sdm.py----------------------------------------
A:sympy.polys.matrices.tests.test_sdm.A->SDM({0: {0: QQ(1), 1: QQ(2), 2: QQ(3), 3: QQ(4)}, 1: {1: QQ(5), 2: QQ(6), 3: QQ(7)}, 2: {2: QQ(8), 3: QQ(9)}}, (3, 4), QQ).transpose()
A:sympy.polys.matrices.tests.test_sdm.sdm->SDM({0: {0: ZZ(1)}, 1: {1: ZZ(1)}}, (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_sdm.B->SDM({0: {0: QQ(1), 1: QQ(2), 2: QQ(3), 3: QQ(4)}, 1: {1: QQ(5), 2: QQ(6), 3: QQ(7)}, 2: {1: QQ(7), 2: QQ(8), 3: QQ(9)}}, (3, 4), QQ).transpose()
A:sympy.polys.matrices.tests.test_sdm.A[0][0]->ZZ(2)
A:sympy.polys.matrices.tests.test_sdm.C->SDM({0: {0: QQ(1), 1: QQ(2), 2: QQ(3), 3: QQ(4)}, 1: {1: QQ(5), 2: QQ(6), 3: QQ(7)}, 2: {2: QQ(8), 3: QQ(9)}}, (3, 4), QQ).transpose().convert_to(QQ)
A:sympy.polys.matrices.tests.test_sdm.Aq->SDM({0: {0: QQ(1), 1: QQ(2), 2: QQ(3), 3: QQ(4)}, 1: {1: QQ(5), 2: QQ(6), 3: QQ(7)}, 2: {2: QQ(8), 3: QQ(9)}}, (3, 4), QQ).transpose().convert_to(QQ)
A:sympy.polys.matrices.tests.test_sdm.A1->SDM({0: {0: ZZ(1)}}, (1, 1), ZZ)
A:sympy.polys.matrices.tests.test_sdm.A22->SDM({0: {0: ZZ(8)}}, (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_sdm.A32->SDM({0: {0: ZZ(2)}}, (3, 2), ZZ)
A:sympy.polys.matrices.tests.test_sdm.A23->SDM({0: {0: ZZ(4)}}, (2, 3), ZZ)
A:sympy.polys.matrices.tests.test_sdm.A33->SDM({0: {0: ZZ(8)}}, (3, 3), ZZ)
A:sympy.polys.matrices.tests.test_sdm.Ad->dm({0: {0: a, 1: b}, 1: {0: c, 1: d}})
A:sympy.polys.matrices.tests.test_sdm.Ad2->dm({0: {0: a * a + b * c, 1: a * b + b * d}, 1: {0: c * a + d * c, 1: c * b + d * d}})
A:sympy.polys.matrices.tests.test_sdm.D->SDM({0: {0: QQ(1), 1: QQ(2), 2: QQ(3), 3: QQ(4)}, 1: {1: QQ(5), 2: QQ(6), 3: QQ(7)}, 2: {2: QQ(8), 3: QQ(9)}}, (3, 4), QQ).transpose().convert_to(ZZ)
A:sympy.polys.matrices.tests.test_sdm.AA->SDM({0: {1: ZZ(1)}, 2: {1: ZZ(1)}}, (4, 2), ZZ)
A:sympy.polys.matrices.tests.test_sdm.AB->SDM({0: {1: ZZ(1)}, 3: {1: ZZ(1)}}, (4, 2), ZZ)
A:sympy.polys.matrices.tests.test_sdm.L->SDM({0: {0: QQ(1)}, 1: {0: QQ(3), 1: QQ(1)}}, (2, 2), QQ)
A:sympy.polys.matrices.tests.test_sdm.b->SDM({0: {0: QQ(1)}, 1: {0: QQ(2)}}, (2, 1), QQ)
A:sympy.polys.matrices.tests.test_sdm.x->SDM({1: {0: QQ(1, 2)}}, (2, 1), QQ)
A:sympy.polys.matrices.tests.test_sdm.eye2->SDM({0: {0: QQ(1)}, 1: {1: QQ(1)}}, (2, 2), QQ)
A:sympy.polys.matrices.tests.test_sdm.Arref->SDM({0: {0: QQ(1, 1)}, 1: {1: QQ(1, 1), 2: QQ(1, 1)}}, (2, 3), QQ)
A:sympy.polys.matrices.tests.test_sdm.Apart->sympy.polys.matrices.sdm.SDM.zeros((1, 2), QQ)
A:sympy.polys.matrices.tests.test_sdm.Azero->sympy.polys.matrices.sdm.SDM.zeros((1, 2), QQ)
sympy.polys.matrices.tests.test_sdm.test_DDM_str()
sympy.polys.matrices.tests.test_sdm.test_SDM()
sympy.polys.matrices.tests.test_sdm.test_SDM_add()
sympy.polys.matrices.tests.test_sdm.test_SDM_applyfunc()
sympy.polys.matrices.tests.test_sdm.test_SDM_charpoly()
sympy.polys.matrices.tests.test_sdm.test_SDM_convert_to()
sympy.polys.matrices.tests.test_sdm.test_SDM_copy()
sympy.polys.matrices.tests.test_sdm.test_SDM_det()
sympy.polys.matrices.tests.test_sdm.test_SDM_diag()
sympy.polys.matrices.tests.test_sdm.test_SDM_extract()
sympy.polys.matrices.tests.test_sdm.test_SDM_extract_slice()
sympy.polys.matrices.tests.test_sdm.test_SDM_eye()
sympy.polys.matrices.tests.test_sdm.test_SDM_from_ddm()
sympy.polys.matrices.tests.test_sdm.test_SDM_from_list()
sympy.polys.matrices.tests.test_sdm.test_SDM_getitem()
sympy.polys.matrices.tests.test_sdm.test_SDM_hstack()
sympy.polys.matrices.tests.test_sdm.test_SDM_inv()
sympy.polys.matrices.tests.test_sdm.test_SDM_is_lower()
sympy.polys.matrices.tests.test_sdm.test_SDM_is_upper()
sympy.polys.matrices.tests.test_sdm.test_SDM_is_zero_matrix()
sympy.polys.matrices.tests.test_sdm.test_SDM_lu()
sympy.polys.matrices.tests.test_sdm.test_SDM_lu_solve()
sympy.polys.matrices.tests.test_sdm.test_SDM_matmul()
sympy.polys.matrices.tests.test_sdm.test_SDM_mul()
sympy.polys.matrices.tests.test_sdm.test_SDM_mul_elementwise()
sympy.polys.matrices.tests.test_sdm.test_SDM_neg()
sympy.polys.matrices.tests.test_sdm.test_SDM_new()
sympy.polys.matrices.tests.test_sdm.test_SDM_nullspace()
sympy.polys.matrices.tests.test_sdm.test_SDM_ones()
sympy.polys.matrices.tests.test_sdm.test_SDM_particular()
sympy.polys.matrices.tests.test_sdm.test_SDM_rref()
sympy.polys.matrices.tests.test_sdm.test_SDM_setitem()
sympy.polys.matrices.tests.test_sdm.test_SDM_sub()
sympy.polys.matrices.tests.test_sdm.test_SDM_to_ddm()
sympy.polys.matrices.tests.test_sdm.test_SDM_to_dok()
sympy.polys.matrices.tests.test_sdm.test_SDM_to_list()
sympy.polys.matrices.tests.test_sdm.test_SDM_to_list_flat()
sympy.polys.matrices.tests.test_sdm.test_SDM_to_sdm()
sympy.polys.matrices.tests.test_sdm.test_SDM_transpose()
sympy.polys.matrices.tests.test_sdm.test_SDM_vstack()
sympy.polys.matrices.tests.test_sdm.test_SDM_zeros()
sympy.polys.matrices.tests.test_sdm.test_matmul_exraw()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_ddm.py----------------------------------------
A:sympy.polys.matrices.tests.test_ddm.ddm->DDM([[QQ(1)], [QQ(2)]], (2, 1), QQ)
A:sympy.polys.matrices.tests.test_ddm.ddm[0][0]->ZZ(-1)
A:sympy.polys.matrices.tests.test_ddm.ddm1->DDM([[QQ(1)], [QQ(2)]], (2, 1), QQ)
A:sympy.polys.matrices.tests.test_ddm.ddm2->DDM([[QQ(1)], [QQ(2)]], (2, 1), QQ).copy()
A:sympy.polys.matrices.tests.test_ddm.ddm3->DDM(items, (2, 2), QQ)
A:sympy.polys.matrices.tests.test_ddm.ddmq->DDM([[QQ(1)], [QQ(2)]], (2, 1), QQ).convert_to(QQ)
A:sympy.polys.matrices.tests.test_ddm.ddmz->sympy.polys.matrices.ddm.DDM.eye(3, QQ)
A:sympy.polys.matrices.tests.test_ddm.ddmone->sympy.polys.matrices.ddm.DDM.ones((2, 3), QQ)
A:sympy.polys.matrices.tests.test_ddm.ddm1[0][0]->QQ(-1)
A:sympy.polys.matrices.tests.test_ddm.ddm2[0][0]->QQ(-1)
A:sympy.polys.matrices.tests.test_ddm.ddmT->DDM([[QQ(1), QQ(2)]], (1, 2), QQ)
A:sympy.polys.matrices.tests.test_ddm.ddm02->DDM([], (0, 2), QQ)
A:sympy.polys.matrices.tests.test_ddm.ddm02T->DDM([[], []], (2, 0), QQ)
A:sympy.polys.matrices.tests.test_ddm.ddm0->DDM([], (0, 0), QQ)
A:sympy.polys.matrices.tests.test_ddm.A->DDM([[QQ(1), QQ(2), QQ(3)], [QQ(0), QQ(5), QQ(6)], [QQ(0), QQ(0), QQ(8)], [QQ(0), QQ(0), QQ(0)]], (4, 3), QQ).transpose()
A:sympy.polys.matrices.tests.test_ddm.B->DDM([[QQ(1), QQ(2), QQ(3)], [QQ(0), QQ(5), QQ(6)], [QQ(0), QQ(0), QQ(8)], [QQ(0), QQ(0), QQ(10)]], (4, 3), QQ).transpose()
A:sympy.polys.matrices.tests.test_ddm.C->DDM([[ZZ(6)]], (1, 1), ZZ)
A:sympy.polys.matrices.tests.test_ddm.AQ->DDM([[QQ(1)], [QQ(2)]], (2, 1), QQ)
A:sympy.polys.matrices.tests.test_ddm.D->DDM([[ZZ(5)]], (1, 1), ZZ)
A:sympy.polys.matrices.tests.test_ddm.An->DDM([[ZZ(-1)], [ZZ(-2)]], (2, 1), ZZ)
A:sympy.polys.matrices.tests.test_ddm.A2->DDM([[ZZ(2)]], (1, 1), ZZ)
A:sympy.polys.matrices.tests.test_ddm.AB->DDM([[ZZ(3), ZZ(4)], [ZZ(6), ZZ(8)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_ddm.BA->DDM([[ZZ(11)]], (1, 1), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Bq->DDM([[QQ(3), QQ(4)]], (1, 2), QQ)
A:sympy.polys.matrices.tests.test_ddm.Z04->DDM([], (0, 4), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Z40->DDM([[]] * 4, (4, 0), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Z50->DDM([[]] * 5, (5, 0), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Z05->DDM([], (0, 5), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Z45->DDM([[0] * 5] * 4, (4, 5), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Z54->DDM([[0] * 4] * 5, (5, 4), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Z00->DDM([], (0, 0), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Ah->DDM([[QQ(1), QQ(2), QQ(3)], [QQ(0), QQ(5), QQ(6)], [QQ(0), QQ(0), QQ(8)], [QQ(0), QQ(0), QQ(0)]], (4, 3), QQ).transpose().vstack(B, C)
A:sympy.polys.matrices.tests.test_ddm.Ar->DDM([[QQ(1), QQ(0), QQ(0)], [QQ(0), QQ(0), QQ(1)]], (2, 3), QQ)
A:sympy.polys.matrices.tests.test_ddm.Anull->DDM([[QQ(-1), QQ(1)]], (1, 2), QQ)
A:sympy.polys.matrices.tests.test_ddm.Ainv->DDM([[QQ(-2, 1), QQ(1, 1)], [QQ(3, 2), QQ(-1, 2)]], (2, 2), QQ)
A:sympy.polys.matrices.tests.test_ddm.(L, U, swaps)->DDM([[QQ(1), QQ(2), QQ(3)], [QQ(0), QQ(5), QQ(6)], [QQ(0), QQ(0), QQ(8)], [QQ(0), QQ(0), QQ(0)]], (4, 3), QQ).transpose().lu()
A:sympy.polys.matrices.tests.test_ddm.Lexp->DDM(to_dom(Lexp, QQ), (4, 4), QQ)
A:sympy.polys.matrices.tests.test_ddm.Uexp->DDM(to_dom(Uexp, QQ), (4, 4), QQ)
A:sympy.polys.matrices.tests.test_ddm.b->DDM([[QQ(3)]], (1, 1), QQ)
A:sympy.polys.matrices.tests.test_ddm.x->DDM([[QQ(0)], [QQ(1, 2)]], (2, 1), QQ)
A:sympy.polys.matrices.tests.test_ddm.bz->DDM([[ZZ(1)], [ZZ(2)]], (2, 1), ZZ)
A:sympy.polys.matrices.tests.test_ddm.b3->DDM([[QQ(1)], [QQ(2)], [QQ(3)]], (3, 1), QQ)
A:sympy.polys.matrices.tests.test_ddm.dm->DDM([[ZZ(6), ZZ(4)], [ZZ(3), ZZ(1)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_ddm.dm1->DDM([[ZZ(1), ZZ(2), ZZ(3)], [ZZ(4), ZZ(5), ZZ(6)], [ZZ(7), ZZ(8), ZZ(9)]], (3, 3), ZZ)
A:sympy.polys.matrices.tests.test_ddm.dm2->DDM([[ZZ(6), ZZ(4)], [ZZ(3), ZZ(1)]], (2, 2), ZZ)
A:sympy.polys.matrices.tests.test_ddm.Azero->sympy.polys.matrices.ddm.DDM.zeros((1, 2), QQ)
sympy.polys.matrices.tests.test_ddm.test_DDM_add()
sympy.polys.matrices.tests.test_ddm.test_DDM_applyfunc()
sympy.polys.matrices.tests.test_ddm.test_DDM_charpoly()
sympy.polys.matrices.tests.test_ddm.test_DDM_convert_to()
sympy.polys.matrices.tests.test_ddm.test_DDM_copy()
sympy.polys.matrices.tests.test_ddm.test_DDM_det()
sympy.polys.matrices.tests.test_ddm.test_DDM_eq()
sympy.polys.matrices.tests.test_ddm.test_DDM_extract()
sympy.polys.matrices.tests.test_ddm.test_DDM_extract_slice()
sympy.polys.matrices.tests.test_ddm.test_DDM_eye()
sympy.polys.matrices.tests.test_ddm.test_DDM_flat()
sympy.polys.matrices.tests.test_ddm.test_DDM_getitem()
sympy.polys.matrices.tests.test_ddm.test_DDM_getsetitem()
sympy.polys.matrices.tests.test_ddm.test_DDM_hstack()
sympy.polys.matrices.tests.test_ddm.test_DDM_init()
sympy.polys.matrices.tests.test_ddm.test_DDM_inv()
sympy.polys.matrices.tests.test_ddm.test_DDM_is_lower()
sympy.polys.matrices.tests.test_ddm.test_DDM_is_upper()
sympy.polys.matrices.tests.test_ddm.test_DDM_is_zero_matrix()
sympy.polys.matrices.tests.test_ddm.test_DDM_lu()
sympy.polys.matrices.tests.test_ddm.test_DDM_lu_solve()
sympy.polys.matrices.tests.test_ddm.test_DDM_matmul()
sympy.polys.matrices.tests.test_ddm.test_DDM_mul()
sympy.polys.matrices.tests.test_ddm.test_DDM_neg()
sympy.polys.matrices.tests.test_ddm.test_DDM_nullspace()
sympy.polys.matrices.tests.test_ddm.test_DDM_ones()
sympy.polys.matrices.tests.test_ddm.test_DDM_particular()
sympy.polys.matrices.tests.test_ddm.test_DDM_rref()
sympy.polys.matrices.tests.test_ddm.test_DDM_setitem()
sympy.polys.matrices.tests.test_ddm.test_DDM_str()
sympy.polys.matrices.tests.test_ddm.test_DDM_sub()
sympy.polys.matrices.tests.test_ddm.test_DDM_transpose()
sympy.polys.matrices.tests.test_ddm.test_DDM_vstack()
sympy.polys.matrices.tests.test_ddm.test_DDM_zeros()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_dense.py----------------------------------------
A:sympy.polys.matrices.tests.test_dense.swaps->ddm_ilu_split(L, U, QQ)
A:sympy.polys.matrices.tests.test_dense.b->DDM([[QQ(3)]], (1, 1), QQ)
A:sympy.polys.matrices.tests.test_dense.x->DDM([[QQ(0)], [QQ(0)]], (2, 1), QQ)
A:sympy.polys.matrices.tests.test_dense.xexp->DDM([[QQ(0)], [QQ(1, 2)]], (2, 1), QQ)
A:sympy.polys.matrices.tests.test_dense.b3->DDM([[QQ(1)], [QQ(2)], [QQ(3)]], (3, 1), QQ)
A:sympy.polys.matrices.tests.test_dense.A->DDM([[ZZ(1), ZZ(2)]], (1, 2), ZZ)
sympy.polys.matrices.tests.test_dense.test_ddm_charpoly()
sympy.polys.matrices.tests.test_dense.test_ddm_iadd()
sympy.polys.matrices.tests.test_dense.test_ddm_idet()
sympy.polys.matrices.tests.test_dense.test_ddm_ilu()
sympy.polys.matrices.tests.test_dense.test_ddm_ilu_solve()
sympy.polys.matrices.tests.test_dense.test_ddm_ilu_split()
sympy.polys.matrices.tests.test_dense.test_ddm_imatmul()
sympy.polys.matrices.tests.test_dense.test_ddm_ineg()
sympy.polys.matrices.tests.test_dense.test_ddm_inv()
sympy.polys.matrices.tests.test_dense.test_ddm_irref()
sympy.polys.matrices.tests.test_dense.test_ddm_isub()
sympy.polys.matrices.tests.test_dense.test_ddm_matmul()
sympy.polys.matrices.tests.test_dense.test_ddm_transpose()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/matrices/tests/test_lll.py----------------------------------------
A:sympy.polys.matrices.tests.test_lll.delta->QQ(5, 6)
A:sympy.polys.matrices.tests.test_lll.reduced->basis_dm.lll(delta=delta)
A:sympy.polys.matrices.tests.test_lll.(reduced, transform)->basis_dm.lll_transform(delta=delta)
A:sympy.polys.matrices.tests.test_lll.dummy_matrix->sympy.polys.matrices.domainmatrix.DomainMatrix.ones((3, 3), ZZ)
A:sympy.polys.matrices.tests.test_lll.wrong_shape_matrix->sympy.polys.matrices.domainmatrix.DomainMatrix.ones((4, 3), ZZ)
A:sympy.polys.matrices.tests.test_lll.wrong_domain_matrix->sympy.polys.matrices.domainmatrix.DomainMatrix.ones((3, 3), QQ)
sympy.polys.matrices.tests.test_lll.test_lll()
sympy.polys.matrices.tests.test_lll.test_lll_linear_dependent()
sympy.polys.matrices.tests.test_lll.test_lll_wrong_delta()
sympy.polys.matrices.tests.test_lll.test_lll_wrong_domain()
sympy.polys.matrices.tests.test_lll.test_lll_wrong_shape()


----------------------------------------/home/zhang/Packages/sympy/sympy1.12rc1/polys/numberfields/galoisgroups.py----------------------------------------
A:sympy.polys.numberfields.galoisgroups.X->symbols('X0 X1 X2 X3')
A:sympy.polys.numberfields.galoisgroups.n->T.degree()
A:sympy.polys.numberfields.galoisgroups.history->set()
A:sympy.polys.numberfields.galoisgroups.gen->get_coeff_generator(current_degree)
A:sympy.polys.numberfields.galoisgroups.coeffs->next(gen)
A:sympy.polys.numberfields.galoisgroups.m->max((abs(c) for c in coeffs))
A:sympy.polys.numberfields.galoisgroups.C->min(i // 5 + 1, max_coeff)
A:sympy.polys.numberfields.galoisgroups.d->dup_discriminant(R_dup, ZZ)
A:sympy.polys.numberfields.galoisgroups.a->dup_random(d, -C, C, ZZ)
A:sympy.polys.numberfields.galoisgroups.A->Poly(a, T.gen)
A:sympy.polys.numberfields.galoisgroups.U->Poly(T.resultant(X - A), X)
A:sympy.polys.numberfields.galoisgroups.R1->Resolvent(F1, X, s1)
A:sympy.polys.numberfields.galoisgroups.(_, T)->tschirnhausen_transformation(T, max_tries=max_tries, history=history, fixed_order=not randomize)
A:sympy.polys.numberfields.galoisgroups.(R_dup, _, i0)->Resolvent(F1, X, s1).eval_for_poly(T, find_integer_root=True)
A:sympy.polys.numberfields.galoisgroups.sq_disc->has_square_disc(T)
A:sympy.polys.numberfields.galoisgroups.F2->F2_pre.subs(zip(X, sigma(X)), simultaneous=True)
A:sympy.polys.numberfields.galoisgroups.R2->Resolvent(F2, X, s2)
A:sympy.polys.numberfields.galoisgroups.(R_dup, _, _)->Resolvent(F2, X, s2).eval_for_poly(T)
A:sympy.polys.numberfields.galoisgroups.R_dup->get_resolvent_by_lookup(T, 2)
A:sympy.polys.numberfields.galoisgroups.fl->dup_factor_list(R_dup, ZZ)
A:sympy.polys.numberfields.galoisgroups.L->sorted(sum([[d] * len(ff) for (d, ff) in factors_by_deg.items()], []))
A:sympy.polys.numberfields.galoisgroups.X5->symbols('X0,X1,X2,X3,X4')
A:sympy.polys.numberfields.galoisgroups.res->define_resolvents()
A:sympy.polys.numberfields.galoisgroups.F51->F51.as_expr(*X5).as_expr(*X5)
A:sympy.polys.numberfields.galoisgroups.R51->Resolvent(F51, X5, s51)
A:sympy.polys.numberfields.galoisgroups.R51_dup->get_resolvent_by_lookup(T, 1)
A:sympy.polys.numberfields.galoisgroups.rounded_roots->Resolvent(F51, X5, s51).round_roots_to_integers_for_poly(T)
A:sympy.polys.numberfields.galoisgroups.factors_by_deg->defaultdict(list)
A:sympy.polys.numberfields.galoisgroups.T_has_sq_disc->has_square_disc(T)
A:sympy.polys.numberfields.galoisgroups.(F, opt)->poly_from_expr(f, *gens, **args)
sympy.galois_group(f,*gens,by_name=False,max_tries=30,randomize=False,**args)
sympy.polys.numberfields.galoisgroups.MaxTriesException(GaloisGroupException)
sympy.polys.numberfields.galoisgroups._galois_group_degree_3(T,max_tries=30,randomize=False)
sympy.polys.numberfields.galoisgroups._galois_group_degree_4_lookup(T,max_tries=30,randomize=False)
sympy.polys.numberfields.galoisgroups._galois_group_degree_4_root_approx(T,max_tries=30,randomize=False)
sympy.polys.numberfields.galoisgroups._galois_group_degree_5_hybrid(T,max_tries=30,randomize=False)
sympy.polys.numberfields.galoisgroups._galois_group_degree_5_lookup_ext_factor(T,max_tries=30,randomize=False)
sympy.polys.numberfields.galoisgroups._galois_group_degree_6_lookup(T,max_tries=30,randomize=False)
sympy.polys.numberfields.galoisgroups.galois_group(f,*gens,by_name=False,max_tries=30,randomize=False,**args)
sympy.polys.numberfields.galoisgroups.has_square_disc(T)
sympy.polys.numberfields.galoisgroups.tschirnhausen_transformation(T,max_coeff=10,max_tries=30,history=None,fixed_order=True)

